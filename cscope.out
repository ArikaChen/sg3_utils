cscope 15 $HOME/rpmbuild/BUILD/sg3_utils-1.36               0002066758
	@archive/llseek.c

12 
	~"c⁄fig.h
"

14 
	#_XOPEN_SOURCE
 500

	)

15 
	#_GNU_SOURCE


	)

17 
	~<sys/ty≥s.h
>

19 
	~<î∫o.h
>

20 
	~<uni°d.h
>

22 #i‡
deföed
(
__GNUC__
Ë|| deföed(
HAS_LONG_LONG
)

23 
öt64_t
 
	tŒ£_loff_t
;

25 
	tŒ£_loff_t
;

28 
Œ£_loff_t
 
Œ£_Œ£ek
 (,Ülse_loff_t, );

30 #ifde‡
__löux__


32 #ifde‡
HAVE_LLSEEK


33 
	~<sysˇŒ.h
>

37 #i‡
deföed
(
__Æpha__
Ë|| deföed(
__ü64__
Ë|| deföed(
__s390x__
Ë|| deföed (
__x86_64__
Ë|| deföed (
__powîpc64__
)

39 
	#my_Œ£ek
 
l£ek


	)

42 
	~<löux/uni°d.h
>

44 
_Œ£ek
 (, ,

45 , 
Œ£_loff_t
 *, );

47 #ifde‡
__NR__Œ£ek


49 
	$_sysˇŒ5
(,
_Œ£ek
,,
fd
,,
off£t_high
,

50 , 
off£t_low
,
Œ£_loff_t
 *,
ªsu…
,

51 , 
‹igö
)

56 
	$_Œ£ek
 (
fd
, 
oh
,

57 
ﬁ
, 
Œ£_loff_t
 *
ªsu…
,

58 
‹igö
) {

59 
î∫o
 = 
ENOSYS
;

61 
	}
}

65 
Œ£_loff_t
 
	$my_Œ£ek
 (
fd
, 
Œ£_loff_t
 
off£t
,

66 
‹igö
)

68 
Œ£_loff_t
 
ªsu…
;

69 
ªtvÆ
;

71 #ifde‡
HAVE_LSEEK64


72  
	`l£ek64
 (
fd
, 
off£t
, 
‹igö
);

74 
ªtvÆ
 = 
	`_Œ£ek
 (
fd
, ((
uöt64_t
Ë
off£t
) >> 32,

75 ((
uöt64_t
Ë
off£t
) & 0xffffffff,

76 &
ªsu…
, 
‹igö
);

77  (
ªtvÆ
 =-1 ? (
Œ£_loff_t
ËªtvÆ : 
ªsu…
);

79 
	}
}

85 
Œ£_loff_t
 
	$Œ£_Œ£ek
 (
fd
, 
Œ£_loff_t
 
off£t
,

86 
‹igö
)

88 
Œ£_loff_t
 
ªsu…
;

89 
do_com∑t
 = 0;

91 i‡(!
do_com∑t
) {

92 
ªsu…
 = 
	`my_Œ£ek
 (
fd
, 
off£t
, 
‹igö
);

93 i‡(!(
ªsu…
 =-1 && 
î∫o
 =
ENOSYS
))

94  
ªsu…
;

100 
do_com∑t
 = 1;

106 i‡(((
off_t
Ë>(
Œ£_loff_t
)) ||

107 (
off£t
 < ((
Œ£_loff_t
Ë1 << (((
off_t
)*8) -1))))

108  
	`l£ek
(
fd
, (
off_t
Ë
off£t
, 
‹igö
);

110 
î∫o
 = 
EINVAL
;

112 
	}
}

116 
Œ£_loff_t
 
	$Œ£_Œ£ek
 (
fd
, 
Œ£_loff_t
 
off£t
,

117 
‹igö
)

119 i‡(((
off_t
Ë< (
Œ£_loff_t
)) &&

120 (
off£t
 >((
Œ£_loff_t
Ë1 << (((
off_t
)*8) -1)))) {

121 
î∫o
 = 
EINVAL
;

124  
	`l£ek
 (
fd
, (
off_t
Ë
off£t
, 
‹igö
);

125 
	}
}

	@archive/llseek.h

1 #i‚de‡
LLSEEK_H


2 
	#LLSEEK_H


	)

4 #i‡
deföed
(
__GNUC__
Ë|| deföed(
HAS_LONG_LONG
)

5 
öt64_t
 
	tŒ£_loff_t
;

7 
	tŒ£_loff_t
;

10 
Œ£_loff_t
 
Œ£_Œ£ek
(
fd
,

11 
Œ£_loff_t
 
off£t
,

12 
‹igö
);

	@config.h

5 
	#HAVE_DLFCN_H
 1

	)

8 
	#HAVE_GETOPT_LONG
 1

	)

11 
	#HAVE_INTTYPES_H
 1

	)

14 
	#HAVE_LINUX_BSG_H
 1

	)

17 
	#HAVE_LINUX_KDEV_T_H
 1

	)

20 
	#HAVE_LINUX_TYPES_H
 1

	)

23 
	#HAVE_LSEEK64
 1

	)

26 
	#HAVE_MEMORY_H
 1

	)

29 
	#HAVE_POSIX_FADVISE
 1

	)

32 
	#HAVE_STDINT_H
 1

	)

35 
	#HAVE_STDLIB_H
 1

	)

38 
	#HAVE_STRINGS_H
 1

	)

41 
	#HAVE_STRING_H
 1

	)

44 
	#HAVE_SYS_STAT_H
 1

	)

47 
	#HAVE_SYS_TYPES_H
 1

	)

50 
	#HAVE_UNISTD_H
 1

	)

57 
	#LT_OBJDIR
 ".libs/"

	)

60 
	#PACKAGE
 "sg3_utûs"

	)

63 
	#PACKAGE_BUGREPORT
 "dgûbît@öãæog.com"

	)

66 
	#PACKAGE_NAME
 "sg3_utûs"

	)

69 
	#PACKAGE_STRING
 "sg3_utû†1.36"

	)

72 
	#PACKAGE_TARNAME
 "sg3_utûs"

	)

75 
	#PACKAGE_URL
 ""

	)

78 
	#PACKAGE_VERSION
 "1.36"

	)

81 
	#SG_LIB_BUILD_HOST
 "x86_64-unknown-löux-gnu"

	)

87 
	#SG_LIB_LINUX
 1

	)

102 
	#SG_SCSI_STRINGS
 1

	)

105 
	#STDC_HEADERS
 1

	)

108 
	#VERSION
 "1.36"

	)

	@examples/bsg_queue_tst.c

1 
	~<uni°d.h
>

2 
	~<f˙é.h
>

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<î∫o.h
>

7 
	~<sys/io˘l.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/°©.h
>

12 
	~<löux/bsg.h
>

15 
	~"sg_lib.h
"

16 
	~"sg_io_löux.h
"

17 
	~"sg_löux_öc.h
"

36 
	#INQ_REPLY_LEN
 96

	)

37 
	#INQ_CMD_LEN
 6

	)

38 
	#SDIAG_CMD_LEN
 6

	)

39 
	#SENSE_BUFFER_LEN
 96

	)

41 
	#EBUFF_SZ
 256

	)

43 #i‚de‡
BSG_FLAG_Q_AT_TAIL


44 
	#BSG_FLAG_Q_AT_TAIL
 0x10

	)

47 #i‚de‡
BSG_FLAG_Q_AT_HEAD


48 
	#BSG_FLAG_Q_AT_HEAD
 0x20

	)

52 
	$maö
(
¨gc
, * 
¨gv
[])

54 
bsg_fd
, 
k
, 
ok
;

55 
öqCmdBlk
[
INQ_CMD_LEN
] =

56 {0x12, 0, 0, 0, 
INQ_REPLY_LEN
, 0};

57 
sdügCmdBlk
[
SDIAG_CMD_LEN
] =

59 
öqBuff
[16][
INQ_REPLY_LEN
];

60 
sg_io_v4
 
io_hdr
[16];

61 
sg_io_v4
 
rio_hdr
;

62 * 
fûe_«me
 = 0;

63 
ebuff
[
EBUFF_SZ
];

64 
£n£_buf„r
[16][
SENSE_BUFFER_LEN
];

65 
q_©_èû
 = 0;

67 
k
 = 1; k < 
¨gc
; ++k) {

68 i‡(0 =
	`memcmp
("-t", 
¨gv
[
k
], 2))

69 ++
q_©_èû
;

70 i‡(*
¨gv
[
k
] == '-') {

71 
	`¥ötf
("Uƒecognized swôch: %s\n", 
¨gv
[
k
]);

72 
fûe_«me
 = 0;

75 i‡(0 =
fûe_«me
)

76 
fûe_«me
 = 
¨gv
[
k
];

78 
	`¥ötf
("too manyárguments\n");

79 
fûe_«me
 = 0;

83 i‡(0 =
fûe_«me
) {

84 
	`¥ötf
("Usage: 'bsg_queue_tst [-t] <bsg_device>'\n"

90 i‡((
bsg_fd
 = 
	`›í
(
fûe_«me
, 
O_RDWR
)) < 0) {

91 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

92 "bsg_queue_t°:Éº‹ o≥nög fûe: %s", 
fûe_«me
);

93 
	`≥º‹
(
ebuff
);

97 
k
 = 0; k < 16; ++k) {

99 
	`mem£t
(&
io_hdr
[
k
], 0, (
sg_io_v4
));

100 
io_hdr
[
k
].
gu¨d
 = 'Q';

102 i‡(0 =(
k
 % 3)) {

103 
io_hdr
[
k
].
ªque°_Àn
 = (
sdügCmdBlk
);

104 
io_hdr
[
k
].
ªque°
 = (
uöt64_t
)()
sdügCmdBlk
;

106 
io_hdr
[
k
].
ªque°_Àn
 = (
öqCmdBlk
);

107 
io_hdr
[
k
].
ªque°
 = (
uöt64_t
)()
öqCmdBlk
;

108 
io_hdr
[
k
].
dö_x„r_Àn
 = 
INQ_REPLY_LEN
;

109 
io_hdr
[
k
].
dö_x„Ω
 = (
uöt64_t
)()
öqBuff
[k];

111 
io_hdr
[
k
].
ª•⁄£
 = (
uöt64_t
)()
£n£_buf„r
[k];

112 
io_hdr
[
k
].
max_ª•⁄£_Àn
 = 
SENSE_BUFFER_LEN
;

113 
io_hdr
[
k
].
timeout
 = 20000;

114 
io_hdr
[
k
].
u§_±r
 = k;

116 i‡(
q_©_èû
)

117 
io_hdr
[
k
].
Êags
 |
BSG_FLAG_Q_AT_TAIL
;

119 
io_hdr
[
k
].
Êags
 |
BSG_FLAG_Q_AT_HEAD
;

121 i‡(
	`wrôe
(
bsg_fd
, &
io_hdr
[
k
], (
sg_io_v4
)) < 0) {

122 
	`≥º‹
("bsg_queue_tst: bsg writeÉrror");

123 
	`˛o£
(
bsg_fd
);

128 
k
 = 0; k < 16; ++k) {

129 
	`mem£t
(&
rio_hdr
, 0, (
sg_io_v4
));

130 
rio_hdr
.
gu¨d
 = 'Q';

131 i‡(
	`ªad
(
bsg_fd
, &
rio_hdr
, (
sg_io_v4
)) < 0) {

132 
	`≥º‹
("bsg_queue_tst: bsgÑeadÉrror");

133 
	`˛o£
(
bsg_fd
);

137 
ok
 = 0;

138 i‡(0 =
rio_hdr
.
devi˚_°©us
)

139 
ok
 = 1;

141 
	`sg_îr_ˇãg‹y_£n£
((*)()

142 
rio_hdr
.
ª•⁄£
,Ñio_hdr.
ª•⁄£_Àn
)) {

143 
SG_LIB_CAT_CLEAN
:

144 
ok
 = 1;

146 
SG_LIB_CAT_RECOVERED
:

147 
	`¥ötf
("RecoveredÉrror, continuing\n");

148 
ok
 = 1;

151 
	`sg_¥öt_£n£
("commandÉrror",

152 (*)()
rio_hdr
.
ª•⁄£
,

153 
rio_hdr
.
ª•⁄£_Àn
, 1);

158 i‡(
ok
) {

160 i‡(0 =(
rio_hdr
.
u§_±r
 % 3))

161 
	`¥ötf
("SEND DIAGNOSTIC %d duration=%u\n",

162 ()
rio_hdr
.
u§_±r
,Ñio_hdr.
duøti⁄
);

164 
	`¥ötf
("INQUIRY %d duøti⁄=%u\n", ()
rio_hdr
.
u§_±r
,

165 
rio_hdr
.
duøti⁄
);

169 
	`˛o£
(
bsg_fd
);

171 
	}
}

	@examples/scsi_inquiry.c

1 
	~<uni°d.h
>

2 
	~<sig«l.h
>

3 
	~<f˙é.h
>

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<°rög.h
>

7 
	~<î∫o.h
>

8 
	~<sys/io˘l.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<sys/°©.h
>

11 
	~<scsi/scsi.h
>

33 
	smy_scsi_io˘l_comm™d
 {

34 
	möÀn
;

35 
	mouéí
;

36 
	md©a
[1];

38 } 
	tMy_Scsi_Io˘l_Comm™d
;

40 
	#OFF
 (2 * ())

	)

42 #i‚de‡
SCSI_IOCTL_SEND_COMMAND


43 
	#SCSI_IOCTL_SEND_COMMAND
 1

	)

46 
	#INQUIRY_CMD
 0x12

	)

47 
	#INQUIRY_CMDLEN
 6

	)

48 
	#INQUIRY_REPLY_LEN
 96

	)

51 
	$maö
(
¨gc
, * 
¨gv
[])

53 
s_fd
, 
ªs
, 
k
, 
to
;

54 
öqCmdBlk
 [
INQUIRY_CMDLEN
] = {
INQUIRY_CMD
, 0, 0, 0,

55 
INQUIRY_REPLY_LEN
, 0};

56 * 
öqBuff
 = (*)

57 
	`mÆloc
(
OFF
 + (
öqCmdBlk
) + 512);

58 * 
bufÂ
 = 
öqBuff
 + 
OFF
;

59 
My_Scsi_Io˘l_Comm™d
 * 
ishp
 = (My_Scsi_Io˘l_Comm™d *)
öqBuff
;

60 * 
fûe_«me
 = 0;

61 
do_n⁄block
 = 0;

62 
oÊags
 = 0;

64 
k
 = 1; k < 
¨gc
; ++k) {

65 i‡(0 =
	`°rcmp
(
¨gv
[
k
], "-n"))

66 
do_n⁄block
 = 1;

67 i‡(*
¨gv
[
k
] != '-')

68 
fûe_«me
 = 
¨gv
[
k
];

70 
	`¥ötf
("Uƒecognizedárgumíà'%s'\n", 
¨gv
[
k
]);

71 
fûe_«me
 = 0;

75 i‡(0 =
fûe_«me
) {

76 
	`¥ötf
("Usage: 'scsi_inquiry [-n] <scsi_device>'\n");

77 
	`¥ötf
(" where: -n open device inÇon-blocking mode\n");

78 
	`¥ötf
(" Examples: scsi_inquiry /dev/sda\n");

79 
	`¥ötf
(" scsi_inquiry /dev/sg0\n");

80 
	`¥ötf
(" scsi_inquiry -n /dev/scd0\n");

84 i‡(
do_n⁄block
)

85 
oÊags
 = 
O_NONBLOCK
;

86 
s_fd
 = 
	`›í
(
fûe_«me
, 
oÊags
 | 
O_RDWR
);

87 i‡(
s_fd
 < 0) {

88 i‡((
EROFS
 =
î∫o
Ë|| (
EACCES
 ==Érrno)) {

89 
s_fd
 = 
	`›í
(
fûe_«me
, 
oÊags
 | 
O_RDONLY
);

90 i‡(
s_fd
 < 0) {

91 
	`≥º‹
("scsi_inquiry: openÉrror");

96 
	`≥º‹
("scsi_inquiry: openÉrror");

101 
ªs
 = 
	`io˘l
(
s_fd
, 
SCSI_IOCTL_GET_BUS_NUMBER
, &
to
);

102 i‡(
ªs
 < 0) {

104 
	`¥ötf
("scsi_inquiry:Çotá scsi device\n");

108 
ishp
->
öÀn
 = 0;

109 
ishp
->
ouéí
 = 
INQUIRY_REPLY_LEN
;

110 
	`mem˝y
(
bufÂ
, 
öqCmdBlk
, 
INQUIRY_CMDLEN
);

111 
ªs
 = 
	`io˘l
(
s_fd
, 
SCSI_IOCTL_SEND_COMMAND
, 
öqBuff
);

112 i‡(0 =
ªs
) {

113 
to
 = ()*(
bufÂ
 + 7);

114 
	`¥ötf
(" %.8† %.16† %.4s, byã_7=0x%x\n", 
bufÂ
 + 8,

115 
bufÂ
 + 16, bufÂ + 32, 
to
);

117 i‡(
ªs
 < 0)

118 
	`≥º‹
("scsi_inquiry: SCSI_IOCTL_SEND_COMMANDÉrr");

120 
	`¥ötf
("scsi_öquúy: SCSI_IOCTL_SEND_COMMAND sètus=0x%x\n", 
ªs
);

122 
ªs
 = 
	`˛o£
(
s_fd
);

123 i‡(
ªs
 < 0) {

124 
	`≥º‹
("scsi_inquiry: closeÉrror");

128 
	}
}

	@examples/sg__sat_identify.c

30 
	~<uni°d.h
>

31 
	~<f˙é.h
>

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<°rög.h
>

35 
	~<î∫o.h
>

36 
	~<sys/io˘l.h
>

37 
	~<sys/ty≥s.h
>

38 
	~<sys/°©.h
>

39 
	~"sg_lib.h
"

40 
	~"sg_io_löux.h
"

57 
	#SAT_ATA_PASS_THROUGH16
 0x85

	)

58 
	#SAT_ATA_PASS_THROUGH16_LEN
 16

	)

59 
	#SAT_ATA_RETURN_DESC
 9

	)

61 
	#ATA_IDENTIFY_DEVICE
 0xec

	)

62 
	#ATA_IDENTIFY_PACKET_DEVICE
 0xa1

	)

63 
	#ID_RESPONSE_LEN
 512

	)

65 
	#EBUFF_SZ
 256

	)

67 * 
	gvîsi⁄_°r
 = "1.02 20070130";

69 
	$ußge
()

71 
	`Ârötf
(
°dîr
, "Usage: "

79 
	}
}

81 
	$maö
(
¨gc
, * 
¨gv
[])

83 
sg_fd
, 
k
, 
ok
;

84 
≠tCmdBlk
[
SAT_ATA_PASS_THROUGH16_LEN
] =

85 {
SAT_ATA_PASS_THROUGH16
, 0, 0, 0, 0, 0, 0, 0,

87 
sg_io_hdr_t
 
io_hdr
;

88 * 
fûe_«me
 = 0;

89 
ebuff
[
EBUFF_SZ
];

90 
öBuff
[
ID_RESPONSE_LEN
];

91 
£n£_buf„r
[32];

92 
do_∑ckë
 = 0;

93 
vîbo£
 = 0;

94 
exãnd
 = 0;

95 
chk_c⁄d
 = 0;

96 
¥Ÿocﬁ
 = 4;

97 
t_dú
 = 1;

98 
byã_block
 = 1;

99 
t_Àngth
 = 2;

100 c⁄° * 
cu˝
;

102 
	`mem£t
(
öBuff
, 0, (inBuff));

103 
k
 = 1; k < 
¨gc
; ++k) {

104 i‡(0 =
	`°rcmp
(
¨gv
[
k
], "-p"))

105 ++
do_∑ckë
;

106 i‡(0 =
	`°rcmp
(
¨gv
[
k
], "-v"))

107 ++
vîbo£
;

108 i‡(0 =
	`°rcmp
(
¨gv
[
k
], "-vv"))

109 
vîbo£
 += 2;

110 i‡(0 =
	`°rcmp
(
¨gv
[
k
], "-vvv"))

111 
vîbo£
 += 3;

112 i‡(0 =
	`°rcmp
(
¨gv
[
k
], "-V")) {

113 
	`Ârötf
(
°dîr
, "vîsi⁄: %s\n", 
vîsi⁄_°r
);

114 
	`exô
(0);

115 } i‡(*
¨gv
[
k
] == '-') {

116 
	`¥ötf
("Uƒecognized swôch: %s\n", 
¨gv
[
k
]);

117 
fûe_«me
 = 0;

120 i‡(0 =
fûe_«me
)

121 
fûe_«me
 = 
¨gv
[
k
];

123 
	`¥ötf
("too manyárguments\n");

124 
fûe_«me
 = 0;

128 i‡(0 =
fûe_«me
) {

129 
	`ußge
();

133 i‡((
sg_fd
 = 
	`›í
(
fûe_«me
, 
O_RDWR
)) < 0) {

134 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

135 "sg__ßt_idítify:Éº‹ o≥nög fûe: %s", 
fûe_«me
);

136 
	`≥º‹
(
ebuff
);

141 
≠tCmdBlk
[6] = 1;

142 
≠tCmdBlk
[14] = (
do_∑ckë
 ? 
ATA_IDENTIFY_PACKET_DEVICE
 :

143 
ATA_IDENTIFY_DEVICE
);

144 
≠tCmdBlk
[1] = (
¥Ÿocﬁ
 << 1Ë| 
exãnd
;

145 
≠tCmdBlk
[2] = (
chk_c⁄d
 << 5Ë| (
t_dú
 << 3) |

146 (
byã_block
 << 2Ë| 
t_Àngth
;

147 i‡(
vîbo£
) {

148 
	`Ârötf
(
°dîr
, "átaÖassÅhrough(16) cdb: ");

149 
k
 = 0; k < 
SAT_ATA_PASS_THROUGH16_LEN
; ++k)

150 
	`Ârötf
(
°dîr
, "%02x ", 
≠tCmdBlk
[
k
]);

151 
	`Ârötf
(
°dîr
, "\n");

154 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr_t
));

155 
io_hdr
.
öãrÁ˚_id
 = 'S';

156 
io_hdr
.
cmd_Àn
 = (
≠tCmdBlk
);

158 
io_hdr
.
mx_sb_Àn
 = (
£n£_buf„r
);

159 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

160 
io_hdr
.
dx„r_Àn
 = 
ID_RESPONSE_LEN
;

161 
io_hdr
.
dx„Ω
 = 
öBuff
;

162 
io_hdr
.
cmdp
 = 
≠tCmdBlk
;

163 
io_hdr
.
sbp
 = 
£n£_buf„r
;

164 
io_hdr
.
timeout
 = 20000;

169 i‡(
	`io˘l
(
sg_fd
, 
SG_IO
, &
io_hdr
) < 0) {

170 
	`≥º‹
("sg__sat_identify: SG_IO ioctlÉrror");

171 
	`˛o£
(
sg_fd
);

176 
ok
 = 0;

177 
	`sg_îr_ˇãg‹y3
(&
io_hdr
)) {

178 
SG_LIB_CAT_CLEAN
:

179 
ok
 = 1;

181 
SG_LIB_CAT_RECOVERED
:

182 i‡(
vîbo£
)

183 
	`sg_chk_n_¥öt3
(">>> ATA_16 comm™d", &
io_hdr
, 1);

185 
cu˝
 = 
	`sg_scsi_£n£_desc_föd
(
io_hdr
.
sbp
, io_hdr.
sb_Àn_wr
,

186 
SAT_ATA_RETURN_DESC
);

187 i‡(
cu˝
 && (cucp[3])) {

188 i‡(
cu˝
[3] & 0x4) {

189 
	`¥ötf
("error inÑeturned FIS:áborted command\n");

190 
	`¥ötf
("Åryágain with%s '-p' option\n",

191 (
do_∑ckë
 ? "out" : ""));

195 
ok
 = 1;

196 i‡(0 =
vîbo£
) {

197 
	`¥ötf
(">>> RecoveredÉrror on ATA_16, may have failed\n");

198 
	`¥ötf
(" Add '-v' for more information\n");

202 
	`sg_chk_n_¥öt3
("ATA_16 comm™dÉº‹", &
io_hdr
, 1);

206 i‡(
ok
) {

207 
	`¥ötf
("Response for IDENTIFY %sDEVICE ATA command:\n",

208 (
do_∑ckë
 ? "PACKET " : ""));

209 
	`dW‹dHex
((c⁄° *)
öBuff
, 256, 0,

210 
	`sg_is_big_ídün
());

213 
	`˛o£
(
sg_fd
);

215 
	}
}

	@examples/sg__sat_phy_event.c

30 
	~<uni°d.h
>

31 
	~<f˙é.h
>

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<°rög.h
>

35 
	~<î∫o.h
>

36 
	~<gë›t.h
>

37 
	#__STDC_FORMAT_MACROS
 1

	)

38 
	~<öây≥s.h
>

39 
	~<sys/io˘l.h
>

40 
	~<sys/ty≥s.h
>

41 
	~<sys/°©.h
>

43 
	~"sg_lib.h
"

44 
	~"sg_io_löux.h
"

57 
	#SAT_ATA_PASS_THROUGH16
 0x85

	)

58 
	#SAT_ATA_PASS_THROUGH16_LEN
 16

	)

59 
	#SAT_ATA_RETURN_DESC
 9

	)

61 
	#ATA_READ_LOG_EXT
 0x2f

	)

62 
	#SATA_PHY_EVENT_LPAGE
 0x11

	)

63 
	#READ_LOG_EXT_RESPONSE_LEN
 512

	)

65 
	#EBUFF_SZ
 256

	)

67 c⁄° * 
	gvîsi⁄_°r
 = "1.00 20070507";

69 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

70 {"hñp", 
no_¨gumít
, 0, 'h'},

71 {"hex", 
no_¨gumít
, 0, 'H'},

72 {"ign‹e", 
no_¨gumít
, 0, 'i'},

73 {"øw", 
no_¨gumít
, 0, 'r'},

74 {"ª£t", 
no_¨gumít
, 0, 'R'},

75 {"vîbo£", 
no_¨gumít
, 0, 'v'},

76 {"vîsi⁄", 
no_¨gumít
, 0, 'V'},

80 
	$ußge
()

82 
	`Ârötf
(
°dîr
, "Usage: "

97 
	}
}

99 
	sphy_evít_t
 {

100 
	mid
;

101 c⁄° * 
	mdesc
;

104 
phy_evít_t
 
	gphy_evít_¨r
[] = {

124 {0x0, 
NULL
},

127 c⁄° * 
	$föd_phy_desc
(
id
)

129 c⁄° 
phy_evít_t
 * 
≥p
;

131 
≥p
 = 
phy_evít_¨r
;Öï->
desc
; ++pep) {

132 i‡((
id
 & 0xfffË=
≥p
->id)

133  
≥p
->
desc
;

135  
NULL
;

136 
	}
}

138 
	$dSåRaw
(c⁄° * 
°r
, 
Àn
)

140 
k
;

142 
k
 = 0 ; k < 
Àn
; ++k)

143 
	`¥ötf
("%c", 
°r
[
k
]);

144 
	}
}

146 
	$maö
(
¨gc
, * 
¨gv
[])

148 
sg_fd
, 
c
, 
k
, 
j
, 
ok
, 
ªs
, 
id
, 
Àn
, 
víd‹
;

149 
≠tCmdBlk
[
SAT_ATA_PASS_THROUGH16_LEN
] =

150 {
SAT_ATA_PASS_THROUGH16
, 0, 0, 0, 0, 0, 0, 0,

152 
sg_io_hdr_t
 
io_hdr
;

153 * 
devi˚_«me
 = 0;

154 
ebuff
[
EBUFF_SZ
];

155 
öBuff
[
READ_LOG_EXT_RESPONSE_LEN
];

156 
£n£_buf„r
[64];

157 
hex
 = 0;

158 
ign‹e
 = 0;

159 
øw
 = 0;

160 
ª£t
 = 0;

161 
vîbo£
 = 0;

162 
exãnd
 = 0;

163 
chk_c⁄d
 = 0;

164 
¥Ÿocﬁ
 = 4;

165 
t_dú
 = 1;

166 
byã_block
 = 1;

167 
t_Àngth
 = 2;

168 c⁄° * 
cu˝
;

169 
ªt
 = 0;

170 
uöt64_t
 
uŒ
;

171 c⁄° * 
˝
;

173 
	`mem£t
(
öBuff
, 0, (inBuff));

175 
›ti⁄_ödex
 = 0;

177 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hHirRvV",

178 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

179 i‡(
c
 == -1)

182 
c
) {

184 
	`ußge
();

185 
	`exô
(0);

187 ++
hex
;

190 ++
ign‹e
;

193 ++
øw
;

196 ++
ª£t
;

199 ++
vîbo£
;

202 
	`Ârötf
(
°dîr
, "vîsi⁄: %s\n", 
vîsi⁄_°r
);

203 
	`exô
(0);

205 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê%¯[0x%x]\n", 
c
, c);

206 
	`ußge
();

207  
SG_LIB_SYNTAX_ERROR
;

210 i‡(
›töd
 < 
¨gc
) {

211 i‡(
NULL
 =
devi˚_«me
) {

212 
devi˚_«me
 = 
¨gv
[
›töd
];

213 ++
›töd
;

215 i‡(
›töd
 < 
¨gc
) {

216 ; 
›töd
 < 
¨gc
; ++optind)

217 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

218 
¨gv
[
›töd
]);

219 
	`ußge
();

220  
SG_LIB_SYNTAX_ERROR
;

223 i‡(0 =
devi˚_«me
) {

224 
	`Ârötf
(
°dîr
, "no DEVICEÇame detected\n");

225 
	`ußge
();

226  
SG_LIB_SYNTAX_ERROR
;

229 i‡((
sg_fd
 = 
	`›í
(
devi˚_«me
, 
O_RDWR
)) < 0) {

230 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

231 "sg_ßt_phy_evít:Éº‹ o≥nög fûe: %s", 
devi˚_«me
);

232 
	`≥º‹
(
ebuff
);

233  
SG_LIB_FILE_ERROR
;

237 i‡(
ª£t
 > 0)

238 
≠tCmdBlk
[4] = 1;

239 
≠tCmdBlk
[6] = 1;

240 
≠tCmdBlk
[8] = 
SATA_PHY_EVENT_LPAGE
;

241 
≠tCmdBlk
[14] = 
ATA_READ_LOG_EXT
;

242 
≠tCmdBlk
[1] = (
¥Ÿocﬁ
 << 1Ë| 
exãnd
;

243 
≠tCmdBlk
[2] = (
chk_c⁄d
 << 5Ë| (
t_dú
 << 3) |

244 (
byã_block
 << 2Ë| 
t_Àngth
;

245 i‡(
vîbo£
) {

246 
	`Ârötf
(
°dîr
, "átaÖassÅhrough(16) cdb: ");

247 
k
 = 0; k < 
SAT_ATA_PASS_THROUGH16_LEN
; ++k)

248 
	`Ârötf
(
°dîr
, "%02x ", 
≠tCmdBlk
[
k
]);

249 
	`Ârötf
(
°dîr
, "\n");

252 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr_t
));

253 
io_hdr
.
öãrÁ˚_id
 = 'S';

254 
io_hdr
.
cmd_Àn
 = (
≠tCmdBlk
);

256 
io_hdr
.
mx_sb_Àn
 = (
£n£_buf„r
);

257 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

258 
io_hdr
.
dx„r_Àn
 = 
READ_LOG_EXT_RESPONSE_LEN
;

259 
io_hdr
.
dx„Ω
 = 
öBuff
;

260 
io_hdr
.
cmdp
 = 
≠tCmdBlk
;

261 
io_hdr
.
sbp
 = 
£n£_buf„r
;

262 
io_hdr
.
timeout
 = 20000;

267 i‡(
	`io˘l
(
sg_fd
, 
SG_IO
, &
io_hdr
) < 0) {

268 
	`≥º‹
("sg_sat_phy_event: SG_IO ioctlÉrror");

269 
	`˛o£
(
sg_fd
);

270  
SG_LIB_CAT_OTHER
;

274 
ok
 = 0;

275 
ªt
 = 
	`sg_îr_ˇãg‹y3
(&
io_hdr
);

276 
ªt
) {

277 
SG_LIB_CAT_CLEAN
:

278 
ok
 = 1;

280 
SG_LIB_CAT_RECOVERED
:

281 i‡(
vîbo£
)

282 
	`sg_chk_n_¥öt3
(">>> ATA_16 comm™d", &
io_hdr
, 1);

284 
cu˝
 = 
	`sg_scsi_£n£_desc_föd
(
io_hdr
.
sbp
, io_hdr.
sb_Àn_wr
,

285 
SAT_ATA_RETURN_DESC
);

286 i‡(
cu˝
 && (cucp[3])) {

287 i‡(
cu˝
[3] & 0x4) {

288 
	`Ârötf
(
°dîr
, "error inÑeturned FIS:áborted command\n");

292 
ªt
 = 0;

293 
ok
 = 1;

294 i‡(0 =
vîbo£
) {

295 
	`Ârötf
(
°dîr
, ">>> RecoveredÉrror on ATA_16, may have "

297 
	`Ârötf
(
°dîr
, " Add '-v' for more information\n");

301 
	`sg_chk_n_¥öt3
("ATA_16 comm™dÉº‹", &
io_hdr
, 1);

305 i‡(
ok
) {

306 i‡(
øw
 > 0)

307 
	`dSåRaw
((c⁄° *)
öBuff
, 512);

309 i‡(
vîbo£
 && 
hex
)

310 
	`Ârötf
(
°dîr
, "ResponseÅo READ LOG EXT (page=11h):\n");

311 i‡(1 =
hex
)

312 
	`dSåHex
((c⁄° *)
öBuff
, 512, 0);

313 i‡(
hex
 > 1)

314 
	`dW‹dHex
((c⁄° *)
öBuff
, 256, 0,

315 
	`sg_is_big_ídün
());

317 
	`¥ötf
("SATAÖhyÉvent counters:\n");

318 
k
 = 4; k < 512; k +(
Àn
 + 2)) {

319 
id
 = (
öBuff
[
k
 + 1] << 8) + inBuff[k];

320 i‡(0 =
id
)

322 
Àn
 = ((
id
 >> 12) & 0x7) * 2;

323 
víd‹
 = !!(
id
 & 0x8000);

324 
id
 = id & 0xfff;

325 
uŒ
 = 0;

326 
j
 = 
Àn
 - 1; j >= 0; --j) {

327 i‡(
j
 < (
Àn
 - 1))

328 
uŒ
 <<= 8;

329 
uŒ
 |
öBuff
[
k
 + 2 + 
j
];

331 
˝
 = 
NULL
;

332 i‡((0 =
víd‹
Ë&& (0 =
ign‹e
))

333 
˝
 = 
	`föd_phy_desc
(
id
);

334 i‡(
˝
)

335 
	`¥ötf
(" %s: %" 
PRIu64
 "\n", 
˝
, 
uŒ
);

337 
	`¥ötf
(" id=0x%x, vendor=%d, data_len=%d, "

338 "vÆ=%" 
PRIu64
 "\n", 
id
, 
víd‹
, 
Àn
, 
uŒ
);

343 
ªs
 = 
	`˛o£
(
sg_fd
);

344 i‡(
ªs
 < 0) {

345 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

346 i‡(0 =
ªt
)

347  
SG_LIB_FILE_ERROR
;

349  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

350 
	}
}

	@examples/sg__sat_set_features.c

30 
	~<uni°d.h
>

31 
	~<f˙é.h
>

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<°rög.h
>

35 
	~<î∫o.h
>

36 
	~<gë›t.h
>

37 
	~<sys/io˘l.h
>

38 
	~<sys/ty≥s.h
>

39 
	~<sys/°©.h
>

41 
	~"sg_lib.h
"

42 
	~"sg_io_löux.h
"

53 
	#SAT_ATA_PASS_THROUGH16
 0x85

	)

54 
	#SAT_ATA_PASS_THROUGH16_LEN
 16

	)

55 
	#SAT_ATA_RETURN_DESC
 9

	)

57 
	#ATA_SET_FEATURES
 0xef

	)

59 
	#EBUFF_SZ
 256

	)

61 * 
	gvîsi⁄_°r
 = "1.03 20070719";

63 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

64 {"cou¡", 
ªquúed_¨gumít
, 0, 'c'},

65 {"chk_c⁄d", 
no_¨gumít
, 0, 'C'},

66 {"„©uª", 
ªquúed_¨gumít
, 0, 'f'},

67 {"hñp", 
no_¨gumít
, 0, 'h'},

68 {"lba", 
ªquúed_¨gumít
, 0, 'L'},

69 {"vîbo£", 
no_¨gumít
, 0, 'v'},

70 {"vîsi⁄", 
no_¨gumít
, 0, 'V'},

74 
	$ußge
()

76 
	`Ârötf
(
°dîr
, "Usage: "

98 
	}
}

100 
	$maö
(
¨gc
, * 
¨gv
[])

102 
sg_fd
, 
c
, 
k
;

103 
≠tCmdBlk
[
SAT_ATA_PASS_THROUGH16_LEN
] =

104 {
SAT_ATA_PASS_THROUGH16
, 0, 0, 0, 0, 0, 0, 0,

106 
sg_io_hdr_t
 
io_hdr
;

107 
devi˚_«me
[256];

108 
ebuff
[
EBUFF_SZ
];

109 
£n£_buf„r
[64];

110 
cou¡
 = 0;

111 
„©uª
 = 0;

112 
lba
 = 0;

113 
vîbo£
 = 0;

114 
exãnd
 = 0;

115 
chk_c⁄d
 = 0;

116 
¥Ÿocﬁ
 = 3;

117 
t_dú
 = 1;

118 
byã_block
 = 1;

119 
t_Àngth
 = 0;

120 c⁄° * 
u˝
 = 
NULL
;

122 
	`mem£t
(
devi˚_«me
, 0, (device_name));

124 
›ti⁄_ödex
 = 0;

126 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "c:Cf:hL:vV", 
l⁄g_›ti⁄s
,

127 &
›ti⁄_ödex
);

128 i‡(
c
 == -1)

131 
c
) {

133 
cou¡
 = 
	`sg_gë_num
(
›èrg
);

134 i‡((
cou¡
 < 0) || (count > 255)) {

135 
	`Ârötf
(
°dîr
, "badárgument for '--count'\n");

136  
SG_LIB_SYNTAX_ERROR
;

140 
chk_c⁄d
 = 1;

143 
„©uª
 = 
	`sg_gë_num
(
›èrg
);

144 i‡((
„©uª
 < 0) || (feature > 255)) {

145 
	`Ârötf
(
°dîr
, "badárgument for '--feature'\n");

146  
SG_LIB_SYNTAX_ERROR
;

151 
	`ußge
();

154 
lba
 = 
	`sg_gë_num
(
›èrg
);

155 i‡((
lba
 < 0) || (lba > 255)) {

156 
	`Ârötf
(
°dîr
, "badárgument for '--lba'\n");

157  
SG_LIB_SYNTAX_ERROR
;

161 ++
vîbo£
;

164 
	`Ârötf
(
°dîr
, "vîsi⁄: %s\n", 
vîsi⁄_°r
);

167 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê0x%x ??\n", 
c
);

168 
	`ußge
();

169  
SG_LIB_SYNTAX_ERROR
;

172 i‡(
›töd
 < 
¨gc
) {

173 i‡('\0' =
devi˚_«me
[0]) {

174 
	`°∫˝y
(
devi˚_«me
, 
¨gv
[
›töd
], (device_name) - 1);

175 
devi˚_«me
[(device_name) - 1] = '\0';

176 ++
›töd
;

178 i‡(
›töd
 < 
¨gc
) {

179 ; 
›töd
 < 
¨gc
; ++optind)

180 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

181 
¨gv
[
›töd
]);

182 
	`ußge
();

183  
SG_LIB_SYNTAX_ERROR
;

187 i‡('\0' =
devi˚_«me
[0]) {

188 
	`Ârötf
(
°dîr
, "missing deviceÇame!\n");

189 
	`ußge
();

193 i‡((
sg_fd
 = 
	`›í
(
devi˚_«me
, 
O_RDWR
)) < 0) {

194 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

195 "sg_ßt_£t_„©uªs:Éº‹ o≥nög fûe: %s", 
devi˚_«me
);

196 
	`≥º‹
(
ebuff
);

201 
≠tCmdBlk
[14] = 
ATA_SET_FEATURES
;

202 
≠tCmdBlk
[1] = (
¥Ÿocﬁ
 << 1Ë| 
exãnd
;

203 
≠tCmdBlk
[2] = (
chk_c⁄d
 << 5Ë| (
t_dú
 << 3) |

204 (
byã_block
 << 2Ë| 
t_Àngth
;

205 
≠tCmdBlk
[4] = 
„©uª
;

206 
≠tCmdBlk
[6] = 
cou¡
;

207 
≠tCmdBlk
[8] = 
lba
 & 0xff;

208 
≠tCmdBlk
[10] = (
lba
 >> 8) & 0xff;

209 
≠tCmdBlk
[12] = (
lba
 >> 16) & 0xff;

210 i‡(
vîbo£
) {

211 
	`Ârötf
(
°dîr
, "átaÖassÅhrough(16) cdb: ");

212 
k
 = 0; k < 
SAT_ATA_PASS_THROUGH16_LEN
; ++k)

213 
	`Ârötf
(
°dîr
, "%02x ", 
≠tCmdBlk
[
k
]);

214 
	`Ârötf
(
°dîr
, "\n");

217 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr_t
));

218 
io_hdr
.
öãrÁ˚_id
 = 'S';

219 
io_hdr
.
cmd_Àn
 = (
≠tCmdBlk
);

221 
io_hdr
.
mx_sb_Àn
 = (
£n£_buf„r
);

222 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_NONE
;

223 
io_hdr
.
dx„r_Àn
 = 0;

224 
io_hdr
.
dx„Ω
 = 
NULL
;

225 
io_hdr
.
cmdp
 = 
≠tCmdBlk
;

226 
io_hdr
.
sbp
 = 
£n£_buf„r
;

227 
io_hdr
.
timeout
 = 20000;

232 i‡(
	`io˘l
(
sg_fd
, 
SG_IO
, &
io_hdr
) < 0) {

233 
	`≥º‹
("sg_sat_set_features: SG_IO ioctlÉrror");

234 
	`˛o£
(
sg_fd
);

239 
	`sg_îr_ˇãg‹y3
(&
io_hdr
)) {

240 
SG_LIB_CAT_CLEAN
:

242 
SG_LIB_CAT_RECOVERED
:

243 
SG_LIB_CAT_NO_SENSE
:

244 
u˝
 = 
	`sg_scsi_£n£_desc_föd
(
£n£_buf„r
, (sense_buffer),

245 
SAT_ATA_RETURN_DESC
);

246 i‡(
NULL
 =
u˝
) {

247 i‡(
vîbo£
 > 1)

248 
	`¥ötf
("ATA Return DescriptorÉxpected in sense butÇot "

250 
	`sg_chk_n_¥öt3
("ATA_16 comm™dÉº‹", &
io_hdr
, 1);

251 } i‡(
vîbo£
)

252 
	`sg_chk_n_¥öt3
("ATA Rëu∫ Des¸ùt‹", &
io_hdr
, 1);

253 i‡(
u˝
 && ucp[3]) {

254 i‡(
u˝
[3] & 0x4)

255 
	`¥ötf
("error inÑeturned FIS:áborted command\n");

257 
	`¥ötf
("îr‹=0x%x, sètus=0x%x\n", 
u˝
[3], ucp[13]);

261 
	`Ârötf
(
°dîr
, "unexpected SCSI sense category\n");

262 
u˝
 = 
	`sg_scsi_£n£_desc_föd
(
£n£_buf„r
, (sense_buffer),

263 
SAT_ATA_RETURN_DESC
);

264 i‡(
NULL
 =
u˝
)

265 
	`sg_chk_n_¥öt3
("ATA_16 comm™dÉº‹", &
io_hdr
, 1);

266 i‡(
vîbo£
)

267 
	`sg_chk_n_¥öt3
("ATA Return Descriptor,ásÉxpected",

268 &
io_hdr
, 1);

269 i‡(
u˝
 && ucp[3]) {

270 i‡(
u˝
[3] & 0x4)

271 
	`¥ötf
("error inÑeturned FIS:áborted command\n");

273 
	`¥ötf
("îr‹=0x%x, sètus=0x%x\n", 
u˝
[3], ucp[13]);

278 
	`˛o£
(
sg_fd
);

280 
	}
}

	@examples/sg_excl.c

1 
	~<uni°d.h
>

2 
	~<f˙é.h
>

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<î∫o.h
>

7 
	~<sys/io˘l.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/°©.h
>

10 
	~"sg_lib.h
"

11 
	~"sg_io_löux.h
"

35 
	#INQ_REPLY_LEN
 96

	)

36 
	#INQ_CMD_LEN
 6

	)

37 
	#TUR_CMD_LEN
 6

	)

39 
	#EBUFF_SZ
 256

	)

41 
	#ME
 "sg_ex˛: "

	)

43 
	$maö
(
¨gc
, * 
¨gv
[])

45 
sg_fd
, 
k
, 
ok
 ;

46 
öqCmdBlk
 [
INQ_CMD_LEN
] =

47 {0x12, 0, 0, 0, 
INQ_REPLY_LEN
, 0};

48 
turCmdBlk
 [
TUR_CMD_LEN
] =

50 
öqBuff
[
INQ_REPLY_LEN
];

51 
sg_io_hdr_t
 
io_hdr
;

52 * 
fûe_«me
 = 0;

53 
ebuff
[
EBUFF_SZ
];

54 
£n£_buf„r
[32];

55 
do_exåa
 = 0;

57 
k
 = 1; k < 
¨gc
; ++k) {

58 i‡(0 =
	`memcmp
("-x", 
¨gv
[
k
], 2))

59 
do_exåa
 = 1;

60 i‡(*
¨gv
[
k
] == '-') {

61 
	`¥ötf
("Uƒecognized swôch: %s\n", 
¨gv
[
k
]);

62 
fûe_«me
 = 0;

65 i‡(0 =
fûe_«me
)

66 
fûe_«me
 = 
¨gv
[
k
];

68 
	`¥ötf
("too manyárguments\n");

69 
fûe_«me
 = 0;

73 i‡(0 =
fûe_«me
) {

74 
	`¥ötf
("Usage: 'sg_simple1 [-x] <sg_device>'\n");

79 i‡((
sg_fd
 = 
	`›í
(
fûe_«me
, 
O_RDWR
 | 
O_EXCL
 | 
O_NONBLOCK
)) < 0) {

80 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, 
ME
 "îr‹ o≥nög fûe: %s", 
fûe_«me
);

81 
	`≥º‹
(
ebuff
);

85 i‡((
	`io˘l
(
sg_fd
, 
SG_GET_VERSION_NUM
, &
k
) < 0) || (k < 30000)) {

86 
	`¥ötf
(
ME
 "%s doesn't seemÅo beánÇew sg device\n",

87 
fûe_«me
);

88 
	`˛o£
(
sg_fd
);

92 i‡((
sg_fd2
 = 
	`›í
(
fûe_«me
, 
O_RDWR
 | 
O_EXCL
)) < 0) {

93 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

94 
ME
 "îr‹ o≥nög fûe: %†®£c⁄dÅime", 
fûe_«me
);

95 
	`≥º‹
(
ebuff
);

98 
	`¥ötf
(
ME
 "£c⁄d o≥¿o‡%†ö viﬁ©i⁄ o‡O_EXCL\n", 
fûe_«me
);

99 
	`˛o£
(
sg_fd2
);

104 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr_t
));

105 
io_hdr
.
öãrÁ˚_id
 = 'S';

106 
io_hdr
.
cmd_Àn
 = (
öqCmdBlk
);

108 
io_hdr
.
mx_sb_Àn
 = (
£n£_buf„r
);

109 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

110 
io_hdr
.
dx„r_Àn
 = 
INQ_REPLY_LEN
;

111 
io_hdr
.
dx„Ω
 = 
öqBuff
;

112 
io_hdr
.
cmdp
 = 
öqCmdBlk
;

113 
io_hdr
.
sbp
 = 
£n£_buf„r
;

114 
io_hdr
.
timeout
 = 20000;

119 i‡(
	`io˘l
(
sg_fd
, 
SG_IO
, &
io_hdr
) < 0) {

120 
	`≥º‹
(
ME
 "Inquiry SG_IO ioctlÉrror");

121 
	`˛o£
(
sg_fd
);

126 
ok
 = 0;

127 
	`sg_îr_ˇãg‹y3
(&
io_hdr
)) {

128 
SG_LIB_CAT_CLEAN
:

129 
ok
 = 1;

131 
SG_LIB_CAT_RECOVERED
:

132 
	`¥ötf
("RecoveredÉrror on INQUIRY, continuing\n");

133 
ok
 = 1;

136 
	`sg_chk_n_¥öt3
("INQUIRY comm™dÉº‹", &
io_hdr
, 1);

140 i‡(
ok
) {

141 * 
p
 = (*)
öqBuff
;

142 
f
 = ()*(
p
 + 7);

143 
	`¥ötf
("Some ofÅhe INQUIRY command'sÑesults:\n");

144 
	`¥ötf
(" %.8† %.16† %.4† ", 
p
 + 8,Ö + 16,Ö + 32);

145 
	`¥ötf
("[wide=%d sync=%d cmdque=%d sftre=%d]\n",

146 !!(
f
 & 0x20), !!(f & 0x10), !!(f & 2), !!(f & 1));

148 i‡(
do_exåa
)

149 
	`¥ötf
("INQUIRY duration=%u millisecs,Ñesid=%d, msg_status=%d\n",

150 
io_hdr
.
duøti⁄
, io_hdr.
ªsid
, ()io_hdr.
msg_°©us
);

155 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr_t
));

156 
io_hdr
.
öãrÁ˚_id
 = 'S';

157 
io_hdr
.
cmd_Àn
 = (
turCmdBlk
);

158 
io_hdr
.
mx_sb_Àn
 = (
£n£_buf„r
);

159 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_NONE
;

160 
io_hdr
.
cmdp
 = 
turCmdBlk
;

161 
io_hdr
.
sbp
 = 
£n£_buf„r
;

162 
io_hdr
.
timeout
 = 20000;

164 i‡(
	`io˘l
(
sg_fd
, 
SG_IO
, &
io_hdr
) < 0) {

165 
	`≥º‹
(
ME
 "Test Unit Ready SG_IO ioctlÉrror");

166 
	`˛o£
(
sg_fd
);

171 
ok
 = 0;

172 
	`sg_îr_ˇãg‹y3
(&
io_hdr
)) {

173 
SG_LIB_CAT_CLEAN
:

174 
ok
 = 1;

176 
SG_LIB_CAT_RECOVERED
:

177 
	`¥ötf
("RecoveredÉrror on Test Unit Ready, continuing\n");

178 
ok
 = 1;

181 
	`sg_chk_n_¥öt3
("Te° Unô Ródy comm™dÉº‹", &
io_hdr
, 1);

185 i‡(
ok
)

186 
	`¥ötf
("Test Unit Ready successful so unit isÑeady!\n");

188 
	`¥ötf
("Test Unit Ready failed so unit may _not_ beÑeady!\n");

190 i‡(
do_exåa
)

191 
	`¥ötf
("TEST UNIT READY duration=%u millisecs,Ñesid=%d, "

192 "msg_°©us=%d\n", 
io_hdr
.
duøti⁄
, io_hdr.
ªsid
,

193 ()
io_hdr
.
msg_°©us
);

195 
	`¶ìp
(60);

196 
	`˛o£
(
sg_fd
);

198 
	}
}

	@examples/sg_iovec_tst.c

1 
	~<uni°d.h
>

2 
	~<sig«l.h
>

3 
	~<f˙é.h
>

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<°rög.h
>

7 
	~<î∫o.h
>

8 
	~<sys/io˘l.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<sys/°©.h
>

11 
	~"sg_lib.h
"

12 
	~"sg_io_löux.h
"

31 
	#ME
 "sg_iovec_t°: "

	)

33 
	#A_PRIME
 509

	)

34 
	#IOVEC_ELEMS
 2048

	)

36 
	#SENSE_BUFF_LEN
 32

	)

37 
	#DEF_TIMEOUT
 40000

	)

39 
sg_iovec
 
	giovec
[
IOVEC_ELEMS
];

42 
	$sg_ªad
(
sg_fd
, * 
buff
, 
num_blocks
, 
‰om_block
,

43 
bs
)

45 
rdCmd
[10] = {
READ_10
, 0, 0, 0, 0, 0, 0, 0, 0, 0};

46 
£n£Buff
[
SENSE_BUFF_LEN
];

47 
sg_io_hdr
 
io_hdr
;

48 
dx„r_Àn
 = 
bs
 * 
num_blocks
;

49 
k
, 
pos
, 
ªm
;

51 
rdCmd
[2] = ()((
‰om_block
 >> 24) & 0xff);

52 
rdCmd
[3] = ()((
‰om_block
 >> 16) & 0xff);

53 
rdCmd
[4] = ()((
‰om_block
 >> 8) & 0xff);

54 
rdCmd
[5] = ()(
‰om_block
 & 0xff);

55 
rdCmd
[7] = ()((
num_blocks
 >> 8) & 0xff);

56 
rdCmd
[8] = ()(
num_blocks
 & 0xff);

58 
k
 = 0, 
pos
 = 0, 
ªm
 = 
dx„r_Àn
; k < 
IOVEC_ELEMS
; ++k) {

59 
iovec
[
k
].
iov_ba£
 = 
buff
 + 
pos
;

60 
iovec
[
k
].
iov_Àn
 = (
ªm
 > 
A_PRIME
) ? A_PRIME :Ñem;

61 i‡(
ªm
 <
A_PRIME
)

63 
pos
 +
A_PRIME
;

64 
ªm
 -
A_PRIME
;

66 i‡(
k
 >
IOVEC_ELEMS
) {

67 
	`Ârötf
(
°dîr
, "C™'àfô dx„r_Àn=%d byã†ö iovec\n", 
dx„r_Àn
);

70 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr_t
));

71 
io_hdr
.
öãrÁ˚_id
 = 'S';

72 
io_hdr
.
cmd_Àn
 = (
rdCmd
);

73 
io_hdr
.
cmdp
 = 
rdCmd
;

74 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

75 
io_hdr
.
dx„r_Àn
 = dxfer_len;

76 
io_hdr
.
iovec_cou¡
 = 
k
 + 1;

77 
io_hdr
.
dx„Ω
 = 
iovec
;

78 
io_hdr
.
mx_sb_Àn
 = 
SENSE_BUFF_LEN
;

79 
io_hdr
.
sbp
 = 
£n£Buff
;

80 
io_hdr
.
timeout
 = 
DEF_TIMEOUT
;

81 
io_hdr
.
∑ck_id
 = 
‰om_block
;

83 i‡(
	`io˘l
(
sg_fd
, 
SG_IO
, &
io_hdr
)) {

84 
	`≥º‹
("reading (SG_IO) on sg device,Érror");

87 
	`sg_îr_ˇãg‹y3
(&
io_hdr
)) {

88 
SG_LIB_CAT_CLEAN
:

90 
SG_LIB_CAT_RECOVERED
:

91 
	`Ârötf
(
°dîr
, "RecoveredÉrror whileÑeading block=%d,Çum=%d\n",

92 
‰om_block
, 
num_blocks
);

94 
SG_LIB_CAT_UNIT_ATTENTION
:

95 
	`Ârötf
(
°dîr
, "Unitáttention\n");

98 
	`sg_chk_n_¥öt3
("ªadög", &
io_hdr
, 1);

102 
	}
}

105 
	$maö
(
¨gc
, * 
¨gv
[])

107 
sg_fd
, 
fd
, 
ªs
, 
j
, 
m
, 
dx„r_Àn
;

108 
k
, 
num
;

109 
do_hñp
 = 0;

110 
blk_size
 = 512;

111 
cou¡
 = 0;

112 * 
sg_fûe_«me
 = 0;

113 * 
out_fûe_«me
 = 0;

114 * 
bufÂ
;

116 
j
 = 1; j < 
¨gc
; ++j) {

117 i‡(0 =
	`°∫cmp
("-b=", 
¨gv
[
j
], 3)) {

118 
m
 = 3;

119 
num
 = 
	`ssˇnf
(
¨gv
[
j
] + 
m
, "%d", &
blk_size
);

120 i‡((1 !
num
Ë|| (
blk_size
 <= 0)) {

121 
	`¥ötf
("Couldn't decodeÇumberáfter '-b' switch\n");

122 
sg_fûe_«me
 = 0;

126 i‡(0 =
	`°∫cmp
("-c=", 
¨gv
[
j
], 3)) {

127 
m
 = 3;

128 
num
 = 
	`ssˇnf
(
¨gv
[
j
] + 
m
, "%d", &
cou¡
);

129 i‡(1 !
num
) {

130 
	`¥ötf
("Couldn't decodeÇumberáfter '-c' switch\n");

131 
sg_fûe_«me
 = 0;

135 i‡(0 =
	`°rcmp
("-h", 
¨gv
[
j
]))

136 
do_hñp
 = 1;

137 i‡(*
¨gv
[
j
] == '-') {

138 
	`¥ötf
("Uƒecognized swôch: %s\n", 
¨gv
[
j
]);

139 
sg_fûe_«me
 = 0;

142 i‡(
NULL
 =
sg_fûe_«me
)

143 
sg_fûe_«me
 = 
¨gv
[
j
];

145 
out_fûe_«me
 = 
¨gv
[
j
];

147 i‡((
NULL
 =
sg_fûe_«me
Ë|| (NULL =
out_fûe_«me
Ë|| (0 =
cou¡
)) {

148 
	`¥ötf
("Usage: sg_iovec_tst [-h] [-b=num] -c=num <generic_device> "

150 
	`¥ötf
(" where: -hÅhis usage message\n");

151 
	`¥ötf
(" -b=num block size (default 512 Bytes)\n");

152 
	`¥ötf
(" -c=num count of blocksÅoÅransfer\n");

153 
	`¥ötf
("Ñeads from <generic_device>ánd sendsÅo "

158 
sg_fd
 = 
	`›í
(
sg_fûe_«me
, 
O_RDONLY
);

159 i‡(
sg_fd
 < 0) {

160 
	`≥º‹
(
ME
 "sg deviceÇode openÉrror");

164 
ªs
 = 
	`io˘l
(
sg_fd
, 
SG_GET_VERSION_NUM
, &
k
);

165 i‡((
ªs
 < 0Ë|| (
k
 < 30000)) {

166 
	`¥ötf
(
ME
 "notá sg device, or driverÖriorÅo 3.x\n");

169 
fd
 = 
	`›í
(
out_fûe_«me
, 
O_WRONLY
 | 
O_CREAT
, 0666);

170 i‡(
fd
 < 0) {

171 
	`≥º‹
(
ME
 "output file openÉrror");

174 
dx„r_Àn
 = 
cou¡
 * 
blk_size
;

175 
bufÂ
 = (*)
	`mÆloc
(
dx„r_Àn
);

176 i‡(
bufÂ
) {

177 i‡(0 =
	`sg_ªad
(
sg_fd
, 
bufÂ
, 
cou¡
, 0, 
blk_size
)) {

178 i‡(
	`wrôe
(
fd
, 
bufÂ
, 
dx„r_Àn
) < 0)

179 
	`≥º‹
(
ME
 "output write failed");

181 
	`‰ì
(
bufÂ
);

183 
ªs
 = 
	`˛o£
(
fd
);

184 i‡(
ªs
 < 0) {

185 
	`≥º‹
(
ME
 "output file closeÉrror");

186 
	`˛o£
(
sg_fd
);

189 
ªs
 = 
	`˛o£
(
sg_fd
);

190 i‡(
ªs
 < 0) {

191 
	`≥º‹
(
ME
 "sg device closeÉrror");

195 
	}
}

	@examples/sg_queue_tst.c

1 
	~<uni°d.h
>

2 
	~<f˙é.h
>

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<î∫o.h
>

7 
	~<sys/io˘l.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/°©.h
>

12 
	~"sg_lib.h
"

13 
	~"sg_io_löux.h
"

14 
	~"sg_löux_öc.h
"

33 
	#INQ_REPLY_LEN
 96

	)

34 
	#INQ_CMD_LEN
 6

	)

35 
	#SDIAG_CMD_LEN
 6

	)

36 
	#SENSE_BUFFER_LEN
 96

	)

38 
	#EBUFF_SZ
 256

	)

40 #i‚de‡
SG_FLAG_Q_AT_TAIL


41 
	#SG_FLAG_Q_AT_TAIL
 0x10

	)

44 #i‚de‡
SG_FLAG_Q_AT_HEAD


45 
	#SG_FLAG_Q_AT_HEAD
 0x20

	)

49 
	$maö
(
¨gc
, * 
¨gv
[])

51 
sg_fd
, 
k
, 
ok
;

52 
öqCmdBlk
[
INQ_CMD_LEN
] =

53 {0x12, 0, 0, 0, 
INQ_REPLY_LEN
, 0};

54 
sdügCmdBlk
[
SDIAG_CMD_LEN
] =

56 
öqBuff
[16][
INQ_REPLY_LEN
];

57 
sg_io_hdr_t
 
io_hdr
[16];

58 
sg_io_hdr_t
 
rio_hdr
;

59 * 
fûe_«me
 = 0;

60 
ebuff
[
EBUFF_SZ
];

61 
£n£_buf„r
[16][
SENSE_BUFFER_LEN
];

62 
q_©_èû
 = 0;

64 
k
 = 1; k < 
¨gc
; ++k) {

65 i‡(0 =
	`memcmp
("-t", 
¨gv
[
k
], 2))

66 ++
q_©_èû
;

67 i‡(*
¨gv
[
k
] == '-') {

68 
	`¥ötf
("Uƒecognized swôch: %s\n", 
¨gv
[
k
]);

69 
fûe_«me
 = 0;

72 i‡(0 =
fûe_«me
)

73 
fûe_«me
 = 
¨gv
[
k
];

75 
	`¥ötf
("too manyárguments\n");

76 
fûe_«me
 = 0;

80 i‡(0 =
fûe_«me
) {

81 
	`¥ötf
("Usage: 'sg_queue_tst [-t] <sg_device>'\n"

87 i‡((
sg_fd
 = 
	`›í
(
fûe_«me
, 
O_RDWR
)) < 0) {

88 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

89 "sg_queue_t°:Éº‹ o≥nög fûe: %s", 
fûe_«me
);

90 
	`≥º‹
(
ebuff
);

94 
k
 = 0; k < 16; ++k) {

96 
	`mem£t
(&
io_hdr
[
k
], 0, (
sg_io_hdr_t
));

97 
io_hdr
[
k
].
öãrÁ˚_id
 = 'S';

99 
io_hdr
[
k
].
mx_sb_Àn
 = ()(
£n£_buf„r
);

100 i‡(0 =(
k
 % 3)) {

101 
io_hdr
[
k
].
cmd_Àn
 = (
sdügCmdBlk
);

102 
io_hdr
[
k
].
cmdp
 = 
sdügCmdBlk
;

103 
io_hdr
[
k
].
dx„r_dúe˘i⁄
 = 
SG_DXFER_NONE
;

105 
io_hdr
[
k
].
cmd_Àn
 = (
öqCmdBlk
);

106 
io_hdr
[
k
].
cmdp
 = 
öqCmdBlk
;

107 
io_hdr
[
k
].
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

108 
io_hdr
[
k
].
dx„r_Àn
 = 
INQ_REPLY_LEN
;

109 
io_hdr
[
k
].
dx„Ω
 = 
öqBuff
[k];

111 
io_hdr
[
k
].
sbp
 = 
£n£_buf„r
[k];

112 
io_hdr
[
k
].
mx_sb_Àn
 = 
SENSE_BUFFER_LEN
;

113 
io_hdr
[
k
].
timeout
 = 20000;

114 
io_hdr
[
k
].
∑ck_id
 = k;

116 i‡(
q_©_èû
)

117 
io_hdr
[
k
].
Êags
 |
SG_FLAG_Q_AT_TAIL
;

119 
io_hdr
[
k
].
Êags
 |
SG_FLAG_Q_AT_HEAD
;

122 i‡(
	`wrôe
(
sg_fd
, &
io_hdr
[
k
], (
sg_io_hdr_t
)) < 0) {

123 
	`≥º‹
("sg_queue_tst: sg writeÉrror");

124 
	`˛o£
(
sg_fd
);

129 
k
 = 0; k < 16; ++k) {

130 
	`mem£t
(&
rio_hdr
, 0, (
sg_io_hdr_t
));

131 
rio_hdr
.
öãrÁ˚_id
 = 'S';

132 i‡(
	`ªad
(
sg_fd
, &
rio_hdr
, (
sg_io_hdr_t
)) < 0) {

133 
	`≥º‹
("sg_queue_tst: sgÑeadÉrror");

134 
	`˛o£
(
sg_fd
);

138 
ok
 = 0;

139 
	`sg_îr_ˇãg‹y3
(&
rio_hdr
)) {

140 
SG_LIB_CAT_CLEAN
:

141 
ok
 = 1;

143 
SG_LIB_CAT_RECOVERED
:

144 
	`¥ötf
("RecoveredÉrror, continuing\n");

145 
ok
 = 1;

148 
	`sg_chk_n_¥öt3
("comm™dÉº‹", &
rio_hdr
, 1);

152 i‡(
ok
) {

154 i‡(0 =(
rio_hdr
.
∑ck_id
 % 3))

155 
	`¥ötf
("SEND DIAGNOSTIC %d duøti⁄=%u\n", 
rio_hdr
.
∑ck_id
,

156 
rio_hdr
.
duøti⁄
);

158 
	`¥ötf
("INQUIRY %d duøti⁄=%u\n", 
rio_hdr
.
∑ck_id
,

159 
rio_hdr
.
duøti⁄
);

163 
	`˛o£
(
sg_fd
);

165 
	}
}

	@examples/sg_sat_chk_power.c

30 
	~<uni°d.h
>

31 
	~<f˙é.h
>

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<°rög.h
>

35 
	~<î∫o.h
>

36 
	~<sys/io˘l.h
>

37 
	~<sys/ty≥s.h
>

38 
	~<sys/°©.h
>

39 
	~"sg_lib.h
"

40 
	~"sg_io_löux.h
"

50 
	#SAT_ATA_PASS_THROUGH16
 0x85

	)

51 
	#SAT_ATA_PASS_THROUGH16_LEN
 16

	)

52 
	#SAT_ATA_RETURN_DESC
 9

	)

53 
	#ASCQ_ATA_PT_INFO_AVAILABLE
 0x1d

	)

55 
	#ATA_CHECK_POWER_MODE
 0xe5

	)

57 
	#EBUFF_SZ
 256

	)

59 c⁄° * 
	gvîsi⁄_°r
 = "1.04 20120319";

67 
	$sg_ßt_decode_fixed_£n£
(c⁄° * 
•
, 
¶í
, * 
bp
,

68 
max_bÀn
, 
vîbo£
)

70 
n
;

72 i‡((
NULL
 =
bp
Ë|| (NULL =
•
Ë|| (
max_bÀn
 < 1Ë|| (
¶í
 < 14))

74 
bp
[0] = '\0';

75 i‡((0x70 !(0x7‡& 
•
[0])) ||

76 (
SPC_SK_RECOVERED_ERROR
 !(0x‡& 
•
[2])) ||

77 (0 !
•
[12]Ë|| (
ASCQ_ATA_PT_INFO_AVAILABLE
 != sp[13]))

79 
n
 = 
	`¢¥ötf
(
bp
, 
max_bÀn
, "error=0x%x, status=0x%x, device=0x%x, "

80 "£˘‹_cou¡(7:0)=0x%x%c\n", 
•
[3], sp[4], sp[5], sp[6],

81 ((0x40 & 
•
[8]) ? '+' : ' '));

82 i‡(
n
 >
max_bÀn
)

83  
max_bÀn
 - 1;

84 
n
 +
	`¢¥ötf
(
bp
 +Ç, 
max_bÀn
 -Ç, "extend=%d,Üog_index=0x%x, "

86 (!!(0x80 & 
•
[8])), (0xf & sp[8]), sp[9], sp[10], sp[11],

87 ((0x20 & 
•
[8]) ? '+' : ' '));

88 i‡(
n
 >
max_bÀn
)

89  
max_bÀn
 - 1;

90 i‡(
vîbo£
)

91 
n
 +
	`¢¥ötf
(
bp
 +Ç, 
max_bÀn
 -Ç, " sector_count_upper_nonzero="

92 "%d,Üba_uµî_n⁄zîo=%d\n", !!(0x40 & 
•
[8]),

93 !!(0x20 & 
•
[8]));

94  (
n
 >
max_bÀn
) ? max_blen - 1 :Ç;

95 
	}
}

98 
	$maö
(
¨gc
, * 
¨gv
[])

100 
sg_fd
, 
k
;

101 
≠tCmdBlk
[
SAT_ATA_PASS_THROUGH16_LEN
] =

102 {
SAT_ATA_PASS_THROUGH16
, 0, 0, 0, 0, 0, 0, 0,

104 
sg_io_hdr_t
 
io_hdr
;

105 * 
fûe_«me
 = 0;

106 
ebuff
[
EBUFF_SZ
];

107 
£n£_buf„r
[64];

108 
vîbo£
 = 0;

109 
exãnd
 = 0;

110 
chk_c⁄d
 = 1;

111 
¥Ÿocﬁ
 = 3;

112 
t_dú
 = 1;

113 
byã_block
 = 1;

114 
t_Àngth
 = 0;

115 c⁄° * 
u˝
 = 
NULL
;

117 
k
 = 1; k < 
¨gc
; ++k) {

118 i‡(0 =
	`°rcmp
(
¨gv
[
k
], "-v"))

119 ++
vîbo£
;

120 i‡(0 =
	`°rcmp
(
¨gv
[
k
], "-vv"))

121 
vîbo£
 += 2;

122 i‡(0 =
	`°rcmp
(
¨gv
[
k
], "-vvv"))

123 
vîbo£
 += 3;

124 i‡(0 =
	`°rcmp
(
¨gv
[
k
], "-V")) {

125 
	`Ârötf
(
°dîr
, "vîsi⁄: %s\n", 
vîsi⁄_°r
);

126 
	`exô
(0);

127 } i‡(*
¨gv
[
k
] == '-') {

128 
	`¥ötf
("Uƒecognized swôch: %s\n", 
¨gv
[
k
]);

129 
fûe_«me
 = 0;

132 i‡(0 =
fûe_«me
)

133 
fûe_«me
 = 
¨gv
[
k
];

135 
	`¥ötf
("too manyárguments\n");

136 
fûe_«me
 = 0;

140 i‡(0 =
fûe_«me
) {

141 
	`¥ötf
("Usage: 'sg_sat_chk_power [-v] [-V] <device>'\n");

145 i‡((
sg_fd
 = 
	`›í
(
fûe_«me
, 
O_RDWR
)) < 0) {

146 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

147 "sg_ßt_chk_powî:Éº‹ o≥nög fûe: %s", 
fûe_«me
);

148 
	`≥º‹
(
ebuff
);

153 
≠tCmdBlk
[14] = 
ATA_CHECK_POWER_MODE
;

154 
≠tCmdBlk
[1] = (
¥Ÿocﬁ
 << 1Ë| 
exãnd
;

155 
≠tCmdBlk
[2] = (
chk_c⁄d
 << 5Ë| (
t_dú
 << 3) |

156 (
byã_block
 << 2Ë| 
t_Àngth
;

157 i‡(
vîbo£
) {

158 
	`Ârötf
(
°dîr
, "átaÖassÅhrough(16) cdb: ");

159 
k
 = 0; k < 
SAT_ATA_PASS_THROUGH16_LEN
; ++k)

160 
	`Ârötf
(
°dîr
, "%02x ", 
≠tCmdBlk
[
k
]);

161 
	`Ârötf
(
°dîr
, "\n");

164 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr_t
));

165 
io_hdr
.
öãrÁ˚_id
 = 'S';

166 
io_hdr
.
cmd_Àn
 = (
≠tCmdBlk
);

168 
io_hdr
.
mx_sb_Àn
 = (
£n£_buf„r
);

169 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_NONE
;

170 
io_hdr
.
dx„r_Àn
 = 0;

171 
io_hdr
.
dx„Ω
 = 
NULL
;

172 
io_hdr
.
cmdp
 = 
≠tCmdBlk
;

173 
io_hdr
.
sbp
 = 
£n£_buf„r
;

174 
io_hdr
.
timeout
 = 20000;

179 i‡(
	`io˘l
(
sg_fd
, 
SG_IO
, &
io_hdr
) < 0) {

180 
	`≥º‹
("sg_sat_chk_power: SG_IO ioctlÉrror");

181 
	`˛o£
(
sg_fd
);

186 
	`sg_îr_ˇãg‹y3
(&
io_hdr
)) {

187 
SG_LIB_CAT_CLEAN
:

189 
SG_LIB_CAT_RECOVERED
:

190 
SG_LIB_CAT_NO_SENSE
:

192 
u˝
 = 
	`sg_scsi_£n£_desc_föd
(
£n£_buf„r
, (sense_buffer),

193 
SAT_ATA_RETURN_DESC
);

194 i‡(
NULL
 =
u˝
) {

195 i‡(
vîbo£
 > 1)

196 
	`¥ötf
("ATA Return DescriptorÉxpected in sense butÇot "

198 
	`sg_chk_n_¥öt3
("ATA_16 comm™dÉº‹", &
io_hdr
, 1);

199 } i‡(
vîbo£
)

200 
	`sg_chk_n_¥öt3
("ATA Return Descriptor,ásÉxpected",

201 &
io_hdr
, 1);

202 i‡(
u˝
 && ucp[3]) {

203 i‡(
u˝
[3] & 0x4)

204 
	`¥ötf
("error inÑeturned FIS:áborted command\n");

206 
	`¥ötf
("îr‹=0x%x, sètus=0x%x\n", 
u˝
[3], ucp[13]);

210 
	`Ârötf
(
°dîr
, "unexpected SCSI sense category\n");

211 
u˝
 = 
	`sg_scsi_£n£_desc_föd
(
£n£_buf„r
, (sense_buffer),

212 
SAT_ATA_RETURN_DESC
);

213 i‡(
NULL
 =
u˝
)

214 
	`sg_chk_n_¥öt3
("ATA_16 comm™dÉº‹", &
io_hdr
, 1);

215 i‡(
vîbo£
)

216 
	`sg_chk_n_¥öt3
("ATA Return Descriptor,ásÉxpected",

217 &
io_hdr
, 1);

218 i‡(
u˝
 && ucp[3]) {

219 i‡(
u˝
[3] & 0x4)

220 
	`¥ötf
("error inÑeturned FIS:áborted command\n");

222 
	`¥ötf
("îr‹=0x%x, sètus=0x%x\n", 
u˝
[3], ucp[13]);

227 i‡(
u˝
) {

228 
u˝
[5]) {

230 
	`¥ötf
("Ináctive mode or idle mode\n");

233 
	`¥ötf
("In idle mode\n");

236 
	`¥ötf
("In NVÖower modeánd spindle is spun or spinning up\n");

239 
	`¥ötf
("In NVÖower modeánd spindle is spun or spinning down\n");

242 
	`¥ötf
("In standby mode\n");

245 
	`¥ötf
("unknow¿powî modê(£˘‹ cou¡ËvÆue=0x%x\n", 
u˝
[5]);

249 
	`Ârötf
(
°dîr
, "Expectingá ATA Return Descriptor in senseánd "

252 
	`˛o£
(
sg_fd
);

254 
	}
}

	@examples/sg_sat_smart_rd_data.c

30 
	~<uni°d.h
>

31 
	~<f˙é.h
>

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<°rög.h
>

35 
	~<î∫o.h
>

36 
	~<sys/io˘l.h
>

37 
	~<sys/ty≥s.h
>

38 
	~<sys/°©.h
>

39 
	~"sg_lib.h
"

40 
	~"sg_io_löux.h
"

50 
	#SAT_ATA_PASS_THROUGH16
 0x85

	)

51 
	#SAT_ATA_PASS_THROUGH16_LEN
 16

	)

52 
	#SAT_ATA_RETURN_DESC
 9

	)

54 
	#ATA_SMART
 0xb0

	)

55 
	#ATA_SMART_READ_DATA
 0xd0

	)

56 
	#SMART_READ_DATA_RESPONSE_LEN
 512

	)

58 
	#EBUFF_SZ
 256

	)

60 * 
	gvîsi⁄_°r
 = "1.02 20070130";

62 
	$maö
(
¨gc
, * 
¨gv
[])

64 
sg_fd
, 
k
, 
ok
;

65 
≠tCmdBlk
[
SAT_ATA_PASS_THROUGH16_LEN
] =

66 {
SAT_ATA_PASS_THROUGH16
, 0, 0, 0, 0, 0, 0, 0,

68 
sg_io_hdr_t
 
io_hdr
;

69 * 
fûe_«me
 = 0;

70 
ebuff
[
EBUFF_SZ
];

71 
öBuff
[
SMART_READ_DATA_RESPONSE_LEN
];

72 
£n£_buf„r
[32];

73 
vîbo£
 = 0;

74 
exãnd
 = 0;

75 
chk_c⁄d
 = 0;

76 
¥Ÿocﬁ
 = 4;

77 
t_dú
 = 1;

78 
byã_block
 = 1;

79 
t_Àngth
 = 2;

80 c⁄° * 
u˝
 = 
NULL
;

82 
k
 = 1; k < 
¨gc
; ++k) {

83 i‡(0 =
	`°rcmp
(
¨gv
[
k
], "-v"))

84 ++
vîbo£
;

85 i‡(0 =
	`°rcmp
(
¨gv
[
k
], "-vv"))

86 
vîbo£
 += 2;

87 i‡(0 =
	`°rcmp
(
¨gv
[
k
], "-vvv"))

88 
vîbo£
 += 3;

89 i‡(0 =
	`°rcmp
(
¨gv
[
k
], "-V")) {

90 
	`Ârötf
(
°dîr
, "vîsi⁄: %s\n", 
vîsi⁄_°r
);

91 
	`exô
(0);

92 } i‡(*
¨gv
[
k
] == '-') {

93 
	`¥ötf
("Uƒecognized swôch: %s\n", 
¨gv
[
k
]);

94 
fûe_«me
 = 0;

97 i‡(0 =
fûe_«me
)

98 
fûe_«me
 = 
¨gv
[
k
];

100 
	`¥ötf
("too manyárguments\n");

101 
fûe_«me
 = 0;

105 i‡(0 =
fûe_«me
) {

106 
	`¥ötf
("Usage: 'sg_sat_smart_rd_data [-v] [-V] <device>'\n");

110 i‡((
sg_fd
 = 
	`›í
(
fûe_«me
, 
O_RDWR
)) < 0) {

111 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

112 "sg_ßt_sm¨t_rd_d©a:Éº‹ o≥nög fûe: %s", 
fûe_«me
);

113 
	`≥º‹
(
ebuff
);

118 
≠tCmdBlk
[4] = 
ATA_SMART_READ_DATA
;

119 
≠tCmdBlk
[6] = 1;

120 
≠tCmdBlk
[10] = 0x4f;

121 
≠tCmdBlk
[12] = 0xc2;

122 
≠tCmdBlk
[14] = 
ATA_SMART
;

123 
≠tCmdBlk
[1] = (
¥Ÿocﬁ
 << 1Ë| 
exãnd
;

124 
≠tCmdBlk
[2] = (
chk_c⁄d
 << 5Ë| (
t_dú
 << 3) |

125 (
byã_block
 << 2Ë| 
t_Àngth
;

126 i‡(
vîbo£
) {

127 
	`Ârötf
(
°dîr
, "átaÖassÅhrough(16) cdb: ");

128 
k
 = 0; k < 
SAT_ATA_PASS_THROUGH16_LEN
; ++k)

129 
	`Ârötf
(
°dîr
, "%02x ", 
≠tCmdBlk
[
k
]);

130 
	`Ârötf
(
°dîr
, "\n");

133 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr_t
));

134 
io_hdr
.
öãrÁ˚_id
 = 'S';

135 
io_hdr
.
cmd_Àn
 = (
≠tCmdBlk
);

137 
io_hdr
.
mx_sb_Àn
 = (
£n£_buf„r
);

138 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

139 
io_hdr
.
dx„r_Àn
 = 
SMART_READ_DATA_RESPONSE_LEN
;

140 
io_hdr
.
dx„Ω
 = 
öBuff
;

141 
io_hdr
.
cmdp
 = 
≠tCmdBlk
;

142 
io_hdr
.
sbp
 = 
£n£_buf„r
;

143 
io_hdr
.
timeout
 = 20000;

148 i‡(
	`io˘l
(
sg_fd
, 
SG_IO
, &
io_hdr
) < 0) {

149 
	`≥º‹
("sg_sat_smart_rd_data: SG_IO ioctlÉrror");

150 
	`˛o£
(
sg_fd
);

155 
ok
 = 0;

156 
	`sg_îr_ˇãg‹y3
(&
io_hdr
)) {

157 
SG_LIB_CAT_CLEAN
:

158 
ok
 = 1;

160 
SG_LIB_CAT_RECOVERED
:

161 
u˝
 = 
	`sg_scsi_£n£_desc_föd
(
£n£_buf„r
, (sense_buffer),

162 
SAT_ATA_RETURN_DESC
);

163 i‡(
NULL
 =
u˝
) {

164 i‡(
vîbo£
 > 1)

165 
	`¥ötf
("ATA Return DescriptorÉxpected in sense butÇot "

167 
	`sg_chk_n_¥öt3
("ATA_16 comm™dÉº‹", &
io_hdr
, 1);

168 } i‡(
vîbo£
)

169 
	`sg_chk_n_¥öt3
("ATA Rëu∫ Des¸ùt‹", &
io_hdr
, 1);

170 i‡(
u˝
 && ucp[3])

171 
	`¥ötf
("îr‹=0x%x, sètus=0x%x\n", 
u˝
[3], ucp[13]);

173 
ok
 = 1;

176 
	`sg_chk_n_¥öt3
("ATA_16 comm™dÉº‹", &
io_hdr
, 1);

180 i‡(
ok
) {

181 
	`¥ötf
("Response:\n");

182 
	`dW‹dHex
((c⁄° *)
öBuff
, 256, 0,

183 
	`sg_is_big_ídün
());

186 
	`˛o£
(
sg_fd
);

188 
	}
}

	@examples/sg_sense_test.c

1 
	~<uni°d.h
>

2 
	~<f˙é.h
>

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<î∫o.h
>

7 
	~<sys/io˘l.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/°©.h
>

10 
	~"sg_lib.h
"

23 
	#EBUFF_SZ
 256

	)

25 
	#ME
 "sg_£n£_ã°: "

	)

29 
	$maö
( )

31 
îr1
[] = {0x72, 0x5, 0x4, 0x1, 0, 0, 0, 32,

37 
îr2
[] = {0x72, 
SPC_SK_MEDIUM_ERROR
, 0x4, 0x1, 0x80, 0, 0,

45 
îr3
[] = {0x72, 
SPC_SK_NO_SENSE
, 0x4, 0x1, 0, 0, 0, 8,

47 
îr4
[] = {0x73, 
SPC_SK_COPY_ABORTED
, 0x4, 0x1, 0, 0, 0, 22,

53 
îr5
[] = {0xf1, 0, (0xf0 | 
SPC_SK_ILLEGAL_REQUEST
), 0x11,

56 
îr6
[] = {0x72, 
SPC_SK_NO_SENSE
, 0x4, 0x1, 0, 0, 0, 14,

59 
îr7
[] = {0xf1, 0, 0xe5, 0x11, 0x22, 0x33, 0x44, 0xa,

62 
Àadö
[128];

63 
b
[2048];

64 
k
, 
¥ev_Àn
;

66 
	`sg_¥öt_£n£
("îr1Åe°", 
îr1
, (err1), 1 );

67 
	`sg_¥öt_£n£
("\√º2Åe°", 
îr2
, (err2), 1);

68 
	`sg_¥öt_£n£
("\√º3Åe°", 
îr3
, (err3), 1);

69 
	`sg_¥öt_£n£
("\√º4Åe°", 
îr4
, (err4), 1);

70 
	`sg_¥öt_£n£
("\√º5Åe°", 
îr5
, (err5), 1);

71 
	`sg_¥öt_£n£
("\√º6Åe°", 
îr6
, (err6), 1);

72 
	`sg_¥öt_£n£
("\√º7Åe°", 
îr7
, (err7), 1);

74 
	`¥ötf
("\n\nTry different output string sizes with "

76 
k
 = 1, 
¥ev_Àn
 = -1; k < 512; ++k) {

77 
	`¢¥ötf
(
Àadö
, ÷ódö), "bÀn=%d", 
k
);

78 
	`sg_gë_£n£_°r
(
Àadö
, 
îr2
, ”º2), 0, 
k
, 
b
);

79 
	`¥ötf
("%s\n", 
b
);

80 i‡(
¥ev_Àn
 =()
	`°æí
(
b
))

83 
¥ev_Àn
 = 
	`°æí
(
b
);

86 
	`¥ötf
("\n\nTry different output string sizes with "

88 
k
 = 1, 
¥ev_Àn
 = -1; k < 512; ++k) {

89 
	`¢¥ötf
(
Àadö
, ÷ódö), "bÀn=%d", 
k
);

90 
	`sg_gë_£n£_°r
(
Àadö
, 
îr4
, ”º4), 0, 
k
, 
b
);

91 
	`¥ötf
("%s\n", 
b
);

92 i‡(
¥ev_Àn
 =()
	`°æí
(
b
))

95 
¥ev_Àn
 = 
	`°æí
(
b
);

98 
	}
}

	@examples/sg_simple1.c

1 
	~<uni°d.h
>

2 
	~<f˙é.h
>

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<î∫o.h
>

7 
	~<sys/io˘l.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/°©.h
>

10 
	~"sg_lib.h
"

11 
	~"sg_io_löux.h
"

39 
	#INQ_REPLY_LEN
 96

	)

40 
	#INQ_CMD_LEN
 6

	)

41 
	#TUR_CMD_LEN
 6

	)

43 
	#EBUFF_SZ
 256

	)

45 
	$maö
(
¨gc
, * 
¨gv
[])

47 
sg_fd
, 
k
, 
ok
;

48 
öqCmdBlk
 [
INQ_CMD_LEN
] =

49 {0x12, 0, 0, 0, 
INQ_REPLY_LEN
, 0};

50 
turCmdBlk
 [
TUR_CMD_LEN
] =

52 
öqBuff
[
INQ_REPLY_LEN
];

53 
sg_io_hdr_t
 
io_hdr
;

54 * 
fûe_«me
 = 0;

55 
ebuff
[
EBUFF_SZ
];

56 
£n£_buf„r
[32];

57 
do_exåa
 = 0;

59 
k
 = 1; k < 
¨gc
; ++k) {

60 i‡(0 =
	`memcmp
("-x", 
¨gv
[
k
], 2))

61 
do_exåa
 = 1;

62 i‡(*
¨gv
[
k
] == '-') {

63 
	`¥ötf
("Uƒecognized swôch: %s\n", 
¨gv
[
k
]);

64 
fûe_«me
 = 0;

67 i‡(0 =
fûe_«me
)

68 
fûe_«me
 = 
¨gv
[
k
];

70 
	`¥ötf
("too manyárguments\n");

71 
fûe_«me
 = 0;

75 i‡(0 =
fûe_«me
) {

76 
	`¥ötf
("Usage: 'sg_simple1 [-x] <sg_device>'\n");

81 i‡((
sg_fd
 = 
	`›í
(
fûe_«me
, 
O_RDONLY
)) < 0) {

82 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

83 "sg_sim∂e1:Éº‹ o≥nög fûe: %s", 
fûe_«me
);

84 
	`≥º‹
(
ebuff
);

88 i‡((
	`io˘l
(
sg_fd
, 
SG_GET_VERSION_NUM
, &
k
) < 0) || (k < 30000)) {

89 
	`¥ötf
("sg_simple1: %s doesn't seemÅo beánÇew sg device\n",

90 
fûe_«me
);

91 
	`˛o£
(
sg_fd
);

96 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr_t
));

97 
io_hdr
.
öãrÁ˚_id
 = 'S';

98 
io_hdr
.
cmd_Àn
 = (
öqCmdBlk
);

100 
io_hdr
.
mx_sb_Àn
 = (
£n£_buf„r
);

101 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

102 
io_hdr
.
dx„r_Àn
 = 
INQ_REPLY_LEN
;

103 
io_hdr
.
dx„Ω
 = 
öqBuff
;

104 
io_hdr
.
cmdp
 = 
öqCmdBlk
;

105 
io_hdr
.
sbp
 = 
£n£_buf„r
;

106 
io_hdr
.
timeout
 = 20000;

111 i‡(
	`io˘l
(
sg_fd
, 
SG_IO
, &
io_hdr
) < 0) {

112 
	`≥º‹
("sg_simple1: Inquiry SG_IO ioctlÉrror");

113 
	`˛o£
(
sg_fd
);

118 
ok
 = 0;

119 
	`sg_îr_ˇãg‹y3
(&
io_hdr
)) {

120 
SG_LIB_CAT_CLEAN
:

121 
ok
 = 1;

123 
SG_LIB_CAT_RECOVERED
:

124 
	`¥ötf
("RecoveredÉrror on INQUIRY, continuing\n");

125 
ok
 = 1;

128 
	`sg_chk_n_¥öt3
("INQUIRY comm™dÉº‹", &
io_hdr
, 1);

132 i‡(
ok
) {

133 * 
p
 = (*)
öqBuff
;

134 
f
 = ()*(
p
 + 7);

135 
	`¥ötf
("Some ofÅhe INQUIRY command'sÑesults:\n");

136 
	`¥ötf
(" %.8† %.16† %.4† ", 
p
 + 8,Ö + 16,Ö + 32);

137 
	`¥ötf
("[wide=%d sync=%d cmdque=%d sftre=%d]\n",

138 !!(
f
 & 0x20), !!(f & 0x10), !!(f & 2), !!(f & 1));

140 i‡(
do_exåa
)

141 
	`¥ötf
("INQUIRY duration=%u millisecs,Ñesid=%d, msg_status=%d\n",

142 
io_hdr
.
duøti⁄
, io_hdr.
ªsid
, ()io_hdr.
msg_°©us
);

147 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr_t
));

148 
io_hdr
.
öãrÁ˚_id
 = 'S';

149 
io_hdr
.
cmd_Àn
 = (
turCmdBlk
);

150 
io_hdr
.
mx_sb_Àn
 = (
£n£_buf„r
);

151 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_NONE
;

152 
io_hdr
.
cmdp
 = 
turCmdBlk
;

153 
io_hdr
.
sbp
 = 
£n£_buf„r
;

154 
io_hdr
.
timeout
 = 20000;

156 i‡(
	`io˘l
(
sg_fd
, 
SG_IO
, &
io_hdr
) < 0) {

157 
	`≥º‹
("sg_simple1: Test Unit Ready SG_IO ioctlÉrror");

158 
	`˛o£
(
sg_fd
);

163 
ok
 = 0;

164 
	`sg_îr_ˇãg‹y3
(&
io_hdr
)) {

165 
SG_LIB_CAT_CLEAN
:

166 
ok
 = 1;

168 
SG_LIB_CAT_RECOVERED
:

169 
	`¥ötf
("RecoveredÉrror on Test Unit Ready, continuing\n");

170 
ok
 = 1;

173 
	`sg_chk_n_¥öt3
("Te° Unô Ródy comm™dÉº‹", &
io_hdr
, 1);

177 i‡(
ok
)

178 
	`¥ötf
("Test Unit Ready successful so unit isÑeady!\n");

180 
	`¥ötf
("Test Unit Ready failed so unit may _not_ beÑeady!\n");

182 i‡(
do_exåa
)

183 
	`¥ötf
("TEST UNIT READY duration=%u millisecs,Ñesid=%d, "

184 "msg_°©us=%d\n", 
io_hdr
.
duøti⁄
, io_hdr.
ªsid
,

185 ()
io_hdr
.
msg_°©us
);

187 
	`˛o£
(
sg_fd
);

189 
	}
}

	@examples/sg_simple16.c

1 
	~<uni°d.h
>

2 
	~<f˙é.h
>

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<î∫o.h
>

7 
	~<sys/io˘l.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/°©.h
>

10 
	~"sg_lib.h
"

11 
	~"sg_io_löux.h
"

28 
	#READ16_REPLY_LEN
 512

	)

29 
	#READ16_CMD_LEN
 16

	)

31 
	#EBUFF_SZ
 256

	)

33 
	$maö
(
¨gc
, * 
¨gv
[])

35 
sg_fd
, 
k
, 
ok
;

36 
r16CmdBlk
 [
READ16_CMD_LEN
] =

38 
sg_io_hdr_t
 
io_hdr
;

39 * 
fûe_«me
 = 0;

40 
ebuff
[
EBUFF_SZ
];

41 
öBuff
[
READ16_REPLY_LEN
];

42 
£n£_buf„r
[32];

44 
k
 = 1; k < 
¨gc
; ++k) {

45 i‡(*
¨gv
[
k
] == '-') {

46 
	`¥ötf
("Uƒecognized swôch: %s\n", 
¨gv
[
k
]);

47 
fûe_«me
 = 0;

50 i‡(0 =
fûe_«me
)

51 
fûe_«me
 = 
¨gv
[
k
];

53 
	`¥ötf
("too manyárguments\n");

54 
fûe_«me
 = 0;

58 i‡(0 =
fûe_«me
) {

59 
	`¥ötf
("Usage: 'sg_simple16 <sg_device>'\n");

63 i‡((
sg_fd
 = 
	`›í
(
fûe_«me
, 
O_RDWR
)) < 0) {

64 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

65 "sg_sim∂e16:Éº‹ o≥nög fûe: %s", 
fûe_«me
);

66 
	`≥º‹
(
ebuff
);

70 i‡((
	`io˘l
(
sg_fd
, 
SG_GET_VERSION_NUM
, &
k
) < 0) || (k < 30000)) {

71 
	`¥ötf
("sg_simple16: %s doesn't seemÅo beánÇew sg device\n",

72 
fûe_«me
);

73 
	`˛o£
(
sg_fd
);

78 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr_t
));

79 
io_hdr
.
öãrÁ˚_id
 = 'S';

80 
io_hdr
.
cmd_Àn
 = (
r16CmdBlk
);

82 
io_hdr
.
mx_sb_Àn
 = (
£n£_buf„r
);

83 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

84 
io_hdr
.
dx„r_Àn
 = 
READ16_REPLY_LEN
;

85 
io_hdr
.
dx„Ω
 = 
öBuff
;

86 
io_hdr
.
cmdp
 = 
r16CmdBlk
;

87 
io_hdr
.
sbp
 = 
£n£_buf„r
;

88 
io_hdr
.
timeout
 = 20000;

93 i‡(
	`io˘l
(
sg_fd
, 
SG_IO
, &
io_hdr
) < 0) {

94 
	`≥º‹
("sg_simple16: Inquiry SG_IO ioctlÉrror");

95 
	`˛o£
(
sg_fd
);

100 
ok
 = 0;

101 
	`sg_îr_ˇãg‹y3
(&
io_hdr
)) {

102 
SG_LIB_CAT_CLEAN
:

103 
ok
 = 1;

105 
SG_LIB_CAT_RECOVERED
:

106 
	`¥ötf
("RecoveredÉrror on READ_16, continuing\n");

107 
ok
 = 1;

110 
	`sg_chk_n_¥öt3
("READ_16 comm™dÉº‹", &
io_hdr
, 1);

114 i‡(
ok
) {

115 
	`¥ötf
("READ_16 duration=%u millisecs,Ñesid=%d, msg_status=%d\n",

116 
io_hdr
.
duøti⁄
, io_hdr.
ªsid
, ()io_hdr.
msg_°©us
);

119 
	`˛o£
(
sg_fd
);

121 
	}
}

	@examples/sg_simple2.c

1 
	~<uni°d.h
>

2 
	~<f˙é.h
>

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<î∫o.h
>

7 
	~<sys/io˘l.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/°©.h
>

10 
	~"sg_löux_öc.h
"

39 
	#INQ_REPLY_LEN
 96

	)

40 
	#INQ_CMD_LEN
 6

	)

41 
	#TUR_CMD_LEN
 6

	)

43 
	#EBUFF_SZ
 256

	)

46 
	$maö
(
¨gc
, * 
¨gv
[])

48 
sg_fd
, 
k
;

49 
öqCmdBlk
 [
INQ_CMD_LEN
] =

50 {0x12, 0, 0, 0, 
INQ_REPLY_LEN
, 0};

51 
turCmdBlk
 [
TUR_CMD_LEN
] =

53 
öqBuff
[
INQ_REPLY_LEN
];

54 
sg_io_hdr_t
 
io_hdr
;

55 * 
fûe_«me
 = 0;

56 
ebuff
[
EBUFF_SZ
];

57 
£n£_buf„r
[32];

58 
do_exåa
 = 0;

60 
k
 = 1; k < 
¨gc
; ++k) {

61 i‡(0 =
	`memcmp
("-x", 
¨gv
[
k
], 2))

62 
do_exåa
 = 1;

63 i‡(*
¨gv
[
k
] == '-') {

64 
	`¥ötf
("Uƒecognized swôch: %s\n", 
¨gv
[
k
]);

65 
fûe_«me
 = 0;

68 i‡(0 =
fûe_«me
)

69 
fûe_«me
 = 
¨gv
[
k
];

71 
	`¥ötf
("too manyárguments\n");

72 
fûe_«me
 = 0;

76 i‡(0 =
fûe_«me
) {

77 
	`¥ötf
("Usage: 'sg_simple2 [-x] <sg_device>'\n");

82 i‡((
sg_fd
 = 
	`›í
(
fûe_«me
, 
O_RDONLY
)) < 0) {

83 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

84 "sg_sim∂e2:Éº‹ o≥nög fûe: %s", 
fûe_«me
);

85 
	`≥º‹
(
ebuff
);

89 i‡((
	`io˘l
(
sg_fd
, 
SG_GET_VERSION_NUM
, &
k
) < 0) || (k < 30000)) {

90 
	`¥ötf
("sg_simple2: %s doesn't seemÅo beánÇew sg device\n",

91 
fûe_«me
);

92 
	`˛o£
(
sg_fd
);

97 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr_t
));

98 
io_hdr
.
öãrÁ˚_id
 = 'S';

99 
io_hdr
.
cmd_Àn
 = (
öqCmdBlk
);

101 
io_hdr
.
mx_sb_Àn
 = (
£n£_buf„r
);

102 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

103 
io_hdr
.
dx„r_Àn
 = 
INQ_REPLY_LEN
;

104 
io_hdr
.
dx„Ω
 = 
öqBuff
;

105 
io_hdr
.
cmdp
 = 
öqCmdBlk
;

106 
io_hdr
.
sbp
 = 
£n£_buf„r
;

107 
io_hdr
.
timeout
 = 20000;

112 i‡(
	`io˘l
(
sg_fd
, 
SG_IO
, &
io_hdr
) < 0) {

113 
	`≥º‹
("sg_simple2: Inquiry SG_IO ioctlÉrror");

114 
	`˛o£
(
sg_fd
);

119 i‡((
io_hdr
.
öfo
 & 
SG_INFO_OK_MASK
Ë!
SG_INFO_OK
) {

120 i‡(
io_hdr
.
sb_Àn_wr
 > 0) {

121 
	`¥ötf
("INQUIRY sense data: ");

122 
k
 = 0; k < 
io_hdr
.
sb_Àn_wr
; ++k) {

123 i‡((
k
 > 0) && (0 == (k % 10)))

124 
	`¥ötf
("\n ");

125 
	`¥ötf
("0x%02x ", 
£n£_buf„r
[
k
]);

127 
	`¥ötf
("\n");

129 i‡(
io_hdr
.
masked_°©us
)

130 
	`¥ötf
("INQUIRY SCSI sètus=0x%x\n", 
io_hdr
.
°©us
);

131 i‡(
io_hdr
.
ho°_°©us
)

132 
	`¥ötf
("INQUIRY ho°_°©us=0x%x\n", 
io_hdr
.
ho°_°©us
);

133 i‡(
io_hdr
.
drivî_°©us
)

134 
	`¥ötf
("INQUIRY drivî_°©us=0x%x\n", 
io_hdr
.
drivî_°©us
);

137 * 
p
 = (*)
öqBuff
;

138 
f
 = ()*(
p
 + 7);

139 
	`¥ötf
("Some ofÅhe INQUIRY command'sÑesults:\n");

140 
	`¥ötf
(" %.8† %.16† %.4† ", 
p
 + 8,Ö + 16,Ö + 32);

141 
	`¥ötf
("[wide=%d sync=%d cmdque=%d sftre=%d]\n",

142 !!(
f
 & 0x20), !!(f & 0x10), !!(f & 2), !!(f & 1));

145 i‡(
do_exåa
)

146 
	`¥ötf
("INQUIRY duration=%u millisecs,Ñesid=%d, msg_status=%d\n",

147 
io_hdr
.
duøti⁄
, io_hdr.
ªsid
, ()io_hdr.
msg_°©us
);

150 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr_t
));

151 
io_hdr
.
öãrÁ˚_id
 = 'S';

152 
io_hdr
.
cmd_Àn
 = (
turCmdBlk
);

153 
io_hdr
.
mx_sb_Àn
 = (
£n£_buf„r
);

154 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_NONE
;

155 
io_hdr
.
cmdp
 = 
turCmdBlk
;

156 
io_hdr
.
sbp
 = 
£n£_buf„r
;

157 
io_hdr
.
timeout
 = 20000;

159 i‡(
	`io˘l
(
sg_fd
, 
SG_IO
, &
io_hdr
) < 0) {

160 
	`≥º‹
("sg_simple2: Test Unit Ready SG_IO ioctlÉrror");

161 
	`˛o£
(
sg_fd
);

166 i‡((
io_hdr
.
öfo
 & 
SG_INFO_OK_MASK
Ë!
SG_INFO_OK
) {

167 i‡(
io_hdr
.
sb_Àn_wr
 > 0) {

168 
	`¥ötf
("TEST UNIT READY sense data: ");

169 
k
 = 0; k < 
io_hdr
.
sb_Àn_wr
; ++k) {

170 i‡((
k
 > 0) && (0 == (k % 10)))

171 
	`¥ötf
("\n ");

172 
	`¥ötf
("0x%02x ", 
£n£_buf„r
[
k
]);

174 
	`¥ötf
("\n");

176 i‡(
io_hdr
.
masked_°©us
)

177 
	`¥ötf
("TEST UNIT READY SCSI sètus=0x%x\n", 
io_hdr
.
°©us
);

178 i‡(
io_hdr
.
ho°_°©us
)

179 
	`¥ötf
("TEST UNIT READY ho°_°©us=0x%x\n", 
io_hdr
.
ho°_°©us
);

180 i‡(
io_hdr
.
drivî_°©us
)

181 
	`¥ötf
("TEST UNIT READY driver_status=0x%x\n",

182 
io_hdr
.
drivî_°©us
);

184 
	`¥ötf
("TEST UNIT READY unexpectedÉrror\n");

185 
	`¥ötf
("Test Unit Ready failed so unit may _not_ beÑeady!\n");

188 
	`¥ötf
("Test Unit Ready successful so unit isÑeady!\n");

190 i‡(
do_exåa
)

191 
	`¥ötf
("TEST UNIT READY duration=%u millisecs,Ñesid=%d, "

192 "msg_°©us=%d\n", 
io_hdr
.
duøti⁄
, io_hdr.
ªsid
,

193 ()
io_hdr
.
msg_°©us
);

195 
	`˛o£
(
sg_fd
);

197 
	}
}

	@examples/sg_simple3.c

1 
	~<uni°d.h
>

2 
	~<f˙é.h
>

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<î∫o.h
>

7 
	~<sys/io˘l.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/°©.h
>

10 
	~"sg_lib.h
"

11 
	~"sg_io_löux.h
"

38 
	#INQ_REPLY_BASE_LEN
 8

	)

39 
	#INQ_REPLY_VID_LEN
 8

	)

40 
	#INQ_REPLY_PID_LEN
 16

	)

41 
	#INQ_REPLY_PREV_LEN
 4

	)

42 
	#INQ_REPLY_IOVEC_COUNT
 4

	)

43 
	#INQ_CMD_LEN
 6

	)

44 
	#TUR_CMD_LEN
 6

	)

46 
	#EBUFF_SZ
 256

	)

48 
	$maö
(
¨gc
, * 
¨gv
[])

50 
sg_fd
, 
k
, 
ok
;

51 
öqCmdBlk
 [
INQ_CMD_LEN
] = {0x12, 0, 0, 0,

52 
INQ_REPLY_BASE_LEN
 + 
INQ_REPLY_VID_LEN
 +

53 
INQ_REPLY_PID_LEN
 + 
INQ_REPLY_PREV_LEN
, 0};

54 
turCmdBlk
 [
TUR_CMD_LEN
] = {0x00, 0, 0, 0, 0, 0};

55 
sg_iovec_t
 
iovec
[
INQ_REPLY_IOVEC_COUNT
];

56 
öqBa£Buff
[
INQ_REPLY_BASE_LEN
];

57 
öqVidBuff
[
INQ_REPLY_VID_LEN
];

58 
öqPidBuff
[
INQ_REPLY_PID_LEN
];

59 
öqPRevBuff
[
INQ_REPLY_PREV_LEN
];

60 
sg_io_hdr_t
 
io_hdr
;

61 * 
fûe_«me
 = 0;

62 
ebuff
[
EBUFF_SZ
];

63 
£n£_buf„r
[32];

64 
do_exåa
 = 0;

66 
k
 = 1; k < 
¨gc
; ++k) {

67 i‡(0 =
	`memcmp
("-x", 
¨gv
[
k
], 2))

68 
do_exåa
 = 1;

69 i‡(*
¨gv
[
k
] == '-') {

70 
	`¥ötf
("Uƒecognized swôch: %s\n", 
¨gv
[
k
]);

71 
fûe_«me
 = 0;

74 i‡(0 =
fûe_«me
)

75 
fûe_«me
 = 
¨gv
[
k
];

77 
	`¥ötf
("too manyárguments\n");

78 
fûe_«me
 = 0;

82 i‡(0 =
fûe_«me
) {

83 
	`¥ötf
("Usage: 'sg_simple3 [-x] <sg_device>'\n");

88 i‡((
sg_fd
 = 
	`›í
(
fûe_«me
, 
O_RDONLY
)) < 0) {

89 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

90 "sg_sim∂e3:Éº‹ o≥nög fûe: %s", 
fûe_«me
);

91 
	`≥º‹
(
ebuff
);

95 i‡((
	`io˘l
(
sg_fd
, 
SG_GET_VERSION_NUM
, &
k
) < 0) || (k < 30000)) {

96 
	`¥ötf
("sg_simple3: %s doesn't seemÅo beánÇew sg device\n",

97 
fûe_«me
);

98 
	`˛o£
(
sg_fd
);

103 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr_t
));

104 
io_hdr
.
öãrÁ˚_id
 = 'S';

105 
io_hdr
.
cmd_Àn
 = (
öqCmdBlk
);

106 
io_hdr
.
iovec_cou¡
 = 
INQ_REPLY_IOVEC_COUNT
;

107 
io_hdr
.
mx_sb_Àn
 = (
£n£_buf„r
);

108 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

109 
io_hdr
.
dx„r_Àn
 = 
INQ_REPLY_BASE_LEN
 + 
INQ_REPLY_VID_LEN
 +

110 
INQ_REPLY_PID_LEN
 + 
INQ_REPLY_PREV_LEN
;

111 
iovec
[0].
iov_ba£
 = 
öqBa£Buff
;

112 
iovec
[0].
iov_Àn
 = 
INQ_REPLY_BASE_LEN
;

113 
iovec
[1].
iov_ba£
 = 
öqVidBuff
;

114 
iovec
[1].
iov_Àn
 = 
INQ_REPLY_VID_LEN
;

115 
iovec
[2].
iov_ba£
 = 
öqPidBuff
;

116 
iovec
[2].
iov_Àn
 = 
INQ_REPLY_PID_LEN
;

117 
iovec
[3].
iov_ba£
 = 
öqPRevBuff
;

118 
iovec
[3].
iov_Àn
 = 
INQ_REPLY_PREV_LEN
;

119 
io_hdr
.
dx„Ω
 = 
iovec
;

120 
io_hdr
.
cmdp
 = 
öqCmdBlk
;

121 
io_hdr
.
sbp
 = 
£n£_buf„r
;

122 
io_hdr
.
timeout
 = 20000;

127 i‡(
	`io˘l
(
sg_fd
, 
SG_IO
, &
io_hdr
) < 0) {

128 
	`≥º‹
("sg_simple3: Inquiry SG_IO ioctlÉrror");

129 
	`˛o£
(
sg_fd
);

134 
ok
 = 0;

135 
	`sg_îr_ˇãg‹y3
(&
io_hdr
)) {

136 
SG_LIB_CAT_CLEAN
:

137 
ok
 = 1;

139 
SG_LIB_CAT_RECOVERED
:

140 
	`¥ötf
("RecoveredÉrror on INQUIRY, continuing\n");

141 
ok
 = 1;

144 
	`sg_chk_n_¥öt3
("INQUIRY comm™dÉº‹", &
io_hdr
, 1);

148 i‡(
ok
) {

149 * 
p
 = (*)
öqBa£Buff
;

150 
f
 = ()*(
p
 + 7);

151 
	`¥ötf
("Some ofÅhe INQUIRY command'sÑesults:\n");

152 
	`¥ötf
(" %.8† %.16† %.4† ", 
öqVidBuff
, 
öqPidBuff
, 
öqPRevBuff
);

153 
	`¥ötf
("[wide=%d sync=%d cmdque=%d sftre=%d]\n",

154 !!(
f
 & 0x20), !!(f & 0x10), !!(f & 2), !!(f & 1));

156 i‡(
do_exåa
)

157 
	`¥ötf
("INQUIRY duration=%u millisecs,Ñesid=%d, msg_status=%d\n",

158 
io_hdr
.
duøti⁄
, io_hdr.
ªsid
, ()io_hdr.
msg_°©us
);

163 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr_t
));

164 
io_hdr
.
öãrÁ˚_id
 = 'S';

165 
io_hdr
.
cmd_Àn
 = (
turCmdBlk
);

166 
io_hdr
.
mx_sb_Àn
 = (
£n£_buf„r
);

167 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_NONE
;

168 
io_hdr
.
cmdp
 = 
turCmdBlk
;

169 
io_hdr
.
sbp
 = 
£n£_buf„r
;

170 
io_hdr
.
timeout
 = 20000;

172 i‡(
	`io˘l
(
sg_fd
, 
SG_IO
, &
io_hdr
) < 0) {

173 
	`≥º‹
("sg_simple3: Test Unit Ready SG_IO ioctlÉrror");

174 
	`˛o£
(
sg_fd
);

179 
ok
 = 0;

180 
	`sg_îr_ˇãg‹y3
(&
io_hdr
)) {

181 
SG_LIB_CAT_CLEAN
:

182 
ok
 = 1;

184 
SG_LIB_CAT_RECOVERED
:

185 
	`¥ötf
("RecoveredÉrror on Test Unit Ready, continuing\n");

186 
ok
 = 1;

189 
	`sg_chk_n_¥öt3
("Te° Unô Ródy comm™dÉº‹", &
io_hdr
, 1);

193 i‡(
ok
)

194 
	`¥ötf
("Test Unit Ready successful so unit isÑeady!\n");

196 
	`¥ötf
("Test Unit Ready failed so unit may _not_ beÑeady!\n");

198 i‡(
do_exåa
)

199 
	`¥ötf
("TEST UNIT READY duration=%u millisecs,Ñesid=%d, "

200 "msg_°©us=%d\n", 
io_hdr
.
duøti⁄
, io_hdr.
ªsid
,

201 ()
io_hdr
.
msg_°©us
);

203 
	`˛o£
(
sg_fd
);

205 
	}
}

	@examples/sg_simple4.c

1 
	~<uni°d.h
>

2 
	~<f˙é.h
>

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<î∫o.h
>

7 
	~<sys/io˘l.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/°©.h
>

10 
	~<sys/mm™.h
>

11 
	~"sg_lib.h
"

12 
	~"sg_io_löux.h
"

37 #i‚de‡
SG_FLAG_MMAP_IO


38 
	#SG_FLAG_MMAP_IO
 4

	)

41 
	#INQ_REPLY_LEN
 96

	)

42 
	#INQ_CMD_LEN
 6

	)

43 
	#TUR_CMD_LEN
 6

	)

45 
	#EBUFF_SZ
 256

	)

47 
	$maö
(
¨gc
, * 
¨gv
[])

49 
sg_fd
, 
k
, 
ok
;

50 
öqCmdBlk
 [
INQ_CMD_LEN
] =

51 {0x12, 0, 0, 0, 
INQ_REPLY_LEN
, 0};

52 
turCmdBlk
 [
TUR_CMD_LEN
] =

54 * 
öqBuff
;

55 * 
öqBuff2
;

56 
sg_io_hdr_t
 
io_hdr
;

57 * 
fûe_«me
 = 0;

58 
ebuff
[
EBUFF_SZ
];

59 
£n£_buf„r
[32];

60 
do_exåa
 = 0;

62 
k
 = 1; k < 
¨gc
; ++k) {

63 i‡(0 =
	`memcmp
("-x", 
¨gv
[
k
], 2))

64 
do_exåa
 = 1;

65 i‡(*
¨gv
[
k
] == '-') {

66 
	`¥ötf
("Uƒecognized swôch: %s\n", 
¨gv
[
k
]);

67 
fûe_«me
 = 0;

70 i‡(0 =
fûe_«me
)

71 
fûe_«me
 = 
¨gv
[
k
];

73 
	`¥ötf
("too manyárguments\n");

74 
fûe_«me
 = 0;

78 i‡(0 =
fûe_«me
) {

79 
	`¥ötf
("Usage: 'sg_simple4 [-x] <sg_device>'\n");

84 i‡((
sg_fd
 = 
	`›í
(
fûe_«me
, 
O_RDWR
)) < 0) {

85 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

86 "sg_sim∂e4:Éº‹ o≥nög fûe: %s", 
fûe_«me
);

87 
	`≥º‹
(
ebuff
);

91 i‡((
	`io˘l
(
sg_fd
, 
SG_GET_VERSION_NUM
, &
k
) < 0) || (k < 30122)) {

92 
	`¥ötf
("sg_simple4: %sÇeeds sg driver version >= 3.1.22\n",

93 
fûe_«me
);

94 
	`˛o£
(
sg_fd
);

100 
öqBuff
 = (*)
	`mm≠
(
NULL
, 8000, 
PROT_READ
 | 
PROT_WRITE
,

101 
MAP_SHARED
, 
sg_fd
, 0);

102 i‡(
MAP_FAILED
 =
öqBuff
) {

103 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, "sg_simple4:Érror using mmap() on "

104 "fûe: %s", 
fûe_«me
);

105 
	`≥º‹
(
ebuff
);

108 i‡(
öqBuff
[0])

109 
	`¥ötf
("non-null charát inqBuff[0]\n");

110 i‡(
öqBuff
[5000])

111 
	`¥ötf
("non-null charát inqBuff[5000]\n");

114 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr_t
));

115 
io_hdr
.
öãrÁ˚_id
 = 'S';

116 
io_hdr
.
cmd_Àn
 = (
öqCmdBlk
);

118 
io_hdr
.
mx_sb_Àn
 = (
£n£_buf„r
);

119 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

120 
io_hdr
.
dx„r_Àn
 = 
INQ_REPLY_LEN
;

122 
io_hdr
.
cmdp
 = 
öqCmdBlk
;

123 
io_hdr
.
sbp
 = 
£n£_buf„r
;

124 
io_hdr
.
timeout
 = 20000;

125 
io_hdr
.
Êags
 = 
SG_FLAG_MMAP_IO
;

129 i‡(
	`io˘l
(
sg_fd
, 
SG_IO
, &
io_hdr
) < 0) {

130 
	`≥º‹
("sg_simple4: Inquiry SG_IO ioctlÉrror");

131 
	`˛o£
(
sg_fd
);

136 
ok
 = 0;

137 
	`sg_îr_ˇãg‹y3
(&
io_hdr
)) {

138 
SG_LIB_CAT_CLEAN
:

139 
ok
 = 1;

141 
SG_LIB_CAT_RECOVERED
:

142 
	`¥ötf
("RecoveredÉrror on INQUIRY, continuing\n");

143 
ok
 = 1;

146 
	`sg_chk_n_¥öt3
("INQUIRY comm™dÉº‹", &
io_hdr
, 1);

150 i‡(
ok
) {

151 * 
p
 = (*)
öqBuff
;

152 
f
 = ()*(
p
 + 7);

153 
	`¥ötf
("Some ofÅhe INQUIRY command'sÑesults:\n");

154 
	`¥ötf
(" %.8† %.16† %.4† ", 
p
 + 8,Ö + 16,Ö + 32);

155 
	`¥ötf
("[wide=%d sync=%d cmdque=%d sftre=%d]\n",

156 !!(
f
 & 0x20), !!(f & 0x10), !!(f & 2), !!(f & 1));

158 i‡(
do_exåa
)

159 
	`¥ötf
("INQUIRY duration=%u millisecs,Ñesid=%d, msg_status=%d\n",

160 
io_hdr
.
duøti⁄
, io_hdr.
ªsid
, ()io_hdr.
msg_°©us
);

165 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr_t
));

166 
io_hdr
.
öãrÁ˚_id
 = 'S';

167 
io_hdr
.
cmd_Àn
 = (
turCmdBlk
);

168 
io_hdr
.
mx_sb_Àn
 = (
£n£_buf„r
);

169 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_NONE
;

170 
io_hdr
.
cmdp
 = 
turCmdBlk
;

171 
io_hdr
.
sbp
 = 
£n£_buf„r
;

172 
io_hdr
.
timeout
 = 20000;

174 i‡(
	`io˘l
(
sg_fd
, 
SG_IO
, &
io_hdr
) < 0) {

175 
	`≥º‹
("sg_simple4: Test Unit Ready SG_IO ioctlÉrror");

176 
	`˛o£
(
sg_fd
);

181 
ok
 = 0;

182 
	`sg_îr_ˇãg‹y3
(&
io_hdr
)) {

183 
SG_LIB_CAT_CLEAN
:

184 
ok
 = 1;

186 
SG_LIB_CAT_RECOVERED
:

187 
	`¥ötf
("RecoveredÉrror on Test Unit Ready, continuing\n");

188 
ok
 = 1;

191 
	`sg_chk_n_¥öt3
("Te° Unô Ródy comm™dÉº‹", &
io_hdr
, 1);

195 i‡(
ok
)

196 
	`¥ötf
("Test Unit Ready successful so unit isÑeady!\n");

198 
	`¥ötf
("Test Unit Ready failed so unit may _not_ beÑeady!\n");

200 i‡(
do_exåa
)

201 
	`¥ötf
("TEST UNIT READY duration=%u millisecs,Ñesid=%d, "

203 
io_hdr
.
duøti⁄
, io_hdr.
ªsid
, ()io_hdr.
msg_°©us
);

209 
öqBuff2
 = (*)
	`mm≠
(
NULL
, 8000, 
PROT_READ
 | 
PROT_WRITE
,

210 
MAP_SHARED
, 
sg_fd
, 0);

211 i‡(
MAP_FAILED
 =
öqBuff2
) {

212 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, "sg_simple4:Érror using mmap() 2 on "

213 "fûe: %s", 
fûe_«me
);

214 
	`≥º‹
(
ebuff
);

217 i‡(
öqBuff2
[0])

218 
	`¥ötf
("non-null charát inqBuff2[0]\n");

219 i‡(
öqBuff2
[5000])

220 
	`¥ötf
("non-null charát inqBuff2[5000]\n");

222 
pid_t
 
pid
;

223 
pid
 = 
	`f‹k
();

224 i‡(
pid
) {

225 
öqBuff2
[5000] = 33;

226 
	`munm≠
(
öqBuff
, 8000);

227 
	`¶ìp
(3);

230 
öqBuff
[5000] = 0xaa;

231 
	`munm≠
(
öqBuff
, 8000);

232 
	`¶ìp
(1);

236 
	`˛o£
(
sg_fd
);

238 
	}
}

	@examples/sg_simple5.c

1 
	~<uni°d.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

6 
	~"sg_lib.h
"

7 
	~"sg_±.h
"

26 
	#INQ_REPLY_LEN
 96

	)

27 
	#INQ_CMD_LEN
 6

	)

28 
	#TUR_CMD_LEN
 6

	)

30 
	#CMD_TIMEOUT_SECS
 60

	)

33 
	$maö
(
¨gc
, * 
¨gv
[])

35 
sg_fd
, 
k
, 
ok
, 
dsize
, 
ªs
, 
duøti⁄
, 
ªsid
, 
ˇt
, 
gŸ
, 
¶í
;

36 
öqCmdBlk
 [
INQ_CMD_LEN
] =

37 {0x12, 0, 0, 0, 
INQ_REPLY_LEN
, 0};

38 
turCmdBlk
 [
TUR_CMD_LEN
] =

40 
öqBuff
[
INQ_REPLY_LEN
];

41 * 
fûe_«me
 = 0;

42 
b
[512];

43 
£n£_b
[32];

44 
vîbo£
 = 0;

45 
sg_±_ba£
 * 
±vp
;

47 
k
 = 1; k < 
¨gc
; ++k) {

48 i‡(0 =
	`°rcmp
("-v", 
¨gv
[
k
]))

49 
vîbo£
 = 1;

50 i‡(0 =
	`°rcmp
("-vv", 
¨gv
[
k
]))

51 
vîbo£
 = 2;

52 i‡(0 =
	`°rcmp
("-vvv", 
¨gv
[
k
]))

53 
vîbo£
 = 3;

54 i‡(*
¨gv
[
k
] == '-') {

55 
	`¥ötf
("Uƒecognized swôch: %s\n", 
¨gv
[
k
]);

56 
fûe_«me
 = 0;

59 i‡(0 =
fûe_«me
)

60 
fûe_«me
 = 
¨gv
[
k
];

62 
	`¥ötf
("too manyárguments\n");

63 
fûe_«me
 = 0;

67 i‡(0 =
fûe_«me
) {

68 
	`¥ötf
("Usage: 'sg_simple5 [-v|-vv|-vvv] <device>'\n");

72 
sg_fd
 = 
	`scsi_±_›í_devi˚
(
fûe_«me
, 1 , 0);

74 i‡(
sg_fd
 < 0) {

75 
	`Ârötf
(
°dîr
, "error opening file: %s: %s\n",

76 
fûe_«me
, 
	`ß„_°ªº‹
(-
sg_fd
));

80 
dsize
 = (
öqBuff
);

81 
ok
 = 0;

83 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

84 i‡(
NULL
 =
±vp
) {

85 
	`Ârötf
(
°dîr
, "sg_simple5: out of memory\n");

88 
	`£t_scsi_±_cdb
(
±vp
, 
öqCmdBlk
, (inqCmdBlk));

89 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

90 
	`£t_scsi_±_d©a_ö
(
±vp
, 
öqBuff
, 
dsize
);

91 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
CMD_TIMEOUT_SECS
, 
vîbo£
);

92 i‡(
ªs
 < 0) {

93 
	`Ârötf
(
°dîr
, "ÖassÅhrough osÉrror: %s\n",

94 
	`ß„_°ªº‹
(-
ªs
));

95 
föish_öq
;

96 } i‡(
SCSI_PT_DO_BAD_PARAMS
 =
ªs
) {

97 
	`Ârötf
(
°dîr
, " badÖassÅhrough setup\n");

98 
föish_öq
;

99 } i‡(
SCSI_PT_DO_TIMEOUT
 =
ªs
) {

100 
	`Ârötf
(
°dîr
, "ÖassÅhroughÅimeout\n");

101 
föish_öq
;

103 i‡((
vîbo£
 > 1Ë&& ((
duøti⁄
 = 
	`gë_scsi_±_duøti⁄_ms
(
±vp
)) >= 0))

104 
	`Ârötf
(
°dîr
, " duøti⁄=%d ms\n", 
duøti⁄
);

105 
ªsid
 = 
	`gë_scsi_±_ªsid
(
±vp
);

106 (
ˇt
 = 
	`gë_scsi_±_ªsu…_ˇãg‹y
(
±vp
))) {

107 
SCSI_PT_RESULT_GOOD
:

108 
gŸ
 = 
dsize
 - 
ªsid
;

109 i‡(
vîbo£
 && (
ªsid
 > 0))

110 
	`Ârötf
(
°dîr
, "Ñequested %d bytes but "

111 "gŸ %d byãs)\n", 
dsize
, 
gŸ
);

113 
SCSI_PT_RESULT_STATUS
:

114 i‡(
vîbo£
) {

115 
	`sg_gë_scsi_°©us_°r
(
	`gë_scsi_±_°©us_ª•⁄£
(
±vp
),

116 (
b
), b);

117 
	`Ârötf
(
°dîr
, " scsò°©us: %s\n", 
b
);

119 
föish_öq
;

120 
SCSI_PT_RESULT_SENSE
:

121 
¶í
 = 
	`gë_scsi_±_£n£_Àn
(
±vp
);

122 i‡(
vîbo£
) {

123 
	`sg_gë_£n£_°r
("", 
£n£_b
, 
¶í
, (
vîbo£
 > 1),

124 (
b
), b);

125 
	`Ârötf
(
°dîr
, "%s", 
b
);

127 i‡(
vîbo£
 && (
ªsid
 > 0)) {

128 
gŸ
 = 
dsize
 - 
ªsid
;

129 i‡((
vîbo£
Ë|| (
gŸ
 > 0))

130 
	`Ârötf
(
°dîr
, "Ñequested %d bytes but "

131 "gŸ %d byãs\n", 
dsize
, 
gŸ
);

133 
föish_öq
;

134 
SCSI_PT_RESULT_TRANSPORT_ERR
:

135 i‡(
vîbo£
) {

136 
	`gë_scsi_±_å™•‹t_îr_°r
(
±vp
, (
b
), b);

137 
	`Ârötf
(
°dîr
, "Åøn•‹t: %s", 
b
);

139 
föish_öq
;

140 
SCSI_PT_RESULT_OS_ERR
:

141 i‡(
vîbo£
) {

142 
	`gë_scsi_±_os_îr_°r
(
±vp
, (
b
), b);

143 
	`Ârötf
(
°dîr
, " os: %s", 
b
);

145 
föish_öq
;

147 
	`Ârötf
(
°dîr
, " unknownÖassÅhroughÑesult "

148 "ˇãg‹y (%d)\n", 
ˇt
);

149 
föish_öq
;

152 
ok
 = 1;

153 
föish_öq
:

154 
	`de°ru˘_scsi_±_obj
(
±vp
);

156 i‡(
ok
) {

157 * 
p
 = (*)
öqBuff
;

159 
	`¥ötf
("Some ofÅhe INQUIRY command'sÑesults:\n");

160 
	`¥ötf
(" %.8† %.16† %.4s\n", 
p
 + 8,Ö + 16,Ö + 32);

162 
ok
 = 0;

166 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

167 i‡(
NULL
 =
±vp
) {

168 
	`Ârötf
(
°dîr
, "sg_simple5: out of memory\n");

171 
	`£t_scsi_±_cdb
(
±vp
, 
turCmdBlk
, (turCmdBlk));

172 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

174 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
CMD_TIMEOUT_SECS
, 
vîbo£
);

175 i‡(
ªs
 < 0) {

176 
	`Ârötf
(
°dîr
, "ÖassÅhrough osÉrror: %s\n",

177 
	`ß„_°ªº‹
(-
ªs
));

178 
föish_öq
;

179 } i‡(
SCSI_PT_DO_BAD_PARAMS
 =
ªs
) {

180 
	`Ârötf
(
°dîr
, " badÖassÅhrough setup\n");

181 
föish_öq
;

182 } i‡(
SCSI_PT_DO_TIMEOUT
 =
ªs
) {

183 
	`Ârötf
(
°dîr
, "ÖassÅhroughÅimeout\n");

184 
föish_öq
;

186 i‡((
vîbo£
 > 1Ë&& ((
duøti⁄
 = 
	`gë_scsi_±_duøti⁄_ms
(
±vp
)) >= 0))

187 
	`Ârötf
(
°dîr
, " duøti⁄=%d ms\n", 
duøti⁄
);

188 
ªsid
 = 
	`gë_scsi_±_ªsid
(
±vp
);

189 (
ˇt
 = 
	`gë_scsi_±_ªsu…_ˇãg‹y
(
±vp
))) {

190 
SCSI_PT_RESULT_GOOD
:

192 
SCSI_PT_RESULT_STATUS
:

193 i‡(
vîbo£
) {

194 
	`sg_gë_scsi_°©us_°r
(
	`gë_scsi_±_°©us_ª•⁄£
(
±vp
),

195 (
b
), b);

196 
	`Ârötf
(
°dîr
, " scsò°©us: %s\n", 
b
);

198 
föish_tur
;

199 
SCSI_PT_RESULT_SENSE
:

200 
¶í
 = 
	`gë_scsi_±_£n£_Àn
(
±vp
);

201 i‡(
vîbo£
) {

202 
	`sg_gë_£n£_°r
("", 
£n£_b
, 
¶í
, (
vîbo£
 > 1),

203 (
b
), b);

204 
	`Ârötf
(
°dîr
, "%s", 
b
);

206 
föish_tur
;

207 
SCSI_PT_RESULT_TRANSPORT_ERR
:

208 i‡(
vîbo£
) {

209 
	`gë_scsi_±_å™•‹t_îr_°r
(
±vp
, (
b
), b);

210 
	`Ârötf
(
°dîr
, "Åøn•‹t: %s", 
b
);

212 
föish_tur
;

213 
SCSI_PT_RESULT_OS_ERR
:

214 i‡(
vîbo£
) {

215 
	`gë_scsi_±_os_îr_°r
(
±vp
, (
b
), b);

216 
	`Ârötf
(
°dîr
, " os: %s", 
b
);

218 
föish_tur
;

220 
	`Ârötf
(
°dîr
, " unknownÖassÅhroughÑesult "

221 "ˇãg‹y (%d)\n", 
ˇt
);

222 
föish_tur
;

225 
ok
 = 1;

226 
föish_tur
:

227 
	`de°ru˘_scsi_±_obj
(
±vp
);

229 i‡(
ok
)

230 
	`¥ötf
("Test Unit Ready successful so unit isÑeady!\n");

232 
	`¥ötf
("Test Unit Ready failed so unit may _not_ beÑeady!\n");

234 
	`scsi_±_˛o£_devi˚
(
sg_fd
);

236 
	}
}

	@examples/sg_simple_aio.c

1 
	~<uni°d.h
>

2 
	~<f˙é.h
>

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<î∫o.h
>

7 
	~<sys/io˘l.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/°©.h
>

20 #ifde‡
WANT_AIO


21 
	~<libaio.h
>

24 
	~"sg_lib.h
"

25 
	~"sg_io_löux.h
"

26 
	~"sg_löux_öc.h
"

50 
	#INQ_REPLY_LEN
 96

	)

51 
	#INQ_CMD_LEN
 6

	)

52 
	#TUR_CMD_LEN
 6

	)

54 
	#EBUFF_SZ
 256

	)

58 #ifde‡
WANT_AIO


59 
	$my_io_ˇŒback
(
io_c⁄ãxt_t
 
˘x
, 
iocb
 *iocb, 
ªs
, 
ªs2
)

61 
	`¥ötf
("my_io_ˇŒback:Ñes=%ld,Ñes2=%ld\n", 
ªs
, 
ªs2
);

62 
	}
}

66 
	$maö
(
¨gc
, * 
¨gv
[])

68 
sg_fd
, 
k
, 
ok
;

69 
öqCmdBlk
 [
INQ_CMD_LEN
] =

70 {0x12, 0, 0, 0, 
INQ_REPLY_LEN
, 0};

71 
turCmdBlk
 [
TUR_CMD_LEN
] =

73 
öqBuff
[
INQ_REPLY_LEN
];

74 
sg_io_hdr_t
 
io_hdr
;

75 * 
fûe_«me
 = 0;

76 
ebuff
[
EBUFF_SZ
];

77 
£n£_buf„r
[32];

78 
do_exåa
 = 0;

80 
k
 = 1; k < 
¨gc
; ++k) {

81 i‡(0 =
	`memcmp
("-x", 
¨gv
[
k
], 2))

82 
do_exåa
 = 1;

83 i‡(*
¨gv
[
k
] == '-') {

84 
	`¥ötf
("Uƒecognized swôch: %s\n", 
¨gv
[
k
]);

85 
fûe_«me
 = 0;

88 i‡(0 =
fûe_«me
)

89 
fûe_«me
 = 
¨gv
[
k
];

91 
	`¥ötf
("too manyárguments\n");

92 
fûe_«me
 = 0;

96 i‡(0 =
fûe_«me
) {

97 
	`¥ötf
("Usage: 'sg_simple_aio [-x] <sg_device>'\n");

102 i‡((
sg_fd
 = 
	`›í
(
fûe_«me
, 
O_RDWR
)) < 0) {

103 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

104 "sg_sim∂e_aio:Éº‹ o≥nög fûe: %s", 
fûe_«me
);

105 
	`≥º‹
(
ebuff
);

109 i‡((
	`io˘l
(
sg_fd
, 
SG_GET_VERSION_NUM
, &
k
) < 0) || (k < 30000)) {

110 
	`¥ötf
("sg_simple_aio: %s doesn't seemÅo beánÇew sg device\n",

111 
fûe_«me
);

112 
	`˛o£
(
sg_fd
);

117 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr_t
));

118 
io_hdr
.
öãrÁ˚_id
 = 'S';

119 
io_hdr
.
cmd_Àn
 = (
öqCmdBlk
);

121 
io_hdr
.
mx_sb_Àn
 = (
£n£_buf„r
);

122 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

123 
io_hdr
.
dx„r_Àn
 = 
INQ_REPLY_LEN
;

124 
io_hdr
.
dx„Ω
 = 
öqBuff
;

125 
io_hdr
.
cmdp
 = 
öqCmdBlk
;

126 
io_hdr
.
sbp
 = 
£n£_buf„r
;

127 
io_hdr
.
timeout
 = 20000;

132 #i‡
WANT_AIO


134 
iocb
 
a_iocb
;

135 
iocb
 * 
iocb_¨r
[1];

136 
io_c⁄ãxt_t
 
io_˘x
;

137 
ªs
;

139 i‡(0 !(
ªs
 = 
	`io_queue_öô
(1, &
io_˘x
))) {

140 
	`¥ötf
("io_queue_öô: faûed %s\n", 
	`°ªº‹
(-
ªs
));

141 
	`˛o£
(
sg_fd
);

144 
iocb_¨r
[0] = &
a_iocb
;

145 
	`io_¥ï_pwrôe
(
iocb_¨r
[0], 
sg_fd
, &
io_hdr
, (io_hdr), 0);

146 
	`io_£t_ˇŒback
(
iocb_¨r
[0], 
my_io_ˇŒback
);

147 
ªs
 = 
	`io_submô
(
io_˘x
, 1, 
iocb_¨r
);

148 i‡(1 !
ªs
) {

149 
	`¥ötf
("io_submô:Ñëu∫ed %d\n", 
ªs
);

150 
	`˛o£
(
sg_fd
);

155 i‡(
	`wrôe
(
sg_fd
, &
io_hdr
, (io_hdr)) < 0) {

156 
	`≥º‹
("sg_simple_aio: Inquiry writeÉrror");

157 
	`˛o£
(
sg_fd
);

162 i‡(
	`ªad
(
sg_fd
, &
io_hdr
, (io_hdr)) < 0) {

163 
	`≥º‹
("sg_simple_aio: InquiryÑeadÉrror");

164 
	`˛o£
(
sg_fd
);

169 
ok
 = 0;

170 
	`sg_îr_ˇãg‹y3
(&
io_hdr
)) {

171 
SG_LIB_CAT_CLEAN
:

172 
ok
 = 1;

174 
SG_LIB_CAT_RECOVERED
:

175 
	`¥ötf
("RecoveredÉrror on INQUIRY, continuing\n");

176 
ok
 = 1;

179 
	`sg_chk_n_¥öt3
("INQUIRY comm™dÉº‹", &
io_hdr
, 1);

183 i‡(
ok
) {

184 * 
p
 = (*)
öqBuff
;

185 
f
 = ()*(
p
 + 7);

186 
	`¥ötf
("Some ofÅhe INQUIRY command'sÑesults:\n");

187 
	`¥ötf
(" %.8† %.16† %.4† ", 
p
 + 8,Ö + 16,Ö + 32);

188 
	`¥ötf
("[wide=%d sync=%d cmdque=%d sftre=%d]\n",

189 !!(
f
 & 0x20), !!(f & 0x10), !!(f & 2), !!(f & 1));

191 i‡(
do_exåa
)

192 
	`¥ötf
("INQUIRY duration=%u millisecs,Ñesid=%d, msg_status=%d\n",

193 
io_hdr
.
duøti⁄
, io_hdr.
ªsid
, ()io_hdr.
msg_°©us
);

197 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr_t
));

198 
io_hdr
.
öãrÁ˚_id
 = 'S';

199 
io_hdr
.
cmd_Àn
 = (
turCmdBlk
);

200 
io_hdr
.
mx_sb_Àn
 = (
£n£_buf„r
);

201 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_NONE
;

202 
io_hdr
.
cmdp
 = 
turCmdBlk
;

203 
io_hdr
.
sbp
 = 
£n£_buf„r
;

204 
io_hdr
.
timeout
 = 20000;

206 i‡(
	`io˘l
(
sg_fd
, 
SG_IO
, &
io_hdr
) < 0) {

207 
	`≥º‹
("sg_simple_aio: Test Unit Ready SG_IO ioctlÉrror");

208 
	`˛o£
(
sg_fd
);

213 
ok
 = 0;

214 
	`sg_îr_ˇãg‹y3
(&
io_hdr
)) {

215 
SG_LIB_CAT_CLEAN
:

216 
ok
 = 1;

218 
SG_LIB_CAT_RECOVERED
:

219 
	`¥ötf
("RecoveredÉrror on Test Unit Ready, continuing\n");

220 
ok
 = 1;

223 
	`sg_chk_n_¥öt3
("Te° Unô Ródy comm™dÉº‹", &
io_hdr
, 1);

227 i‡(
ok
)

228 
	`¥ötf
("Test Unit Ready successful so unit isÑeady!\n");

230 
	`¥ötf
("Test Unit Ready failed so unit may _not_ beÑeady!\n");

232 i‡(
do_exåa
)

233 
	`¥ötf
("TEST UNIT READY duration=%u millisecs,Ñesid=%d, "

234 "msg_°©us=%d\n", 
io_hdr
.
duøti⁄
, io_hdr.
ªsid
,

235 ()
io_hdr
.
msg_°©us
);

237 
	`˛o£
(
sg_fd
);

239 
	}
}

	@getopt_long/getopt.h

48 #i‚de‡
_MYPROXY_GETOPT_H_


49 
	#_MYPROXY_GETOPT_H_


	)

51 #i‡!
HAVE_GETOPT_LONG


53 
	~<uni°d.h
>

58 
	#no_¨gumít
 0

	)

59 
	#ªquúed_¨gumít
 1

	)

60 
	#›ti⁄Æ_¨gumít
 2

	)

62 *
›èrg
;

63 
›töd
;

64 
›t›t
;

65 
›ãº
;

67 
	s›ti⁄
 {

69 c⁄° *
	m«me
;

74 
	mhas_¨g
;

76 *
	mÊag
;

78 
	mvÆ
;

81 
gë›t_l⁄g
(, * const *, const *,

82 c⁄° 
›ti⁄
 *, *);

	@getopt_long/getopt_long.c

54 #i‡
deföed
(
LIBC_SCCS
Ë&& !deföed(
löt
)

55 
__RCSID
("$NetBSD: getopt_long.c,v 1.17 2004/06/20 22:20:15 jmc Exp $");

58 
	~<as£π.h
>

59 
	~<î∫o.h
>

60 
	~"gë›t.h
"

61 
	~<°dio.h
>

62 
	~<°dlib.h
>

63 
	~<°rög.h
>

65 #ifde‡
__wók_Æüs


66 
	$__wók_Æüs
(
gë›t_l⁄g
,
_gë›t_l⁄g
)

69 #i‡!
HAVE_GETOPT_LONG


70 
	#IGNORE_FIRST
 (*
›ti⁄s
 ='-' || *›ti⁄†='+')

	)

71 
	#PRINT_ERROR
 ((
›ãº
Ë&& ((*
›ti⁄s
 != ':') \

72 || (
IGNORE_FIRST
 && 
›ti⁄s
[1] !':')))

	)

73 
	#IS_POSIXLY_CORRECT
 (
	`gëív
("POSIXLY_CORRECT"Ë!
NULL
)

	)

74 
	#PERMUTE
 (!
IS_POSIXLY_CORRECT
 && !
IGNORE_FIRST
)

	)

76 
	#IN_ORDER
 (!
IS_POSIXLY_CORRECT
 && *
›ti⁄s
 ='-')

	)

79 
	#BADCH
 ()'?'

	)

80 
	#BADARG
 ((
IGNORE_FIRST
 && 
›ti⁄s
[1] == ':') \

81 || (*
›ti⁄s
 =':'Ë? ()':' : ()'?')

	)

82 
	#INORDER
 ()1

	)

84 
	#EMSG
 ""

	)

86 *
›èrg
;

87 
›töd
, 
›ãº
, 
›t›t
;

89 
	`gë›t_öã∫Æ
 (, * const *, const *);

90 
	`gcd
 (, );

91 
	`≥rmuã_¨gs
 (, , , * const *);

93 *
∂a˚
 = 
EMSG
;

95 
n⁄›t_°¨t
 = -1;

96 
n⁄›t_íd
 = -1;

99 c⁄° 
ªˇrgch¨
[] = "optionÑequiresánárgument -- %c";

100 c⁄° 
ªˇrg°rög
[] = "optionÑequiresánárgument -- %s";

101 c⁄° 
ambig
[] = "ambiguous option -- %.*s";

102 c⁄° 
nﬂrg
[] = "option doesn'tÅakeánárgument -- %.*s";

103 c⁄° 
ûl›tch¨
[] = "unknown option -- %c";

104 c⁄° 
ûl›t°rög
[] = "unknown option -- %s";

111 
	$gcd
(
a
, 
b
)

113 
c
;

115 
c
 = 
a
 % 
b
;

116 
c
 != 0) {

117 
a
 = 
b
;

118 
b
 = 
c
;

119 
c
 = 
a
 % 
b
;

122  
b
;

123 
	}
}

131 
	$≥rmuã_¨gs
(
∑n⁄›t_°¨t
, 
∑n⁄›t_íd
, 
›t_íd
,

132 * c⁄° *
«rgv
)

134 
c°¨t
, 
cy˛ñí
, 
i
, 
j
, 
ncy˛e
, 
¬⁄›ts
, 
n›ts
, 
pos
;

135 *
sw≠
;

137 
	`as£π
(
«rgv
 !
NULL
);

142 
¬⁄›ts
 = 
∑n⁄›t_íd
 - 
∑n⁄›t_°¨t
;

143 
n›ts
 = 
›t_íd
 - 
∑n⁄›t_íd
;

144 
ncy˛e
 = 
	`gcd
(
¬⁄›ts
, 
n›ts
);

145 
cy˛ñí
 = (
›t_íd
 - 
∑n⁄›t_°¨t
Ë/ 
ncy˛e
;

147 
i
 = 0; i < 
ncy˛e
; i++) {

148 
c°¨t
 = 
∑n⁄›t_íd
+
i
;

149 
pos
 = 
c°¨t
;

150 
j
 = 0; j < 
cy˛ñí
; j++) {

151 i‡(
pos
 >
∑n⁄›t_íd
)

152 
pos
 -
¬⁄›ts
;

154 
pos
 +
n›ts
;

155 
sw≠
 = 
«rgv
[
pos
];

157 ((**Ë
«rgv
)[
pos
] =Ç¨gv[
c°¨t
];

159 ((**)
«rgv
)[
c°¨t
] = 
sw≠
;

162 
	}
}

170 
	$gë›t_öã∫Æ
(
«rgc
, * c⁄° *
«rgv
, c⁄° *
›ti⁄s
)

172 *
ﬁi
;

173 
›tch¨
;

175 
	`as£π
(
«rgv
 !
NULL
);

176 
	`as£π
(
›ti⁄s
 !
NULL
);

178 
›èrg
 = 
NULL
;

185 i‡(
›töd
 == 0)

186 
›töd
 = 1;

188 
°¨t
:

189 i‡(!*
∂a˚
) {

190 i‡(
›töd
 >
«rgc
) {

191 
∂a˚
 = 
EMSG
;

192 i‡(
n⁄›t_íd
 != -1) {

194 
	`≥rmuã_¨gs
(
n⁄›t_°¨t
, 
n⁄›t_íd
,

195 
›töd
, 
«rgv
);

196 
›töd
 -
n⁄›t_íd
 - 
n⁄›t_°¨t
;

198 i‡(
n⁄›t_°¨t
 != -1) {

203 
›töd
 = 
n⁄›t_°¨t
;

205 
n⁄›t_°¨t
 = 
n⁄›t_íd
 = -1;

208 i‡((*(
∂a˚
 = 
«rgv
[
›töd
]) != '-')

209 || (
∂a˚
[1] == '\0')) {

210 
∂a˚
 = 
EMSG
;

211 i‡(
IN_ORDER
) {

216 
›èrg
 = 
«rgv
[
›töd
++];

217  
INORDER
;

219 i‡(!
PERMUTE
) {

227 i‡(
n⁄›t_°¨t
 == -1)

228 
n⁄›t_°¨t
 = 
›töd
;

229 i‡(
n⁄›t_íd
 != -1) {

230 
	`≥rmuã_¨gs
(
n⁄›t_°¨t
, 
n⁄›t_íd
,

231 
›töd
, 
«rgv
);

232 
n⁄›t_°¨t
 = 
›töd
 -

233 (
n⁄›t_íd
 - 
n⁄›t_°¨t
);

234 
n⁄›t_íd
 = -1;

236 
›töd
++;

238 
°¨t
;

240 i‡(
n⁄›t_°¨t
 !-1 && 
n⁄›t_íd
 == -1)

241 
n⁄›t_íd
 = 
›töd
;

242 i‡(
∂a˚
[1] && *++place == '-') {

243 
∂a˚
++;

247 i‡((
›tch¨
 = ()*
∂a˚
++) == ()':' ||

248 (
ﬁi
 = 
	`°rchr
(
›ti⁄s
 + (
IGNORE_FIRST
 ? 1 : 0), 
›tch¨
)Ë=
NULL
) {

250 i‡(!*
∂a˚
)

251 ++
›töd
;

252 i‡(
PRINT_ERROR
)

253 
	`Ârötf
(
°dîr
, 
ûl›tch¨
, 
›tch¨
);

254 
›t›t
 = 
›tch¨
;

255  
BADCH
;

257 i‡(
›tch¨
 ='W' && 
ﬁi
[1] == ';') {

259 i‡(*
∂a˚
)

262 i‡(++
›töd
 >
«rgc
) {

263 
∂a˚
 = 
EMSG
;

264 i‡(
PRINT_ERROR
)

265 
	`Ârötf
(
°dîr
, 
ªˇrgch¨
, 
›tch¨
);

266 
›t›t
 = 
›tch¨
;

267  
BADARG
;

269 
∂a˚
 = 
«rgv
[
›töd
];

276 i‡(*++
ﬁi
 != ':') {

277 i‡(!*
∂a˚
)

278 ++
›töd
;

280 
›èrg
 = 
NULL
;

281 i‡(*
∂a˚
)

282 
›èrg
 = 
∂a˚
;

284 i‡(
ﬁi
[1] != ':') {

285 i‡(++
›töd
 >
«rgc
) {

286 
∂a˚
 = 
EMSG
;

287 i‡(
PRINT_ERROR
)

288 
	`Ârötf
(
°dîr
, 
ªˇrgch¨
, 
›tch¨
);

289 
›t›t
 = 
›tch¨
;

290  
BADARG
;

292 
›èrg
 = 
«rgv
[
›töd
];

294 
∂a˚
 = 
EMSG
;

295 ++
›töd
;

298  
›tch¨
;

299 
	}
}

306 
	$gë›t_l⁄g
(
«rgc
, * c⁄° *
«rgv
, c⁄° *
›ti⁄s
,

307 c⁄° 
›ti⁄
 *
l⁄g_›ti⁄s
, *
idx
)

309 
ªtvÆ
;

311 
	`as£π
(
«rgv
 !
NULL
);

312 
	`as£π
(
›ti⁄s
 !
NULL
);

313 
	`as£π
(
l⁄g_›ti⁄s
 !
NULL
);

316 i‡((
ªtvÆ
 = 
	`gë›t_öã∫Æ
(
«rgc
, 
«rgv
, 
›ti⁄s
)) == -2) {

317 *
cuºít_¨gv
, *
has_equÆ
;

318 
size_t
 
cuºít_¨gv_Àn
;

319 
i
, 
m©ch
;

321 
cuºít_¨gv
 = 
∂a˚
;

322 
m©ch
 = -1;

324 
›töd
++;

325 
∂a˚
 = 
EMSG
;

327 i‡(*
cuºít_¨gv
 == '\0') {

332 i‡(
n⁄›t_íd
 != -1) {

333 
	`≥rmuã_¨gs
(
n⁄›t_°¨t
, 
n⁄›t_íd
,

334 
›töd
, 
«rgv
);

335 
›töd
 -
n⁄›t_íd
 - 
n⁄›t_°¨t
;

337 
n⁄›t_°¨t
 = 
n⁄›t_íd
 = -1;

340 i‡((
has_equÆ
 = 
	`°rchr
(
cuºít_¨gv
, '=')Ë!
NULL
) {

342 
cuºít_¨gv_Àn
 = 
has_equÆ
 - 
cuºít_¨gv
;

343 
has_equÆ
++;

345 
cuºít_¨gv_Àn
 = 
	`°æí
(
cuºít_¨gv
);

347 
i
 = 0; 
l⁄g_›ti⁄s
[i].
«me
; i++) {

349 i‡(
	`°∫cmp
(
cuºít_¨gv
, 
l⁄g_›ti⁄s
[
i
].
«me
,

350 
cuºít_¨gv_Àn
))

353 i‡(
	`°æí
(
l⁄g_›ti⁄s
[
i
].
«me
) ==

354 ()
cuºít_¨gv_Àn
) {

356 
m©ch
 = 
i
;

359 i‡(
m©ch
 == -1)

360 
m©ch
 = 
i
;

363 i‡(
PRINT_ERROR
)

364 
	`Ârötf
(
°dîr
, 
ambig
, ()
cuºít_¨gv_Àn
,

365 
cuºít_¨gv
);

366 
›t›t
 = 0;

367  
BADCH
;

370 i‡(
m©ch
 != -1) {

371 i‡(
l⁄g_›ti⁄s
[
m©ch
].
has_¨g
 =
no_¨gumít


372 && 
has_equÆ
) {

373 i‡(
PRINT_ERROR
)

374 
	`Ârötf
(
°dîr
, 
nﬂrg
, ()
cuºít_¨gv_Àn
,

375 
cuºít_¨gv
);

380 i‡(
l⁄g_›ti⁄s
[
m©ch
].
Êag
 =
NULL
)

381 
›t›t
 = 
l⁄g_›ti⁄s
[
m©ch
].
vÆ
;

383 
›t›t
 = 0;

384  
BADARG
;

386 i‡(
l⁄g_›ti⁄s
[
m©ch
].
has_¨g
 =
ªquúed_¨gumít
 ||

387 
l⁄g_›ti⁄s
[
m©ch
].
has_¨g
 =
›ti⁄Æ_¨gumít
) {

388 i‡(
has_equÆ
)

389 
›èrg
 = 
has_equÆ
;

390 i‡(
l⁄g_›ti⁄s
[
m©ch
].
has_¨g
 ==

391 
ªquúed_¨gumít
) {

396 
›èrg
 = 
«rgv
[
›töd
++];

399 i‡((
l⁄g_›ti⁄s
[
m©ch
].
has_¨g
 =
ªquúed_¨gumít
)

400 && (
›èrg
 =
NULL
)) {

405 i‡(
PRINT_ERROR
)

406 
	`Ârötf
(
°dîr
, 
ªˇrg°rög
, 
cuºít_¨gv
);

411 i‡(
l⁄g_›ti⁄s
[
m©ch
].
Êag
 =
NULL
)

412 
›t›t
 = 
l⁄g_›ti⁄s
[
m©ch
].
vÆ
;

414 
›t›t
 = 0;

415 --
›töd
;

416  
BADARG
;

419 i‡(
PRINT_ERROR
)

420 
	`Ârötf
(
°dîr
, 
ûl›t°rög
, 
cuºít_¨gv
);

421 
›t›t
 = 0;

422  
BADCH
;

424 i‡(
l⁄g_›ti⁄s
[
m©ch
].
Êag
) {

425 *
l⁄g_›ti⁄s
[
m©ch
].
Êag
 =Ü⁄g_›ti⁄s[m©ch].
vÆ
;

426 
ªtvÆ
 = 0;

428 
ªtvÆ
 = 
l⁄g_›ti⁄s
[
m©ch
].
vÆ
;

429 i‡(
idx
)

430 *
idx
 = 
m©ch
;

432  
ªtvÆ
;

433 
	}
}

	@include/sg_cmds.h

1 #i‚de‡
SG_CMDS_H


2 
	#SG_CMDS_H


	)

17 
	~"sg_cmds_basic.h
"

18 
	~"sg_cmds_exåa.h
"

19 
	~"sg_cmds_mmc.h
"

	@include/sg_cmds_basic.h

1 #i‚de‡
SG_CMDS_BASIC_H


2 
	#SG_CMDS_BASIC_H


	)

24 #ifde‡
__˝lu•lus


33 
sg_Œ_öquúy
(
sg_fd
, 
cmddt
, 
evpd
, 
pg_›
,

34 * 
ª•
, 
mx_ª•_Àn
, 
noisy
,

35 
vîbo£
);

42 
sg_Œ_log_£À˘
(
sg_fd
, 
p¸
, 
•
, 
pc
,

43 
pg_code
, 
subpg_code
,

44 * 
∑ømp
, 
∑øm_Àn
,

45 
noisy
, 
vîbo£
);

52 
sg_Œ_log_£n£
(
sg_fd
, 
µc
, 
•
, 
pc
, 
pg_code
,

53 
subpg_code
, 
∑ømp
, * 
ª•
,

54 
mx_ª•_Àn
, 
noisy
, 
vîbo£
);

61 
sg_Œ_mode_£À˘6
(
sg_fd
, 
pf
, 
•
, * 
∑ømp
,

62 
∑øm_Àn
, 
noisy
, 
vîbo£
);

69 
sg_Œ_mode_£À˘10
(
sg_fd
, 
pf
, 
•
, * 
∑ømp
,

70 
∑øm_Àn
, 
noisy
, 
vîbo£
);

77 
sg_Œ_mode_£n£6
(
sg_fd
, 
dbd
, 
pc
, 
pg_code
,

78 
sub_pg_code
, * 
ª•
, 
mx_ª•_Àn
,

79 
noisy
, 
vîbo£
);

86 
sg_Œ_mode_£n£10
(
sg_fd
, 
ŒbØ
, 
dbd
, 
pc
,

87 
pg_code
, 
sub_pg_code
, * 
ª•
,

88 
mx_ª•_Àn
, 
noisy
, 
vîbo£
);

97 
sg_Œ_¥evít_Ælow
(
sg_fd
, 
¥evít
, 
noisy
,

98 
vîbo£
);

105 
sg_Œ_ªadˇp_10
(
sg_fd
, 
pmi
, 
lba
,

106 * 
ª•
, 
mx_ª•_Àn
, 
noisy
,

107 
vîbo£
);

114 
sg_Œ_ªadˇp_16
(
sg_fd
, 
pmi
, 
uöt64_t
 
Œba
, * 
ª•
,

115 
mx_ª•_Àn
, 
noisy
, 
vîbo£
);

121 
sg_Œ_ªp‹t_luns
(
sg_fd
, 
£À˘_ªp‹t
, * 
ª•
,

122 
mx_ª•_Àn
, 
noisy
, 
vîbo£
);

128 
sg_Œ_ªque°_£n£
(
sg_fd
, 
desc
, * 
ª•
,

129 
mx_ª•_Àn
, 
noisy
, 
vîbo£
);

141 
sg_Œ_°¨t_°›_unô
(
sg_fd
, 
immed
, 
pc_mod__Ê_num
,

142 
powî_c⁄d
, 
noÊush__Ê
, 
l€j
,

143 
°¨t
, 
noisy
, 
vîbo£
);

150 
sg_Œ_sync_ˇche_10
(
sg_fd
, 
sync_nv
, 
immed
, 
group
,

151 
lba
, 
cou¡
,

152 
noisy
, 
vîbo£
);

159 
sg_Œ_ã°_unô_ªady
(
sg_fd
, 
∑ck_id
, 
noisy
,

160 
vîbo£
);

169 
sg_Œ_ã°_unô_ªady_¥ogªss
(
sg_fd
, 
∑ck_id
,

170 * 
¥ogªss
, 
noisy
,

171 
vîbo£
);

174 
	ssg_sim∂e_öquúy_ª•
 {

175 
	g≥rùhîÆ_quÆifõr
;

176 
	g≥rùhîÆ_ty≥
;

177 
	grmb
;

178 
	gvîsi⁄
;

179 
	gbyã_3
;

180 
	gbyã_5
;

181 
	gbyã_6
;

182 
	gbyã_7
;

183 
	gvíd‹
[9];

184 
	g¥odu˘
[17];

185 
	gªvisi⁄
[5];

192 
sg_sim∂e_öquúy
(
sg_fd
,

193 
sg_sim∂e_öquúy_ª•
 * 
öq_d©a
,

194 
noisy
, 
vîbo£
);

202 
sg_mode_∑ge_off£t
(c⁄° * 
ª•
, 
ª•_Àn
,

203 
mode_£n£_6
, * 
îr_buff
,

204 
îr_buff_Àn
);

223 
sg_gë_mode_∑ge_c⁄åﬁs
(
sg_fd
, 
mode6
, 
pg_code
,

224 
sub_pg_code
, 
dbd
, 
ÊexibÀ
,

225 
mx_m∑ge_Àn
, * 
suc˚ss_mask
,

226 * 
pc⁄åﬁ_¨r
[], * 
ªp‹ãd_Àn
,

227 
vîbo£
);

231 
sg_cmds_›í_devi˚
(c⁄° * 
devi˚_«me
, 
ªad_⁄ly
,

232 
vîbo£
);

236 
sg_cmds_›í_Êags
(c⁄° * 
devi˚_«me
, 
Êags
,

237 
vîbo£
);

241 
sg_cmds_˛o£_devi˚
(
devi˚_fd
);

243 c⁄° * 
sg_cmds_vîsi⁄
();

246 
	gsg_±_ba£
;

257 
sg_cmds_¥o˚ss_ª•
(
sg_±_ba£
 * 
±vp
, c⁄° * 
Àadö
,

258 
±_ªs
, 
mx_di_Àn
,

259 c⁄° * 
£n£_b
, 
noisy
,

260 
vîbo£
, * 
o_£n£_ˇt
);

262 #ifde‡
__˝lu•lus


	@include/sg_cmds_extra.h

1 #i‚de‡
SG_CMDS_EXTRA_H


2 
	#SG_CMDS_EXTRA_H


	)

11 #ifde‡
__˝lu•lus


34 
sg_Œ_©a_±
(
sg_fd
, c⁄° * 
cdbp
, 
cdb_Àn
,

35 
timeout_£cs
, * 
döp
, * 
douç
,

36 
dÀn
, * 
£n£p
,

37 
max_£n£_Àn
, * 
©a_ªtu∫_dp
,

38 
max_©a_ªtu∫_Àn
, * 
ªsidp
, 
vîbo£
);

45 
sg_Œ_f‹m©_unô
(
sg_fd
, 
fmçöfo
, 
l⁄gli°
,

46 
fmtd©a
, 
cm∂i°
, 
dli°_f‹m©
,

47 
timeout_£cs
, * 
∑ømp
, 
∑øm_Àn
,

48 
noisy
, 
vîbo£
);

54 
sg_Œ_gë_lba_°©us
(
sg_fd
, 
uöt64_t
 
°¨t_Œba
, * 
ª•
,

55 
Æloc_Àn
, 
noisy
, 
vîbo£
);

61 
sg_Œ_≥rsi°ít_ª£rve_ö
(
sg_fd
, 
rq_£rva˘
,

62 * 
ª•
, 
mx_ª•_Àn
,

63 
noisy
, 
vîbo£
);

69 
sg_Œ_≥rsi°ít_ª£rve_out
(
sg_fd
, 
rq_£rva˘
,

70 
rq_sc›e
, 
rq_ty≥
,

71 * 
∑ømp
, 
∑øm_Àn
,

72 
noisy
, 
vîbo£
);

78 
sg_Œ_ªad_block_limôs
(
sg_fd
, * 
ª•
,

79 
mx_ª•_Àn
, 
noisy
, 
vîbo£
);

86 
sg_Œ_ªad_buf„r
(
sg_fd
, 
mode
, 
buf„r_id
,

87 
buf„r_off£t
, * 
ª•
,

88 
mx_ª•_Àn
, 
noisy
, 
vîbo£
);

95 
sg_Œ_ªad_de„˘10
(
sg_fd
, 
ªq_∂i°
, 
ªq_gli°
,

96 
dl_f‹m©
, * 
ª•
, 
mx_ª•_Àn
,

97 
noisy
, 
vîbo£
);

107 
sg_Œ_ªad_l⁄g10
(
sg_fd
, 
pblock
, 
c‹ª˘
,

108 
lba
, * 
ª•
, 
x„r_Àn
,

109 * 
off£ç
, 
noisy
, 
vîbo£
);

119 
sg_Œ_ªad_l⁄g16
(
sg_fd
, 
pblock
, 
c‹ª˘
,

120 
uöt64_t
 
Œba
, * 
ª•
, 
x„r_Àn
,

121 * 
off£ç
, 
noisy
, 
vîbo£
);

128 
sg_Œ_ªad_medü_£rül_num
(
sg_fd
, * 
ª•
,

129 
mx_ª•_Àn
, 
noisy
,

130 
vîbo£
);

136 
sg_Œ_ªassign_blocks
(
sg_fd
, 
l⁄glba
, 
l⁄gli°
,

137 * 
∑ømp
, 
∑øm_Àn
, 
noisy
,

138 
vîbo£
);

145 
sg_Œ_ª˚ive_düg
(
sg_fd
, 
pcv
, 
pg_code
, * 
ª•
,

146 
mx_ª•_Àn
, 
noisy
, 
vîbo£
);

154 
sg_Œ_ªp‹t_id_öfo
(
sg_fd
, 
ôy≥
, * 
ª•
,

155 
max_ª•_Àn
, 
noisy
, 
vîbo£
);

161 
sg_Œ_ªp‹t_tgt_¥t_gΩ
(
sg_fd
, * 
ª•
,

162 
mx_ª•_Àn
, 
noisy
, 
vîbo£
);

163 
sg_Œ_ªp‹t_tgt_¥t_gΩ2
(
sg_fd
, * 
ª•
, 
mx_ª•_Àn
,

164 
exãnded
, 
noisy
, 
vîbo£
);

170 
sg_Œ_£t_tgt_¥t_gΩ
(
sg_fd
, * 
∑ømp
,

171 
∑øm_Àn
, 
noisy
, 
vîbo£
);

177 
sg_Œ_ªp‹t_ª„ºÆs
(
sg_fd
, 
uöt64_t
 
°¨t_Œba
, 
⁄e_£g
,

178 * 
ª•
,
mx_ª•_Àn
, 
noisy
,

179 
vîbo£
);

187 
sg_Œ_£nd_düg
(
sg_fd
, 
sf_code
, 
pf_bô
, 
sf_bô
,

188 
devoÊ_bô
, 
unôoÊ_bô
, 
l⁄g_duøti⁄
,

189 * 
∑ømp
, 
∑øm_Àn
, 
noisy
,

190 
vîbo£
);

198 
sg_Œ_£t_id_öfo
(
sg_fd
, 
ôy≥
, * 
∑ømp
,

199 
∑øm_Àn
, 
noisy
, 
vîbo£
);

205 
sg_Œ_unm≠
(
sg_fd
, 
group_num
, 
timeout_£cs
,

206 * 
∑ømp
, 
∑øm_Àn
, 
noisy
, 
vîbo£
);

209 
sg_Œ_unm≠_v2
(
sg_fd
, 
™ch‹
, 
group_num
,

210 
timeout_£cs
, * 
∑ømp
, 
∑øm_Àn
,

211 
noisy
, 
vîbo£
);

222 
sg_Œ_vîify10
(
sg_fd
, 
vΩrŸe˘
, 
dpo
, 
byãchk
,

223 
lba
, 
vîi_Àn
, * 
d©a_out
,

224 
d©a_out_Àn
, * 
öf›
, 
noisy
,

225 
vîbo£
);

236 
sg_Œ_vîify16
(
sg_fd
, 
vΩrŸe˘
, 
dpo
, 
byãchk
,

237 
uöt64_t
 
Œba
, 
vîi_Àn
, 
group_num
,

238 * 
d©a_out
, 
d©a_out_Àn
,

239 
uöt64_t
 * 
öf›
, 
noisy
, 
vîbo£
);

246 
sg_Œ_wrôe_buf„r
(
sg_fd
, 
mode
, 
buf„r_id
,

247 
buf„r_off£t
, * 
∑ømp
,

248 
∑øm_Àn
, 
noisy
, 
vîbo£
);

260 
sg_Œ_wrôe_l⁄g10
(
sg_fd
, 
c‹_dis
, 
wr_unc‹
, 
pblock
,

261 
lba
, * 
d©a_out
,

262 
x„r_Àn
, * 
off£ç
, 
noisy
,

263 
vîbo£
);

273 
sg_Œ_wrôe_l⁄g16
(
sg_fd
, 
c‹_dis
, 
wr_unc‹
, 
pblock
,

274 
uöt64_t
 
Œba
, * 
d©a_out
, 
x„r_Àn
,

275 * 
off£ç
, 
noisy
, 
vîbo£
);

282 
sg_Œ_ª˚ive_c›y_ªsu…s
(
sg_fd
, 
ß
, 
li°_id
,

283 * 
ª•
, 
mx_ª•_Àn
,

284 
noisy
, 
vîbo£
);

291 
sg_Œ_exãnded_c›y
(
sg_fd
, * 
ª•
, 
mx_ª•_Àn
,

292 
noisy
, 
vîbo£
);

294 #ifde‡
__˝lu•lus


	@include/sg_cmds_mmc.h

1 #i‚de‡
SG_CMDS_MMC_H


2 
	#SG_CMDS_MMC_H


	)

11 #ifde‡
__˝lu•lus


20 
sg_Œ_gë_c⁄fig
(
sg_fd
, 
π
, 
°¨tög
, * 
ª•
,

21 
mx_ª•_Àn
, 
noisy
, 
vîbo£
);

27 
sg_Œ_gë_≥rf‹m™˚
(
sg_fd
, 
d©a_ty≥
,

28 
°¨tög_lba
, 
max_num_desc
,

29 
ty≥
, * 
ª•
, 
mx_ª•_Àn
,

30 
noisy
, 
vîbo£
);

37 
sg_Œ_£t_cd_•ìd
(
sg_fd
, 
rŸ_c⁄åﬁ
, 
drv_ªad_•ìd
,

38 
drv_wrôe_•ìd
, 
noisy
, 
vîbo£
);

45 
sg_Œ_£t_°ªamög
(
sg_fd
, 
ty≥
, * 
∑ømp
,

46 
∑øm_Àn
, 
noisy
, 
vîbo£
);

49 #ifde‡
__˝lu•lus


	@include/sg_io_linux.h

1 #i‚de‡
SG_IO_LINUX_H


2 
	#SG_IO_LINUX_H


	)

21 
	~"sg_lib.h
"

22 
	~"sg_löux_öc.h
"

24 #ifde‡
__˝lu•lus


29 #i‚de‡
DID_OK


30 
	#DID_OK
 0x00

	)

32 #i‚de‡
DID_NO_CONNECT


33 
	#DID_NO_CONNECT
 0x01

	)

34 
	#DID_BUS_BUSY
 0x02

	)

35 
	#DID_TIME_OUT
 0x03

	)

36 
	#DID_BAD_TARGET
 0x04

	)

37 
	#DID_ABORT
 0x05

	)

38 
	#DID_PARITY
 0x06

	)

39 
	#DID_ERROR
 0x07

	)

40 
	#DID_RESET
 0x08

	)

41 
	#DID_BAD_INTR
 0x09

	)

42 
	#DID_PASSTHROUGH
 0x0®

	)

43 
	#DID_SOFT_ERROR
 0x0b

	)

45 #i‚de‡
DID_IMM_RETRY


46 
	#DID_IMM_RETRY
 0x0¯

	)

48 #i‚de‡
DID_REQUEUE


49 
	#DID_REQUEUE
 0x0d

	)

52 #i‚de‡
DID_TRANSPORT_DISRUPTED


53 
	#DID_TRANSPORT_DISRUPTED
 0xe

	)

55 #i‚de‡
DID_TRANSPORT_FAILFAST


56 
	#DID_TRANSPORT_FAILFAST
 0xf

	)

58 #i‚de‡
DID_TARGET_FAILURE


59 
	#DID_TARGET_FAILURE
 0x10

	)

61 #i‚de‡
DID_NEXUS_FAILURE


62 
	#DID_NEXUS_FAILURE
 0x11

	)

66 
	#SG_LIB_DID_OK
 
DID_OK


	)

67 
	#SG_LIB_DID_NO_CONNECT
 
DID_NO_CONNECT


	)

68 
	#SG_LIB_DID_BUS_BUSY
 
DID_BUS_BUSY


	)

69 
	#SG_LIB_DID_TIME_OUT
 
DID_TIME_OUT


	)

70 
	#SG_LIB_DID_BAD_TARGET
 
DID_BAD_TARGET


	)

71 
	#SG_LIB_DID_ABORT
 
DID_ABORT


	)

72 
	#SG_LIB_DID_PARITY
 
DID_PARITY


	)

73 
	#SG_LIB_DID_ERROR
 
DID_ERROR


	)

74 
	#SG_LIB_DID_RESET
 
DID_RESET


	)

75 
	#SG_LIB_DID_BAD_INTR
 
DID_BAD_INTR


	)

76 
	#SG_LIB_DID_PASSTHROUGH
 
DID_PASSTHROUGH


	)

77 
	#SG_LIB_DID_SOFT_ERROR
 
DID_SOFT_ERROR


	)

78 
	#SG_LIB_DID_IMM_RETRY
 
DID_IMM_RETRY


	)

79 
	#SG_LIB_DID_REQUEUE
 
DID_REQUEUE


	)

80 
	#SG_LIB_TRANSPORT_DISRUPTED
 
DID_TRANSPORT_DISRUPTED


	)

81 
	#SG_LIB_DID_TRANSPORT_FAILFAST
 
DID_TRANSPORT_FAILFAST


	)

82 
	#SG_LIB_DID_TARGET_FAILURE
 
DID_TARGET_FAILURE


	)

83 
	#SG_LIB_DID_NEXUS_FAILURE
 
DID_NEXUS_FAILURE


	)

86 #i‚de‡
DRIVER_OK


87 
	#DRIVER_OK
 0x00

	)

89 #i‚de‡
DRIVER_BUSY


90 
	#DRIVER_BUSY
 0x01

	)

91 
	#DRIVER_SOFT
 0x02

	)

92 
	#DRIVER_MEDIA
 0x03

	)

93 
	#DRIVER_ERROR
 0x04

	)

94 
	#DRIVER_INVALID
 0x05

	)

95 
	#DRIVER_TIMEOUT
 0x06

	)

96 
	#DRIVER_HARD
 0x07

	)

97 
	#DRIVER_SENSE
 0x08

	)

100 
	#SUGGEST_RETRY
 0x10

	)

101 
	#SUGGEST_ABORT
 0x20

	)

102 
	#SUGGEST_REMAP
 0x30

	)

103 
	#SUGGEST_DIE
 0x40

	)

104 
	#SUGGEST_SENSE
 0x80

	)

105 
	#SUGGEST_IS_OK
 0xff

	)

107 #i‚de‡
DRIVER_MASK


108 
	#DRIVER_MASK
 0x0f

	)

110 #i‚de‡
SUGGEST_MASK


111 
	#SUGGEST_MASK
 0xf0

	)

115 
	#SG_LIB_DRIVER_OK
 
DRIVER_OK


	)

116 
	#SG_LIB_DRIVER_BUSY
 
DRIVER_BUSY


	)

117 
	#SG_LIB_DRIVER_SOFT
 
DRIVER_SOFT


	)

118 
	#SG_LIB_DRIVER_MEDIA
 
DRIVER_MEDIA


	)

119 
	#SG_LIB_DRIVER_ERROR
 
DRIVER_ERROR


	)

120 
	#SG_LIB_DRIVER_INVALID
 
DRIVER_INVALID


	)

121 
	#SG_LIB_DRIVER_TIMEOUT
 
DRIVER_TIMEOUT


	)

122 
	#SG_LIB_DRIVER_HARD
 
DRIVER_HARD


	)

123 
	#SG_LIB_DRIVER_SENSE
 
DRIVER_SENSE


	)

124 
	#SG_LIB_SUGGEST_RETRY
 
SUGGEST_RETRY


	)

125 
	#SG_LIB_SUGGEST_ABORT
 
SUGGEST_ABORT


	)

126 
	#SG_LIB_SUGGEST_REMAP
 
SUGGEST_REMAP


	)

127 
	#SG_LIB_SUGGEST_DIE
 
SUGGEST_DIE


	)

128 
	#SG_LIB_SUGGEST_SENSE
 
SUGGEST_SENSE


	)

129 
	#SG_LIB_SUGGEST_IS_OK
 
SUGGEST_IS_OK


	)

130 
	#SG_LIB_DRIVER_MASK
 
DRIVER_MASK


	)

131 
	#SG_LIB_SUGGEST_MASK
 
SUGGEST_MASK


	)

133 
sg_¥öt_masked_°©us
(
masked_°©us
);

134 
sg_¥öt_ho°_°©us
(
ho°_°©us
);

135 
sg_¥öt_drivî_°©us
(
drivî_°©us
);

141 
sg_chk_n_¥öt
(c⁄° * 
Àadö
, 
masked_°©us
,

142 
ho°_°©us
, 
drivî_°©us
,

143 c⁄° * 
£n£_buf„r
, 
sb_Àn
,

144 
øw_söfo
);

147 
	gsg_io_hdr
;

151 
sg_chk_n_¥öt3
(c⁄° * 
Àadö
, 
sg_io_hdr
 * 
hp
,

152 
øw_söfo
);

157 
sg_n‹mÆize_£n£
(c⁄° 
sg_io_hdr
 * 
hp
,

158 
sg_scsi_£n£_hdr
 * 
sshp
);

160 
sg_îr_ˇãg‹y
(
masked_°©us
, 
ho°_°©us
,

161 
drivî_°©us
, c⁄° * 
£n£_buf„r
,

162 
sb_Àn
);

164 
sg_îr_ˇãg‹y_√w
(
scsi_°©us
, 
ho°_°©us
,

165 
drivî_°©us
, c⁄° * 
£n£_buf„r
,

166 
sb_Àn
);

169 
sg_îr_ˇãg‹y3
(
sg_io_hdr
 * 
hp
);

177 #ifde‡
__˝lu•lus


	@include/sg_lib.h

1 #i‚de‡
SG_LIB_H


2 
	#SG_LIB_H


	)

33 
	~<°dio.h
>

34 
	~<°döt.h
>

36 #ifde‡
__˝lu•lus


41 
	#PDT_DISK
 0x0

	)

42 
	#PDT_TAPE
 0x1

	)

43 
	#PDT_PRINTER
 0x2

	)

44 
	#PDT_PROCESSOR
 0x3

	)

45 
	#PDT_WO
 0x4

	)

46 
	#PDT_MMC
 0x5

	)

47 
	#PDT_SCANNER
 0x6

	)

48 
	#PDT_OPTICAL
 0x7

	)

49 
	#PDT_MCHANGER
 0x8

	)

50 
	#PDT_COMMS
 0x9

	)

51 
	#PDT_SAC
 0x¯

	)

52 
	#PDT_SES
 0xd

	)

53 
	#PDT_RBC
 0xê

	)

54 
	#PDT_OCRW
 0x‡

	)

55 
	#PDT_BCC
 0x10

	)

56 
	#PDT_OSD
 0x11

	)

57 
	#PDT_ADC
 0x12

	)

58 
	#PDT_SMD
 0x13

	)

59 
	#PDT_WLUN
 0x1ê

	)

60 
	#PDT_UNKNOWN
 0x1‡

	)

62 #i‚de‡
SAM_STAT_GOOD


64 
	#SAM_STAT_GOOD
 0x0

	)

65 
	#SAM_STAT_CHECK_CONDITION
 0x2

	)

66 
	#SAM_STAT_CONDITION_MET
 0x4

	)

67 
	#SAM_STAT_BUSY
 0x8

	)

68 
	#SAM_STAT_INTERMEDIATE
 0x10

	)

69 
	#SAM_STAT_INTERMEDIATE_CONDITION_MET
 0x14

	)

70 
	#SAM_STAT_RESERVATION_CONFLICT
 0x18

	)

71 
	#SAM_STAT_COMMAND_TERMINATED
 0x22

	)

72 
	#SAM_STAT_TASK_SET_FULL
 0x28

	)

73 
	#SAM_STAT_ACA_ACTIVE
 0x30

	)

74 
	#SAM_STAT_TASK_ABORTED
 0x40

	)

78 
	#SPC_SK_NO_SENSE
 0x0

	)

79 
	#SPC_SK_RECOVERED_ERROR
 0x1

	)

80 
	#SPC_SK_NOT_READY
 0x2

	)

81 
	#SPC_SK_MEDIUM_ERROR
 0x3

	)

82 
	#SPC_SK_HARDWARE_ERROR
 0x4

	)

83 
	#SPC_SK_ILLEGAL_REQUEST
 0x5

	)

84 
	#SPC_SK_UNIT_ATTENTION
 0x6

	)

85 
	#SPC_SK_DATA_PROTECT
 0x7

	)

86 
	#SPC_SK_BLANK_CHECK
 0x8

	)

87 
	#SPC_SK_COPY_ABORTED
 0xa

	)

88 
	#SPC_SK_ABORTED_COMMAND
 0xb

	)

89 
	#SPC_SK_VOLUME_OVERFLOW
 0xd

	)

90 
	#SPC_SK_MISCOMPARE
 0xe

	)

91 
	#SPC_SK_COMPLETED
 0xf

	)

94 
	#TPROTO_FCP
 0

	)

95 
	#TPROTO_SPI
 1

	)

96 
	#TPROTO_SSA
 2

	)

97 
	#TPROTO_1394
 3

	)

98 
	#TPROTO_SRP
 4

	)

99 
	#TPROTO_ISCSI
 5

	)

100 
	#TPROTO_SAS
 6

	)

101 
	#TPROTO_ADT
 7

	)

102 
	#TPROTO_ATA
 8

	)

103 
	#TPROTO_UAS
 9

	)

104 
	#TPROTO_SOP
 0xa

	)

105 
	#TPROTO_NONE
 0xf

	)

109 c⁄° * 
sg_lib_vîsi⁄
();

114 
sg_gë_comm™d_size
(
cdb_byã0
);

119 
sg_gë_comm™d_«me
(c⁄° * 
cdbp
, 
≥ri_ty≥
,

120 
buff_Àn
, * 
buff
);

124 
sg_gë_›code_«me
(
cdb_byã0
, 
≥ri_ty≥
,

125 
buff_Àn
, * 
buff
);

129 
sg_gë_›code_ß_«me
(
cdb_byã0
, 
£rvi˚_a˘i⁄
,

130 
≥ri_ty≥
, 
buff_Àn
, * 
buff
);

133 
sg_gë_scsi_°©us_°r
(
scsi_°©us
, 
buff_Àn
, * 
buff
);

141 
	ssg_scsi_£n£_hdr
 {

142 
	gª•⁄£_code
;

143 
	g£n£_key
;

144 
	gasc
;

145 
	gascq
;

146 
	gbyã4
;

147 
	gbyã5
;

148 
	gbyã6
;

149 
	gaddôi⁄Æ_Àngth
;

159 
sg_scsi_n‹mÆize_£n£
(c⁄° * 
£n£p
,

160 
£n£_Àn
,

161 
sg_scsi_£n£_hdr
 * 
sshp
);

166 c⁄° * 
sg_scsi_£n£_desc_föd
(

167 c⁄° * 
£n£p
, 
£n£_Àn
, 
desc_ty≥
);

170 * 
sg_gë_£n£_key_°r
(
£n£_key
, 
buff_Àn
, * 
buff
);

173 * 
sg_gë_asc_ascq_°r
(
asc
, 
ascq
, 
buff_Àn
,

174 * 
buff
);

179 
sg_gë_£n£_öfo_Êd
(c⁄° * 
£n£p
, 
sb_Àn
,

180 
uöt64_t
 * 
öfo_ouç
);

186 
sg_gë_£n£_fûem¨k_eom_ûi
(c⁄° * 
£n£p
,

187 
sb_Àn
, * 
fûem¨k_p
,

188 * 
eom_p
, * 
ûi_p
);

196 
sg_gë_£n£_¥ogªss_Êd
(c⁄° * 
£n£p
,

197 
sb_Àn
, * 
¥ogªss_ouç
);

202 
sg_gë_£n£_°r
(c⁄° * 
Àadö
,

203 c⁄° * 
£n£_buf„r
, 
sb_Àn
,

204 
øw_söfo
, 
buff_Àn
, * 
buff
);

208 * 
sg_gë_pdt_°r
(
pdt
, 
buff_Àn
, * 
buff
);

212 * 
sg_gë_å™s_¥Ÿo_°r
(
çi
, 
buff_Àn
, * 
buff
);

214 
FILE
 * 
sg_w¨nögs_°rm
;

216 
sg_£t_w¨nögs_°rm
(
FILE
 * 
w¨nögs_°rm
);

220 
sg_¥öt_comm™d
(c⁄° * 
comm™d
);

221 
sg_¥öt_£n£
(c⁄° * 
Àadö
,

222 c⁄° * 
£n£_buf„r
, 
sb_Àn
,

223 
øw_öfo
);

224 
sg_¥öt_scsi_°©us
(
scsi_°©us
);

228 
	#SG_LIB_SYNTAX_ERROR
 1

	)

229 
	#SG_LIB_FILE_ERROR
 15

	)

234 
	#SG_LIB_CAT_CLEAN
 0

	)

236 
	#SG_LIB_CAT_NOT_READY
 2

	)

238 
	#SG_LIB_CAT_MEDIUM_HARD
 3

	)

240 
	#SG_LIB_CAT_ILLEGAL_REQ
 5

	)

242 
	#SG_LIB_CAT_UNIT_ATTENTION
 6

	)

245 
	#SG_LIB_CAT_INVALID_OP
 9

	)

247 
	#SG_LIB_CAT_ABORTED_COMMAND
 11

	)

249 
	#SG_LIB_CAT_NO_SENSE
 20

	)

251 
	#SG_LIB_CAT_RECOVERED
 21

	)

253 
	#SG_LIB_CAT_MALFORMED
 97

	)

254 
	#SG_LIB_CAT_SENSE
 98

	)

255 
	#SG_LIB_CAT_OTHER
 99

	)

260 
sg_îr_ˇãg‹y_£n£
(c⁄° * 
£n£_buf„r
,

261 
sb_Àn
);

265 
	#SG_LIB_CAT_ILLEGAL_REQ_WITH_INFO
 17

	)

268 
	#SG_LIB_CAT_MEDIUM_HARD_WITH_INFO
 18

	)

271 
	#SG_LIB_CAT_TIMEOUT
 33

	)

283 
sg_vpd_dev_id_ôî
(c⁄° * 
öôül_desig_desc
,

284 
∑ge_Àn
, * 
off
, 
m_assoc
,

285 
m_desig_ty≥
, 
m_code_£t
);

292 * 
ß„_°ªº‹
(
î∫um
);

303 
dSåHex
(c⁄° * 
°r
, 
Àn
, 
no_ascii
);

309 
sg_is_big_ídün
();

315 
sg_©a_gë_ch¨s
(c⁄° * 
w‹d_¨r
, 
°¨t_w‹d
,

316 
num_w‹ds
, 
is_big_ídün
, * 
och¨s
);

331 
dW‹dHex
(c⁄° * 
w‹ds
, 
num
, 
no_ascii
,

332 
sw≠b
);

340 
sg_gë_num
(c⁄° * 
buf
);

346 
sg_gë_num_nomu…
(c⁄° * 
buf
);

353 
öt64_t
 
sg_gë_Œnum
(c⁄° * 
buf
);

361 
sg_£t_ãxt_mode
(
fd
);

365 
sg_£t_bö¨y_mode
(
fd
);

367 #ifde‡
__˝lu•lus


	@include/sg_lib_data.h

1 #i‚de‡
SG_LIB_DATA_H


2 
	#SG_LIB_DATA_H


	)

18 
	~<°döt.h
>

20 #ifde‡
__˝lu•lus


25 
	#SG_MAINTENANCE_IN
 0xa3

	)

26 
	#SG_MAINTENANCE_OUT
 0xa4

	)

27 
	#SG_PERSISTENT_RESERVE_IN
 0x5e

	)

28 
	#SG_PERSISTENT_RESERVE_OUT
 0x5f

	)

29 
	#SG_EXTENDED_COPY
 0x83

	)

30 
	#SG_RECEIVE_COPY
 0x84

	)

31 
	#SG_SERVICE_ACTION_IN_12
 0xab

	)

32 
	#SG_SERVICE_ACTION_OUT_12
 0xa9

	)

33 
	#SG_SERVICE_ACTION_BIDI
 0x9d

	)

34 
	#SG_SERVICE_ACTION_IN_16
 0x9e

	)

35 
	#SG_SERVICE_ACTION_OUT_16
 0x9f

	)

36 
	#SG_READ_BUFFER
 0x3c

	)

37 
	#SG_WRITE_BUFFER
 0x3b

	)

38 
	#SG_VARIABLE_LENGTH_CMD
 0x7f

	)

42 
	ssg_lib_vÆue_«me_t
 {

43 
vÆue
;

44 
≥ri_dev_ty≥
;

45 c⁄° * 
«me
;

48 
	ssg_lib_asc_ascq_t
 {

49 
asc
;

50 
ascq
;

51 c⁄° * 
ãxt
;

54 
	ssg_lib_asc_ascq_ønge_t
 {

55 
asc
;

56 
ascq_mö
;

57 
ascq_max
;

58 c⁄° * 
ãxt
;

62 c⁄° * 
sg_lib_vîsi⁄_°r
;

64 
sg_lib_vÆue_«me_t
 
sg_lib_n‹mÆ_›codes
[];

65 
sg_lib_vÆue_«me_t
 
sg_lib_ªad_buff_¨r
[];

66 
sg_lib_vÆue_«me_t
 
sg_lib_wrôe_buff_¨r
[];

67 
sg_lib_vÆue_«me_t
 
sg_lib_maöt_ö_¨r
[];

68 
sg_lib_vÆue_«me_t
 
sg_lib_maöt_out_¨r
[];

69 
sg_lib_vÆue_«me_t
 
sg_lib_¥_ö_¨r
[];

70 
sg_lib_vÆue_«me_t
 
sg_lib_¥_out_¨r
[];

71 
sg_lib_vÆue_«me_t
 
sg_lib_£rv_ö12_¨r
[];

72 
sg_lib_vÆue_«me_t
 
sg_lib_£rv_out12_¨r
[];

73 
sg_lib_vÆue_«me_t
 
sg_lib_£rv_ö16_¨r
[];

74 
sg_lib_vÆue_«me_t
 
sg_lib_£rv_out16_¨r
[];

75 
sg_lib_vÆue_«me_t
 
sg_lib_£rv_bidi_¨r
[];

76 
sg_lib_vÆue_«me_t
 
sg_lib_xc›y_ß_¨r
[];

77 
sg_lib_vÆue_«me_t
 
sg_lib_ªc_c›y_ß_¨r
[];

78 
sg_lib_vÆue_«me_t
 
sg_lib_v¨übÀ_Àngth_¨r
[];

79 
sg_lib_asc_ascq_ønge_t
 
sg_lib_asc_ascq_ønge
[];

80 
sg_lib_asc_ascq_t
 
sg_lib_asc_ascq
[];

81 c⁄° * 
sg_lib_£n£_key_desc
[];

82 c⁄° * 
sg_lib_pdt_°rs
[];

83 c⁄° * 
sg_lib_å™•‹t_¥Ÿo_°rs
[];

86 #ifde‡
__˝lu•lus


	@include/sg_linux_inc.h

1 #i‚de‡
SG_LINUX_INC_H


2 
	#SG_LINUX_INC_H


	)

4 #ifde‡
SG_KERNEL_INCLUDES


5 
	#__u£r


	)

6 
	tu8
;

7 
	~"/u§/§c/löux/ö˛ude/scsi/sg.h
"

8 
	~"/u§/§c/löux/ö˛ude/scsi/scsi.h
"

10 #ifde‡
SG_TRICK_GNU_INCLUDES


11 
	~<scsi/sg.h
>

12 
	~<scsi/scsi.h
>

14 
	~<scsi/sg.h
>

15 
	~<scsi/scsi.h
>

19 #ifde‡
BLKGETSIZE64


20 #i‚de‡
u64


21 
	~<°döt.h
>

22 
uöt64_t
 
	tu64
;

	@include/sg_pt.h

1 #i‚de‡
SG_PT_H


2 
	#SG_PT_H


	)

11 
	~<°döt.h
>

13 #ifde‡
__˝lu•lus


22 
sg_±_ba£
;

28 c⁄° * 
scsi_±_vîsi⁄
();

32 
scsi_±_›í_devi˚
(c⁄° * 
devi˚_«me
, 
ªad_⁄ly
,

33 
vîbo£
);

38 
scsi_±_›í_Êags
(c⁄° * 
devi˚_«me
, 
Êags
,

39 
vîbo£
);

42 
scsi_±_˛o£_devi˚
(
devi˚_fd
);

49 
sg_±_ba£
 * 
c⁄°ru˘_scsi_±_obj
();

53 
˛ór_scsi_±_obj
(
sg_±_ba£
 * 
objp
);

56 
£t_scsi_±_cdb
(
sg_±_ba£
 * 
objp
,

57 c⁄° * 
cdb
, 
cdb_Àn
);

59 
£t_scsi_±_£n£
(
sg_±_ba£
 * 
objp
, * 
£n£
,

60 
max_£n£_Àn
);

62 
£t_scsi_±_d©a_ö
(
sg_±_ba£
 * 
objp
,

63 * 
dx„Ω
, 
dx„r_Àn
);

65 
£t_scsi_±_d©a_out
(
sg_±_ba£
 * 
objp
,

66 c⁄° * 
dx„Ω
, 
dx„r_Àn
);

68 
£t_scsi_±_∑ckë_id
(
sg_±_ba£
 * 
objp
, 
∑ck_id
);

69 
£t_scsi_±_èg
(
sg_±_ba£
 * 
objp
, 
uöt64_t
 
èg
);

70 
£t_scsi_±_èsk_m™agemít
(
sg_±_ba£
 * 
objp
,

71 
tmf_code
);

72 
£t_scsi_±_èsk_©å
(
sg_±_ba£
 * 
objp
, 
©åibuã
,

73 
¥i‹ôy
);

77 
	#SCSI_PT_FLAGS_FUNCTION
 1

	)

80 
	#SCSI_PT_FLAGS_QUEUE_AT_TAIL
 0x10

	)

81 
	#SCSI_PT_FLAGS_QUEUE_AT_HEAD
 0x20

	)

84 
£t_scsi_±_Êags
(
sg_±_ba£
 * 
objp
, 
Êags
);

86 
	#SCSI_PT_DO_START_OK
 0

	)

87 
	#SCSI_PT_DO_BAD_PARAMS
 1

	)

88 
	#SCSI_PT_DO_TIMEOUT
 2

	)

95 
do_scsi_±
(
sg_±_ba£
 * 
objp
, 
fd
, 
timeout_£cs
,

96 
vîbo£
);

98 
	#SCSI_PT_RESULT_GOOD
 0

	)

99 
	#SCSI_PT_RESULT_STATUS
 1

	)

100 
	#SCSI_PT_RESULT_SENSE
 2

	)

101 
	#SCSI_PT_RESULT_TRANSPORT_ERR
 3

	)

102 
	#SCSI_PT_RESULT_OS_ERR
 4

	)

104 
gë_scsi_±_ªsu…_ˇãg‹y
(c⁄° 
sg_±_ba£
 * 
objp
);

107 
gë_scsi_±_ªsid
(c⁄° 
sg_±_ba£
 * 
objp
);

110 
gë_scsi_±_°©us_ª•⁄£
(c⁄° 
sg_±_ba£
 * 
objp
);

113 
gë_scsi_±_£n£_Àn
(c⁄° 
sg_±_ba£
 * 
objp
);

115 
gë_scsi_±_os_îr
(c⁄° 
sg_±_ba£
 * 
objp
);

116 * 
gë_scsi_±_os_îr_°r
(c⁄° 
sg_±_ba£
 * 
objp
,

117 
max_b_Àn
, * 
b
);

119 
gë_scsi_±_å™•‹t_îr
(c⁄° 
sg_±_ba£
 * 
objp
);

120 * 
gë_scsi_±_å™•‹t_îr_°r
(c⁄° 
sg_±_ba£
 * 
objp
,

121 
max_b_Àn
, * 
b
);

124 
gë_scsi_±_duøti⁄_ms
(c⁄° 
sg_±_ba£
 * 
objp
);

130 
de°ru˘_scsi_±_obj
(
sg_±_ba£
 * 
objp
);

132 #ifde‡
SG_LIB_WIN32


133 
	#SG_LIB_WIN32_DIRECT
 1

	)

138 
scsi_±_wö32_dúe˘
(
°©e_dúe˘
);

141 
scsi_±_wö32_•t_°©e
();

145 #ifde‡
__˝lu•lus


	@include/sg_pt_win32.h

1 #i‚de‡
SG_PT_WIN32_H


2 
	#SG_PT_WIN32_H


	)

14 
	~<wödows.h
>

16 
	#SCSI_MAX_SENSE_LEN
 64

	)

17 
	#SCSI_MAX_CDB_LEN
 16

	)

18 
	#SCSI_MAX_INDIRECT_DATA
 16384

	)

21 
USHORT
 
	mLígth
;

22 
UCHAR
 
	mScsiSètus
;

23 
UCHAR
 
	mP©hId
;

24 
UCHAR
 
	mT¨gëId
;

25 
UCHAR
 
	mLun
;

26 
UCHAR
 
	mCdbLígth
;

27 
UCHAR
 
	mSí£InfoLígth
;

28 
UCHAR
 
	mD©aIn
;

29 
ULONG
 
	mD©aTøns„rLígth
;

30 
ULONG
 
	mTimeOutVÆue
;

31 
ULONG_PTR
 
	mD©aBuf„rOff£t
;

32 
ULONG
 
	mSí£InfoOff£t
;

33 
UCHAR
 
	mCdb
[
SCSI_MAX_CDB_LEN
];

34 } 
	tSCSI_PASS_THROUGH
, *
	tPSCSI_PASS_THROUGH
;

38 
USHORT
 
	mLígth
;

39 
UCHAR
 
	mScsiSètus
;

40 
UCHAR
 
	mP©hId
;

41 
UCHAR
 
	mT¨gëId
;

42 
UCHAR
 
	mLun
;

43 
UCHAR
 
	mCdbLígth
;

44 
UCHAR
 
	mSí£InfoLígth
;

45 
UCHAR
 
	mD©aIn
;

46 
ULONG
 
	mD©aTøns„rLígth
;

47 
ULONG
 
	mTimeOutVÆue
;

48 
PVOID
 
	mD©aBuf„r
;

49 
ULONG
 
	mSí£InfoOff£t
;

50 
UCHAR
 
	mCdb
[
SCSI_MAX_CDB_LEN
];

51 } 
	tSCSI_PASS_THROUGH_DIRECT
, *
	tPSCSI_PASS_THROUGH_DIRECT
;

55 
SCSI_PASS_THROUGH
 
	m•t
;

57 
ULONG
 
	mFûÀr
;

58 
UCHAR
 
	mucSí£Buf
[
SCSI_MAX_SENSE_LEN
];

59 
UCHAR
 
	mucD©aBuf
[
SCSI_MAX_INDIRECT_DATA
];

60 } 
	tSCSI_PASS_THROUGH_WITH_BUFFERS
, *
	tPSCSI_PASS_THROUGH_WITH_BUFFERS
;

64 
SCSI_PASS_THROUGH_DIRECT
 
	m•t
;

65 
ULONG
 
	mFûÀr
;

66 
UCHAR
 
	mucSí£Buf
[
SCSI_MAX_SENSE_LEN
];

67 } 
	tSCSI_PASS_THROUGH_DIRECT_WITH_BUFFER
, *
	tPSCSI_PASS_THROUGH_DIRECT_WITH_BUFFER
;

72 
UCHAR
 
	mNumbîOfLogiˇlUnôs
;

73 
UCHAR
 
	mInôüt‹BusId
;

74 
ULONG
 
	mInquúyD©aOff£t
;

75 } 
	tSCSI_BUS_DATA
, *
	tPSCSI_BUS_DATA
;

79 
UCHAR
 
	mNumbîOfBus£s
;

80 
SCSI_BUS_DATA
 
	mBusD©a
[1];

81 } 
	tSCSI_ADAPTER_BUS_INFO
, *
	tPSCSI_ADAPTER_BUS_INFO
;

85 
UCHAR
 
	mP©hId
;

86 
UCHAR
 
	mT¨gëId
;

87 
UCHAR
 
	mLun
;

88 
BOOLEAN
 
	mDevi˚Cœimed
;

89 
ULONG
 
	mInquúyD©aLígth
;

90 
ULONG
 
	mNextInquúyD©aOff£t
;

91 
UCHAR
 
	mInquúyD©a
[1];

92 } 
	tSCSI_INQUIRY_DATA
, *
	tPSCSI_INQUIRY_DATA
;

96 
ULONG
 
	mLígth
;

97 
UCHAR
 
	mP‹tNumbî
;

98 
UCHAR
 
	mP©hId
;

99 
UCHAR
 
	mT¨gëId
;

100 
UCHAR
 
	mLun
;

101 } 
	tSCSI_ADDRESS
, *
	tPSCSI_ADDRESS
;

107 
	#METHOD_BUFFERED
 0

	)

108 
	#METHOD_IN_DIRECT
 1

	)

109 
	#METHOD_OUT_DIRECT
 2

	)

110 
	#METHOD_NEITHER
 3

	)

115 
	#FILE_ANY_ACCESS
 0

	)

116 #i‚de‡
FILE_READ_ACCESS


117 
	#FILE_READ_ACCESS
 0x0001

	)

119 #i‚de‡
FILE_WRITE_ACCESS


120 
	#FILE_WRITE_ACCESS
 0x0002

	)

124 
	#IOCTL_SCSI_BASE
 0x00000004

	)

129 
	#SCSI_IOCTL_DATA_OUT
 0

	)

130 
	#SCSI_IOCTL_DATA_IN
 1

	)

131 
	#SCSI_IOCTL_DATA_UNSPECIFIED
 2

	)

136 #i‚de‡
CTL_CODE


137 
	#CTL_CODE
(
DevTy≥
, 
Fun˘i⁄
, 
Mëhod
, 
Ac˚ss
) \

138 (((
DevTy≥
Ë<< 16Ë| ((
Ac˚ss
Ë<< 14Ë| ((
Fun˘i⁄
Ë<< 2Ë| (
Mëhod
))

	)

141 
	#IOCTL_SCSI_PASS_THROUGH
 
	`CTL_CODE
(
IOCTL_SCSI_BASE
, 0x0401, \

142 
METHOD_BUFFERED
, 
FILE_READ_ACCESS
 | 
FILE_WRITE_ACCESS
)

	)

143 
	#IOCTL_SCSI_MINIPORT
 
	`CTL_CODE
(
IOCTL_SCSI_BASE
, 0x0402, \

144 
METHOD_BUFFERED
, 
FILE_READ_ACCESS
 | 
FILE_WRITE_ACCESS
)

	)

145 
	#IOCTL_SCSI_GET_INQUIRY_DATA
 
	`CTL_CODE
(
IOCTL_SCSI_BASE
, 0x0403, \

146 
METHOD_BUFFERED
, 
FILE_ANY_ACCESS
)

	)

147 
	#IOCTL_SCSI_GET_CAPABILITIES
 
	`CTL_CODE
(
IOCTL_SCSI_BASE
, 0x0404, \

148 
METHOD_BUFFERED
, 
FILE_ANY_ACCESS
)

	)

149 
	#IOCTL_SCSI_PASS_THROUGH_DIRECT
 
	`CTL_CODE
(
IOCTL_SCSI_BASE
, 0x0405, \

150 
METHOD_BUFFERED
, 
FILE_READ_ACCESS
 | 
FILE_WRITE_ACCESS
)

	)

151 
	#IOCTL_SCSI_GET_ADDRESS
 
	`CTL_CODE
(
IOCTL_SCSI_BASE
, 0x0406, \

152 
METHOD_BUFFERED
, 
FILE_ANY_ACCESS
)

	)

	@lib/sg_cmds_basic.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<°rög.h
>

20 
	~<uni°d.h
>

21 
	~"sg_lib.h
"

22 
	~"sg_cmds_basic.h
"

23 
	~"sg_±.h
"

25 #ifde‡
HAVE_CONFIG_H


26 
	~"c⁄fig.h
"

30 c⁄° * 
	gvîsi⁄_°r
 = "1.61 20130507";

33 
	#SENSE_BUFF_LEN
 64

	)

34 
	#EBUFF_SZ
 256

	)

36 
	#DEF_PT_TIMEOUT
 60

	)

37 
	#START_PT_TIMEOUT
 120

	)

38 
	#LONG_PT_TIMEOUT
 7200

	)

40 
	#INQUIRY_CMD
 0x12

	)

41 
	#INQUIRY_CMDLEN
 6

	)

42 
	#REQUEST_SENSE_CMD
 0x3

	)

43 
	#REQUEST_SENSE_CMDLEN
 6

	)

44 
	#REPORT_LUNS_CMD
 0xa0

	)

45 
	#REPORT_LUNS_CMDLEN
 12

	)

46 
	#TUR_CMD
 0x0

	)

47 
	#TUR_CMDLEN
 6

	)

49 
	#INQUIRY_RESP_INITIAL_LEN
 36

	)

53 
	$sg_cmds_vîsi⁄
()

55  
vîsi⁄_°r
;

56 
	}
}

61 
	$sg_cmds_›í_devi˚
(c⁄° * 
devi˚_«me
, 
ªad_⁄ly
, 
vîbo£
)

63  
	`scsi_±_›í_devi˚
(
devi˚_«me
, 
ªad_⁄ly
, 
vîbo£
);

64 
	}
}

69 
	$sg_cmds_›í_Êags
(c⁄° * 
devi˚_«me
, 
Êags
, 
vîbo£
)

71  
	`scsi_±_›í_Êags
(
devi˚_«me
, 
Êags
, 
vîbo£
);

72 
	}
}

76 
	$sg_cmds_˛o£_devi˚
(
devi˚_fd
)

78  
	`scsi_±_˛o£_devi˚
(
devi˚_fd
);

79 
	}
}

82 
	$sg_cmds_¥o˚ss_hñ≥r
(c⁄° * 
Àadö
, 
mx_di_Àn
, 
ªsid
,

83 c⁄° * 
sbp
, 
¶í
, 
noisy
,

84 
vîbo£
, * 
o_£n£_ˇt
)

86 
sˇt
, 
gŸ
;

87 
n
 = 0;

88 
check_d©a_ö
 = 0;

89 
b
[512];

91 
sˇt
 = 
	`sg_îr_ˇãg‹y_£n£
(
sbp
, 
¶í
);

92 
sˇt
) {

93 
SG_LIB_CAT_NOT_READY
:

94 
SG_LIB_CAT_INVALID_OP
:

95 
SG_LIB_CAT_ILLEGAL_REQ
:

96 
SG_LIB_CAT_ABORTED_COMMAND
:

97 
SG_LIB_CAT_NO_SENSE
:

98 
n
 = 0;

100 
SG_LIB_CAT_RECOVERED
:

101 
SG_LIB_CAT_MEDIUM_HARD
:

102 ++
check_d©a_ö
;

104 
SG_LIB_CAT_UNIT_ATTENTION
:

106 
n
 = 
noisy
;

109 i‡(
vîbo£
 || 
n
) {

110 
	`sg_gë_£n£_°r
(
Àadö
, 
sbp
, 
¶í
, (
vîbo£
 > 1),

111 (
b
), b);

112 
	`Ârötf
(
sg_w¨nögs_°rm
, "%s", 
b
);

113 i‡((
mx_di_Àn
 > 0Ë&& (
ªsid
 > 0)) {

114 
gŸ
 = 
mx_di_Àn
 - 
ªsid
;

115 i‡((
vîbo£
 > 2Ë|| 
check_d©a_ö
 || (
gŸ
 > 0))

116 
	`Ârötf
(
sg_w¨nögs_°rm
, "Öass-throughÑequested "

117 "%d byã†buàgŸ %d byãs\n", 
mx_di_Àn
, 
gŸ
);

120 i‡(
o_£n£_ˇt
)

121 *
o_£n£_ˇt
 = 
sˇt
;

123 
	}
}

135 
	$sg_cmds_¥o˚ss_ª•
(
sg_±_ba£
 * 
±vp
, c⁄° * 
Àadö
,

136 
±_ªs
, 
mx_di_Àn
, c⁄° * 
sbp
,

137 
noisy
, 
vîbo£
, * 
o_£n£_ˇt
)

139 
gŸ
, 
ˇt
, 
duøti⁄
, 
¶í
, 
ªsid
, 
ª•_code
;

140 
b
[1024];

142 i‡(
NULL
 =
sg_w¨nögs_°rm
)

143 
sg_w¨nögs_°rm
 = 
°dîr
;

144 i‡(
NULL
 =
Àadö
)

145 
Àadö
 = "";

146 i‡(
±_ªs
 < 0) {

147 i‡(
noisy
 || 
vîbo£
)

148 
	`Ârötf
(
sg_w¨nögs_°rm
, "%s:ÖassÅhrough osÉrror: %s\n",

149 
Àadö
, 
	`ß„_°ªº‹
(-
±_ªs
));

151 } i‡(
SCSI_PT_DO_BAD_PARAMS
 =
±_ªs
) {

152 
	`Ârötf
(
sg_w¨nögs_°rm
, "%s: badÖas†through sëup\n", 
Àadö
);

154 } i‡(
SCSI_PT_DO_TIMEOUT
 =
±_ªs
) {

155 
	`Ârötf
(
sg_w¨nögs_°rm
, "%s:Öas†throughÅimeout\n", 
Àadö
);

158 i‡((
vîbo£
 > 2Ë&& ((
duøti⁄
 = 
	`gë_scsi_±_duøti⁄_ms
(
±vp
)) >= 0))

159 
	`Ârötf
(
sg_w¨nögs_°rm
, " duøti⁄=%d ms\n", 
duøti⁄
);

160 
ªsid
 = (
mx_di_Àn
 > 0Ë? 
	`gë_scsi_±_ªsid
(
±vp
) : 0;

161 
¶í
 = 
	`gë_scsi_±_£n£_Àn
(
±vp
);

162 (
ˇt
 = 
	`gë_scsi_±_ªsu…_ˇãg‹y
(
±vp
))) {

163 
SCSI_PT_RESULT_GOOD
:

164 i‡(
¶í
 > 7) {

165 
ª•_code
 = 
sbp
[0] & 0x7f;

167 i‡(
ª•_code
 >= 0x70) {

168 i‡(
ª•_code
 < 0x72) {

169 i‡(
SPC_SK_NO_SENSE
 !(0x‡& 
sbp
[2]))

170 
	`sg_îr_ˇãg‹y_£n£
(
sbp
, 
¶í
);

171 } i‡(
ª•_code
 < 0x74) {

172 i‡(
SPC_SK_NO_SENSE
 !(0x‡& 
sbp
[1]))

173 
	`sg_îr_ˇãg‹y_£n£
(
sbp
, 
¶í
);

177 i‡(
mx_di_Àn
 > 0) {

178 
gŸ
 = 
mx_di_Àn
 - 
ªsid
;

179 i‡(
vîbo£
 && (
ªsid
 > 0))

180 
	`Ârötf
(
sg_w¨nögs_°rm
, " %s:Öass-throughÑequested "

181 "%d byã†buàgŸ %d byãs\n", 
Àadö
, 
mx_di_Àn
,

182 
gŸ
);

183  
gŸ
;

186 
SCSI_PT_RESULT_STATUS
:

187 i‡(
vîbo£
 || 
noisy
) {

188 
	`sg_gë_scsi_°©us_°r
(
	`gë_scsi_±_°©us_ª•⁄£
(
±vp
),

189 (
b
), b);

190 
	`Ârötf
(
sg_w¨nögs_°rm
, "%s: scsò°©us: %s\n", 
Àadö
, 
b
);

193 
SCSI_PT_RESULT_SENSE
:

194  
	`sg_cmds_¥o˚ss_hñ≥r
(
Àadö
, 
mx_di_Àn
, 
ªsid
, 
sbp
, 
¶í
,

195 
noisy
, 
vîbo£
, 
o_£n£_ˇt
);

196 
SCSI_PT_RESULT_TRANSPORT_ERR
:

197 i‡(
vîbo£
 || 
noisy
) {

198 
	`gë_scsi_±_å™•‹t_îr_°r
(
±vp
, (
b
), b);

199 
	`Ârötf
(
sg_w¨nögs_°rm
, "%s:Åøn•‹t: %s\n", 
Àadö
, 
b
);

201 i‡((
SAM_STAT_CHECK_CONDITION
 =
	`gë_scsi_±_°©us_ª•⁄£
(
±vp
))

202 && (
¶í
 > 0))

203  
	`sg_cmds_¥o˚ss_hñ≥r
(
Àadö
, 
mx_di_Àn
, 
ªsid
, 
sbp
,

204 
¶í
, 
noisy
, 
vîbo£
, 
o_£n£_ˇt
);

207 
SCSI_PT_RESULT_OS_ERR
:

208 i‡(
vîbo£
 || 
noisy
) {

209 
	`gë_scsi_±_os_îr_°r
(
±vp
, (
b
), b);

210 
	`Ârötf
(
sg_w¨nögs_°rm
, "%s: os: %s\n", 
Àadö
, 
b
);

214 
	`Ârötf
(
sg_w¨nögs_°rm
, "%s: unknownÖassÅhroughÑesult "

215 "ˇãg‹y (%d)\n", 
Àadö
, 
ˇt
);

218 
	}
}

225 
	$sg_Œ_öquúy
(
sg_fd
, 
cmddt
, 
evpd
, 
pg_›
, * 
ª•
,

226 
mx_ª•_Àn
, 
noisy
, 
vîbo£
)

228 
ªs
, 
ªt
, 
k
, 
£n£_ˇt
;

229 
öqCmdBlk
[
INQUIRY_CMDLEN
] = {
INQUIRY_CMD
, 0, 0, 0, 0, 0};

230 
£n£_b
[
SENSE_BUFF_LEN
];

231 * 
up
;

232 
sg_±_ba£
 * 
±vp
;

234 i‡(
cmddt
)

235 
öqCmdBlk
[1] |= 2;

236 i‡(
evpd
)

237 
öqCmdBlk
[1] |= 1;

238 
öqCmdBlk
[2] = ()
pg_›
;

240 
öqCmdBlk
[3] = ()((
mx_ª•_Àn
 >> 8) & 0xff);

241 
öqCmdBlk
[4] = ()(
mx_ª•_Àn
 & 0xff);

242 i‡(
NULL
 =
sg_w¨nögs_°rm
)

243 
sg_w¨nögs_°rm
 = 
°dîr
;

244 i‡(
vîbo£
) {

245 
	`Ârötf
(
sg_w¨nögs_°rm
, " inquiry cdb: ");

246 
k
 = 0; k < 
INQUIRY_CMDLEN
; ++k)

247 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
öqCmdBlk
[
k
]);

248 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

250 i‡(
ª•
 && (
mx_ª•_Àn
 > 0)) {

251 
up
 = (*)
ª•
;

252 
up
[0] = 0x7f;

253 i‡(
mx_ª•_Àn
 > 4)

254 
up
[4] = 0;

256 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

257 i‡(
NULL
 =
±vp
) {

258 
	`Ârötf
(
sg_w¨nögs_°rm
, "inquiry: out of memory\n");

261 
	`£t_scsi_±_cdb
(
±vp
, 
öqCmdBlk
, (inqCmdBlk));

262 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

263 
	`£t_scsi_±_d©a_ö
(
±vp
, (*)
ª•
, 
mx_ª•_Àn
);

264 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

265 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "öquúy", 
ªs
, 
mx_ª•_Àn
, 
£n£_b
,

266 
noisy
, 
vîbo£
, &
£n£_ˇt
);

267 
	`de°ru˘_scsi_±_obj
(
±vp
);

268 i‡(-1 =
ªt
)

270 i‡(-2 =
ªt
) {

271 
£n£_ˇt
) {

272 
SG_LIB_CAT_INVALID_OP
:

273 
SG_LIB_CAT_ILLEGAL_REQ
:

274 
SG_LIB_CAT_ABORTED_COMMAND
:

275 
ªt
 = 
£n£_ˇt
;

277 
SG_LIB_CAT_RECOVERED
:

278 
SG_LIB_CAT_NO_SENSE
:

279 
ªt
 = 0;

282 
ªt
 = -1;

285 } i‡(
ªt
 < 4) {

286 i‡(
vîbo£
)

287 
	`Ârötf
(
sg_w¨nögs_°rm
, "inquiry: gotÅoo few "

288 "byã†(%d)\n", 
ªt
);

289 
ªt
 = 
SG_LIB_CAT_MALFORMED
;

291 
ªt
 = 0;

293  
ªt
;

294 
	}
}

301 
	$sg_sim∂e_öquúy
(
sg_fd
, 
sg_sim∂e_öquúy_ª•
 * 
öq_d©a
,

302 
noisy
, 
vîbo£
)

304 
ªs
, 
ªt
, 
k
, 
£n£_ˇt
;

305 
öqCmdBlk
[
INQUIRY_CMDLEN
] = {
INQUIRY_CMD
, 0, 0, 0, 0, 0};

306 
£n£_b
[
SENSE_BUFF_LEN
];

307 
öq_ª•
[
INQUIRY_RESP_INITIAL_LEN
];

308 
sg_±_ba£
 * 
±vp
;

310 i‡(
öq_d©a
) {

311 
	`mem£t
(
öq_d©a
, 0, (* inq_data));

312 
öq_d©a
->
≥rùhîÆ_quÆifõr
 = 0x3;

313 
öq_d©a
->
≥rùhîÆ_ty≥
 = 0x1f;

315 
öqCmdBlk
[4] = ()(
öq_ª•
);

316 i‡(
NULL
 =
sg_w¨nögs_°rm
)

317 
sg_w¨nögs_°rm
 = 
°dîr
;

318 i‡(
vîbo£
) {

319 
	`Ârötf
(
sg_w¨nögs_°rm
, " inquiry cdb: ");

320 
k
 = 0; k < 
INQUIRY_CMDLEN
; ++k)

321 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
öqCmdBlk
[
k
]);

322 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

324 
	`mem£t
(
öq_ª•
, 0, (inq_resp));

325 
öq_ª•
[0] = 0x7f;

326 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

327 i‡(
NULL
 =
±vp
) {

328 
	`Ârötf
(
sg_w¨nögs_°rm
, "inquiry: out of memory\n");

331 
	`£t_scsi_±_cdb
(
±vp
, 
öqCmdBlk
, (inqCmdBlk));

332 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

333 
	`£t_scsi_±_d©a_ö
(
±vp
, 
öq_ª•
, (inq_resp));

334 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

335 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "öquúy", 
ªs
, (
öq_ª•
),

336 
£n£_b
, 
noisy
, 
vîbo£
, &
£n£_ˇt
);

337 i‡(-1 =
ªt
)

339 i‡(-2 =
ªt
) {

340 
£n£_ˇt
) {

341 
SG_LIB_CAT_INVALID_OP
:

342 
SG_LIB_CAT_ILLEGAL_REQ
:

343 
SG_LIB_CAT_ABORTED_COMMAND
:

344 
ªt
 = 
£n£_ˇt
;

346 
SG_LIB_CAT_RECOVERED
:

347 
SG_LIB_CAT_NO_SENSE
:

348 
ªt
 = 0;

351 
ªt
 = -1;

354 } i‡(
ªt
 < 4) {

355 i‡(
vîbo£
)

356 
	`Ârötf
(
sg_w¨nögs_°rm
, "inquiry: gotÅoo few "

357 "byã†(%d)\n", 
ªt
);

358 
ªt
 = 
SG_LIB_CAT_MALFORMED
;

360 
ªt
 = 0;

362 i‡(0 =
ªt
) {

363 
öq_d©a
->
≥rùhîÆ_quÆifõr
 = (
öq_ª•
[0] >> 5) & 0x7;

364 
öq_d©a
->
≥rùhîÆ_ty≥
 = 
öq_ª•
[0] & 0x1f;

365 
öq_d©a
->
rmb
 = (
öq_ª•
[1] & 0x80) ? 1 : 0;

366 
öq_d©a
->
vîsi⁄
 = 
öq_ª•
[2];

367 
öq_d©a
->
byã_3
 = 
öq_ª•
[3];

368 
öq_d©a
->
byã_5
 = 
öq_ª•
[5];

369 
öq_d©a
->
byã_6
 = 
öq_ª•
[6];

370 
öq_d©a
->
byã_7
 = 
öq_ª•
[7];

371 
	`mem˝y
(
öq_d©a
->
víd‹
, 
öq_ª•
 + 8, 8);

372 
	`mem˝y
(
öq_d©a
->
¥odu˘
, 
öq_ª•
 + 16, 16);

373 
	`mem˝y
(
öq_d©a
->
ªvisi⁄
, 
öq_ª•
 + 32, 4);

375 
	`de°ru˘_scsi_±_obj
(
±vp
);

376  
ªt
;

377 
	}
}

387 
	$sg_Œ_ã°_unô_ªady_¥ogªss
(
sg_fd
, 
∑ck_id
, * 
¥ogªss
,

388 
noisy
, 
vîbo£
)

390 
ªs
, 
ªt
, 
k
, 
£n£_ˇt
;

391 
turCmdBlk
[
TUR_CMDLEN
] = {
TUR_CMD
, 0, 0, 0, 0, 0};

392 
£n£_b
[
SENSE_BUFF_LEN
];

393 
sg_±_ba£
 * 
±vp
;

395 i‡(
NULL
 =
sg_w¨nögs_°rm
)

396 
sg_w¨nögs_°rm
 = 
°dîr
;

397 i‡(
vîbo£
) {

398 
	`Ârötf
(
sg_w¨nögs_°rm
, "Åest unitÑeady cdb: ");

399 
k
 = 0; k < 
TUR_CMDLEN
; ++k)

400 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
turCmdBlk
[
k
]);

401 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

404 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

405 i‡(
NULL
 =
±vp
) {

406 
	`Ârötf
(
sg_w¨nögs_°rm
, "test unitÑeady: out of memory\n");

409 
	`£t_scsi_±_cdb
(
±vp
, 
turCmdBlk
, (turCmdBlk));

410 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

411 
	`£t_scsi_±_∑ckë_id
(
±vp
, 
∑ck_id
);

412 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

413 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "ã° unôÑódy", 
ªs
, 0, 
£n£_b
,

414 
noisy
, 
vîbo£
, &
£n£_ˇt
);

415 i‡(-1 =
ªt
)

417 i‡(-2 =
ªt
) {

418 i‡(
¥ogªss
) {

419 
¶í
 = 
	`gë_scsi_±_£n£_Àn
(
±vp
);

421 i‡(! 
	`sg_gë_£n£_¥ogªss_Êd
(
£n£_b
, 
¶í
, 
¥ogªss
))

422 *
¥ogªss
 = -1;

424 
£n£_ˇt
) {

425 
SG_LIB_CAT_UNIT_ATTENTION
:

426 
SG_LIB_CAT_NOT_READY
:

427 
SG_LIB_CAT_ABORTED_COMMAND
:

428 
ªt
 = 
£n£_ˇt
;

430 
SG_LIB_CAT_RECOVERED
:

431 
SG_LIB_CAT_NO_SENSE
:

432 
ªt
 = 0;

434 
SG_LIB_CAT_INVALID_OP
:

435 
SG_LIB_CAT_ILLEGAL_REQ
:

437 
ªt
 = -1;

441 
ªt
 = 0;

443 
	`de°ru˘_scsi_±_obj
(
±vp
);

444  
ªt
;

445 
	}
}

453 
	$sg_Œ_ã°_unô_ªady
(
sg_fd
, 
∑ck_id
, 
noisy
, 
vîbo£
)

455  
	`sg_Œ_ã°_unô_ªady_¥ogªss
(
sg_fd
, 
∑ck_id
, 
NULL
, 
noisy
,

456 
vîbo£
);

457 
	}
}

464 
	$sg_Œ_ªque°_£n£
(
sg_fd
, 
desc
, * 
ª•
, 
mx_ª•_Àn
,

465 
noisy
, 
vîbo£
)

467 
k
, 
ªt
, 
ªs
, 
£n£_ˇt
;

468 
rsCmdBlk
[
REQUEST_SENSE_CMDLEN
] =

469 {
REQUEST_SENSE_CMD
, 0, 0, 0, 0, 0};

470 
£n£_b
[
SENSE_BUFF_LEN
];

471 
sg_±_ba£
 * 
±vp
;

473 i‡(
desc
)

474 
rsCmdBlk
[1] |= 0x1;

475 i‡(
NULL
 =
sg_w¨nögs_°rm
)

476 
sg_w¨nögs_°rm
 = 
°dîr
;

477 i‡(
mx_ª•_Àn
 > 0xff) {

478 
	`Ârötf
(
sg_w¨nögs_°rm
, "mx_resp_len cannotÉxceed 255\n");

481 
rsCmdBlk
[4] = 
mx_ª•_Àn
 & 0xff;

482 i‡(
vîbo£
) {

483 
	`Ârötf
(
sg_w¨nögs_°rm
, " Request Sense cmd: ");

484 
k
 = 0; k < 
REQUEST_SENSE_CMDLEN
; ++k)

485 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
rsCmdBlk
[
k
]);

486 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

489 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

490 i‡(
NULL
 =
±vp
) {

491 
	`Ârötf
(
sg_w¨nögs_°rm
, "request sense: out of memory\n");

494 
	`£t_scsi_±_cdb
(
±vp
, 
rsCmdBlk
, (rsCmdBlk));

495 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

496 
	`£t_scsi_±_d©a_ö
(
±vp
, (*)
ª•
, 
mx_ª•_Àn
);

497 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

498 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "ªque° sí£", 
ªs
, 
mx_ª•_Àn
,

499 
£n£_b
, 
noisy
, 
vîbo£
, &
£n£_ˇt
);

500 i‡(-1 =
ªt
)

502 i‡(-2 =
ªt
) {

503 
£n£_ˇt
) {

504 
SG_LIB_CAT_INVALID_OP
:

505 
SG_LIB_CAT_ILLEGAL_REQ
:

506 
SG_LIB_CAT_ABORTED_COMMAND
:

507 
ªt
 = 
£n£_ˇt
;

509 
SG_LIB_CAT_RECOVERED
:

510 
SG_LIB_CAT_NO_SENSE
:

511 
ªt
 = 0;

513 
SG_LIB_CAT_NOT_READY
:

515 
ªt
 = -1;

519 i‡((
mx_ª•_Àn
 >8Ë&& (
ªt
 < 8)) {

520 i‡(
vîbo£
)

521 
	`Ârötf
(
sg_w¨nögs_°rm
, "Ñequest sense: got %d "

522 "byã†öÑe•⁄£,Åoÿsh‹t\n", 
ªt
);

523 
ªt
 = -1;

525 
ªt
 = 0;

527 
	`de°ru˘_scsi_±_obj
(
±vp
);

528  
ªt
;

529 
	}
}

537 
	$sg_Œ_ªp‹t_luns
(
sg_fd
, 
£À˘_ªp‹t
, * 
ª•
, 
mx_ª•_Àn
,

538 
noisy
, 
vîbo£
)

540 
k
, 
ªt
, 
ªs
, 
£n£_ˇt
;

541 
æCmdBlk
[
REPORT_LUNS_CMDLEN
] =

542 {
REPORT_LUNS_CMD
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

543 
£n£_b
[
SENSE_BUFF_LEN
];

544 
sg_±_ba£
 * 
±vp
;

546 
æCmdBlk
[2] = 
£À˘_ªp‹t
 & 0xff;

547 
æCmdBlk
[6] = (
mx_ª•_Àn
 >> 24) & 0xff;

548 
æCmdBlk
[7] = (
mx_ª•_Àn
 >> 16) & 0xff;

549 
æCmdBlk
[8] = (
mx_ª•_Àn
 >> 8) & 0xff;

550 
æCmdBlk
[9] = 
mx_ª•_Àn
 & 0xff;

551 i‡(
NULL
 =
sg_w¨nögs_°rm
)

552 
sg_w¨nögs_°rm
 = 
°dîr
;

553 i‡(
vîbo£
) {

554 
	`Ârötf
(
sg_w¨nögs_°rm
, "ÑeportÜuns cdb: ");

555 
k
 = 0; k < 
REPORT_LUNS_CMDLEN
; ++k)

556 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
æCmdBlk
[
k
]);

557 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

560 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

561 i‡(
NULL
 =
±vp
) {

562 
	`Ârötf
(
sg_w¨nögs_°rm
, "reportÜuns: out of memory\n");

565 
	`£t_scsi_±_cdb
(
±vp
, 
æCmdBlk
, (rlCmdBlk));

566 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

567 
	`£t_scsi_±_d©a_ö
(
±vp
, (*)
ª•
, 
mx_ª•_Àn
);

568 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

569 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "ªp‹àluns", 
ªs
, 
mx_ª•_Àn
,

570 
£n£_b
, 
noisy
, 
vîbo£
, &
£n£_ˇt
);

571 i‡(-1 =
ªt
)

573 i‡(-2 =
ªt
) {

574 
£n£_ˇt
) {

575 
SG_LIB_CAT_INVALID_OP
:

576 
SG_LIB_CAT_ILLEGAL_REQ
:

577 
SG_LIB_CAT_ABORTED_COMMAND
:

578 
SG_LIB_CAT_NOT_READY
:

579 
ªt
 = 
£n£_ˇt
;

581 
SG_LIB_CAT_RECOVERED
:

582 
SG_LIB_CAT_NO_SENSE
:

583 
ªt
 = 0;

586 
ªt
 = -1;

590 
ªt
 = 0;

591 
	`de°ru˘_scsi_±_obj
(
±vp
);

592  
ªt
;

593 
	}
}

	@lib/sg_cmds_basic2.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<°rög.h
>

20 
	~<uni°d.h
>

21 
	~"sg_lib.h
"

22 
	~"sg_cmds_basic.h
"

23 
	~"sg_±.h
"

25 #ifde‡
HAVE_CONFIG_H


26 
	~"c⁄fig.h
"

31 
	#SENSE_BUFF_LEN
 64

	)

32 
	#EBUFF_SZ
 256

	)

34 
	#DEF_PT_TIMEOUT
 60

	)

35 
	#START_PT_TIMEOUT
 120

	)

36 
	#LONG_PT_TIMEOUT
 7200

	)

38 
	#SYNCHRONIZE_CACHE_CMD
 0x35

	)

39 
	#SYNCHRONIZE_CACHE_CMDLEN
 10

	)

40 
	#SERVICE_ACTION_IN_16_CMD
 0x9e

	)

41 
	#SERVICE_ACTION_IN_16_CMDLEN
 16

	)

42 
	#READ_CAPACITY_16_SA
 0x10

	)

43 
	#READ_CAPACITY_10_CMD
 0x25

	)

44 
	#READ_CAPACITY_10_CMDLEN
 10

	)

45 
	#MODE_SENSE6_CMD
 0x1a

	)

46 
	#MODE_SENSE6_CMDLEN
 6

	)

47 
	#MODE_SENSE10_CMD
 0x5a

	)

48 
	#MODE_SENSE10_CMDLEN
 10

	)

49 
	#MODE_SELECT6_CMD
 0x15

	)

50 
	#MODE_SELECT6_CMDLEN
 6

	)

51 
	#MODE_SELECT10_CMD
 0x55

	)

52 
	#MODE_SELECT10_CMDLEN
 10

	)

53 
	#LOG_SENSE_CMD
 0x4d

	)

54 
	#LOG_SENSE_CMDLEN
 10

	)

55 
	#LOG_SELECT_CMD
 0x4c

	)

56 
	#LOG_SELECT_CMDLEN
 10

	)

57 
	#START_STOP_CMD
 0x1b

	)

58 
	#START_STOP_CMDLEN
 6

	)

59 
	#PREVENT_ALLOW_CMD
 0x1e

	)

60 
	#PREVENT_ALLOW_CMDLEN
 6

	)

62 
	#MODE6_RESP_HDR_LEN
 4

	)

63 
	#MODE10_RESP_HDR_LEN
 8

	)

64 
	#MODE_RESP_ARB_LEN
 1024

	)

66 
	#INQUIRY_RESP_INITIAL_LEN
 36

	)

75 
	$sg_Œ_sync_ˇche_10
(
sg_fd
, 
sync_nv
, 
immed
, 
group
,

76 
lba
, 
cou¡
, 
noisy
,

77 
vîbo£
)

79 
ªs
, 
ªt
, 
k
, 
£n£_ˇt
;

80 
scCmdBlk
[
SYNCHRONIZE_CACHE_CMDLEN
] =

81 {
SYNCHRONIZE_CACHE_CMD
, 0, 0, 0, 0, 0, 0, 0, 0, 0};

82 
£n£_b
[
SENSE_BUFF_LEN
];

83 
sg_±_ba£
 * 
±vp
;

85 i‡(
sync_nv
)

86 
scCmdBlk
[1] |= 4;

87 i‡(
immed
)

88 
scCmdBlk
[1] |= 2;

89 
scCmdBlk
[2] = (
lba
 >> 24) & 0xff;

90 
scCmdBlk
[3] = (
lba
 >> 16) & 0xff;

91 
scCmdBlk
[4] = (
lba
 >> 8) & 0xff;

92 
scCmdBlk
[5] = 
lba
 & 0xff;

93 
scCmdBlk
[6] = 
group
 & 0x1f;

94 i‡(
NULL
 =
sg_w¨nögs_°rm
)

95 
sg_w¨nögs_°rm
 = 
°dîr
;

96 i‡(
cou¡
 > 0xffff) {

97 
	`Ârötf
(
sg_w¨nögs_°rm
, "countÅoo big\n");

100 
scCmdBlk
[7] = (
cou¡
 >> 8) & 0xff;

101 
scCmdBlk
[8] = 
cou¡
 & 0xff;

103 i‡(
vîbo£
) {

104 
	`Ârötf
(
sg_w¨nögs_°rm
, " synchronize cache(10) cdb: ");

105 
k
 = 0; k < 
SYNCHRONIZE_CACHE_CMDLEN
; ++k)

106 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
scCmdBlk
[
k
]);

107 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

109 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

110 i‡(
NULL
 =
±vp
) {

111 
	`Ârötf
(
sg_w¨nögs_°rm
, "synchronize cache(10): out of memory\n");

114 
	`£t_scsi_±_cdb
(
±vp
, 
scCmdBlk
, (scCmdBlk));

115 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

116 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

117 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "synchr⁄izêˇche(10)", 
ªs
, 0,

118 
£n£_b
, 
noisy
, 
vîbo£
, &
£n£_ˇt
);

119 i‡(-1 =
ªt
)

121 i‡(-2 =
ªt
) {

122 
£n£_ˇt
) {

123 
SG_LIB_CAT_NOT_READY
:

124 
SG_LIB_CAT_UNIT_ATTENTION
:

125 
SG_LIB_CAT_INVALID_OP
:

126 
SG_LIB_CAT_ILLEGAL_REQ
:

127 
SG_LIB_CAT_ABORTED_COMMAND
:

128 
ªt
 = 
£n£_ˇt
;

130 
SG_LIB_CAT_RECOVERED
:

131 
SG_LIB_CAT_NO_SENSE
:

132 
ªt
 = 0;

135 
ªt
 = -1;

139 
ªt
 = 0;

141 
	`de°ru˘_scsi_±_obj
(
±vp
);

142  
ªt
;

143 
	}
}

151 
	$sg_Œ_ªadˇp_16
(
sg_fd
, 
pmi
, 
uöt64_t
 
Œba
, * 
ª•
,

152 
mx_ª•_Àn
, 
noisy
, 
vîbo£
)

154 
k
, 
ªt
, 
ªs
, 
£n£_ˇt
;

155 
rcCmdBlk
[
SERVICE_ACTION_IN_16_CMDLEN
] =

156 {
SERVICE_ACTION_IN_16_CMD
, 
READ_CAPACITY_16_SA
,

158 
£n£_b
[
SENSE_BUFF_LEN
];

159 
sg_±_ba£
 * 
±vp
;

161 i‡(
pmi
) {

162 
rcCmdBlk
[14] |= 1;

163 
rcCmdBlk
[2] = (
Œba
 >> 56) & 0xff;

164 
rcCmdBlk
[3] = (
Œba
 >> 48) & 0xff;

165 
rcCmdBlk
[4] = (
Œba
 >> 40) & 0xff;

166 
rcCmdBlk
[5] = (
Œba
 >> 32) & 0xff;

167 
rcCmdBlk
[6] = (
Œba
 >> 24) & 0xff;

168 
rcCmdBlk
[7] = (
Œba
 >> 16) & 0xff;

169 
rcCmdBlk
[8] = (
Œba
 >> 8) & 0xff;

170 
rcCmdBlk
[9] = 
Œba
 & 0xff;

173 
rcCmdBlk
[10] = (
mx_ª•_Àn
 >> 24) & 0xff;

174 
rcCmdBlk
[11] = (
mx_ª•_Àn
 >> 16) & 0xff;

175 
rcCmdBlk
[12] = (
mx_ª•_Àn
 >> 8) & 0xff;

176 
rcCmdBlk
[13] = 
mx_ª•_Àn
 & 0xff;

177 i‡(
NULL
 =
sg_w¨nögs_°rm
)

178 
sg_w¨nögs_°rm
 = 
°dîr
;

179 i‡(
vîbo£
) {

180 
	`Ârötf
(
sg_w¨nögs_°rm
, "Ñead capacity (16) cdb: ");

181 
k
 = 0; k < 
SERVICE_ACTION_IN_16_CMDLEN
; ++k)

182 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
rcCmdBlk
[
k
]);

183 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

185 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

186 i‡(
NULL
 =
±vp
) {

187 
	`Ârötf
(
sg_w¨nögs_°rm
, "read capacity (16): out of memory\n");

190 
	`£t_scsi_±_cdb
(
±vp
, 
rcCmdBlk
, (rcCmdBlk));

191 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

192 
	`£t_scsi_±_d©a_ö
(
±vp
, (*)
ª•
, 
mx_ª•_Àn
);

193 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

194 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "ªad c≠acôy (16)", 
ªs
, 
mx_ª•_Àn
,

195 
£n£_b
, 
noisy
, 
vîbo£
, &
£n£_ˇt
);

196 i‡(-1 =
ªt
)

198 i‡(-2 =
ªt
) {

199 
£n£_ˇt
) {

200 
SG_LIB_CAT_NOT_READY
:

201 
SG_LIB_CAT_UNIT_ATTENTION
:

202 
SG_LIB_CAT_INVALID_OP
:

203 
SG_LIB_CAT_ILLEGAL_REQ
:

204 
SG_LIB_CAT_ABORTED_COMMAND
:

205 
ªt
 = 
£n£_ˇt
;

207 
SG_LIB_CAT_RECOVERED
:

208 
SG_LIB_CAT_NO_SENSE
:

209 
ªt
 = 0;

212 
ªt
 = -1;

216 
ªt
 = 0;

218 
	`de°ru˘_scsi_±_obj
(
±vp
);

219  
ªt
;

220 
	}
}

228 
	$sg_Œ_ªadˇp_10
(
sg_fd
, 
pmi
, 
lba
, * 
ª•
,

229 
mx_ª•_Àn
, 
noisy
, 
vîbo£
)

231 
k
, 
ªt
, 
ªs
, 
£n£_ˇt
;

232 
rcCmdBlk
[
READ_CAPACITY_10_CMDLEN
] =

233 {
READ_CAPACITY_10_CMD
, 0, 0, 0, 0, 0, 0, 0, 0, 0};

234 
£n£_b
[
SENSE_BUFF_LEN
];

235 
sg_±_ba£
 * 
±vp
;

237 i‡(
pmi
) {

238 
rcCmdBlk
[8] |= 1;

239 
rcCmdBlk
[2] = (
lba
 >> 24) & 0xff;

240 
rcCmdBlk
[3] = (
lba
 >> 16) & 0xff;

241 
rcCmdBlk
[4] = (
lba
 >> 8) & 0xff;

242 
rcCmdBlk
[5] = 
lba
 & 0xff;

244 i‡(
NULL
 =
sg_w¨nögs_°rm
)

245 
sg_w¨nögs_°rm
 = 
°dîr
;

246 i‡(
vîbo£
) {

247 
	`Ârötf
(
sg_w¨nögs_°rm
, "Ñead capacity (10) cdb: ");

248 
k
 = 0; k < 
READ_CAPACITY_10_CMDLEN
; ++k)

249 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
rcCmdBlk
[
k
]);

250 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

252 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

253 i‡(
NULL
 =
±vp
) {

254 
	`Ârötf
(
sg_w¨nögs_°rm
, "read capacity (10): out of memory\n");

257 
	`£t_scsi_±_cdb
(
±vp
, 
rcCmdBlk
, (rcCmdBlk));

258 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

259 
	`£t_scsi_±_d©a_ö
(
±vp
, (*)
ª•
, 
mx_ª•_Àn
);

260 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

261 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "ªad c≠acôy (10)", 
ªs
, 
mx_ª•_Àn
,

262 
£n£_b
, 
noisy
, 
vîbo£
, &
£n£_ˇt
);

263 i‡(-1 =
ªt
)

265 i‡(-2 =
ªt
) {

266 
£n£_ˇt
) {

267 
SG_LIB_CAT_NOT_READY
:

268 
SG_LIB_CAT_UNIT_ATTENTION
:

269 
SG_LIB_CAT_INVALID_OP
:

270 
SG_LIB_CAT_ILLEGAL_REQ
:

271 
SG_LIB_CAT_ABORTED_COMMAND
:

272 
ªt
 = 
£n£_ˇt
;

274 
SG_LIB_CAT_RECOVERED
:

275 
SG_LIB_CAT_NO_SENSE
:

276 
ªt
 = 0;

279 
ªt
 = -1;

283 
ªt
 = 0;

285 
	`de°ru˘_scsi_±_obj
(
±vp
);

286  
ªt
;

287 
	}
}

295 
	$sg_Œ_mode_£n£6
(
sg_fd
, 
dbd
, 
pc
, 
pg_code
, 
sub_pg_code
,

296 * 
ª•
, 
mx_ª•_Àn
, 
noisy
, 
vîbo£
)

298 
ªs
, 
ªt
, 
k
, 
£n£_ˇt
;

299 
modesCmdBlk
[
MODE_SENSE6_CMDLEN
] =

300 {
MODE_SENSE6_CMD
, 0, 0, 0, 0, 0};

301 
£n£_b
[
SENSE_BUFF_LEN
];

302 
sg_±_ba£
 * 
±vp
;

304 
modesCmdBlk
[1] = ()(
dbd
 ? 0x8 : 0);

305 
modesCmdBlk
[2] = ()(((
pc
 << 6Ë& 0xc0Ë| (
pg_code
 & 0x3f));

306 
modesCmdBlk
[3] = ()(
sub_pg_code
 & 0xff);

307 
modesCmdBlk
[4] = ()(
mx_ª•_Àn
 & 0xff);

308 i‡(
NULL
 =
sg_w¨nögs_°rm
)

309 
sg_w¨nögs_°rm
 = 
°dîr
;

310 i‡(
mx_ª•_Àn
 > 0xff) {

311 
	`Ârötf
(
sg_w¨nögs_°rm
, "mx_resp_lenÅoo big\n");

314 i‡(
vîbo£
) {

315 
	`Ârötf
(
sg_w¨nögs_°rm
, " mode sense (6) cdb: ");

316 
k
 = 0; k < 
MODE_SENSE6_CMDLEN
; ++k)

317 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
modesCmdBlk
[
k
]);

318 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

320 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

321 i‡(
NULL
 =
±vp
) {

322 
	`Ârötf
(
sg_w¨nögs_°rm
, "mode sense (6): out of memory\n");

325 
	`£t_scsi_±_cdb
(
±vp
, 
modesCmdBlk
, (modesCmdBlk));

326 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

327 
	`£t_scsi_±_d©a_ö
(
±vp
, (*)
ª•
, 
mx_ª•_Àn
);

328 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

329 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "modê£n£ (6)", 
ªs
, 
mx_ª•_Àn
,

330 
£n£_b
, 
noisy
, 
vîbo£
, &
£n£_ˇt
);

331 i‡(-1 =
ªt
)

333 i‡(-2 =
ªt
) {

334 
£n£_ˇt
) {

335 
SG_LIB_CAT_NOT_READY
:

336 
SG_LIB_CAT_INVALID_OP
:

337 
SG_LIB_CAT_ILLEGAL_REQ
:

338 
SG_LIB_CAT_UNIT_ATTENTION
:

339 
SG_LIB_CAT_ABORTED_COMMAND
:

340 
ªt
 = 
£n£_ˇt
;

342 
SG_LIB_CAT_RECOVERED
:

343 
SG_LIB_CAT_NO_SENSE
:

344 
ªt
 = 0;

347 
ªt
 = -1;

351 i‡((
vîbo£
 > 2Ë&& (
ªt
 > 0)) {

352 
	`Ârötf
(
sg_w¨nögs_°rm
, " mode sense (6):Ñesponse%s\n",

353 (
ªt
 > 256 ? ", first 256 bytes" : ""));

354 
	`dSåHex
((c⁄° *)
ª•
, (
ªt
 > 256 ? 256 :Ñet), -1);

356 
ªt
 = 0;

358 
	`de°ru˘_scsi_±_obj
(
±vp
);

359  
ªt
;

360 
	}
}

368 
	$sg_Œ_mode_£n£10
(
sg_fd
, 
ŒbØ
, 
dbd
, 
pc
, 
pg_code
,

369 
sub_pg_code
, * 
ª•
, 
mx_ª•_Àn
,

370 
noisy
, 
vîbo£
)

372 
ªs
, 
ªt
, 
k
, 
£n£_ˇt
;

373 
modesCmdBlk
[
MODE_SENSE10_CMDLEN
] =

374 {
MODE_SENSE10_CMD
, 0, 0, 0, 0, 0, 0, 0, 0, 0};

375 
£n£_b
[
SENSE_BUFF_LEN
];

376 
sg_±_ba£
 * 
±vp
;

378 
modesCmdBlk
[1] = ()((
dbd
 ? 0x8 : 0Ë| (
ŒbØ
 ? 0x10 : 0));

379 
modesCmdBlk
[2] = ()(((
pc
 << 6Ë& 0xc0Ë| (
pg_code
 & 0x3f));

380 
modesCmdBlk
[3] = ()(
sub_pg_code
 & 0xff);

381 
modesCmdBlk
[7] = ()((
mx_ª•_Àn
 >> 8) & 0xff);

382 
modesCmdBlk
[8] = ()(
mx_ª•_Àn
 & 0xff);

383 i‡(
NULL
 =
sg_w¨nögs_°rm
)

384 
sg_w¨nögs_°rm
 = 
°dîr
;

385 i‡(
mx_ª•_Àn
 > 0xffff) {

386 
	`Ârötf
(
sg_w¨nögs_°rm
, "mx_resp_lenÅoo big\n");

389 i‡(
vîbo£
) {

390 
	`Ârötf
(
sg_w¨nögs_°rm
, " mode sense (10) cdb: ");

391 
k
 = 0; k < 
MODE_SENSE10_CMDLEN
; ++k)

392 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
modesCmdBlk
[
k
]);

393 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

395 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

396 i‡(
NULL
 =
±vp
) {

397 
	`Ârötf
(
sg_w¨nögs_°rm
, "mode sense (10): out of memory\n");

400 
	`£t_scsi_±_cdb
(
±vp
, 
modesCmdBlk
, (modesCmdBlk));

401 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

402 
	`£t_scsi_±_d©a_ö
(
±vp
, (*)
ª•
, 
mx_ª•_Àn
);

403 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

404 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "modê£n£ (10)", 
ªs
, 
mx_ª•_Àn
,

405 
£n£_b
, 
noisy
, 
vîbo£
, &
£n£_ˇt
);

406 i‡(-1 =
ªt
)

408 i‡(-2 =
ªt
) {

409 
£n£_ˇt
) {

410 
SG_LIB_CAT_NOT_READY
:

411 
SG_LIB_CAT_INVALID_OP
:

412 
SG_LIB_CAT_ILLEGAL_REQ
:

413 
SG_LIB_CAT_UNIT_ATTENTION
:

414 
SG_LIB_CAT_ABORTED_COMMAND
:

415 
ªt
 = 
£n£_ˇt
;

417 
SG_LIB_CAT_RECOVERED
:

418 
SG_LIB_CAT_NO_SENSE
:

419 
ªt
 = 0;

422 
ªt
 = -1;

426 i‡((
vîbo£
 > 2Ë&& (
ªt
 > 0)) {

427 
	`Ârötf
(
sg_w¨nögs_°rm
, " mode sense (10):Ñesponse%s\n",

428 (
ªt
 > 256 ? ", first 256 bytes" : ""));

429 
	`dSåHex
((c⁄° *)
ª•
, (
ªt
 > 256 ? 256 :Ñet), -1);

431 
ªt
 = 0;

433 
	`de°ru˘_scsi_±_obj
(
±vp
);

434  
ªt
;

435 
	}
}

443 
	$sg_Œ_mode_£À˘6
(
sg_fd
, 
pf
, 
•
, * 
∑ømp
, 
∑øm_Àn
,

444 
noisy
, 
vîbo£
)

446 
ªs
, 
ªt
, 
k
, 
£n£_ˇt
;

447 
modesCmdBlk
[
MODE_SELECT6_CMDLEN
] =

448 {
MODE_SELECT6_CMD
, 0, 0, 0, 0, 0};

449 
£n£_b
[
SENSE_BUFF_LEN
];

450 
sg_±_ba£
 * 
±vp
;

452 
modesCmdBlk
[1] = ()(((
pf
 << 4Ë& 0x10Ë| (
•
 & 0x1));

453 
modesCmdBlk
[4] = ()(
∑øm_Àn
 & 0xff);

454 i‡(
NULL
 =
sg_w¨nögs_°rm
)

455 
sg_w¨nögs_°rm
 = 
°dîr
;

456 i‡(
∑øm_Àn
 > 0xff) {

457 
	`Ârötf
(
sg_w¨nögs_°rm
, "mode select (6):Öaram_lenÅoo big\n");

460 i‡(
vîbo£
) {

461 
	`Ârötf
(
sg_w¨nögs_°rm
, " mode select (6) cdb: ");

462 
k
 = 0; k < 
MODE_SELECT6_CMDLEN
; ++k)

463 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
modesCmdBlk
[
k
]);

464 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

466 i‡(
vîbo£
 > 1) {

467 
	`Ârötf
(
sg_w¨nögs_°rm
, " mode select (6)ÖarameterÜist\n");

468 
	`dSåHex
((c⁄° *)
∑ømp
, 
∑øm_Àn
, -1);

471 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

472 i‡(
NULL
 =
±vp
) {

473 
	`Ârötf
(
sg_w¨nögs_°rm
, "mode select (6): out of memory\n");

476 
	`£t_scsi_±_cdb
(
±vp
, 
modesCmdBlk
, (modesCmdBlk));

477 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

478 
	`£t_scsi_±_d©a_out
(
±vp
, (*)
∑ømp
, 
∑øm_Àn
);

479 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

480 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "modê£À˘ (6)", 
ªs
, 0, 
£n£_b
,

481 
noisy
, 
vîbo£
, &
£n£_ˇt
);

482 i‡(-1 =
ªt
)

484 i‡(-2 =
ªt
) {

485 
£n£_ˇt
) {

486 
SG_LIB_CAT_NOT_READY
:

487 
SG_LIB_CAT_INVALID_OP
:

488 
SG_LIB_CAT_ILLEGAL_REQ
:

489 
SG_LIB_CAT_UNIT_ATTENTION
:

490 
SG_LIB_CAT_ABORTED_COMMAND
:

491 
ªt
 = 
£n£_ˇt
;

493 
SG_LIB_CAT_RECOVERED
:

494 
SG_LIB_CAT_NO_SENSE
:

495 
ªt
 = 0;

498 
ªt
 = -1;

502 
ªt
 = 0;

504 
	`de°ru˘_scsi_±_obj
(
±vp
);

505  
ªt
;

506 
	}
}

514 
	$sg_Œ_mode_£À˘10
(
sg_fd
, 
pf
, 
•
, * 
∑ømp
, 
∑øm_Àn
,

515 
noisy
, 
vîbo£
)

517 
ªs
, 
ªt
, 
k
, 
£n£_ˇt
;

518 
modesCmdBlk
[
MODE_SELECT10_CMDLEN
] =

519 {
MODE_SELECT10_CMD
, 0, 0, 0, 0, 0, 0, 0, 0, 0};

520 
£n£_b
[
SENSE_BUFF_LEN
];

521 
sg_±_ba£
 * 
±vp
;

523 
modesCmdBlk
[1] = ()(((
pf
 << 4Ë& 0x10Ë| (
•
 & 0x1));

524 
modesCmdBlk
[7] = ()((
∑øm_Àn
 >> 8) & 0xff);

525 
modesCmdBlk
[8] = ()(
∑øm_Àn
 & 0xff);

526 i‡(
NULL
 =
sg_w¨nögs_°rm
)

527 
sg_w¨nögs_°rm
 = 
°dîr
;

528 i‡(
∑øm_Àn
 > 0xffff) {

529 
	`Ârötf
(
sg_w¨nögs_°rm
, "mode select (10):Öaram_lenÅoo big\n");

532 i‡(
vîbo£
) {

533 
	`Ârötf
(
sg_w¨nögs_°rm
, " mode select (10) cdb: ");

534 
k
 = 0; k < 
MODE_SELECT10_CMDLEN
; ++k)

535 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
modesCmdBlk
[
k
]);

536 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

538 i‡(
vîbo£
 > 1) {

539 
	`Ârötf
(
sg_w¨nögs_°rm
, " mode select (10)ÖarameterÜist\n");

540 
	`dSåHex
((c⁄° *)
∑ømp
, 
∑øm_Àn
, -1);

543 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

544 i‡(
NULL
 =
±vp
) {

545 
	`Ârötf
(
sg_w¨nögs_°rm
, "mode select (10): out of memory\n");

548 
	`£t_scsi_±_cdb
(
±vp
, 
modesCmdBlk
, (modesCmdBlk));

549 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

550 
	`£t_scsi_±_d©a_out
(
±vp
, (*)
∑ømp
, 
∑øm_Àn
);

551 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

552 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "modê£À˘ (10)", 
ªs
, 0, 
£n£_b
,

553 
noisy
, 
vîbo£
, &
£n£_ˇt
);

554 i‡(-1 =
ªt
)

556 i‡(-2 =
ªt
) {

557 
£n£_ˇt
) {

558 
SG_LIB_CAT_NOT_READY
:

559 
SG_LIB_CAT_INVALID_OP
:

560 
SG_LIB_CAT_ILLEGAL_REQ
:

561 
SG_LIB_CAT_UNIT_ATTENTION
:

562 
SG_LIB_CAT_ABORTED_COMMAND
:

563 
ªt
 = 
£n£_ˇt
;

565 
SG_LIB_CAT_RECOVERED
:

566 
SG_LIB_CAT_NO_SENSE
:

567 
ªt
 = 0;

570 
ªt
 = -1;

574 
ªt
 = 0;

576 
	`de°ru˘_scsi_±_obj
(
±vp
);

577  
ªt
;

578 
	}
}

587 
	$sg_mode_∑ge_off£t
(c⁄° * 
ª•
, 
ª•_Àn
,

588 
mode_£n£_6
, * 
îr_buff
, 
îr_buff_Àn
)

590 
bd_Àn
;

591 
ˇlc_Àn
;

592 
off£t
;

594 i‡((
NULL
 =
ª•
Ë|| (
ª•_Àn
 < 4) ||

595 ((! 
mode_£n£_6
Ë&& (
ª•_Àn
 < 8))) {

596 i‡(
îr_buff_Àn
 > 0)

597 
	`¢¥ötf
(
îr_buff
, 
îr_buff_Àn
, "givenÑesponseÜengthÅoo "

598 "sh‹t: %d\n", 
ª•_Àn
);

601 i‡(
mode_£n£_6
) {

602 
ˇlc_Àn
 = 
ª•
[0] + 1;

603 
bd_Àn
 = 
ª•
[3];

604 
off£t
 = 
bd_Àn
 + 
MODE6_RESP_HDR_LEN
;

606 
ˇlc_Àn
 = (
ª•
[0] << 8) +Ñesp[1] + 2;

607 
bd_Àn
 = (
ª•
[6] << 8) +Ñesp[7];

609 
off£t
 = 
bd_Àn
 + 
MODE10_RESP_HDR_LEN
;

611 i‡((
off£t
 + 2Ë> 
ª•_Àn
) {

612 i‡(
îr_buff_Àn
 > 0)

613 
	`¢¥ötf
(
îr_buff
, 
îr_buff_Àn
, "givenÑesponseÜength "

615 
off£t
, 
ª•_Àn
, 
bd_Àn
);

616 
off£t
 = -1;

617 } i‡((
off£t
 + 2Ë> 
ˇlc_Àn
) {

618 i‡(
îr_buff_Àn
 > 0)

619 
	`¢¥ötf
(
îr_buff
, 
îr_buff_Àn
, "calculatedÑesponse "

621 
off£t
, 
ˇlc_Àn
, 
bd_Àn
);

622 
off£t
 = -1;

624  
off£t
;

625 
	}
}

645 
	$sg_gë_mode_∑ge_c⁄åﬁs
(
sg_fd
, 
mode6
, 
pg_code
, 
sub_pg_code
,

646 
dbd
, 
ÊexibÀ
, 
mx_m∑ge_Àn
,

647 * 
suc˚ss_mask
, * 
pc⁄åﬁ_¨r
[],

648 * 
ªp‹ãd_Àn
, 
vîbo£
)

650 
k
, 
n
, 
ªs
, 
off£t
, 
ˇlc_Àn
, 
x„r_Àn
, 
ª•_mode6
;

651 
buff
[
MODE_RESP_ARB_LEN
];

652 
ebuff
[
EBUFF_SZ
];

653 
fú°_îr
 = 0;

655 i‡(
suc˚ss_mask
)

656 *
suc˚ss_mask
 = 0;

657 i‡(
ªp‹ãd_Àn
)

658 *
ªp‹ãd_Àn
 = 0;

659 i‡(
mx_m∑ge_Àn
 < 4)

661 i‡(
NULL
 =
sg_w¨nögs_°rm
)

662 
sg_w¨nögs_°rm
 = 
°dîr
;

663 
	`mem£t
(
ebuff
, 0, (ebuff));

665 
	`mem£t
(
buff
, 0, 
MODE10_RESP_HDR_LEN
);

666 i‡(
mode6
)

667 
ªs
 = 
	`sg_Œ_mode_£n£6
(
sg_fd
, 
dbd
, 0 , 
pg_code
,

668 
sub_pg_code
, 
buff
, 
MODE10_RESP_HDR_LEN
, 1,

669 
vîbo£
);

671 
ªs
 = 
	`sg_Œ_mode_£n£10
(
sg_fd
, 0 , 
dbd
,

672 0 , 
pg_code
, 
sub_pg_code
, 
buff
,

673 
MODE10_RESP_HDR_LEN
, 1, 
vîbo£
);

674 i‡(0 !
ªs
)

675  
ªs
;

676 
n
 = 
buff
[0];

677 i‡(
ªp‹ãd_Àn
)

678 *
ªp‹ãd_Àn
 = 
mode6
 ? (
n
 + 1Ë: (“ << 8Ë+ 
buff
[1] + 2);

679 
ª•_mode6
 = 
mode6
;

680 i‡(
ÊexibÀ
) {

681 i‡(
mode6
 && (
n
 < 3)) {

682 
ª•_mode6
 = 0;

683 i‡(
vîbo£
)

684 
	`Ârötf
(
sg_w¨nögs_°rm
, ">>> msense(6) butÑesp[0]=%d so "

685 "åy m£n£(10Ëª•⁄£Öro˚ssög\n", 
n
);

687 i‡((0 =
mode6
Ë&& (
n
 > 5)) {

688 i‡((
n
 > 11Ë&& (0 =“ % 2)Ë&& (0 =
buff
[4]) &&

689 (0 =
buff
[5]) && (0 == buff[6])) {

690 
buff
[1] = 
n
;

691 
buff
[0] = 0;

692 i‡(
vîbo£
)

693 
	`Ârötf
(
sg_w¨nögs_°rm
, ">>> msense(10) butÑesp[0]=%d "

694 "™dÇŸ m£n£(6Ëª•⁄£ sÿfixÜígth\n", 
n
);

696 
ª•_mode6
 = 1;

699 i‡(
vîbo£
 && (
ª•_mode6
 !
mode6
))

700 
	`Ârötf
(
sg_w¨nögs_°rm
, ">>> msense(%d) butÑesp[0]=%d "

701 "sÿswôchÑe•⁄£Öro˚ssög\n", (
mode6
 ? 6 : 10),

702 
buff
[0]);

703 
ˇlc_Àn
 = 
ª•_mode6
 ? (
buff
[0] + 1) : ((buff[0] << 8) + buff[1] + 2);

704 i‡(
ˇlc_Àn
 > 
MODE_RESP_ARB_LEN
)

705 
ˇlc_Àn
 = 
MODE_RESP_ARB_LEN
;

706 
off£t
 = 
	`sg_mode_∑ge_off£t
(
buff
, 
ˇlc_Àn
, 
ª•_mode6
,

707 
ebuff
, 
EBUFF_SZ
);

708 i‡(
off£t
 < 0) {

709 i‡(('\0' !
ebuff
[0]Ë&& (
vîbo£
 > 0))

710 
	`Ârötf
(
sg_w¨nögs_°rm
, "sg_get_mode_page_controls: %s\n",

711 
ebuff
);

712  
SG_LIB_CAT_MALFORMED
;

714 
x„r_Àn
 = 
ˇlc_Àn
 - 
off£t
;

715 i‡(
x„r_Àn
 > 
mx_m∑ge_Àn
)

716 
x„r_Àn
 = 
mx_m∑ge_Àn
;

718 
k
 = 0; k < 4; ++k) {

719 i‡(
NULL
 =
pc⁄åﬁ_¨r
[
k
])

721 
	`mem£t
(
pc⁄åﬁ_¨r
[
k
], 0, 
mx_m∑ge_Àn
);

722 i‡(
mode6
)

723 
ªs
 = 
	`sg_Œ_mode_£n£6
(
sg_fd
, 
dbd
, 
k
 ,

724 
pg_code
, 
sub_pg_code
, 
buff
,

725 
ˇlc_Àn
, 1, 
vîbo£
);

727 
ªs
 = 
	`sg_Œ_mode_£n£10
(
sg_fd
, 0 , 
dbd
,

728 
k
 , 
pg_code
, 
sub_pg_code
,

729 
buff
, 
ˇlc_Àn
, 1, 
vîbo£
);

730 i‡(0 !
ªs
) {

731 i‡(0 =
fú°_îr
)

732 
fú°_îr
 = 
ªs
;

733 i‡(0 =
k
)

738 i‡(
x„r_Àn
 > 0)

739 
	`mem˝y
(
pc⁄åﬁ_¨r
[
k
], 
buff
 + 
off£t
, 
x„r_Àn
);

740 i‡(
suc˚ss_mask
)

741 *
suc˚ss_mask
 |(1 << 
k
);

743  
fú°_îr
;

744 
	}
}

752 
	$sg_Œ_log_£n£
(
sg_fd
, 
µc
, 
•
, 
pc
, 
pg_code
,

753 
subpg_code
, 
∑ømp
, * 
ª•
,

754 
mx_ª•_Àn
, 
noisy
, 
vîbo£
)

756 
ªs
, 
ªt
, 
k
, 
£n£_ˇt
;

757 
logsCmdBlk
[
LOG_SENSE_CMDLEN
] =

758 {
LOG_SENSE_CMD
, 0, 0, 0, 0, 0, 0, 0, 0, 0};

759 
£n£_b
[
SENSE_BUFF_LEN
];

760 
sg_±_ba£
 * 
±vp
;

762 i‡(
NULL
 =
sg_w¨nögs_°rm
)

763 
sg_w¨nögs_°rm
 = 
°dîr
;

764 i‡(
mx_ª•_Àn
 > 0xffff) {

765 
	`Ârötf
(
sg_w¨nögs_°rm
, "mx_resp_lenÅoo big\n");

768 
logsCmdBlk
[1] = ()((
µc
 ? 2 : 0Ë| (
•
 ? 1 : 0));

769 
logsCmdBlk
[2] = ()(((
pc
 << 6Ë& 0xc0Ë| (
pg_code
 & 0x3f));

770 
logsCmdBlk
[3] = ()(
subpg_code
 & 0xff);

771 
logsCmdBlk
[5] = ()((
∑ømp
 >> 8) & 0xff);

772 
logsCmdBlk
[6] = ()(
∑ømp
 & 0xff);

773 
logsCmdBlk
[7] = ()((
mx_ª•_Àn
 >> 8) & 0xff);

774 
logsCmdBlk
[8] = ()(
mx_ª•_Àn
 & 0xff);

775 i‡(
vîbo£
) {

776 
	`Ârötf
(
sg_w¨nögs_°rm
, "Üog sense cdb: ");

777 
k
 = 0; k < 
LOG_SENSE_CMDLEN
; ++k)

778 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
logsCmdBlk
[
k
]);

779 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

782 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

783 i‡(
NULL
 =
±vp
) {

784 
	`Ârötf
(
sg_w¨nögs_°rm
, "log sense: out of memory\n");

787 
	`£t_scsi_±_cdb
(
±vp
, 
logsCmdBlk
, (logsCmdBlk));

788 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

789 
	`£t_scsi_±_d©a_ö
(
±vp
, 
ª•
, 
mx_ª•_Àn
);

790 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

791 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "log sí£", 
ªs
, 
mx_ª•_Àn
,

792 
£n£_b
, 
noisy
, 
vîbo£
, &
£n£_ˇt
);

793 i‡(-1 =
ªt
)

795 i‡(-2 =
ªt
) {

796 
£n£_ˇt
) {

797 
SG_LIB_CAT_NOT_READY
:

798 
SG_LIB_CAT_INVALID_OP
:

799 
SG_LIB_CAT_ILLEGAL_REQ
:

800 
SG_LIB_CAT_UNIT_ATTENTION
:

801 
SG_LIB_CAT_ABORTED_COMMAND
:

802 
ªt
 = 
£n£_ˇt
;

804 
SG_LIB_CAT_RECOVERED
:

805 
SG_LIB_CAT_NO_SENSE
:

806 
ªt
 = 0;

809 
ªt
 = -1;

813 i‡((
mx_ª•_Àn
 > 3Ë&& (
ªt
 < 4)) {

815 
ª•
[2] = 0;

816 
ª•
[3] = 0;

818 
ªt
 = 0;

820 
	`de°ru˘_scsi_±_obj
(
±vp
);

821  
ªt
;

822 
	}
}

830 
	$sg_Œ_log_£À˘
(
sg_fd
, 
p¸
, 
•
, 
pc
, 
pg_code
,

831 
subpg_code
, * 
∑ømp
, 
∑øm_Àn
,

832 
noisy
, 
vîbo£
)

834 
ªs
, 
ªt
, 
k
, 
£n£_ˇt
;

835 
logsCmdBlk
[
LOG_SELECT_CMDLEN
] =

836 {
LOG_SELECT_CMD
, 0, 0, 0, 0, 0, 0, 0, 0, 0};

837 
£n£_b
[
SENSE_BUFF_LEN
];

838 
sg_±_ba£
 * 
±vp
;

840 i‡(
NULL
 =
sg_w¨nögs_°rm
)

841 
sg_w¨nögs_°rm
 = 
°dîr
;

842 i‡(
∑øm_Àn
 > 0xffff) {

843 
	`Ârötf
(
sg_w¨nögs_°rm
, "log select:Öaram_lenÅoo big\n");

846 
logsCmdBlk
[1] = ()((
p¸
 ? 2 : 0Ë| (
•
 ? 1 : 0));

847 
logsCmdBlk
[2] = ()(((
pc
 << 6Ë& 0xc0Ë| (
pg_code
 & 0x3f));

848 
logsCmdBlk
[3] = ()(
subpg_code
 & 0xff);

849 
logsCmdBlk
[7] = ()((
∑øm_Àn
 >> 8) & 0xff);

850 
logsCmdBlk
[8] = ()(
∑øm_Àn
 & 0xff);

851 i‡(
vîbo£
) {

852 
	`Ârötf
(
sg_w¨nögs_°rm
, "Üog select cdb: ");

853 
k
 = 0; k < 
LOG_SELECT_CMDLEN
; ++k)

854 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
logsCmdBlk
[
k
]);

855 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

857 i‡((
vîbo£
 > 1Ë&& (
∑øm_Àn
 > 0)) {

858 
	`Ârötf
(
sg_w¨nögs_°rm
, "Üog selectÖarameterÜist\n");

859 
	`dSåHex
((c⁄° *)
∑ømp
, 
∑øm_Àn
, -1);

862 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

863 i‡(
NULL
 =
±vp
) {

864 
	`Ârötf
(
sg_w¨nögs_°rm
, "log select: out of memory\n");

867 
	`£t_scsi_±_cdb
(
±vp
, 
logsCmdBlk
, (logsCmdBlk));

868 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

869 
	`£t_scsi_±_d©a_out
(
±vp
, 
∑ømp
, 
∑øm_Àn
);

870 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

871 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "log sñe˘", 
ªs
, 0, 
£n£_b
,

872 
noisy
, 
vîbo£
, &
£n£_ˇt
);

873 i‡(-1 =
ªt
)

875 i‡(-2 =
ªt
) {

876 
£n£_ˇt
) {

877 
SG_LIB_CAT_NOT_READY
:

878 
SG_LIB_CAT_INVALID_OP
:

879 
SG_LIB_CAT_ILLEGAL_REQ
:

880 
SG_LIB_CAT_UNIT_ATTENTION
:

881 
SG_LIB_CAT_ABORTED_COMMAND
:

882 
ªt
 = 
£n£_ˇt
;

884 
SG_LIB_CAT_RECOVERED
:

885 
SG_LIB_CAT_NO_SENSE
:

886 
ªt
 = 0;

889 
ªt
 = -1;

893 
ªt
 = 0;

895 
	`de°ru˘_scsi_±_obj
(
±vp
);

896  
ªt
;

897 
	}
}

911 
	$sg_Œ_°¨t_°›_unô
(
sg_fd
, 
immed
, 
pc_mod__Ê_num
,

912 
powî_c⁄d
, 
noÊush__Ê
, 
l€j
, 
°¨t
,

913 
noisy
, 
vîbo£
)

915 
ssuBlk
[
START_STOP_CMDLEN
] = {
START_STOP_CMD
, 0, 0, 0, 0, 0};

916 
£n£_b
[
SENSE_BUFF_LEN
];

917 
k
, 
ªs
, 
ªt
, 
£n£_ˇt
;

918 
sg_±_ba£
 * 
±vp
;

920 
ssuBlk
[1] = 
immed
 & 1;

921 
ssuBlk
[3] = 
pc_mod__Ê_num
 & 0xf;

922 
ssuBlk
[4] = ((
powî_c⁄d
 & 0xfË<< 4Ë| (
noÊush__Ê
 ? 0x4 : 0) |

923 (
l€j
 ? 0x2 : 0Ë| (
°¨t
 ? 0x1 : 0);

924 i‡(
NULL
 =
sg_w¨nögs_°rm
)

925 
sg_w¨nögs_°rm
 = 
°dîr
;

926 i‡(
vîbo£
) {

927 
	`Ârötf
(
sg_w¨nögs_°rm
, " Start stop unit command:");

928 
k
 = 0; k < ()(
ssuBlk
); ++k)

929 
	`Ârötf
 (
sg_w¨nögs_°rm
, " %02x", 
ssuBlk
[
k
]);

930 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

933 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

934 i‡(
NULL
 =
±vp
) {

935 
	`Ârötf
(
sg_w¨nögs_°rm
, "start stop unit: out of memory\n");

938 
	`£t_scsi_±_cdb
(
±vp
, 
ssuBlk
, (ssuBlk));

939 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

940 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
START_PT_TIMEOUT
, 
vîbo£
);

941 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "°¨à°› unô", 
ªs
, 0,

942 
£n£_b
, 
noisy
, 
vîbo£
, &
£n£_ˇt
);

943 i‡(-1 =
ªt
)

945 i‡(-2 =
ªt
) {

946 
£n£_ˇt
) {

947 
SG_LIB_CAT_NOT_READY
:

948 
SG_LIB_CAT_INVALID_OP
:

949 
SG_LIB_CAT_ILLEGAL_REQ
:

950 
SG_LIB_CAT_UNIT_ATTENTION
:

951 
SG_LIB_CAT_ABORTED_COMMAND
:

952 
ªt
 = 
£n£_ˇt
;

954 
SG_LIB_CAT_RECOVERED
:

955 
SG_LIB_CAT_NO_SENSE
:

956 
ªt
 = 0;

959 
ªt
 = -1;

963 
ªt
 = 0;

964 
	`de°ru˘_scsi_±_obj
(
±vp
);

965  
ªt
;

966 
	}
}

977 
	$sg_Œ_¥evít_Ælow
(
sg_fd
, 
¥evít
, 
noisy
, 
vîbo£
)

979 
k
, 
ªs
, 
ªt
, 
£n£_ˇt
;

980 
pCmdBlk
[
PREVENT_ALLOW_CMDLEN
] =

981 {
PREVENT_ALLOW_CMD
, 0, 0, 0, 0, 0};

982 
£n£_b
[
SENSE_BUFF_LEN
];

983 
sg_±_ba£
 * 
±vp
;

985 i‡(
NULL
 =
sg_w¨nögs_°rm
)

986 
sg_w¨nögs_°rm
 = 
°dîr
;

987 i‡((
¥evít
 < 0) || (prevent > 3)) {

988 
	`Ârötf
(
sg_w¨nögs_°rm
, "preventárgument should be 0, 1, 2 or 3\n");

991 
pCmdBlk
[4] |(
¥evít
 & 0x3);

992 i‡(
vîbo£
) {

993 
	`Ârötf
(
sg_w¨nögs_°rm
, " Preventállow mediumÑemoval cdb: ");

994 
k
 = 0; k < 
PREVENT_ALLOW_CMDLEN
; ++k)

995 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
pCmdBlk
[
k
]);

996 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

999 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

1000 i‡(
NULL
 =
±vp
) {

1001 
	`Ârötf
(
sg_w¨nögs_°rm
, "preventállow mediumÑemoval: out of "

1005 
	`£t_scsi_±_cdb
(
±vp
, 
pCmdBlk
, (pCmdBlk));

1006 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

1007 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

1008 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "¥evíàÆlow mediumÑemovÆ", 
ªs
, 0,

1009 
£n£_b
, 
noisy
, 
vîbo£
, &
£n£_ˇt
);

1010 i‡(-1 =
ªt
)

1012 i‡(-2 =
ªt
) {

1013 
£n£_ˇt
) {

1014 
SG_LIB_CAT_NOT_READY
:

1015 
SG_LIB_CAT_INVALID_OP
:

1016 
SG_LIB_CAT_ILLEGAL_REQ
:

1017 
SG_LIB_CAT_UNIT_ATTENTION
:

1018 
SG_LIB_CAT_ABORTED_COMMAND
:

1019 
ªt
 = 
£n£_ˇt
;

1021 
SG_LIB_CAT_RECOVERED
:

1022 
SG_LIB_CAT_NO_SENSE
:

1023 
ªt
 = 0;

1026 
ªt
 = -1;

1030 
ªt
 = 0;

1031 
	`de°ru˘_scsi_±_obj
(
±vp
);

1032  
ªt
;

1033 
	}
}

	@lib/sg_cmds_extra.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~<uni°d.h
>

12 
	#__STDC_FORMAT_MACROS
 1

	)

13 
	~<öây≥s.h
>

15 
	~"sg_lib.h
"

16 
	~"sg_cmds_basic.h
"

17 
	~"sg_cmds_exåa.h
"

18 
	~"sg_±.h
"

20 #ifde‡
HAVE_CONFIG_H


21 
	~"c⁄fig.h
"

25 
	#SENSE_BUFF_LEN
 64

	)

27 
	#DEF_PT_TIMEOUT
 60

	)

28 
	#LONG_PT_TIMEOUT
 7200

	)

30 
	#SERVICE_ACTION_IN_16_CMD
 0x9e

	)

31 
	#SERVICE_ACTION_IN_16_CMDLEN
 16

	)

32 
	#SERVICE_ACTION_OUT_16_CMD
 0x9f

	)

33 
	#SERVICE_ACTION_OUT_16_CMDLEN
 16

	)

34 
	#MAINTENANCE_IN_CMD
 0xa3

	)

35 
	#MAINTENANCE_IN_CMDLEN
 12

	)

36 
	#MAINTENANCE_OUT_CMD
 0xa4

	)

37 
	#MAINTENANCE_OUT_CMDLEN
 12

	)

39 
	#ATA_PT_12_CMD
 0xa1

	)

40 
	#ATA_PT_12_CMDLEN
 12

	)

41 
	#ATA_PT_16_CMD
 0x85

	)

42 
	#ATA_PT_16_CMDLEN
 16

	)

43 
	#FORMAT_UNIT_CMD
 0x4

	)

44 
	#FORMAT_UNIT_CMDLEN
 6

	)

45 
	#PERSISTENT_RESERVE_IN_CMD
 0x5e

	)

46 
	#PERSISTENT_RESERVE_IN_CMDLEN
 10

	)

47 
	#PERSISTENT_RESERVE_OUT_CMD
 0x5f

	)

48 
	#PERSISTENT_RESERVE_OUT_CMDLEN
 10

	)

49 
	#READ_BLOCK_LIMITS_CMD
 0x5

	)

50 
	#READ_BLOCK_LIMITS_CMDLEN
 6

	)

51 
	#READ_BUFFER_CMD
 0x3c

	)

52 
	#READ_BUFFER_CMDLEN
 10

	)

53 
	#READ_DEFECT10_CMD
 0x37

	)

54 
	#READ_DEFECT10_CMDLEN
 10

	)

55 
	#REASSIGN_BLKS_CMD
 0x7

	)

56 
	#REASSIGN_BLKS_CMDLEN
 6

	)

57 
	#RECEIVE_DIAGNOSTICS_CMD
 0x1c

	)

58 
	#RECEIVE_DIAGNOSTICS_CMDLEN
 6

	)

59 
	#EXTENDED_COPY_CMD
 0x83

	)

60 
	#EXTENDED_COPY_CMDLEN
 16

	)

61 
	#RECEIVE_COPY_RESULTS_CMD
 0x84

	)

62 
	#RECEIVE_COPY_RESULTS_CMDLEN
 16

	)

63 
	#SEND_DIAGNOSTIC_CMD
 0x1d

	)

64 
	#SEND_DIAGNOSTIC_CMDLEN
 6

	)

65 
	#SERVICE_ACTION_IN_12_CMD
 0xab

	)

66 
	#SERVICE_ACTION_IN_12_CMDLEN
 12

	)

67 
	#READ_LONG10_CMD
 0x3e

	)

68 
	#READ_LONG10_CMDLEN
 10

	)

69 
	#UNMAP_CMD
 0x42

	)

70 
	#UNMAP_CMDLEN
 10

	)

71 
	#VERIFY10_CMD
 0x2f

	)

72 
	#VERIFY10_CMDLEN
 10

	)

73 
	#VERIFY16_CMD
 0x8f

	)

74 
	#VERIFY16_CMDLEN
 16

	)

75 
	#WRITE_LONG10_CMD
 0x3f

	)

76 
	#WRITE_LONG10_CMDLEN
 10

	)

77 
	#WRITE_BUFFER_CMD
 0x3b

	)

78 
	#WRITE_BUFFER_CMDLEN
 10

	)

80 
	#GET_LBA_STATUS_SA
 0x12

	)

81 
	#READ_LONG_16_SA
 0x11

	)

82 
	#READ_MEDIA_SERIAL_NUM_SA
 0x1

	)

83 
	#REPORT_IDENTIFYING_INFORMATION_SA
 0x5

	)

84 
	#REPORT_TGT_PRT_GRP_SA
 0xa

	)

85 
	#RECEIVE_COPY_RES_COPY_STATUS_SA
 0x00

	)

86 
	#RECEIVE_COPY_RES_RECEIVE_DATA_SA
 0x01

	)

87 
	#RECEIVE_COPY_RES_OPERATING_PARMS_SA
 0x03

	)

88 
	#RECEIVE_COPY_RES_FAILED_SEGMENT_DETAILS_SA
 0x04

	)

89 
	#SET_IDENTIFYING_INFORMATION_SA
 0x6

	)

90 
	#SET_TGT_PRT_GRP_SA
 0xa

	)

91 
	#WRITE_LONG_16_SA
 0x11

	)

92 
	#REPORT_REFERRALS_SA
 0x13

	)

100 
	$sg_Œ_gë_lba_°©us
(
sg_fd
, 
uöt64_t
 
°¨t_Œba
, * 
ª•
,

101 
Æloc_Àn
, 
noisy
, 
vîbo£
)

103 
k
, 
ªs
, 
£n£_ˇt
, 
ªt
;

104 
gëLbaSètCmd
[
SERVICE_ACTION_IN_16_CMDLEN
];

105 
£n£_b
[
SENSE_BUFF_LEN
];

106 
sg_±_ba£
 * 
±vp
;

108 
	`mem£t
(
gëLbaSètCmd
, 0, (getLbaStatCmd));

109 
gëLbaSètCmd
[0] = 
SERVICE_ACTION_IN_16_CMD
;

110 
gëLbaSètCmd
[1] = 
GET_LBA_STATUS_SA
;

112 
gëLbaSètCmd
[2] = (
°¨t_Œba
 >> 56) & 0xff;

113 
gëLbaSètCmd
[3] = (
°¨t_Œba
 >> 48) & 0xff;

114 
gëLbaSètCmd
[4] = (
°¨t_Œba
 >> 40) & 0xff;

115 
gëLbaSètCmd
[5] = (
°¨t_Œba
 >> 32) & 0xff;

116 
gëLbaSètCmd
[6] = (
°¨t_Œba
 >> 24) & 0xff;

117 
gëLbaSètCmd
[7] = (
°¨t_Œba
 >> 16) & 0xff;

118 
gëLbaSètCmd
[8] = (
°¨t_Œba
 >> 8) & 0xff;

119 
gëLbaSètCmd
[9] = 
°¨t_Œba
 & 0xff;

120 
gëLbaSètCmd
[10] = (
Æloc_Àn
 >> 24) & 0xff;

121 
gëLbaSètCmd
[11] = (
Æloc_Àn
 >> 16) & 0xff;

122 
gëLbaSètCmd
[12] = (
Æloc_Àn
 >> 8) & 0xff;

123 
gëLbaSètCmd
[13] = 
Æloc_Àn
 & 0xff;

124 i‡(
NULL
 =
sg_w¨nögs_°rm
)

125 
sg_w¨nögs_°rm
 = 
°dîr
;

126 i‡(
vîbo£
) {

127 
	`Ârötf
(
sg_w¨nögs_°rm
, " Get LBA status cmd: ");

128 
k
 = 0; k < 
SERVICE_ACTION_IN_16_CMDLEN
; ++k)

129 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
gëLbaSètCmd
[
k
]);

130 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

133 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

134 i‡(
NULL
 =
±vp
) {

135 
	`Ârötf
(
sg_w¨nögs_°rm
, "get LBA status: out of memory\n");

138 
	`£t_scsi_±_cdb
(
±vp
, 
gëLbaSètCmd
, (getLbaStatCmd));

139 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

140 
	`£t_scsi_±_d©a_ö
(
±vp
, (*)
ª•
, 
Æloc_Àn
);

141 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

142 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "gë LBA sètus", 
ªs
, 
Æloc_Àn
,

143 
£n£_b
, 
noisy
, 
vîbo£
, &
£n£_ˇt
);

144 i‡(-1 =
ªt
)

146 i‡(-2 =
ªt
) {

147 
£n£_ˇt
) {

148 
SG_LIB_CAT_NOT_READY
:

149 
SG_LIB_CAT_ILLEGAL_REQ
:

150 
SG_LIB_CAT_INVALID_OP
:

151 
SG_LIB_CAT_UNIT_ATTENTION
:

152 
SG_LIB_CAT_ABORTED_COMMAND
:

153 
ªt
 = 
£n£_ˇt
;

155 
SG_LIB_CAT_RECOVERED
:

156 
SG_LIB_CAT_NO_SENSE
:

157 
ªt
 = 0;

160 
ªt
 = -1;

164 i‡((
vîbo£
 > 2Ë&& (
ªt
 > 0)) {

165 
	`Ârötf
(
sg_w¨nögs_°rm
, " get LBA status:Ñesponse%s\n",

166 (
ªt
 > 256 ? ", first 256 bytes" : ""));

167 
	`dSåHex
((c⁄° *)
ª•
, (
ªt
 > 256 ? 256 :Ñet), -1);

169 
ªt
 = 0;

171 
	`de°ru˘_scsi_±_obj
(
±vp
);

172  
ªt
;

173 
	}
}

176 
	$sg_Œ_ªp‹t_tgt_¥t_gΩ
(
sg_fd
, * 
ª•
, 
mx_ª•_Àn
,

177 
noisy
, 
vîbo£
)

179  
	`sg_Œ_ªp‹t_tgt_¥t_gΩ2
(
sg_fd
, 
ª•
, 
mx_ª•_Àn
, 0, 
noisy
,

180 
vîbo£
);

181 
	}
}

188 
	$sg_Œ_ªp‹t_tgt_¥t_gΩ2
(
sg_fd
, * 
ª•
, 
mx_ª•_Àn
,

189 
exãnded
, 
noisy
, 
vîbo£
)

191 
k
, 
ªs
, 
ªt
, 
£n£_ˇt
;

192 
πpgCmdBlk
[
MAINTENANCE_IN_CMDLEN
] =

193 {
MAINTENANCE_IN_CMD
, 
REPORT_TGT_PRT_GRP_SA
,

195 
£n£_b
[
SENSE_BUFF_LEN
];

196 
sg_±_ba£
 * 
±vp
;

198 i‡(
exãnded
) {

199 
πpgCmdBlk
[1] |= 0x20;

201 
πpgCmdBlk
[6] = (
mx_ª•_Àn
 >> 24) & 0xff;

202 
πpgCmdBlk
[7] = (
mx_ª•_Àn
 >> 16) & 0xff;

203 
πpgCmdBlk
[8] = (
mx_ª•_Àn
 >> 8) & 0xff;

204 
πpgCmdBlk
[9] = 
mx_ª•_Àn
 & 0xff;

205 i‡(
NULL
 =
sg_w¨nögs_°rm
)

206 
sg_w¨nögs_°rm
 = 
°dîr
;

207 i‡(
vîbo£
) {

208 
	`Ârötf
(
sg_w¨nögs_°rm
, "ÑeportÅargetÖort groups cdb: ");

209 
k
 = 0; k < 
MAINTENANCE_IN_CMDLEN
; ++k)

210 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
πpgCmdBlk
[
k
]);

211 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

214 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

215 i‡(
NULL
 =
±vp
) {

216 
	`Ârötf
(
sg_w¨nögs_°rm
, "reportÅargetÖort groups: out of "

220 
	`£t_scsi_±_cdb
(
±vp
, 
πpgCmdBlk
, (rtpgCmdBlk));

221 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

222 
	`£t_scsi_±_d©a_ö
(
±vp
, (*)
ª•
, 
mx_ª•_Àn
);

223 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

224 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "ªp‹àèrgëÖ‹àgroup", 
ªs
,

225 
mx_ª•_Àn
, 
£n£_b
, 
noisy
, 
vîbo£
,

226 &
£n£_ˇt
);

227 i‡(-1 =
ªt
)

229 i‡(-2 =
ªt
) {

230 
£n£_ˇt
) {

231 
SG_LIB_CAT_INVALID_OP
:

232 
SG_LIB_CAT_ILLEGAL_REQ
:

233 
SG_LIB_CAT_UNIT_ATTENTION
:

234 
SG_LIB_CAT_ABORTED_COMMAND
:

235 
ªt
 = 
£n£_ˇt
;

237 
SG_LIB_CAT_RECOVERED
:

238 
SG_LIB_CAT_NO_SENSE
:

239 
ªt
 = 0;

242 
ªt
 = -1;

246 i‡((
vîbo£
 > 2Ë&& (
ªt
 > 0)) {

247 
	`Ârötf
(
sg_w¨nögs_°rm
, "ÑeportÅargetÖort group: "

248 "ª•⁄£%s\n", (
ªt
 > 256 ? ", first 256 bytes" : ""));

249 
	`dSåHex
((c⁄° *)
ª•
, (
ªt
 > 256 ? 256 :Ñet), -1);

251 
ªt
 = 0;

253 
	`de°ru˘_scsi_±_obj
(
±vp
);

254  
ªt
;

255 
	}
}

262 
	$sg_Œ_£t_tgt_¥t_gΩ
(
sg_fd
, * 
∑ømp
, 
∑øm_Àn
, 
noisy
,

263 
vîbo£
)

265 
k
, 
ªs
, 
ªt
, 
£n£_ˇt
;

266 
°pgCmdBlk
[
MAINTENANCE_OUT_CMDLEN
] =

267 {
MAINTENANCE_OUT_CMD
, 
SET_TGT_PRT_GRP_SA
,

269 
£n£_b
[
SENSE_BUFF_LEN
];

270 
sg_±_ba£
 * 
±vp
;

272 
°pgCmdBlk
[6] = (
∑øm_Àn
 >> 24) & 0xff;

273 
°pgCmdBlk
[7] = (
∑øm_Àn
 >> 16) & 0xff;

274 
°pgCmdBlk
[8] = (
∑øm_Àn
 >> 8) & 0xff;

275 
°pgCmdBlk
[9] = 
∑øm_Àn
 & 0xff;

276 i‡(
NULL
 =
sg_w¨nögs_°rm
)

277 
sg_w¨nögs_°rm
 = 
°dîr
;

278 i‡(
vîbo£
) {

279 
	`Ârötf
(
sg_w¨nögs_°rm
, " setÅargetÖort groups cdb: ");

280 
k
 = 0; k < 
MAINTENANCE_OUT_CMDLEN
; ++k)

281 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
°pgCmdBlk
[
k
]);

282 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

283 i‡((
vîbo£
 > 1Ë&& 
∑ømp
 && 
∑øm_Àn
) {

284 
	`Ârötf
(
sg_w¨nögs_°rm
, " setÅargetÖort groups "

286 
	`dSåHex
((c⁄° *)
∑ømp
, 
∑øm_Àn
, -1);

290 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

291 i‡(
NULL
 =
±vp
) {

292 
	`Ârötf
(
sg_w¨nögs_°rm
, "setÅargetÖort groups: out of "

296 
	`£t_scsi_±_cdb
(
±vp
, 
°pgCmdBlk
, (stpgCmdBlk));

297 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

298 
	`£t_scsi_±_d©a_out
(
±vp
, (*)
∑ømp
, 
∑øm_Àn
);

299 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

300 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "£àèrgëÖ‹àgroup", 
ªs
, 0,

301 
£n£_b
, 
noisy
, 
vîbo£
, &
£n£_ˇt
);

302 i‡(-1 =
ªt
)

304 i‡(-2 =
ªt
) {

305 
£n£_ˇt
) {

306 
SG_LIB_CAT_INVALID_OP
:

307 
SG_LIB_CAT_ILLEGAL_REQ
:

308 
SG_LIB_CAT_UNIT_ATTENTION
:

309 
SG_LIB_CAT_ABORTED_COMMAND
:

310 
ªt
 = 
£n£_ˇt
;

312 
SG_LIB_CAT_RECOVERED
:

313 
SG_LIB_CAT_NO_SENSE
:

314 
ªt
 = 0;

317 
ªt
 = -1;

321 
ªt
 = 0;

322 
	`de°ru˘_scsi_±_obj
(
±vp
);

323  
ªt
;

324 
	}
}

331 
	$sg_Œ_ªp‹t_ª„ºÆs
(
sg_fd
, 
uöt64_t
 
°¨t_Œba
, 
⁄e_£g
,

332 * 
ª•
, 
mx_ª•_Àn
, 
noisy
,

333 
vîbo£
)

335 
k
, 
ªs
, 
ªt
, 
£n£_ˇt
;

336 
ªpRefCmdBlk
[
SERVICE_ACTION_IN_16_CMDLEN
] =

337 {
SERVICE_ACTION_IN_16_CMD
, 
REPORT_REFERRALS_SA
,

339 
£n£_b
[
SENSE_BUFF_LEN
];

340 
sg_±_ba£
 * 
±vp
;

342 
ªpRefCmdBlk
[2] = (
°¨t_Œba
 >> 56) & 0xff;

343 
ªpRefCmdBlk
[3] = (
°¨t_Œba
 >> 48) & 0xff;

344 
ªpRefCmdBlk
[4] = (
°¨t_Œba
 >> 40) & 0xff;

345 
ªpRefCmdBlk
[5] = (
°¨t_Œba
 >> 32) & 0xff;

346 
ªpRefCmdBlk
[6] = (
°¨t_Œba
 >> 24) & 0xff;

347 
ªpRefCmdBlk
[7] = (
°¨t_Œba
 >> 16) & 0xff;

348 
ªpRefCmdBlk
[8] = (
°¨t_Œba
 >> 8) & 0xff;

349 
ªpRefCmdBlk
[9] = 
°¨t_Œba
 & 0xff;

350 
ªpRefCmdBlk
[10] = (
mx_ª•_Àn
 >> 24) & 0xff;

351 
ªpRefCmdBlk
[11] = (
mx_ª•_Àn
 >> 16) & 0xff;

352 
ªpRefCmdBlk
[12] = (
mx_ª•_Àn
 >> 8) & 0xff;

353 
ªpRefCmdBlk
[13] = 
mx_ª•_Àn
 & 0xff;

354 
ªpRefCmdBlk
[14] = 
⁄e_£g
 & 0x1;

355 i‡(
NULL
 =
sg_w¨nögs_°rm
)

356 
sg_w¨nögs_°rm
 = 
°dîr
;

357 i‡(
vîbo£
) {

358 
	`Ârötf
(
sg_w¨nögs_°rm
, "ÑeportÑeferrals cdb: ");

359 
k
 = 0; k < 
SERVICE_ACTION_IN_16_CMDLEN
; ++k)

360 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
ªpRefCmdBlk
[
k
]);

361 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

364 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

365 i‡(
NULL
 =
±vp
) {

366 
	`Ârötf
(
sg_w¨nögs_°rm
, "reportÅargetÖort groups: out of "

370 
	`£t_scsi_±_cdb
(
±vp
, 
ªpRefCmdBlk
, (repRefCmdBlk));

371 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

372 
	`£t_scsi_±_d©a_ö
(
±vp
, (*)
ª•
, 
mx_ª•_Àn
);

373 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

374 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "ªp‹àª„ºÆs", 
ªs
,

375 
mx_ª•_Àn
, 
£n£_b
, 
noisy
, 
vîbo£
,

376 &
£n£_ˇt
);

377 i‡(-1 =
ªt
)

379 i‡(-2 =
ªt
) {

380 
£n£_ˇt
) {

381 
SG_LIB_CAT_INVALID_OP
:

382 
SG_LIB_CAT_ILLEGAL_REQ
:

383 
SG_LIB_CAT_UNIT_ATTENTION
:

384 
SG_LIB_CAT_ABORTED_COMMAND
:

385 
ªt
 = 
£n£_ˇt
;

387 
SG_LIB_CAT_RECOVERED
:

388 
SG_LIB_CAT_NO_SENSE
:

389 
ªt
 = 0;

392 
ªt
 = -1;

396 i‡((
vîbo£
 > 2Ë&& (
ªt
 > 0)) {

397 
	`Ârötf
(
sg_w¨nögs_°rm
, "ÑeportÑeferrals:Ñesponse%s\n",

398 (
ªt
 > 256 ? ", first 256 bytes" : ""));

399 
	`dSåHex
((c⁄° *)
ª•
, (
ªt
 > 256 ? 256 :Ñet), -1);

401 
ªt
 = 0;

403 
	`de°ru˘_scsi_±_obj
(
±vp
);

404  
ªt
;

405 
	}
}

414 
	$sg_Œ_£nd_düg
(
sg_fd
, 
sf_code
, 
pf_bô
, 
sf_bô
, 
devoÊ_bô
,

415 
unôoÊ_bô
, 
l⁄g_duøti⁄
, * 
∑ømp
,

416 
∑øm_Àn
, 
noisy
, 
vîbo£
)

418 
k
, 
ªs
, 
ªt
, 
£n£_ˇt
;

419 
£nddügCmdBlk
[
SEND_DIAGNOSTIC_CMDLEN
] =

420 {
SEND_DIAGNOSTIC_CMD
, 0, 0, 0, 0, 0};

421 
£n£_b
[
SENSE_BUFF_LEN
];

422 
sg_±_ba£
 * 
±vp
;

424 
£nddügCmdBlk
[1] = ()((
sf_code
 << 5Ë| (
pf_bô
 << 4) |

425 (
sf_bô
 << 2Ë| (
devoÊ_bô
 << 1Ë| 
unôoÊ_bô
);

426 
£nddügCmdBlk
[3] = ()((
∑øm_Àn
 >> 8) & 0xff);

427 
£nddügCmdBlk
[4] = ()(
∑øm_Àn
 & 0xff);

429 i‡(
NULL
 =
sg_w¨nögs_°rm
)

430 
sg_w¨nögs_°rm
 = 
°dîr
;

431 i‡(
vîbo£
) {

432 
	`Ârötf
(
sg_w¨nögs_°rm
, " Send diagnostic cmd: ");

433 
k
 = 0; k < 
SEND_DIAGNOSTIC_CMDLEN
; ++k)

434 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
£nddügCmdBlk
[
k
]);

435 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

436 i‡((
vîbo£
 > 1Ë&& 
∑ømp
 && 
∑øm_Àn
) {

437 
	`Ârötf
(
sg_w¨nögs_°rm
, " Send diagnosticÖarameter "

439 
	`dSåHex
((c⁄° *)
∑ømp
, 
∑øm_Àn
, -1);

443 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

444 i‡(
NULL
 =
±vp
) {

445 
	`Ârötf
(
sg_w¨nögs_°rm
, "send diagnostic: out of memory\n");

448 
	`£t_scsi_±_cdb
(
±vp
, 
£nddügCmdBlk
, (senddiagCmdBlk));

449 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

450 
	`£t_scsi_±_d©a_out
(
±vp
, (*)
∑ømp
, 
∑øm_Àn
);

451 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
,

452 (
l⁄g_duøti⁄
 ? 
LONG_PT_TIMEOUT
 : 
DEF_PT_TIMEOUT
),

453 
vîbo£
);

454 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "£nd dügno°ic", 
ªs
, 0, 
£n£_b
,

455 
noisy
, 
vîbo£
, &
£n£_ˇt
);

456 i‡(-1 =
ªt
)

458 i‡(-2 =
ªt
) {

459 
£n£_ˇt
) {

460 
SG_LIB_CAT_NOT_READY
:

461 
SG_LIB_CAT_INVALID_OP
:

462 
SG_LIB_CAT_ILLEGAL_REQ
:

463 
SG_LIB_CAT_UNIT_ATTENTION
:

464 
SG_LIB_CAT_ABORTED_COMMAND
:

465 
ªt
 = 
£n£_ˇt
;

467 
SG_LIB_CAT_RECOVERED
:

468 
SG_LIB_CAT_NO_SENSE
:

469 
ªt
 = 0;

472 
ªt
 = -1;

476 
ªt
 = 0;

478 
	`de°ru˘_scsi_±_obj
(
±vp
);

479  
ªt
;

480 
	}
}

488 
	$sg_Œ_ª˚ive_düg
(
sg_fd
, 
pcv
, 
pg_code
, * 
ª•
,

489 
mx_ª•_Àn
, 
noisy
, 
vîbo£
)

491 
k
, 
ªs
, 
ªt
, 
£n£_ˇt
;

492 
rcvdügCmdBlk
[
RECEIVE_DIAGNOSTICS_CMDLEN
] =

493 {
RECEIVE_DIAGNOSTICS_CMD
, 0, 0, 0, 0, 0};

494 
£n£_b
[
SENSE_BUFF_LEN
];

495 
sg_±_ba£
 * 
±vp
;

497 
rcvdügCmdBlk
[1] = ()(
pcv
 ? 0x1 : 0);

498 
rcvdügCmdBlk
[2] = ()(
pg_code
);

499 
rcvdügCmdBlk
[3] = ()((
mx_ª•_Àn
 >> 8) & 0xff);

500 
rcvdügCmdBlk
[4] = ()(
mx_ª•_Àn
 & 0xff);

502 i‡(
NULL
 =
sg_w¨nögs_°rm
)

503 
sg_w¨nögs_°rm
 = 
°dîr
;

504 i‡(
vîbo£
) {

505 
	`Ârötf
(
sg_w¨nögs_°rm
, " Receive diagnosticÑesults cmd: ");

506 
k
 = 0; k < 
RECEIVE_DIAGNOSTICS_CMDLEN
; ++k)

507 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
rcvdügCmdBlk
[
k
]);

508 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

511 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

512 i‡(
NULL
 =
±vp
) {

513 
	`Ârötf
(
sg_w¨nögs_°rm
, "receive diagnosticÑesults: out of "

517 
	`£t_scsi_±_cdb
(
±vp
, 
rcvdügCmdBlk
, (rcvdiagCmdBlk));

518 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

519 
	`£t_scsi_±_d©a_ö
(
±vp
, (*)
ª•
, 
mx_ª•_Àn
);

520 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

521 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "ª˚ivêdügno°i¯ªsu…s", 
ªs
,

522 
mx_ª•_Àn
, 
£n£_b
, 
noisy
, 
vîbo£
,

523 &
£n£_ˇt
);

524 i‡(-1 =
ªt
)

526 i‡(-2 =
ªt
) {

527 
£n£_ˇt
) {

528 
SG_LIB_CAT_NOT_READY
:

529 
SG_LIB_CAT_INVALID_OP
:

530 
SG_LIB_CAT_ILLEGAL_REQ
:

531 
SG_LIB_CAT_UNIT_ATTENTION
:

532 
SG_LIB_CAT_ABORTED_COMMAND
:

533 
ªt
 = 
£n£_ˇt
;

535 
SG_LIB_CAT_RECOVERED
:

536 
SG_LIB_CAT_NO_SENSE
:

537 
ªt
 = 0;

540 
ªt
 = -1;

544 i‡((
vîbo£
 > 2Ë&& (
ªt
 > 0)) {

545 
	`Ârötf
(
sg_w¨nögs_°rm
, "Ñeceive diagnosticÑesults: "

546 "ª•⁄£%s\n", (
ªt
 > 256 ? ", first 256 bytes" : ""));

547 
	`dSåHex
((c⁄° *)
ª•
, (
ªt
 > 256 ? 256 :Ñet), -1);

549 
ªt
 = 0;

551 
	`de°ru˘_scsi_±_obj
(
±vp
);

552  
ªt
;

553 
	}
}

561 
	$sg_Œ_ªad_de„˘10
(
sg_fd
, 
ªq_∂i°
, 
ªq_gli°
, 
dl_f‹m©
,

562 * 
ª•
, 
mx_ª•_Àn
, 
noisy
, 
vîbo£
)

564 
ªs
, 
k
, 
ªt
, 
£n£_ˇt
;

565 
rdefCmdBlk
[
READ_DEFECT10_CMDLEN
] =

566 {
READ_DEFECT10_CMD
, 0, 0, 0, 0, 0, 0, 0, 0, 0};

567 
£n£_b
[
SENSE_BUFF_LEN
];

568 
sg_±_ba£
 * 
±vp
;

570 
rdefCmdBlk
[2] = ()(((
ªq_∂i°
 << 4) & 0x10) |

571 ((
ªq_gli°
 << 3Ë& 0x8Ë| (
dl_f‹m©
 & 0x7));

572 
rdefCmdBlk
[7] = ()((
mx_ª•_Àn
 >> 8) & 0xff);

573 
rdefCmdBlk
[8] = ()(
mx_ª•_Àn
 & 0xff);

574 i‡(
NULL
 =
sg_w¨nögs_°rm
)

575 
sg_w¨nögs_°rm
 = 
°dîr
;

576 i‡(
mx_ª•_Àn
 > 0xffff) {

577 
	`Ârötf
(
sg_w¨nögs_°rm
, "mx_resp_lenÅoo big\n");

580 i‡(
vîbo£
) {

581 
	`Ârötf
(
sg_w¨nögs_°rm
, "Ñead defect (10) cdb: ");

582 
k
 = 0; k < 
READ_DEFECT10_CMDLEN
; ++k)

583 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
rdefCmdBlk
[
k
]);

584 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

587 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

588 i‡(
NULL
 =
±vp
) {

589 
	`Ârötf
(
sg_w¨nögs_°rm
, "read defect (10): out of memory\n");

592 
	`£t_scsi_±_cdb
(
±vp
, 
rdefCmdBlk
, (rdefCmdBlk));

593 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

594 
	`£t_scsi_±_d©a_ö
(
±vp
, (*)
ª•
, 
mx_ª•_Àn
);

595 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

596 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "ªad de„˘ (10)", 
ªs
, 
mx_ª•_Àn
,

597 
£n£_b
, 
noisy
, 
vîbo£
, &
£n£_ˇt
);

598 i‡(-1 =
ªt
)

600 i‡(-2 =
ªt
) {

601 
£n£_ˇt
) {

602 
SG_LIB_CAT_NOT_READY
:

603 
SG_LIB_CAT_INVALID_OP
:

604 
SG_LIB_CAT_ILLEGAL_REQ
:

605 
SG_LIB_CAT_UNIT_ATTENTION
:

606 
SG_LIB_CAT_ABORTED_COMMAND
:

607 
ªt
 = 
£n£_ˇt
;

609 
SG_LIB_CAT_RECOVERED
:

610 
SG_LIB_CAT_NO_SENSE
:

611 
ªt
 = 0;

614 
ªt
 = -1;

618 i‡((
vîbo£
 > 2Ë&& (
ªt
 > 0)) {

619 
	`Ârötf
(
sg_w¨nögs_°rm
, "Ñead defect (10):Ñesponse%s\n",

620 (
ªt
 > 256 ? ", first 256 bytes" : ""));

621 
	`dSåHex
((c⁄° *)
ª•
, (
ªt
 > 256 ? 256 :Ñet), -1);

623 
ªt
 = 0;

625 
	`de°ru˘_scsi_±_obj
(
±vp
);

626  
ªt
;

627 
	}
}

635 
	$sg_Œ_ªad_medü_£rül_num
(
sg_fd
, * 
ª•
, 
mx_ª•_Àn
,

636 
noisy
, 
vîbo£
)

638 
k
, 
ªs
, 
ªt
, 
£n£_ˇt
;

639 
rm¢CmdBlk
[
SERVICE_ACTION_IN_12_CMDLEN
] =

640 {
SERVICE_ACTION_IN_12_CMD
, 
READ_MEDIA_SERIAL_NUM_SA
,

642 
£n£_b
[
SENSE_BUFF_LEN
];

643 
sg_±_ba£
 * 
±vp
;

645 
rm¢CmdBlk
[6] = (
mx_ª•_Àn
 >> 24) & 0xff;

646 
rm¢CmdBlk
[7] = (
mx_ª•_Àn
 >> 16) & 0xff;

647 
rm¢CmdBlk
[8] = (
mx_ª•_Àn
 >> 8) & 0xff;

648 
rm¢CmdBlk
[9] = 
mx_ª•_Àn
 & 0xff;

649 i‡(
NULL
 =
sg_w¨nögs_°rm
)

650 
sg_w¨nögs_°rm
 = 
°dîr
;

651 i‡(
vîbo£
) {

652 
	`Ârötf
(
sg_w¨nögs_°rm
, "Ñead media serialÇumber cdb: ");

653 
k
 = 0; k < 
SERVICE_ACTION_IN_12_CMDLEN
; ++k)

654 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
rm¢CmdBlk
[
k
]);

655 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

658 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

659 i‡(
NULL
 =
±vp
) {

660 
	`Ârötf
(
sg_w¨nögs_°rm
, "read media serialÇumber: out of "

664 
	`£t_scsi_±_cdb
(
±vp
, 
rm¢CmdBlk
, (rmsnCmdBlk));

665 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

666 
	`£t_scsi_±_d©a_ö
(
±vp
, (*)
ª•
, 
mx_ª•_Àn
);

667 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

668 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "ªad medü sîü»numbî", 
ªs
,

669 
mx_ª•_Àn
, 
£n£_b
, 
noisy
, 
vîbo£
,

670 &
£n£_ˇt
);

671 i‡(-1 =
ªt
)

673 i‡(-2 =
ªt
) {

674 
£n£_ˇt
) {

675 
SG_LIB_CAT_NOT_READY
:

676 
SG_LIB_CAT_INVALID_OP
:

677 
SG_LIB_CAT_ILLEGAL_REQ
:

678 
SG_LIB_CAT_UNIT_ATTENTION
:

679 
SG_LIB_CAT_ABORTED_COMMAND
:

680 
ªt
 = 
£n£_ˇt
;

682 
SG_LIB_CAT_RECOVERED
:

683 
SG_LIB_CAT_NO_SENSE
:

684 
ªt
 = 0;

687 
ªt
 = -1;

691 i‡((
vîbo£
 > 2Ë&& (
ªt
 > 0)) {

692 
	`Ârötf
(
sg_w¨nögs_°rm
, "Ñead media serialÇumber:Ñespon"

693 "£%s\n", (
ªt
 > 256 ? ", first 256 bytes" : ""));

694 
	`dSåHex
((c⁄° *)
ª•
, (
ªt
 > 256 ? 256 :Ñet), -1);

696 
ªt
 = 0;

698 
	`de°ru˘_scsi_±_obj
(
±vp
);

699  
ªt
;

700 
	}
}

709 
	$sg_Œ_ªp‹t_id_öfo
(
sg_fd
, 
ôy≥
, * 
ª•
, 
max_ª•_Àn
,

710 
noisy
, 
vîbo£
)

712 
k
, 
ªs
, 
ªt
, 
£n£_ˇt
;

713 
riiCmdBlk
[
MAINTENANCE_IN_CMDLEN
] = {
MAINTENANCE_IN_CMD
,

714 
REPORT_IDENTIFYING_INFORMATION_SA
,

716 
£n£_b
[
SENSE_BUFF_LEN
];

717 
sg_±_ba£
 * 
±vp
;

719 
riiCmdBlk
[6] = (
max_ª•_Àn
 >> 24) & 0xff;

720 
riiCmdBlk
[7] = (
max_ª•_Àn
 >> 16) & 0xff;

721 
riiCmdBlk
[8] = (
max_ª•_Àn
 >> 8) & 0xff;

722 
riiCmdBlk
[9] = 
max_ª•_Àn
 & 0xff;

723 
riiCmdBlk
[10] |(
ôy≥
 << 1) & 0xfe;

725 i‡(
NULL
 =
sg_w¨nögs_°rm
)

726 
sg_w¨nögs_°rm
 = 
°dîr
;

727 i‡(
vîbo£
) {

728 
	`Ârötf
(
sg_w¨nögs_°rm
, " Report identifying information cdb: ");

729 
k
 = 0; k < 
MAINTENANCE_IN_CMDLEN
; ++k)

730 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
riiCmdBlk
[
k
]);

731 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

734 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

735 i‡(
NULL
 =
±vp
) {

736 
	`Ârötf
(
sg_w¨nögs_°rm
, "report identifying information: out of "

740 
	`£t_scsi_±_cdb
(
±vp
, 
riiCmdBlk
, (riiCmdBlk));

741 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

742 
	`£t_scsi_±_d©a_ö
(
±vp
, (*)
ª•
, 
max_ª•_Àn
);

743 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

744 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "ªp‹àidítifyög inf‹m©i⁄", 
ªs
,

745 
max_ª•_Àn
, 
£n£_b
, 
noisy
, 
vîbo£
,

746 &
£n£_ˇt
);

747 i‡(-1 =
ªt
)

749 i‡(-2 =
ªt
) {

750 
£n£_ˇt
) {

751 
SG_LIB_CAT_NOT_READY
:

752 
SG_LIB_CAT_INVALID_OP
:

753 
SG_LIB_CAT_ILLEGAL_REQ
:

754 
SG_LIB_CAT_UNIT_ATTENTION
:

755 
SG_LIB_CAT_ABORTED_COMMAND
:

756 
ªt
 = 
£n£_ˇt
;

758 
SG_LIB_CAT_RECOVERED
:

759 
SG_LIB_CAT_NO_SENSE
:

760 
ªt
 = 0;

763 
ªt
 = -1;

767 i‡((
vîbo£
 > 2Ë&& (
ªt
 > 0)) {

768 
	`Ârötf
(
sg_w¨nögs_°rm
, "Ñeport identifying information: "

769 "ª•⁄£%s\n", (
ªt
 > 256 ? ", first 256 bytes" : ""));

770 
	`dSåHex
((c⁄° *)
ª•
, (
ªt
 > 256 ? 256 :Ñet), -1);

772 
ªt
 = 0;

774 
	`de°ru˘_scsi_±_obj
(
±vp
);

775  
ªt
;

776 
	}
}

785 
	$sg_Œ_£t_id_öfo
(
sg_fd
, 
ôy≥
, * 
∑ømp
, 
∑øm_Àn
,

786 
noisy
, 
vîbo£
)

788 
k
, 
ªs
, 
ªt
, 
£n£_ˇt
;

789 
siiCmdBlk
[
MAINTENANCE_OUT_CMDLEN
] = {
MAINTENANCE_OUT_CMD
,

790 
SET_IDENTIFYING_INFORMATION_SA
,

792 
£n£_b
[
SENSE_BUFF_LEN
];

793 
sg_±_ba£
 * 
±vp
;

795 
siiCmdBlk
[6] = (
∑øm_Àn
 >> 24) & 0xff;

796 
siiCmdBlk
[7] = (
∑øm_Àn
 >> 16) & 0xff;

797 
siiCmdBlk
[8] = (
∑øm_Àn
 >> 8) & 0xff;

798 
siiCmdBlk
[9] = 
∑øm_Àn
 & 0xff;

799 
siiCmdBlk
[10] |(
ôy≥
 << 1) & 0xfe;

800 i‡(
NULL
 =
sg_w¨nögs_°rm
)

801 
sg_w¨nögs_°rm
 = 
°dîr
;

802 i‡(
vîbo£
) {

803 
	`Ârötf
(
sg_w¨nögs_°rm
, " Set identifying information cdb: ");

804 
k
 = 0; k < 
MAINTENANCE_OUT_CMDLEN
; ++k)

805 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
siiCmdBlk
[
k
]);

806 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

807 i‡((
vîbo£
 > 1Ë&& 
∑ømp
 && 
∑øm_Àn
) {

808 
	`Ârötf
(
sg_w¨nögs_°rm
, " Set identifying information "

810 
	`dSåHex
((c⁄° *)
∑ømp
, 
∑øm_Àn
, -1);

814 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

815 i‡(
NULL
 =
±vp
) {

816 
	`Ârötf
(
sg_w¨nögs_°rm
, "Set identifying information: out of "

820 
	`£t_scsi_±_cdb
(
±vp
, 
siiCmdBlk
, (siiCmdBlk));

821 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

822 
	`£t_scsi_±_d©a_out
(
±vp
, (*)
∑ømp
, 
∑øm_Àn
);

823 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

824 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "£àidítifyög inf‹m©i⁄", 
ªs
, 0,

825 
£n£_b
, 
noisy
, 
vîbo£
, &
£n£_ˇt
);

826 i‡(-1 =
ªt
)

828 i‡(-2 =
ªt
) {

829 
£n£_ˇt
) {

830 
SG_LIB_CAT_NOT_READY
:

831 
SG_LIB_CAT_INVALID_OP
:

832 
SG_LIB_CAT_ILLEGAL_REQ
:

833 
SG_LIB_CAT_UNIT_ATTENTION
:

834 
SG_LIB_CAT_ABORTED_COMMAND
:

835 
ªt
 = 
£n£_ˇt
;

837 
SG_LIB_CAT_RECOVERED
:

838 
SG_LIB_CAT_NO_SENSE
:

839 
ªt
 = 0;

842 
ªt
 = -1;

846 
ªt
 = 0;

848 
	`de°ru˘_scsi_±_obj
(
±vp
);

849  
ªt
;

850 
	}
}

858 
	$sg_Œ_f‹m©_unô
(
sg_fd
, 
fmçöfo
, 
l⁄gli°
, 
fmtd©a
,

859 
cm∂°
, 
dli°_f‹m©
, 
timeout_£cs
,

860 * 
∑ømp
, 
∑øm_Àn
, 
noisy
, 
vîbo£
)

862 
k
, 
ªs
, 
ªt
, 
£n£_ˇt
, 
tmout
;

863 
fuCmdBlk
[
FORMAT_UNIT_CMDLEN
] =

864 {
FORMAT_UNIT_CMD
, 0, 0, 0, 0, 0};

865 
£n£_b
[
SENSE_BUFF_LEN
];

866 
sg_±_ba£
 * 
±vp
;

868 i‡(
fmçöfo
)

869 
fuCmdBlk
[1] |(
fmçöfo
 << 6);

870 i‡(
l⁄gli°
)

871 
fuCmdBlk
[1] |= 0x20;

872 i‡(
fmtd©a
)

873 
fuCmdBlk
[1] |= 0x10;

874 i‡(
cm∂°
)

875 
fuCmdBlk
[1] |= 0x8;

876 i‡(
dli°_f‹m©
)

877 
fuCmdBlk
[1] |(
dli°_f‹m©
 & 0x7);

878 i‡(
NULL
 =
sg_w¨nögs_°rm
)

879 
sg_w¨nögs_°rm
 = 
°dîr
;

880 
tmout
 = (
timeout_£cs
 > 0Ë?Åimeout_£c†: 
DEF_PT_TIMEOUT
;

881 i‡(
vîbo£
) {

882 
	`Ârötf
(
sg_w¨nögs_°rm
, " format cdb: ");

883 
k
 = 0; k < 6; ++k)

884 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
fuCmdBlk
[
k
]);

885 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

887 i‡((
vîbo£
 > 1Ë&& (
∑øm_Àn
 > 0)) {

888 
	`Ârötf
(
sg_w¨nögs_°rm
, " formatÖarameterÜist:\n");

889 
	`dSåHex
((c⁄° *)
∑ømp
, 
∑øm_Àn
, -1);

892 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

893 i‡(
NULL
 =
±vp
) {

894 
	`Ârötf
(
sg_w¨nögs_°rm
, "format unit: out of memory\n");

897 
	`£t_scsi_±_cdb
(
±vp
, 
fuCmdBlk
, (fuCmdBlk));

898 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

899 
	`£t_scsi_±_d©a_out
(
±vp
, (*)
∑ømp
, 
∑øm_Àn
);

900 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
tmout
, 
vîbo£
);

901 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "f‹m© unô", 
ªs
, 0, 
£n£_b
,

902 
noisy
, 
vîbo£
, &
£n£_ˇt
);

903 i‡(-1 =
ªt
)

905 i‡(-2 =
ªt
) {

906 
£n£_ˇt
) {

907 
SG_LIB_CAT_NOT_READY
:

908 
SG_LIB_CAT_INVALID_OP
:

909 
SG_LIB_CAT_ILLEGAL_REQ
:

910 
SG_LIB_CAT_UNIT_ATTENTION
:

911 
SG_LIB_CAT_ABORTED_COMMAND
:

912 
ªt
 = 
£n£_ˇt
;

914 
SG_LIB_CAT_RECOVERED
:

915 
SG_LIB_CAT_NO_SENSE
:

916 
ªt
 = 0;

919 
ªt
 = -1;

923 
ªt
 = 0;

925 
	`de°ru˘_scsi_±_obj
(
±vp
);

926  
ªt
;

927 
	}
}

934 
	$sg_Œ_ªassign_blocks
(
sg_fd
, 
l⁄glba
, 
l⁄gli°
, * 
∑ømp
,

935 
∑øm_Àn
, 
noisy
, 
vîbo£
)

937 
ªs
, 
k
, 
ªt
, 
£n£_ˇt
;

938 
ªassCmdBlk
[
REASSIGN_BLKS_CMDLEN
] =

939 {
REASSIGN_BLKS_CMD
, 0, 0, 0, 0, 0};

940 
£n£_b
[
SENSE_BUFF_LEN
];

941 
sg_±_ba£
 * 
±vp
;

943 
ªassCmdBlk
[1] = ()(((
l⁄glba
 << 1) & 0x2) |

944 (
l⁄gli°
 & 0x1));

945 i‡(
NULL
 =
sg_w¨nögs_°rm
)

946 
sg_w¨nögs_°rm
 = 
°dîr
;

947 i‡(
vîbo£
) {

948 
	`Ârötf
(
sg_w¨nögs_°rm
, "Ñeassign blocks cdb: ");

949 
k
 = 0; k < 
REASSIGN_BLKS_CMDLEN
; ++k)

950 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
ªassCmdBlk
[
k
]);

951 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

953 i‡(
vîbo£
 > 1) {

954 
	`Ârötf
(
sg_w¨nögs_°rm
, "Ñeassign blocksÖarameterÜist\n");

955 
	`dSåHex
((c⁄° *)
∑ømp
, 
∑øm_Àn
, -1);

958 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

959 i‡(
NULL
 =
±vp
) {

960 
	`Ârötf
(
sg_w¨nögs_°rm
, "reassign blocks: out of memory\n");

963 
	`£t_scsi_±_cdb
(
±vp
, 
ªassCmdBlk
, (reassCmdBlk));

964 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

965 
	`£t_scsi_±_d©a_out
(
±vp
, (*)
∑ømp
, 
∑øm_Àn
);

966 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

967 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "ªassig¿blocks", 
ªs
, 0, 
£n£_b
,

968 
noisy
, 
vîbo£
, &
£n£_ˇt
);

969 i‡(-1 =
ªt
)

971 i‡(-2 =
ªt
) {

972 
£n£_ˇt
) {

973 
SG_LIB_CAT_NOT_READY
:

974 
SG_LIB_CAT_INVALID_OP
:

975 
SG_LIB_CAT_ILLEGAL_REQ
:

976 
SG_LIB_CAT_UNIT_ATTENTION
:

977 
SG_LIB_CAT_ABORTED_COMMAND
:

978 
ªt
 = 
£n£_ˇt
;

980 
SG_LIB_CAT_RECOVERED
:

981 
SG_LIB_CAT_NO_SENSE
:

982 
ªt
 = 0;

985 
ªt
 = -1;

989 
ªt
 = 0;

991 
	`de°ru˘_scsi_±_obj
(
±vp
);

992  
ªt
;

993 
	}
}

1000 
	$sg_Œ_≥rsi°ít_ª£rve_ö
(
sg_fd
, 
rq_£rva˘
, * 
ª•
,

1001 
mx_ª•_Àn
, 
noisy
, 
vîbo£
)

1003 
ªs
, 
k
, 
ªt
, 
£n£_ˇt
;

1004 
¥öCmdBlk
[
PERSISTENT_RESERVE_IN_CMDLEN
] =

1005 {
PERSISTENT_RESERVE_IN_CMD
, 0, 0, 0, 0, 0, 0, 0, 0, 0};

1006 
£n£_b
[
SENSE_BUFF_LEN
];

1007 
sg_±_ba£
 * 
±vp
;

1009 i‡(
rq_£rva˘
 > 0)

1010 
¥öCmdBlk
[1] = ()(
rq_£rva˘
 & 0x1f);

1011 
¥öCmdBlk
[7] = ()((
mx_ª•_Àn
 >> 8) & 0xff);

1012 
¥öCmdBlk
[8] = ()(
mx_ª•_Àn
 & 0xff);

1014 i‡(
NULL
 =
sg_w¨nögs_°rm
)

1015 
sg_w¨nögs_°rm
 = 
°dîr
;

1016 i‡(
vîbo£
) {

1017 
	`Ârötf
(
sg_w¨nögs_°rm
, " Persistent Reservation In cmd: ");

1018 
k
 = 0; k < 
PERSISTENT_RESERVE_IN_CMDLEN
; ++k)

1019 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
¥öCmdBlk
[
k
]);

1020 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

1023 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

1024 i‡(
NULL
 =
±vp
) {

1025 
	`Ârötf
(
sg_w¨nögs_°rm
, "persistentÑeservation in: out of "

1029 
	`£t_scsi_±_cdb
(
±vp
, 
¥öCmdBlk
, (prinCmdBlk));

1030 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

1031 
	`£t_scsi_±_d©a_ö
(
±vp
, (*)
ª•
, 
mx_ª•_Àn
);

1032 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

1033 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "≥rsi°íàª£rv©i⁄ in", 
ªs
,

1034 
mx_ª•_Àn
, 
£n£_b
, 
noisy
, 
vîbo£
,

1035 &
£n£_ˇt
);

1036 i‡(-1 =
ªt
)

1038 i‡(-2 =
ªt
) {

1039 
£n£_ˇt
) {

1040 
SG_LIB_CAT_INVALID_OP
:

1041 
SG_LIB_CAT_ILLEGAL_REQ
:

1042 
SG_LIB_CAT_UNIT_ATTENTION
:

1043 
SG_LIB_CAT_ABORTED_COMMAND
:

1044 
ªt
 = 
£n£_ˇt
;

1046 
SG_LIB_CAT_RECOVERED
:

1047 
SG_LIB_CAT_NO_SENSE
:

1048 
ªt
 = 0;

1051 
ªt
 = -1;

1055 i‡((
vîbo£
 > 2Ë&& (
ªt
 > 0)) {

1056 
	`Ârötf
(
sg_w¨nögs_°rm
, "ÖersistentÑeserve in: "

1057 "ª•⁄£%s\n", (
ªt
 > 256 ? ", first 256 bytes" : ""));

1058 
	`dSåHex
((c⁄° *)
ª•
, (
ªt
 > 256 ? 256 :Ñet), -1);

1060 
ªt
 = 0;

1062 
	`de°ru˘_scsi_±_obj
(
±vp
);

1063  
ªt
;

1064 
	}
}

1071 
	$sg_Œ_≥rsi°ít_ª£rve_out
(
sg_fd
, 
rq_£rva˘
, 
rq_sc›e
,

1072 
rq_ty≥
, * 
∑ømp
,

1073 
∑øm_Àn
, 
noisy
, 
vîbo£
)

1075 
ªs
, 
k
, 
ªt
, 
£n£_ˇt
;

1076 
¥outCmdBlk
[
PERSISTENT_RESERVE_OUT_CMDLEN
] =

1077 {
PERSISTENT_RESERVE_OUT_CMD
, 0, 0, 0, 0, 0, 0, 0, 0, 0};

1078 
£n£_b
[
SENSE_BUFF_LEN
];

1079 
sg_±_ba£
 * 
±vp
;

1081 i‡(
rq_£rva˘
 > 0)

1082 
¥outCmdBlk
[1] = ()(
rq_£rva˘
 & 0x1f);

1083 
¥outCmdBlk
[2] = (((
rq_sc›e
 & 0xfË<< 4Ë| (
rq_ty≥
 & 0xf));

1084 
¥outCmdBlk
[7] = ()((
∑øm_Àn
 >> 8) & 0xff);

1085 
¥outCmdBlk
[8] = ()(
∑øm_Àn
 & 0xff);

1087 i‡(
NULL
 =
sg_w¨nögs_°rm
)

1088 
sg_w¨nögs_°rm
 = 
°dîr
;

1089 i‡(
vîbo£
) {

1090 
	`Ârötf
(
sg_w¨nögs_°rm
, " Persistent Reservation Out cmd: ");

1091 
k
 = 0; k < 
PERSISTENT_RESERVE_OUT_CMDLEN
; ++k)

1092 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
¥outCmdBlk
[
k
]);

1093 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

1094 i‡(
vîbo£
 > 1) {

1095 
	`Ârötf
(
sg_w¨nögs_°rm
, " Persistent Reservation Out "

1097 
	`dSåHex
((c⁄° *)
∑ømp
, 
∑øm_Àn
, 0);

1101 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

1102 i‡(
NULL
 =
±vp
) {

1103 
	`Ârötf
(
sg_w¨nögs_°rm
, "persistentÑeserve out: out of memory\n");

1106 
	`£t_scsi_±_cdb
(
±vp
, 
¥outCmdBlk
, (proutCmdBlk));

1107 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

1108 
	`£t_scsi_±_d©a_out
(
±vp
, (*)
∑ømp
, 
∑øm_Àn
);

1109 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

1110 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "≥rsi°íàª£rvêout", 
ªs
, 0,

1111 
£n£_b
, 
noisy
, 
vîbo£
, &
£n£_ˇt
);

1112 i‡(-1 =
ªt
)

1114 i‡(-2 =
ªt
) {

1115 
£n£_ˇt
) {

1116 
SG_LIB_CAT_INVALID_OP
:

1117 
SG_LIB_CAT_ILLEGAL_REQ
:

1118 
SG_LIB_CAT_UNIT_ATTENTION
:

1119 
SG_LIB_CAT_ABORTED_COMMAND
:

1120 
ªt
 = 
£n£_ˇt
;

1122 
SG_LIB_CAT_RECOVERED
:

1123 
SG_LIB_CAT_NO_SENSE
:

1124 
ªt
 = 0;

1127 
ªt
 = -1;

1131 
ªt
 = 0;

1133 
	`de°ru˘_scsi_±_obj
(
±vp
);

1134  
ªt
;

1135 
	}
}

1138 
	$has_blk_ûi
(* 
£n£p
, 
sb_Àn
)

1140 
ª•_code
;

1141 c⁄° * 
cup
;

1143 i‡(
sb_Àn
 < 8)

1145 
ª•_code
 = (0x7‡& 
£n£p
[0]);

1146 i‡(
ª•_code
 >= 0x72) {

1148 i‡((
cup
 = 
	`sg_scsi_£n£_desc_föd
(
£n£p
, 
sb_Àn
, 0x5)))

1149  ((
cup
[3] & 0x20) ? 1 : 0);

1151  ((
£n£p
[2] & 0x20) ? 1 : 0);

1153 
	}
}

1163 
	$sg_Œ_ªad_l⁄g10
(
sg_fd
, 
pblock
, 
c‹ª˘
, 
lba
,

1164 * 
ª•
, 
x„r_Àn
, * 
off£ç
, 
noisy
,

1165 
vîbo£
)

1167 
k
, 
ªs
, 
£n£_ˇt
, 
ªt
;

1168 
ªadL⁄gCmdBlk
[
READ_LONG10_CMDLEN
];

1169 
£n£_b
[
SENSE_BUFF_LEN
];

1170 
sg_±_ba£
 * 
±vp
;

1172 
	`mem£t
(
ªadL⁄gCmdBlk
, 0, 
READ_LONG10_CMDLEN
);

1173 
ªadL⁄gCmdBlk
[0] = 
READ_LONG10_CMD
;

1174 i‡(
pblock
)

1175 
ªadL⁄gCmdBlk
[1] |= 0x4;

1176 i‡(
c‹ª˘
)

1177 
ªadL⁄gCmdBlk
[1] |= 0x2;

1179 
ªadL⁄gCmdBlk
[2] = (
lba
 >> 24) & 0xff;

1180 
ªadL⁄gCmdBlk
[3] = (
lba
 >> 16) & 0xff;

1181 
ªadL⁄gCmdBlk
[4] = (
lba
 >> 8) & 0xff;

1182 
ªadL⁄gCmdBlk
[5] = 
lba
 & 0xff;

1183 
ªadL⁄gCmdBlk
[7] = (
x„r_Àn
 >> 8) & 0xff;

1184 
ªadL⁄gCmdBlk
[8] = 
x„r_Àn
 & 0xff;

1185 i‡(
NULL
 =
sg_w¨nögs_°rm
)

1186 
sg_w¨nögs_°rm
 = 
°dîr
;

1187 i‡(
vîbo£
) {

1188 
	`Ârötf
(
sg_w¨nögs_°rm
, " Read Long (10) cmd: ");

1189 
k
 = 0; k < 
READ_LONG10_CMDLEN
; ++k)

1190 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
ªadL⁄gCmdBlk
[
k
]);

1191 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

1194 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

1195 i‡(
NULL
 =
±vp
) {

1196 
	`Ârötf
(
sg_w¨nögs_°rm
, "readÜong (10): out of memory\n");

1199 
	`£t_scsi_±_cdb
(
±vp
, 
ªadL⁄gCmdBlk
, (readLongCmdBlk));

1200 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

1201 
	`£t_scsi_±_d©a_ö
(
±vp
, (*)
ª•
, 
x„r_Àn
);

1202 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

1203 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "ªadÜ⁄g (10)", 
ªs
, 
x„r_Àn
,

1204 
£n£_b
, 
noisy
, 
vîbo£
, &
£n£_ˇt
);

1205 i‡(-1 =
ªt
)

1207 i‡(-2 =
ªt
) {

1208 
£n£_ˇt
) {

1209 
SG_LIB_CAT_NOT_READY
:

1210 
SG_LIB_CAT_INVALID_OP
:

1211 
SG_LIB_CAT_UNIT_ATTENTION
:

1212 
SG_LIB_CAT_ABORTED_COMMAND
:

1213 
ªt
 = 
£n£_ˇt
;

1215 
SG_LIB_CAT_RECOVERED
:

1216 
SG_LIB_CAT_NO_SENSE
:

1217 
ªt
 = 0;

1219 
SG_LIB_CAT_ILLEGAL_REQ
:

1221 
vÆid
, 
¶í
, 
ûi
;

1222 
uöt64_t
 
uŒ
 = 0;

1224 
¶í
 = 
	`gë_scsi_±_£n£_Àn
(
±vp
);

1225 
vÆid
 = 
	`sg_gë_£n£_öfo_Êd
(
£n£_b
, 
¶í
, &
uŒ
);

1226 
ûi
 = 
	`has_blk_ûi
(
£n£_b
, 
¶í
);

1227 i‡(
vÆid
 && 
ûi
) {

1228 i‡(
off£ç
)

1229 *
off£ç
 = ()(
öt64_t
)
uŒ
;

1230 
ªt
 = 
SG_LIB_CAT_ILLEGAL_REQ_WITH_INFO
;

1232 i‡(
vîbo£
 > 1)

1233 
	`Ârötf
(
sg_w¨nögs_°rm
, " infÿfõld: 0x%" 
PRIx64


1234 ", vÆid: %d, ili: %d\n", 
uŒ
, 
vÆid
, 
ûi
);

1235 
ªt
 = 
SG_LIB_CAT_ILLEGAL_REQ
;

1240 
ªt
 = -1;

1244 i‡((
vîbo£
 > 2Ë&& (
ªt
 > 0)) {

1245 
	`Ârötf
(
sg_w¨nögs_°rm
, "ÑeadÜong(10):Ñesponse%s\n",

1246 (
ªt
 > 256 ? ", first 256 bytes" : ""));

1247 
	`dSåHex
((c⁄° *)
ª•
, (
ªt
 > 256 ? 256 :Ñet), -1);

1249 
ªt
 = 0;

1251 
	`de°ru˘_scsi_±_obj
(
±vp
);

1252  
ªt
;

1253 
	}
}

1263 
	$sg_Œ_ªad_l⁄g16
(
sg_fd
, 
pblock
, 
c‹ª˘
, 
uöt64_t
 
Œba
,

1264 * 
ª•
, 
x„r_Àn
, * 
off£ç
, 
noisy
,

1265 
vîbo£
)

1267 
k
, 
ªs
, 
£n£_ˇt
, 
ªt
;

1268 
ªadL⁄gCmdBlk
[
SERVICE_ACTION_IN_16_CMDLEN
];

1269 
£n£_b
[
SENSE_BUFF_LEN
];

1270 
sg_±_ba£
 * 
±vp
;

1272 
	`mem£t
(
ªadL⁄gCmdBlk
, 0, (readLongCmdBlk));

1273 
ªadL⁄gCmdBlk
[0] = 
SERVICE_ACTION_IN_16_CMD
;

1274 
ªadL⁄gCmdBlk
[1] = 
READ_LONG_16_SA
;

1275 i‡(
pblock
)

1276 
ªadL⁄gCmdBlk
[14] |= 0x2;

1277 i‡(
c‹ª˘
)

1278 
ªadL⁄gCmdBlk
[14] |= 0x1;

1280 
ªadL⁄gCmdBlk
[2] = (
Œba
 >> 56) & 0xff;

1281 
ªadL⁄gCmdBlk
[3] = (
Œba
 >> 48) & 0xff;

1282 
ªadL⁄gCmdBlk
[4] = (
Œba
 >> 40) & 0xff;

1283 
ªadL⁄gCmdBlk
[5] = (
Œba
 >> 32) & 0xff;

1284 
ªadL⁄gCmdBlk
[6] = (
Œba
 >> 24) & 0xff;

1285 
ªadL⁄gCmdBlk
[7] = (
Œba
 >> 16) & 0xff;

1286 
ªadL⁄gCmdBlk
[8] = (
Œba
 >> 8) & 0xff;

1287 
ªadL⁄gCmdBlk
[9] = 
Œba
 & 0xff;

1288 
ªadL⁄gCmdBlk
[12] = (
x„r_Àn
 >> 8) & 0xff;

1289 
ªadL⁄gCmdBlk
[13] = 
x„r_Àn
 & 0xff;

1290 i‡(
NULL
 =
sg_w¨nögs_°rm
)

1291 
sg_w¨nögs_°rm
 = 
°dîr
;

1292 i‡(
vîbo£
) {

1293 
	`Ârötf
(
sg_w¨nögs_°rm
, " Read Long (16) cmd: ");

1294 
k
 = 0; k < 
SERVICE_ACTION_IN_16_CMDLEN
; ++k)

1295 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
ªadL⁄gCmdBlk
[
k
]);

1296 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

1299 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

1300 i‡(
NULL
 =
±vp
) {

1301 
	`Ârötf
(
sg_w¨nögs_°rm
, "readÜong (16): out of memory\n");

1304 
	`£t_scsi_±_cdb
(
±vp
, 
ªadL⁄gCmdBlk
, (readLongCmdBlk));

1305 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

1306 
	`£t_scsi_±_d©a_ö
(
±vp
, (*)
ª•
, 
x„r_Àn
);

1307 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

1308 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "ªadÜ⁄g (16)", 
ªs
, 
x„r_Àn
,

1309 
£n£_b
, 
noisy
, 
vîbo£
, &
£n£_ˇt
);

1310 i‡(-1 =
ªt
)

1312 i‡(-2 =
ªt
) {

1313 
£n£_ˇt
) {

1314 
SG_LIB_CAT_NOT_READY
:

1315 
SG_LIB_CAT_INVALID_OP
:

1316 
SG_LIB_CAT_UNIT_ATTENTION
:

1317 
SG_LIB_CAT_ABORTED_COMMAND
:

1318 
ªt
 = 
£n£_ˇt
;

1320 
SG_LIB_CAT_RECOVERED
:

1321 
SG_LIB_CAT_NO_SENSE
:

1322 
ªt
 = 0;

1324 
SG_LIB_CAT_ILLEGAL_REQ
:

1326 
vÆid
, 
¶í
, 
ûi
;

1327 
uöt64_t
 
uŒ
 = 0;

1329 
¶í
 = 
	`gë_scsi_±_£n£_Àn
(
±vp
);

1330 
vÆid
 = 
	`sg_gë_£n£_öfo_Êd
(
£n£_b
, 
¶í
, &
uŒ
);

1331 
ûi
 = 
	`has_blk_ûi
(
£n£_b
, 
¶í
);

1332 i‡(
vÆid
 && 
ûi
) {

1333 i‡(
off£ç
)

1334 *
off£ç
 = ()(
öt64_t
)
uŒ
;

1335 
ªt
 = 
SG_LIB_CAT_ILLEGAL_REQ_WITH_INFO
;

1337 i‡(
vîbo£
 > 1)

1338 
	`Ârötf
(
sg_w¨nögs_°rm
, " infÿfõld: 0x%" 
PRIx64


1339 ", vÆid: %d, ili: %d\n", 
uŒ
, 
vÆid
, 
ûi
);

1340 
ªt
 = 
SG_LIB_CAT_ILLEGAL_REQ
;

1345 
ªt
 = -1;

1349 i‡((
vîbo£
 > 2Ë&& (
ªt
 > 0)) {

1350 
	`Ârötf
(
sg_w¨nögs_°rm
, "ÑeadÜong(16):Ñesponse%s\n",

1351 (
ªt
 > 256 ? ", first 256 bytes" : ""));

1352 
	`dSåHex
((c⁄° *)
ª•
, (
ªt
 > 256 ? 256 :Ñet), -1);

1354 
ªt
 = 0;

1356 
	`de°ru˘_scsi_±_obj
(
±vp
);

1357  
ªt
;

1358 
	}
}

1369 
	$sg_Œ_wrôe_l⁄g10
(
sg_fd
, 
c‹_dis
, 
wr_unc‹
, 
pblock
,

1370 
lba
, * 
d©a_out
, 
x„r_Àn
,

1371 * 
off£ç
, 
noisy
, 
vîbo£
)

1373 
k
, 
ªs
, 
£n£_ˇt
, 
ªt
;

1374 
wrôeL⁄gCmdBlk
[
WRITE_LONG10_CMDLEN
];

1375 
£n£_b
[
SENSE_BUFF_LEN
];

1376 
sg_±_ba£
 * 
±vp
;

1378 
	`mem£t
(
wrôeL⁄gCmdBlk
, 0, 
WRITE_LONG10_CMDLEN
);

1379 
wrôeL⁄gCmdBlk
[0] = 
WRITE_LONG10_CMD
;

1380 i‡(
c‹_dis
)

1381 
wrôeL⁄gCmdBlk
[1] |= 0x80;

1382 i‡(
wr_unc‹
)

1383 
wrôeL⁄gCmdBlk
[1] |= 0x40;

1384 i‡(
pblock
)

1385 
wrôeL⁄gCmdBlk
[1] |= 0x20;

1387 
wrôeL⁄gCmdBlk
[2] = (
lba
 >> 24) & 0xff;

1388 
wrôeL⁄gCmdBlk
[3] = (
lba
 >> 16) & 0xff;

1389 
wrôeL⁄gCmdBlk
[4] = (
lba
 >> 8) & 0xff;

1390 
wrôeL⁄gCmdBlk
[5] = 
lba
 & 0xff;

1391 
wrôeL⁄gCmdBlk
[7] = (
x„r_Àn
 >> 8) & 0xff;

1392 
wrôeL⁄gCmdBlk
[8] = 
x„r_Àn
 & 0xff;

1393 i‡(
NULL
 =
sg_w¨nögs_°rm
)

1394 
sg_w¨nögs_°rm
 = 
°dîr
;

1395 i‡(
vîbo£
) {

1396 
	`Ârötf
(
sg_w¨nögs_°rm
, " Write Long (10) cmd: ");

1397 
k
 = 0; k < ()(
wrôeL⁄gCmdBlk
); ++k)

1398 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
wrôeL⁄gCmdBlk
[
k
]);

1399 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

1402 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

1403 i‡(
NULL
 =
±vp
) {

1404 
	`Ârötf
(
sg_w¨nögs_°rm
, "writeÜong(10): out of memory\n");

1407 
	`£t_scsi_±_cdb
(
±vp
, 
wrôeL⁄gCmdBlk
, (writeLongCmdBlk));

1408 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

1409 
	`£t_scsi_±_d©a_out
(
±vp
, (*)
d©a_out
, 
x„r_Àn
);

1410 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

1411 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "wrôêl⁄g(10)", 
ªs
, 0, 
£n£_b
,

1412 
noisy
, 
vîbo£
, &
£n£_ˇt
);

1413 i‡(-1 =
ªt
)

1415 i‡(-2 =
ªt
) {

1416 
£n£_ˇt
) {

1417 
SG_LIB_CAT_NOT_READY
:

1418 
SG_LIB_CAT_UNIT_ATTENTION
:

1419 
SG_LIB_CAT_INVALID_OP
:

1420 
SG_LIB_CAT_ABORTED_COMMAND
:

1421 
ªt
 = 
£n£_ˇt
;

1423 
SG_LIB_CAT_RECOVERED
:

1424 
SG_LIB_CAT_NO_SENSE
:

1425 
ªt
 = 0;

1427 
SG_LIB_CAT_ILLEGAL_REQ
:

1429 
vÆid
, 
¶í
, 
ûi
;

1430 
uöt64_t
 
uŒ
 = 0;

1432 
¶í
 = 
	`gë_scsi_±_£n£_Àn
(
±vp
);

1433 
vÆid
 = 
	`sg_gë_£n£_öfo_Êd
(
£n£_b
, 
¶í
, &
uŒ
);

1434 
ûi
 = 
	`has_blk_ûi
(
£n£_b
, 
¶í
);

1435 i‡(
vÆid
 && 
ûi
) {

1436 i‡(
off£ç
)

1437 *
off£ç
 = ()(
öt64_t
)
uŒ
;

1438 
ªt
 = 
SG_LIB_CAT_ILLEGAL_REQ_WITH_INFO
;

1440 i‡(
vîbo£
 > 1)

1441 
	`Ârötf
(
sg_w¨nögs_°rm
, " infÿfõld: 0x%" 
PRIx64


1442 ", vÆid: %d, ili: %d\n", 
uŒ
, 
vÆid
, 
ûi
);

1443 
ªt
 = 
SG_LIB_CAT_ILLEGAL_REQ
;

1448 
ªt
 = -1;

1452 
ªt
 = 0;

1454 
	`de°ru˘_scsi_±_obj
(
±vp
);

1455  
ªt
;

1456 
	}
}

1467 
	$sg_Œ_wrôe_l⁄g16
(
sg_fd
, 
c‹_dis
, 
wr_unc‹
, 
pblock
,

1468 
uöt64_t
 
Œba
, * 
d©a_out
, 
x„r_Àn
,

1469 * 
off£ç
, 
noisy
, 
vîbo£
)

1471 
k
, 
ªs
, 
£n£_ˇt
, 
ªt
;

1472 
wrôeL⁄gCmdBlk
[
SERVICE_ACTION_OUT_16_CMDLEN
];

1473 
£n£_b
[
SENSE_BUFF_LEN
];

1474 
sg_±_ba£
 * 
±vp
;

1476 
	`mem£t
(
wrôeL⁄gCmdBlk
, 0, (writeLongCmdBlk));

1477 
wrôeL⁄gCmdBlk
[0] = 
SERVICE_ACTION_OUT_16_CMD
;

1478 
wrôeL⁄gCmdBlk
[1] = 
WRITE_LONG_16_SA
;

1479 i‡(
c‹_dis
)

1480 
wrôeL⁄gCmdBlk
[1] |= 0x80;

1481 i‡(
wr_unc‹
)

1482 
wrôeL⁄gCmdBlk
[1] |= 0x40;

1483 i‡(
pblock
)

1484 
wrôeL⁄gCmdBlk
[1] |= 0x20;

1486 
wrôeL⁄gCmdBlk
[2] = (
Œba
 >> 56) & 0xff;

1487 
wrôeL⁄gCmdBlk
[3] = (
Œba
 >> 48) & 0xff;

1488 
wrôeL⁄gCmdBlk
[4] = (
Œba
 >> 40) & 0xff;

1489 
wrôeL⁄gCmdBlk
[5] = (
Œba
 >> 32) & 0xff;

1490 
wrôeL⁄gCmdBlk
[6] = (
Œba
 >> 24) & 0xff;

1491 
wrôeL⁄gCmdBlk
[7] = (
Œba
 >> 16) & 0xff;

1492 
wrôeL⁄gCmdBlk
[8] = (
Œba
 >> 8) & 0xff;

1493 
wrôeL⁄gCmdBlk
[9] = 
Œba
 & 0xff;

1494 
wrôeL⁄gCmdBlk
[12] = (
x„r_Àn
 >> 8) & 0xff;

1495 
wrôeL⁄gCmdBlk
[13] = 
x„r_Àn
 & 0xff;

1496 i‡(
NULL
 =
sg_w¨nögs_°rm
)

1497 
sg_w¨nögs_°rm
 = 
°dîr
;

1498 i‡(
vîbo£
) {

1499 
	`Ârötf
(
sg_w¨nögs_°rm
, " Write Long (16) cmd: ");

1500 
k
 = 0; k < 
SERVICE_ACTION_OUT_16_CMDLEN
; ++k)

1501 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
wrôeL⁄gCmdBlk
[
k
]);

1502 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

1505 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

1506 i‡(
NULL
 =
±vp
) {

1507 
	`Ârötf
(
sg_w¨nögs_°rm
, "writeÜong(16): out of memory\n");

1510 
	`£t_scsi_±_cdb
(
±vp
, 
wrôeL⁄gCmdBlk
, (writeLongCmdBlk));

1511 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

1512 
	`£t_scsi_±_d©a_out
(
±vp
, (*)
d©a_out
, 
x„r_Àn
);

1513 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

1514 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "wrôêl⁄g(16)", 
ªs
, 0, 
£n£_b
,

1515 
noisy
, 
vîbo£
, &
£n£_ˇt
);

1516 i‡(-1 =
ªt
)

1518 i‡(-2 =
ªt
) {

1519 
£n£_ˇt
) {

1520 
SG_LIB_CAT_NOT_READY
:

1521 
SG_LIB_CAT_UNIT_ATTENTION
:

1522 
SG_LIB_CAT_INVALID_OP
:

1523 
SG_LIB_CAT_ABORTED_COMMAND
:

1524 
ªt
 = 
£n£_ˇt
;

1526 
SG_LIB_CAT_RECOVERED
:

1527 
SG_LIB_CAT_NO_SENSE
:

1528 
ªt
 = 0;

1530 
SG_LIB_CAT_ILLEGAL_REQ
:

1532 
vÆid
, 
¶í
, 
ûi
;

1533 
uöt64_t
 
uŒ
 = 0;

1535 
¶í
 = 
	`gë_scsi_±_£n£_Àn
(
±vp
);

1536 
vÆid
 = 
	`sg_gë_£n£_öfo_Êd
(
£n£_b
, 
¶í
, &
uŒ
);

1537 
ûi
 = 
	`has_blk_ûi
(
£n£_b
, 
¶í
);

1538 i‡(
vÆid
 && 
ûi
) {

1539 i‡(
off£ç
)

1540 *
off£ç
 = ()(
öt64_t
)
uŒ
;

1541 
ªt
 = 
SG_LIB_CAT_ILLEGAL_REQ_WITH_INFO
;

1543 i‡(
vîbo£
 > 1)

1544 
	`Ârötf
(
sg_w¨nögs_°rm
, " infÿfõld: 0x%" 
PRIx64


1545 ", vÆid: %d, ili: %d\n", 
uŒ
, 
vÆid
, 
ûi
);

1546 
ªt
 = 
SG_LIB_CAT_ILLEGAL_REQ
;

1551 
ªt
 = -1;

1555 
ªt
 = 0;

1557 
	`de°ru˘_scsi_±_obj
(
±vp
);

1558  
ªt
;

1559 
	}
}

1571 
	$sg_Œ_vîify10
(
sg_fd
, 
vΩrŸe˘
, 
dpo
, 
bytchk
,

1572 
lba
, 
vîi_Àn
, * 
d©a_out
,

1573 
d©a_out_Àn
, * 
öf›
, 
noisy
,

1574 
vîbo£
)

1576 
k
, 
ªs
, 
ªt
, 
£n£_ˇt
;

1577 
vCmdBlk
[
VERIFY10_CMDLEN
] =

1578 {
VERIFY10_CMD
, 0, 0, 0, 0, 0, 0, 0, 0, 0};

1579 
£n£_b
[
SENSE_BUFF_LEN
];

1580 
sg_±_ba£
 * 
±vp
;

1583 
vCmdBlk
[1] = ((
vΩrŸe˘
 & 0x7Ë<< 5Ë| ((
dpo
 & 0x1) << 4) |

1584 ((
bytchk
 & 0x3) << 1) ;

1585 
vCmdBlk
[2] = ()((
lba
 >> 24) & 0xff);

1586 
vCmdBlk
[3] = ()((
lba
 >> 16) & 0xff);

1587 
vCmdBlk
[4] = ()((
lba
 >> 8) & 0xff);

1588 
vCmdBlk
[5] = ()(
lba
 & 0xff);

1589 
vCmdBlk
[7] = ()((
vîi_Àn
 >> 8) & 0xff);

1590 
vCmdBlk
[8] = ()(
vîi_Àn
 & 0xff);

1591 i‡(
NULL
 =
sg_w¨nögs_°rm
)

1592 
sg_w¨nögs_°rm
 = 
°dîr
;

1593 i‡(
vîbo£
 > 1) {

1594 
	`Ârötf
(
sg_w¨nögs_°rm
, " Verify(10) cdb: ");

1595 
k
 = 0; k < 
VERIFY10_CMDLEN
; ++k)

1596 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
vCmdBlk
[
k
]);

1597 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

1598 i‡((
vîbo£
 > 3Ë&& 
bytchk
 && 
d©a_out
 && (
d©a_out_Àn
 > 0)) {

1599 
k
 = 
d©a_out_Àn
 > 4104 ? 4104 : data_out_len;

1600 
	`Ârötf
(
sg_w¨nögs_°rm
, " data_out buffer%s\n",

1601 (
d©a_out_Àn
 > 4104 ? ", first 4104 bytes" : ""));

1602 
	`dSåHex
((c⁄° *)
d©a_out
, 
k
, 
vîbo£
 < 5);

1605 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

1606 i‡(
NULL
 =
±vp
) {

1607 
	`Ârötf
(
sg_w¨nögs_°rm
, "verify (10): out of memory\n");

1610 
	`£t_scsi_±_cdb
(
±vp
, 
vCmdBlk
, (vCmdBlk));

1611 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

1612 i‡(
d©a_out_Àn
 > 0)

1613 
	`£t_scsi_±_d©a_out
(
±vp
, (*)
d©a_out
, 
d©a_out_Àn
);

1614 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

1615 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "vîify (10)", 
ªs
, 0, 
£n£_b
,

1616 
noisy
, 
vîbo£
, &
£n£_ˇt
);

1617 i‡(-1 =
ªt
)

1619 i‡(-2 =
ªt
) {

1620 
£n£_ˇt
) {

1621 
SG_LIB_CAT_NOT_READY
:

1622 
SG_LIB_CAT_INVALID_OP
:

1623 
SG_LIB_CAT_ILLEGAL_REQ
:

1624 
SG_LIB_CAT_UNIT_ATTENTION
:

1625 
SG_LIB_CAT_ABORTED_COMMAND
:

1626 
ªt
 = 
£n£_ˇt
;

1628 
SG_LIB_CAT_RECOVERED
:

1629 
SG_LIB_CAT_NO_SENSE
:

1630 
ªt
 = 0;

1632 
SG_LIB_CAT_MEDIUM_HARD
:

1634 
vÆid
, 
¶í
;

1635 
uöt64_t
 
uŒ
 = 0;

1637 
¶í
 = 
	`gë_scsi_±_£n£_Àn
(
±vp
);

1638 
vÆid
 = 
	`sg_gë_£n£_öfo_Êd
(
£n£_b
, 
¶í
, &
uŒ
);

1639 i‡(
vÆid
) {

1640 i‡(
öf›
)

1641 *
öf›
 = ()
uŒ
;

1642 
ªt
 = 
SG_LIB_CAT_MEDIUM_HARD_WITH_INFO
;

1644 
ªt
 = 
SG_LIB_CAT_MEDIUM_HARD
;

1648 
ªt
 = -1;

1652 
ªt
 = 0;

1654 
	`de°ru˘_scsi_±_obj
(
±vp
);

1655  
ªt
;

1656 
	}
}

1668 
	$sg_Œ_vîify16
(
sg_fd
, 
vΩrŸe˘
, 
dpo
, 
bytchk
, 
uöt64_t
 
Œba
,

1669 
vîi_Àn
, 
group_num
, * 
d©a_out
,

1670 
d©a_out_Àn
, 
uöt64_t
 * 
öf›
, 
noisy
, 
vîbo£
)

1672 
k
, 
ªs
, 
ªt
, 
£n£_ˇt
;

1673 
vCmdBlk
[
VERIFY16_CMDLEN
] =

1674 {
VERIFY16_CMD
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

1675 
£n£_b
[
SENSE_BUFF_LEN
];

1676 
sg_±_ba£
 * 
±vp
;

1679 
vCmdBlk
[1] = ((
vΩrŸe˘
 & 0x7Ë<< 5Ë| ((
dpo
 & 0x1) << 4) |

1680 ((
bytchk
 & 0x3) << 1) ;

1681 
vCmdBlk
[2] = (
Œba
 >> 56) & 0xff;

1682 
vCmdBlk
[3] = (
Œba
 >> 48) & 0xff;

1683 
vCmdBlk
[4] = (
Œba
 >> 40) & 0xff;

1684 
vCmdBlk
[5] = (
Œba
 >> 32) & 0xff;

1685 
vCmdBlk
[6] = (
Œba
 >> 24) & 0xff;

1686 
vCmdBlk
[7] = (
Œba
 >> 16) & 0xff;

1687 
vCmdBlk
[8] = (
Œba
 >> 8) & 0xff;

1688 
vCmdBlk
[9] = 
Œba
 & 0xff;

1689 
vCmdBlk
[10] = (
vîi_Àn
 >> 24) & 0xff;

1690 
vCmdBlk
[11] = (
vîi_Àn
 >> 16) & 0xff;

1691 
vCmdBlk
[12] = (
vîi_Àn
 >> 8) & 0xff;

1692 
vCmdBlk
[13] = 
vîi_Àn
 & 0xff;

1693 
vCmdBlk
[14] = 
group_num
 & 0x1f;

1694 i‡(
NULL
 =
sg_w¨nögs_°rm
)

1695 
sg_w¨nögs_°rm
 = 
°dîr
;

1696 i‡(
vîbo£
 > 1) {

1697 
	`Ârötf
(
sg_w¨nögs_°rm
, " Verify(16) cdb: ");

1698 
k
 = 0; k < 
VERIFY16_CMDLEN
; ++k)

1699 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
vCmdBlk
[
k
]);

1700 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

1701 i‡((
vîbo£
 > 3Ë&& 
bytchk
 && 
d©a_out
 && (
d©a_out_Àn
 > 0)) {

1702 
k
 = 
d©a_out_Àn
 > 4104 ? 4104 : data_out_len;

1703 
	`Ârötf
(
sg_w¨nögs_°rm
, " data_out buffer%s\n",

1704 (
d©a_out_Àn
 > 4104 ? ", first 4104 bytes" : ""));

1705 
	`dSåHex
((c⁄° *)
d©a_out
, 
k
, 
vîbo£
 < 5);

1708 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

1709 i‡(
NULL
 =
±vp
) {

1710 
	`Ârötf
(
sg_w¨nögs_°rm
, "verify (16): out of memory\n");

1713 
	`£t_scsi_±_cdb
(
±vp
, 
vCmdBlk
, (vCmdBlk));

1714 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

1715 i‡(
d©a_out_Àn
 > 0)

1716 
	`£t_scsi_±_d©a_out
(
±vp
, (*)
d©a_out
, 
d©a_out_Àn
);

1717 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

1718 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "vîify (16)", 
ªs
, 0, 
£n£_b
,

1719 
noisy
, 
vîbo£
, &
£n£_ˇt
);

1720 i‡(-1 =
ªt
)

1722 i‡(-2 =
ªt
) {

1723 
£n£_ˇt
) {

1724 
SG_LIB_CAT_NOT_READY
:

1725 
SG_LIB_CAT_INVALID_OP
:

1726 
SG_LIB_CAT_ILLEGAL_REQ
:

1727 
SG_LIB_CAT_UNIT_ATTENTION
:

1728 
SG_LIB_CAT_ABORTED_COMMAND
:

1729 
ªt
 = 
£n£_ˇt
;

1731 
SG_LIB_CAT_RECOVERED
:

1732 
SG_LIB_CAT_NO_SENSE
:

1733 
ªt
 = 0;

1735 
SG_LIB_CAT_MEDIUM_HARD
:

1737 
vÆid
, 
¶í
;

1738 
uöt64_t
 
uŒ
 = 0;

1740 
¶í
 = 
	`gë_scsi_±_£n£_Àn
(
±vp
);

1741 
vÆid
 = 
	`sg_gë_£n£_öfo_Êd
(
£n£_b
, 
¶í
, &
uŒ
);

1742 i‡(
vÆid
) {

1743 i‡(
öf›
)

1744 *
öf›
 = 
uŒ
;

1745 
ªt
 = 
SG_LIB_CAT_MEDIUM_HARD_WITH_INFO
;

1747 
ªt
 = 
SG_LIB_CAT_MEDIUM_HARD
;

1751 
ªt
 = -1;

1755 
ªt
 = 0;

1757 
	`de°ru˘_scsi_±_obj
(
±vp
);

1758  
ªt
;

1759 
	}
}

1780 
	$sg_Œ_©a_±
(
sg_fd
, c⁄° * 
cdbp
, 
cdb_Àn
,

1781 
timeout_£cs
, * 
döp
, * 
douç
, 
dÀn
,

1782 * 
£n£p
, 
max_£n£_Àn
,

1783 * 
©a_ªtu∫_dp
, 
max_©a_ªtu∫_Àn
,

1784 * 
ªsidp
, 
vîbo£
)

1786 
k
, 
ªs
, 
¶í
, 
duøti⁄
;

1787 
≠tCmdBlk
[
ATA_PT_16_CMDLEN
] =

1789 
£n£_b
[
SENSE_BUFF_LEN
];

1790 * 
•
;

1791 c⁄° * 
u˝
;

1792 
sg_±_ba£
 * 
±vp
;

1793 c⁄° * 
˙amï
;

1794 
b
[256];

1795 
ªt
 = -1;

1797 
b
[0] = '\0';

1798 i‡(
NULL
 =
sg_w¨nögs_°rm
)

1799 
sg_w¨nögs_°rm
 = 
°dîr
;

1800 
˙amï
 = (12 =
cdb_Àn
) ?

1802 i‡((
NULL
 =
cdbp
Ë|| ((12 !
cdb_Àn
) && (16 != cdb_len))) {

1803 i‡(
vîbo£
) {

1804 i‡(
NULL
 =
cdbp
)

1805 
	`Ârötf
(
sg_w¨nögs_°rm
, "%†NULL cdbÖoöãr\n", 
˙amï
);

1807 
	`Ârötf
(
sg_w¨nögs_°rm
, "cdb_len must be 12 or 16\n");

1811 
≠tCmdBlk
[0] = (12 =
cdb_Àn
Ë? 
ATA_PT_12_CMD
 : 
ATA_PT_16_CMD
;

1812 i‡(
£n£p
 && (
max_£n£_Àn
 >()(
£n£_b
))) {

1813 
•
 = 
£n£p
;

1814 
¶í
 = 
max_£n£_Àn
;

1816 
•
 = 
£n£_b
;

1817 
¶í
 = (
£n£_b
);

1819 i‡(12 =
cdb_Àn
)

1820 
	`mem˝y
(
≠tCmdBlk
 + 1, 
cdbp
 + 1, ((
cdb_Àn
 > 11) ? 10 : (cdb_len - 1)));

1822 
	`mem˝y
(
≠tCmdBlk
 + 1, 
cdbp
 + 1, ((
cdb_Àn
 > 15) ? 14 : (cdb_len - 1)));

1823 i‡(
vîbo£
) {

1824 
	`Ârötf
(
sg_w¨nögs_°rm
, " %†cdb: ", 
˙amï
);

1825 
k
 = 0; k < 
cdb_Àn
; ++k)

1826 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
≠tCmdBlk
[
k
]);

1827 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

1829 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

1830 i‡(
NULL
 =
±vp
) {

1831 
	`Ârötf
(
sg_w¨nögs_°rm
, "%s: ouào‡mem‹y\n", 
˙amï
);

1834 
	`£t_scsi_±_cdb
(
±vp
, 
≠tCmdBlk
, 
cdb_Àn
);

1835 
	`£t_scsi_±_£n£
(
±vp
, 
•
, 
¶í
);

1836 i‡(
dÀn
 > 0) {

1837 i‡(
döp
)

1838 
	`£t_scsi_±_d©a_ö
(
±vp
, (*)
döp
, 
dÀn
);

1839 i‡(
douç
)

1840 
	`£t_scsi_±_d©a_out
(
±vp
, (*)
douç
, 
dÀn
);

1842 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
,

1843 ((
timeout_£cs
 > 0Ë?Åimeout_£c†: 
DEF_PT_TIMEOUT
),

1844 
vîbo£
);

1845 i‡(
SCSI_PT_DO_BAD_PARAMS
 =
ªs
) {

1846 i‡(
vîbo£
)

1847 
	`Ârötf
(
sg_w¨nögs_°rm
, "%s: badÖ¨amëîs\n", 
˙amï
);

1848 
out
;

1849 } i‡(
SCSI_PT_DO_TIMEOUT
 =
ªs
) {

1850 i‡(
vîbo£
)

1851 
	`Ârötf
(
sg_w¨nögs_°rm
, "%s:Åimeout\n", 
˙amï
);

1852 
out
;

1853 } i‡(
ªs
 > 2) {

1854 i‡(
vîbo£
)

1855 
	`Ârötf
(
sg_w¨nögs_°rm
, "%s: do_scsi_pt:Érrno=%d\n",

1856 
˙amï
, -
ªs
);

1859 i‡((
vîbo£
 > 2Ë&& ((
duøti⁄
 = 
	`gë_scsi_±_duøti⁄_ms
(
±vp
)) >= 0))

1860 
	`Ârötf
(
sg_w¨nögs_°rm
, " duøti⁄=%d ms\n", 
duøti⁄
);

1862 
	`gë_scsi_±_ªsu…_ˇãg‹y
(
±vp
)) {

1863 
SCSI_PT_RESULT_GOOD
:

1864 i‡((
£n£p
Ë&& (
max_£n£_Àn
 > 0))

1865 *
£n£p
 = 0;

1866 i‡((
©a_ªtu∫_dp
Ë&& (
max_©a_ªtu∫_Àn
 > 0))

1867 *
©a_ªtu∫_dp
 = 0;

1868 i‡(
ªsidp
 && (
dÀn
 > 0))

1869 *
ªsidp
 = 
	`gë_scsi_±_ªsid
(
±vp
);

1870 
ªt
 = 0;

1872 
SCSI_PT_RESULT_STATUS
:

1873 i‡((
£n£p
Ë&& (
max_£n£_Àn
 > 0))

1874 *
£n£p
 = 0;

1875 i‡((
©a_ªtu∫_dp
Ë&& (
max_©a_ªtu∫_Àn
 > 0))

1876 *
©a_ªtu∫_dp
 = 0;

1877 
ªt
 = 
	`gë_scsi_±_°©us_ª•⁄£
(
±vp
);

1879 
SCSI_PT_RESULT_SENSE
:

1880 i‡(
£n£p
 && (
•
 != sensep)) {

1881 
k
 = 
	`gë_scsi_±_£n£_Àn
(
±vp
);

1882 
k
 = (k > 
max_£n£_Àn
) ? max_sense_len : k;

1883 
	`mem˝y
(
£n£p
, 
•
, 
k
);

1885 i‡(
©a_ªtu∫_dp
 && (
max_©a_ªtu∫_Àn
 > 0)) {

1887 
u˝
 = 
	`sg_scsi_£n£_desc_föd
(
•
, 
¶í
, 0x9);

1888 i‡(
u˝
) {

1889 
k
 = 
u˝
[1] + 2;

1890 
k
 = (k > 
max_©a_ªtu∫_Àn
) ? max_ata_return_len : k;

1891 
	`mem˝y
(
©a_ªtu∫_dp
, 
u˝
, 
k
);

1893 
©a_ªtu∫_dp
[0] = 0x0;

1895 i‡(
ªsidp
 && (
dÀn
 > 0))

1896 *
ªsidp
 = 
	`gë_scsi_±_ªsid
(
±vp
);

1897 
ªt
 = 
	`gë_scsi_±_°©us_ª•⁄£
(
±vp
);

1899 
SCSI_PT_RESULT_TRANSPORT_ERR
:

1900 i‡(
vîbo£
)

1901 
	`Ârötf
(
sg_w¨nögs_°rm
, "%s:ÅransportÉrror: %s\n",

1902 
˙amï
, 
	`gë_scsi_±_å™•‹t_îr_°r
(
±vp
, (
b
) ,

1903 
b
));

1905 
SCSI_PT_RESULT_OS_ERR
:

1906 i‡(
vîbo£
)

1907 
	`Ârötf
(
sg_w¨nögs_°rm
, "%s: osÉrror: %s\n",

1908 
˙amï
, 
	`gë_scsi_±_os_îr_°r
(
±vp
, (
b
) , b));

1911 i‡(
vîbo£
)

1912 
	`Ârötf
(
sg_w¨nögs_°rm
, "%s: unknownÖt_result_category=%d\n",

1913 
˙amï
, 
	`gë_scsi_±_ªsu…_ˇãg‹y
(
±vp
));

1917 
out
:

1918 
	`de°ru˘_scsi_±_obj
(
±vp
);

1919  
ªt
;

1920 
	}
}

1928 
	$sg_Œ_ªad_buf„r
(
sg_fd
, 
mode
, 
buf„r_id
, 
buf„r_off£t
,

1929 * 
ª•
, 
mx_ª•_Àn
, 
noisy
, 
vîbo£
)

1931 
ªs
, 
k
, 
ªt
, 
£n£_ˇt
;

1932 
rbufCmdBlk
[
READ_BUFFER_CMDLEN
] =

1933 {
READ_BUFFER_CMD
, 0, 0, 0, 0, 0, 0, 0, 0, 0};

1934 
£n£_b
[
SENSE_BUFF_LEN
];

1935 
sg_±_ba£
 * 
±vp
;

1937 
rbufCmdBlk
[1] = ()(
mode
 & 0x1f);

1938 
rbufCmdBlk
[2] = ()(
buf„r_id
 & 0xff);

1939 
rbufCmdBlk
[3] = ()((
buf„r_off£t
 >> 16) & 0xff);

1940 
rbufCmdBlk
[4] = ()((
buf„r_off£t
 >> 8) & 0xff);

1941 
rbufCmdBlk
[5] = ()(
buf„r_off£t
 & 0xff);

1942 
rbufCmdBlk
[6] = ()((
mx_ª•_Àn
 >> 16) & 0xff);

1943 
rbufCmdBlk
[7] = ()((
mx_ª•_Àn
 >> 8) & 0xff);

1944 
rbufCmdBlk
[8] = ()(
mx_ª•_Àn
 & 0xff);

1945 i‡(
NULL
 =
sg_w¨nögs_°rm
)

1946 
sg_w¨nögs_°rm
 = 
°dîr
;

1947 i‡(
vîbo£
) {

1948 
	`Ârötf
(
sg_w¨nögs_°rm
, "Ñead buffer cdb: ");

1949 
k
 = 0; k < 
READ_BUFFER_CMDLEN
; ++k)

1950 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
rbufCmdBlk
[
k
]);

1951 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

1954 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

1955 i‡(
NULL
 =
±vp
) {

1956 
	`Ârötf
(
sg_w¨nögs_°rm
, "read buffer: out of memory\n");

1959 
	`£t_scsi_±_cdb
(
±vp
, 
rbufCmdBlk
, (rbufCmdBlk));

1960 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

1961 
	`£t_scsi_±_d©a_ö
(
±vp
, (*)
ª•
, 
mx_ª•_Àn
);

1962 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

1963 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "ªad buf„r", 
ªs
, 
mx_ª•_Àn
,

1964 
£n£_b
, 
noisy
, 
vîbo£
, &
£n£_ˇt
);

1965 i‡(-1 =
ªt
)

1967 i‡(-2 =
ªt
) {

1968 
£n£_ˇt
) {

1969 
SG_LIB_CAT_NOT_READY
:

1970 
SG_LIB_CAT_INVALID_OP
:

1971 
SG_LIB_CAT_ILLEGAL_REQ
:

1972 
SG_LIB_CAT_UNIT_ATTENTION
:

1973 
SG_LIB_CAT_ABORTED_COMMAND
:

1974 
ªt
 = 
£n£_ˇt
;

1976 
SG_LIB_CAT_RECOVERED
:

1977 
SG_LIB_CAT_NO_SENSE
:

1978 
ªt
 = 0;

1981 
ªt
 = -1;

1985 i‡((
vîbo£
 > 2Ë&& (
ªt
 > 0)) {

1986 
	`Ârötf
(
sg_w¨nögs_°rm
, "Ñead buffer:Ñesponse%s\n",

1987 (
ªt
 > 256 ? ", first 256 bytes" : ""));

1988 
	`dSåHex
((c⁄° *)
ª•
, (
ªt
 > 256 ? 256 :Ñet), -1);

1990 
ªt
 = 0;

1992 
	`de°ru˘_scsi_±_obj
(
±vp
);

1993  
ªt
;

1994 
	}
}

2002 
	$sg_Œ_wrôe_buf„r
(
sg_fd
, 
mode
, 
buf„r_id
, 
buf„r_off£t
,

2003 * 
∑ømp
, 
∑øm_Àn
, 
noisy
, 
vîbo£
)

2005 
k
, 
ªs
, 
ªt
, 
£n£_ˇt
;

2006 
wbufCmdBlk
[
WRITE_BUFFER_CMDLEN
] =

2007 {
WRITE_BUFFER_CMD
, 0, 0, 0, 0, 0, 0, 0, 0, 0};

2008 
£n£_b
[
SENSE_BUFF_LEN
];

2009 
sg_±_ba£
 * 
±vp
;

2011 
wbufCmdBlk
[1] = ()(
mode
 & 0x1f);

2012 
wbufCmdBlk
[2] = ()(
buf„r_id
 & 0xff);

2013 
wbufCmdBlk
[3] = ()((
buf„r_off£t
 >> 16) & 0xff);

2014 
wbufCmdBlk
[4] = ()((
buf„r_off£t
 >> 8) & 0xff);

2015 
wbufCmdBlk
[5] = ()(
buf„r_off£t
 & 0xff);

2016 
wbufCmdBlk
[6] = ()((
∑øm_Àn
 >> 16) & 0xff);

2017 
wbufCmdBlk
[7] = ()((
∑øm_Àn
 >> 8) & 0xff);

2018 
wbufCmdBlk
[8] = ()(
∑øm_Àn
 & 0xff);

2019 i‡(
NULL
 =
sg_w¨nögs_°rm
)

2020 
sg_w¨nögs_°rm
 = 
°dîr
;

2021 i‡(
vîbo£
) {

2022 
	`Ârötf
(
sg_w¨nögs_°rm
, " Write buffer cmd: ");

2023 
k
 = 0; k < 
WRITE_BUFFER_CMDLEN
; ++k)

2024 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
wbufCmdBlk
[
k
]);

2025 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

2026 i‡((
vîbo£
 > 1Ë&& 
∑ømp
 && 
∑øm_Àn
) {

2027 
	`Ârötf
(
sg_w¨nögs_°rm
, " Write bufferÖarameterÜist%s:\n",

2028 ((
∑øm_Àn
 > 256) ? " (first 256 bytes)" : ""));

2029 
	`dSåHex
((c⁄° *)
∑ømp
,

2030 ((
∑øm_Àn
 > 256) ? 256 :Öaram_len), -1);

2034 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

2035 i‡(
NULL
 =
±vp
) {

2036 
	`Ârötf
(
sg_w¨nögs_°rm
, "write buffer: out of memory\n");

2039 
	`£t_scsi_±_cdb
(
±vp
, 
wbufCmdBlk
, (wbufCmdBlk));

2040 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

2041 
	`£t_scsi_±_d©a_out
(
±vp
, (*)
∑ømp
, 
∑øm_Àn
);

2042 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

2043 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "wrôêbuf„r", 
ªs
, 0, 
£n£_b
,

2044 
noisy
, 
vîbo£
, &
£n£_ˇt
);

2045 i‡(-1 =
ªt
)

2047 i‡(-2 =
ªt
) {

2048 
£n£_ˇt
) {

2049 
SG_LIB_CAT_NOT_READY
:

2050 
SG_LIB_CAT_INVALID_OP
:

2051 
SG_LIB_CAT_ILLEGAL_REQ
:

2052 
SG_LIB_CAT_UNIT_ATTENTION
:

2053 
SG_LIB_CAT_ABORTED_COMMAND
:

2054 
ªt
 = 
£n£_ˇt
;

2056 
SG_LIB_CAT_RECOVERED
:

2057 
SG_LIB_CAT_NO_SENSE
:

2058 
ªt
 = 0;

2061 
ªt
 = -1;

2065 
ªt
 = 0;

2067 
	`de°ru˘_scsi_±_obj
(
±vp
);

2068  
ªt
;

2069 
	}
}

2076 
	$sg_Œ_unm≠
(
sg_fd
, 
group_num
, 
timeout_£cs
, * 
∑ømp
,

2077 
∑øm_Àn
, 
noisy
, 
vîbo£
)

2079  
	`sg_Œ_unm≠_v2
(
sg_fd
, 0, 
group_num
, 
timeout_£cs
, 
∑ømp
,

2080 
∑øm_Àn
, 
noisy
, 
vîbo£
);

2081 
	}
}

2086 
	$sg_Œ_unm≠_v2
(
sg_fd
, 
™ch‹
, 
group_num
, 
timeout_£cs
,

2087 * 
∑ømp
, 
∑øm_Àn
, 
noisy
, 
vîbo£
)

2089 
k
, 
ªs
, 
ªt
, 
£n£_ˇt
, 
tmout
;

2090 
uCmdBlk
[
UNMAP_CMDLEN
] =

2091 {
UNMAP_CMD
, 0, 0, 0, 0, 0, 0, 0, 0, 0};

2092 
£n£_b
[
SENSE_BUFF_LEN
];

2093 
sg_±_ba£
 * 
±vp
;

2095 i‡(
™ch‹
)

2096 
uCmdBlk
[1] |= 0x1;

2097 
tmout
 = (
timeout_£cs
 > 0Ë?Åimeout_£c†: 
DEF_PT_TIMEOUT
;

2098 
uCmdBlk
[7] = 
group_num
 & 0x1f;

2099 
uCmdBlk
[7] = (
∑øm_Àn
 >> 8) & 0xff;

2100 
uCmdBlk
[8] = 
∑øm_Àn
 & 0xff;

2101 i‡(
NULL
 =
sg_w¨nögs_°rm
)

2102 
sg_w¨nögs_°rm
 = 
°dîr
;

2103 i‡(
vîbo£
) {

2104 
	`Ârötf
(
sg_w¨nögs_°rm
, " unmap cdb: ");

2105 
k
 = 0; k < 
UNMAP_CMDLEN
; ++k)

2106 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
uCmdBlk
[
k
]);

2107 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

2108 i‡((
vîbo£
 > 1Ë&& 
∑ømp
 && 
∑øm_Àn
) {

2109 
	`Ârötf
(
sg_w¨nögs_°rm
, " unmapÖarameterÜist:\n");

2110 
	`dSåHex
((c⁄° *)
∑ømp
, 
∑øm_Àn
, -1);

2114 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

2115 i‡(
NULL
 =
±vp
) {

2116 
	`Ârötf
(
sg_w¨nögs_°rm
, "unmap: out of memory\n");

2119 
	`£t_scsi_±_cdb
(
±vp
, 
uCmdBlk
, (uCmdBlk));

2120 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

2121 
	`£t_scsi_±_d©a_out
(
±vp
, (*)
∑ømp
, 
∑øm_Àn
);

2122 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
tmout
, 
vîbo£
);

2123 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "unm≠", 
ªs
, 0,

2124 
£n£_b
, 
noisy
, 
vîbo£
, &
£n£_ˇt
);

2125 i‡(-1 =
ªt
)

2127 i‡(-2 =
ªt
) {

2128 
£n£_ˇt
) {

2129 
SG_LIB_CAT_INVALID_OP
:

2130 
SG_LIB_CAT_ILLEGAL_REQ
:

2131 
SG_LIB_CAT_UNIT_ATTENTION
:

2132 
SG_LIB_CAT_ABORTED_COMMAND
:

2133 
ªt
 = 
£n£_ˇt
;

2135 
SG_LIB_CAT_RECOVERED
:

2136 
SG_LIB_CAT_NO_SENSE
:

2137 
ªt
 = 0;

2140 
ªt
 = -1;

2144 
ªt
 = 0;

2145 
	`de°ru˘_scsi_±_obj
(
±vp
);

2146  
ªt
;

2147 
	}
}

2155 
	$sg_Œ_ªad_block_limôs
(
sg_fd
, * 
ª•
, 
mx_ª•_Àn
,

2156 
noisy
, 
vîbo£
)

2158 
k
, 
ªt
, 
ªs
, 
£n£_ˇt
;

2159 
æCmdBlk
[
READ_BLOCK_LIMITS_CMDLEN
] =

2160 {
READ_BLOCK_LIMITS_CMD
, 0, 0, 0, 0, 0};

2161 
£n£_b
[
SENSE_BUFF_LEN
];

2162 
sg_±_ba£
 * 
±vp
;

2164 i‡(
NULL
 =
sg_w¨nögs_°rm
)

2165 
sg_w¨nögs_°rm
 = 
°dîr
;

2166 i‡(
vîbo£
) {

2167 
	`Ârötf
(
sg_w¨nögs_°rm
, "Ñead blockÜimits cdb: ");

2168 
k
 = 0; k < 
READ_BLOCK_LIMITS_CMDLEN
; ++k)

2169 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
æCmdBlk
[
k
]);

2170 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

2173 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

2174 i‡(
NULL
 =
±vp
) {

2175 
	`Ârötf
(
sg_w¨nögs_°rm
, "read blockÜimits: out of memory\n");

2178 
	`£t_scsi_±_cdb
(
±vp
, 
æCmdBlk
, (rlCmdBlk));

2179 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

2180 
	`£t_scsi_±_d©a_ö
(
±vp
, (*)
ª•
, 
mx_ª•_Àn
);

2181 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

2182 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "ªad blockÜimôs", 
ªs
, 
mx_ª•_Àn
,

2183 
£n£_b
, 
noisy
, 
vîbo£
, &
£n£_ˇt
);

2184 i‡(-1 =
ªt
)

2186 i‡(-2 =
ªt
) {

2187 
£n£_ˇt
) {

2188 
SG_LIB_CAT_INVALID_OP
:

2189 
SG_LIB_CAT_ILLEGAL_REQ
:

2190 
SG_LIB_CAT_ABORTED_COMMAND
:

2191 
SG_LIB_CAT_NOT_READY
:

2192 
ªt
 = 
£n£_ˇt
;

2194 
SG_LIB_CAT_RECOVERED
:

2195 
SG_LIB_CAT_NO_SENSE
:

2196 
ªt
 = 0;

2199 
ªt
 = -1;

2203 i‡((
vîbo£
 > 2Ë&& (
ªt
 > 0)) {

2204 
	`Ârötf
(
sg_w¨nögs_°rm
, "Ñead blockÜimits:Ñesponse%s\n",

2205 (
ªt
 > 256 ? ", first 256 bytes" : ""));

2206 
	`dSåHex
((c⁄° *)
ª•
, (
ªt
 > 256 ? 256 :Ñet), -1);

2208 
ªt
 = 0;

2210 
	`de°ru˘_scsi_±_obj
(
±vp
);

2211  
ªt
;

2212 
	}
}

2220 
	$sg_Œ_ª˚ive_c›y_ªsu…s
(
sg_fd
, 
ß
, 
li°_id
, * 
ª•
,

2221 
mx_ª•_Àn
, 
noisy
, 
vîbo£
)

2223 
k
, 
ªs
, 
ªt
, 
£n£_ˇt
;

2224 
rcvc›yªsCmdBlk
[
RECEIVE_COPY_RESULTS_CMDLEN
] =

2225 {
RECEIVE_COPY_RESULTS_CMD
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

2226 
£n£_b
[
SENSE_BUFF_LEN
];

2227 
sg_±_ba£
 * 
±vp
;

2229 
rcvc›yªsCmdBlk
[1] = ()(
ß
 & 0x1f);

2230 
rcvc›yªsCmdBlk
[2] = ()(
li°_id
);

2231 
rcvc›yªsCmdBlk
[10] = ()((
mx_ª•_Àn
 >> 24) & 0xff);

2232 
rcvc›yªsCmdBlk
[11] = ()((
mx_ª•_Àn
 >> 16) & 0xff);

2233 
rcvc›yªsCmdBlk
[12] = ()((
mx_ª•_Àn
 >> 8) & 0xff);

2234 
rcvc›yªsCmdBlk
[13] = ()(
mx_ª•_Àn
 & 0xff);

2236 i‡(
NULL
 =
sg_w¨nögs_°rm
)

2237 
sg_w¨nögs_°rm
 = 
°dîr
;

2238 i‡(
vîbo£
) {

2239 
	`Ârötf
(
sg_w¨nögs_°rm
, " Receive copyÑesults cmd: ");

2240 
k
 = 0; k < 
RECEIVE_COPY_RESULTS_CMDLEN
; ++k)

2241 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
rcvc›yªsCmdBlk
[
k
]);

2242 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

2245 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

2246 i‡(
NULL
 =
±vp
) {

2247 
	`Ârötf
(
sg_w¨nögs_°rm
, "receive copyÑesults: out of "

2251 
	`£t_scsi_±_cdb
(
±vp
, 
rcvc›yªsCmdBlk
, (rcvcopyresCmdBlk));

2252 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

2253 
	`£t_scsi_±_d©a_ö
(
±vp
, (*)
ª•
, 
mx_ª•_Àn
);

2254 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

2255 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "ª˚ivêc›yÑesu…s", 
ªs
,

2256 
mx_ª•_Àn
, 
£n£_b
, 
noisy
, 
vîbo£
,

2257 &
£n£_ˇt
);

2258 i‡(-1 =
ªt
)

2260 i‡(-2 =
ªt
) {

2261 
£n£_ˇt
) {

2262 
SG_LIB_CAT_NOT_READY
:

2263 
SG_LIB_CAT_INVALID_OP
:

2264 
SG_LIB_CAT_ILLEGAL_REQ
:

2265 
SG_LIB_CAT_UNIT_ATTENTION
:

2266 
SG_LIB_CAT_ABORTED_COMMAND
:

2267 
ªt
 = 
£n£_ˇt
;

2269 
SG_LIB_CAT_RECOVERED
:

2270 
SG_LIB_CAT_NO_SENSE
:

2271 
ªt
 = 0;

2274 
ªt
 = -1;

2278 
ªt
 = 0;

2279 
	`de°ru˘_scsi_±_obj
(
±vp
);

2280  
ªt
;

2281 
	}
}

2289 
	$sg_Œ_exãnded_c›y
(
sg_fd
, * 
ª•
,

2290 
mx_ª•_Àn
, 
noisy
, 
vîbo£
)

2292 
k
, 
ªs
, 
ªt
, 
£n£_ˇt
;

2293 
xc›yCmdBlk
[
EXTENDED_COPY_CMDLEN
] =

2294 {
EXTENDED_COPY_CMD
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

2295 
£n£_b
[
SENSE_BUFF_LEN
];

2296 
sg_±_ba£
 * 
±vp
;

2298 
xc›yCmdBlk
[10] = ()((
mx_ª•_Àn
 >> 24) & 0xff);

2299 
xc›yCmdBlk
[11] = ()((
mx_ª•_Àn
 >> 16) & 0xff);

2300 
xc›yCmdBlk
[12] = ()((
mx_ª•_Àn
 >> 8) & 0xff);

2301 
xc›yCmdBlk
[13] = ()(
mx_ª•_Àn
 & 0xff);

2303 i‡(
NULL
 =
sg_w¨nögs_°rm
)

2304 
sg_w¨nögs_°rm
 = 
°dîr
;

2305 i‡(
vîbo£
) {

2306 
	`Ârötf
(
sg_w¨nögs_°rm
, " Extended copy cmd: ");

2307 
k
 = 0; k < 
EXTENDED_COPY_CMDLEN
; ++k)

2308 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
xc›yCmdBlk
[
k
]);

2309 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

2312 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

2313 i‡(
NULL
 =
±vp
) {

2314 
	`Ârötf
(
sg_w¨nögs_°rm
, "extended copy: out of memory\n");

2317 
	`£t_scsi_±_cdb
(
±vp
, 
xc›yCmdBlk
, (xcopyCmdBlk));

2318 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

2319 
	`£t_scsi_±_d©a_out
(
±vp
, (*)
ª•
, 
mx_ª•_Àn
);

2320 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

2321 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "exãnded c›y", 
ªs
,

2322 
mx_ª•_Àn
, 
£n£_b
, 
noisy
, 
vîbo£
,

2323 &
£n£_ˇt
);

2324 i‡(-1 =
ªt
)

2326 i‡(-2 =
ªt
) {

2327 
£n£_ˇt
) {

2328 
SG_LIB_CAT_NOT_READY
:

2329 
SG_LIB_CAT_INVALID_OP
:

2330 
SG_LIB_CAT_ILLEGAL_REQ
:

2331 
SG_LIB_CAT_UNIT_ATTENTION
:

2332 
SG_LIB_CAT_ABORTED_COMMAND
:

2333 
ªt
 = 
£n£_ˇt
;

2335 
SG_LIB_CAT_RECOVERED
:

2336 
SG_LIB_CAT_NO_SENSE
:

2337 
ªt
 = 0;

2340 
ªt
 = -1;

2344 
ªt
 = 0;

2345 
	`de°ru˘_scsi_±_obj
(
±vp
);

2346  
ªt
;

2347 
	}
}

	@lib/sg_cmds_mmc.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~<uni°d.h
>

12 
	#__STDC_FORMAT_MACROS
 1

	)

13 
	~<öây≥s.h
>

15 
	~"sg_lib.h
"

16 
	~"sg_cmds_basic.h
"

17 
	~"sg_cmds_mmc.h
"

18 
	~"sg_±.h
"

20 #ifde‡
HAVE_CONFIG_H


21 
	~"c⁄fig.h
"

25 
	#SENSE_BUFF_LEN
 64

	)

27 
	#DEF_PT_TIMEOUT
 60

	)

29 
	#GET_CONFIG_CMD
 0x46

	)

30 
	#GET_CONFIG_CMD_LEN
 10

	)

31 
	#GET_PERFORMANCE_CMD
 0xac

	)

32 
	#GET_PERFORMANCE_CMD_LEN
 12

	)

33 
	#SET_CD_SPEED_CMD
 0xbb

	)

34 
	#SET_CD_SPEED_CMDLEN
 12

	)

35 
	#SET_STREAMING_CMD
 0xb6

	)

36 
	#SET_STREAMING_CMDLEN
 12

	)

45 
	$sg_Œ_£t_cd_•ìd
(
sg_fd
, 
rŸ_c⁄åﬁ
, 
drv_ªad_•ìd
,

46 
drv_wrôe_•ìd
, 
noisy
, 
vîbo£
)

48 
ªs
, 
ªt
, 
k
, 
£n£_ˇt
;

49 
scsCmdBlk
[
SET_CD_SPEED_CMDLEN
] = {
SET_CD_SPEED_CMD
, 0,

51 
£n£_b
[
SENSE_BUFF_LEN
];

52 
sg_±_ba£
 * 
±vp
;

54 i‡(
NULL
 =
sg_w¨nögs_°rm
)

55 
sg_w¨nögs_°rm
 = 
°dîr
;

56 
scsCmdBlk
[1] |(
rŸ_c⁄åﬁ
 & 0x3);

57 
scsCmdBlk
[2] = (
drv_ªad_•ìd
 >> 8) & 0xff;

58 
scsCmdBlk
[3] = 
drv_ªad_•ìd
 & 0xff;

59 
scsCmdBlk
[4] = (
drv_wrôe_•ìd
 >> 8) & 0xff;

60 
scsCmdBlk
[5] = 
drv_wrôe_•ìd
 & 0xff;

62 i‡(
vîbo£
) {

63 
	`Ârötf
(
sg_w¨nögs_°rm
, " set cd speed cdb: ");

64 
k
 = 0; k < 
SET_CD_SPEED_CMDLEN
; ++k)

65 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
scsCmdBlk
[
k
]);

66 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

68 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

69 i‡(
NULL
 =
±vp
) {

70 
	`Ârötf
(
sg_w¨nögs_°rm
, "set cd speed: out of memory\n");

73 
	`£t_scsi_±_cdb
(
±vp
, 
scsCmdBlk
, (scsCmdBlk));

74 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

75 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

76 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "£àcd s≥ed", 
ªs
, 0,

77 
£n£_b
, 
noisy
, 
vîbo£
, &
£n£_ˇt
);

78 i‡(-1 =
ªt
)

80 i‡(-2 =
ªt
) {

81 
£n£_ˇt
) {

82 
SG_LIB_CAT_NOT_READY
:

83 
SG_LIB_CAT_UNIT_ATTENTION
:

84 
SG_LIB_CAT_INVALID_OP
:

85 
SG_LIB_CAT_ILLEGAL_REQ
:

86 
SG_LIB_CAT_ABORTED_COMMAND
:

87 
ªt
 = 
£n£_ˇt
;

89 
SG_LIB_CAT_RECOVERED
:

90 
SG_LIB_CAT_NO_SENSE
:

91 
ªt
 = 0;

94 
ªt
 = -1;

98 
ªt
 = 0;

100 
	`de°ru˘_scsi_±_obj
(
±vp
);

101  
ªt
;

102 
	}
}

109 
	$sg_Œ_gë_c⁄fig
(
sg_fd
, 
π
, 
°¨tög
, * 
ª•
,

110 
mx_ª•_Àn
, 
noisy
, 
vîbo£
)

112 
ªs
, 
k
, 
ªt
, 
£n£_ˇt
;

113 
gcCmdBlk
[
GET_CONFIG_CMD_LEN
] = {
GET_CONFIG_CMD
, 0, 0, 0,

115 
£n£_b
[
SENSE_BUFF_LEN
];

116 
sg_±_ba£
 * 
±vp
;

118 i‡(
NULL
 =
sg_w¨nögs_°rm
)

119 
sg_w¨nögs_°rm
 = 
°dîr
;

120 i‡((
π
 < 0) || (rt > 3)) {

121 
	`Ârötf
(
sg_w¨nögs_°rm
, "BadÑàvÆue: %d\n", 
π
);

124 
gcCmdBlk
[1] = (
π
 & 0x3);

125 i‡((
°¨tög
 < 0) || (starting > 0xffff)) {

126 
	`Ârötf
(
sg_w¨nögs_°rm
, "Bad starting fieldÇumber: 0x%x\n",

127 
°¨tög
);

130 
gcCmdBlk
[2] = ()((
°¨tög
 >> 8) & 0xff);

131 
gcCmdBlk
[3] = ()(
°¨tög
 & 0xff);

132 i‡((
mx_ª•_Àn
 < 0) || (mx_resp_len > 0xffff)) {

133 
	`Ârötf
(
sg_w¨nögs_°rm
, "Bad mx_ª•_Àn: 0x%x\n", 
°¨tög
);

136 
gcCmdBlk
[7] = ()((
mx_ª•_Àn
 >> 8) & 0xff);

137 
gcCmdBlk
[8] = ()(
mx_ª•_Àn
 & 0xff);

139 i‡(
vîbo£
) {

140 
	`Ârötf
(
sg_w¨nögs_°rm
, " Get Configuration cdb: ");

141 
k
 = 0; k < 
GET_CONFIG_CMD_LEN
; ++k)

142 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
gcCmdBlk
[
k
]);

143 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

146 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

147 i‡(
NULL
 =
±vp
) {

148 
	`Ârötf
(
sg_w¨nögs_°rm
, "get configuration: out of memory\n");

151 
	`£t_scsi_±_cdb
(
±vp
, 
gcCmdBlk
, (gcCmdBlk));

152 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

153 
	`£t_scsi_±_d©a_ö
(
±vp
, (*)
ª•
, 
mx_ª•_Àn
);

154 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

155 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "gë c⁄figuøti⁄", 
ªs
, 
mx_ª•_Àn
,

156 
£n£_b
, 
noisy
, 
vîbo£
, &
£n£_ˇt
);

157 i‡(-1 =
ªt
)

159 i‡(-2 =
ªt
) {

160 
£n£_ˇt
) {

161 
SG_LIB_CAT_INVALID_OP
:

162 
SG_LIB_CAT_ILLEGAL_REQ
:

163 
SG_LIB_CAT_UNIT_ATTENTION
:

164 
SG_LIB_CAT_ABORTED_COMMAND
:

165 
ªt
 = 
£n£_ˇt
;

167 
SG_LIB_CAT_RECOVERED
:

168 
SG_LIB_CAT_NO_SENSE
:

169 
ªt
 = 0;

172 
ªt
 = -1;

176 i‡((
vîbo£
 > 2Ë&& (
ªt
 > 3)) {

177 * 
u˝
;

178 
Àn
;

180 
u˝
 = (*)
ª•
;

181 
Àn
 = (
u˝
[0] << 24) + (ucp[1] << 16) + (ucp[2] << 8) + ucp[3] +

183 i‡(
Àn
 < 0)

184 
Àn
 = 0;

185 
Àn
 = (
ªt
 <Üen) ?Ñet :Üen;

186 
	`Ârötf
(
sg_w¨nögs_°rm
, " get configuration:Ñesponse%s\n",

187 (
Àn
 > 256 ? ", first 256 bytes" : ""));

188 
	`dSåHex
((c⁄° *)
ª•
, (
Àn
 > 256 ? 256 :Üen), -1);

190 
ªt
 = 0;

192 
	`de°ru˘_scsi_±_obj
(
±vp
);

193  
ªt
;

194 
	}
}

201 
	$sg_Œ_gë_≥rf‹m™˚
(
sg_fd
, 
d©a_ty≥
, 
°¨tög_lba
,

202 
max_num_desc
, 
ây≥
, * 
ª•
,

203 
mx_ª•_Àn
, 
noisy
, 
vîbo£
)

205 
ªs
, 
k
, 
ªt
, 
£n£_ˇt
;

206 
gpCmdBlk
[
GET_PERFORMANCE_CMD_LEN
] = {
GET_PERFORMANCE_CMD
, 0,

208 
£n£_b
[
SENSE_BUFF_LEN
];

209 
sg_±_ba£
 * 
±vp
;

211 i‡(
NULL
 =
sg_w¨nögs_°rm
)

212 
sg_w¨nögs_°rm
 = 
°dîr
;

213 i‡((
d©a_ty≥
 < 0) || (data_type > 0x1f)) {

214 
	`Ârötf
(
sg_w¨nögs_°rm
, "Bad d©a_ty≥ vÆue: %d\n", 
d©a_ty≥
);

217 
gpCmdBlk
[1] = (
d©a_ty≥
 & 0x1f);

218 
gpCmdBlk
[2] = ()((
°¨tög_lba
 >> 24) & 0xff);

219 
gpCmdBlk
[3] = ()((
°¨tög_lba
 >> 16) & 0xff);

220 
gpCmdBlk
[4] = ()((
°¨tög_lba
 >> 8) & 0xff);

221 
gpCmdBlk
[3] = ()(
°¨tög_lba
 & 0xff);

222 i‡((
max_num_desc
 < 0) || (max_num_desc > 0xffff)) {

223 
	`Ârötf
(
sg_w¨nögs_°rm
, "Bad max_num_desc: 0x%x\n", 
max_num_desc
);

226 
gpCmdBlk
[8] = ()((
max_num_desc
 >> 8) & 0xff);

227 
gpCmdBlk
[9] = ()(
max_num_desc
 & 0xff);

228 i‡((
ây≥
 < 0) || (ttype > 0xff)) {

229 
	`Ârötf
(
sg_w¨nögs_°rm
, "BadÅy≥: 0x%x\n", 
ây≥
);

232 
gpCmdBlk
[10] = ()
ây≥
;

234 i‡(
vîbo£
) {

235 
	`Ârötf
(
sg_w¨nögs_°rm
, " Get Performance cdb: ");

236 
k
 = 0; k < 
GET_PERFORMANCE_CMD_LEN
; ++k)

237 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
gpCmdBlk
[
k
]);

238 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

241 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

242 i‡(
NULL
 =
±vp
) {

243 
	`Ârötf
(
sg_w¨nögs_°rm
, "getÖerformance: out of memory\n");

246 
	`£t_scsi_±_cdb
(
±vp
, 
gpCmdBlk
, (gpCmdBlk));

247 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

248 
	`£t_scsi_±_d©a_ö
(
±vp
, (*)
ª•
, 
mx_ª•_Àn
);

249 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

250 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "gëÖîf‹m™˚", 
ªs
, 
mx_ª•_Àn
,

251 
£n£_b
, 
noisy
, 
vîbo£
, &
£n£_ˇt
);

252 i‡(-1 =
ªt
)

254 i‡(-2 =
ªt
) {

255 
£n£_ˇt
) {

256 
SG_LIB_CAT_INVALID_OP
:

257 
SG_LIB_CAT_ILLEGAL_REQ
:

258 
SG_LIB_CAT_UNIT_ATTENTION
:

259 
SG_LIB_CAT_ABORTED_COMMAND
:

260 
ªt
 = 
£n£_ˇt
;

262 
SG_LIB_CAT_RECOVERED
:

263 
SG_LIB_CAT_NO_SENSE
:

264 
ªt
 = 0;

267 
ªt
 = -1;

271 i‡((
vîbo£
 > 2Ë&& (
ªt
 > 3)) {

272 * 
u˝
;

273 
Àn
;

275 
u˝
 = (*)
ª•
;

276 
Àn
 = (
u˝
[0] << 24) + (ucp[1] << 16) + (ucp[2] << 8) + ucp[3] +

278 i‡(
Àn
 < 0)

279 
Àn
 = 0;

280 
Àn
 = (
ªt
 <Üen) ?Ñet :Üen;

281 
	`Ârötf
(
sg_w¨nögs_°rm
, " getÖerformance::Ñesponse%s\n",

282 (
Àn
 > 256 ? ", first 256 bytes" : ""));

283 
	`dSåHex
((c⁄° *)
ª•
, (
Àn
 > 256 ? 256 :Üen), -1);

285 
ªt
 = 0;

287 
	`de°ru˘_scsi_±_obj
(
±vp
);

288  
ªt
;

289 
	}
}

297 
	$sg_Œ_£t_°ªamög
(
sg_fd
, 
ty≥
, * 
∑ømp
, 
∑øm_Àn
,

298 
noisy
, 
vîbo£
)

300 
k
, 
ªs
, 
ªt
, 
£n£_ˇt
;

301 
ssCmdBlk
[
SET_STREAMING_CMDLEN
] =

302 {
SET_STREAMING_CMD
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

303 
£n£_b
[
SENSE_BUFF_LEN
];

304 
sg_±_ba£
 * 
±vp
;

306 
ssCmdBlk
[8] = 
ty≥
;

307 
ssCmdBlk
[9] = (
∑øm_Àn
 >> 8) & 0xff;

308 
ssCmdBlk
[10] = 
∑øm_Àn
 & 0xff;

309 i‡(
NULL
 =
sg_w¨nögs_°rm
)

310 
sg_w¨nögs_°rm
 = 
°dîr
;

311 i‡(
vîbo£
) {

312 
	`Ârötf
(
sg_w¨nögs_°rm
, " set streaming cdb: ");

313 
k
 = 0; k < 
SET_STREAMING_CMDLEN
; ++k)

314 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
ssCmdBlk
[
k
]);

315 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

316 i‡((
vîbo£
 > 1Ë&& 
∑ømp
 && 
∑øm_Àn
) {

317 
	`Ârötf
(
sg_w¨nögs_°rm
, " set streaming "

319 
	`dSåHex
((c⁄° *)
∑ømp
, 
∑øm_Àn
, -1);

323 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

324 i‡(
NULL
 =
±vp
) {

325 
	`Ârötf
(
sg_w¨nögs_°rm
, "set streaming: out of memory\n");

328 
	`£t_scsi_±_cdb
(
±vp
, 
ssCmdBlk
, (ssCmdBlk));

329 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

330 
	`£t_scsi_±_d©a_out
(
±vp
, (*)
∑ømp
, 
∑øm_Àn
);

331 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

332 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "£à°ªamög", 
ªs
, 0,

333 
£n£_b
, 
noisy
, 
vîbo£
, &
£n£_ˇt
);

334 i‡(-1 =
ªt
)

336 i‡(-2 =
ªt
) {

337 
£n£_ˇt
) {

338 
SG_LIB_CAT_NOT_READY
:

339 
SG_LIB_CAT_INVALID_OP
:

340 
SG_LIB_CAT_ILLEGAL_REQ
:

341 
SG_LIB_CAT_UNIT_ATTENTION
:

342 
SG_LIB_CAT_ABORTED_COMMAND
:

343 
ªt
 = 
£n£_ˇt
;

345 
SG_LIB_CAT_RECOVERED
:

346 
SG_LIB_CAT_NO_SENSE
:

347 
ªt
 = 0;

350 
ªt
 = -1;

354 
ªt
 = 0;

355 
	`de°ru˘_scsi_±_obj
(
±vp
);

356  
ªt
;

357 
	}
}

	@lib/sg_io_linux.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~<˘y≥.h
>

16 #ifde‡
HAVE_CONFIG_H


17 
	~"c⁄fig.h
"

19 #ifde‡
SG_LIB_LINUX


21 
	~"sg_io_löux.h
"

28 
	$sg_¥öt_masked_°©us
(
masked_°©us
)

30 
scsi_°©us
 = (
masked_°©us
 << 1) & 0x7e;

32 
	`sg_¥öt_scsi_°©us
(
scsi_°©us
);

33 
	}
}

35 c⁄° * 
	glöux_ho°_byãs
[] = {

43 
	#LINUX_HOST_BYTES_SZ
 \

44 ()((
löux_ho°_byãs
Ë/ ÷öux_ho°_byãs[0]))

	)

47 
	$sg_¥öt_ho°_°©us
(
ho°_°©us
)

49 i‡(
NULL
 =
sg_w¨nögs_°rm
)

50 
sg_w¨nögs_°rm
 = 
°dîr
;

51 
	`Ârötf
(
sg_w¨nögs_°rm
, "Ho°_°©us=0x%02x ", 
ho°_°©us
);

52 i‡((
ho°_°©us
 < 0Ë|| (ho°_°©u†>
LINUX_HOST_BYTES_SZ
))

53 
	`Ârötf
(
sg_w¨nögs_°rm
, "is invalid ");

55 
	`Ârötf
(
sg_w¨nögs_°rm
, "[%s] ", 
löux_ho°_byãs
[
ho°_°©us
]);

56 
	}
}

58 c⁄° * 
	glöux_drivî_byãs
[] = {

64 
	#LINUX_DRIVER_BYTES_SZ
 \

65 ()((
löux_drivî_byãs
Ë/ ÷öux_drivî_byãs[0]))

	)

67 c⁄° * 
	glöux_drivî_sugge°s
[] = {

73 
	#LINUX_DRIVER_SUGGESTS_SZ
 \

74 ()((
löux_drivî_sugge°s
Ë/ ÷öux_drivî_sugge°s[0]))

	)

78 
	$sg_¥öt_drivî_°©us
(
drivî_°©us
)

80 
driv
, 
sugg
;

81 c⁄° * 
driv_˝
 = "invalid";

82 c⁄° * 
sugg_˝
 = "invalid";

84 
driv
 = 
drivî_°©us
 & 
SG_LIB_DRIVER_MASK
;

85 i‡(
driv
 < 
LINUX_DRIVER_BYTES_SZ
)

86 
driv_˝
 = 
löux_drivî_byãs
[
driv
];

87 
sugg
 = (
drivî_°©us
 & 
SG_LIB_SUGGEST_MASK
) >> 4;

88 i‡(
sugg
 < 
LINUX_DRIVER_SUGGESTS_SZ
)

89 
sugg_˝
 = 
löux_drivî_sugge°s
[
sugg
];

90 i‡(
NULL
 =
sg_w¨nögs_°rm
)

91 
sg_w¨nögs_°rm
 = 
°dîr
;

92 
	`Ârötf
(
sg_w¨nögs_°rm
, "Drivî_°©us=0x%02x", 
drivî_°©us
);

93 
	`Ârötf
(
sg_w¨nögs_°rm
, " [%s, %s] ", 
driv_˝
, 
sugg_˝
);

94 
	}
}

99 
	$sg_löux_£n£_¥öt
(c⁄° * 
Àadö
, 
scsi_°©us
, 
ho°_°©us
,

100 
drivî_°©us
, c⁄° * 
£n£_buf„r
,

101 
sb_Àn
, 
øw_söfo
)

103 
d⁄e_Àadö
 = 0;

104 
d⁄e_£n£
 = 0;

106 i‡(
NULL
 =
sg_w¨nögs_°rm
)

107 
sg_w¨nögs_°rm
 = 
°dîr
;

108 
scsi_°©us
 &= 0x7e;

109 i‡((0 =
scsi_°©us
Ë&& (0 =
ho°_°©us
Ë&& (0 =
drivî_°©us
))

111 i‡(0 !
scsi_°©us
) {

112 i‡(
Àadö
)

113 
	`Ârötf
(
sg_w¨nögs_°rm
, "%s: ", 
Àadö
);

114 
d⁄e_Àadö
 = 1;

115 
	`Ârötf
(
sg_w¨nögs_°rm
, "SCSI status: ");

116 
	`sg_¥öt_scsi_°©us
(
scsi_°©us
);

117 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

118 i‡(
£n£_buf„r
 && ((
scsi_°©us
 =
SAM_STAT_CHECK_CONDITION
) ||

119 (
scsi_°©us
 =
SAM_STAT_COMMAND_TERMINATED
))) {

121 
	`sg_¥öt_£n£
(0, 
£n£_buf„r
, 
sb_Àn
, 
øw_söfo
);

122 
d⁄e_£n£
 = 1;

125 i‡(0 !
ho°_°©us
) {

126 i‡(
Àadö
 && (! 
d⁄e_Àadö
))

127 
	`Ârötf
(
sg_w¨nögs_°rm
, "%s: ", 
Àadö
);

128 i‡(
d⁄e_Àadö
)

129 
	`Ârötf
(
sg_w¨nögs_°rm
, "plus...: ");

131 
d⁄e_Àadö
 = 1;

132 
	`sg_¥öt_ho°_°©us
(
ho°_°©us
);

133 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

135 i‡(0 !
drivî_°©us
) {

136 i‡(
d⁄e_£n£
 &&

137 (
SG_LIB_DRIVER_SENSE
 =(
SG_LIB_DRIVER_MASK
 & 
drivî_°©us
)))

139 i‡(
Àadö
 && (! 
d⁄e_Àadö
))

140 
	`Ârötf
(
sg_w¨nögs_°rm
, "%s: ", 
Àadö
);

141 i‡(
d⁄e_Àadö
)

142 
	`Ârötf
(
sg_w¨nögs_°rm
, "plus...: ");

144 
d⁄e_Àadö
 = 1;

145 
	`sg_¥öt_drivî_°©us
(
drivî_°©us
);

146 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

147 i‡(
£n£_buf„r
 && (! 
d⁄e_£n£
) &&

148 (
SG_LIB_DRIVER_SENSE
 =(
SG_LIB_DRIVER_MASK
 & 
drivî_°©us
)))

149 
	`sg_¥öt_£n£
(0, 
£n£_buf„r
, 
sb_Àn
, 
øw_söfo
);

152 
	}
}

154 #ifde‡
SG_IO


157 
	$sg_n‹mÆize_£n£
(c⁄° 
sg_io_hdr
 * 
hp
,

158 
sg_scsi_£n£_hdr
 * 
sshp
)

160 i‡((
NULL
 =
hp
Ë|| (0 =hp->
sb_Àn_wr
)) {

161 i‡(
sshp
)

162 
	`mem£t
(
sshp
, 0, (
sg_scsi_£n£_hdr
));

165  
	`sg_scsi_n‹mÆize_£n£
(
hp
->
sbp
, hp->
sb_Àn_wr
, 
sshp
);

166 
	}
}

171 
	$sg_chk_n_¥öt3
(c⁄° * 
Àadö
, 
sg_io_hdr
 * 
hp
,

172 
øw_söfo
)

174  
	`sg_löux_£n£_¥öt
(
Àadö
, 
hp
->
°©us
, hp->
ho°_°©us
,

175 
hp
->
drivî_°©us
, hp->
sbp
, hp->
sb_Àn_wr
,

176 
øw_söfo
);

177 
	}
}

183 
	$sg_chk_n_¥öt
(c⁄° * 
Àadö
, 
masked_°©us
, 
ho°_°©us
,

184 
drivî_°©us
, c⁄° * 
£n£_buf„r
,

185 
sb_Àn
, 
øw_söfo
)

187 
scsi_°©us
 = (
masked_°©us
 << 1) & 0x7e;

189  
	`sg_löux_£n£_¥öt
(
Àadö
, 
scsi_°©us
, 
ho°_°©us
,

190 
drivî_°©us
, 
£n£_buf„r
, 
sb_Àn
,

191 
øw_söfo
);

192 
	}
}

194 #ifde‡
SG_IO


196 
	$sg_îr_ˇãg‹y3
(
sg_io_hdr
 * 
hp
)

198  
	`sg_îr_ˇãg‹y_√w
(
hp
->
°©us
, hp->
ho°_°©us
,

199 
hp
->
drivî_°©us
, hp->
sbp
, hp->
sb_Àn_wr
);

200 
	}
}

204 
	$sg_îr_ˇãg‹y
(
masked_°©us
, 
ho°_°©us
, 
drivî_°©us
,

205 c⁄° * 
£n£_buf„r
, 
sb_Àn
)

207 
scsi_°©us
 = (
masked_°©us
 << 1) & 0x7e;

209  
	`sg_îr_ˇãg‹y_√w
(
scsi_°©us
, 
ho°_°©us
, 
drivî_°©us
,

210 
£n£_buf„r
, 
sb_Àn
);

211 
	}
}

214 
	$sg_îr_ˇãg‹y_√w
(
scsi_°©us
, 
ho°_°©us
, 
drivî_°©us
,

215 c⁄° * 
£n£_buf„r
, 
sb_Àn
)

217 
masked_drivî_°©us
 = (
SG_LIB_DRIVER_MASK
 & 
drivî_°©us
);

219 
scsi_°©us
 &= 0x7e;

220 i‡((0 =
scsi_°©us
Ë&& (0 =
ho°_°©us
) &&

221 (0 =
masked_drivî_°©us
))

222  
SG_LIB_CAT_CLEAN
;

223 i‡((
SAM_STAT_CHECK_CONDITION
 =
scsi_°©us
) ||

224 (
SAM_STAT_COMMAND_TERMINATED
 =
scsi_°©us
) ||

225 (
SG_LIB_DRIVER_SENSE
 =
masked_drivî_°©us
))

226  
	`sg_îr_ˇãg‹y_£n£
(
£n£_buf„r
, 
sb_Àn
);

227 i‡(0 !
ho°_°©us
) {

228 i‡((
SG_LIB_DID_NO_CONNECT
 =
ho°_°©us
) ||

229 (
SG_LIB_DID_BUS_BUSY
 =
ho°_°©us
) ||

230 (
SG_LIB_DID_TIME_OUT
 =
ho°_°©us
))

231  
SG_LIB_CAT_TIMEOUT
;

233 i‡(
SG_LIB_DRIVER_TIMEOUT
 =
masked_drivî_°©us
)

234  
SG_LIB_CAT_TIMEOUT
;

235  
SG_LIB_CAT_OTHER
;

236 
	}
}

	@lib/sg_lib.c

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<°d¨g.h
>

33 
	~<°rög.h
>

34 
	~<˘y≥.h
>

35 
	#__STDC_FORMAT_MACROS
 1

	)

36 
	~<öây≥s.h
>

38 
	~"sg_lib.h
"

39 
	~"sg_lib_d©a.h
"

41 #ifde‡
HAVE_CONFIG_H


42 
	~"c⁄fig.h
"

47 
	#ASCQ_ATA_PT_INFO_AVAILABLE
 0x1d

	)

49 
FILE
 * 
	gsg_w¨nögs_°rm
 = 
NULL
;

52 
dSåHexEº
(c⁄° * 
°r
, 
Àn
, 
b_Àn
, * 
b
);

63 
	$my_¢¥ötf
(* 
˝
, 
˝_max_Àn
, c⁄° * 
fmt
, ...)

65 
va_li°
 
¨gs
;

66 
n
;

68 i‡(
˝_max_Àn
 < 2)

70 
	`va_°¨t
(
¨gs
, 
fmt
);

71 
n
 = 
	`v¢¥ötf
(
˝
, 
˝_max_Àn
, 
fmt
, 
¨gs
);

72 
	`va_íd
(
¨gs
);

73  (
n
 < 
˝_max_Àn
) ?Ç : (cp_max_len - 1);

74 
	}
}

79 c⁄° 
sg_lib_vÆue_«me_t
 *

80 
	$gë_vÆue_«me
(c⁄° 
sg_lib_vÆue_«me_t
 * 
¨r
, 
vÆue
,

81 
≥ri_ty≥
)

83 c⁄° 
sg_lib_vÆue_«me_t
 * 
vp
 = 
¨r
;

84 c⁄° 
sg_lib_vÆue_«me_t
 * 
hﬁdp
;

86 ; 
vp
->
«me
; ++vp) {

87 i‡(
vÆue
 =
vp
->value) {

88 i‡(
≥ri_ty≥
 =
vp
->
≥ri_dev_ty≥
)

89  
vp
;

90 
hﬁdp
 = 
vp
;

91 (
vp
 + 1)->
«me
 && (
vÆue
 == (vp + 1)->value)) {

92 ++
vp
;

93 i‡(
≥ri_ty≥
 =
vp
->
≥ri_dev_ty≥
)

94  
vp
;

96  
hﬁdp
;

99  
NULL
;

100 
	}
}

103 
	$sg_£t_w¨nögs_°rm
(
FILE
 * 
w¨nögs_°rm
)

105 
sg_w¨nögs_°rm
 = 
w¨nögs_°rm
;

106 
	}
}

108 
	#CMD_NAME_LEN
 128

	)

111 
	$sg_¥öt_comm™d
(c⁄° * 
comm™d
)

113 
k
, 
sz
;

114 
buff
[
CMD_NAME_LEN
];

116 
	`sg_gë_comm™d_«me
(
comm™d
, 0, 
CMD_NAME_LEN
, 
buff
);

117 
buff
[
CMD_NAME_LEN
 - 1] = '\0';

119 i‡(
NULL
 =
sg_w¨nögs_°rm
)

120 
sg_w¨nögs_°rm
 = 
°dîr
;

121 
	`Ârötf
(
sg_w¨nögs_°rm
, "%†[", 
buff
);

122 i‡(
SG_VARIABLE_LENGTH_CMD
 =
comm™d
[0])

123 
sz
 = 
comm™d
[7] + 8;

125 
sz
 = 
	`sg_gë_comm™d_size
(
comm™d
[0]);

126 
k
 = 0; k < 
sz
; ++k)

127 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
comm™d
[
k
]);

128 
	`Ârötf
(
sg_w¨nögs_°rm
, "]\n");

129 
	}
}

132 
	$sg_gë_scsi_°©us_°r
(
scsi_°©us
, 
buff_Àn
, * 
buff
)

134 c⁄° * 
c˝
;

136 i‡((
NULL
 =
buff
Ë|| (
buff_Àn
 < 1))

138 i‡(1 =
buff_Àn
) {

139 
buff
[0] = '\0';

142 
scsi_°©us
 &= 0x7e;

143 
scsi_°©us
) {

144 0: 
c˝
 = "Good"; ;

145 0x2: 
c˝
 = "Check Condition"; ;

146 0x4: 
c˝
 = "Condition Met"; ;

147 0x8: 
c˝
 = "Busy"; ;

148 0x10: 
c˝
 = "Intermediate (obsolete)"; ;

149 0x14: 
c˝
 = "Intermediate-Condition Met (obs)"; ;

150 0x18: 
c˝
 = "Reservation Conflict"; ;

151 0x22: 
c˝
 = "Command Terminated (obsolete)"; ;

152 0x28: 
c˝
 = "Task set Full"; ;

153 0x30: 
c˝
 = "ACA Active"; ;

154 0x40: 
c˝
 = "Task Aborted"; ;

155 : 
c˝
 = "Unknown status"; ;

157 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "%s", 
c˝
);

158 
	}
}

161 
	$sg_¥öt_scsi_°©us
(
scsi_°©us
)

163 
buff
[128];

165 
	`sg_gë_scsi_°©us_°r
(
scsi_°©us
, (
buff
) - 1, buff);

166 
buff
[(buff) - 1] = '\0';

167 i‡(
NULL
 =
sg_w¨nögs_°rm
)

168 
sg_w¨nögs_°rm
 = 
°dîr
;

169 
	`Ârötf
(
sg_w¨nögs_°rm
, "%†", 
buff
);

170 
	}
}

174 
	$sg_gë_£n£_key_°r
(
£n£_key
, 
buff_Àn
, * 
buff
)

176 i‡(1 =
buff_Àn
) {

177 
buff
[0] = '\0';

178  
buff
;

180 i‡((
£n£_key
 >= 0) && (sense_key < 16))

181 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "%s", 
sg_lib_£n£_key_desc
[
£n£_key
]);

183 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "övÆid vÆue: 0x%x", 
£n£_key
);

184  
buff
;

185 
	}
}

188 
	$sg_gë_asc_ascq_°r
(
asc
, 
ascq
, 
buff_Àn
, * 
buff
)

190 
k
, 
num
, 
æí
;

191 
found
 = 0;

192 
sg_lib_asc_ascq_t
 * 
eù
;

193 
sg_lib_asc_ascq_ønge_t
 * 
ei2p
;

195 i‡(1 =
buff_Àn
) {

196 
buff
[0] = '\0';

197  
buff
;

199 
k
 = 0; 
sg_lib_asc_ascq_ønge
[k].
ãxt
; ++k) {

200 
ei2p
 = &
sg_lib_asc_ascq_ønge
[
k
];

201 i‡((
ei2p
->
asc
 ==ásc) &&

202 (
ascq
 >
ei2p
->
ascq_mö
) &&

203 (
ascq
 <
ei2p
->
ascq_max
)) {

204 
found
 = 1;

205 
num
 = 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "Additional sense: ");

206 
æí
 = 
buff_Àn
 - 
num
;

207 
num
 +
	`my_¢¥ötf
(
buff
 +Çum, ((
æí
 > 0) ?Ñlen : 0),

208 
ei2p
->
ãxt
, 
ascq
);

211 i‡(
found
)

212  
buff
;

214 
k
 = 0; 
sg_lib_asc_ascq
[k].
ãxt
; ++k) {

215 
eù
 = &
sg_lib_asc_ascq
[
k
];

216 i‡(
eù
->
asc
 ==ásc &&

217 
eù
->
ascq
 ==áscq) {

218 
found
 = 1;

219 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "Addôi⁄Æ sí£: %s", 
eù
->
ãxt
);

222 i‡(! 
found
) {

223 i‡(
asc
 >= 0x80)

224 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "vendor specific ASC=%02x, "

225 "ASCQ=%02x (hex)", 
asc
, 
ascq
);

226 i‡(
ascq
 >= 0x80)

227 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "ASC=%02x, vendor specific "

228 "quÆifiˇti⁄ ASCQ=%02x (hex)", 
asc
, 
ascq
);

230 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "ASC=%02x, ASCQ=%02x (hex)", 
asc
,

231 
ascq
);

233  
buff
;

234 
	}
}

237 
	$sg_scsi_£n£_desc_föd
(c⁄° * 
£n£p
, 
£n£_Àn
,

238 
desc_ty≥
)

240 
add_sb_Àn
, 
add_d_Àn
, 
desc_Àn
, 
k
;

241 c⁄° * 
des˝
;

243 i‡((
£n£_Àn
 < 8Ë|| (0 =(
add_sb_Àn
 = 
£n£p
[7])))

244  
NULL
;

245 i‡((
£n£p
[0] < 0x72) || (sensep[0] > 0x73))

246  
NULL
;

247 
add_sb_Àn
 = (add_sb_À¿< (
£n£_Àn
 - 8)) ?

248 
add_sb_Àn
 : (
£n£_Àn
 - 8);

249 
des˝
 = &
£n£p
[8];

250 
desc_Àn
 = 0, 
k
 = 0; k < 
add_sb_Àn
; k += desc_len) {

251 
des˝
 +
desc_Àn
;

252 
add_d_Àn
 = (
k
 < (
add_sb_Àn
 - 1)Ë? 
des˝
[1]: -1;

253 
desc_Àn
 = 
add_d_Àn
 + 2;

254 i‡(
des˝
[0] =
desc_ty≥
)

255  
des˝
;

256 i‡(
add_d_Àn
 < 0)

259  
NULL
;

260 
	}
}

263 
	$sg_gë_£n£_öfo_Êd
(c⁄° * 
£n£p
, 
sb_Àn
,

264 
uöt64_t
 * 
öfo_ouç
)

266 
j
;

267 c⁄° * 
u˝
;

268 
uöt64_t
 
uŒ
;

270 i‡(
öfo_ouç
)

271 *
öfo_ouç
 = 0;

272 i‡(
sb_Àn
 < 7)

274 
£n£p
[0] & 0x7f) {

277 i‡(
öfo_ouç
)

278 *
öfo_ouç
 = (()
£n£p
[3] << 24) + (sensep[4] << 16) +

279 (
£n£p
[5] << 8) + sensep[6];

280  (
£n£p
[0] & 0x80) ? 1 : 0;

283 
u˝
 = 
	`sg_scsi_£n£_desc_föd
(
£n£p
, 
sb_Àn
, 0 );

284 i‡(
u˝
 && (0xa == ucp[1])) {

285 
uŒ
 = 0;

286 
j
 = 0; j < 8; ++j) {

287 i‡(
j
 > 0)

288 
uŒ
 <<= 8;

289 
uŒ
 |
u˝
[4 + 
j
];

291 i‡(
öfo_ouç
)

292 *
öfo_ouç
 = 
uŒ
;

293  !!(
u˝
[2] & 0x80);

299 
	}
}

302 
	$sg_gë_£n£_fûem¨k_eom_ûi
(c⁄° * 
£n£p
, 
sb_Àn
,

303 * 
fûem¨k_p
, * 
eom_p
, * 
ûi_p
)

305 c⁄° * 
u˝
;

307 i‡(
sb_Àn
 < 7)

309 
£n£p
[0] & 0x7f) {

312 i‡(
£n£p
[2] & 0xe0) {

313 i‡(
fûem¨k_p
)

314 *
fûem¨k_p
 = !!(
£n£p
[2] & 0x80);

315 i‡(
eom_p
)

316 *
eom_p
 = !!(
£n£p
[2] & 0x40);

317 i‡(
ûi_p
)

318 *
ûi_p
 = !!(
£n£p
[2] & 0x20);

325 
u˝
 = 
	`sg_scsi_£n£_desc_föd
(
£n£p
, 
sb_Àn
, 4);

326 i‡(
u˝
 && (ucp[1] >= 2)) {

327 i‡(
u˝
[3] & 0xe0) {

328 i‡(
fûem¨k_p
)

329 *
fûem¨k_p
 = !!(
u˝
[3] & 0x80);

330 i‡(
eom_p
)

331 *
eom_p
 = !!(
u˝
[3] & 0x40);

332 i‡(
ûi_p
)

333 *
ûi_p
 = !!(
u˝
[3] & 0x20);

341 
	}
}

351 
	$sg_gë_£n£_¥ogªss_Êd
(c⁄° * 
£n£p
, 
sb_Àn
,

352 * 
¥ogªss_ouç
)

354 c⁄° * 
u˝
;

355 
sk
, 
sk_¥
;

357 i‡(
sb_Àn
 < 7)

359 
£n£p
[0] & 0x7f) {

362 
sk
 = (
£n£p
[2] & 0xf);

363 i‡((
sb_Àn
 < 18) ||

364 ((
SPC_SK_NO_SENSE
 !
sk
Ë&& (
SPC_SK_NOT_READY
 != sk)))

366 i‡(
£n£p
[15] & 0x80) {

367 i‡(
¥ogªss_ouç
)

368 *
¥ogªss_ouç
 = (
£n£p
[16] << 8) + sensep[17];

375 
sk
 = (
£n£p
[1] & 0xf);

376 
sk_¥
 = (
SPC_SK_NO_SENSE
 =
sk
Ë|| (
SPC_SK_NOT_READY
 == sk);

377 i‡(
sk_¥
 && ((
u˝
 = 
	`sg_scsi_£n£_desc_föd
(
£n£p
, 
sb_Àn
, 2))) &&

378 (0x6 =
u˝
[1]) && (0x80 & ucp[4])) {

379 i‡(
¥ogªss_ouç
)

380 *
¥ogªss_ouç
 = (
u˝
[5] << 8) + ucp[6];

382 } i‡(((
u˝
 = 
	`sg_scsi_£n£_desc_föd
(
£n£p
, 
sb_Àn
, 0xa))) &&

383 ((0x6 =
u˝
[1]))) {

384 i‡(
¥ogªss_ouç
)

385 *
¥ogªss_ouç
 = (
u˝
[6] << 8) + ucp[7];

392 
	}
}

395 
	$sg_gë_pdt_°r
(
pdt
, 
buff_Àn
, * 
buff
)

397 i‡((
pdt
 < 0) || (pdt > 31))

398 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "badÖdt");

400 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "%s", 
sg_lib_pdt_°rs
[
pdt
]);

401  
buff
;

402 
	}
}

405 
	$sg_gë_å™s_¥Ÿo_°r
(
çi
, 
buff_Àn
, * 
buff
)

407 i‡((
çi
 < 0) || (tpi > 15))

408 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "badÅpi");

410 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "%s", 
sg_lib_å™•‹t_¥Ÿo_°rs
[
çi
]);

411  
buff
;

412 
	}
}

414 
	#TPGS_STATE_OPTIMIZED
 0x0

	)

415 
	#TPGS_STATE_NONOPTIMIZED
 0x1

	)

416 
	#TPGS_STATE_STANDBY
 0x2

	)

417 
	#TPGS_STATE_UNAVAILABLE
 0x3

	)

418 
	#TPGS_STATE_OFFLINE
 0xe

	)

419 
	#TPGS_STATE_TRANSITIONING
 0xf

	)

422 
	$decode_çgs_°©e
(
°
, * 
b
, 
bÀn
)

424 
°
) {

425 
TPGS_STATE_OPTIMIZED
:

426  
	`my_¢¥ötf
(
b
, 
bÀn
, "active/optimized");

427 
TPGS_STATE_NONOPTIMIZED
:

428  
	`my_¢¥ötf
(
b
, 
bÀn
, "active/non optimized");

429 
TPGS_STATE_STANDBY
:

430  
	`my_¢¥ötf
(
b
, 
bÀn
, "standby");

431 
TPGS_STATE_UNAVAILABLE
:

432  
	`my_¢¥ötf
(
b
, 
bÀn
, "unavailable");

433 
TPGS_STATE_OFFLINE
:

434  
	`my_¢¥ötf
(
b
, 
bÀn
, "offline");

435 
TPGS_STATE_TRANSITIONING
:

436  
	`my_¢¥ötf
(
b
, 
bÀn
, "transitioning between states");

438  
	`my_¢¥ötf
(
b
, 
bÀn
, "unknown: 0x%x", 
°
);

440 
	}
}

443 
	$uds_ª„ºÆ_des¸ùt‹_°r
(* 
b
, 
bÀn
, c⁄° * 
dp
,

444 
Æí
)

446 
n
 = 0;

447 
dÀn
 = 
Æí
 - 2;

448 
k
, 
j
, 
g
, 
f
, 
çgd
;

449 c⁄° * 
ç
;

450 
uöt64_t
 
uŒ
;

451 
c
[40];

453 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " NotállÑeferrals: %d\n",

454 !!(
dp
[2] & 0x1));

455 
dp
 += 4;

456 
k
 = 0, 
f
 = 1; (k + 4Ë< 
dÀn
; k +
g
, 
dp
 += g, ++f) {

457 
çgd
 = 
dp
[3];

458 
g
 = (
çgd
 * 4) + 20;

459 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " Des¸ùt‹ %d\n", 
f
);

460 i‡((
k
 + 
g
Ë> 
dÀn
) {

461 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "Åruncated descriptor, "

463  
n
;

465 
uŒ
 = 0;

466 
j
 = 0; j < 8; ++j) {

467 i‡(
j
 > 0)

468 
uŒ
 <<= 8;

469 
uŒ
 |
dp
[4 + 
j
];

471 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " fú° ud†LBA: 0x%"
PRIx64


472 "\n", 
uŒ
);

473 
uŒ
 = 0;

474 
j
 = 0; j < 8; ++j) {

475 i‡(
j
 > 0)

476 
uŒ
 <<= 8;

477 
uŒ
 |
dp
[12 + 
j
];

479 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "Üa° ud†LBA: 0x%"
PRIx64


480 "\n", 
uŒ
);

481 
j
 = 0; j < 
çgd
; ++j) {

482 
ç
 = 
dp
 + 20 + (
j
 * 4);

483 
	`decode_çgs_°©e
(
ç
[0] & 0xf, 
c
, (c));

484 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "Åpg: %d state: %s\n",

485 (
ç
[2] << 8Ë+Åp[3], 
c
);

488  
n
;

489 
	}
}

491 c⁄° * 
	gsd©a_§c
[] = {

501 
	$sg_gë_£n£_des¸ùt‹s_°r
(c⁄° * 
£n£_buf„r
, 
sb_Àn
,

502 
bÀn
, * 
b
)

504 
add_sb_Àn
, 
add_d_Àn
, 
desc_Àn
, 
k
, 
j
, 
£n£_key
, 
¥o˚s£d
;

505 
n
, 
¥ogªss
, 
¥
, 
ªm
;

506 c⁄° * 
des˝
;

507 c⁄° * 
dt•
 = " >> descriptorÅoo short";

509 i‡((
NULL
 =
b
Ë|| (
bÀn
 <= 0))

511 
b
[0] = '\0';

512 i‡((
sb_Àn
 < 8Ë|| (0 =(
add_sb_Àn
 = 
£n£_buf„r
[7])))

514 
add_sb_Àn
 = (add_sb_À¿< (
sb_Àn
 - 8)) ?ádd_sb_len : (sb_len - 8);

515 
£n£_key
 = (
£n£_buf„r
[1] & 0xf);

517 
des˝
 = (
£n£_buf„r
 + 8), 
k
 = 0, 
n
 = 0;

518 (
k
 < 
add_sb_Àn
Ë&& (
n
 < 
bÀn
);

519 
k
 +
desc_Àn
, 
des˝
 += desc_len) {

520 
add_d_Àn
 = (
k
 < (
add_sb_Àn
 - 1)Ë? 
des˝
[1] : -1;

521 i‡((
k
 + 
add_d_Àn
 + 2Ë> 
add_sb_Àn
)

522 
add_d_Àn
 = 
add_sb_Àn
 - 
k
 - 2;

523 
desc_Àn
 = 
add_d_Àn
 + 2;

524 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " DescriptorÅype: ");

525 
¥o˚s£d
 = 1;

526 
des˝
[0]) {

528 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "Information\n");

529 i‡((
add_d_Àn
 >10Ë&& (0x80 & 
des˝
[2])) {

530 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " 0x");

531 
j
 = 0; j < 8; ++j)

532 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "%02x", 
des˝
[4 + 
j
]);

533 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "\n");

535 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "%s\n", 
dt•
);

536 
¥o˚s£d
 = 0;

540 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "Command specific\n");

541 i‡(
add_d_Àn
 >= 10) {

542 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " 0x");

543 
j
 = 0; j < 8; ++j)

544 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "%02x", 
des˝
[4 + 
j
]);

545 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "\n");

547 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "%s\n", 
dt•
);

548 
¥o˚s£d
 = 0;

552 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "Sense key specific:");

553 
£n£_key
) {

554 
SPC_SK_ILLEGAL_REQUEST
:

555 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " FieldÖointer\n");

556 i‡(
add_d_Àn
 < 6) {

557 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "%s\n", 
dt•
);

558 
¥o˚s£d
 = 0;

561 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " Error in %s byte %d",

562 (
des˝
[4] & 0x40) ? "Command" : "Data",

563 (
des˝
[5] << 8) | descp[6]);

564 i‡(
des˝
[4] & 0x08) {

565 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " bit %d\n",

566 
des˝
[4] & 0x07);

568 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "\n");

570 
SPC_SK_HARDWARE_ERROR
:

571 
SPC_SK_MEDIUM_ERROR
:

572 
SPC_SK_RECOVERED_ERROR
:

573 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " ActualÑetry count\n");

574 i‡(
add_d_Àn
 < 6) {

575 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "%s\n", 
dt•
);

576 
¥o˚s£d
 = 0;

579 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç," 0x%02x%02x\n", 
des˝
[5],

580 
des˝
[6]);

582 
SPC_SK_NO_SENSE
:

583 
SPC_SK_NOT_READY
:

584 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " Progress indication: ");

585 i‡(
add_d_Àn
 < 6) {

586 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "%s\n", 
dt•
);

587 
¥o˚s£d
 = 0;

590 
¥ogªss
 = (
des˝
[5] << 8) + descp[6];

591 
¥
 = (
¥ogªss
 * 100) / 65536;

592 
ªm
 = ((
¥ogªss
 * 100) % 65536) / 656;

593 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "%d.%02d%%\n", 
¥
, 
ªm
);

595 
SPC_SK_COPY_ABORTED
:

596 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " SegmentÖointer\n");

597 i‡(
add_d_Àn
 < 6) {

598 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "%s\n", 
dt•
);

599 
¥o˚s£d
 = 0;

602 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " RelativeÅo start of %s, "

604 (
des˝
[4] & 0x20) ? "segment descriptor" :

606 (
des˝
[5] << 8) | descp[6]);

607 i‡(
des˝
[4] & 0x08)

608 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " bit %d\n",

609 
des˝
[4] & 0x07);

611 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "\n");

613 
SPC_SK_UNIT_ATTENTION
:

614 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " Unitáttention condition "

616 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "overflow flag is %d\n",

617 !!(
des˝
[4] & 0x1));

620 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " Sense_key: 0x%x "

621 "u√x≥˘ed\n", 
£n£_key
);

622 
¥o˚s£d
 = 0;

627 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "FieldÑeplaceable unit\n");

628 i‡(
add_d_Àn
 >= 2)

629 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " code=0x%x\n",

630 
des˝
[3]);

632 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "%s\n", 
dt•
);

633 
¥o˚s£d
 = 0;

637 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "Stream commands\n");

638 i‡(
add_d_Àn
 >= 2) {

639 i‡(
des˝
[3] & 0x80)

640 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " FILEMARK");

641 i‡(
des˝
[3] & 0x40)

642 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " End Of Medium "

644 i‡(
des˝
[3] & 0x20)

645 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " Incorrect Length "

647 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "\n");

649 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "%s\n", 
dt•
);

650 
¥o˚s£d
 = 0;

654 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "Block commands\n");

655 i‡(
add_d_Àn
 >= 2)

656 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " Incorrect Length "

658 (
des˝
[3] & 0x20) ? "set" : "clear");

660 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "%s\n", 
dt•
);

661 
¥o˚s£d
 = 0;

665 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "OSD object identification\n");

666 
¥o˚s£d
 = 0;

669 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "OSDÑesponse integrity check "

671 
¥o˚s£d
 = 0;

674 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "OSDáttribute "

676 
¥o˚s£d
 = 0;

679 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "ATA Status Return\n");

680 i‡(
add_d_Àn
 >= 12) {

681 
exãnd
, 
£˘‹_cou¡
;

683 
exãnd
 = 
des˝
[2] & 1;

684 
£˘‹_cou¡
 = 
des˝
[5] + (
exãnd
 ? (descp[4] << 8) : 0);

685 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "Éxtend=%dÉrror=0x%x "

686 " se˘‹_cou¡=0x%x\n", 
exãnd
, 
des˝
[3],

687 
£˘‹_cou¡
);

688 i‡(
exãnd
)

689 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " "

691 
des˝
[10], descp[8], descp[6],

692 
des˝
[11], descp[9], descp[7]);

694 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " "

696 
des˝
[11], descp[9], descp[7]);

697 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " device=0x%x "

698 "°©us=0x%x\n", 
des˝
[12], descp[13]);

700 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "%s\n", 
dt•
);

701 
¥o˚s£d
 = 0;

706 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "AnotherÖrogress "

708 i‡(
add_d_Àn
 < 6) {

709 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "%s\n", 
dt•
);

710 
¥o˚s£d
 = 0;

713 
¥ogªss
 = (
des˝
[6] << 8) + descp[7];

714 
¥
 = (
¥ogªss
 * 100) / 65536;

715 
ªm
 = ((
¥ogªss
 * 100) % 65536) / 656;

716 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " %d.02%d%%", 
¥
, 
ªm
);

717 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " [sense_key=0x%x "

719 
des˝
[2], descp[3], descp[4]);

722 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "User data segmentÑeferral\n");

723 i‡(
add_d_Àn
 < 2) {

724 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "%s\n", 
dt•
);

725 
¥o˚s£d
 = 0;

728 
n
 +
	`uds_ª„ºÆ_des¸ùt‹_°r
(
b
 +Ç, 
bÀn
 -Ç, 
des˝
,

729 
add_d_Àn
);

732 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "Forwarded sense data\n");

733 i‡(
add_d_Àn
 < 2) {

734 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "%s\n", 
dt•
);

735 
¥o˚s£d
 = 0;

738 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " FSDT: %s\n",

739 (
des˝
[2] & 0x80) ? "set" : "clear");

740 
j
 = 
des˝
[2] & 0xf;

741 i‡(
j
 < 3)

742 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " Sense data source: "

743 "%s\n", 
sd©a_§c
[
j
]);

745 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " Sense data source: "

746 "ª£rved [%d]\n", 
j
);

748 
c
[200];

750 
	`sg_gë_scsi_°©us_°r
(
des˝
[3], (
c
) - 1, c);

751 
c
[(c) - 1] = '\0';

752 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " Forwarded status: "

753 "%s\n", 
c
);

754 i‡(
add_d_Àn
 > 2) {

756 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " vvvvvvvvvvvvvvvv\n");

757 
	`sg_gë_£n£_°r
(
NULL
, 
des˝
 + 4, 
add_d_Àn
 - 2, 0,

758 (
c
), c);

759 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "%s", 
c
);

760 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " ^^^^^^^^^^^^^^^^\n");

765 i‡(
des˝
[0] >= 0x80)

766 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "Vendor specific [0x%x]\n",

767 
des˝
[0]);

769 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "Unknown [0x%x]\n",

770 
des˝
[0]);

771 
¥o˚s£d
 = 0;

774 i‡(! 
¥o˚s£d
) {

775 i‡(
add_d_Àn
 > 0) {

776 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " ");

777 
j
 = 0; j < 
add_d_Àn
; ++j) {

778 i‡((
j
 > 0) && (0 == (j % 24)))

779 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "\n ");

780 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "%02x ", 
des˝
[
j
 + 2]);

782 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "\n");

785 i‡(
add_d_Àn
 < 0)

786 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " short descriptor\n");

788 
	}
}

792 
	$sg_gë_£n£_ßt_±_fixed_°r
(c⁄° * 
•
, 
¶í
, 
bÀn
,

793 * 
b
)

795 
n
 = 0;

797 
¶í
 = slen;

798 i‡(
bÀn
 < 1)

800 i‡(
SPC_SK_RECOVERED_ERROR
 !(0x‡& 
•
[2]))

801 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, " >>Éxpected Sense key: "

803 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "Érror=0x%x, status=0x%x, "

804 "devi˚=0x%x, se˘‹_cou¡(7:0)=0x%x%c\n", 
•
[3], sp[4],

805 
•
[5], sp[6], ((0x40 & sp[8]) ? '+' : ' '));

806 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
bÀn
 -Ç, "Éxtend=%d,Üog_index=0x%x, "

808 (!!(0x80 & 
•
[8])), (0xf & sp[8]), sp[9], sp[10], sp[11],

809 ((0x20 & 
•
[8]) ? '+' : ' '));

810 
	}
}

814 
	$sg_gë_£n£_°r
(c⁄° * 
Àadö
, c⁄° * 
£n£_buf„r
,

815 
sb_Àn
, 
øw_söfo
, 
buff_Àn
, * 
buff
)

817 
Àn
, 
vÆid
, 
¥ogªss
, 
n
, 
r
, 
¥
, 
ªm
, 
bÀn
;

818 
öfo
;

819 
des¸ùt‹_f‹m©
 = 0;

820 
sd©_ovÊ
 = 0;

821 c⁄° * 
ebp
 = 
NULL
;

822 
îr‹_buff
[64];

823 
b
[256];

824 
sg_scsi_£n£_hdr
 
ssh
;

826 i‡((
NULL
 =
buff
Ë|| (
buff_Àn
 <= 0))

828 i‡(1 =
buff_Àn
) {

829 
buff
[0] = '\0';

832 
bÀn
 = (
b
);

833 
n
 = 0;

834 i‡(
sb_Àn
 < 1) {

835 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "sense bufferÉmpty\n");

838 i‡(
Àadö
)

839 
n
 +
	`my_¢¥ötf
(
buff
 +Ç, 
buff_Àn
 -Ç, "%s: ", 
Àadö
);

840 
Àn
 = 
sb_Àn
;

841 i‡(
	`sg_scsi_n‹mÆize_£n£
(
£n£_buf„r
, 
sb_Àn
, &
ssh
)) {

842 
ssh
.
ª•⁄£_code
) {

844 
ebp
 = "Fixed format, current";

845 
Àn
 = (
sb_Àn
 > 7Ë? (
£n£_buf„r
[7] + 8) : sb_len;

846 
Àn
 = (À¿> 
sb_Àn
) ? sb_len :Üen;

847 
sd©_ovÊ
 = (
Àn
 > 2Ë? !!(
£n£_buf„r
[2] & 0x10) : 0;

851 
ebp
 = "Fixed format, <<<deferred>>>";

852 
Àn
 = (
sb_Àn
 > 7Ë? (
£n£_buf„r
[7] + 8) : sb_len;

853 
Àn
 = (À¿> 
sb_Àn
) ? sb_len :Üen;

854 
sd©_ovÊ
 = (
Àn
 > 2Ë? !!(
£n£_buf„r
[2] & 0x10) : 0;

857 
des¸ùt‹_f‹m©
 = 1;

858 
ebp
 = "Descriptor format, current";

859 
sd©_ovÊ
 = (
sb_Àn
 > 4Ë? !!(
£n£_buf„r
[4] & 0x80) : 0;

862 
des¸ùt‹_f‹m©
 = 1;

863 
ebp
 = "Descriptor format, <<<deferred>>>";

864 
sd©_ovÊ
 = (
sb_Àn
 > 4Ë? !!(
£n£_buf„r
[4] & 0x80) : 0;

867 
ebp
 = "Response code: 0x0 (?)";

870 
	`my_¢¥ötf
(
îr‹_buff
, (error_buff),

871 "Unknow¿ª•⁄£ code: 0x%x", 
ssh
.
ª•⁄£_code
);

872 
ebp
 = 
îr‹_buff
;

875 
n
 +
	`my_¢¥ötf
(
buff
 +Ç, 
buff_Àn
 -Ç, " %s; Sense key: %s\n ",

876 
ebp
, 
sg_lib_£n£_key_desc
[
ssh
.
£n£_key
]);

877 i‡(
sd©_ovÊ
)

878 
n
 +
	`my_¢¥ötf
(
buff
 +Ç, 
buff_Àn
 -Ç, "<<<Sense data "

880 i‡(
des¸ùt‹_f‹m©
) {

881 
n
 +
	`my_¢¥ötf
(
buff
 +Ç, 
buff_Àn
 -Ç, "%s\n",

882 
	`sg_gë_asc_ascq_°r
(
ssh
.
asc
, ssh.
ascq
,

883 (
b
), b));

884 
	`sg_gë_£n£_des¸ùt‹s_°r
(
£n£_buf„r
, 
Àn
, 
buff_Àn
 - 
n
,

885 
buff
 + 
n
);

886 
n
 = 
	`°æí
(
buff
);

887 } i‡((
Àn
 > 12Ë&& (0 =
ssh
.
asc
) &&

888 (
ASCQ_ATA_PT_INFO_AVAILABLE
 =
ssh
.
ascq
)) {

890 
n
 +
	`my_¢¥ötf
(
buff
 +Ç, 
buff_Àn
 -Ç, "%s\n",

891 
	`sg_gë_asc_ascq_°r
(
ssh
.
asc
, ssh.
ascq
,

892 (
b
), b));

893 
	`sg_gë_£n£_ßt_±_fixed_°r
(
£n£_buf„r
, 
Àn
, 
buff_Àn
 - 
n
,

894 
buff
 + 
n
);

895 
n
 = 
	`°æí
(
buff
);

896 } i‡(
Àn
 > 2) {

897 i‡(
Àn
 > 12)

898 
n
 +
	`my_¢¥ötf
(
buff
 +Ç, 
buff_Àn
 -Ç, "%s\n",

899 
	`sg_gë_asc_ascq_°r
(
ssh
.
asc
, ssh.
ascq
,

900 (
b
), b));

901 
r
 = 0;

902 
vÆid
 = 
£n£_buf„r
[0] & 0x80;

903 i‡(
Àn
 > 6) {

904 
öfo
 = ()((
£n£_buf„r
[3] << 24) |

905 (
£n£_buf„r
[4] << 16) | (sense_buffer[5] << 8) |

906 
£n£_buf„r
[6]);

907 i‡(
vÆid
)

908 
r
 +
	`my_¢¥ötf
(
b
 +Ñ, 
bÀn
 -Ñ, " Info fld=0x%x [%u] ",

909 
öfo
, info);

910 i‡(
öfo
 > 0)

911 
r
 +
	`my_¢¥ötf
(
b
 +Ñ, 
bÀn
 -Ñ, " Valid=0, Info "

912 "Êd=0x%x [%u] ", 
öfo
, info);

914 
öfo
 = 0;

915 i‡(
£n£_buf„r
[2] & 0xe0) {

916 i‡(
£n£_buf„r
[2] & 0x80)

917 
r
 +
	`my_¢¥ötf
(
b
 +Ñ, 
bÀn
 -Ñ, " FMK");

919 i‡(
£n£_buf„r
[2] & 0x40)

920 
r
 +
	`my_¢¥ötf
(
b
 +Ñ, 
bÀn
 -Ñ, " EOM");

922 i‡(
£n£_buf„r
[2] & 0x20)

923 
r
 +
	`my_¢¥ötf
(
b
 +Ñ, 
bÀn
 -Ñ, " ILI");

925 
r
 +
	`my_¢¥ötf
(
b
 +Ñ, 
bÀn
 -Ñ, "\n");

926 } i‡(
vÆid
 || (
öfo
 > 0))

927 
r
 +
	`my_¢¥ötf
(
b
 +Ñ, 
bÀn
 -Ñ, "\n");

928 i‡((
Àn
 >14Ë&& 
£n£_buf„r
[14])

929 
r
 +
	`my_¢¥ötf
(
b
 +Ñ, 
bÀn
 -Ñ, " FieldÑeplaceable unit "

930 "code: %d\n", 
£n£_buf„r
[14]);

931 i‡((
Àn
 >18Ë&& (
£n£_buf„r
[15] & 0x80)) {

933 
ssh
.
£n£_key
) {

934 
SPC_SK_ILLEGAL_REQUEST
:

935 
r
 +
	`my_¢¥ötf
(
b
 +Ñ, 
bÀn
 -Ñ, " Sense Key Specific: "

937 ((
£n£_buf„r
[15] & 0x40) ? "Command" : "Data"),

938 (
£n£_buf„r
[16] << 8) | sense_buffer[17]);

939 i‡(
£n£_buf„r
[15] & 0x08)

940 
r
 +
	`my_¢¥ötf
(
b
 +Ñ, 
bÀn
 -Ñ, " bit %d\n",

941 
£n£_buf„r
[15] & 0x07);

943 
r
 +
	`my_¢¥ötf
(
b
 +Ñ, 
bÀn
 -Ñ, "\n");

945 
SPC_SK_NO_SENSE
:

946 
SPC_SK_NOT_READY
:

947 
¥ogªss
 = (
£n£_buf„r
[16] << 8) + sense_buffer[17];

948 
¥
 = (
¥ogªss
 * 100) / 65536;

949 
ªm
 = ((
¥ogªss
 * 100) % 65536) / 656;

950 
r
 +
	`my_¢¥ötf
(
b
 +Ñ, 
bÀn
 -Ñ, " Progress "

951 "ödiˇti⁄: %d.%02d%%\n", 
¥
, 
ªm
);

953 
SPC_SK_HARDWARE_ERROR
:

954 
SPC_SK_MEDIUM_ERROR
:

955 
SPC_SK_RECOVERED_ERROR
:

956 
r
 +
	`my_¢¥ötf
(
b
 +Ñ, 
bÀn
 -Ñ, " ActualÑetry count: "

957 "0x%02x%02x\n", 
£n£_buf„r
[16],

958 
£n£_buf„r
[17]);

960 
SPC_SK_COPY_ABORTED
:

961 
r
 +
	`my_¢¥ötf
(
b
 +Ñ, 
bÀn
 -Ñ, " SegmentÖointer: ");

962 
r
 +
	`my_¢¥ötf
(
b
 +Ñ, 
bÀn
 -Ñ, "RelativeÅo start of "

964 ((
£n£_buf„r
[15] & 0x20) ?

966 ((
£n£_buf„r
[16] << 8) +

967 
£n£_buf„r
[17]));

968 i‡(
£n£_buf„r
[15] & 0x08)

969 
r
 +
	`my_¢¥ötf
(
b
 +Ñ, 
bÀn
 -Ñ, " bit %d\n",

970 
£n£_buf„r
[15] & 0x07);

972 
r
 +
	`my_¢¥ötf
(
b
 +Ñ, 
bÀn
 -Ñ, "\n");

974 
SPC_SK_UNIT_ATTENTION
:

975 
r
 +
	`my_¢¥ötf
(
b
 +Ñ, 
bÀn
 -Ñ, " Unitáttention "

977 
r
 +
	`my_¢¥ötf
(
b
 +Ñ, 
bÀn
 -Ñ, "overflow flag is %d\n",

978 !!(
£n£_buf„r
[15] & 0x1));

981 
r
 +
	`my_¢¥ötf
(
b
 +Ñ, 
bÀn
 -Ñ, " Sense_key: 0x%x "

982 "u√x≥˘ed\n", 
ssh
.
£n£_key
);

986 i‡(
r
 > 0)

987 
n
 +
	`my_¢¥ötf
(
buff
 +Ç, 
buff_Àn
 -Ç, "%s", 
b
);

989 
n
 +
	`my_¢¥ötf
(
buff
 +Ç, 
buff_Àn
 -Ç, " fixed descriptor "

990 "ÀngthÅoÿsh‹t,Üí=%d\n", 
Àn
);

992 i‡(
sb_Àn
 < 4) {

993 
n
 +
	`my_¢¥ötf
(
buff
 +Ç, 
buff_Àn
 -Ç, "sense bufferÅoo short "

997 
r
 = 0;

998 
r
 +
	`my_¢¥ötf
(
b
 +Ñ, 
bÀn
 -Ñ, "Probably uninitialized data.\n "

1000 
r
 +
	`my_¢¥ötf
(
b
 +Ñ, 
bÀn
 -Ñ, " AdValid=%d Error class=%d "

1001 "Eº‹ code=%d\n", !!(
£n£_buf„r
[0] & 0x80),

1002 ((
£n£_buf„r
[0] >> 4) & 0x7),

1003 (
£n£_buf„r
[0] & 0xf));

1004 i‡(
£n£_buf„r
[0] & 0x80)

1005 
r
 +
	`my_¢¥ötf
(
b
 +Ñ, 
bÀn
 -Ñ, "Üba=0x%x\n",

1006 ((
£n£_buf„r
[1] & 0x1f) << 16) +

1007 (
£n£_buf„r
[2] << 8) + sense_buffer[3]);

1008 
n
 +
	`my_¢¥ötf
(
buff
 +Ç, 
buff_Àn
 -Ç, "%s\n", 
b
);

1009 
Àn
 = 
sb_Àn
;

1010 i‡(
Àn
 > 32)

1011 
Àn
 = 32;

1013 i‡(
øw_söfo
) {

1014 
n
 +
	`my_¢¥ötf
(
buff
 +Ç, 
buff_Àn
 -Ç, " Raw sense data (in hex):"

1016 i‡(
n
 >(
buff_Àn
 - 1))

1018 
	`dSåHexEº
((c⁄° *)
£n£_buf„r
, 
Àn
, 
buff_Àn
 - 
n
, 
buff
 +Ç);

1020 
	}
}

1024 
	$sg_¥öt_£n£
(c⁄° * 
Àadö
, c⁄° * 
£n£_buf„r
,

1025 
sb_Àn
, 
øw_söfo
)

1027 
b
[2048];

1029 
	`sg_gë_£n£_°r
(
Àadö
, 
£n£_buf„r
, 
sb_Àn
, 
øw_söfo
, (
b
), b);

1030 i‡(
NULL
 =
sg_w¨nögs_°rm
)

1031 
sg_w¨nögs_°rm
 = 
°dîr
;

1032 
	`Ârötf
(
sg_w¨nögs_°rm
, "%s", 
b
);

1033 
	}
}

1037 
	$sg_scsi_n‹mÆize_£n£
(c⁄° * 
£n£p
, 
sb_Àn
,

1038 
sg_scsi_£n£_hdr
 * 
sshp
)

1040 i‡(
sshp
)

1041 
	`mem£t
(
sshp
, 0, (
sg_scsi_£n£_hdr
));

1042 i‡((
NULL
 =
£n£p
Ë|| (0 =
sb_Àn
) || (0x70 != (0x70 & sensep[0])))

1044 i‡(
sshp
) {

1045 
sshp
->
ª•⁄£_code
 = (0x7‡& 
£n£p
[0]);

1046 i‡(
sshp
->
ª•⁄£_code
 >= 0x72) {

1047 i‡(
sb_Àn
 > 1)

1048 
sshp
->
£n£_key
 = (0x‡& 
£n£p
[1]);

1049 i‡(
sb_Àn
 > 2)

1050 
sshp
->
asc
 = 
£n£p
[2];

1051 i‡(
sb_Àn
 > 3)

1052 
sshp
->
ascq
 = 
£n£p
[3];

1053 i‡(
sb_Àn
 > 7)

1054 
sshp
->
addôi⁄Æ_Àngth
 = 
£n£p
[7];

1056 i‡(
sb_Àn
 > 2)

1057 
sshp
->
£n£_key
 = (0x‡& 
£n£p
[2]);

1058 i‡(
sb_Àn
 > 7) {

1059 
sb_Àn
 = (sb_À¿< (
£n£p
[7] + 8)) ? sb_len :

1060 (
£n£p
[7] + 8);

1061 i‡(
sb_Àn
 > 12)

1062 
sshp
->
asc
 = 
£n£p
[12];

1063 i‡(
sb_Àn
 > 13)

1064 
sshp
->
ascq
 = 
£n£p
[13];

1069 
	}
}

1074 
	$sg_îr_ˇãg‹y_£n£
(c⁄° * 
£n£_buf„r
, 
sb_Àn
)

1076 
sg_scsi_£n£_hdr
 
ssh
;

1078 i‡((
£n£_buf„r
 && (
sb_Àn
 > 2)) &&

1079 (
	`sg_scsi_n‹mÆize_£n£
(
£n£_buf„r
, 
sb_Àn
, &
ssh
))) {

1080 
ssh
.
£n£_key
) {

1081 
SPC_SK_NO_SENSE
:

1082  
SG_LIB_CAT_NO_SENSE
;

1083 
SPC_SK_RECOVERED_ERROR
:

1084  
SG_LIB_CAT_RECOVERED
;

1085 
SPC_SK_NOT_READY
:

1086  
SG_LIB_CAT_NOT_READY
;

1087 
SPC_SK_MEDIUM_ERROR
:

1088 
SPC_SK_HARDWARE_ERROR
:

1089 
SPC_SK_BLANK_CHECK
:

1090  
SG_LIB_CAT_MEDIUM_HARD
;

1091 
SPC_SK_UNIT_ATTENTION
:

1092  
SG_LIB_CAT_UNIT_ATTENTION
;

1094 
SPC_SK_ILLEGAL_REQUEST
:

1095 i‡((0x20 =
ssh
.
asc
Ë&& (0x0 =ssh.
ascq
))

1096  
SG_LIB_CAT_INVALID_OP
;

1098  
SG_LIB_CAT_ILLEGAL_REQ
;

1100 
SPC_SK_ABORTED_COMMAND
:

1101  
SG_LIB_CAT_ABORTED_COMMAND
;

1106  
SG_LIB_CAT_SENSE
;

1107 
	}
}

1111 
	$sg_gë_comm™d_size
(
›code
)

1113 (
›code
 >> 5) & 0x7) {

1126 
	}
}

1129 
	$sg_gë_comm™d_«me
(c⁄° * 
cmdp
, 
≥ri_ty≥
, 
buff_Àn
,

1130 * 
buff
)

1132 
£rvi˚_a˘i⁄
;

1134 i‡((
NULL
 =
buff
Ë|| (
buff_Àn
 < 1))

1136 i‡(1 =
buff_Àn
) {

1137 
buff
[0] = '\0';

1140 i‡(
NULL
 =
cmdp
) {

1141 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "%s", "<null> commandÖointer");

1144 
£rvi˚_a˘i⁄
 = (
SG_VARIABLE_LENGTH_CMD
 =
cmdp
[0]) ?

1145 ((
cmdp
[8] << 8) | cmdp[9]) : (cmdp[1] & 0x1f);

1146 
	`sg_gë_›code_ß_«me
(
cmdp
[0], 
£rvi˚_a˘i⁄
, 
≥ri_ty≥
, 
buff_Àn
, 
buff
);

1147 
	}
}

1151 
	$sg_gë_›code_ß_«me
(
cmd_byã0
, 
£rvi˚_a˘i⁄
,

1152 
≥ri_ty≥
, 
buff_Àn
, * 
buff
)

1154 c⁄° 
sg_lib_vÆue_«me_t
 * 
v≈
;

1156 i‡((
NULL
 =
buff
Ë|| (
buff_Àn
 < 1))

1158 i‡(1 =
buff_Àn
) {

1159 
buff
[0] = '\0';

1162 ()
cmd_byã0
) {

1163 
SG_VARIABLE_LENGTH_CMD
:

1164 
v≈
 = 
	`gë_vÆue_«me
(
sg_lib_v¨übÀ_Àngth_¨r
, 
£rvi˚_a˘i⁄
,

1165 
≥ri_ty≥
);

1166 i‡(
v≈
)

1167 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "%s", 
v≈
->
«me
);

1169 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "VariableÜength serviceáction=0x%x",

1170 
£rvi˚_a˘i⁄
);

1172 
SG_MAINTENANCE_IN
:

1173 
v≈
 = 
	`gë_vÆue_«me
(
sg_lib_maöt_ö_¨r
, 
£rvi˚_a˘i⁄
, 
≥ri_ty≥
);

1174 i‡(
v≈
)

1175 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "%s", 
v≈
->
«me
);

1177 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "Maintenance in serviceáction=0x%x",

1178 
£rvi˚_a˘i⁄
);

1180 
SG_MAINTENANCE_OUT
:

1181 
v≈
 = 
	`gë_vÆue_«me
(
sg_lib_maöt_out_¨r
, 
£rvi˚_a˘i⁄
, 
≥ri_ty≥
);

1182 i‡(
v≈
)

1183 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "%s", 
v≈
->
«me
);

1185 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "Maintenance out serviceáction=0x%x",

1186 
£rvi˚_a˘i⁄
);

1188 
SG_SERVICE_ACTION_IN_12
:

1189 
v≈
 = 
	`gë_vÆue_«me
(
sg_lib_£rv_ö12_¨r
, 
£rvi˚_a˘i⁄
, 
≥ri_ty≥
);

1190 i‡(
v≈
)

1191 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "%s", 
v≈
->
«me
);

1193 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "Serviceáction in(12)=0x%x",

1194 
£rvi˚_a˘i⁄
);

1196 
SG_SERVICE_ACTION_OUT_12
:

1197 
v≈
 = 
	`gë_vÆue_«me
(
sg_lib_£rv_out12_¨r
, 
£rvi˚_a˘i⁄
, 
≥ri_ty≥
);

1198 i‡(
v≈
)

1199 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "%s", 
v≈
->
«me
);

1201 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "Serviceáction out(12)=0x%x",

1202 
£rvi˚_a˘i⁄
);

1204 
SG_SERVICE_ACTION_IN_16
:

1205 
v≈
 = 
	`gë_vÆue_«me
(
sg_lib_£rv_ö16_¨r
, 
£rvi˚_a˘i⁄
, 
≥ri_ty≥
);

1206 i‡(
v≈
)

1207 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "%s", 
v≈
->
«me
);

1209 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "Serviceáction in(16)=0x%x",

1210 
£rvi˚_a˘i⁄
);

1212 
SG_SERVICE_ACTION_OUT_16
:

1213 
v≈
 = 
	`gë_vÆue_«me
(
sg_lib_£rv_out16_¨r
, 
£rvi˚_a˘i⁄
, 
≥ri_ty≥
);

1214 i‡(
v≈
)

1215 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "%s", 
v≈
->
«me
);

1217 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "Serviceáction out(16)=0x%x",

1218 
£rvi˚_a˘i⁄
);

1220 
SG_PERSISTENT_RESERVE_IN
:

1221 
v≈
 = 
	`gë_vÆue_«me
(
sg_lib_¥_ö_¨r
, 
£rvi˚_a˘i⁄
, 
≥ri_ty≥
);

1222 i‡(
v≈
)

1223 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "%s", 
v≈
->
«me
);

1225 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "PersistentÑeserve in, service "

1226 "a˘i⁄=0x%x", 
£rvi˚_a˘i⁄
);

1228 
SG_PERSISTENT_RESERVE_OUT
:

1229 
v≈
 = 
	`gë_vÆue_«me
(
sg_lib_¥_out_¨r
, 
£rvi˚_a˘i⁄
, 
≥ri_ty≥
);

1230 i‡(
v≈
)

1231 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "%s", 
v≈
->
«me
);

1233 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "PersistentÑeserve out, service "

1234 "a˘i⁄=0x%x", 
£rvi˚_a˘i⁄
);

1236 
SG_EXTENDED_COPY
:

1237 
v≈
 = 
	`gë_vÆue_«me
(
sg_lib_xc›y_ß_¨r
, 
£rvi˚_a˘i⁄
, 
≥ri_ty≥
);

1238 i‡(
v≈
)

1239 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "%s", 
v≈
->
«me
);

1241 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "Extended copy, serviceáction=0x%x",

1242 
£rvi˚_a˘i⁄
);

1244 
SG_RECEIVE_COPY
:

1245 
v≈
 = 
	`gë_vÆue_«me
(
sg_lib_ªc_c›y_ß_¨r
, 
£rvi˚_a˘i⁄
,

1246 
≥ri_ty≥
);

1247 i‡(
v≈
)

1248 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "%s", 
v≈
->
«me
);

1250 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "Receive copy, serviceáction=0x%x",

1251 
£rvi˚_a˘i⁄
);

1253 
SG_READ_BUFFER
:

1255 
v≈
 = 
	`gë_vÆue_«me
(
sg_lib_ªad_buff_¨r
, 
£rvi˚_a˘i⁄
,

1256 
≥ri_ty≥
);

1257 i‡(
v≈
)

1258 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "Ród buf„∏(%s)\n", 
v≈
->
«me
);

1260 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "Read buffer, mode=0x%x",

1261 
£rvi˚_a˘i⁄
);

1263 
SG_WRITE_BUFFER
:

1265 
v≈
 = 
	`gë_vÆue_«me
(
sg_lib_wrôe_buff_¨r
, 
£rvi˚_a˘i⁄
,

1266 
≥ri_ty≥
);

1267 i‡(
v≈
)

1268 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "Wrôêbuf„∏(%s)\n", 
v≈
->
«me
);

1270 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "Write buffer, mode=0x%x",

1271 
£rvi˚_a˘i⁄
);

1274 
	`sg_gë_›code_«me
(
cmd_byã0
, 
≥ri_ty≥
, 
buff_Àn
, 
buff
);

1277 
	}
}

1280 
	$sg_gë_›code_«me
(
cmd_byã0
, 
≥ri_ty≥
, 
buff_Àn
,

1281 * 
buff
)

1283 c⁄° 
sg_lib_vÆue_«me_t
 * 
v≈
;

1284 
gΩ
;

1286 i‡((
NULL
 =
buff
Ë|| (
buff_Àn
 < 1))

1288 i‡(1 =
buff_Àn
) {

1289 
buff
[0] = '\0';

1292 i‡(
SG_VARIABLE_LENGTH_CMD
 =
cmd_byã0
) {

1293 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "%s", "VariableÜength");

1296 
gΩ
 = (
cmd_byã0
 >> 5) & 0x7;

1297 
gΩ
) {

1303 
v≈
 = 
	`gë_vÆue_«me
(
sg_lib_n‹mÆ_›codes
, 
cmd_byã0
, 
≥ri_ty≥
);

1304 i‡(
v≈
)

1305 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "%s", 
v≈
->
«me
);

1307 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "Opcode=0x%x", ()
cmd_byã0
);

1310 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "Re£rved [0x%x]", ()
cmd_byã0
);

1314 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "Víd‹ s≥cifi¯[0x%x]", ()
cmd_byã0
);

1317 
	`my_¢¥ötf
(
buff
, 
buff_Àn
, "Opcode=0x%x", ()
cmd_byã0
);

1320 
	}
}

1332 
	$sg_vpd_dev_id_ôî
(c⁄° * 
öôül_desig_desc
, 
∑ge_Àn
,

1333 * 
off
, 
m_assoc
, 
m_desig_ty≥
, 
m_code_£t
)

1335 c⁄° * 
u˝
;

1336 
k
, 
c_£t
, 
assoc
, 
desig_ty≥
;

1338 
k
 = *
off
, 
u˝
 = 
öôül_desig_desc
 ; (k + 3Ë< 
∑ge_Àn
; ) {

1339 
k
 = (k < 0Ë? 0 : (k + 
u˝
[k + 3] + 4);

1340 i‡((
k
 + 4Ë> 
∑ge_Àn
)

1342 
c_£t
 = (
u˝
[
k
] & 0xf);

1343 i‡((
m_code_£t
 >0Ë&& (m_code_£à!
c_£t
))

1345 
assoc
 = ((
u˝
[
k
 + 1] >> 4) & 0x3);

1346 i‡((
m_assoc
 >0Ë&& (m_asso¯!
assoc
))

1348 
desig_ty≥
 = (
u˝
[
k
 + 1] & 0xf);

1349 i‡((
m_desig_ty≥
 >0Ë&& (m_desig_ty≥ !
desig_ty≥
))

1351 *
off
 = 
k
;

1354  (
k
 =
∑ge_Àn
) ? -1 : -2;

1355 
	}
}

1363 
	gß„_îrbuf
[64] = {'u', 'n', 'k', 'n', 'o', 'w', 'n', ' ',

1367 
	$ß„_°ªº‹
(
î∫um
)

1369 
size_t
 
Àn
;

1370 * 
îr°r
;

1372 i‡(
î∫um
 < 0)

1373 
î∫um
 = -errnum;

1374 
îr°r
 = 
	`°ªº‹
(
î∫um
);

1375 i‡(
NULL
 =
îr°r
) {

1376 
Àn
 = 
	`°æí
(
ß„_îrbuf
);

1377 
	`my_¢¥ötf
(
ß„_îrbuf
 + 
Àn
, (safe_errbuf) -Üen, "%i",

1378 
î∫um
);

1379  
ß„_îrbuf
;

1381  
îr°r
;

1382 
	}
}

1392 
	$dSåHex
(c⁄° * 
°r
, 
Àn
, 
no_ascii
)

1394 c⁄° * 
p
 = 
°r
;

1395 c⁄° * 
f‹m©°r
;

1396 
c
;

1397 
buff
[82];

1398 
a
 = 0;

1399 c⁄° 
bp°¨t
 = 5;

1400 c⁄° 
˝°¨t
 = 60;

1401 
˝os
 = 
˝°¨t
;

1402 
bpos
 = 
bp°¨t
;

1403 
i
, 
k
, 
bÀn
;

1405 i‡(
Àn
 <= 0)

1407 
bÀn
 = ()(
buff
);

1408 
f‹m©°r
 = (0 =
no_ascii
) ? "%.76s\n" : "%.56s\n";

1409 
	`mem£t
(
buff
, ' ', 80);

1410 
buff
[80] = '\0';

1411 i‡(
no_ascii
 < 0) {

1412 
k
 = 0; k < 
Àn
; k++) {

1413 
c
 = *
p
++;

1414 
bpos
 += 3;

1415 i‡(
bpos
 =(
bp°¨t
 + (9 * 3)))

1416 
bpos
++;

1417 
	`my_¢¥ötf
(&
buff
[
bpos
], 
bÀn
 - bpos, "%.2x",

1418 ()()
c
);

1419 
buff
[
bpos
 + 2] = ' ';

1420 i‡((
k
 > 0) && (0 == ((k + 1) % 16))) {

1421 
	`¥ötf
(
f‹m©°r
, 
buff
);

1422 
bpos
 = 
bp°¨t
;

1423 
	`mem£t
(
buff
, ' ', 80);

1426 i‡(
bpos
 > 
bp°¨t
) {

1427 
buff
[
bpos
 + 2] = '\0';

1428 
	`¥ötf
("%s\n", 
buff
);

1433 
k
 = 
	`my_¢¥ötf
(
buff
 + 1, 
bÀn
 - 1, "%.2x", 
a
);

1434 
buff
[
k
 + 1] = ' ';

1436 
i
 = 0; i < 
Àn
; i++) {

1437 
c
 = *
p
++;

1438 
bpos
 += 3;

1439 i‡(
bpos
 =(
bp°¨t
 + (9 * 3)))

1440 
bpos
++;

1441 
	`my_¢¥ötf
(&
buff
[
bpos
], 
bÀn
 - bpos, "%.2x", ()()
c
);

1442 
buff
[
bpos
 + 2] = ' ';

1443 i‡(
no_ascii
)

1444 
buff
[
˝os
++] = ' ';

1446 i‡((
c
 < ' ') || (c >= 0x7f))

1447 
c
 = '.';

1448 
buff
[
˝os
++] = 
c
;

1450 i‡(
˝os
 > (
˝°¨t
 + 15)) {

1451 
	`¥ötf
(
f‹m©°r
, 
buff
);

1452 
bpos
 = 
bp°¨t
;

1453 
˝os
 = 
˝°¨t
;

1454 
a
 += 16;

1455 
	`mem£t
(
buff
, ' ', 80);

1456 
k
 = 
	`my_¢¥ötf
(
buff
 + 1, 
bÀn
 - 1, "%.2x", 
a
);

1457 
buff
[
k
 + 1] = ' ';

1460 i‡(
˝os
 > 
˝°¨t
) {

1461 
buff
[
˝os
] = '\0';

1462 
	`¥ötf
("%s\n", 
buff
);

1464 
	}
}

1469 
	$dSåHexEº
(c⁄° * 
°r
, 
Àn
, 
b_Àn
, * 
b
)

1471 c⁄° * 
p
 = 
°r
;

1472 
c
;

1473 
buff
[82];

1474 c⁄° 
bp°¨t
 = 5;

1475 
bpos
 = 
bp°¨t
;

1476 
k
, 
n
;

1478 i‡(
Àn
 <= 0)

1480 
n
 = 0;

1481 
	`mem£t
(
buff
, ' ', 80);

1482 
buff
[80] = '\0';

1483 
k
 = 0; k < 
Àn
; k++) {

1484 
c
 = *
p
++;

1485 
bpos
 += 3;

1486 i‡(
bpos
 =(
bp°¨t
 + (9 * 3)))

1487 
bpos
++;

1488 
	`my_¢¥ötf
(&
buff
[
bpos
], ()(buff) - bpos, "%.2x",

1489 ()()
c
);

1490 
buff
[
bpos
 + 2] = ' ';

1491 i‡((
k
 > 0) && (0 == ((k + 1) % 16))) {

1492 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
b_Àn
 -Ç, "%.60s\n", 
buff
);

1493 i‡(
n
 >(
b_Àn
 - 1))

1495 
bpos
 = 
bp°¨t
;

1496 
	`mem£t
(
buff
, ' ', 80);

1499 i‡(
bpos
 > 
bp°¨t
)

1500 
n
 +
	`my_¢¥ötf
(
b
 +Ç, 
b_Àn
 -Ç, "%.60s\n", 
buff
);

1502 
	}
}

1508 
	$sg_is_big_ídün
()

1510 
	uu_t
 {

1511 
s
;

1512 
c
[()];

1513 } 
u
;

1515 
u
.
s
 = 0x0102;

1516  (
u
.
c
[0] == 0x01);

1518 
	}
}

1521 
	$sw≠b_ush‹t
(
u
)

1523 
r
;

1525 
r
 = (
u
 >> 8) & 0xff;

1526 
r
 |((
u
 & 0xff) << 8);

1527  
r
;

1528 
	}
}

1541 
	$dW‹dHex
(c⁄° * 
w‹ds
, 
num
, 
no_ascii
, 
sw≠b
)

1543 c⁄° * 
p
 = 
w‹ds
;

1544 
c
;

1545 
buff
[82];

1546 
uµ
, 
low
;

1547 
a
 = 0;

1548 c⁄° 
bp°¨t
 = 3;

1549 c⁄° 
˝°¨t
 = 52;

1550 
˝os
 = 
˝°¨t
;

1551 
bpos
 = 
bp°¨t
;

1552 
i
, 
k
, 
bÀn
;

1554 i‡(
num
 <= 0)

1556 
bÀn
 = ()(
buff
);

1557 
	`mem£t
(
buff
, ' ', 80);

1558 
buff
[80] = '\0';

1559 i‡(
no_ascii
 < 0) {

1560 
k
 = 0; k < 
num
; k++) {

1561 
c
 = *
p
++;

1562 i‡(
sw≠b
)

1563 
c
 = 
	`sw≠b_ush‹t
(c);

1564 
bpos
 += 5;

1565 
	`my_¢¥ötf
(&
buff
[
bpos
], 
bÀn
 - bpos, "%.4x", ()
c
);

1566 
buff
[
bpos
 + 4] = ' ';

1567 i‡((
k
 > 0) && (0 == ((k + 1) % 8))) {

1568 i‡(-2 =
no_ascii
)

1569 
	`¥ötf
("%.39s\n", 
buff
 +8);

1571 
	`¥ötf
("%.47s\n", 
buff
);

1572 
bpos
 = 
bp°¨t
;

1573 
	`mem£t
(
buff
, ' ', 80);

1576 i‡(
bpos
 > 
bp°¨t
) {

1577 i‡(-2 =
no_ascii
)

1578 
	`¥ötf
("%.39s\n", 
buff
 +8);

1580 
	`¥ötf
("%.47s\n", 
buff
);

1585 
k
 = 
	`my_¢¥ötf
(
buff
 + 1, 
bÀn
 - 1, "%.2x", 
a
);

1586 
buff
[
k
 + 1] = ' ';

1588 
i
 = 0; i < 
num
; i++) {

1589 
c
 = *
p
++;

1590 i‡(
sw≠b
)

1591 
c
 = 
	`sw≠b_ush‹t
(c);

1592 
bpos
 += 5;

1593 
	`my_¢¥ötf
(&
buff
[
bpos
], 
bÀn
 - bpos, "%.4x", ()
c
);

1594 
buff
[
bpos
 + 4] = ' ';

1595 i‡(
no_ascii
) {

1596 
buff
[
˝os
++] = ' ';

1597 
buff
[
˝os
++] = ' ';

1598 
buff
[
˝os
++] = ' ';

1600 
uµ
 = (
c
 >> 8) & 0xff;

1601 
low
 = 
c
 & 0xff;

1602 i‡((
uµ
 < 0x20) || (upp >= 0x7f))

1603 
uµ
 = '.';

1604 
buff
[
˝os
++] = 
uµ
;

1605 i‡((
low
 < 0x20) || (low >= 0x7f))

1606 
low
 = '.';

1607 
buff
[
˝os
++] = 
low
;

1608 
buff
[
˝os
++] = ' ';

1610 i‡(
˝os
 > (
˝°¨t
 + 23)) {

1611 
	`¥ötf
("%.76s\n", 
buff
);

1612 
bpos
 = 
bp°¨t
;

1613 
˝os
 = 
˝°¨t
;

1614 
a
 += 8;

1615 
	`mem£t
(
buff
, ' ', 80);

1616 
k
 = 
	`my_¢¥ötf
(
buff
 + 1, 
bÀn
 - 1, "%.2x", 
a
);

1617 
buff
[
k
 + 1] = ' ';

1620 i‡(
˝os
 > 
˝°¨t
)

1621 
	`¥ötf
("%.76s\n", 
buff
);

1622 
	}
}

1629 
	$sg_gë_num
(c⁄° * 
buf
)

1631 
ªs
, 
num
, 
n
, 
Àn
;

1632 
unum
;

1633 * 
˝
;

1634 
c
 = 'c';

1635 
c2
, 
c3
;

1637 i‡((
NULL
 =
buf
) || ('\0' == buf[0]))

1639 
Àn
 = 
	`°æí
(
buf
);

1640 i‡(('0' =
buf
[0]) && (('x' == buf[1]) || ('X' == buf[1]))) {

1641 
ªs
 = 
	`ssˇnf
(
buf
 + 2, "%x", &
unum
);

1642 
num
 = 
unum
;

1643 } i‡('H' =
	`touµî
(()
buf
[
Àn
 - 1])) {

1644 
ªs
 = 
	`ssˇnf
(
buf
, "%x", &
unum
);

1645 
num
 = 
unum
;

1647 
ªs
 = 
	`ssˇnf
(
buf
, "%d%c%c%c", &
num
, &
c
, &
c2
, &
c3
);

1648 i‡(
ªs
 < 1)

1650 i‡(1 =
ªs
)

1651  
num
;

1653 i‡(
ªs
 > 2)

1654 
c2
 = 
	`touµî
(()c2);

1655 i‡(
ªs
 > 3)

1656 
c3
 = 
	`touµî
(()c3);

1657 
	`touµî
(()
c
)) {

1659  
num
;

1661  
num
 * 2;

1663  
num
 * 512;

1665 i‡(2 =
ªs
)

1666  
num
 * 1024;

1667 i‡(('B' =
c2
) || ('D' == c2))

1668  
num
 * 1000;

1669 i‡(('I' =
c2
Ë&& (4 =
ªs
Ë&& ('B' =
c3
))

1670  
num
 * 1024;

1673 i‡(2 =
ªs
)

1674  
num
 * 1048576;

1675 i‡(('B' =
c2
) || ('D' == c2))

1676  
num
 * 1000000;

1677 i‡(('I' =
c2
Ë&& (4 =
ªs
Ë&& ('B' =
c3
))

1678  
num
 * 1048576;

1681 i‡(2 =
ªs
)

1682  
num
 * 1073741824;

1683 i‡(('B' =
c2
) || ('D' == c2))

1684  
num
 * 1000000000;

1685 i‡(('I' =
c2
Ë&& (4 =
ªs
Ë&& ('B' =
c3
))

1686  
num
 * 1073741824;

1689 
˝
 = (*)
	`°rchr
(
buf
, 'x');

1690 i‡(
NULL
 =
˝
)

1691 
˝
 = (*)
	`°rchr
(
buf
, 'X');

1692 i‡(
˝
) {

1693 
n
 = 
	`sg_gë_num
(
˝
 + 1);

1694 i‡(-1 !
n
)

1695  
num
 * 
n
;

1699 i‡(
NULL
 =
sg_w¨nögs_°rm
)

1700 
sg_w¨nögs_°rm
 = 
°dîr
;

1701 
	`Ârötf
(
sg_w¨nögs_°rm
, "unrecognized multiplier\n");

1705 
	}
}

1712 
	$sg_gë_num_nomu…
(c⁄° * 
buf
)

1714 
ªs
, 
Àn
, 
num
;

1715 
unum
;

1716 * 
comm≠
;

1718 i‡((
NULL
 =
buf
) || ('\0' == buf[0]))

1720 
Àn
 = 
	`°æí
(
buf
);

1721 
comm≠
 = (*)
	`°rchr
(
buf
 + 1, ',');

1722 i‡(('0' =
buf
[0]) && (('x' == buf[1]) || ('X' == buf[1]))) {

1723 
ªs
 = 
	`ssˇnf
(
buf
 + 2, "%x", &
unum
);

1724 
num
 = 
unum
;

1725 } i‡(
comm≠
 && ('H' =
	`touµî
(()*(commap - 1)))) {

1726 
ªs
 = 
	`ssˇnf
(
buf
, "%x", &
unum
);

1727 
num
 = 
unum
;

1728 } i‡((
NULL
 =
comm≠
Ë&& ('H' =
	`touµî
(()
buf
[
Àn
 - 1]))) {

1729 
ªs
 = 
	`ssˇnf
(
buf
, "%x", &
unum
);

1730 
num
 = 
unum
;

1732 
ªs
 = 
	`ssˇnf
(
buf
, "%d", &
num
);

1733 i‡(1 =
ªs
)

1734  
num
;

1737 
	}
}

1743 
öt64_t


1744 
	$sg_gë_Œnum
(c⁄° * 
buf
)

1746 
ªs
, 
Àn
;

1747 
öt64_t
 
num
, 
Œ
;

1748 
uöt64_t
 
unum
;

1749 * 
˝
;

1750 
c
 = 'c';

1751 
c2
, 
c3
;

1753 i‡((
NULL
 =
buf
) || ('\0' == buf[0]))

1755 
Àn
 = 
	`°æí
(
buf
);

1756 i‡(('0' =
buf
[0]) && (('x' == buf[1]) || ('X' == buf[1]))) {

1757 
ªs
 = 
	`ssˇnf
(
buf
 + 2, "%" 
SCNx64
 "", &
unum
);

1758 
num
 = 
unum
;

1759 } i‡('H' =
	`touµî
(()
buf
[
Àn
 - 1])) {

1760 
ªs
 = 
	`ssˇnf
(
buf
, "%" 
SCNx64
 "", &
unum
);

1761 
num
 = 
unum
;

1763 
ªs
 = 
	`ssˇnf
(
buf
, "%" 
SCNd64
 "%c%c%c", &
num
, &
c
, &
c2
, &
c3
);

1764 i‡(
ªs
 < 1)

1766 i‡(1 =
ªs
)

1767  
num
;

1769 i‡(
ªs
 > 2)

1770 
c2
 = 
	`touµî
(()c2);

1771 i‡(
ªs
 > 3)

1772 
c3
 = 
	`touµî
(()c3);

1773 
	`touµî
(()
c
)) {

1775  
num
;

1777  
num
 * 2;

1779  
num
 * 512;

1781 i‡(2 =
ªs
)

1782  
num
 * 1024;

1783 i‡(('B' =
c2
) || ('D' == c2))

1784  
num
 * 1000;

1785 i‡(('I' =
c2
Ë&& (4 =
ªs
Ë&& ('B' =
c3
))

1786  
num
 * 1024;

1789 i‡(2 =
ªs
)

1790  
num
 * 1048576;

1791 i‡(('B' =
c2
) || ('D' == c2))

1792  
num
 * 1000000;

1793 i‡(('I' =
c2
Ë&& (4 =
ªs
Ë&& ('B' =
c3
))

1794  
num
 * 1048576;

1797 i‡(2 =
ªs
)

1798  
num
 * 1073741824;

1799 i‡(('B' =
c2
) || ('D' == c2))

1800  
num
 * 1000000000;

1801 i‡(('I' =
c2
Ë&& (4 =
ªs
Ë&& ('B' =
c3
))

1802  
num
 * 1073741824;

1805 i‡(2 =
ªs
)

1806  
num
 * 1099511627776LL;

1807 i‡(('B' =
c2
) || ('D' == c2))

1808  
num
 * 1000000000000LL;

1809 i‡(('I' =
c2
Ë&& (4 =
ªs
Ë&& ('B' =
c3
))

1810  
num
 * 1099511627776LL;

1813 i‡(2 =
ªs
)

1814  
num
 * 1099511627776LL * 1024;

1815 i‡(('B' =
c2
) || ('D' == c2))

1816  
num
 * 1000000000000LL * 1000;

1817 i‡(('I' =
c2
Ë&& (4 =
ªs
Ë&& ('B' =
c3
))

1818  
num
 * 1099511627776LL * 1024;

1821 
˝
 = (*)
	`°rchr
(
buf
, 'x');

1822 i‡(
NULL
 =
˝
)

1823 
˝
 = (*)
	`°rchr
(
buf
, 'X');

1824 i‡(
˝
) {

1825 
Œ
 = 
	`sg_gë_Œnum
(
˝
 + 1);

1826 i‡(-1LL !
Œ
)

1827  
num
 * 
Œ
;

1831 i‡(
NULL
 =
sg_w¨nögs_°rm
)

1832 
sg_w¨nögs_°rm
 = 
°dîr
;

1833 
	`Ârötf
(
sg_w¨nögs_°rm
, "unrecognized multiplier\n");

1837 
	}
}

1844 
	$sg_©a_gë_ch¨s
(c⁄° * 
w‹d_¨r
, 
°¨t_w‹d
,

1845 
num_w‹ds
, 
is_big_ídün
, * 
och¨s
)

1847 
k
;

1848 
s
;

1849 
a
, 
b
;

1850 * 
›
 = 
och¨s
;

1852 
k
 = 
°¨t_w‹d
; k < (°¨t_w‹d + 
num_w‹ds
); ++k) {

1853 
s
 = 
w‹d_¨r
[
k
];

1854 i‡(
is_big_ídün
) {

1855 
a
 = 
s
 & 0xff;

1856 
b
 = (
s
 >> 8) & 0xff;

1858 
a
 = (
s
 >> 8) & 0xff;

1859 
b
 = 
s
 & 0xff;

1861 i‡(
a
 == 0)

1863 *
›
++ = 
a
;

1864 i‡(
b
 == 0)

1866 *
›
++ = 
b
;

1868  
›
 - 
och¨s
;

1869 
	}
}

1872 
	$sg_lib_vîsi⁄
()

1874  
sg_lib_vîsi⁄_°r
;

1875 
	}
}

1878 #ifde‡
SG_LIB_MINGW


1883 
	~<uni°d.h
>

1884 
	~<f˙é.h
>

1887 
	$sg_£t_ãxt_mode
(
fd
)

1889  
	`£tmode
(
fd
, 
O_TEXT
);

1890 
	}
}

1895 
	$sg_£t_bö¨y_mode
(
fd
)

1897  
	`£tmode
(
fd
, 
O_BINARY
);

1898 
	}
}

1903 
	$sg_£t_ãxt_mode
(
fd
)

1905  
fd
;

1906 
	}
}

1909 
	$sg_£t_bö¨y_mode
(
fd
)

1911  
fd
;

1912 
	}
}

	@lib/sg_lib_data.c

8 
	~<°dlib.h
>

10 
	~"sg_lib.h
"

11 
	~"sg_lib_d©a.h
"

13 #ifde‡
HAVE_CONFIG_H


14 
	~"c⁄fig.h
"

18 c⁄° * 
	gsg_lib_vîsi⁄_°r
 = "1.83 20130530";

20 #ifde‡
SG_SCSI_STRINGS


21 
sg_lib_vÆue_«me_t
 
	gsg_lib_n‹mÆ_›codes
[] = {

24 {0x1, 
PDT_TAPE
, "Rewind"},

27 {0x4, 
PDT_TAPE
, "Format medium"},

28 {0x4, 
PDT_PRINTER
, "Format"},

31 {0x7, 
PDT_MCHANGER
, "InitializeÉlement status"},

33 {0x8, 
PDT_PROCESSOR
, "Receive"},

35 {0xa, 
PDT_PRINTER
, "Print"},

36 {0xa, 
PDT_PROCESSOR
, "Send"},

38 {0xb, 
PDT_TAPE
, "Set capacity"},

39 {0xb, 
PDT_PRINTER
, "SlewándÖrint"},

42 {0x10, 
PDT_PRINTER
, "Synchronize buffer"},

49 {0x16, 
PDT_MCHANGER
, "ReserveÉlement(6)"},

51 {0x17, 
PDT_MCHANGER
, "ReleaseÉlement(6)"},

56 {0x1b, 
PDT_TAPE
, "Load unload"},

57 {0x1b, 
PDT_ADC
, "Load unload"},

58 {0x1b, 
PDT_PRINTER
, "StopÖrint"},

66 {0x25, 
PDT_OCRW
, "Read card capacity"},

71 {0x2b, 
PDT_TAPE
, "Locate(10)"},

72 {0x2b, 
PDT_MCHANGER
, "PositionÅoÉlement"},

83 {0x34, 
PDT_TAPE
, "ReadÖosition"},

89 {0x37, 
PDT_MCHANGER
, "InitializeÉlement status withÑange"},

101 {0x42, 
PDT_MMC
, "Read sub-channel"},

102 {0x43, 
PDT_MMC
, "Read TOC/PMA/ATIP"},

104 {0x45, 
PDT_MMC
, "Playáudio(10)"},

105 {0x46, 
PDT_MMC
, "Get configuration"},

106 {0x47, 
PDT_MMC
, "Playáudio msf"},

108 {0x4a, 
PDT_MMC
, "GetÉvent statusÇotification"},

109 {0x4b, 
PDT_MMC
, "Pause/resume"},

115 {0x51, 
PDT_MMC
, "Read disk information"},

117 {0x52, 
PDT_MMC
, "ReadÅrack information"},

122 {0x56, 
PDT_MCHANGER
, "ReserveÉlement(10)"},

124 {0x57, 
PDT_MCHANGER
, "ReleaseÉlement(10)"},

134 {0x80, 
PDT_TAPE
, "Write filemarks(16)"},

136 {0x81, 
PDT_TAPE
, "ReadÑeverse(16)"},

153 {0x91, 
PDT_TAPE
, "Space(16)"},

155 {0x92, 
PDT_TAPE
, "Locate(16)"},

157 {0x93, 
PDT_TAPE
, "Erase(16)"},

163 {0xa1, 
PDT_MMC
, "Blank"},

166 {0xa3, 
PDT_MMC
, "Send key"},

168 {0xa4, 
PDT_MMC
, "Report key"},

170 {0xa5, 
PDT_MMC
, "Playáudio(12)"},

172 {0xa6, 
PDT_MMC
, "Load/unload medium"},

174 {0xa7, 
PDT_MMC
, "SetÑeadáhead"},

180 {0xac, 
PDT_MMC
, "GetÖerformance"},

181 {0xad, 
PDT_MMC
, "Read DVD/BD structure"},

187 {0xb1, 
PDT_MCHANGER
, "Open/close import/exportÉlement"},

192 {0xb5, 
PDT_MCHANGER
, "Request volumeÉlementáddress"},

194 {0xb6, 
PDT_MMC
, "Set streaming"},

199 {0xba, 
PDT_MMC
, "Scan"},

201 {0xbb, 
PDT_MMC
, "Set CD speed"},

204 {0xbd, 
PDT_MMC
, "Mechanism status"},

206 {0xbe, 
PDT_MMC
, "Read CD"},

208 {0xbf, 
PDT_MMC
, "Send DVD/BD structure"},

209 {0xffff, 0, 
NULL
},

212 
sg_lib_vÆue_«me_t
 
	gsg_lib_ªad_buff_¨r
[] = {

220 {0xffff, 0, 
NULL
},

223 
sg_lib_vÆue_«me_t
 
	gsg_lib_wrôe_buff_¨r
[] = {

238 {0xffff, 0, 
NULL
},

241 
sg_lib_vÆue_«me_t
 
	gsg_lib_maöt_ö_¨r
[] = {

251 {0xffff, 0, 
NULL
},

254 
sg_lib_vÆue_«me_t
 
	gsg_lib_maöt_out_¨r
[] = {

263 {0xffff, 0, 
NULL
},

266 
sg_lib_vÆue_«me_t
 
	gsg_lib_£rv_ö12_¨r
[] = {

268 {0xffff, 0, 
NULL
},

271 
sg_lib_vÆue_«me_t
 
	gsg_lib_£rv_out12_¨r
[] = {

273 {0xffff, 0, 
NULL
},

276 
sg_lib_vÆue_«me_t
 
	gsg_lib_£rv_ö16_¨r
[] = {

281 {0xffff, 0, 
NULL
},

284 
sg_lib_vÆue_«me_t
 
	gsg_lib_£rv_out16_¨r
[] = {

286 {0x1f, 
PDT_ADC
, "Notify dataÅransfer device(16)"},

287 {0xffff, 0, 
NULL
},

290 
sg_lib_vÆue_«me_t
 
	gsg_lib_£rv_bidi_¨r
[] = {

291 {0xffff, 0, 
NULL
},

294 
sg_lib_vÆue_«me_t
 
	gsg_lib_¥_ö_¨r
[] = {

299 {0xffff, 0, 
NULL
},

302 
sg_lib_vÆue_«me_t
 
	gsg_lib_¥_out_¨r
[] = {

311 {0xffff, 0, 
NULL
},

314 
sg_lib_vÆue_«me_t
 
	gsg_lib_xc›y_ß_¨r
[] = {

320 {0xffff, 0, 
NULL
},

323 
sg_lib_vÆue_«me_t
 
	gsg_lib_ªc_c›y_ß_¨r
[] = {

332 {0xffff, 0, 
NULL
},

335 
sg_lib_vÆue_«me_t
 
	gsg_lib_v¨übÀ_Àngth_¨r
[] = {

405 {0xffff, 0, 
NULL
},

409 
sg_lib_vÆue_«me_t
 
	gsg_lib_n‹mÆ_›codes
[] = {

410 {0xffff, 0, 
NULL
},

413 
sg_lib_vÆue_«me_t
 
	gsg_lib_ªad_buff_¨r
[] = {

414 {0xffff, 0, 
NULL
},

417 
sg_lib_vÆue_«me_t
 
	gsg_lib_wrôe_buff_¨r
[] = {

418 {0xffff, 0, 
NULL
},

421 
sg_lib_vÆue_«me_t
 
	gsg_lib_maöt_ö_¨r
[] = {

422 {0xffff, 0, 
NULL
},

425 
sg_lib_vÆue_«me_t
 
	gsg_lib_maöt_out_¨r
[] = {

426 {0xffff, 0, 
NULL
},

429 
sg_lib_vÆue_«me_t
 
	gsg_lib_£rv_ö12_¨r
[] = {

430 {0xffff, 0, 
NULL
},

433 
sg_lib_vÆue_«me_t
 
	gsg_lib_£rv_out12_¨r
[] = {

434 {0xffff, 0, 
NULL
},

437 
sg_lib_vÆue_«me_t
 
	gsg_lib_£rv_ö16_¨r
[] = {

438 {0xffff, 0, 
NULL
},

441 
sg_lib_vÆue_«me_t
 
	gsg_lib_£rv_out16_¨r
[] = {

442 {0xffff, 0, 
NULL
},

445 
sg_lib_vÆue_«me_t
 
	gsg_lib_£rv_bidi_¨r
[] = {

446 {0xffff, 0, 
NULL
},

449 
sg_lib_vÆue_«me_t
 
	gsg_lib_¥_ö_¨r
[] = {

450 {0xffff, 0, 
NULL
},

453 
sg_lib_vÆue_«me_t
 
	gsg_lib_¥_out_¨r
[] = {

454 {0xffff, 0, 
NULL
},

457 
sg_lib_vÆue_«me_t
 
	gsg_lib_xc›y_ß_¨r
[] = {

458 {0xffff, 0, 
NULL
},

461 
sg_lib_vÆue_«me_t
 
	gsg_lib_ªc_c›y_ß_¨r
[] = {

462 {0xffff, 0, 
NULL
},

465 
sg_lib_vÆue_«me_t
 
	gsg_lib_v¨übÀ_Àngth_¨r
[] = {

466 {0xffff, 0, 
NULL
},

475 #ifde‡
SG_SCSI_STRINGS


476 
sg_lib_asc_ascq_ønge_t
 
	gsg_lib_asc_ascq_ønge
[] =

484 {0, 0, 0, 
NULL
}

487 
sg_lib_asc_ascq_t
 
	gsg_lib_asc_ascq
[] =

1200 {0, 0, 
NULL
}

1203 
sg_lib_asc_ascq_ønge_t
 
	gsg_lib_asc_ascq_ønge
[] =

1205 {0, 0, 0, 
NULL
}

1208 
sg_lib_asc_ascq_t
 
	gsg_lib_asc_ascq
[] =

1210 {0, 0, 
NULL
}

1214 c⁄° * 
	gsg_lib_£n£_key_desc
[] = {

1239 c⁄° * 
	gsg_lib_pdt_°rs
[] = {

1266 c⁄° * 
	gsg_lib_å™•‹t_¥Ÿo_°rs
[] =

	@lib/sg_pt_common.c

8 
	~<°dlib.h
>

10 
	~"sg_±.h
"

12 #ifde‡
HAVE_CONFIG_H


13 
	~"c⁄fig.h
"

17 c⁄° * 
	gscsi_±_vîsi⁄_°r
 = "2.09 20120125";

20 
	$scsi_±_vîsi⁄
()

22  
scsi_±_vîsi⁄_°r
;

23 
	}
}

	@lib/sg_pt_freebsd.c

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<sys/ty≥s.h
>

14 
	~<dúít.h
>

15 
	~<f˙é.h
>

16 
	~<î∫o.h
>

17 
	~<îr.h
>

18 
	~<ˇmlib.h
>

19 
	~<ˇm/scsi/scsi_mesßge.h
>

21 
	~<sys/°©.h
>

22 
	~<uni°d.h
>

23 
	~<f˙é.h
>

24 
	~<glob.h
>

25 
	~<f˙é.h
>

26 
	~<°ddef.h
>

28 
	~"sg_±.h
"

29 
	~"sg_lib.h
"

31 #ifde‡
HAVE_CONFIG_H


32 
	~"c⁄fig.h
"

36 
	#FREEBSD_MAXDEV
 64

	)

37 
	#FREEBSD_FDOFFSET
 16;

	)

40 
	s‰ìbsd_dev_ch™√l
 {

41 * 
	mdev«me
;

42 
	munônum
;

43 
ˇm_devi˚
* 
	mˇm_dev
;

48 
‰ìbsd_dev_ch™√l
 *
	gdevi˚èbÀ
[
FREEBSD_MAXDEV
];

50 
	#DEF_TIMEOUT
 60000

	)

52 
	ssg_±_‰ìbsd_scsi
 {

53 
ˇm_devi˚
* 
	mˇm_dev
;

54 
ccb
 *
	mccb
;

55 * 
	mcdb
;

56 
	mcdb_Àn
;

57 * 
	m£n£
;

58 
	m£n£_Àn
;

59 * 
	mdx„Ω
;

60 
	mdx„r_Àn
;

61 
	mdx„r_dú
;

62 
	mscsi_°©us
;

63 
	mªsid
;

64 
	m£n£_ªsid
;

65 
	mö_îr
;

66 
	mos_îr
;

67 
	må™•‹t_îr
;

70 
	ssg_±_ba£
 {

71 
sg_±_‰ìbsd_scsi
 
	mim∂
;

77 
	$scsi_±_›í_devi˚
(c⁄° * 
devi˚_«me
, 
ªad_⁄ly
, 
vîbo£
)

79 
oÊags
 = 0 ;

81 
oÊags
 |(
ªad_⁄ly
 ? 
O_RDONLY
 : 
O_RDWR
);

82  
	`scsi_±_›í_Êags
(
devi˚_«me
, 
oÊags
, 
vîbo£
);

83 
	}
}

89 
scsi_±_›í_Êags
(c⁄° * 
devi˚_«me
,

90 
Êags
 
__©åibuã__
 ((
unu£d
)), 
vîbo£
)

92 
‰ìbsd_dev_ch™√l
 *
	gfdch™
;

93 
ˇm_devi˚
* 
	gˇm_dev
;

94 
	gk
;

96 i‡(
	gNULL
 =
sg_w¨nögs_°rm
)

97 
sg_w¨nögs_°rm
 = 
°dîr
;

99 
	gk
 = 0; k < 
	gFREEBSD_MAXDEV
; k++)

100 i‡(! 
	gdevi˚èbÀ
[
k
])

105 i‡(
	gk
 =
FREEBSD_MAXDEV
) {

106 i‡(
vîbo£
)

107 
Ârötf
(
sg_w¨nögs_°rm
, "too many open file descriptors "

108 "(%d)\n", 
FREEBSD_MAXDEV
);

109 
	gî∫o
 = 
EMFILE
;

113 
	gfdch™
 = (
‰ìbsd_dev_ch™√l
 *)

114 
ˇŒoc
(1,(
‰ìbsd_dev_ch™√l
));

115 i‡(
	gfdch™
 =
NULL
) {

120 i‡(! (
	gfdch™
->
	gdev«me
 = (*)
ˇŒoc
(1, 
DEV_IDLEN
+1)))

123 i‡(
ˇm_gë_devi˚
(
devi˚_«me
, 
fdch™
->
dev«me
, 
DEV_IDLEN
,

124 &(
fdch™
->
unônum
)) == -1) {

125 i‡(
vîbo£
)

126 
Ârötf
(
sg_w¨nögs_°rm
, "bad deviceÇame structure\n");

127 
	gî∫o
 = 
EINVAL
;

131 i‡(! (
	gˇm_dev
 = 
ˇm_›í_•ec_devi˚
(
fdch™
->
dev«me
,

132 
fdch™
->
unônum
, 
O_RDWR
, 
NULL
))) {

133 i‡(
	gvîbo£
)

134 
Ârötf
(
sg_w¨nögs_°rm
, "cam_open_spec_device: %s\n",

135 
ˇm_îrbuf
);

136 
	gî∫o
 = 
EPERM
;

139 
	gfdch™
->
	gˇm_dev
 = 
ˇm_dev
;

141 
	gdevi˚èbÀ
[
k
] = 
fdch™
;

142  
	gk
 + 
	gFREEBSD_FDOFFSET
;

147 
	$scsi_±_˛o£_devi˚
(
devi˚_fd
)

149 
‰ìbsd_dev_ch™√l
 *
fdch™
;

150 
fd
 = 
devi˚_fd
 - 
FREEBSD_FDOFFSET
;

152 i‡((
fd
 < 0Ë|| (fd >
FREEBSD_MAXDEV
)) {

153 
î∫o
 = 
ENODEV
;

156 
fdch™
 = 
devi˚èbÀ
[
fd
];

157 i‡(
NULL
 =
fdch™
) {

158 
î∫o
 = 
ENODEV
;

161 i‡(
fdch™
->
dev«me
)

162 
	`‰ì
(
fdch™
->
dev«me
);

163 i‡(
fdch™
->
ˇm_dev
)

164 
	`ˇm_˛o£_devi˚
(
fdch™
->
ˇm_dev
);

165 
	`‰ì
(
fdch™
);

166 
devi˚èbÀ
[
fd
] = 
NULL
;

168 
	}
}

170 
sg_±_ba£
 *

171 
	$c⁄°ru˘_scsi_±_obj
()

173 
sg_±_‰ìbsd_scsi
 * 
±p
;

175 
±p
 = (
sg_±_‰ìbsd_scsi
 *)

176 
	`ˇŒoc
(1, (
sg_±_‰ìbsd_scsi
));

177 i‡(
±p
) {

178 
	`mem£t
(
±p
, 0, (
sg_±_‰ìbsd_scsi
));

179 
±p
->
dx„r_dú
 = 
CAM_DIR_NONE
;

181  (
sg_±_ba£
 *)
±p
;

182 
	}
}

185 
	$de°ru˘_scsi_±_obj
(
sg_±_ba£
 * 
vp
)

187 
sg_±_‰ìbsd_scsi
 * 
±p
 = &
vp
->
im∂
;

189 i‡(
±p
) {

190 i‡(
±p
->
ccb
)

191 
	`ˇm_‰ìccb
(
±p
->
ccb
);

192 
	`‰ì
(
±p
);

194 
	}
}

197 
	$˛ór_scsi_±_obj
(
sg_±_ba£
 * 
vp
)

199 
sg_±_‰ìbsd_scsi
 * 
±p
 = &
vp
->
im∂
;

201 i‡(
±p
) {

202 
	`mem£t
(
±p
, 0, (
sg_±_‰ìbsd_scsi
));

203 
±p
->
dx„r_dú
 = 
CAM_DIR_NONE
;

205 
	}
}

208 
	$£t_scsi_±_cdb
(
sg_±_ba£
 * 
vp
, c⁄° * 
cdb
, 
cdb_Àn
)

210 
sg_±_‰ìbsd_scsi
 * 
±p
 = &
vp
->
im∂
;

212 i‡(
±p
->
cdb
)

213 ++
±p
->
ö_îr
;

214 
±p
->
cdb
 = (*)cdb;

215 
±p
->
cdb_Àn
 = cdb_len;

216 
	}
}

219 
	$£t_scsi_±_£n£
(
sg_±_ba£
 * 
vp
, * 
£n£
,

220 
max_£n£_Àn
)

222 
sg_±_‰ìbsd_scsi
 * 
±p
 = &
vp
->
im∂
;

224 i‡(
±p
->
£n£
)

225 ++
±p
->
ö_îr
;

226 
	`mem£t
(
£n£
, 0, 
max_£n£_Àn
);

227 
±p
->
£n£
 = sense;

228 
±p
->
£n£_Àn
 = 
max_£n£_Àn
;

229 
	}
}

233 
	$£t_scsi_±_d©a_ö
(
sg_±_ba£
 * 
vp
, * 
dx„Ω
,

234 
dx„r_Àn
)

236 
sg_±_‰ìbsd_scsi
 * 
±p
 = &
vp
->
im∂
;

238 i‡(
±p
->
dx„Ω
)

239 ++
±p
->
ö_îr
;

240 i‡(
dx„r_Àn
 > 0) {

241 
±p
->
dx„Ω
 = dxferp;

242 
±p
->
dx„r_Àn
 = dxfer_len;

243 
±p
->
dx„r_dú
 = 
CAM_DIR_IN
;

245 
	}
}

249 
	$£t_scsi_±_d©a_out
(
sg_±_ba£
 * 
vp
, c⁄° * 
dx„Ω
,

250 
dx„r_Àn
)

252 
sg_±_‰ìbsd_scsi
 * 
±p
 = &
vp
->
im∂
;

254 i‡(
±p
->
dx„Ω
)

255 ++
±p
->
ö_îr
;

256 i‡(
dx„r_Àn
 > 0) {

257 
±p
->
dx„Ω
 = (*)dxferp;

258 
±p
->
dx„r_Àn
 = dxfer_len;

259 
±p
->
dx„r_dú
 = 
CAM_DIR_OUT
;

261 
	}
}

264 
£t_scsi_±_∑ckë_id
(
sg_±_ba£
 * 
vp
 
__©åibuã__
 ((
unu£d
)),

265 
∑ck_id
 
__©åibuã__
 ((
unu£d
)))

270 
£t_scsi_±_èg
(
sg_±_ba£
 * 
vp
, 
uöt64_t
 
èg
 
__©åibuã__
 ((
unu£d
)))

272 
sg_±_‰ìbsd_scsi
 * 
	g±p
 = &
vp
->
im∂
;

274 ++
	g±p
->
	gö_îr
;

278 
£t_scsi_±_èsk_m™agemít
(
sg_±_ba£
 * 
vp
,

279 
tmf_code
 
__©åibuã__
 ((
unu£d
)))

281 
sg_±_‰ìbsd_scsi
 * 
	g±p
 = &
vp
->
im∂
;

283 ++
	g±p
->
	gö_îr
;

287 
£t_scsi_±_èsk_©å
(
sg_±_ba£
 * 
vp
,

288 
©åib
 
__©åibuã__
 ((
unu£d
)),

289 
¥i‹ôy
 
__©åibuã__
 ((
unu£d
)))

291 
sg_±_‰ìbsd_scsi
 * 
	g±p
 = &
vp
->
im∂
;

293 ++
	g±p
->
	gö_îr
;

297 
	$£t_scsi_±_Êags
(
sg_±_ba£
 * 
objp
, 
Êags
)

300 
objp
 = objp;

301 
Êags
 = flags;

302 
	}
}

308 
	$do_scsi_±
(
sg_±_ba£
 * 
vp
, 
devi˚_fd
, 
time_£cs
, 
vîbo£
)

310 
fd
 = 
devi˚_fd
 - 
FREEBSD_FDOFFSET
;

311 
sg_±_‰ìbsd_scsi
 * 
±p
 = &
vp
->
im∂
;

312 
‰ìbsd_dev_ch™√l
 *
fdch™
;

313 
ccb
 *ccb;

314 
Àn
, 
timout_ms
;

316 i‡(
NULL
 =
sg_w¨nögs_°rm
)

317 
sg_w¨nögs_°rm
 = 
°dîr
;

318 
±p
->
os_îr
 = 0;

319 i‡(
±p
->
ö_îr
) {

320 i‡(
vîbo£
)

321 
	`Ârötf
(
sg_w¨nögs_°rm
, "Replicated or unused set_scsi_pt...\n");

322  
SCSI_PT_DO_BAD_PARAMS
;

324 i‡(
NULL
 =
±p
->
cdb
) {

325 i‡(
vîbo£
)

326 
	`Ârötf
(
sg_w¨nögs_°rm
, "No command (cdb) given\n");

327  
SCSI_PT_DO_BAD_PARAMS
;

330 i‡((
fd
 < 0Ë|| (fd >
FREEBSD_MAXDEV
)) {

331 i‡(
vîbo£
)

332 
	`Ârötf
(
sg_w¨nögs_°rm
, "Bad file descriptor\n");

333 
±p
->
os_îr
 = 
ENODEV
;

334  -
±p
->
os_îr
;

336 
fdch™
 = 
devi˚èbÀ
[
fd
];

337 i‡(
NULL
 =
fdch™
) {

338 i‡(
vîbo£
)

339 
	`Ârötf
(
sg_w¨nögs_°rm
, "File descriptor closed??\n");

340 
±p
->
os_îr
 = 
ENODEV
;

341  -
±p
->
os_îr
;

343 i‡(
NULL
 =
fdch™
->
ˇm_dev
) {

344 i‡(
vîbo£
)

345 
	`Ârötf
(
sg_w¨nögs_°rm
, "No open CAM device\n");

346  
SCSI_PT_DO_BAD_PARAMS
;

349 i‡(! (
ccb
 = 
	`ˇm_gëccb
(
fdch™
->
ˇm_dev
))) {

350 i‡(
vîbo£
)

351 
	`Ârötf
(
sg_w¨nögs_°rm
, "cam_getccb: failed\n");

352 
±p
->
os_îr
 = 
ENOMEM
;

353  -
±p
->
os_îr
;

355 
±p
->
ccb
 = ccb;

358 
	`bzîo
(&(&
ccb
->
ccb_h
)[1],

359 (
ccb_scsiio
Ë- (
ccb_hdr
));

361 
timout_ms
 = (
time_£cs
 > 0Ë? (time_£c†* 1000Ë: 
DEF_TIMEOUT
;

362 
	`ˇm_fûl_csio
(&
ccb
->
csio
,

364  
NULL
,

365  
±p
->
dx„r_dú
,

366  
MSG_SIMPLE_Q_TAG
,

367  
±p
->
dx„Ω
,

368  
±p
->
dx„r_Àn
,

369  
±p
->
£n£_Àn
,

370  
±p
->
cdb_Àn
,

371  
timout_ms
);

372 
	`mem˝y
(
ccb
->
csio
.
cdb_io
.
cdb_byãs
, 
±p
->
cdb
,Öç->
cdb_Àn
);

374 i‡(
	`ˇm_£nd_ccb
(
fdch™
->
ˇm_dev
, 
ccb
) < 0) {

375 i‡(
vîbo£
) {

376 
	`w¨n
("error sending SCSI ccb");

377 #i‡
__FªeBSD_vîsi⁄
 > 500000

378 
	`ˇm_îr‹_¥öt
(
fdch™
->
ˇm_dev
, 
ccb
, 
CAM_ESF_ALL
,

379 
CAM_EPF_ALL
, 
°dîr
);

382 
	`ˇm_‰ìccb
(
±p
->
ccb
);

383 
±p
->
ccb
 = 
NULL
;

384 
±p
->
os_îr
 = 
EIO
;

385  -
±p
->
os_îr
;

388 i‡(((
ccb
->
ccb_h
.
°©us
 & 
CAM_STATUS_MASK
Ë=
CAM_REQ_CMP
) ||

389 ((
ccb
->
ccb_h
.
°©us
 & 
CAM_STATUS_MASK
Ë=
CAM_SCSI_STATUS_ERROR
)) {

390 
±p
->
scsi_°©us
 = 
ccb
->
csio
.scsi_status;

391 
±p
->
ªsid
 = 
ccb
->
csio
.resid;

392 
±p
->
£n£_ªsid
 = 
ccb
->
csio
.sense_resid;

394 i‡((
SAM_STAT_CHECK_CONDITION
 =
±p
->
scsi_°©us
) ||

395 (
SAM_STAT_COMMAND_TERMINATED
 =
±p
->
scsi_°©us
)) {

396 
Àn
 = 
±p
->
£n£_Àn
 -Öç->
£n£_ªsid
;

397 i‡(
Àn
)

398 
	`mem˝y
(
±p
->
£n£
, &(
ccb
->
csio
.
£n£_d©a
), 
Àn
);

401 
±p
->
å™•‹t_îr
 = 1;

403 
±p
->
ˇm_dev
 = 
fdch™
->cam_dev;

405 
	}
}

408 
	$gë_scsi_±_ªsu…_ˇãg‹y
(c⁄° 
sg_±_ba£
 * 
vp
)

410 c⁄° 
sg_±_‰ìbsd_scsi
 * 
±p
 = &
vp
->
im∂
;

412 i‡(
±p
->
os_îr
)

413  
SCSI_PT_RESULT_OS_ERR
;

414 i‡(
±p
->
å™•‹t_îr
)

415  
SCSI_PT_RESULT_TRANSPORT_ERR
;

416 i‡((
SAM_STAT_CHECK_CONDITION
 =
±p
->
scsi_°©us
) ||

417 (
SAM_STAT_COMMAND_TERMINATED
 =
±p
->
scsi_°©us
))

418  
SCSI_PT_RESULT_SENSE
;

419 i‡(
±p
->
scsi_°©us
)

420  
SCSI_PT_RESULT_STATUS
;

422  
SCSI_PT_RESULT_GOOD
;

423 
	}
}

426 
	$gë_scsi_±_ªsid
(c⁄° 
sg_±_ba£
 * 
vp
)

428 c⁄° 
sg_±_‰ìbsd_scsi
 * 
±p
 = &
vp
->
im∂
;

430  
±p
->
ªsid
;

431 
	}
}

434 
	$gë_scsi_±_°©us_ª•⁄£
(c⁄° 
sg_±_ba£
 * 
vp
)

436 c⁄° 
sg_±_‰ìbsd_scsi
 * 
±p
 = &
vp
->
im∂
;

438  
±p
->
scsi_°©us
;

439 
	}
}

442 
	$gë_scsi_±_£n£_Àn
(c⁄° 
sg_±_ba£
 * 
vp
)

444 c⁄° 
sg_±_‰ìbsd_scsi
 * 
±p
 = &
vp
->
im∂
;

445 
Àn
;

447 
Àn
 = 
±p
->
£n£_Àn
 -Öç->
£n£_ªsid
;

448  (
Àn
 > 0) ?Üen : 0;

449 
	}
}

452 
gë_scsi_±_duøti⁄_ms
(c⁄° 
sg_±_ba£
 * 
vp
 
__©åibuã__
 ((
unu£d
)))

460 
	$gë_scsi_±_å™•‹t_îr
(c⁄° 
sg_±_ba£
 * 
vp
)

462 c⁄° 
sg_±_‰ìbsd_scsi
 * 
±p
 = &
vp
->
im∂
;

464  
±p
->
å™•‹t_îr
;

465 
	}
}

468 
	$gë_scsi_±_os_îr
(c⁄° 
sg_±_ba£
 * 
vp
)

470 c⁄° 
sg_±_‰ìbsd_scsi
 * 
±p
 = &
vp
->
im∂
;

472  
±p
->
os_îr
;

473 
	}
}

476 
	$gë_scsi_±_å™•‹t_îr_°r
(c⁄° 
sg_±_ba£
 * 
vp
, 
max_b_Àn
,

477 * 
b
)

479 c⁄° 
sg_±_‰ìbsd_scsi
 * 
±p
 = &
vp
->
im∂
;

481 i‡(0 =
±p
->
å™•‹t_îr
) {

482 
	`°∫˝y
(
b
, "nÿå™•‹àîr‹ávaûabÀ", 
max_b_Àn
);

483 
b
[
max_b_Àn
 - 1] = '\0';

484  
b
;

486 #i‡
__FªeBSD_vîsi⁄
 > 500000

487 i‡(
±p
->
ˇm_dev
)

488 
	`ˇm_îr‹_°rög
(
±p
->
ˇm_dev
,Öç->
ccb
, 
b
, 
max_b_Àn
, 
CAM_ESF_ALL
,

489 
CAM_EPF_ALL
);

491 
	`°∫˝y
(
b
, "nÿå™•‹àîr‹ávaûabÀ", 
max_b_Àn
);

492 
b
[
max_b_Àn
 - 1] = '\0';

495 
	`°∫˝y
(
b
, "nÿå™•‹àîr‹ávaûabÀ", 
max_b_Àn
);

496 
b
[
max_b_Àn
 - 1] = '\0';

498  
b
;

499 
	}
}

502 
	$gë_scsi_±_os_îr_°r
(c⁄° 
sg_±_ba£
 * 
vp
, 
max_b_Àn
, * 
b
)

504 c⁄° 
sg_±_‰ìbsd_scsi
 * 
±p
 = &
vp
->
im∂
;

505 c⁄° * 
˝
;

507 
˝
 = 
	`ß„_°ªº‹
(
±p
->
os_îr
);

508 
	`°∫˝y
(
b
, 
˝
, 
max_b_Àn
);

509 i‡(()
	`°æí
(
˝
Ë>
max_b_Àn
)

510 
b
[
max_b_Àn
 - 1] = '\0';

511  
b
;

512 
	}
}

	@lib/sg_pt_linux.c

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

14 
	~<˘y≥.h
>

15 
	~<uni°d.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<sys/io˘l.h
>

19 
	~<sys/ty≥s.h
>

20 
	~<sys/°©.h
>

23 #ifde‡
HAVE_CONFIG_H


24 
	~"c⁄fig.h
"

27 
	~"sg_±.h
"

28 
	~"sg_lib.h
"

29 
	~"sg_löux_öc.h
"

31 
	#DEF_TIMEOUT
 60000

	)

33 c⁄° * 
	glöux_ho°_byãs
[] = {

43 
	#LINUX_HOST_BYTES_SZ
 \

44 ()((
löux_ho°_byãs
Ë/ ÷öux_ho°_byãs[0]))

	)

46 c⁄° * 
	glöux_drivî_byãs
[] = {

52 
	#LINUX_DRIVER_BYTES_SZ
 \

53 ()((
löux_drivî_byãs
Ë/ ÷öux_drivî_byãs[0]))

	)

55 c⁄° * 
	glöux_drivî_sugge°s
[] = {

61 
	#LINUX_DRIVER_SUGGESTS_SZ
 \

62 ()((
löux_drivî_sugge°s
Ë/ ÷öux_drivî_sugge°s[0]))

	)

70 #i‚de‡
DRIVER_MASK


71 
	#DRIVER_MASK
 0x0f

	)

73 #i‚de‡
SUGGEST_MASK


74 
	#SUGGEST_MASK
 0xf0

	)

76 #i‚de‡
DRIVER_SENSE


77 
	#DRIVER_SENSE
 0x08

	)

79 
	#SG_LIB_DRIVER_MASK
 
DRIVER_MASK


	)

80 
	#SG_LIB_SUGGEST_MASK
 
SUGGEST_MASK


	)

81 
	#SG_LIB_DRIVER_SENSE
 
DRIVER_SENSE


	)

86 #i‡
deföed
(
IGNORE_LINUX_BSG
Ë|| ! deföed(
HAVE_LINUX_BSG_H
)

95 
	ssg_±_löux_scsi
 {

96 
sg_io_hdr
 
	mio_hdr
;

97 
	mö_îr
;

98 
	mos_îr
;

101 
	ssg_±_ba£
 {

102 
sg_±_löux_scsi
 
	mim∂
;

108 
	$scsi_±_›í_devi˚
(c⁄° * 
devi˚_«me
, 
ªad_⁄ly
, 
vîbo£
)

110 
oÊags
 = 
O_NONBLOCK
;

112 
oÊags
 |(
ªad_⁄ly
 ? 
O_RDONLY
 : 
O_RDWR
);

113  
	`scsi_±_›í_Êags
(
devi˚_«me
, 
oÊags
, 
vîbo£
);

114 
	}
}

120 
	$scsi_±_›í_Êags
(c⁄° * 
devi˚_«me
, 
Êags
, 
vîbo£
)

122 
fd
;

124 i‡(
vîbo£
 > 1) {

125 i‡(
NULL
 =
sg_w¨nögs_°rm
)

126 
sg_w¨nögs_°rm
 = 
°dîr
;

127 
	`Ârötf
(
sg_w¨nögs_°rm
, "›í %†wôh fœgs=0x%x\n", 
devi˚_«me
,

128 
Êags
);

130 
fd
 = 
	`›í
(
devi˚_«me
, 
Êags
);

131 i‡(
fd
 < 0)

132 
fd
 = -
î∫o
;

133  
fd
;

134 
	}
}

138 
	$scsi_±_˛o£_devi˚
(
devi˚_fd
)

140 
ªs
;

142 
ªs
 = 
	`˛o£
(
devi˚_fd
);

143 i‡(
ªs
 < 0)

144 
ªs
 = -
î∫o
;

145  
ªs
;

146 
	}
}

149 
sg_±_ba£
 *

150 
	$c⁄°ru˘_scsi_±_obj
()

152 
sg_±_löux_scsi
 * 
±p
;

154 
±p
 = (
sg_±_löux_scsi
 *)

155 
	`ˇŒoc
(1, (
sg_±_löux_scsi
));

156 i‡(
±p
) {

157 
±p
->
io_hdr
.
öãrÁ˚_id
 = 'S';

158 
±p
->
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_NONE
;

160  (
sg_±_ba£
 *)
±p
;

161 
	}
}

164 
	$de°ru˘_scsi_±_obj
(
sg_±_ba£
 * 
vp
)

166 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

168 i‡(
±p
)

169 
	`‰ì
(
±p
);

170 
	}
}

173 
	$˛ór_scsi_±_obj
(
sg_±_ba£
 * 
vp
)

175 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

177 i‡(
±p
) {

178 
	`mem£t
(
±p
, 0, (
sg_±_löux_scsi
));

179 
±p
->
io_hdr
.
öãrÁ˚_id
 = 'S';

180 
±p
->
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_NONE
;

182 
	}
}

185 
	$£t_scsi_±_cdb
(
sg_±_ba£
 * 
vp
, c⁄° * 
cdb
,

186 
cdb_Àn
)

188 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

190 i‡(
±p
->
io_hdr
.
cmdp
)

191 ++
±p
->
ö_îr
;

192 
±p
->
io_hdr
.
cmdp
 = (*)
cdb
;

193 
±p
->
io_hdr
.
cmd_Àn
 = 
cdb_Àn
;

194 
	}
}

197 
	$£t_scsi_±_£n£
(
sg_±_ba£
 * 
vp
, * 
£n£
,

198 
max_£n£_Àn
)

200 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

202 i‡(
±p
->
io_hdr
.
sbp
)

203 ++
±p
->
ö_îr
;

204 
	`mem£t
(
£n£
, 0, 
max_£n£_Àn
);

205 
±p
->
io_hdr
.
sbp
 = 
£n£
;

206 
±p
->
io_hdr
.
mx_sb_Àn
 = 
max_£n£_Àn
;

207 
	}
}

211 
	$£t_scsi_±_d©a_ö
(
sg_±_ba£
 * 
vp
, * 
dx„Ω
,

212 
dx„r_Àn
)

214 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

216 i‡(
±p
->
io_hdr
.
dx„Ω
)

217 ++
±p
->
ö_îr
;

218 i‡(
dx„r_Àn
 > 0) {

219 
±p
->
io_hdr
.
dx„Ω
 = dxferp;

220 
±p
->
io_hdr
.
dx„r_Àn
 = dxfer_len;

221 
±p
->
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

223 
	}
}

227 
	$£t_scsi_±_d©a_out
(
sg_±_ba£
 * 
vp
, c⁄° * 
dx„Ω
,

228 
dx„r_Àn
)

230 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

232 i‡(
±p
->
io_hdr
.
dx„Ω
)

233 ++
±p
->
ö_îr
;

234 i‡(
dx„r_Àn
 > 0) {

235 
±p
->
io_hdr
.
dx„Ω
 = (*)dxferp;

236 
±p
->
io_hdr
.
dx„r_Àn
 = dxfer_len;

237 
±p
->
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_TO_DEV
;

239 
	}
}

242 
	$£t_scsi_±_∑ckë_id
(
sg_±_ba£
 * 
vp
, 
∑ck_id
)

244 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

246 
±p
->
io_hdr
.
∑ck_id
 =Öack_id;

247 
	}
}

250 
	$£t_scsi_±_èg
(
sg_±_ba£
 * 
vp
, 
uöt64_t
 
èg
)

252 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

254 ++
±p
->
ö_îr
;

255 
èg
 =Åag;

256 
	}
}

260 
	$£t_scsi_±_èsk_m™agemít
(
sg_±_ba£
 * 
vp
, 
tmf_code
)

262 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

264 ++
±p
->
ö_îr
;

265 
tmf_code
 =Åmf_code;

266 
	}
}

269 
	$£t_scsi_±_èsk_©å
(
sg_±_ba£
 * 
vp
, 
©åibuã
, 
¥i‹ôy
)

271 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

273 ++
±p
->
ö_îr
;

274 
©åibuã
 =áttribute;

275 
¥i‹ôy
 =Öriority;

276 
	}
}

278 #i‚de‡
SG_FLAG_Q_AT_TAIL


279 
	#SG_FLAG_Q_AT_TAIL
 0x10

	)

281 #i‚de‡
SG_FLAG_Q_AT_HEAD


282 
	#SG_FLAG_Q_AT_HEAD
 0x20

	)

286 
	$£t_scsi_±_Êags
(
sg_±_ba£
 * 
vp
, 
Êags
)

288 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

292 i‡(
SCSI_PT_FLAGS_QUEUE_AT_TAIL
 & 
Êags
) {

293 
±p
->
io_hdr
.
Êags
 |
SG_FLAG_Q_AT_TAIL
;

294 
±p
->
io_hdr
.
Êags
 &~
SG_FLAG_Q_AT_HEAD
;

296 i‡(
SCSI_PT_FLAGS_QUEUE_AT_HEAD
 & 
Êags
) {

297 
±p
->
io_hdr
.
Êags
 |
SG_FLAG_Q_AT_HEAD
;

298 
±p
->
io_hdr
.
Êags
 &~
SG_FLAG_Q_AT_TAIL
;

300 
	}
}

306 
	$do_scsi_±
(
sg_±_ba£
 * 
vp
, 
fd
, 
time_£cs
, 
vîbo£
)

308 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

310 i‡(
NULL
 =
sg_w¨nögs_°rm
)

311 
sg_w¨nögs_°rm
 = 
°dîr
;

312 
±p
->
os_îr
 = 0;

313 i‡(
±p
->
ö_îr
) {

314 i‡(
vîbo£
)

315 
	`Ârötf
(
sg_w¨nögs_°rm
, "Replicated or unused set_scsi_pt... "

317  
SCSI_PT_DO_BAD_PARAMS
;

319 i‡(
NULL
 =
±p
->
io_hdr
.
cmdp
) {

320 i‡(
vîbo£
)

321 
	`Ârötf
(
sg_w¨nögs_°rm
, "No SCSI command (cdb) given\n");

322  
SCSI_PT_DO_BAD_PARAMS
;

325 
±p
->
io_hdr
.
timeout
 = ((
time_£cs
 > 0) ? (time_secs * 1000) :

326 
DEF_TIMEOUT
);

327 i‡(
±p
->
io_hdr
.
sbp
 && (±p->io_hdr.
mx_sb_Àn
 > 0))

328 
	`mem£t
(
±p
->
io_hdr
.
sbp
, 0,Öç->io_hdr.
mx_sb_Àn
);

329 i‡(
	`io˘l
(
fd
, 
SG_IO
, &
±p
->
io_hdr
) < 0) {

330 
±p
->
os_îr
 = 
î∫o
;

331 i‡(
vîbo£
 > 1)

332 
	`Ârötf
(
sg_w¨nögs_°rm
, "ioctl(SG_IO) failed: %s (errno=%d)\n",

333 
	`°ªº‹
(
±p
->
os_îr
),Ötp->os_err);

334  -
±p
->
os_îr
;

337 
	}
}

340 
	$gë_scsi_±_ªsu…_ˇãg‹y
(c⁄° 
sg_±_ba£
 * 
vp
)

342 c⁄° 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

343 
dr_°
 = 
±p
->
io_hdr
.
drivî_°©us
 & 
SG_LIB_DRIVER_MASK
;

344 
scsi_°
 = 
±p
->
io_hdr
.
°©us
 & 0x7e;

346 i‡(
±p
->
os_îr
)

347  
SCSI_PT_RESULT_OS_ERR
;

348 i‡(
±p
->
io_hdr
.
ho°_°©us
)

349  
SCSI_PT_RESULT_TRANSPORT_ERR
;

350 i‡(
dr_°
 && (
SG_LIB_DRIVER_SENSE
 != dr_st))

351  
SCSI_PT_RESULT_TRANSPORT_ERR
;

352 i‡((
SG_LIB_DRIVER_SENSE
 =
dr_°
) ||

353 (
SAM_STAT_CHECK_CONDITION
 =
scsi_°
) ||

354 (
SAM_STAT_COMMAND_TERMINATED
 =
scsi_°
))

355  
SCSI_PT_RESULT_SENSE
;

356 i‡(
scsi_°
)

357  
SCSI_PT_RESULT_STATUS
;

359  
SCSI_PT_RESULT_GOOD
;

360 
	}
}

363 
	$gë_scsi_±_ªsid
(c⁄° 
sg_±_ba£
 * 
vp
)

365 c⁄° 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

367  
±p
->
io_hdr
.
ªsid
;

368 
	}
}

371 
	$gë_scsi_±_°©us_ª•⁄£
(c⁄° 
sg_±_ba£
 * 
vp
)

373 c⁄° 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

375  
±p
->
io_hdr
.
°©us
;

376 
	}
}

379 
	$gë_scsi_±_£n£_Àn
(c⁄° 
sg_±_ba£
 * 
vp
)

381 c⁄° 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

383  
±p
->
io_hdr
.
sb_Àn_wr
;

384 
	}
}

387 
	$gë_scsi_±_duøti⁄_ms
(c⁄° 
sg_±_ba£
 * 
vp
)

389 c⁄° 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

391  
±p
->
io_hdr
.
duøti⁄
;

392 
	}
}

395 
	$gë_scsi_±_å™•‹t_îr
(c⁄° 
sg_±_ba£
 * 
vp
)

397 c⁄° 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

399  (
±p
->
io_hdr
.
ho°_°©us
 << 8Ë+Öç->io_hdr.
drivî_°©us
;

400 
	}
}

403 
	$gë_scsi_±_os_îr
(c⁄° 
sg_±_ba£
 * 
vp
)

405 c⁄° 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

407  
±p
->
os_îr
;

408 
	}
}

414 
	$gë_scsi_±_å™•‹t_îr_°r
(c⁄° 
sg_±_ba£
 * 
vp
, 
max_b_Àn
,

415 * 
b
)

417 c⁄° 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

418 
ds
 = 
±p
->
io_hdr
.
drivî_°©us
;

419 
hs
 = 
±p
->
io_hdr
.
ho°_°©us
;

420 
n
, 
m
;

421 * 
˝
 = 
b
;

422 
driv
, 
sugg
;

423 c⁄° * 
driv_˝
 = "unknown";

424 c⁄° * 
sugg_˝
 = "unknown";

426 i‡(
max_b_Àn
 < 1)

427  
b
;

428 
m
 = 
max_b_Àn
;

429 
n
 = 0;

430 i‡(
hs
) {

431 i‡((
hs
 < 0Ë|| (h†>
LINUX_HOST_BYTES_SZ
))

432 
n
 = 
	`¢¥ötf
(
˝
, 
m
, "Ho°_°©us=0x%02x i†unknown\n", 
hs
);

434 
n
 = 
	`¢¥ötf
(
˝
, 
m
, "Ho°_°©us=0x%02x [%s]\n", 
hs
,

435 
löux_ho°_byãs
[
hs
]);

437 
m
 -
n
;

438 i‡(
m
 < 1) {

439 
b
[
max_b_Àn
 - 1] = '\0';

440  
b
;

442 
˝
 +
n
;

443 
driv
 = 
ds
 & 
SG_LIB_DRIVER_MASK
;

444 i‡(
driv
 < 
LINUX_DRIVER_BYTES_SZ
)

445 
driv_˝
 = 
löux_drivî_byãs
[
driv
];

446 
sugg
 = (
ds
 & 
SG_LIB_SUGGEST_MASK
) >> 4;

447 i‡(
sugg
 < 
LINUX_DRIVER_SUGGESTS_SZ
)

448 
sugg_˝
 = 
löux_drivî_sugge°s
[
sugg
];

449 
n
 = 
	`¢¥ötf
(
˝
, 
m
, "Drivî_°©us=0x%02x [%s, %s]\n", 
ds
, 
driv_˝
,

450 
sugg_˝
);

451 
m
 -
n
;

452 i‡(
m
 < 1)

453 
b
[
max_b_Àn
 - 1] = '\0';

454  
b
;

455 
	}
}

458 
	$gë_scsi_±_os_îr_°r
(c⁄° 
sg_±_ba£
 * 
vp
, 
max_b_Àn
, * 
b
)

460 c⁄° 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

461 c⁄° * 
˝
;

463 
˝
 = 
	`ß„_°ªº‹
(
±p
->
os_îr
);

464 
	`°∫˝y
(
b
, 
˝
, 
max_b_Àn
);

465 i‡(()
	`°æí
(
˝
Ë>
max_b_Àn
)

466 
b
[
max_b_Àn
 - 1] = '\0';

467  
b
;

468 
	}
}

495 
	~<löux/ty≥s.h
>

496 
	~<löux/bsg.h
>

498 #ifde‡
maj‹


499 
	#SG_DEV_MAJOR
 
maj‹


	)

501 #ifde‡
HAVE_LINUX_KDEV_T_H


502 
	~<löux/kdev_t.h
>

504 
	#SG_DEV_MAJOR
 
MAJOR


	)

508 
	ssg_±_löux_scsi
 {

509 
sg_io_v4
 
	mio_hdr
;

510 
	mö_îr
;

511 
	mos_îr
;

512 
	mtmf_ªque°
[4];

515 
	ssg_±_ba£
 {

516 
sg_±_löux_scsi
 
	mim∂
;

519 
	gbsg_maj‹_checked
 = 0;

520 
	gbsg_maj‹
 = 0;

525 
	$föd_bsg_maj‹
(
vîbo£
)

527 c⁄° * 
¥oc_devi˚s
 = "/proc/devices";

528 
FILE
 *
Â
;

529 
a
[128];

530 
b
[128];

531 * 
˝
;

532 
n
;

534 i‡(
NULL
 =(
Â
 = 
	`f›í
(
¥oc_devi˚s
, "r"))) {

535 i‡(
NULL
 =
sg_w¨nögs_°rm
)

536 
sg_w¨nögs_°rm
 = 
°dîr
;

537 i‡(
vîbo£
)

538 
	`Ârötf
(
sg_w¨nögs_°rm
, "f›í %†Áûed: %s\n", 
¥oc_devi˚s
,

539 
	`°ªº‹
(
î∫o
));

542 (
˝
 = 
	`fgës
(
b
, (b), 
Â
))) {

543 i‡((1 =
	`ssˇnf
(
b
, "%s", 
a
)) &&

544 (0 =
	`memcmp
(
a
, "Character", 9)))

547 
˝
 && (˝ = 
	`fgës
(
b
, (b), 
Â
))) {

548 i‡(2 =
	`ssˇnf
(
b
, "%d %s", &
n
, 
a
)) {

549 i‡(0 =
	`°rcmp
("bsg", 
a
)) {

550 
bsg_maj‹
 = 
n
;

556 i‡(
vîbo£
 > 3) {

557 i‡(
NULL
 =
sg_w¨nögs_°rm
)

558 
sg_w¨nögs_°rm
 = 
°dîr
;

559 i‡(
˝
)

560 
	`Ârötf
(
sg_w¨nögs_°rm
, "found bsg_maj‹=%d\n", 
bsg_maj‹
);

562 
	`Ârötf
(
sg_w¨nögs_°rm
, "foundÇo bsg char device in %s\n",

563 
¥oc_devi˚s
);

565 
	`f˛o£
(
Â
);

566 
	}
}

571 
	$scsi_±_›í_devi˚
(c⁄° * 
devi˚_«me
, 
ªad_⁄ly
, 
vîbo£
)

573 
oÊags
 = 
O_NONBLOCK
;

575 
oÊags
 |(
ªad_⁄ly
 ? 
O_RDONLY
 : 
O_RDWR
);

576  
	`scsi_±_›í_Êags
(
devi˚_«me
, 
oÊags
, 
vîbo£
);

577 
	}
}

583 
	$scsi_±_›í_Êags
(c⁄° * 
devi˚_«me
, 
Êags
, 
vîbo£
)

585 
fd
;

587 i‡(! 
bsg_maj‹_checked
) {

588 
bsg_maj‹_checked
 = 1;

589 
	`föd_bsg_maj‹
(
vîbo£
);

591 i‡(
vîbo£
 > 1) {

592 i‡(
NULL
 =
sg_w¨nögs_°rm
)

593 
sg_w¨nögs_°rm
 = 
°dîr
;

594 
	`Ârötf
(
sg_w¨nögs_°rm
, "›í %†wôh fœgs=0x%x\n", 
devi˚_«me
,

595 
Êags
);

597 
fd
 = 
	`›í
(
devi˚_«me
, 
Êags
);

598 i‡(
fd
 < 0)

599 
fd
 = -
î∫o
;

600  
fd
;

601 
	}
}

605 
	$scsi_±_˛o£_devi˚
(
devi˚_fd
)

607 
ªs
;

609 
ªs
 = 
	`˛o£
(
devi˚_fd
);

610 i‡(
ªs
 < 0)

611 
ªs
 = -
î∫o
;

612  
ªs
;

613 
	}
}

616 
sg_±_ba£
 *

617 
	$c⁄°ru˘_scsi_±_obj
()

619 
sg_±_löux_scsi
 * 
±p
;

621 
±p
 = (
sg_±_löux_scsi
 *)

622 
	`ˇŒoc
(1, (
sg_±_löux_scsi
));

623 i‡(
±p
) {

624 
±p
->
io_hdr
.
gu¨d
 = 'Q';

625 #ifde‡
BSG_PROTOCOL_SCSI


626 
±p
->
io_hdr
.
¥Ÿocﬁ
 = 
BSG_PROTOCOL_SCSI
;

628 #ifde‡
BSG_SUB_PROTOCOL_SCSI_CMD


629 
±p
->
io_hdr
.
sub¥Ÿocﬁ
 = 
BSG_SUB_PROTOCOL_SCSI_CMD
;

632  (
sg_±_ba£
 *)
±p
;

633 
	}
}

636 
	$de°ru˘_scsi_±_obj
(
sg_±_ba£
 * 
vp
)

638 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

640 i‡(
±p
)

641 
	`‰ì
(
±p
);

642 
	}
}

645 
	$˛ór_scsi_±_obj
(
sg_±_ba£
 * 
vp
)

647 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

649 i‡(
±p
) {

650 
	`mem£t
(
±p
, 0, (
sg_±_löux_scsi
));

651 
±p
->
io_hdr
.
gu¨d
 = 'Q';

652 #ifde‡
BSG_PROTOCOL_SCSI


653 
±p
->
io_hdr
.
¥Ÿocﬁ
 = 
BSG_PROTOCOL_SCSI
;

655 #ifde‡
BSG_SUB_PROTOCOL_SCSI_CMD


656 
±p
->
io_hdr
.
sub¥Ÿocﬁ
 = 
BSG_SUB_PROTOCOL_SCSI_CMD
;

659 
	}
}

662 
	$£t_scsi_±_cdb
(
sg_±_ba£
 * 
vp
, c⁄° * 
cdb
,

663 
cdb_Àn
)

665 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

667 i‡(
±p
->
io_hdr
.
ªque°
)

668 ++
±p
->
ö_îr
;

670 
±p
->
io_hdr
.
ªque°
 = (
__u64
)()
cdb
;

671 
±p
->
io_hdr
.
ªque°_Àn
 = 
cdb_Àn
;

672 
	}
}

675 
	$£t_scsi_±_£n£
(
sg_±_ba£
 * 
vp
, * 
£n£
,

676 
max_£n£_Àn
)

678 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

680 i‡(
±p
->
io_hdr
.
ª•⁄£
)

681 ++
±p
->
ö_îr
;

682 
	`mem£t
(
£n£
, 0, 
max_£n£_Àn
);

683 
±p
->
io_hdr
.
ª•⁄£
 = (
__u64
)()
£n£
;

684 
±p
->
io_hdr
.
max_ª•⁄£_Àn
 = 
max_£n£_Àn
;

685 
	}
}

689 
	$£t_scsi_±_d©a_ö
(
sg_±_ba£
 * 
vp
, * 
dx„Ω
,

690 
dx„r_Àn
)

692 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

694 i‡(
±p
->
io_hdr
.
dö_x„Ω
)

695 ++
±p
->
ö_îr
;

696 i‡(
dx„r_Àn
 > 0) {

697 
±p
->
io_hdr
.
dö_x„Ω
 = (
__u64
)()
dx„Ω
;

698 
±p
->
io_hdr
.
dö_x„r_Àn
 = 
dx„r_Àn
;

700 
	}
}

704 
	$£t_scsi_±_d©a_out
(
sg_±_ba£
 * 
vp
, c⁄° * 
dx„Ω
,

705 
dx„r_Àn
)

707 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

709 i‡(
±p
->
io_hdr
.
dout_x„Ω
)

710 ++
±p
->
ö_îr
;

711 i‡(
dx„r_Àn
 > 0) {

712 
±p
->
io_hdr
.
dout_x„Ω
 = (
__u64
)()
dx„Ω
;

713 
±p
->
io_hdr
.
dout_x„r_Àn
 = 
dx„r_Àn
;

715 
	}
}

718 
	$£t_scsi_±_∑ckë_id
(
sg_±_ba£
 * 
vp
, 
∑ck_id
)

720 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

722 
±p
->
io_hdr
.
•¨e_ö
 = 
∑ck_id
;

723 
	}
}

726 
	$£t_scsi_±_èg
(
sg_±_ba£
 * 
vp
, 
uöt64_t
 
èg
)

728 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

730 
±p
->
io_hdr
.
ªque°_èg
 = 
èg
;

731 
	}
}

735 
	$£t_scsi_±_èsk_m™agemít
(
sg_±_ba£
 * 
vp
, 
tmf_code
)

737 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

739 
±p
->
io_hdr
.
sub¥Ÿocﬁ
 = 1;

740 
±p
->
tmf_ªque°
[0] = ()
tmf_code
;

741 
±p
->
io_hdr
.
ªque°
 = (
__u64
)()(&’ç->
tmf_ªque°
[0]));

742 
±p
->
io_hdr
.
ªque°_Àn
 = 1;

743 
	}
}

746 
	$£t_scsi_±_èsk_©å
(
sg_±_ba£
 * 
vp
, 
©åibuã
, 
¥i‹ôy
)

748 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

750 
±p
->
io_hdr
.
ªque°_©å
 = 
©åibuã
;

751 
±p
->
io_hdr
.
ªque°_¥i‹ôy
 = 
¥i‹ôy
;

752 
	}
}

754 #i‚de‡
BSG_FLAG_Q_AT_TAIL


755 
	#BSG_FLAG_Q_AT_TAIL
 0x10

	)

759 
	$£t_scsi_±_Êags
(
sg_±_ba£
 * 
vp
, 
Êags
)

761 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

764 i‡(
SCSI_PT_FLAGS_QUEUE_AT_TAIL
 & 
Êags
)

765 
±p
->
io_hdr
.
Êags
 |
BSG_FLAG_Q_AT_TAIL
;

766 i‡(
SCSI_PT_FLAGS_QUEUE_AT_HEAD
 & 
Êags
)

767 
±p
->
io_hdr
.
Êags
 &~
BSG_FLAG_Q_AT_TAIL
;

768 
	}
}

772 
	$gë_scsi_±_ªsid
(c⁄° 
sg_±_ba£
 * 
vp
)

774 c⁄° 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

776  
±p
->
io_hdr
.
dö_ªsid
;

777 
	}
}

780 
	$gë_scsi_±_°©us_ª•⁄£
(c⁄° 
sg_±_ba£
 * 
vp
)

782 c⁄° 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

784  
±p
->
io_hdr
.
devi˚_°©us
;

785 
	}
}

788 
	$gë_scsi_±_£n£_Àn
(c⁄° 
sg_±_ba£
 * 
vp
)

790 c⁄° 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

792  
±p
->
io_hdr
.
ª•⁄£_Àn
;

793 
	}
}

796 
	$gë_scsi_±_duøti⁄_ms
(c⁄° 
sg_±_ba£
 * 
vp
)

798 c⁄° 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

800  
±p
->
io_hdr
.
duøti⁄
;

801 
	}
}

804 
	$gë_scsi_±_å™•‹t_îr
(c⁄° 
sg_±_ba£
 * 
vp
)

806 c⁄° 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

808  
±p
->
io_hdr
.
å™•‹t_°©us
;

809 
	}
}

815 
	$gë_scsi_±_å™•‹t_îr_°r
(c⁄° 
sg_±_ba£
 * 
vp
, 
max_b_Àn
,

816 * 
b
)

818 c⁄° 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

819 
ds
 = 
±p
->
io_hdr
.
drivî_°©us
;

820 
hs
 = 
±p
->
io_hdr
.
å™•‹t_°©us
;

821 
n
, 
m
;

822 * 
˝
 = 
b
;

823 
driv
, 
sugg
;

824 c⁄° * 
driv_˝
 = "invalid";

825 c⁄° * 
sugg_˝
 = "invalid";

827 i‡(
max_b_Àn
 < 1)

828  
b
;

829 
m
 = 
max_b_Àn
;

830 
n
 = 0;

831 i‡(
hs
) {

832 i‡((
hs
 < 0Ë|| (h†>
LINUX_HOST_BYTES_SZ
))

833 
n
 = 
	`¢¥ötf
(
˝
, 
m
, "Ho°_°©us=0x%02x i†övÆid\n", 
hs
);

835 
n
 = 
	`¢¥ötf
(
˝
, 
m
, "Ho°_°©us=0x%02x [%s]\n", 
hs
,

836 
löux_ho°_byãs
[
hs
]);

838 
m
 -
n
;

839 i‡(
m
 < 1) {

840 
b
[
max_b_Àn
 - 1] = '\0';

841  
b
;

843 
˝
 +
n
;

844 
driv
 = 
ds
 & 
SG_LIB_DRIVER_MASK
;

845 i‡(
driv
 < 
LINUX_DRIVER_BYTES_SZ
)

846 
driv_˝
 = 
löux_drivî_byãs
[
driv
];

847 
sugg
 = (
ds
 & 
SG_LIB_SUGGEST_MASK
) >> 4;

848 i‡(
sugg
 < 
LINUX_DRIVER_SUGGESTS_SZ
)

849 
sugg_˝
 = 
löux_drivî_sugge°s
[
sugg
];

850 
n
 = 
	`¢¥ötf
(
˝
, 
m
, "Drivî_°©us=0x%02x [%s, %s]\n", 
ds
, 
driv_˝
,

851 
sugg_˝
);

852 
m
 -
n
;

853 i‡(
m
 < 1)

854 
b
[
max_b_Àn
 - 1] = '\0';

855  
b
;

856 
	}
}

859 
	$gë_scsi_±_ªsu…_ˇãg‹y
(c⁄° 
sg_±_ba£
 * 
vp
)

861 c⁄° 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

862 
dr_°
 = 
±p
->
io_hdr
.
drivî_°©us
 & 
SG_LIB_DRIVER_MASK
;

863 
scsi_°
 = 
±p
->
io_hdr
.
devi˚_°©us
 & 0x7e;

865 i‡(
±p
->
os_îr
)

866  
SCSI_PT_RESULT_OS_ERR
;

867 i‡(
±p
->
io_hdr
.
å™•‹t_°©us
)

868  
SCSI_PT_RESULT_TRANSPORT_ERR
;

869 i‡(
dr_°
 && (
SG_LIB_DRIVER_SENSE
 != dr_st))

870  
SCSI_PT_RESULT_TRANSPORT_ERR
;

871 i‡((
SG_LIB_DRIVER_SENSE
 =
dr_°
) ||

872 (
SAM_STAT_CHECK_CONDITION
 =
scsi_°
) ||

873 (
SAM_STAT_COMMAND_TERMINATED
 =
scsi_°
))

874  
SCSI_PT_RESULT_SENSE
;

875 i‡(
scsi_°
)

876  
SCSI_PT_RESULT_STATUS
;

878  
SCSI_PT_RESULT_GOOD
;

879 
	}
}

882 
	$gë_scsi_±_os_îr
(c⁄° 
sg_±_ba£
 * 
vp
)

884 c⁄° 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

886  
±p
->
os_îr
;

887 
	}
}

890 
	$gë_scsi_±_os_îr_°r
(c⁄° 
sg_±_ba£
 * 
vp
, 
max_b_Àn
, * 
b
)

892 c⁄° 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

893 c⁄° * 
˝
;

895 
˝
 = 
	`ß„_°ªº‹
(
±p
->
os_îr
);

896 
	`°∫˝y
(
b
, 
˝
, 
max_b_Àn
);

897 i‡(()
	`°æí
(
˝
Ë>
max_b_Àn
)

898 
b
[
max_b_Àn
 - 1] = '\0';

899  
b
;

900 
	}
}

904 
	$do_scsi_±_v3
(
sg_±_löux_scsi
 * 
±p
, 
fd
, 
time_£cs
,

905 
vîbo£
)

907 
sg_io_hdr
 
v3_hdr
;

909 
	`mem£t
(&
v3_hdr
, 0, (v3_hdr));

911 
v3_hdr
.
öãrÁ˚_id
 = 'S';

912 
v3_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_NONE
;

913 
v3_hdr
.
cmdp
 = (*)()
±p
->
io_hdr
.
ªque°
;

914 
v3_hdr
.
cmd_Àn
 = ()
±p
->
io_hdr
.
ªque°_Àn
;

915 i‡(
±p
->
io_hdr
.
dö_x„r_Àn
 > 0) {

916 i‡(
±p
->
io_hdr
.
dout_x„r_Àn
 > 0) {

917 i‡(
vîbo£
)

918 
	`Ârötf
(
sg_w¨nögs_°rm
, "sgv3 doesn't support bidi\n");

919  
SCSI_PT_DO_BAD_PARAMS
;

921 
v3_hdr
.
dx„Ω
 = (*)()
±p
->
io_hdr
.
dö_x„Ω
;

922 
v3_hdr
.
dx„r_Àn
 = ()
±p
->
io_hdr
.
dö_x„r_Àn
;

923 
v3_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

924 } i‡(
±p
->
io_hdr
.
dout_x„r_Àn
 > 0) {

925 
v3_hdr
.
dx„Ω
 = (*)()
±p
->
io_hdr
.
dout_x„Ω
;

926 
v3_hdr
.
dx„r_Àn
 = ()
±p
->
io_hdr
.
dout_x„r_Àn
;

927 
v3_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_TO_DEV
;

929 i‡(
±p
->
io_hdr
.
ª•⁄£
 && (±p->io_hdr.
max_ª•⁄£_Àn
 > 0)) {

930 
v3_hdr
.
sbp
 = (*)()
±p
->
io_hdr
.
ª•⁄£
;

931 
v3_hdr
.
mx_sb_Àn
 = ()
±p
->
io_hdr
.
max_ª•⁄£_Àn
;

933 
v3_hdr
.
∑ck_id
 = ()
±p
->
io_hdr
.
•¨e_ö
;

935 i‡(
NULL
 =
v3_hdr
.
cmdp
) {

936 i‡(
vîbo£
)

937 
	`Ârötf
(
sg_w¨nögs_°rm
, "No SCSI command (cdb) given\n");

938  
SCSI_PT_DO_BAD_PARAMS
;

941 
v3_hdr
.
timeout
 = ((
time_£cs
 > 0Ë? (time_£c†* 1000Ë: 
DEF_TIMEOUT
);

943 i‡(
	`io˘l
(
fd
, 
SG_IO
, &
v3_hdr
) < 0) {

944 
±p
->
os_îr
 = 
î∫o
;

945 i‡(
vîbo£
 > 1)

946 
	`Ârötf
(
sg_w¨nögs_°rm
, "ioctl(SG_IO v3) failed: %s "

947 "”ºno=%d)\n", 
	`°ªº‹
(
±p
->
os_îr
),Ötp->os_err);

948  -
±p
->
os_îr
;

950 
±p
->
io_hdr
.
devi˚_°©us
 = (
__u32
)
v3_hdr
.
°©us
;

951 
±p
->
io_hdr
.
drivî_°©us
 = (
__u32
)
v3_hdr
.driver_status;

952 
±p
->
io_hdr
.
å™•‹t_°©us
 = (
__u32
)
v3_hdr
.
ho°_°©us
;

953 
±p
->
io_hdr
.
ª•⁄£_Àn
 = (
__u32
)
v3_hdr
.
sb_Àn_wr
;

954 
±p
->
io_hdr
.
duøti⁄
 = (
__u32
)
v3_hdr
.duration;

955 
±p
->
io_hdr
.
dö_ªsid
 = (
__s32
)
v3_hdr
.
ªsid
;

958 
	}
}

964 
	$do_scsi_±
(
sg_±_ba£
 * 
vp
, 
fd
, 
time_£cs
, 
vîbo£
)

966 
sg_±_löux_scsi
 * 
±p
 = &
vp
->
im∂
;

968 i‡(! 
bsg_maj‹_checked
) {

969 
bsg_maj‹_checked
 = 1;

970 
	`föd_bsg_maj‹
(
vîbo£
);

972 i‡(
NULL
 =
sg_w¨nögs_°rm
)

973 
sg_w¨nögs_°rm
 = 
°dîr
;

974 
±p
->
os_îr
 = 0;

975 i‡(
±p
->
ö_îr
) {

976 i‡(
vîbo£
)

977 
	`Ârötf
(
sg_w¨nögs_°rm
, "Replicated or unused set_scsi_pt... "

979  
SCSI_PT_DO_BAD_PARAMS
;

981 i‡(
bsg_maj‹
 <= 0)

982  
	`do_scsi_±_v3
(
±p
, 
fd
, 
time_£cs
, 
vîbo£
);

984 
°©
 
a_°©
;

986 i‡(
	`f°©
(
fd
, &
a_°©
) < 0) {

987 
±p
->
os_îr
 = 
î∫o
;

988 i‡(
vîbo£
 > 1)

989 
	`Ârötf
(
sg_w¨nögs_°rm
, "fstat() failed: %s (errno=%d)\n",

990 
	`°ªº‹
(
±p
->
os_îr
),Ötp->os_err);

991  -
±p
->
os_îr
;

993 i‡(! 
	`S_ISCHR
(
a_°©
.
°_mode
) ||

994 (
bsg_maj‹
 !()
	`SG_DEV_MAJOR
(
a_°©
.
°_rdev
)))

995  
	`do_scsi_±_v3
(
±p
, 
fd
, 
time_£cs
, 
vîbo£
);

998 i‡(! 
±p
->
io_hdr
.
ªque°
) {

999 i‡(
vîbo£
)

1000 
	`Ârötf
(
sg_w¨nögs_°rm
, "No SCSI command (cdb) given (v4)\n");

1001  
SCSI_PT_DO_BAD_PARAMS
;

1004 
±p
->
io_hdr
.
timeout
 = ((
time_£cs
 > 0) ? (time_secs * 1000) :

1005 
DEF_TIMEOUT
);

1008 i‡(
±p
->
io_hdr
.
ª•⁄£
 && (±p->io_hdr.
max_ª•⁄£_Àn
 > 0)) {

1009 * 
p
;

1011 
p
 = (*)()
±p
->
io_hdr
.
ª•⁄£
;

1012 
	`mem£t
(
p
, 0, 
±p
->
io_hdr
.
max_ª•⁄£_Àn
);

1015 i‡(
	`io˘l
(
fd
, 
SG_IO
, &
±p
->
io_hdr
) < 0) {

1016 
±p
->
os_îr
 = 
î∫o
;

1017 i‡(
vîbo£
 > 1)

1018 
	`Ârötf
(
sg_w¨nögs_°rm
, "ioctl(SG_IO v4) failed: %s "

1019 "”ºno=%d)\n", 
	`°ªº‹
(
±p
->
os_îr
),Ötp->os_err);

1020  -
±p
->
os_îr
;

1023 
	}
}

	@lib/sg_pt_osf1.c

8 
	~<f˙é.h
>

9 
	~<sys/°©.h
>

10 
	~<sys/ty≥s.h
>

11 
	~<uni°d.h
>

12 
	~<sys/io˘l.h
>

13 
	~<io/comm⁄/devgëöfo.h
>

14 
	~<io/comm⁄/iŸy≥s.h
>

15 
	~<io/ˇm/ˇm.h
>

16 
	~<io/ˇm/uagt.h
>

17 
	~<io/ˇm/rzdisk.h
>

18 
	~<io/ˇm/scsi_›codes.h
>

19 
	~<io/ˇm/scsi_Æl.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<î∫o.h
>

25 
	~"sg_±.h
"

26 
	~"sg_lib.h
"

31 
	#OSF1_MAXDEV
 64

	)

33 
	sosf1_dev_ch™√l
 {

34 
	mbus
;

35 
	mtgt
;

36 
	mlun
;

41 
osf1_dev_ch™√l
 *
	gdevi˚èbÀ
[
OSF1_MAXDEV
] = {0};

42 *
	gˇm_dev
 = "/dev/cam";

43 
	gˇmfd
;

44 
	gˇm›íed
 = 0;

46 
	ssg_±_osf1_scsi
 {

47 * 
	mcdb
;

48 
	mcdb_Àn
;

49 * 
	m£n£
;

50 
	m£n£_Àn
;

51 * 
	mdx„Ω
;

52 
	mdx„r_Àn
;

53 
	mdx„r_dú
;

54 
	mscsi_°©us
;

55 
	mªsid
;

56 
	m£n£_ªsid
;

57 
	mö_îr
;

58 
	mos_îr
;

59 
	må™•‹t_îr
;

62 
	ssg_±_ba£
 {

63 
sg_±_osf1_scsi
 
	mim∂
;

69 
	$scsi_±_›í_devi˚
(c⁄° * 
devi˚_«me
, 
ªad_⁄ly
, 
vîbo£
)

71 
oÊags
 = 0 ;

73 
oÊags
 |(
ªad_⁄ly
 ? 
O_RDONLY
 : 
O_RDWR
);

74  
	`scsi_±_›í_Êags
(
devi˚_«me
, 
oÊags
, 
vîbo£
);

75 
	}
}

81 
	$scsi_±_›í_Êags
(c⁄° * 
devi˚_«me
, 
Êags
, 
vîbo£
)

83 
osf1_dev_ch™√l
 *
fdch™
;

84 
fd
, 
k
;

86 i‡(
NULL
 =
sg_w¨nögs_°rm
)

87 
sg_w¨nögs_°rm
 = 
°dîr
;

89 i‡(!
ˇm›íed
) {

90 
ˇmfd
 = 
	`›í
(
ˇm_dev
, 
O_RDWR
, 0);

91 i‡(
ˇmfd
 < 0)

93 
ˇm›íed
++;

97 
k
 = 0; k < 
OSF1_MAXDEV
; k++)

98 i‡(! 
devi˚èbÀ
[
k
])

101 i‡(
k
 =
OSF1_MAXDEV
) {

102 i‡(
vîbo£
)

103 
	`Ârötf
(
sg_w¨nögs_°rm
, "too many open devices "

104 "(%d)\n", 
OSF1_MAXDEV
);

105 
î∫o
=
EMFILE
;

109 
fdch™
 = (
osf1_dev_ch™√l
 *)
	`ˇŒoc
(1,

110 (
osf1_dev_ch™√l
));

111 i‡(
fdch™
 =
NULL
) {

116 
fd
 = 
	`›í
(
devi˚_«me
, 
O_RDONLY
|
O_NONBLOCK
);

117 i‡(
fd
 > 0) {

118 
devi˚_öfo_t
 
devöfo
;

119 
	`bzîo
(&
devöfo
, (devinfo));

120 i‡(
	`io˘l
(
fd
, 
DEVGETINFO
, &
devöfo
) == 0) {

121 
fdch™
->
bus
 = 
devöfo
.
v1
.
busöfo
.bus.
scsi
.
bus_num
;

122 
fdch™
->
tgt
 = 
devöfo
.
v1
.
busöfo
.
bus
.
scsi
.
tgt_id
;

123 
fdch™
->
lun
 = 
devöfo
.
v1
.
busöfo
.
bus
.
scsi
.lun;

125 
	`˛o£
 (
fd
);

127 
	`‰ì
(
fdch™
);

131 
devi˚èbÀ
[
k
] = 
fdch™
;

132  
k
;

133 
	}
}

137 
	$scsi_±_˛o£_devi˚
(
devi˚_fd
)

139 
osf1_dev_ch™√l
 *
fdch™
;

140 
i
;

142 i‡((
devi˚_fd
 < 0Ë|| (devi˚_fd >
OSF1_MAXDEV
)) {

143 
î∫o
 = 
ENODEV
;

147 
fdch™
 = 
devi˚èbÀ
[
devi˚_fd
];

148 i‡(
NULL
 =
fdch™
) {

149 
î∫o
 = 
ENODEV
;

153 
	`‰ì
(
fdch™
);

154 
devi˚èbÀ
[
devi˚_fd
] = 
NULL
;

156 
i
 = 0; i < 
OSF1_MAXDEV
; i++) {

157 i‡(
devi˚èbÀ
[
i
])

160 i‡(
i
 =
OSF1_MAXDEV
) {

161 
	`˛o£
(
ˇmfd
);

162 
ˇm›íed
 = 0;

165 
	}
}

167 
sg_±_ba£
 *

168 
	$c⁄°ru˘_scsi_±_obj
()

170 
sg_±_osf1_scsi
 * 
±p
;

172 
±p
 = (
sg_±_osf1_scsi
 *)
	`mÆloc
((sg_pt_osf1_scsi));

173 i‡(
±p
) {

174 
	`bzîo
(
±p
, (
sg_±_osf1_scsi
));

175 
±p
->
dx„r_dú
 = 
CAM_DIR_NONE
;

177  (
sg_±_ba£
 *)
±p
;

178 
	}
}

181 
	$de°ru˘_scsi_±_obj
(
sg_±_ba£
 * 
vp
)

183 
sg_±_osf1_scsi
 * 
±p
 = &
vp
->
im∂
;

185 i‡(
±p
)

186 
	`‰ì
(
±p
);

187 
	}
}

190 
	$˛ór_scsi_±_obj
(
sg_±_ba£
 * 
vp
)

192 
sg_±_osf1_scsi
 * 
±p
 = &
vp
->
im∂
;

194 i‡(
±p
) {

195 
	`bzîo
(
±p
, (
sg_±_osf1_scsi
));

196 
±p
->
dx„r_dú
 = 
CAM_DIR_NONE
;

198 
	}
}

201 
	$£t_scsi_±_cdb
(
sg_±_ba£
 * 
vp
, c⁄° * 
cdb
,

202 
cdb_Àn
)

204 
sg_±_osf1_scsi
 * 
±p
 = &
vp
->
im∂
;

206 i‡(
±p
->
cdb
)

207 ++
±p
->
ö_îr
;

208 
±p
->
cdb
 = (*)cdb;

209 
±p
->
cdb_Àn
 = cdb_len;

210 
	}
}

213 
	$£t_scsi_±_£n£
(
sg_±_ba£
 * 
vp
, * 
£n£
,

214 
max_£n£_Àn
)

216 
sg_±_osf1_scsi
 * 
±p
 = &
vp
->
im∂
;

218 i‡(
±p
->
£n£
)

219 ++
±p
->
ö_îr
;

220 
	`bzîo
(
£n£
, 
max_£n£_Àn
);

221 
±p
->
£n£
 = sense;

222 
±p
->
£n£_Àn
 = 
max_£n£_Àn
;

223 
	}
}

227 
	$£t_scsi_±_d©a_ö
(
sg_±_ba£
 * 
vp
, * 
dx„Ω
,

228 
dx„r_Àn
)

230 
sg_±_osf1_scsi
 * 
±p
 = &
vp
->
im∂
;

232 i‡(
±p
->
dx„Ω
)

233 ++
±p
->
ö_îr
;

234 i‡(
dx„r_Àn
 > 0) {

235 
±p
->
dx„Ω
 = dxferp;

236 
±p
->
dx„r_Àn
 = dxfer_len;

237 
±p
->
dx„r_dú
 = 
CAM_DIR_IN
;

239 
	}
}

243 
	$£t_scsi_±_d©a_out
(
sg_±_ba£
 * 
vp
, c⁄° * 
dx„Ω
,

244 
dx„r_Àn
)

246 
sg_±_osf1_scsi
 * 
±p
 = &
vp
->
im∂
;

248 i‡(
±p
->
dx„Ω
)

249 ++
±p
->
ö_îr
;

250 i‡(
dx„r_Àn
 > 0) {

251 
±p
->
dx„Ω
 = (*)dxferp;

252 
±p
->
dx„r_Àn
 = dxfer_len;

253 
±p
->
dx„r_dú
 = 
CAM_DIR_OUT
;

255 
	}
}

258 
	$£t_scsi_±_∑ckë_id
(
sg_±_ba£
 * 
vp
, 
∑ck_id
)

260 
	}
}

263 
	$£t_scsi_±_èg
(
sg_±_ba£
 * 
vp
, 
uöt64_t
 
èg
)

265 
sg_±_osf1_scsi
 * 
±p
 = &
vp
->
im∂
;

267 ++
±p
->
ö_îr
;

268 
	}
}

271 
	$£t_scsi_±_èsk_m™agemít
(
sg_±_ba£
 * 
vp
, 
tmf_code
)

273 
sg_±_osf1_scsi
 * 
±p
 = &
vp
->
im∂
;

275 ++
±p
->
ö_îr
;

276 
	}
}

279 
	$£t_scsi_±_èsk_©å
(
sg_±_ba£
 * 
vp
, 
©åib
, 
¥i‹ôy
)

281 
sg_±_osf1_scsi
 * 
±p
 = &
vp
->
im∂
;

283 ++
±p
->
ö_îr
;

284 
	}
}

287 
	$£t_scsi_±_Êags
(
sg_±_ba£
 * 
objp
, 
Êags
)

290 
objp
 = objp;

291 
Êags
 = flags;

292 
	}
}

295 
	$ªÀa£_sim
(
sg_±_ba£
 *
vp
, 
devi˚_fd
, 
vîbo£
) {

296 
sg_±_osf1_scsi
 * 
±p
 = &
vp
->
im∂
;

297 
osf1_dev_ch™√l
 *
fdch™
 = 
devi˚èbÀ
[
devi˚_fd
];

298 
UAGT_CAM_CCB
 
uagt
;

299 
CCB_RELSIM
 
ªlsim
;

300 
ªtvÆ
;

302 i‡(
NULL
 =
sg_w¨nögs_°rm
)

303 
sg_w¨nögs_°rm
 = 
°dîr
;

305 
	`bzîo
(&
uagt
, (uagt));

306 
	`bzîo
(&
ªlsim
, (relsim));

308 
uagt
.
uagt_ccb
 = (
CCB_HEADER
 *Ë&
ªlsim
;

309 
uagt
.
uagt_ccbÀn
 = (
ªlsim
);

311 
ªlsim
.
ˇm_ch
.
ˇm_ccb_Àn
 = (relsim);

312 
ªlsim
.
ˇm_ch
.
ˇm_func_code
 = 
XPT_REL_SIMQ
;

313 
ªlsim
.
ˇm_ch
.
ˇm_Êags
 = 
CAM_DIR_IN
 | 
CAM_DIS_CALLBACK
;

314 
ªlsim
.
ˇm_ch
.
ˇm_∑th_id
 = 
fdch™
->
bus
;

315 
ªlsim
.
ˇm_ch
.
ˇm_èrgë_id
 = 
fdch™
->
tgt
;

316 
ªlsim
.
ˇm_ch
.
ˇm_èrgë_lun
 = 
fdch™
->
lun
;

318 
ªtvÆ
 = 
	`io˘l
(
ˇmfd
, 
UAGT_CAM_IO
, &
uagt
);

319 i‡(
ªtvÆ
 < 0) {

320 i‡(
vîbo£
)

321 
	`Ârötf
(
sg_w¨nögs_°rm
, "CAM ioctlÉrror (Release SIM Queue)\n");

323  
ªtvÆ
;

324 
	}
}

327 
	$do_scsi_±
(
sg_±_ba£
 * 
vp
, 
devi˚_fd
, 
time_£cs
, 
vîbo£
)

329 
sg_±_osf1_scsi
 * 
±p
 = &
vp
->
im∂
;

330 
osf1_dev_ch™√l
 *
fdch™
;

331 
Àn
, 
ªtvÆ
;

332 
CCB_SCSIIO
 
ccb
;

333 
UAGT_CAM_CCB
 
uagt
;

334 
£n£p
[
ADDL_SENSE_LENGTH
];

337 i‡(
NULL
 =
sg_w¨nögs_°rm
)

338 
sg_w¨nögs_°rm
 = 
°dîr
;

339 
±p
->
os_îr
 = 0;

340 i‡(
±p
->
ö_îr
) {

341 i‡(
vîbo£
)

342 
	`Ârötf
(
sg_w¨nögs_°rm
, "Replicated or unused set_scsi_pt...\n");

343  
SCSI_PT_DO_BAD_PARAMS
;

345 i‡(
NULL
 =
±p
->
cdb
) {

346 i‡(
vîbo£
)

347 
	`Ârötf
(
sg_w¨nögs_°rm
, "No command (cdb) given\n");

348  
SCSI_PT_DO_BAD_PARAMS
;

351 i‡((
devi˚_fd
 < 0Ë|| (devi˚_fd >
OSF1_MAXDEV
)) {

352 i‡(
vîbo£
)

353 
	`Ârötf
(
sg_w¨nögs_°rm
, "Bad file descriptor\n");

354 
±p
->
os_îr
 = 
ENODEV
;

355  -
±p
->
os_îr
;

357 
fdch™
 = 
devi˚èbÀ
[
devi˚_fd
];

358 i‡(
NULL
 =
fdch™
) {

359 i‡(
vîbo£
)

360 
	`Ârötf
(
sg_w¨nögs_°rm
, "File descriptor closed??\n");

361 
±p
->
os_îr
 = 
ENODEV
;

362  -
±p
->
os_îr
;

364 i‡(0 =
ˇm›íed
) {

365 i‡(
vîbo£
)

366 
	`Ârötf
(
sg_w¨nögs_°rm
, "No open CAM device\n");

367  
SCSI_PT_DO_BAD_PARAMS
;

370 
	`bzîo
(&
uagt
, (uagt));

371 
	`bzîo
(&
ccb
, (ccb));

373 
uagt
.
uagt_ccb
 = (
CCB_HEADER
 *Ë&
ccb
;

374 
uagt
.
uagt_ccbÀn
 = (
ccb
);

375 
uagt
.
uagt_¢sbuf
 = 
ccb
.
ˇm_£n£_±r
 = 
±p
->
£n£
 ?Öç->£n£ : 
£n£p
;

376 
uagt
.
uagt_¢¶í
 = 
ccb
.
ˇm_£n£_Àn
 = 
±p
->
£n£
 ?Öç->
£n£_Àn
 :

377  
£n£p
;

378 
uagt
.
uagt_buf„r
 = 
ccb
.
ˇm_d©a_±r
 = 
±p
->
dx„Ω
;

379 
uagt
.
uagt_buÊí
 = 
ccb
.
ˇm_dx„r_Àn
 = 
±p
->
dx„r_Àn
;

381 
ccb
.
ˇm_timeout
 = 
time_£cs
;

382 
ccb
.
ˇm_ch
.
my_addr
 = (
CCB_HEADER
 *) &ccb;

383 
ccb
.
ˇm_ch
.
ˇm_ccb_Àn
 = (ccb);

384 
ccb
.
ˇm_ch
.
ˇm_func_code
 = 
XPT_SCSI_IO
;

385 
ccb
.
ˇm_ch
.
ˇm_Êags
 = 
±p
->
dx„r_dú
;

386 
ccb
.
ˇm_cdb_Àn
 = 
±p
->
cdb_Àn
;

387 
	`mem˝y
(
ccb
.
ˇm_cdb_io
.
ˇm_cdb_byãs
, 
±p
->
cdb
,Öç->
cdb_Àn
);

388 
ccb
.
ˇm_ch
.
ˇm_∑th_id
 = 
fdch™
->
bus
;

389 
ccb
.
ˇm_ch
.
ˇm_èrgë_id
 = 
fdch™
->
tgt
;

390 
ccb
.
ˇm_ch
.
ˇm_èrgë_lun
 = 
fdch™
->
lun
;

392 i‡(
	`io˘l
(
ˇmfd
, 
UAGT_CAM_IO
, &
uagt
) < 0) {

393 i‡(
vîbo£
)

394 
	`Ârötf
(
sg_w¨nögs_°rm
, "CAN I/O Error\n");

395 
±p
->
os_îr
 = 
EIO
;

396  -
±p
->
os_îr
;

399 i‡(((
ccb
.
ˇm_ch
.
ˇm_°©us
 & 
CAM_STATUS_MASK
Ë=
CAM_REQ_CMP
) ||

400 ((
ccb
.
ˇm_ch
.
ˇm_°©us
 & 
CAM_STATUS_MASK
Ë=
CAM_REQ_CMP_ERR
)) {

401 
±p
->
scsi_°©us
 = 
ccb
.
ˇm_scsi_°©us
;

402 
±p
->
ªsid
 = 
ccb
.
ˇm_ªsid
;

403 i‡(
±p
->
£n£
)

404 
±p
->
£n£_ªsid
 = 
ccb
.
ˇm_£n£_ªsid
;

406 
±p
->
å™•‹t_îr
 = 1;

410 i‡(
ccb
.
ˇm_ch
.
ˇm_°©us
 & 
CAM_SIM_QFRZN
)

411 
	`ªÀa£_sim
(
vp
, 
devi˚_fd
, 
vîbo£
);

414 
	}
}

417 
	$gë_scsi_±_ªsu…_ˇãg‹y
(c⁄° 
sg_±_ba£
 * 
vp
)

419 c⁄° 
sg_±_osf1_scsi
 * 
±p
 = &
vp
->
im∂
;

421 i‡(
±p
->
os_îr
)

422  
SCSI_PT_RESULT_OS_ERR
;

423 i‡(
±p
->
å™•‹t_îr
)

424  
SCSI_PT_RESULT_TRANSPORT_ERR
;

425 i‡((
SAM_STAT_CHECK_CONDITION
 =
±p
->
scsi_°©us
) ||

426 (
SAM_STAT_COMMAND_TERMINATED
 =
±p
->
scsi_°©us
))

427  
SCSI_PT_RESULT_SENSE
;

428 i‡(
±p
->
scsi_°©us
)

429  
SCSI_PT_RESULT_STATUS
;

431  
SCSI_PT_RESULT_GOOD
;

432 
	}
}

435 
	$gë_scsi_±_ªsid
(c⁄° 
sg_±_ba£
 * 
vp
)

437 c⁄° 
sg_±_osf1_scsi
 * 
±p
 = &
vp
->
im∂
;

439  
±p
->
ªsid
;

440 
	}
}

443 
	$gë_scsi_±_°©us_ª•⁄£
(c⁄° 
sg_±_ba£
 * 
vp
)

445 c⁄° 
sg_±_osf1_scsi
 * 
±p
 = &
vp
->
im∂
;

447  
±p
->
scsi_°©us
;

448 
	}
}

451 
	$gë_scsi_±_£n£_Àn
(c⁄° 
sg_±_ba£
 * 
vp
)

453 c⁄° 
sg_±_osf1_scsi
 * 
±p
 = &
vp
->
im∂
;

454 
Àn
;

456 
Àn
 = 
±p
->
£n£_Àn
 -Öç->
£n£_ªsid
;

457  (
Àn
 > 0) ?Üen : 0;

458 
	}
}

461 
	$gë_scsi_±_duøti⁄_ms
(c⁄° 
sg_±_ba£
 * 
vp
)

466 
	}
}

469 
	$gë_scsi_±_å™•‹t_îr
(c⁄° 
sg_±_ba£
 * 
vp
)

471 c⁄° 
sg_±_osf1_scsi
 * 
±p
 = &
vp
->
im∂
;

473  
±p
->
å™•‹t_îr
;

474 
	}
}

477 
	$gë_scsi_±_os_îr
(c⁄° 
sg_±_ba£
 * 
vp
)

479 c⁄° 
sg_±_osf1_scsi
 * 
±p
 = &
vp
->
im∂
;

481  
±p
->
os_îr
;

482 
	}
}

485 
	$gë_scsi_±_å™•‹t_îr_°r
(c⁄° 
sg_±_ba£
 * 
vp
, 
max_b_Àn
,

486 * 
b
)

488 c⁄° 
sg_±_osf1_scsi
 * 
±p
 = &
vp
->
im∂
;

490 i‡(0 =
±p
->
å™•‹t_îr
) {

491 
	`°∫˝y
(
b
, "nÿå™•‹àîr‹ávaûabÀ", 
max_b_Àn
);

492 
b
[
max_b_Àn
 - 1] = '\0';

493  
b
;

495 
	`°∫˝y
(
b
, "nÿå™•‹àîr‹ávaûabÀ", 
max_b_Àn
);

496 
b
[
max_b_Àn
 - 1] = '\0';

497  
b
;

498 
	}
}

501 
	$gë_scsi_±_os_îr_°r
(c⁄° 
sg_±_ba£
 * 
vp
, 
max_b_Àn
, * 
b
)

503 c⁄° 
sg_±_osf1_scsi
 * 
±p
 = &
vp
->
im∂
;

504 c⁄° * 
˝
;

506 
˝
 = 
	`ß„_°ªº‹
(
±p
->
os_îr
);

507 
	`°∫˝y
(
b
, 
˝
, 
max_b_Àn
);

508 i‡(()
	`°æí
(
˝
Ë>
max_b_Àn
)

509 
b
[
max_b_Àn
 - 1] = '\0';

510  
b
;

511 
	}
}

	@lib/sg_pt_solaris.c

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<˘y≥.h
>

14 
	~<uni°d.h
>

15 
	~<î∫o.h
>

16 
	~<f˙é.h
>

17 
	~<sys/∑øm.h
>

20 
	~<sys/scsi/gíîic/comm™ds.h
>

21 
	~<sys/scsi/gíîic/°©us.h
>

22 
	~<sys/scsi/im∂/ty≥s.h
>

23 
	~<sys/scsi/im∂/uscsi.h
>

25 
	~"sg_±.h
"

26 
	~"sg_lib.h
"

28 #ifde‡
HAVE_CONFIG_H


29 
	~"c⁄fig.h
"

33 
	#DEF_TIMEOUT
 60

	)

35 
	ssg_±_sﬁ¨is_scsi
 {

36 
uscsi_cmd
 
	muscsi
;

37 
	mmax_£n£_Àn
;

38 
	mö_îr
;

39 
	mos_îr
;

42 
	ssg_±_ba£
 {

43 
sg_±_sﬁ¨is_scsi
 
	mim∂
;

49 
	$scsi_±_›í_devi˚
(c⁄° * 
devi˚_«me
, 
ªad_⁄ly
, 
vîbo£
)

51 
oÊags
 = 0 ;

53 
oÊags
 |(
ªad_⁄ly
 ? 
O_RDONLY
 : 
O_RDWR
);

54  
	`scsi_±_›í_Êags
(
devi˚_«me
, 
oÊags
, 
vîbo£
);

55 
	}
}

61 
	$scsi_±_›í_Êags
(c⁄° * 
devi˚_«me
, 
Êags_¨g
, 
vîbo£
)

63 
oÊags
 = 
O_NONBLOCK
 | 
O_RDWR
;

64 
fd
;

66 
Êags_¨g
 = flags_arg;

67 i‡(
vîbo£
 > 1) {

68 
	`Ârötf
(
°dîr
, "›í %†wôh fœgs=0x%x\n", 
devi˚_«me
, 
oÊags
);

70 
fd
 = 
	`›í
(
devi˚_«me
, 
oÊags
);

71 i‡(
fd
 < 0)

72 
fd
 = -
î∫o
;

73  
fd
;

74 
	}
}

78 
	$scsi_±_˛o£_devi˚
(
devi˚_fd
)

80 
ªs
;

82 
ªs
 = 
	`˛o£
(
devi˚_fd
);

83 i‡(
ªs
 < 0)

84 
ªs
 = -
î∫o
;

85  
ªs
;

86 
	}
}

88 
sg_±_ba£
 *

89 
	$c⁄°ru˘_scsi_±_obj
()

91 
sg_±_sﬁ¨is_scsi
 * 
±p
;

93 
±p
 = (
sg_±_sﬁ¨is_scsi
 *)

94 
	`ˇŒoc
(1, (
sg_±_sﬁ¨is_scsi
));

95 i‡(
±p
) {

96 
±p
->
uscsi
.
uscsi_timeout
 = 
DEF_TIMEOUT
;

97 
±p
->
uscsi
.
uscsi_Êags
 = 
USCSI_READ
 | 
USCSI_ISOLATE
 | 
USCSI_RQENABLE
;

98 
±p
->
uscsi
.
uscsi_timeout
 = 
DEF_TIMEOUT
;

100  (
sg_±_ba£
 *)
±p
;

101 
	}
}

104 
	$de°ru˘_scsi_±_obj
(
sg_±_ba£
 * 
vp
)

106 
sg_±_sﬁ¨is_scsi
 * 
±p
 = &
vp
->
im∂
;

108 i‡(
±p
)

109 
	`‰ì
(
±p
);

110 
	}
}

113 
	$˛ór_scsi_±_obj
(
sg_±_ba£
 * 
vp
)

115 
sg_±_sﬁ¨is_scsi
 * 
±p
 = &
vp
->
im∂
;

117 i‡(
±p
) {

118 
	`mem£t
(
±p
, 0, (
sg_±_sﬁ¨is_scsi
));

119 
±p
->
uscsi
.
uscsi_timeout
 = 
DEF_TIMEOUT
;

120 
±p
->
uscsi
.
uscsi_Êags
 = 
USCSI_READ
 | 
USCSI_ISOLATE
 | 
USCSI_RQENABLE
;

121 
±p
->
uscsi
.
uscsi_timeout
 = 
DEF_TIMEOUT
;

123 
	}
}

126 
	$£t_scsi_±_cdb
(
sg_±_ba£
 * 
vp
, c⁄° * 
cdb
,

127 
cdb_Àn
)

129 
sg_±_sﬁ¨is_scsi
 * 
±p
 = &
vp
->
im∂
;

131 i‡(
±p
->
uscsi
.
uscsi_cdb
)

132 ++
±p
->
ö_îr
;

133 
±p
->
uscsi
.
uscsi_cdb
 = (*)
cdb
;

134 
±p
->
uscsi
.
uscsi_cdbÀn
 = 
cdb_Àn
;

135 
	}
}

138 
	$£t_scsi_±_£n£
(
sg_±_ba£
 * 
vp
, * 
£n£
,

139 
max_£n£_Àn
)

141 
sg_±_sﬁ¨is_scsi
 * 
±p
 = &
vp
->
im∂
;

143 i‡(
±p
->
uscsi
.
uscsi_rqbuf
)

144 ++
±p
->
ö_îr
;

145 
	`mem£t
(
£n£
, 0, 
max_£n£_Àn
);

146 
±p
->
uscsi
.
uscsi_rqbuf
 = (*)
£n£
;

147 
±p
->
uscsi
.
uscsi_rqÀn
 = 
max_£n£_Àn
;

148 
±p
->
max_£n£_Àn
 = max_sense_len;

149 
	}
}

153 
	$£t_scsi_±_d©a_ö
(
sg_±_ba£
 * 
vp
, * 
dx„Ω
,

154 
dx„r_Àn
)

156 
sg_±_sﬁ¨is_scsi
 * 
±p
 = &
vp
->
im∂
;

158 i‡(
±p
->
uscsi
.
uscsi_buÁddr
)

159 ++
±p
->
ö_îr
;

160 i‡(
dx„r_Àn
 > 0) {

161 
±p
->
uscsi
.
uscsi_buÁddr
 = (*)
dx„Ω
;

162 
±p
->
uscsi
.
uscsi_buÊí
 = 
dx„r_Àn
;

163 
±p
->
uscsi
.
uscsi_Êags
 = 
USCSI_READ
 | 
USCSI_ISOLATE
 | 
USCSI_RQENABLE
;

165 
	}
}

169 
	$£t_scsi_±_d©a_out
(
sg_±_ba£
 * 
vp
, c⁄° * 
dx„Ω
,

170 
dx„r_Àn
)

172 
sg_±_sﬁ¨is_scsi
 * 
±p
 = &
vp
->
im∂
;

174 i‡(
±p
->
uscsi
.
uscsi_buÁddr
)

175 ++
±p
->
ö_îr
;

176 i‡(
dx„r_Àn
 > 0) {

177 
±p
->
uscsi
.
uscsi_buÁddr
 = (*)
dx„Ω
;

178 
±p
->
uscsi
.
uscsi_buÊí
 = 
dx„r_Àn
;

179 
±p
->
uscsi
.
uscsi_Êags
 = 
USCSI_WRITE
 | 
USCSI_ISOLATE
 | 
USCSI_RQENABLE
;

181 
	}
}

184 
	$£t_scsi_±_∑ckë_id
(
sg_±_ba£
 * 
vp
, 
∑ck_id
)

188 
vp
 = vp;

189 
∑ck_id
 =Öack_id;

190 
	}
}

193 
	$£t_scsi_±_èg
(
sg_±_ba£
 * 
vp
, 
uöt64_t
 
èg
)

197 
vp
 = vp;

198 
èg
 =Åag;

199 
	}
}

203 
	$£t_scsi_±_èsk_m™agemít
(
sg_±_ba£
 * 
vp
, 
tmf_code
)

205 
sg_±_sﬁ¨is_scsi
 * 
±p
 = &
vp
->
im∂
;

207 ++
±p
->
ö_îr
;

208 
tmf_code
 =Åmf_code;

209 
	}
}

212 
	$£t_scsi_±_èsk_©å
(
sg_±_ba£
 * 
vp
, 
©åibuã
, 
¥i‹ôy
)

214 
sg_±_sﬁ¨is_scsi
 * 
±p
 = &
vp
->
im∂
;

216 ++
±p
->
ö_îr
;

217 
©åibuã
 =áttribute;

218 
¥i‹ôy
 =Öriority;

219 
	}
}

222 
	$£t_scsi_±_Êags
(
sg_±_ba£
 * 
objp
, 
Êags
)

225 
objp
 = objp;

226 
Êags
 = flags;

227 
	}
}

233 
	$do_scsi_±
(
sg_±_ba£
 * 
vp
, 
fd
, 
time_£cs
, 
vîbo£
)

235 
sg_±_sﬁ¨is_scsi
 * 
±p
 = &
vp
->
im∂
;

237 
±p
->
os_îr
 = 0;

238 i‡(
±p
->
ö_îr
) {

239 i‡(
vîbo£
)

240 
	`Ârötf
(
°dîr
, "Replicated or unused set_scsi_pt... "

242  
SCSI_PT_DO_BAD_PARAMS
;

244 i‡(
NULL
 =
±p
->
uscsi
.
uscsi_cdb
) {

245 i‡(
vîbo£
)

246 
	`Ârötf
(
°dîr
, "No SCSI command (cdb) given\n");

247  
SCSI_PT_DO_BAD_PARAMS
;

249 i‡(
time_£cs
 > 0)

250 
±p
->
uscsi
.
uscsi_timeout
 = 
time_£cs
;

252 i‡(
	`io˘l
(
fd
, 
USCSICMD
, &
±p
->
uscsi
)) {

253 
±p
->
os_îr
 = 
î∫o
;

254 i‡((
EIO
 =
±p
->
os_îr
Ë&&Öç->
uscsi
.
uscsi_°©us
) {

255 
±p
->
os_îr
 = 0;

258 i‡(
vîbo£
)

259 
	`Ârötf
(
°dîr
, "ioctl(USCSICMD) failed with os_err "

260 "”ºnoË%d\n", 
±p
->
os_îr
);

261  -
±p
->
os_îr
;

264 
	}
}

267 
	$gë_scsi_±_ªsu…_ˇãg‹y
(c⁄° 
sg_±_ba£
 * 
vp
)

269 c⁄° 
sg_±_sﬁ¨is_scsi
 * 
±p
 = &
vp
->
im∂
;

270 
scsi_°
 = 
±p
->
uscsi
.
uscsi_°©us
;

272 i‡(
±p
->
os_îr
)

273  
SCSI_PT_RESULT_OS_ERR
;

274 i‡((
SAM_STAT_CHECK_CONDITION
 =
scsi_°
) ||

275 (
SAM_STAT_COMMAND_TERMINATED
 =
scsi_°
))

276  
SCSI_PT_RESULT_SENSE
;

277 i‡(
scsi_°
)

278  
SCSI_PT_RESULT_STATUS
;

280  
SCSI_PT_RESULT_GOOD
;

281 
	}
}

284 
	$gë_scsi_±_ªsid
(c⁄° 
sg_±_ba£
 * 
vp
)

286 c⁄° 
sg_±_sﬁ¨is_scsi
 * 
±p
 = &
vp
->
im∂
;

288  
±p
->
uscsi
.
uscsi_ªsid
;

289 
	}
}

292 
	$gë_scsi_±_°©us_ª•⁄£
(c⁄° 
sg_±_ba£
 * 
vp
)

294 c⁄° 
sg_±_sﬁ¨is_scsi
 * 
±p
 = &
vp
->
im∂
;

296  
±p
->
uscsi
.
uscsi_°©us
;

297 
	}
}

300 
	$gë_scsi_±_£n£_Àn
(c⁄° 
sg_±_ba£
 * 
vp
)

302 c⁄° 
sg_±_sﬁ¨is_scsi
 * 
±p
 = &
vp
->
im∂
;

303 
ªs
;

305 i‡(
±p
->
max_£n£_Àn
 > 0) {

306 
ªs
 = 
±p
->
max_£n£_Àn
 -Öç->
uscsi
.
uscsi_rqªsid
;

307  (
ªs
 > 0) ?Ñes : 0;

310 
	}
}

313 
	$gë_scsi_±_duøti⁄_ms
(c⁄° 
sg_±_ba£
 * 
vp
)

317 
vp
 = vp;

319 
	}
}

322 
	$gë_scsi_±_å™•‹t_îr
(c⁄° 
sg_±_ba£
 * 
vp
)

326 
vp
 = vp;

328 
	}
}

331 
	$gë_scsi_±_os_îr
(c⁄° 
sg_±_ba£
 * 
vp
)

333 c⁄° 
sg_±_sﬁ¨is_scsi
 * 
±p
 = &
vp
->
im∂
;

335  
±p
->
os_îr
;

336 
	}
}

339 
	$gë_scsi_±_å™•‹t_îr_°r
(c⁄° 
sg_±_ba£
 * 
vp
, 
max_b_Àn
,

340 * 
b
)

344 
vp
 = vp;

345 i‡(
max_b_Àn
 > 0)

346 
b
[0] = '\0';

348  
b
;

349 
	}
}

352 
	$gë_scsi_±_os_îr_°r
(c⁄° 
sg_±_ba£
 * 
vp
, 
max_b_Àn
, * 
b
)

354 c⁄° 
sg_±_sﬁ¨is_scsi
 * 
±p
 = &
vp
->
im∂
;

355 c⁄° * 
˝
;

357 
˝
 = 
	`ß„_°ªº‹
(
±p
->
os_îr
);

358 
	`°∫˝y
(
b
, 
˝
, 
max_b_Àn
);

359 i‡(()
	`°æí
(
˝
Ë>
max_b_Àn
)

360 
b
[
max_b_Àn
 - 1] = '\0';

361  
b
;

362 
	}
}

	@lib/sg_pt_win32.c

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°ddef.h
>

13 
	~<°rög.h
>

14 
	~<î∫o.h
>

15 
	~<˘y≥.h
>

17 
	~"sg_±.h
"

18 
	~"sg_lib.h
"

19 
	~"sg_±_wö32.h
"

21 #ifde‡
HAVE_CONFIG_H


22 
	~"c⁄fig.h
"

48 
	#DEF_TIMEOUT
 60

	)

49 
	#MAX_OPEN_SIMULT
 8

	)

50 
	#WIN32_FDOFFSET
 32

	)

52 
	ssg_±_h™dÀ
 {

53 
	mö_u£
;

54 
HANDLE
 
	mfh
;

55 
	mad≠ãr
[32];

56 
	mbus
;

57 
	mèrgë
;

58 
	mlun
;

61 
sg_±_h™dÀ
 
	gh™dÀ_¨r
[
MAX_OPEN_SIMULT
];

63 
	ssg_±_wö32_scsi
 {

64 * 
	mdx„Ω
;

65 
	mdx„r_Àn
;

66 * 
	m£n£p
;

67 
	m£n£_Àn
;

68 
	mscsi_°©us
;

69 
	mªsid
;

70 
	m£n£_ªsid
;

71 
	mö_îr
;

72 
	mos_îr
;

73 
	må™•‹t_îr
;

75 
SCSI_PASS_THROUGH_DIRECT_WITH_BUFFER
 
	mswb_d
;

77 
SCSI_PASS_THROUGH_WITH_BUFFERS
 
	mswb_i
;

83 
	ssg_±_ba£
 {

84 
sg_±_wö32_scsi
 * 
	mim∂p
;

87 #ifde‡
WIN32_SPT_DIRECT


88 
	g•t_dúe˘
 = 1;

90 
	g•t_dúe˘
 = 0;

97 
	$scsi_±_wö32_dúe˘
(
°©e_dúe˘
)

99 
•t_dúe˘
 = 
°©e_dúe˘
;

100 
	}
}

104 
	$scsi_±_wö32_•t_°©e
()

106  
•t_dúe˘
;

107 
	}
}

112 
	$scsi_±_›í_devi˚
(c⁄° * 
devi˚_«me
, 
ªad_⁄ly
, 
vîbo£
)

114 
oÊags
 = 0 ;

116 
oÊags
 |(
ªad_⁄ly
 ? 0 : 0);

117  
	`scsi_±_›í_Êags
(
devi˚_«me
, 
oÊags
, 
vîbo£
);

118 
	}
}

133 
scsi_±_›í_Êags
(c⁄° * 
devi˚_«me
,

134 
Êags
 
__©åibuã__
 ((
unu£d
)),

135 
vîbo£
)

137 
	gÀn
, 
	gk
, 
	gad≠ãr_num
, 
	gbus
, 
	gèrgë
, 
	glun
, 
	goff
, 
	ggŸ_scsi_«me
;

138 
	gödex
, 
	gnum
, 
	ggŸ_pd_«me
, 
	gpd_num
;

139 
sg_±_h™dÀ
 * 
	gshp
;

140 
	gbuff
[8];

142 i‡(
	gNULL
 =
sg_w¨nögs_°rm
)

143 
sg_w¨nögs_°rm
 = 
°dîr
;

145 
	gk
 = 0; k < 
	gMAX_OPEN_SIMULT
; k++)

146 i‡(0 =
h™dÀ_¨r
[
k
].
ö_u£
)

148 i‡(
	gk
 =
MAX_OPEN_SIMULT
) {

149 i‡(
vîbo£
)

150 
Ârötf
(
sg_w¨nögs_°rm
, "too many open handles "

151 "(%d)\n", 
MAX_OPEN_SIMULT
);

152  -
	gEMFILE
;

154 
	gh™dÀ_¨r
[
k
].
	gö_u£
 = 1;

156 
	gödex
 = 
k
;

157 
	gshp
 = 
h™dÀ_¨r
 + 
ödex
;

158 
	gad≠ãr_num
 = 0;

159 
	gbus
 = 0;

160 
	gèrgë
 = 0;

161 
	glun
 = 0;

162 
	ggŸ_pd_«me
 = 0;

163 
	ggŸ_scsi_«me
 = 0;

164 
	gÀn
 = 
°æí
(
devi˚_«me
);

165 i‡((
	gÀn
 > 4Ë&& (0 =
°∫cmp
("\\\\.\\", 
devi˚_«me
, 4)))

166 
	goff
 = 4;

168 
	goff
 = 0;

169 i‡(
	gÀn
 > (
	goff
 + 2)) {

170 
	gbuff
[0] = 
touµî
(()
devi˚_«me
[
off
 + 0]);

171 
	gbuff
[1] = 
touµî
(()
devi˚_«me
[
off
 + 1]);

172 i‡(0 =
°∫cmp
("PD", 
buff
, 2)) {

173 
	gnum
 = 
ssˇnf
(
devi˚_«me
 + 
off
 + 2, "%d", &
pd_num
);

174 i‡(1 =
num
)

175 
gŸ_pd_«me
 = 1;

177 i‡(0 =
gŸ_pd_«me
) {

178 
buff
[2] = 
touµî
(()
devi˚_«me
[
off
 + 2]);

179 
	gbuff
[3] = 
touµî
(()
devi˚_«me
[
off
 + 3]);

180 i‡(0 =
°∫cmp
("SCSI", 
buff
, 4)) {

181 
	gnum
 = 
ssˇnf
(
devi˚_«me
 + 
off
 + 4, "%d:%d,%d,%d",

182 &
ad≠ãr_num
, &
bus
, &
èrgë
, &
lun
);

183 i‡(
	gnum
 < 3) {

184 i‡(
	gvîbo£
)

185 
Ârötf
(
sg_w¨nögs_°rm
, "expected formatÜike: "

187 
	gshp
->
	gö_u£
 = 0;

188  -
	gEINVAL
;

190 
	ggŸ_scsi_«me
 = 1;

194 
	gshp
->
	gbus
 = 
bus
;

195 
	gshp
->
	gèrgë
 = 
èrgë
;

196 
	gshp
->
	glun
 = 
lun
;

197 
mem£t
(
shp
->
ad≠ãr
, 0, (shp->adapter));

198 
°∫˝y
(
shp
->
ad≠ãr
, "\\\\.\\", 4);

199 i‡(
	ggŸ_pd_«me
)

200 
¢¥ötf
(
shp
->
ad≠ãr
 + 4, (shp->adapter) - 5,

201 "PhysiˇlDrive%d", 
pd_num
);

202 i‡(
	ggŸ_scsi_«me
)

203 
¢¥ötf
(
shp
->
ad≠ãr
 + 4, (shp->adapter) - 5, "SCSI%d:",

204 
ad≠ãr_num
);

206 
¢¥ötf
(
shp
->
ad≠ãr
 + 4, (shp->adapter) - 5, "%s",

207 
devi˚_«me
 + 
off
);

208 
	gshp
->
	gfh
 = 
Cª©eFûe
(
shp
->
ad≠ãr
, 
GENERIC_READ
 | 
GENERIC_WRITE
,

209 
FILE_SHARE_READ
 | 
FILE_SHARE_WRITE
, 
NULL
,

210 
OPEN_EXISTING
, 0, 
NULL
);

211 i‡(
	gshp
->
	gfh
 =
INVALID_HANDLE_VALUE
) {

212 i‡(
vîbo£
)

213 
Ârötf
(
sg_w¨nögs_°rm
, "Windows CreateFileÉrror=%ld\n",

214 
GëLa°Eº‹
());

215 
	gshp
->
	gö_u£
 = 0;

216  -
	gENODEV
;

218  
	gödex
 + 
	gWIN32_FDOFFSET
;

224 
	$scsi_±_˛o£_devi˚
(
devi˚_fd
)

226 
sg_±_h™dÀ
 * 
shp
;

227 
ödex
;

229 
ödex
 = 
devi˚_fd
 - 
WIN32_FDOFFSET
;

231 i‡((
ödex
 < 0Ë|| (ödex >
WIN32_FDOFFSET
))

232  -
ENODEV
;

233 
shp
 = 
h™dÀ_¨r
 + 
ödex
;

234 
	`Clo£H™dÀ
(
shp
->
fh
);

235 
shp
->
bus
 = 0;

236 
shp
->
èrgë
 = 0;

237 
shp
->
lun
 = 0;

238 
	`mem£t
(
shp
->
ad≠ãr
, 0, (shp->adapter));

239 
shp
->
ö_u£
 = 0;

241 
	}
}

243 
sg_±_ba£
 *

244 
	$c⁄°ru˘_scsi_±_obj
()

246 
sg_±_wö32_scsi
 * 
p•
;

247 
sg_±_ba£
 * 
vp
 = 
NULL
;

249 
p•
 = (
sg_±_wö32_scsi
 *)
	`ˇŒoc
((sg_pt_win32_scsi),

251 i‡(
p•
) {

252 i‡(
•t_dúe˘
) {

253 
p•
->
swb_d
.
•t
.
D©aIn
 = 
SCSI_IOCTL_DATA_UNSPECIFIED
;

254 
p•
->
swb_d
.
•t
.
Sí£InfoLígth
 = 
SCSI_MAX_SENSE_LEN
;

255 
p•
->
swb_d
.
•t
.
Sí£InfoOff£t
 =

256 
	`off£tof
(
SCSI_PASS_THROUGH_WITH_BUFFERS
, 
ucSí£Buf
);

257 
p•
->
swb_d
.
•t
.
TimeOutVÆue
 = 
DEF_TIMEOUT
;

259 
p•
->
swb_i
.
•t
.
D©aIn
 = 
SCSI_IOCTL_DATA_UNSPECIFIED
;

260 
p•
->
swb_i
.
•t
.
Sí£InfoLígth
 = 
SCSI_MAX_SENSE_LEN
;

261 
p•
->
swb_i
.
•t
.
Sí£InfoOff£t
 =

262 
	`off£tof
(
SCSI_PASS_THROUGH_WITH_BUFFERS
, 
ucSí£Buf
);

263 
p•
->
swb_i
.
•t
.
TimeOutVÆue
 = 
DEF_TIMEOUT
;

265 
vp
 = 
	`mÆloc
((
sg_±_wö32_scsi
 *));

266 i‡(
vp
)

267 
vp
->
im∂p
 = 
p•
;

269 
	`‰ì
(
p•
);

271  
vp
;

272 
	}
}

275 
	$de°ru˘_scsi_±_obj
(
sg_±_ba£
 * 
vp
)

277 i‡(
vp
) {

278 
sg_±_wö32_scsi
 * 
p•
 = 
vp
->
im∂p
;

280 i‡(
p•
) {

281 
	`‰ì
(
p•
);

283 
	`‰ì
(
vp
);

285 
	}
}

288 
	$˛ór_scsi_±_obj
(
sg_±_ba£
 * 
vp
)

290 
sg_±_wö32_scsi
 * 
p•
 = 
vp
->
im∂p
;

292 i‡(
p•
) {

293 
	`mem£t
(
p•
, 0, (
sg_±_wö32_scsi
));

294 i‡(
•t_dúe˘
) {

295 
p•
->
swb_d
.
•t
.
D©aIn
 = 
SCSI_IOCTL_DATA_UNSPECIFIED
;

296 
p•
->
swb_d
.
•t
.
Sí£InfoLígth
 = 
SCSI_MAX_SENSE_LEN
;

297 
p•
->
swb_d
.
•t
.
Sí£InfoOff£t
 =

298 
	`off£tof
(
SCSI_PASS_THROUGH_WITH_BUFFERS
, 
ucSí£Buf
);

299 
p•
->
swb_d
.
•t
.
TimeOutVÆue
 = 
DEF_TIMEOUT
;

301 
p•
->
swb_i
.
•t
.
D©aIn
 = 
SCSI_IOCTL_DATA_UNSPECIFIED
;

302 
p•
->
swb_i
.
•t
.
Sí£InfoLígth
 = 
SCSI_MAX_SENSE_LEN
;

303 
p•
->
swb_i
.
•t
.
Sí£InfoOff£t
 =

304 
	`off£tof
(
SCSI_PASS_THROUGH_WITH_BUFFERS
, 
ucSí£Buf
);

305 
p•
->
swb_i
.
•t
.
TimeOutVÆue
 = 
DEF_TIMEOUT
;

308 
	}
}

311 
	$£t_scsi_±_cdb
(
sg_±_ba£
 * 
vp
, c⁄° * 
cdb
,

312 
cdb_Àn
)

314 
sg_±_wö32_scsi
 * 
p•
 = 
vp
->
im∂p
;

316 i‡(
•t_dúe˘
) {

317 i‡(
p•
->
swb_d
.
•t
.
CdbLígth
 > 0)

318 ++
p•
->
ö_îr
;

319 i‡(
cdb_Àn
 > ()(
p•
->
swb_d
.
•t
.
Cdb
)) {

320 ++
p•
->
ö_îr
;

323 
	`mem˝y
(
p•
->
swb_d
.
•t
.
Cdb
, 
cdb
, 
cdb_Àn
);

324 
p•
->
swb_d
.
•t
.
CdbLígth
 = 
cdb_Àn
;

326 i‡(
p•
->
swb_i
.
•t
.
CdbLígth
 > 0)

327 ++
p•
->
ö_îr
;

328 i‡(
cdb_Àn
 > ()(
p•
->
swb_i
.
•t
.
Cdb
)) {

329 ++
p•
->
ö_îr
;

332 
	`mem˝y
(
p•
->
swb_i
.
•t
.
Cdb
, 
cdb
, 
cdb_Àn
);

333 
p•
->
swb_i
.
•t
.
CdbLígth
 = 
cdb_Àn
;

335 
	}
}

338 
	$£t_scsi_±_£n£
(
sg_±_ba£
 * 
vp
, * 
£n£
,

339 
£n£_Àn
)

341 
sg_±_wö32_scsi
 * 
p•
 = 
vp
->
im∂p
;

343 i‡(
p•
->
£n£p
)

344 ++
p•
->
ö_îr
;

345 
	`mem£t
(
£n£
, 0, 
£n£_Àn
);

346 
p•
->
£n£p
 = 
£n£
;

347 
p•
->
£n£_Àn
 = sense_len;

348 
	}
}

352 
	$£t_scsi_±_d©a_ö
(
sg_±_ba£
 * 
vp
, * 
dx„Ω
,

353 
dx„r_Àn
)

355 
sg_±_wö32_scsi
 * 
p•
 = 
vp
->
im∂p
;

357 i‡(
p•
->
dx„Ω
)

358 ++
p•
->
ö_îr
;

359 i‡(
dx„r_Àn
 > 0) {

360 
p•
->
dx„Ω
 = dxferp;

361 
p•
->
dx„r_Àn
 = dxfer_len;

362 i‡(
•t_dúe˘
)

363 
p•
->
swb_d
.
•t
.
D©aIn
 = 
SCSI_IOCTL_DATA_IN
;

365 
p•
->
swb_i
.
•t
.
D©aIn
 = 
SCSI_IOCTL_DATA_IN
;

367 
	}
}

371 
	$£t_scsi_±_d©a_out
(
sg_±_ba£
 * 
vp
, c⁄° * 
dx„Ω
,

372 
dx„r_Àn
)

374 
sg_±_wö32_scsi
 * 
p•
 = 
vp
->
im∂p
;

376 i‡(
p•
->
dx„Ω
)

377 ++
p•
->
ö_îr
;

378 i‡(
dx„r_Àn
 > 0) {

379 
p•
->
dx„Ω
 = (*)dxferp;

380 
p•
->
dx„r_Àn
 = dxfer_len;

381 i‡(
•t_dúe˘
)

382 
p•
->
swb_d
.
•t
.
D©aIn
 = 
SCSI_IOCTL_DATA_OUT
;

384 
p•
->
swb_i
.
•t
.
D©aIn
 = 
SCSI_IOCTL_DATA_OUT
;

386 
	}
}

389 
£t_scsi_±_∑ckë_id
(
sg_±_ba£
 * 
vp
 
__©åibuã__
 ((
unu£d
)),

390 
∑ck_id
 
__©åibuã__
 ((
unu£d
)))

395 
£t_scsi_±_èg
(
sg_±_ba£
 * 
vp
, 
uöt64_t
 
èg
 
__©åibuã__
 ((
unu£d
)))

397 
sg_±_wö32_scsi
 * 
	gp•
 = 
vp
->
im∂p
;

399 ++
	gp•
->
	gö_îr
;

403 
£t_scsi_±_èsk_m™agemít
(
sg_±_ba£
 * 
vp
,

404 
tmf_code
 
__©åibuã__
 ((
unu£d
)))

406 
sg_±_wö32_scsi
 * 
	gp•
 = 
vp
->
im∂p
;

408 ++
	gp•
->
	gö_îr
;

412 
£t_scsi_±_èsk_©å
(
sg_±_ba£
 * 
vp
,

413 
©åib
 
__©åibuã__
 ((
unu£d
)),

414 
¥i‹ôy
 
__©åibuã__
 ((
unu£d
)))

416 
sg_±_wö32_scsi
 * 
	gp•
 = 
vp
->
im∂p
;

418 ++
	gp•
->
	gö_îr
;

422 
	$£t_scsi_±_Êags
(
sg_±_ba£
 * 
objp
, 
Êags
)

425 
objp
 = objp;

426 
Êags
 = flags;

427 
	}
}

433 
	$do_scsi_±_dúe˘
(
sg_±_ba£
 * 
vp
, 
devi˚_fd
, 
time_£cs
,

434 
vîbo£
)

436 
ödex
 = 
devi˚_fd
 - 
WIN32_FDOFFSET
;

437 
sg_±_wö32_scsi
 * 
p•
 = 
vp
->
im∂p
;

438 
sg_±_h™dÀ
 * 
shp
;

439 
BOOL
 
°©us
;

440 
ULONG
 
ªtu∫ed
;

442 i‡(
NULL
 =
sg_w¨nögs_°rm
)

443 
sg_w¨nögs_°rm
 = 
°dîr
;

444 
p•
->
os_îr
 = 0;

445 i‡(
p•
->
ö_îr
) {

446 i‡(
vîbo£
)

447 
	`Ârötf
(
sg_w¨nögs_°rm
, "Replicated or unused set_scsi_pt...\n");

448  
SCSI_PT_DO_BAD_PARAMS
;

450 i‡(0 =
p•
->
swb_d
.
•t
.
CdbLígth
) {

451 i‡(
vîbo£
)

452 
	`Ârötf
(
sg_w¨nögs_°rm
, "No command (cdb) given\n");

453  
SCSI_PT_DO_BAD_PARAMS
;

456 
ödex
 = 
devi˚_fd
 - 
WIN32_FDOFFSET
;

457 i‡((
ödex
 < 0Ë|| (ödex >
WIN32_FDOFFSET
)) {

458 i‡(
vîbo£
)

459 
	`Ârötf
(
sg_w¨nögs_°rm
, "Bad file descriptor\n");

460 
p•
->
os_îr
 = 
ENODEV
;

461  -
p•
->
os_îr
;

463 
shp
 = 
h™dÀ_¨r
 + 
ödex
;

464 i‡(0 =
shp
->
ö_u£
) {

465 i‡(
vîbo£
)

466 
	`Ârötf
(
sg_w¨nögs_°rm
, "File descriptor closed??\n");

467 
p•
->
os_îr
 = 
ENODEV
;

468  -
p•
->
os_îr
;

470 
p•
->
swb_d
.
•t
.
Lígth
 =  (
SCSI_PASS_THROUGH_DIRECT
);

471 
p•
->
swb_d
.
•t
.
P©hId
 = 
shp
->
bus
;

472 
p•
->
swb_d
.
•t
.
T¨gëId
 = 
shp
->
èrgë
;

473 
p•
->
swb_d
.
•t
.
Lun
 = 
shp
->
lun
;

474 
p•
->
swb_d
.
•t
.
TimeOutVÆue
 = 
time_£cs
;

475 
p•
->
swb_d
.
•t
.
D©aTøns„rLígth
 =Ö•->
dx„r_Àn
;

476 i‡(
vîbo£
 > 4) {

477 
	`Ârötf
(
°dîr
, " spt_direct,ádapter: %s Length=%d ScsiStatus=%d "

478 "P©hId=%d T¨gëId=%d Lun=%d\n", 
shp
->
ad≠ãr
,

479 ()
p•
->
swb_d
.
•t
.
Lígth
,

480 ()
p•
->
swb_d
.
•t
.
ScsiSètus
, (Ì•->swb_d.•t.
P©hId
,

481 ()
p•
->
swb_d
.
•t
.
T¨gëId
, (Ì•->swb_d.•t.
Lun
);

482 
	`Ârötf
(
°dîr
, " CdbLength=%d SenseInfoLength=%d DataIn=%d "

484 ()
p•
->
swb_d
.
•t
.
CdbLígth
,

485 ()
p•
->
swb_d
.
•t
.
Sí£InfoLígth
,

486 ()
p•
->
swb_d
.
•t
.
D©aIn
,

487 
p•
->
swb_d
.
•t
.
D©aTøns„rLígth
);

488 
	`Ârötf
(
°dîr
, " TimeOutValue=%lu SenseInfoOffset=%lu\n",

489 
p•
->
swb_d
.
•t
.
TimeOutVÆue
,Ö•->swb_d.•t.
Sí£InfoOff£t
);

491 
p•
->
swb_d
.
•t
.
D©aBuf„r
 =Ö•->
dx„Ω
;

492 
°©us
 = 
	`Devi˚IoC⁄åﬁ
(
shp
->
fh
, 
IOCTL_SCSI_PASS_THROUGH_DIRECT
,

493 &
p•
->
swb_d
,

494 (
p•
->
swb_d
),

495 &
p•
->
swb_d
,

496 (
p•
->
swb_d
),

497 &
ªtu∫ed
,

498 
NULL
);

499 i‡(! 
°©us
) {

500 
p•
->
å™•‹t_îr
 = 
	`GëLa°Eº‹
();

501 i‡(
vîbo£
)

502 
	`Ârötf
(
sg_w¨nögs_°rm
, "Windows DeviceIoControlÉrror=%d\n",

503 
p•
->
å™•‹t_îr
);

504 
p•
->
os_îr
 = 
EIO
;

508 
p•
->
scsi_°©us
 =Ö•->
swb_d
.
•t
.
ScsiSètus
;

509 i‡((
SAM_STAT_CHECK_CONDITION
 =
p•
->
scsi_°©us
) ||

510 (
SAM_STAT_COMMAND_TERMINATED
 =
p•
->
scsi_°©us
))

511 
	`mem˝y
(
p•
->
£n£p
,Ö•->
swb_d
.
ucSí£Buf
,Ö•->
£n£_Àn
);

513 
p•
->
£n£_Àn
 = 0;

514 
p•
->
£n£_ªsid
 = 0;

515 i‡((
p•
->
dx„r_Àn
 > 0Ë&& (p•->
swb_d
.
•t
.
D©aTøns„rLígth
 > 0))

516 
p•
->
ªsid
 =Ö•->
dx„r_Àn
 -Ö•->
swb_d
.
•t
.
D©aTøns„rLígth
;

518 
p•
->
ªsid
 = 0;

521 
	}
}

527 
	$do_scsi_±_ödúe˘
(
sg_±_ba£
 * 
vp
, 
devi˚_fd
, 
time_£cs
,

528 
vîbo£
)

530 
ödex
 = 
devi˚_fd
 - 
WIN32_FDOFFSET
;

531 
sg_±_wö32_scsi
 * 
p•
 = 
vp
->
im∂p
;

532 
sg_±_h™dÀ
 * 
shp
;

533 
BOOL
 
°©us
;

534 
ULONG
 
ªtu∫ed
;

536 i‡(
NULL
 =
sg_w¨nögs_°rm
)

537 
sg_w¨nögs_°rm
 = 
°dîr
;

538 
p•
->
os_îr
 = 0;

539 i‡(
p•
->
ö_îr
) {

540 i‡(
vîbo£
)

541 
	`Ârötf
(
sg_w¨nögs_°rm
, "Replicated or unused "

543  
SCSI_PT_DO_BAD_PARAMS
;

545 i‡(0 =
p•
->
swb_i
.
•t
.
CdbLígth
) {

546 i‡(
vîbo£
)

547 
	`Ârötf
(
sg_w¨nögs_°rm
, "No command (cdb) given\n");

548  
SCSI_PT_DO_BAD_PARAMS
;

551 
ödex
 = 
devi˚_fd
 - 
WIN32_FDOFFSET
;

552 i‡((
ödex
 < 0Ë|| (ödex >
WIN32_FDOFFSET
)) {

553 i‡(
vîbo£
)

554 
	`Ârötf
(
sg_w¨nögs_°rm
, "Bad file descriptor\n");

555 
p•
->
os_îr
 = 
ENODEV
;

556  -
p•
->
os_îr
;

558 
shp
 = 
h™dÀ_¨r
 + 
ödex
;

559 i‡(0 =
shp
->
ö_u£
) {

560 i‡(
vîbo£
)

561 
	`Ârötf
(
sg_w¨nögs_°rm
, "File descriptor closed??\n");

562 
p•
->
os_îr
 = 
ENODEV
;

563  -
p•
->
os_îr
;

565 i‡(
p•
->
dx„r_Àn
 > ()’•->
swb_i
.
ucD©aBuf
)) {

566 
exåa
 = 
p•
->
dx„r_Àn
 - ()’•->
swb_i
.
ucD©aBuf
);

567 
sg_±_wö32_scsi
 * 
ï•
;

569 i‡(
vîbo£
 > 4)

570 
	`Ârötf
(
sg_w¨nögs_°rm
, "spt_indirect: dxfer_len (%d)Åoo "

572 "íœrgög\n", 
p•
->
dx„r_Àn
,

573 (
p•
->
swb_i
.
ucD©aBuf
));

574 
ï•
 = (
sg_±_wö32_scsi
 *)

575 
	`ˇŒoc
((
sg_±_wö32_scsi
Ë+ 
exåa
, 1);

576 i‡(
NULL
 =
ï•
) {

577 
	`Ârötf
(
sg_w¨nögs_°rm
, "do_scsi_pt: failedÅoÉnlarge data "

578 "buf„∏tÿ%d byãs\n", 
p•
->
dx„r_Àn
);

579 
p•
->
os_îr
 = 
ENOMEM
;

580  -
p•
->
os_îr
;

582 
	`mem˝y
(
ï•
, 
p•
, (
sg_±_wö32_scsi
));

583 
	`‰ì
(
p•
);

584 
vp
->
im∂p
 = 
ï•
;

585 
p•
 = 
ï•
;

587 
p•
->
swb_i
.
•t
.
Lígth
 =  (
SCSI_PASS_THROUGH
);

588 
p•
->
swb_i
.
•t
.
D©aBuf„rOff£t
 =

589 
	`off£tof
(
SCSI_PASS_THROUGH_WITH_BUFFERS
, 
ucD©aBuf
);

590 
p•
->
swb_i
.
•t
.
P©hId
 = 
shp
->
bus
;

591 
p•
->
swb_i
.
•t
.
T¨gëId
 = 
shp
->
èrgë
;

592 
p•
->
swb_i
.
•t
.
Lun
 = 
shp
->
lun
;

593 
p•
->
swb_i
.
•t
.
TimeOutVÆue
 = 
time_£cs
;

594 
p•
->
swb_i
.
•t
.
D©aTøns„rLígth
 =Ö•->
dx„r_Àn
;

595 i‡(
vîbo£
 > 4) {

596 
	`Ârötf
(
°dîr
, " spt_indirect,ádapter: %s Length=%d ScsiStatus=%d "

597 "P©hId=%d T¨gëId=%d Lun=%d\n", 
shp
->
ad≠ãr
,

598 ()
p•
->
swb_i
.
•t
.
Lígth
,

599 ()
p•
->
swb_i
.
•t
.
ScsiSètus
, (Ì•->swb_i.•t.
P©hId
,

600 ()
p•
->
swb_i
.
•t
.
T¨gëId
, (Ì•->swb_i.•t.
Lun
);

601 
	`Ârötf
(
°dîr
, " CdbLength=%d SenseInfoLength=%d DataIn=%d "

603 ()
p•
->
swb_i
.
•t
.
CdbLígth
,

604 ()
p•
->
swb_i
.
•t
.
Sí£InfoLígth
,

605 ()
p•
->
swb_i
.
•t
.
D©aIn
,

606 
p•
->
swb_i
.
•t
.
D©aTøns„rLígth
);

607 
	`Ârötf
(
°dîr
, " TimeOutValue=%lu DataBufferOffset=%lu "

608 "Sí£InfoOff£t=%lu\n", 
p•
->
swb_i
.
•t
.
TimeOutVÆue
,

609 
p•
->
swb_i
.
•t
.
D©aBuf„rOff£t
,

610 
p•
->
swb_i
.
•t
.
Sí£InfoOff£t
);

612 i‡((
p•
->
dx„r_Àn
 > 0) &&

613 (
SCSI_IOCTL_DATA_OUT
 =
p•
->
swb_i
.
•t
.
D©aIn
))

614 
	`mem˝y
(
p•
->
swb_i
.
ucD©aBuf
,Ö•->
dx„Ω
,Ö•->
dx„r_Àn
);

615 
°©us
 = 
	`Devi˚IoC⁄åﬁ
(
shp
->
fh
, 
IOCTL_SCSI_PASS_THROUGH
,

616 &
p•
->
swb_i
,

617 (
p•
->
swb_i
),

618 &
p•
->
swb_i
,

619 (
p•
->
swb_i
),

620 &
ªtu∫ed
,

621 
NULL
);

622 i‡(! 
°©us
) {

623 
p•
->
å™•‹t_îr
 = 
	`GëLa°Eº‹
();

624 i‡(
vîbo£
)

625 
	`Ârötf
(
sg_w¨nögs_°rm
, "Windows DeviceIoControlÉrror=%d\n",

626 
p•
->
å™•‹t_îr
);

627 
p•
->
os_îr
 = 
EIO
;

630 i‡((
p•
->
dx„r_Àn
 > 0Ë&& (
SCSI_IOCTL_DATA_IN
 =p•->
swb_i
.
•t
.
D©aIn
))

631 
	`mem˝y
(
p•
->
dx„Ω
,Ö•->
swb_i
.
ucD©aBuf
,Ö•->
dx„r_Àn
);

633 
p•
->
scsi_°©us
 =Ö•->
swb_i
.
•t
.
ScsiSètus
;

634 i‡((
SAM_STAT_CHECK_CONDITION
 =
p•
->
scsi_°©us
) ||

635 (
SAM_STAT_COMMAND_TERMINATED
 =
p•
->
scsi_°©us
))

636 
	`mem˝y
(
p•
->
£n£p
,Ö•->
swb_i
.
ucSí£Buf
,Ö•->
£n£_Àn
);

638 
p•
->
£n£_Àn
 = 0;

639 
p•
->
£n£_ªsid
 = 0;

640 i‡((
p•
->
dx„r_Àn
 > 0Ë&& (p•->
swb_i
.
•t
.
D©aTøns„rLígth
 > 0))

641 
p•
->
ªsid
 =Ö•->
dx„r_Àn
 -Ö•->
swb_i
.
•t
.
D©aTøns„rLígth
;

643 
p•
->
ªsid
 = 0;

646 
	}
}

652 
	$do_scsi_±
(
sg_±_ba£
 * 
vp
, 
devi˚_fd
, 
time_£cs
, 
vîbo£
)

654 i‡(
•t_dúe˘
)

655  
	`do_scsi_±_dúe˘
(
vp
, 
devi˚_fd
, 
time_£cs
, 
vîbo£
);

657  
	`do_scsi_±_ödúe˘
(
vp
, 
devi˚_fd
, 
time_£cs
, 
vîbo£
);

658 
	}
}

661 
	$gë_scsi_±_ªsu…_ˇãg‹y
(c⁄° 
sg_±_ba£
 * 
vp
)

663 c⁄° 
sg_±_wö32_scsi
 * 
p•
 = 
vp
->
im∂p
;

665 i‡(
p•
->
å™•‹t_îr
)

666  
SCSI_PT_RESULT_TRANSPORT_ERR
;

667 i‡(
p•
->
os_îr
)

668  
SCSI_PT_RESULT_OS_ERR
;

669 i‡((
SAM_STAT_CHECK_CONDITION
 =
p•
->
scsi_°©us
) ||

670 (
SAM_STAT_COMMAND_TERMINATED
 =
p•
->
scsi_°©us
))

671  
SCSI_PT_RESULT_SENSE
;

672 i‡(
p•
->
scsi_°©us
)

673  
SCSI_PT_RESULT_STATUS
;

675  
SCSI_PT_RESULT_GOOD
;

676 
	}
}

679 
	$gë_scsi_±_ªsid
(c⁄° 
sg_±_ba£
 * 
vp
)

681 c⁄° 
sg_±_wö32_scsi
 * 
p•
 = 
vp
->
im∂p
;

683  
p•
->
ªsid
;

684 
	}
}

687 
	$gë_scsi_±_°©us_ª•⁄£
(c⁄° 
sg_±_ba£
 * 
vp
)

689 c⁄° 
sg_±_wö32_scsi
 * 
p•
 = 
vp
->
im∂p
;

691  
p•
->
scsi_°©us
;

692 
	}
}

695 
	$gë_scsi_±_£n£_Àn
(c⁄° 
sg_±_ba£
 * 
vp
)

697 c⁄° 
sg_±_wö32_scsi
 * 
p•
 = 
vp
->
im∂p
;

698 
Àn
;

700 
Àn
 = 
p•
->
£n£_Àn
 -Ö•->
£n£_ªsid
;

701  (
Àn
 > 0) ?Üen : 0;

702 
	}
}

705 
gë_scsi_±_duøti⁄_ms
(c⁄° 
sg_±_ba£
 * 
vp
 
__©åibuã__
 ((
unu£d
)))

713 
	$gë_scsi_±_å™•‹t_îr
(c⁄° 
sg_±_ba£
 * 
vp
)

715 c⁄° 
sg_±_wö32_scsi
 * 
p•
 = 
vp
->
im∂p
;

717  
p•
->
å™•‹t_îr
;

718 
	}
}

721 
	$gë_scsi_±_os_îr
(c⁄° 
sg_±_ba£
 * 
vp
)

723 c⁄° 
sg_±_wö32_scsi
 * 
p•
 = 
vp
->
im∂p
;

725  
p•
->
os_îr
;

726 
	}
}

730 
	$gë_scsi_±_å™•‹t_îr_°r
(c⁄° 
sg_±_ba£
 * 
vp
, 
max_b_Àn
,

731 * 
b
)

733 
sg_±_wö32_scsi
 * 
p•
 = (sg_±_wö32_scsò*)
vp
->
im∂p
;

734 
LPVOID
 
ÕMsgBuf
;

735 
k
, 
num
, 
ch
;

737 i‡(
max_b_Àn
 < 2) {

738 i‡(1 =
max_b_Àn
)

739 
b
[0] = '\0';

740  
b
;

742 
	`mem£t
(
b
, 0, 
max_b_Àn
);

743 
	`F‹m©Mesßge
(

744 
FORMAT_MESSAGE_ALLOCATE_BUFFER
 |

745 
FORMAT_MESSAGE_FROM_SYSTEM
,

746 
NULL
,

747 
p•
->
å™•‹t_îr
,

748 
	`MAKELANGID
(
LANG_NEUTRAL
, 
SUBLANG_DEFAULT
),

749 (
LPTSTR
Ë&
ÕMsgBuf
,

750 0, 
NULL
 );

751 
num
 = 
	`l°æí
((
LPCTSTR
)
ÕMsgBuf
);

752 i‡(
num
 < 1)

753  
b
;

754 
num
 = (num < 
max_b_Àn
) ?Çum : (max_b_len - 1);

755 
k
 = 0; k < 
num
; ++k) {

756 
ch
 = *((
LPCTSTR
)
ÕMsgBuf
 + 
k
);

757 i‡((
ch
 >= 0x0) && (ch < 0x7f))

758 
b
[
k
] = 
ch
 & 0x7f;

760 
b
[
k
] = '?';

762  
b
;

763 
	}
}

766 
	$gë_scsi_±_os_îr_°r
(c⁄° 
sg_±_ba£
 * 
vp
, 
max_b_Àn
, * 
b
)

768 c⁄° 
sg_±_wö32_scsi
 * 
p•
 = 
vp
->
im∂p
;

769 c⁄° * 
˝
;

771 
˝
 = 
	`ß„_°ªº‹
(
p•
->
os_îr
);

772 
	`°∫˝y
(
b
, 
˝
, 
max_b_Àn
);

773 i‡(()
	`°æí
(
˝
Ë>
max_b_Àn
)

774 
b
[
max_b_Àn
 - 1] = '\0';

775  
b
;

776 
	}
}

	@src/sg_compare_and_write.c

1 
	#_XOPEN_SOURCE
 500

	)

2 #i‚de‡
_GNU_SOURCE


3 
	#_GNU_SOURCE


	)

6 
	~<uni°d.h
>

7 
	~<f˙é.h
>

8 
	~<°dlib.h
>

9 
	~<°rög.h
>

10 
	#__STDC_FORMAT_MACROS
 1

	)

11 
	~<öây≥s.h
>

12 
	~<gë›t.h
>

14 #ifde‡
HAVE_CONFIG_H


15 
	~"c⁄fig.h
"

17 
	~"sg_lib.h
"

18 
	~"sg_cmds_basic.h
"

19 
	~"sg_±.h
"

51 c⁄° * 
	gvîsi⁄_°r
 = "1.04 20130516";

53 
	#DEF_BLOCK_SIZE
 512

	)

54 
	#DEF_NUM_BLOCKS
 (1)

	)

55 
	#DEF_BLOCKS_PER_TRANSFER
 8

	)

56 
	#DEF_TIMEOUT_SECS
 60

	)

58 
	#COMPARE_AND_WRITE_OPCODE
 (0x89)

	)

59 
	#COMPARE_AND_WRITE_CDB_SIZE
 (16)

	)

61 
	#SENSE_BUFF_LEN
 64

	)

63 
	#ME
 "sg_com∑ª_™d_wrôe: "

	)

65 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

66 {"dpo", 
no_¨gumít
, 0, 'd'},

67 {"fua", 
no_¨gumít
, 0, 'f'},

68 {"fua_nv", 
no_¨gumít
, 0, 'F'},

69 {"group", 
ªquúed_¨gumít
, 0, 'g'},

70 {"hñp", 
no_¨gumít
, 0, 'h'},

71 {"ö", 
ªquúed_¨gumít
, 0, 'i'},

72 {"lba", 
ªquúed_¨gumít
, 0, 'l'},

73 {"num", 
ªquúed_¨gumít
, 0, 'n'},

74 {"timeout", 
ªquúed_¨gumít
, 0, 't'},

75 {"vîbo£", 
no_¨gumít
, 0, 'v'},

76 {"vîsi⁄", 
no_¨gumít
, 0, 'V'},

77 {"wΩrŸe˘", 
ªquúed_¨gumít
, 0, 'w'},

78 {"x„æí", 
ªquúed_¨gumít
, 0, 'x'},

82 
	sˇw_Êags
 {

83 
	mdpo
;

84 
	mfua
;

85 
	mfua_nv
;

86 
	mgroup
;

87 
	mwΩrŸe˘
;

90 
	s›ts_t
 {

91 
	mifûíame
[256];

92 
uöt64_t
 
	mlba
;

93 
	mnumblocks
;

94 
	mvîbo£
;

95 
	mtimeout
;

96 
	mx„r_Àn
;

97 c⁄° * 
	mdevi˚_«me
;

98 
ˇw_Êags
 
	mÊags
;

99 } 
	g›ts
;

102 
	$ußge
()

104 
	`Ârötf
(
°dîr
, "Usage: "

142 
	}
}

145 
	$∑r£_¨gs
(
¨gc
, * 
¨gv
[])

147 
c
;

148 
lba_giví
 = 0;

149 
if_giví
 = 0;

150 
öt64_t
 
Œ
;

152 
	`mem£t
(&
›ts
, 0, (opts));

153 
›ts
.
numblocks
 = 
DEF_NUM_BLOCKS
;

155 
›ts
.
x„r_Àn
 = 2*
DEF_NUM_BLOCKS
*
DEF_BLOCK_SIZE
;

156 
›ts
.
timeout
 = 
DEF_TIMEOUT_SECS
;

157 
›ts
.
devi˚_«me
 = 
NULL
;

159 
›ti⁄_ödex
 = 0;

161 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "dfFg:hi:l:n:t:vVw:x:",

162 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

163 i‡(
c
 == -1)

166 
c
) {

168 
›ts
.
Êags
.
dpo
 = 1;

171 
›ts
.
Êags
.
fua_nv
 = 1;

174 
›ts
.
Êags
.
fua
 = 1;

177 
›ts
.
Êags
.
group
 = 
	`sg_gë_num
(
›èrg
);

178 i‡((
›ts
.
Êags
.
group
 < 0) ||

179 (
›ts
.
Êags
.
group
 > 31)) {

180 
	`Ârötf
(
°dîr
, "argumentÅo '--group' "

182 
out_îr_no_ußge
;

187 
	`ußge
();

188 
	`exô
(0);

190 
	`°∫˝y
(
›ts
.
ifûíame
, 
›èrg
,

191 (
›ts
.
ifûíame
));

192 
if_giví
 = 1;

195 
Œ
 = 
	`sg_gë_Œnum
(
›èrg
);

196 i‡(-1 =
Œ
) {

197 
	`Ârötf
(
°dîr
, "badárgumentÅo '--lba'\n");

198 
out_îr_no_ußge
;

200 
›ts
.
lba
 = (
uöt64_t
)
Œ
;

201 
lba_giví
 = 1;

204 
›ts
.
numblocks
 = 
	`sg_gë_num
(
›èrg
);

205 i‡(
›ts
.
numblocks
 < 0) {

206 
	`Ârötf
(
°dîr
, "badárgumentÅo '--num'\n");

207 
out_îr_no_ußge
;

211 
›ts
.
timeout
 = 
	`sg_gë_num
(
›èrg
);

212 i‡(
›ts
.
timeout
 < 0) {

213 
	`Ârötf
(
°dîr
, "badárgumentÅo "

215 
out_îr_no_ußge
;

219 ++
›ts
.
vîbo£
;

222 
	`Ârötf
(
°dîr
, 
ME
 "vîsi⁄: %s\n", 
vîsi⁄_°r
);

223 
	`exô
(0);

225 
›ts
.
Êags
.
wΩrŸe˘
 = 
	`sg_gë_num
(
›èrg
);

226 i‡(
›ts
.
Êags
.
wΩrŸe˘
 >> 3) {

227 
	`Ârötf
(
°dîr
, "badárgumentÅo "

229 
out_îr_no_ußge
;

233 
›ts
.
x„r_Àn
 = 
	`sg_gë_num
(
›èrg
);

234 i‡(
›ts
.
x„r_Àn
 < 0) {

235 
	`Ârötf
(
°dîr
, "badárgumentÅo "

237 
out_îr_no_ußge
;

241 
	`Ârötf
(
°dîr
, "unrecognised option code 0x%x ??\n",

242 
c
);

243 
out_îr
;

246 i‡(
›töd
 < 
¨gc
) {

247 i‡(
NULL
 =
›ts
.
devi˚_«me
) {

248 
›ts
.
devi˚_«me
 = 
¨gv
[
›töd
];

249 ++
›töd
;

251 i‡(
›töd
 < 
¨gc
) {

252 ; 
›töd
 < 
¨gc
; ++optind)

253 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: "

254 "%s\n", 
¨gv
[
›töd
]);

255 
out_îr
;

258 i‡(
NULL
 =
›ts
.
devi˚_«me
) {

259 
	`Ârötf
(
°dîr
, "missing deviceÇame!\n");

260 
out_îr
;

262 i‡(!
if_giví
) {

263 
	`Ârötf
(
°dîr
, "missing input file\n");

264 
out_îr
;

266 i‡(!
lba_giví
) {

267 
	`Ârötf
(
°dîr
, "missingÜba\n");

268 
out_îr
;

272 
out_îr
:

273 
	`ußge
();

275 
out_îr_no_ußge
:

276 
	`exô
(1);

277 
	}
}

279 
	#FLAG_FUA
 (0x8)

	)

280 
	#FLAG_FUA_NV
 (0x2)

	)

281 
	#FLAG_DPO
 (0x10)

	)

282 
	#WRPROTECT_MASK
 (0x7)

	)

283 
	#WRPROTECT_SHIFT
 (5)

	)

286 
	$sg_buûd_scsi_cdb
(* 
cdbp
, 
blocks
,

287 
öt64_t
 
°¨t_block
, 
ˇw_Êags
 
Êags
)

289 
	`mem£t
(
cdbp
, 0, 
COMPARE_AND_WRITE_CDB_SIZE
);

290 
cdbp
[0] = 
COMPARE_AND_WRITE_OPCODE
;

291 
cdbp
[1] = (
Êags
.
wΩrŸe˘
 && 
WRPROTECT_MASK
Ë<< 
WRPROTECT_SHIFT
;

292 i‡(
Êags
.
dpo
)

293 
cdbp
[1] |
FLAG_DPO
;

294 i‡(
Êags
.
fua
)

295 
cdbp
[1] |
FLAG_FUA
;

296 i‡(
Êags
.
fua_nv
)

297 
cdbp
[1] |
FLAG_FUA_NV
;

298 
cdbp
[2] = ()((
°¨t_block
 >> 56) & 0xff);

299 
cdbp
[3] = ()((
°¨t_block
 >> 48) & 0xff);

300 
cdbp
[4] = ()((
°¨t_block
 >> 40) & 0xff);

301 
cdbp
[5] = ()((
°¨t_block
 >> 32) & 0xff);

302 
cdbp
[6] = ()((
°¨t_block
 >> 24) & 0xff);

303 
cdbp
[7] = ()((
°¨t_block
 >> 16) & 0xff);

304 
cdbp
[8] = ()((
°¨t_block
 >> 8) & 0xff);

305 
cdbp
[9] = ()(
°¨t_block
 & 0xff);

307 
cdbp
[13] = ()(
blocks
 & 0xff);

308 
cdbp
[14] = ()(
Êags
.
group
 & 0x1f);

310 
	}
}

313 
	$sg_com∑ª_™d_wrôe
(
sg_fd
, * 
buff
, 
blocks
,

314 
öt64_t
 
lba
, 
x„r_Àn
, 
ˇw_Êags
 
Êags
,

315 
vîbo£
)

317 
k
, 
£n£_ˇt
;

318 
ˇwCmd
[
COMPARE_AND_WRITE_CDB_SIZE
];

319 
£n£Buff
[
SENSE_BUFF_LEN
];

320 
sg_±_ba£
 * 
±vp
;

321 
ªs
, 
ªt
;

323 i‡(
	`sg_buûd_scsi_cdb
(
ˇwCmd
, 
blocks
, 
lba
, 
Êags
)) {

324 
	`Ârötf
(
°dîr
, 
ME
 "bad cdb buûd,Üba=0x%"
PRIx64
", "

325 "blocks=%d\n", 
lba
, 
blocks
);

328 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

329 i‡(
NULL
 =
±vp
) {

330 
	`Ârötf
(
sg_w¨nögs_°rm
, "CouldÇot construct scsit_pt_obj, "

335 
	`£t_scsi_±_cdb
(
±vp
, 
ˇwCmd
, 
COMPARE_AND_WRITE_CDB_SIZE
);

336 
	`£t_scsi_±_£n£
(
±vp
, 
£n£Buff
, (senseBuff));

337 
	`£t_scsi_±_d©a_out
(
±vp
, 
buff
, 
x„r_Àn
);

338 i‡(
vîbo£
 > 1) {

339 
	`Ârötf
(
°dîr
, " Compareánd write cdb: ");

340 
k
 = 0; k < 
COMPARE_AND_WRITE_CDB_SIZE
; ++k)

341 
	`Ârötf
(
°dîr
, "%02x ", 
ˇwCmd
[
k
]);

342 
	`Ârötf
(
°dîr
, "\n");

344 i‡((
vîbo£
 > 2Ë&& (
x„r_Àn
 > 0)) {

345 
	`Ârötf
(
°dîr
, " Data-out buffer contents:\n");

346 
	`dSåHex
((c⁄° *)
buff
, 
x„r_Àn
, 1);

348 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_TIMEOUT_SECS
, 
vîbo£
);

349 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "COMPARE AND WRITE", 
ªs
, 0,

350 
£n£Buff
, 1 , 
vîbo£
,

351 &
£n£_ˇt
);

352 i‡(-1 =
ªt
)

354 i‡(-2 =
ªt
) {

355 
£n£_ˇt
) {

356 
SG_LIB_CAT_NOT_READY
:

357 
SG_LIB_CAT_INVALID_OP
:

358 
SG_LIB_CAT_UNIT_ATTENTION
:

359 
SG_LIB_CAT_ILLEGAL_REQ
:

360 
SG_LIB_CAT_ABORTED_COMMAND
:

361 
ªt
 = 
£n£_ˇt
;

363 
SG_LIB_CAT_RECOVERED
:

364 
SG_LIB_CAT_NO_SENSE
:

365 
ªt
 = 0;

367 
SG_LIB_CAT_MEDIUM_HARD
:

369 
vÆid
, 
¶í
;

370 
uöt64_t
 
uŒ
 = 0;

372 
¶í
 = 
	`gë_scsi_±_£n£_Àn
(
±vp
);

373 
vÆid
 = 
	`sg_gë_£n£_öfo_Êd
(
£n£Buff
, 
¶í
,

374 &
uŒ
);

375 i‡(
vÆid
)

376 
	`Ârötf
(
°dîr
, "Medium or hardware "

378 
PRIu64
" [0x%"
PRIx64
"]\n", 
uŒ
,

379 
uŒ
);

381 
ªt
 = 
£n£_ˇt
;

384 
ªt
 = -1;

388 
ªt
 = 0;

390 
	`de°ru˘_scsi_±_obj
(
±vp
);

391  
ªt
;

392 
	}
}

396 
	$›í_if
(c⁄° * 
öf
)

398 
fd
 = 
	`›í
(
öf
, 
O_RDONLY
);

399 i‡(
fd
 < 0) {

400 
	`Ârötf
(
°dîr
, 
ME
 "›íÉº‹: %s: %s\n", 
öf
,

401 
	`ß„_°ªº‹
(-
fd
));

402  -1*
SG_LIB_FILE_ERROR
;

404  
fd
;

405 
	}
}

408 
	$›í_of
(c⁄° * 
outf
, 
vîbo£
)

410 
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
outf
, 0 , 
vîbo£
);

411 i‡(
sg_fd
 < 0) {

412 
	`Ârötf
(
°dîr
, 
ME
 "›íÉº‹: %s: %s\n", 
outf
,

413 
	`ß„_°ªº‹
(-
sg_fd
));

414  -1*
SG_LIB_FILE_ERROR
;

417  
sg_fd
;

418 
	}
}

420 
	#STR_SZ
 1024

	)

421 
	#INF_SZ
 512

	)

424 
	$maö
(
¨gc
, * 
¨gv
[])

426 
ªs
;

427 
öfd
 = 0;

428 
outfd
 = 0;

429 * 
wrkBuff
 = 
NULL
;

431 
ªs
 = 
	`∑r£_¨gs
(
¨gc
, 
¨gv
);

432 i‡(
ªs
 != 0) {

433 
	`Ârötf
(
°dîr
, "FailedÖarsingárgs\n");

434 
out
;

437 i‡(
›ts
.
vîbo£
)

438 
	`Ârötf
(
°dîr
, "Running COMPARE AND WRITE command withÅhe "

440 
PRIx64
 "Çum_blocks=%d xfer_len=%dÅimeout=%d\n",

441 
›ts
.
ifûíame
, o±s.
devi˚_«me
, o±s.
lba
,

442 
›ts
.
numblocks
, o±s.
x„r_Àn
, o±s.
timeout
);

444 
öfd
 = 
	`›í_if
(
›ts
.
ifûíame
);

445 i‡(
öfd
 <=0) {

446 
ªs
 = -1*
öfd
;

447 
out
;

450 
outfd
 = 
	`›í_of
(
›ts
.
devi˚_«me
, o±s.
vîbo£
);

451 i‡(
outfd
 <=0) {

452 
ªs
 = -1*
outfd
;

453 
out
;

456 
wrkBuff
 = (*)
	`mÆloc
(
›ts
.
x„r_Àn
);

457 i‡(0 =
wrkBuff
) {

458 
	`Ârötf
(
°dîr
, "NotÉnough user memory\n");

459 
ªs
 = 
SG_LIB_CAT_OTHER
;

460 
out
;

463 
ªs
 = 
	`ªad
(
öfd
, 
wrkBuff
, 
›ts
.
x„r_Àn
);

464 i‡(
ªs
 < 0) {

465 
	`Ârötf
(
°dîr
, "CouldÇŸÑód from %s", 
›ts
.
ifûíame
);

466 
out
;

467 } i‡(
ªs
 < 
›ts
.
x„r_Àn
) {

468 
	`Ârötf
(
°dîr
, "Read only %d bytes (expected %d) from %s\n",

469 
ªs
, 
›ts
.
x„r_Àn
, o±s.
ifûíame
);

470 
out
;

472 
ªs
 = 
	`sg_com∑ª_™d_wrôe
(
outfd
, 
wrkBuff
, 
›ts
.
numblocks
, o±s.
lba
,

473 
›ts
.
x„r_Àn
, o±s.
Êags
, o±s.
vîbo£
);

475 
out
:

476 i‡(0 !
ªs
) {

477 
ªs
) {

478 
SG_LIB_CAT_MEDIUM_HARD
:

479 
	`Ârötf
(
°dîr
, 
ME
 "SCSI COMPARE AND WRITE "

482 
SG_LIB_CAT_NOT_READY
:

483 
	`Ârötf
(
°dîr
, 
ME
 "deviceÇot compare_and_writey\n");

485 
SG_LIB_CAT_UNIT_ATTENTION
:

486 
	`Ârötf
(
°dîr
, 
ME
 "SCSI COMPARE AND WRITE unit "

489 
SG_LIB_CAT_ABORTED_COMMAND
:

490 
	`Ârötf
(
°dîr
, 
ME
 "SCSI READáborted command\n");

493 
ªs
 = 
SG_LIB_CAT_OTHER
;

494 
	`Ârötf
(
°dîr
, 
ME
 "SCSI COMPARE AND WRITE failed\n");

499 i‡(
wrkBuff
)

500 
	`‰ì
(
wrkBuff
);

501 i‡(
öfd
 > 0)

502 
	`˛o£
(
öfd
);

503 i‡(
outfd
 > 0)

504 
	`˛o£
(
outfd
);

505  
ªs
;

506 
	}
}

	@src/sg_copy_results.c

7 
	~<uni°d.h
>

8 
	~<f˙é.h
>

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

12 
	~<î∫o.h
>

13 
	~<gë›t.h
>

14 
	#__STDC_FORMAT_MACROS
 1

	)

15 
	~<öây≥s.h
>

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

20 
	~"sg_lib.h
"

21 
	~"sg_cmds_basic.h
"

22 
	~"sg_cmds_exåa.h
"

37 c⁄° * 
	gvîsi⁄_°r
 = "1.1 20130507";

40 
	#MAX_XFER_LEN
 10000

	)

44 
	#ME
 "sg_c›y_ªsu…s: "

	)

46 
	#EBUFF_SZ
 256

	)

48 
	sdes¸ùt‹_ty≥
 {

49 
	mcode
;

50 
	mdesc
[124];

53 
des¸ùt‹_ty≥
 
	gèrgë_des¸ùt‹_codes
[] = {

69 
des¸ùt‹_ty≥
 
	g£gmít_des¸ùt‹_codes
 [] = {

102 
	$scsi_Áûed_£gmít_dëaûs
(*
rcBuff
, 
rcBuffLí
)

104 
Àn
;

105 
£n£Buff
[1024];

106 
£n£Lí
;

108 i‡(
rcBuffLí
 < 4) {

109 
	`Ârötf
(
°dîr
, " <<notÉnough dataÅoÖroceddÑeport>>\n");

112 
Àn
 = (
rcBuff
[0] << 24) | (rcBuff[1] << 16) | (rcBuff[2] << 8) |

113 
rcBuff
[3];

114 i‡(
Àn
 + 3 > 
rcBuffLí
) {

115 
	`Ârötf
(
°dîr
, " <<reportÅooÜong for internal buffer,"

118 i‡(
Àn
 < 52) {

119 
	`Ârötf
(
°dîr
, " <<no segment details,Ñesponse dataÜength %d\n",

120 
Àn
);

123 
	`¥ötf
("Receive copyÑesults (failed segment details):\n");

124 
	`¥ötf
(" Exãnded c›y comm™d sètus: %d\n", 
rcBuff
[56]);

125 
£n£Lí
 = (
rcBuff
[58] << 8) |ÑcBuff[59];

126 
	`sg_gë_£n£_°r
(" ", &
rcBuff
[60], 
£n£Lí
, 0, 1024, 
£n£Buff
);

127 
	`¥ötf
("%s", 
£n£Buff
);

128 
	}
}

131 
	$scsi_c›y_°©us
(*
rcBuff
, 
rcBuffLí
)

133 
Àn
;

135 i‡(
rcBuffLí
 < 4) {

136 
	`Ârötf
(
°dîr
, " <<notÉnough dataÅoÖroceddÑeport>>\n");

139 
Àn
 = (
rcBuff
[0] << 24) | (rcBuff[1] << 16) | (rcBuff[2] << 8) |

140 
rcBuff
[3];

141 i‡(
Àn
 > 
rcBuffLí
) {

142 
	`Ârötf
(
°dîr
, " <<reportÅooÜong for internal buffer,"

145 
	`¥ötf
("Receive copyÑesults (copy status):\n");

146 
	`¥ötf
(" Hñd d©®disˇrded: %s\n", 
rcBuff
[4] & 0x80 ? "Yes":"No");

147 
	`¥ötf
(" Copy manager status: ");

148 
rcBuff
[4] & 0x7f) {

150 
	`¥ötf
("Operation inÖrogress\n");

153 
	`¥ötf
("Operation completed withoutÉrrors\n");

156 
	`¥ötf
("Operation completed withÉrrors\n");

159 
	`¥ötf
("Unknown/Reserved\n");

162 
	`¥ötf
(" Segmít†¥o˚s£d: %u\n", (
rcBuff
[5] << 8) |ÑcBuff[6]);

163 
	`¥ötf
(" Tøns„∏cou¡ unôs: %u\n", 
rcBuff
[7]);

164 
	`¥ötf
(" Transfer count: %u\n",

165 
rcBuff
[8] << 24 |ÑcBuff[9] << 16 |ÑcBuff[10] << 8 |ÑcBuff[11]);

166 
	}
}

169 
	$scsi_›î©ög_∑ømëîs
(*
rcBuff
, 
rcBuffLí
)

171 
Àn
, 
n
;

173 
Àn
 = (
rcBuff
[0] << 24) | (rcBuff[1] << 16) | (rcBuff[2] << 8) |

174 
rcBuff
[3];

175 i‡(
Àn
 > 
rcBuffLí
) {

176 
	`Ârötf
(
°dîr
, " <<reportÅooÜong for internal buffer,"

179 
	`¥ötf
("Receive copyÑesults (report operatingÖarameters):\n");

180 
	`¥ötf
(" SupportsÇoÜist identifier: %s\n",

181 
rcBuff
[4] & 1 ? "yes" : "no");

182 
n
 = (
rcBuff
[8] << 8) |ÑcBuff[9];

183 
	`¥ötf
(" MaximumÅ¨gë des¸ùt‹ cou¡: %u\n", 
n
);

184 
n
 = (
rcBuff
[10] << 8) |ÑcBuff[11];

185 
	`¥ötf
(" Maximum segmíàdes¸ùt‹ cou¡: %u\n", 
n
);

186 
n
 = (
rcBuff
[12] << 24) | (rcBuff[13] << 16) |

187 (
rcBuff
[14] << 8) |ÑcBuff[15];

188 
	`¥ötf
(" Maximum des¸ùt‹Üi°Üígth: %u byãs\n", 
n
);

189 
n
 = (
rcBuff
[16] << 24) | (rcBuff[17] << 16) |

190 (
rcBuff
[18] << 8) |ÑcBuff[19];

191 
	`¥ötf
(" Maximum segmíàÀngth: %u byãs\n", 
n
);

192 
n
 = (
rcBuff
[20] << 24) | (rcBuff[21] << 16) |

193 (
rcBuff
[22] << 8) |ÑcBuff[23];

194 i‡(
n
 == 0) {

195 
	`¥ötf
(" Inline dataÇot supported\n");

197 
	`¥ötf
(" Maximum i∆öêd©®Àngth: %u byãs\n", 
n
);

199 
n
 = (
rcBuff
[24] << 24) | (rcBuff[25] << 16) |

200 (
rcBuff
[26] << 8) |ÑcBuff[27];

201 
	`¥ötf
(" Hñd d©®limô: %u byãs\n", 
n
);

202 
n
 = (
rcBuff
[28] << 24) | (rcBuff[29] << 16) |

203 (
rcBuff
[30] << 8) |ÑcBuff[31];

204 
	`¥ötf
(" Maximum såóm devi˚Åøns„∏size: %u byãs\n", 
n
);

205 
n
 = (
rcBuff
[34] << 8) |ÑcBuff[35];

206 
	`¥ötf
(" TŸÆ c⁄cuºíàc›õs: %u\n", 
n
);

207 
	`¥ötf
(" Maximum c⁄cuºíàc›õs: %u\n", 
rcBuff
[36]);

208 
	`¥ötf
(" Data segment granularity: %lu bytes\n",

209 ()(1 << 
rcBuff
[37]));

210 
	`¥ötf
(" Inline data granularity: %lu bytes\n",

211 ()(1 << 
rcBuff
[38]));

212 
	`¥ötf
(" Held data granularity: %lu bytes\n",

213 ()(1 << 
rcBuff
[39]));

215 
	`¥ötf
(" Implemented descriptorÜist:\n");

216 
n
 = 0;Ç < 
rcBuff
[43];Ç++) {

217 
code
 = 
rcBuff
[44 + 
n
];

219 i‡(
code
 < 0x16) {

220 
des¸ùt‹_ty≥
 *
£g_desc
 = 
£gmít_des¸ùt‹_codes
;

221 
	`°æí
(
£g_desc
->
desc
)) {

222 i‡(
£g_desc
->
code
 == code)

224 
£g_desc
++;

226 
	`¥ötf
(" Segmíàdes¸ùt‹ 0x%02x: %s\n", 
code
,

227 
	`°æí
(
£g_desc
->
desc
) ? seg_desc->desc : "Reserved");

228 } i‡(
code
 < 0xc0) {

229 
	`¥ötf
(" Segmíàdes¸ùt‹ 0x%02x: Re£rved\n", 
code
);

230 } i‡(
code
 < 0xe0) {

231 
	`¥ötf
(" Víd‹ s≥cifi¯des¸ùt‹ 0x%02x\n", 
code
);

233 
des¸ùt‹_ty≥
 *
tgt_desc
 = 
èrgë_des¸ùt‹_codes
;

235 
	`°æí
(
tgt_desc
->
desc
)) {

236 i‡(
tgt_desc
->
code
 == code)

238 
tgt_desc
++;

240 
	`¥ötf
(" T¨gë des¸ùt‹ 0x%02x: %s\n", 
code
,

241 
	`°æí
(
tgt_desc
->
desc
) ?Ågt_desc->desc : "Reserved");

244 
	`¥ötf
("\n");

245 
	}
}

247 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

262 
	$ußge
()

264 
	`Ârötf
(
°dîr
, "Usage: "

287 
	}
}

290 
	$maö
(
¨gc
, * 
¨gv
[])

292 
sg_fd
, 
ªs
, 
c
;

293 * 
˝Resu…Buff
 = 
NULL
;

294 
x„r_Àn
 = 520;

295 
ß
 = 3;

296 
li°_id
 = 0;

297 
do_hex
 = 0;

298 
vîbo£
 = 0;

299 c⁄° * 
devi˚_«me
 = 
NULL
;

300 
fûe_«me
[256];

301 
ªt
 = 1;

303 
	`mem£t
(
fûe_«me
, 0,  file_name);

305 
›ti⁄_ödex
 = 0;

307 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "fhHl:¥svVx:", 
l⁄g_›ti⁄s
,

308 &
›ti⁄_ödex
);

309 i‡(
c
 == -1)

312 
c
) {

314 
ß
 = 4;

317 
do_hex
 = 1;

321 
	`ußge
();

324 
li°_id
 = 
	`sg_gë_num
(
›èrg
);

325 i‡(-1 =
li°_id
) {

326 
	`Ârötf
(
°dîr
, "badárgumentÅo '--list_id'\n");

327  
SG_LIB_SYNTAX_ERROR
;

331 
ß
 = 3;

334 
ß
 = 1;

337 
ß
 = 0;

340 ++
vîbo£
;

343 
	`Ârötf
(
°dîr
, 
ME
 "vîsi⁄: %s\n", 
vîsi⁄_°r
);

346 
x„r_Àn
 = 
	`sg_gë_num
(
›èrg
);

347 i‡(-1 =
x„r_Àn
) {

348 
	`Ârötf
(
°dîr
, "badárgumentÅo '--xfer_len'\n");

349  
SG_LIB_SYNTAX_ERROR
;

353 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê0x%x ??\n", 
c
);

354 
	`ußge
();

355  
SG_LIB_SYNTAX_ERROR
;

358 i‡(
›töd
 < 
¨gc
) {

359 i‡(
NULL
 =
devi˚_«me
) {

360 
devi˚_«me
 = 
¨gv
[
›töd
];

361 ++
›töd
;

363 i‡(
›töd
 < 
¨gc
) {

364 ; 
›töd
 < 
¨gc
; ++optind)

365 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

366 
¨gv
[
›töd
]);

367 
	`ußge
();

368  
SG_LIB_SYNTAX_ERROR
;

372 i‡(
NULL
 =
devi˚_«me
) {

373 
	`Ârötf
(
°dîr
, "missing deviceÇame!\n");

374 
	`ußge
();

375  
SG_LIB_SYNTAX_ERROR
;

377 i‡(
x„r_Àn
 >
MAX_XFER_LEN
) {

378 
	`Ârötf
(
°dîr
, "xfer_len (%d) is out ofÑange ( < %d)\n",

379 
x„r_Àn
, 
MAX_XFER_LEN
);

380 
	`ußge
();

381  
SG_LIB_SYNTAX_ERROR
;

384 i‡(
NULL
 =(
˝Resu…Buff
 = (*)
	`mÆloc
(
x„r_Àn
))) {

385 
	`Ârötf
(
°dîr
, 
ME
 "out of memory\n");

386  
SG_LIB_FILE_ERROR
;

388 
	`mem£t
(
˝Resu…Buff
, 0x00, 
x„r_Àn
);

390 
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 0 , 
vîbo£
);

391 i‡(
sg_fd
 < 0) {

392 
	`Ârötf
(
°dîr
, 
ME
 "›íÉº‹: %s: %s\n", 
devi˚_«me
,

393 
	`ß„_°ªº‹
(-
sg_fd
));

394  
SG_LIB_FILE_ERROR
;

397 i‡(
vîbo£
)

398 
	`Ârötf
(
°dîr
, 
ME
 "issueÑeceive copyÑesultsÅo device %s\n"

400 
devi˚_«me
, 
x„r_Àn
, x„r_Àn, 
ß
, 
li°_id
);

402 
ªs
 = 
	`sg_Œ_ª˚ive_c›y_ªsu…s
(
sg_fd
, 
ß
, 
li°_id
, 
˝Resu…Buff
,

403 
x„r_Àn
, 0, 
vîbo£
);

404 
ªt
 = 
ªs
;

405 
ªs
) {

408 
SG_LIB_CAT_NOT_READY
:

409 
	`Ârötf
(
°dîr
, " SCSI RECEIVE COPY RESULTS failed, "

412 
SG_LIB_CAT_UNIT_ATTENTION
:

413 
	`Ârötf
(
°dîr
, " SCSI RECEIVE COPY RESULTS failed, "

416 
SG_LIB_CAT_ABORTED_COMMAND
:

417 
	`Ârötf
(
°dîr
, " SCSI RECEIVE COPY RESULTS failed, "

420 
SG_LIB_CAT_INVALID_OP
:

421 
	`Ârötf
(
°dîr
, " SCSI RECEIVE COPY RESULTS commandÇot "

424 
SG_LIB_CAT_ILLEGAL_REQ
:

425 
	`Ârötf
(
°dîr
, " SCSI RECEIVE COPY RESULTS failed, "

429 
	`Ârötf
(
°dîr
, " SCSI RECEIVE COPY RESULTS commandÉrror %d\n",

430 
ªs
);

433 i‡(
ªs
 != 0)

434 
föish
;

435 i‡(1 =
do_hex
) {

436 
	`dSåHex
((c⁄° *)
˝Resu…Buff
, 
x„r_Àn
, 1);

437 
ªs
 = 0;

438 
föish
;

440 
ß
) {

442 
	`scsi_Áûed_£gmít_dëaûs
(
˝Resu…Buff
, 
x„r_Àn
);

443 
ªs
 = 0;

446 
	`scsi_›î©ög_∑ømëîs
(
˝Resu…Buff
, 
x„r_Àn
);

447 
ªs
 = 0;

450 
	`scsi_c›y_°©us
(
˝Resu…Buff
, 
x„r_Àn
);

451 
ªs
 = 0;

454 
	`dSåHex
((c⁄° *)
˝Resu…Buff
, 
x„r_Àn
, 1);

455 
ªs
 = 0;

459 
föish
:

460 
	`‰ì
(
˝Resu…Buff
);

461 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

462 i‡(
ªs
 < 0) {

463 
	`Ârötf
(
°dîr
, 
ME
 "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

464 i‡(0 =
ªt
)

465  
SG_LIB_FILE_ERROR
;

467  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

468 
	}
}

	@src/sg_dd.c

28 
	#_XOPEN_SOURCE
 600

	)

29 #i‚de‡
_GNU_SOURCE


30 
	#_GNU_SOURCE


	)

33 
	~<uni°d.h
>

34 
	~<f˙é.h
>

35 
	~<°dio.h
>

36 
	~<°dlib.h
>

37 
	~<°rög.h
>

38 
	~<sig«l.h
>

39 
	~<˘y≥.h
>

40 
	~<î∫o.h
>

41 
	~<limôs.h
>

42 
	#__STDC_FORMAT_MACROS
 1

	)

43 
	~<öây≥s.h
>

44 
	~<sys/io˘l.h
>

45 
	~<sys/ty≥s.h
>

46 
	~<sys/°©.h
>

47 
	~<sys/sysma¸os.h
>

48 
	~<sys/time.h
>

49 
	~<sys/fûe.h
>

50 
	~<löux/maj‹.h
>

51 
	~<löux/fs.h
>

53 #ifde‡
HAVE_CONFIG_H


54 
	~"c⁄fig.h
"

56 
	~"sg_lib.h
"

57 
	~"sg_cmds_basic.h
"

58 
	~"sg_cmds_exåa.h
"

59 
	~"sg_io_löux.h
"

61 c⁄° * 
	gvîsi⁄_°r
 = "5.77 20130507";

63 
	#ME
 "sg_dd: "

	)

67 
	#STR_SZ
 1024

	)

68 
	#INOUTF_SZ
 512

	)

69 
	#EBUFF_SZ
 512

	)

71 
	#DEF_BLOCK_SIZE
 512

	)

72 
	#DEF_BLOCKS_PER_TRANSFER
 128

	)

73 
	#DEF_BLOCKS_PER_2048TRANSFER
 32

	)

74 
	#DEF_SCSI_CDBSZ
 10

	)

75 
	#MAX_SCSI_CDBSZ
 16

	)

77 
	#DEF_MODE_CDB_SZ
 10

	)

78 
	#DEF_MODE_RESP_LEN
 252

	)

79 
	#RW_ERR_RECOVERY_MP
 1

	)

80 
	#CACHING_MP
 8

	)

81 
	#CONTROL_MP
 0xa

	)

83 
	#SENSE_BUFF_LEN
 64

	)

84 
	#READ_CAP_REPLY_LEN
 8

	)

85 
	#RCAP16_REPLY_LEN
 32

	)

86 
	#READ_LONG_OPCODE
 0x3E

	)

87 
	#READ_LONG_CMD_LEN
 10

	)

88 
	#READ_LONG_DEF_BLK_INC
 8

	)

90 
	#DEF_TIMEOUT
 60000

	)

92 #i‚de‡
RAW_MAJOR


93 
	#RAW_MAJOR
 255

	)

96 
	#SG_LIB_FLOCK_ERR
 90

	)

98 
	#FT_OTHER
 1

	)

99 
	#FT_SG
 2

	)

101 
	#FT_RAW
 4

	)

102 
	#FT_DEV_NULL
 8

	)

103 
	#FT_ST
 16

	)

104 
	#FT_BLOCK
 32

	)

105 
	#FT_FIFO
 64

	)

106 
	#FT_ERROR
 128

	)

108 
	#DEV_NULL_MINOR_NUM
 3

	)

111 #i‚de‡
O_DIRECT


112 
	#O_DIRECT
 0

	)

115 
	#MIN_RESERVED_SIZE
 8192

	)

117 
	#MAX_UNIT_ATTENTIONS
 10

	)

118 
	#MAX_ABORTED_CMDS
 256

	)

120 
	gsum_of_ªsids
 = 0;

122 
öt64_t
 
	gdd_cou¡
 = -1;

123 
öt64_t
 
	gªq_cou¡
 = 0;

124 
öt64_t
 
	gö_fuŒ
 = 0;

125 
	gö_∑πül
 = 0;

126 
öt64_t
 
	gout_fuŒ
 = 0;

127 
	gout_∑πül
 = 0;

128 
öt64_t
 
	gout_•¨£
 = 0;

129 
	gªcovîed_îrs
 = 0;

130 
	guƒecovîed_îrs
 = 0;

131 
	gªad_l⁄gs
 = 0;

132 
	gnum_ªåõs
 = 0;

134 
	gdo_time
 = 0;

135 
	gvîbo£
 = 0;

136 
	g°¨t_tm_vÆid
 = 0;

137 
timevÆ
 
	g°¨t_tm
;

138 
	gblk_sz
 = 0;

139 
	gmax_uas
 = 
MAX_UNIT_ATTENTIONS
;

140 
	gmax_ab‹ãd
 = 
MAX_ABORTED_CMDS
;

141 
	gc€_limô
 = 0;

142 
	gc€_cou¡
 = 0;

144 * 
	gzîos_buff
 = 
NULL
;

145 
	gªad_l⁄g_blk_öc
 = 
READ_LONG_DEF_BLK_INC
;

147 c⁄° * 
	g¥oc_Ælow_dio
 = "/proc/scsi/sg/allow_dio";

149 
	sÊags_t
 {

150 
	m≠≥nd
;

151 
	mcdbsz
;

152 
	mc€
;

153 
	mdio
;

154 
	mdúe˘
;

155 
	mdpo
;

156 
	mdsync
;

157 
	mex˛
;

158 
	mfua
;

159 
	mÊock
;

160 
	mnoˇche
;

161 
	msgio
;

162 
	mpdt
;

163 
	m•¨£
;

164 
	mªåõs
;

167 
Êags_t
 
	giÊag
;

168 
Êags_t
 
	goÊag
;

170 
ˇlc_duøti⁄_throughput
(
c⁄tö
);

174 
ö°Æl_h™dÀr
(
sig_num
, (*
sig_h™dÀr
Ë(
sig
))

176 
siga˘i⁄
 
siga˘
;

177 
	`siga˘i⁄
 (
sig_num
, 
NULL
, &
siga˘
);

178 i‡(
siga˘
.
ß_h™dÀr
 !
SIG_IGN
)

180 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

181 
	`sigem±y£t
 (&
siga˘
.
ß_mask
);

182 
siga˘
.
ß_Êags
 = 0;

183 
	`siga˘i⁄
 (
sig_num
, &
siga˘
, 
NULL
);

185 
	}
}

189 
	$¥öt_°©s
(c⁄° * 
°r
)

191 i‡(0 !
dd_cou¡
)

192 
	`Ârötf
(
°dîr
, "Ñemaöög block cou¡=%"
PRId64
"\n", 
dd_cou¡
);

193 
	`Ârötf
(
°dîr
, "%s%"
PRId64
"+%dÑec‹d†ö\n", 
°r
, 
ö_fuŒ
 - 
ö_∑πül
,

194 
ö_∑πül
);

195 
	`Ârötf
(
°dîr
, "%s%"
PRId64
"+%dÑec‹d†out\n", 
°r
,

196 
out_fuŒ
 - 
out_∑πül
, out_partial);

197 i‡(
oÊag
.
•¨£
)

198 
	`Ârötf
(
°dîr
, "%s%"
PRId64
" by∑s£dÑec‹d†out\n", 
°r
, 
out_•¨£
);

199 i‡(
ªcovîed_îrs
 > 0)

200 
	`Ârötf
(
°dîr
, "%s%dÑecovîedÉº‹s\n", 
°r
, 
ªcovîed_îrs
);

201 i‡(
num_ªåõs
 > 0)

202 
	`Ârötf
(
°dîr
, "%s%dÑërõ†©ãm±ed\n", 
°r
, 
num_ªåõs
);

203 i‡(
iÊag
.
c€
 || 
oÊag
.coe) {

204 
	`Ârötf
(
°dîr
, "%s%d uƒecovîedÉº‹s\n", 
°r
, 
uƒecovîed_îrs
);

205 
	`Ârötf
(
°dîr
, "%s%dÑead_longs fetchedÖart of unrecovered "

206 "ªadÉº‹s\n", 
°r
, 
ªad_l⁄gs
);

207 } i‡(
uƒecovîed_îrs
)

208 
	`Ârötf
(
°dîr
, "%s%d uƒecovîedÉº‹(s)\n", 
°r
,

209 
uƒecovîed_îrs
);

210 
	}
}

214 
	$öãºu±_h™dÀr
(
sig
)

216 
siga˘i⁄
 
siga˘
;

218 
siga˘
.
ß_h™dÀr
 = 
SIG_DFL
;

219 
	`sigem±y£t
(&
siga˘
.
ß_mask
);

220 
siga˘
.
ß_Êags
 = 0;

221 
	`siga˘i⁄
(
sig
, &
siga˘
, 
NULL
);

222 
	`Ârötf
(
°dîr
, "Interrupted by signal,");

223 i‡(
do_time
)

224 
	`ˇlc_duøti⁄_throughput
(0);

225 
	`¥öt_°©s
("");

226 
	`kûl
(
	`gëpid
 (), 
sig
);

227 
	}
}

231 
	$sigöfo_h™dÀr
(
sig
)

233 
sig
 = sig;

234 
	`Ârötf
(
°dîr
, "ProgressÑeport, continuing ...\n");

235 i‡(
do_time
)

236 
	`ˇlc_duøti⁄_throughput
(1);

237 
	`¥öt_°©s
(" ");

238 
	}
}

240 
	gbsg_maj‹_checked
 = 0;

241 
	gbsg_maj‹
 = 0;

244 
	$föd_bsg_maj‹
()

246 c⁄° * 
¥oc_devi˚s
 = "/proc/devices";

247 
FILE
 *
Â
;

248 
a
[128];

249 
b
[128];

250 * 
˝
;

251 
n
;

253 i‡(
NULL
 =(
Â
 = 
	`f›í
(
¥oc_devi˚s
, "r"))) {

254 i‡(
vîbo£
)

255 
	`Ârötf
(
°dîr
, "f›í %†Áûed: %s\n", 
¥oc_devi˚s
,

256 
	`°ªº‹
(
î∫o
));

259 (
˝
 = 
	`fgës
(
b
, (b), 
Â
))) {

260 i‡((1 =
	`ssˇnf
(
b
, "%s", 
a
)) &&

261 (0 =
	`memcmp
(
a
, "Character", 9)))

264 
˝
 && (˝ = 
	`fgës
(
b
, (b), 
Â
))) {

265 i‡(2 =
	`ssˇnf
(
b
, "%d %s", &
n
, 
a
)) {

266 i‡(0 =
	`°rcmp
("bsg", 
a
)) {

267 
bsg_maj‹
 = 
n
;

273 i‡(
vîbo£
 > 5) {

274 i‡(
˝
)

275 
	`Ârötf
(
°dîr
, "found bsg_maj‹=%d\n", 
bsg_maj‹
);

277 
	`Ârötf
(
°dîr
, "foundÇÿbsg ch¨ devi˚ i¿%s\n", 
¥oc_devi˚s
);

279 
	`f˛o£
(
Â
);

280 
	}
}

284 
	$dd_fûëy≥
(c⁄° * 
fûíame
)

286 
°©
 
°
;

287 
size_t
 
Àn
 = 
	`°æí
(
fûíame
);

289 i‡((1 =
Àn
Ë&& ('.' =
fûíame
[0]))

290  
FT_DEV_NULL
;

291 i‡(
	`°©
(
fûíame
, &
°
) < 0)

292  
FT_ERROR
;

293 i‡(
	`S_ISCHR
(
°
.
°_mode
)) {

295 i‡((
MEM_MAJOR
 =
	`maj‹
(
°
.
°_rdev
)) &&

296 (
DEV_NULL_MINOR_NUM
 =
	`mö‹
(
°
.
°_rdev
)))

297  
FT_DEV_NULL
;

298 i‡(
RAW_MAJOR
 =
	`maj‹
(
°
.
°_rdev
))

299  
FT_RAW
;

300 i‡(
SCSI_GENERIC_MAJOR
 =
	`maj‹
(
°
.
°_rdev
))

301  
FT_SG
;

302 i‡(
SCSI_TAPE_MAJOR
 =
	`maj‹
(
°
.
°_rdev
))

303  
FT_ST
;

304 i‡(! 
bsg_maj‹_checked
) {

305 
bsg_maj‹_checked
 = 1;

306 
	`föd_bsg_maj‹
();

308 i‡(
bsg_maj‹
 =()
	`maj‹
(
°
.
°_rdev
))

309  
FT_SG
;

310 } i‡(
	`S_ISBLK
(
°
.
°_mode
))

311  
FT_BLOCK
;

312 i‡(
	`S_ISFIFO
(
°
.
°_mode
))

313  
FT_FIFO
;

314  
FT_OTHER
;

315 
	}
}

319 
	$dd_fûëy≥_°r
(
·
, * 
buff
)

321 
off
 = 0;

323 i‡(
FT_DEV_NULL
 & 
·
)

324 
off
 +
	`¢¥ötf
(
buff
 + off, 32, "null device ");

325 i‡(
FT_SG
 & 
·
)

326 
off
 +
	`¢¥ötf
(
buff
 + off, 32, "SCSI generic (sg) device ");

327 i‡(
FT_BLOCK
 & 
·
)

328 
off
 +
	`¢¥ötf
(
buff
 + off, 32, "block device ");

329 i‡(
FT_FIFO
 & 
·
)

330 
off
 +
	`¢¥ötf
(
buff
 + off, 32, "fifo (namedÖipe) ");

331 i‡(
FT_ST
 & 
·
)

332 
off
 +
	`¢¥ötf
(
buff
 + off, 32, "SCSIÅape device ");

333 i‡(
FT_RAW
 & 
·
)

334 
off
 +
	`¢¥ötf
(
buff
 + off, 32, "raw device ");

335 i‡(
FT_OTHER
 & 
·
)

336 
off
 +
	`¢¥ötf
(
buff
 + off, 32, "other (perhaps ordinary file) ");

337 i‡(
FT_ERROR
 & 
·
)

338 
off
 +
	`¢¥ötf
(
buff
 + off, 32, "unableÅo 'stat' file ");

339  
buff
;

340 
	}
}

344 
	$ußge
()

346 
	`Ârötf
(
°dîr
, "Usage: "

363 
	`Ârötf
(
°dîr
,

388 
	`Ârötf
(
°dîr
,

410 
	}
}

415 
	$scsi_ªad_ˇ∑côy
(
sg_fd
, 
öt64_t
 * 
num_£˘
, * 
£˘_sz
)

417 
k
, 
ªs
;

418 
ui
;

419 
rcBuff
[
RCAP16_REPLY_LEN
];

420 
vîb
;

422 
vîb
 = (
vîbo£
 ? verbose - 1: 0);

423 
ªs
 = 
	`sg_Œ_ªadˇp_10
(
sg_fd
, 0, 0, 
rcBuff
, 
READ_CAP_REPLY_LEN
, 1, 
vîb
);

424 i‡(0 !
ªs
)

425  
ªs
;

427 i‡((0xf‡=
rcBuff
[0]) && (0xff ==ÑcBuff[1]) && (0xff ==ÑcBuff[2]) &&

428 (0xf‡=
rcBuff
[3])) {

429 
öt64_t
 
ls
;

431 
ªs
 = 
	`sg_Œ_ªadˇp_16
(
sg_fd
, 0, 0, 
rcBuff
, 
RCAP16_REPLY_LEN
, 1,

432 
vîb
);

433 i‡(0 !
ªs
)

434  
ªs
;

435 
k
 = 0, 
ls
 = 0; k < 8; ++k) {

436 
ls
 <<= 8;

437 
ls
 |
rcBuff
[
k
];

439 *
num_£˘
 = 
ls
 + 1;

440 *
£˘_sz
 = (
rcBuff
[8] << 24) | (rcBuff[9] << 16) |

441 (
rcBuff
[10] << 8) |ÑcBuff[11];

443 
ui
 = ((
rcBuff
[0] << 24) | (rcBuff[1] << 16) | (rcBuff[2] << 8) |

444 
rcBuff
[3]);

446 *
num_£˘
 = (
öt64_t
)
ui
 + 1;

447 *
£˘_sz
 = (
rcBuff
[4] << 24) | (rcBuff[5] << 16) |

448 (
rcBuff
[6] << 8) |ÑcBuff[7];

450 i‡(
vîbo£
)

451 
	`Ârötf
(
°dîr
, "Çumbî o‡blocks=%"
PRId64
" [0x%"
PRIx64
"], "

452 "block size=%d\n", *
num_£˘
, *num_£˘, *
£˘_sz
);

454 
	}
}

460 
	$ªad_blkdev_ˇ∑côy
(
sg_fd
, 
öt64_t
 * 
num_£˘
, * 
£˘_sz
)

462 #ifde‡
BLKSSZGET


463 i‡((
	`io˘l
(
sg_fd
, 
BLKSSZGET
, 
£˘_sz
) < 0) && (*sect_sz > 0)) {

464 
	`≥º‹
("BLKSSZGET ioctlÉrror");

467 #ifde‡
BLKGETSIZE64


468 
uöt64_t
 
uŒ
;

470 i‡(
	`io˘l
(
sg_fd
, 
BLKGETSIZE64
, &
uŒ
) < 0) {

472 
	`≥º‹
("BLKGETSIZE64 ioctlÉrror");

475 *
num_£˘
 = ((
öt64_t
)
uŒ
 / (öt64_t)*
£˘_sz
);

476 i‡(
vîbo£
)

477 
	`Ârötf
(
°dîr
, " [bgs64]Çumbî o‡blocks=%" 
PRId64
 " [0x%"

478 
PRIx64
"], block size=%d\n", *
num_£˘
, *num_sect,

479 *
£˘_sz
);

481 
ul
;

483 i‡(
	`io˘l
(
sg_fd
, 
BLKGETSIZE
, &
ul
) < 0) {

484 
	`≥º‹
("BLKGETSIZE ioctlÉrror");

487 *
num_£˘
 = (
öt64_t
)
ul
;

488 i‡(
vîbo£
)

489 
	`Ârötf
(
°dîr
, " [bgs]Çumbî o‡blocks=%"
PRId64
" [0x%"

490 
PRIx64
 "], block size=%d\n", *
num_£˘
, *num_sect,

491 *
£˘_sz
);

496 i‡(
vîbo£
)

497 
	`Ârötf
(
°dîr
, " BLKSSZGET+BLKGETSIZE ioctlÇotávailable\n");

498 *
num_£˘
 = 0;

499 *
£˘_sz
 = 0;

502 
	}
}

506 
	$sg_buûd_scsi_cdb
(* 
cdbp
, 
cdb_sz
, 
blocks
,

507 
öt64_t
 
°¨t_block
, 
wrôe_åue
, 
fua
, 
dpo
)

509 
rd_›code
[] = {0x8, 0x28, 0xa8, 0x88};

510 
wr_›code
[] = {0xa, 0x2a, 0xaa, 0x8a};

511 
sz_öd
;

513 
	`mem£t
(
cdbp
, 0, 
cdb_sz
);

514 i‡(
dpo
)

515 
cdbp
[1] |= 0x10;

516 i‡(
fua
)

517 
cdbp
[1] |= 0x8;

518 
cdb_sz
) {

520 
sz_öd
 = 0;

521 
cdbp
[0] = ()(
wrôe_åue
 ? 
wr_›code
[
sz_öd
] :

522 
rd_›code
[
sz_öd
]);

523 
cdbp
[1] = ()((
°¨t_block
 >> 16) & 0x1f);

524 
cdbp
[2] = ()((
°¨t_block
 >> 8) & 0xff);

525 
cdbp
[3] = ()(
°¨t_block
 & 0xff);

526 
cdbp
[4] = (256 =
blocks
) ? 0 : ()blocks;

527 i‡(
blocks
 > 256) {

528 
	`Ârötf
(
°dîr
, 
ME
 "for 6 byte commands, maximumÇumber of "

532 i‡((
°¨t_block
 + 
blocks
 - 1) & (~0x1fffff)) {

533 
	`Ârötf
(
°dîr
, 
ME
 "for 6 byte commands, can'táddress blocks"

537 i‡(
dpo
 || 
fua
) {

538 
	`Ârötf
(
°dîr
, 
ME
 "for 6 byte commands,Çeither dpoÇor fua"

544 
sz_öd
 = 1;

545 
cdbp
[0] = ()(
wrôe_åue
 ? 
wr_›code
[
sz_öd
] :

546 
rd_›code
[
sz_öd
]);

547 
cdbp
[2] = ()((
°¨t_block
 >> 24) & 0xff);

548 
cdbp
[3] = ()((
°¨t_block
 >> 16) & 0xff);

549 
cdbp
[4] = ()((
°¨t_block
 >> 8) & 0xff);

550 
cdbp
[5] = ()(
°¨t_block
 & 0xff);

551 
cdbp
[7] = ()((
blocks
 >> 8) & 0xff);

552 
cdbp
[8] = ()(
blocks
 & 0xff);

553 i‡(
blocks
 & (~0xffff)) {

554 
	`Ârötf
(
°dîr
, 
ME
 "for 10 byte commands, maximumÇumber of "

560 
sz_öd
 = 2;

561 
cdbp
[0] = ()(
wrôe_åue
 ? 
wr_›code
[
sz_öd
] :

562 
rd_›code
[
sz_öd
]);

563 
cdbp
[2] = ()((
°¨t_block
 >> 24) & 0xff);

564 
cdbp
[3] = ()((
°¨t_block
 >> 16) & 0xff);

565 
cdbp
[4] = ()((
°¨t_block
 >> 8) & 0xff);

566 
cdbp
[5] = ()(
°¨t_block
 & 0xff);

567 
cdbp
[6] = ()((
blocks
 >> 24) & 0xff);

568 
cdbp
[7] = ()((
blocks
 >> 16) & 0xff);

569 
cdbp
[8] = ()((
blocks
 >> 8) & 0xff);

570 
cdbp
[9] = ()(
blocks
 & 0xff);

573 
sz_öd
 = 3;

574 
cdbp
[0] = ()(
wrôe_åue
 ? 
wr_›code
[
sz_öd
] :

575 
rd_›code
[
sz_öd
]);

576 
cdbp
[2] = ()((
°¨t_block
 >> 56) & 0xff);

577 
cdbp
[3] = ()((
°¨t_block
 >> 48) & 0xff);

578 
cdbp
[4] = ()((
°¨t_block
 >> 40) & 0xff);

579 
cdbp
[5] = ()((
°¨t_block
 >> 32) & 0xff);

580 
cdbp
[6] = ()((
°¨t_block
 >> 24) & 0xff);

581 
cdbp
[7] = ()((
°¨t_block
 >> 16) & 0xff);

582 
cdbp
[8] = ()((
°¨t_block
 >> 8) & 0xff);

583 
cdbp
[9] = ()(
°¨t_block
 & 0xff);

584 
cdbp
[10] = ()((
blocks
 >> 24) & 0xff);

585 
cdbp
[11] = ()((
blocks
 >> 16) & 0xff);

586 
cdbp
[12] = ()((
blocks
 >> 8) & 0xff);

587 
cdbp
[13] = ()(
blocks
 & 0xff);

590 
	`Ârötf
(
°dîr
, 
ME
 "expected cdb size of 6, 10, 12, or 16 but got"

591 " %d\n", 
cdb_sz
);

595 
	}
}

606 
	$sg_ªad_low
(
sg_fd
, * 
buff
, 
blocks
, 
öt64_t
 
‰om_block
,

607 
bs
, c⁄° 
Êags_t
 * 
iÂ
, * 
di›
,

608 
uöt64_t
 * 
io_addΩ
)

610 
rdCmd
[
MAX_SCSI_CDBSZ
];

611 
£n£Buff
[
SENSE_BUFF_LEN
];

612 c⁄° * 
sbp
;

613 
sg_io_hdr
 
io_hdr
;

614 
ªs
, 
k
, 
öfo_vÆid
, 
¶í
;

616 i‡(
	`sg_buûd_scsi_cdb
(
rdCmd
, 
iÂ
->
cdbsz
, 
blocks
, 
‰om_block
, 0,

617 
iÂ
->
fua
, iÂ->
dpo
)) {

618 
	`Ârötf
(
°dîr
, 
ME
 "badÑd cdb buûd, from_block=%" 
PRId64


619 ", blocks=%d\n", 
‰om_block
, 
blocks
);

620  
SG_LIB_SYNTAX_ERROR
;

623 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr
));

624 
io_hdr
.
öãrÁ˚_id
 = 'S';

625 
io_hdr
.
cmd_Àn
 = 
iÂ
->
cdbsz
;

626 
io_hdr
.
cmdp
 = 
rdCmd
;

627 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

628 
io_hdr
.
dx„r_Àn
 = 
bs
 * 
blocks
;

629 
io_hdr
.
dx„Ω
 = 
buff
;

630 
io_hdr
.
mx_sb_Àn
 = 
SENSE_BUFF_LEN
;

631 
io_hdr
.
sbp
 = 
£n£Buff
;

632 
io_hdr
.
timeout
 = 
DEF_TIMEOUT
;

633 
io_hdr
.
∑ck_id
 = ()
‰om_block
;

634 i‡(
di›
 && *diop)

635 
io_hdr
.
Êags
 |
SG_FLAG_DIRECT_IO
;

637 i‡(
vîbo£
 > 2) {

638 
	`Ârötf
(
°dîr
, "Ñead cdb: ");

639 
k
 = 0; k < 
iÂ
->
cdbsz
; ++k)

640 
	`Ârötf
(
°dîr
, "%02x ", 
rdCmd
[
k
]);

641 
	`Ârötf
(
°dîr
, "\n");

643 ((
ªs
 = 
	`io˘l
(
sg_fd
, 
SG_IO
, &
io_hdr
)Ë< 0Ë&& (
EINTR
 =
î∫o
))

645 i‡(
ªs
 < 0) {

646 i‡(
ENOMEM
 =
î∫o
)

648 
	`≥º‹
("reading (SG_IO) on sg device,Érror");

651 i‡(
vîbo£
 > 2)

652 
	`Ârötf
(
°dîr
, " duøti⁄=%u ms\n", 
io_hdr
.
duøti⁄
);

653 
ªs
 = 
	`sg_îr_ˇãg‹y3
(&
io_hdr
);

654 
sbp
 = 
io_hdr
.sbp;

655 
¶í
 = 
io_hdr
.
sb_Àn_wr
;

656 
ªs
) {

657 
SG_LIB_CAT_CLEAN
:

659 
SG_LIB_CAT_RECOVERED
:

660 ++
ªcovîed_îrs
;

661 
öfo_vÆid
 = 
	`sg_gë_£n£_öfo_Êd
(
sbp
, 
¶í
, 
io_addΩ
);

662 i‡(
öfo_vÆid
) {

663 
	`Ârötf
(
°dîr
, "Üba ofÜastÑecoveredÉrror inÅhis "

664 "READ=0x%"
PRIx64
"\n", *
io_addΩ
);

665 i‡(
vîbo£
 > 1)

666 
	`sg_chk_n_¥öt3
("ªadög", &
io_hdr
, 1);

668 
	`Ârötf
(
°dîr
, "RecoveredÉrror: [no info]Ñeading from "

669 "block=0x%"
PRIx64
",Çum=%d\n", 
‰om_block
, 
blocks
);

670 
	`sg_chk_n_¥öt3
("ªadög", &
io_hdr
, 
vîbo£
 > 1);

673 
SG_LIB_CAT_ABORTED_COMMAND
:

674 
SG_LIB_CAT_UNIT_ATTENTION
:

675 
	`sg_chk_n_¥öt3
("ªadög", &
io_hdr
, 
vîbo£
 > 1);

676  
ªs
;

677 
SG_LIB_CAT_MEDIUM_HARD
:

678 i‡(
vîbo£
 > 1)

679 
	`sg_chk_n_¥öt3
("ªadög", &
io_hdr
, 
vîbo£
 > 1);

680 ++
uƒecovîed_îrs
;

681 
öfo_vÆid
 = 
	`sg_gë_£n£_öfo_Êd
(
sbp
, 
¶í
, 
io_addΩ
);

683 i‡((
öfo_vÆid
Ë|| ((5 =
iÂ
->
pdt
Ë&& (*
io_addΩ
 > 0)))

684  
SG_LIB_CAT_MEDIUM_HARD_WITH_INFO
;

686 
	`Ârötf
(
°dîr
, "Medium, hardware or blank checkÉrror but "

688  
ªs
;

691 
SG_LIB_CAT_NOT_READY
:

692 ++
uƒecovîed_îrs
;

693 i‡(
vîbo£
 > 0)

694 
	`sg_chk_n_¥öt3
("ªadög", &
io_hdr
, 
vîbo£
 > 1);

695  
ªs
;

696 
SG_LIB_CAT_ILLEGAL_REQ
:

697 i‡(5 =
iÂ
->
pdt
) {

698 
sg_scsi_£n£_hdr
 
ssh
;

699 
ûi
;

701 i‡(
vîbo£
 > 1)

702 
	`sg_chk_n_¥öt3
("ªadög", &
io_hdr
, 
vîbo£
 > 1);

703 i‡(
	`sg_scsi_n‹mÆize_£n£
(
sbp
, 
¶í
, &
ssh
) &&

704 (0x64 =
ssh
.
asc
Ë&& (0x0 =ssh.
ascq
)) {

705 i‡(
	`sg_gë_£n£_fûem¨k_eom_ûi
(
sbp
, 
¶í
, 
NULL
, NULL,

706 &
ûi
) && ili) {

707 
öfo_vÆid
 = 
	`sg_gë_£n£_öfo_Êd
(
sbp
, 
¶í
, 
io_addΩ
);

708 i‡(*
io_addΩ
 > 0) {

709 ++
uƒecovîed_îrs
;

710  
SG_LIB_CAT_MEDIUM_HARD_WITH_INFO
;

712 
	`Ârötf
(
°dîr
, "MMC READ gave 'illegal mode for "

715 ++
uƒecovîed_îrs
;

716  
SG_LIB_CAT_MEDIUM_HARD
;

721 ++
uƒecovîed_îrs
;

722 i‡(
vîbo£
 > 0)

723 
	`sg_chk_n_¥öt3
("ªadög", &
io_hdr
, 
vîbo£
 > 1);

724  
ªs
;

726 i‡(
di›
 && *diop &&

727 ((
io_hdr
.
öfo
 & 
SG_INFO_DIRECT_IO_MASK
Ë!
SG_INFO_DIRECT_IO
))

728 *
di›
 = 0;

729 
sum_of_ªsids
 +
io_hdr
.
ªsid
;

731 
	}
}

739 
	$sg_ªad
(
sg_fd
, * 
buff
, 
blocks
, 
öt64_t
 
‰om_block
,

740 
bs
, 
Êags_t
 * 
iÂ
, * 
di›
, * 
blks_ªadp
)

742 
uöt64_t
 
io_addr
;

743 
öt64_t
 
lba
;

744 
ªs
, 
blks
, 
ª≥©
, 
x„ºed
;

745 * 
bp
;

746 
ªåõs_tmp
;

747 
ªt
 = 0;

748 
may_c€
 = 0;

750 
ªåõs_tmp
 = 
iÂ
->
ªåõs
;

751 
x„ºed
 = 0, 
blks
 = 
blocks
, 
lba
 = 
‰om_block
, 
bp
 = 
buff
;

752 
blks
 > 0; blk†
blocks
 - 
x„ºed
) {

753 
io_addr
 = 0;

754 
ª≥©
 = 0;

755 
may_c€
 = 0;

756 
ªs
 = 
	`sg_ªad_low
(
sg_fd
, 
bp
, 
blks
, 
lba
, 
bs
, 
iÂ
, 
di›
, &
io_addr
);

757 
ªs
) {

759 i‡(
blks_ªadp
)

760 *
blks_ªadp
 = 
x„ºed
 + 
blks
;

761 i‡(
c€_limô
 > 0)

762 
c€_cou¡
 = 0;

765  
ªs
;

766 
SG_LIB_CAT_NOT_READY
:

767 
	`Ârötf
(
°dîr
, "Device (r)ÇotÑeady\n");

768  
ªs
;

769 
SG_LIB_CAT_ABORTED_COMMAND
:

770 i‡(--
max_ab‹ãd
 > 0) {

771 
	`Ârötf
(
°dîr
, "Aborted command, continuing (r)\n");

772 
ª≥©
 = 1;

774 
	`Ârötf
(
°dîr
, "Aborted command,Åoo many (r)\n");

775  
ªs
;

778 
SG_LIB_CAT_UNIT_ATTENTION
:

779 i‡(--
max_uas
 > 0) {

780 
	`Ârötf
(
°dîr
, "Unitáttention, continuing (r)\n");

781 
ª≥©
 = 1;

783 
	`Ârötf
(
°dîr
, "Unitáttention,Åoo many (r)\n");

784  
ªs
;

787 
SG_LIB_CAT_MEDIUM_HARD_WITH_INFO
:

788 i‡(
ªåõs_tmp
 > 0) {

789 
	`Ârötf
(
°dîr
, ">>>Ñëryögá sgiÿªad,Üba=0x%"
PRIx64
"\n",

790 (
uöt64_t
)
lba
);

791 --
ªåõs_tmp
;

792 ++
num_ªåõs
;

793 i‡(
uƒecovîed_îrs
 > 0)

794 --
uƒecovîed_îrs
;

795 
ª≥©
 = 1;

797 
ªt
 = 
SG_LIB_CAT_MEDIUM_HARD
;

799 
SG_LIB_SYNTAX_ERROR
:

800 
iÂ
->
c€
 = 0;

801 
ªt
 = 
ªs
;

802 
îr_out
;

804 
ªt
 = 
ªs
;

805 
îr_out
;

806 
SG_LIB_CAT_MEDIUM_HARD
:

807 
may_c€
 = 1;

809 i‡(
ªåõs_tmp
 > 0) {

810 
	`Ârötf
(
°dîr
, ">>>Ñëryögá sgiÿªad,Üba=0x%"
PRIx64
"\n",

811 (
uöt64_t
)
lba
);

812 --
ªåõs_tmp
;

813 ++
num_ªåõs
;

814 i‡(
uƒecovîed_îrs
 > 0)

815 --
uƒecovîed_îrs
;

816 
ª≥©
 = 1;

819 
ªt
 = 
ªs
;

820 
îr_out
;

822 i‡(
ª≥©
)

824 i‡((
io_addr
 < (
uöt64_t
)
lba
) ||

825 (
io_addr
 >(
uöt64_t
)(
lba
 + 
blks
))) {

826 
	`Ârötf
(
°dîr
, " UƒecovîedÉº‹Üb®0x%"
PRIx64
"Çot in "

827 "c‹ª˘Ñ™ge:\n\t[0x%"
PRIx64
",0x%"PRIx64"]\n", 
io_addr
,

828 (
uöt64_t
)
lba
,

829 (
uöt64_t
)(
lba
 + 
blks
 - 1));

830 
may_c€
 = 1;

831 
îr_out
;

833 
blks
 = ()(
io_addr
 - (
uöt64_t
)
lba
);

834 i‡(
blks
 > 0) {

835 i‡(
vîbo£
)

836 
	`Ârötf
(
°dîr
, "ÖartialÑead of %d blocksÖriorÅo "

837 "mediumÉº‹\n", 
blks
);

838 
ªs
 = 
	`sg_ªad_low
(
sg_fd
, 
bp
, 
blks
, 
lba
, 
bs
, 
iÂ
, 
di›
, &
io_addr
);

839 
ªs
) {

843 
iÂ
->
c€
 = 0;

844 
ªt
 = 
ªs
;

845 
îr_out
;

847 
	`Ârötf
(
°dîr
, "ENOMEMágain, unexpected (r)\n");

849 
SG_LIB_CAT_NOT_READY
:

850 
	`Ârötf
(
°dîr
, "device (r)ÇotÑeady\n");

851  
ªs
;

852 
SG_LIB_CAT_UNIT_ATTENTION
:

853 
	`Ârötf
(
°dîr
, "Unitáttention, unexpected (r)\n");

854  
ªs
;

855 
SG_LIB_CAT_ABORTED_COMMAND
:

856 
	`Ârötf
(
°dîr
, "Aborted command, unexpected (r)\n");

857  
ªs
;

858 
SG_LIB_CAT_MEDIUM_HARD_WITH_INFO
:

859 
SG_LIB_CAT_MEDIUM_HARD
:

860 
ªt
 = 
SG_LIB_CAT_MEDIUM_HARD
;

861 
îr_out
;

862 
SG_LIB_SYNTAX_ERROR
:

864 
	`Ârötf
(
°dîr
, ">> unexpectedÑesult=%d from "

865 "sg_ªad_low(Ë2\n", 
ªs
);

866 
ªt
 = 
ªs
;

867 
îr_out
;

870 
x„ºed
 +
blks
;

871 i‡(0 =
iÂ
->
c€
) {

873 i‡(
blks_ªadp
)

874 *
blks_ªadp
 = 
x„ºed
;

875  
ªt
;

877 i‡(
bs
 < 32) {

878 
	`Ârötf
(
°dîr
, ">> bs=%dÅoÿsmÆ»f‹Ñód_l⁄g\n", 
bs
);

881 
bp
 +(
blks
 * 
bs
);

882 
lba
 +
blks
;

883 i‡((0 !
iÂ
->
pdt
Ë|| (iÂ->
c€
 < 2)) {

884 
	`Ârötf
(
°dîr
, ">> uƒecovîedÑódÉº‹áàblk=%"
PRId64
", "

885 "pdt=%d, u£ zîos\n", 
lba
, 
iÂ
->
pdt
);

886 
	`mem£t
(
bp
, 0, 
bs
);

887 } i‡(
io_addr
 < 
UINT_MAX
) {

888 * 
bufÂ
;

889 
off£t
, 
∆
, 
r
, 
ok
, 
c‹r˘
;

891 
bufÂ
 = (*)
	`mÆloc
(
bs
 * 2);

892 i‡(
NULL
 =
bufÂ
) {

893 
	`Ârötf
(
°dîr
, ">> heapÖroblems\n");

896 
c‹r˘
 = (
iÂ
->
c€
 > 2) ? 1 : 0;

897 
ªs
 = 
	`sg_Œ_ªad_l⁄g10
(
sg_fd
, 0, 
c‹r˘
, 
lba
, 
bufÂ
,

898 
bs
 + 
ªad_l⁄g_blk_öc
, &
off£t
, 1,

899 
vîbo£
);

900 
ok
 = 0;

901 
ªs
) {

903 
ok
 = 1;

904 ++
ªad_l⁄gs
;

906 
SG_LIB_CAT_ILLEGAL_REQ_WITH_INFO
:

907 
∆
 = 
bs
 + 
ªad_l⁄g_blk_öc
 - 
off£t
;

908 i‡((
∆
 < 32Ë|| (∆ > (
bs
 * 2))) {

909 
	`Ârötf
(
°dîr
, ">>Ñead_long(10)Üen=%d unexpected\n",

910 
∆
);

914 
ªad_l⁄g_blk_öc
 = 
∆
 - 
bs
;

916 i‡(
vîbo£
)

917 
	`Ârötf
(
°dîr
, "ªad_l⁄g(10):ádju°edÜí=%d\n", 
∆
);

918 
r
 = 
	`sg_Œ_ªad_l⁄g10
(
sg_fd
, 0, 
c‹r˘
, 
lba
, 
bufÂ
, 
∆
,

919 &
off£t
, 1, 
vîbo£
);

920 i‡(0 =
r
) {

921 
ok
 = 1;

922 ++
ªad_l⁄gs
;

925 
	`Ârötf
(
°dîr
, ">> unexpectedÑesult=%d on second "

926 "ªad_l⁄g(10)\n", 
r
);

928 
SG_LIB_CAT_INVALID_OP
:

929 
	`Ârötf
(
°dîr
, ">>Ñead_long(10);Çot supported\n");

931 
SG_LIB_CAT_ILLEGAL_REQ
:

932 
	`Ârötf
(
°dîr
, ">>Ñead_long(10): bad cdb field\n");

934 
SG_LIB_CAT_NOT_READY
:

935 
	`Ârötf
(
°dîr
, ">>Ñead_long(10): deviceÇotÑeady\n");

937 
SG_LIB_CAT_UNIT_ATTENTION
:

938 
	`Ârötf
(
°dîr
, ">>Ñead_long(10): unitáttention\n");

940 
SG_LIB_CAT_ABORTED_COMMAND
:

941 
	`Ârötf
(
°dîr
, ">>Ñead_long(10):áborted command\n");

944 
	`Ârötf
(
°dîr
, ">>Ñód_l⁄g(10):ÖrobÀm (%d)\n", 
ªs
);

947 i‡(
ok
)

948 
	`mem˝y
(
bp
, 
bufÂ
, 
bs
);

950 
	`mem£t
(
bp
, 0, 
bs
);

951 
	`‰ì
(
bufÂ
);

953 
	`Ârötf
(
°dîr
, ">>Ñód_l⁄g(10Ëˇ¬Ÿ h™dÀ blk=%"
PRId64
", "

954 "u£ zîos\n", 
lba
);

955 
	`mem£t
(
bp
, 0, 
bs
);

957 ++
x„ºed
;

958 
bp
 +
bs
;

959 ++
lba
;

960 i‡((
c€_limô
 > 0Ë&& (++
c€_cou¡
 > coe_limit)) {

961 i‡(
blks_ªadp
)

962 *
blks_ªadp
 = 
x„ºed
 + 
blks
;

963 
	`Ârötf
(
°dîr
, ">> coe_limit on consecutiveÑeadsÉxceeded\n");

964  
SG_LIB_CAT_MEDIUM_HARD
;

967 i‡(
blks_ªadp
)

968 *
blks_ªadp
 = 
x„ºed
;

971 
îr_out
:

972 i‡(
iÂ
->
c€
) {

973 
	`mem£t
(
bp
, 0, 
bs
 * 
blks
);

974 
	`Ârötf
(
°dîr
, ">> u«bÀÅÿªadáàblk=%"
PRId64
" for "

975 "%d byãs, u£ zîos\n", 
lba
, 
bs
 * 
blks
);

976 i‡(
blks
 > 1)

977 
	`Ârötf
(
°dîr
, ">>ÅryÑeducing bptÅoÜimitÇumber "

980 i‡(
blks_ªadp
)

981 *
blks_ªadp
 = 
x„ºed
 + 
blks
;

982 i‡((
c€_limô
 > 0Ë&& (++
c€_cou¡
 > coe_limit)) {

983 
	`Ârötf
(
°dîr
, ">> coe_limit on consecutiveÑeadsÉxceeded\n");

984  
ªt
;

986  
may_c€
 ? 0 : 
ªt
;

988  
ªt
 ?Ñet : -1;

989 
	}
}

997 
	$sg_wrôe
(
sg_fd
, * 
buff
, 
blocks
, 
öt64_t
 
to_block
,

998 
bs
, c⁄° 
Êags_t
 * 
oÂ
, * 
di›
)

1000 
wrCmd
[
MAX_SCSI_CDBSZ
];

1001 
£n£Buff
[
SENSE_BUFF_LEN
];

1002 
sg_io_hdr
 
io_hdr
;

1003 
ªs
, 
k
, 
öfo_vÆid
;

1004 
uöt64_t
 
io_addr
 = 0;

1006 i‡(
	`sg_buûd_scsi_cdb
(
wrCmd
, 
oÂ
->
cdbsz
, 
blocks
, 
to_block
, 1, oÂ->
fua
,

1007 
oÂ
->
dpo
)) {

1008 
	`Ârötf
(
°dîr
, 
ME
 "bad w∏cdb buûd,Åo_block=%"
PRId64
", blocks=%d\n",

1009 
to_block
, 
blocks
);

1010  
SG_LIB_SYNTAX_ERROR
;

1013 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr
));

1014 
io_hdr
.
öãrÁ˚_id
 = 'S';

1015 
io_hdr
.
cmd_Àn
 = 
oÂ
->
cdbsz
;

1016 
io_hdr
.
cmdp
 = 
wrCmd
;

1017 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_TO_DEV
;

1018 
io_hdr
.
dx„r_Àn
 = 
bs
 * 
blocks
;

1019 
io_hdr
.
dx„Ω
 = 
buff
;

1020 
io_hdr
.
mx_sb_Àn
 = 
SENSE_BUFF_LEN
;

1021 
io_hdr
.
sbp
 = 
£n£Buff
;

1022 
io_hdr
.
timeout
 = 
DEF_TIMEOUT
;

1023 
io_hdr
.
∑ck_id
 = ()
to_block
;

1024 i‡(
di›
 && *diop)

1025 
io_hdr
.
Êags
 |
SG_FLAG_DIRECT_IO
;

1027 i‡(
vîbo£
 > 2) {

1028 
	`Ârötf
(
°dîr
, " write cdb: ");

1029 
k
 = 0; k < 
oÂ
->
cdbsz
; ++k)

1030 
	`Ârötf
(
°dîr
, "%02x ", 
wrCmd
[
k
]);

1031 
	`Ârötf
(
°dîr
, "\n");

1033 ((
ªs
 = 
	`io˘l
(
sg_fd
, 
SG_IO
, &
io_hdr
)Ë< 0Ë&& (
EINTR
 =
î∫o
))

1035 i‡(
ªs
 < 0) {

1036 i‡(
ENOMEM
 =
î∫o
)

1038 
	`≥º‹
("writing (SG_IO) on sg device,Érror");

1042 i‡(
vîbo£
 > 2)

1043 
	`Ârötf
(
°dîr
, " duøti⁄=%u ms\n", 
io_hdr
.
duøti⁄
);

1044 
ªs
 = 
	`sg_îr_ˇãg‹y3
(&
io_hdr
);

1045 
ªs
) {

1046 
SG_LIB_CAT_CLEAN
:

1048 
SG_LIB_CAT_RECOVERED
:

1049 ++
ªcovîed_îrs
;

1050 
öfo_vÆid
 = 
	`sg_gë_£n£_öfo_Êd
(
io_hdr
.
sbp
, io_hdr.
sb_Àn_wr
,

1051 &
io_addr
);

1052 i‡(
öfo_vÆid
) {

1053 
	`Ârötf
(
°dîr
, "Üba ofÜastÑecoveredÉrror inÅhis "

1054 "WRITE=0x%"
PRIx64
"\n", 
io_addr
);

1055 i‡(
vîbo£
 > 1)

1056 
	`sg_chk_n_¥öt3
("wrôög", &
io_hdr
, 1);

1058 
	`Ârötf
(
°dîr
, "RecoveredÉrror: [no info] writingÅo "

1059 "block=0x%"
PRIx64
",Çum=%d\n", 
to_block
, 
blocks
);

1060 
	`sg_chk_n_¥öt3
("wrôög", &
io_hdr
, 
vîbo£
 > 1);

1063 
SG_LIB_CAT_ABORTED_COMMAND
:

1064 
SG_LIB_CAT_UNIT_ATTENTION
:

1065 
	`sg_chk_n_¥öt3
("wrôög", &
io_hdr
, 
vîbo£
 > 1);

1066  
ªs
;

1067 
SG_LIB_CAT_NOT_READY
:

1068 ++
uƒecovîed_îrs
;

1069 
	`Ârötf
(
°dîr
, "deviceÇotÑeady (w)\n");

1070  
ªs
;

1071 
SG_LIB_CAT_MEDIUM_HARD
:

1073 
	`sg_chk_n_¥öt3
("wrôög", &
io_hdr
, 
vîbo£
 > 1);

1074 ++
uƒecovîed_îrs
;

1075 i‡(
oÂ
->
c€
) {

1076 
	`Ârötf
(
°dîr
, ">> ign‹edÉº‹†f‹ ouàblk=%"
PRId64
" for "

1077 "%d byãs\n", 
to_block
, 
bs
 * 
blocks
);

1080  
ªs
;

1082 i‡(
di›
 && *diop &&

1083 ((
io_hdr
.
öfo
 & 
SG_INFO_DIRECT_IO_MASK
Ë!
SG_INFO_DIRECT_IO
))

1084 *
di›
 = 0;

1086 
	}
}

1090 
	$ˇlc_duøti⁄_throughput
(
c⁄tö
)

1092 
timevÆ
 
íd_tm
, 
ªs_tm
;

1093 
a
, 
b
;

1094 
öt64_t
 
blks
;

1096 i‡(
°¨t_tm_vÆid
 && (
°¨t_tm
.
tv_£c
 || sèπ_tm.
tv_u£c
)) {

1097 
blks
 = (
ö_fuŒ
 > 
out_fuŒ
) ? in_full : out_full;

1098 
	`gëtimeofday
(&
íd_tm
, 
NULL
);

1099 
ªs_tm
.
tv_£c
 = 
íd_tm
.tv_£¯- 
°¨t_tm
.tv_sec;

1100 
ªs_tm
.
tv_u£c
 = 
íd_tm
.tv_u£¯- 
°¨t_tm
.tv_usec;

1101 i‡(
ªs_tm
.
tv_u£c
 < 0) {

1102 --
ªs_tm
.
tv_£c
;

1103 
ªs_tm
.
tv_u£c
 += 1000000;

1105 
a
 = 
ªs_tm
.
tv_£c
;

1106 
a
 +(0.000001 * 
ªs_tm
.
tv_u£c
);

1107 
b
 = ()
blk_sz
 * 
blks
;

1108 
	`Ârötf
(
°dîr
, "timeÅoÅransfer data%s: %d.%06d secs",

1109 (
c⁄tö
 ? " sÿÁr" : ""), ()
ªs_tm
.
tv_£c
,

1110 ()
ªs_tm
.
tv_u£c
);

1111 i‡((
a
 > 0.00001Ë&& (
b
 > 511))

1112 
	`Ârötf
(
°dîr
, "áà%.2‡MB/£c\n", 
b
 / (
a
 * 1000000.0));

1114 
	`Ârötf
(
°dîr
, "\n");

1116 
	}
}

1121 
	$¥o˚ss_Êags
(c⁄° * 
¨g
, 
Êags_t
 * 
Â
)

1123 
buff
[256];

1124 * 
˝
;

1125 * 
≈
;

1127 
	`°∫˝y
(
buff
, 
¨g
, (buff));

1128 
buff
[(buff) - 1] = '\0';

1129 i‡('\0' =
buff
[0]) {

1130 
	`Ârötf
(
°dîr
, "no flag found\n");

1133 
˝
 = 
buff
;

1135 
≈
 = 
	`°rchr
(
˝
, ',');

1136 i‡(
≈
)

1137 *
≈
++ = '\0';

1138 i‡(0 =
	`°rcmp
(
˝
, "append"))

1139 
Â
->
≠≥nd
 = 1;

1140 i‡(0 =
	`°rcmp
(
˝
, "coe"))

1141 ++
Â
->
c€
;

1142 i‡(0 =
	`°rcmp
(
˝
, "dio"))

1143 
Â
->
dio
 = 1;

1144 i‡(0 =
	`°rcmp
(
˝
, "direct"))

1145 
Â
->
dúe˘
 = 1;

1146 i‡(0 =
	`°rcmp
(
˝
, "dpo"))

1147 
Â
->
dpo
 = 1;

1148 i‡(0 =
	`°rcmp
(
˝
, "dsync"))

1149 ++
Â
->
dsync
;

1150 i‡(0 =
	`°rcmp
(
˝
, "excl"))

1151 
Â
->
ex˛
 = 1;

1152 i‡(0 =
	`°rcmp
(
˝
, "fua"))

1153 ++
Â
->
fua
;

1154 i‡(0 =
	`°rcmp
(
˝
, "nocache"))

1155 ++
Â
->
noˇche
;

1156 i‡(0 =
	`°rcmp
(
˝
, "null"))

1158 i‡(0 =
	`°rcmp
(
˝
, "sgio"))

1159 
Â
->
sgio
 = 1;

1160 i‡(0 =
	`°rcmp
(
˝
, "sparse"))

1161 ++
Â
->
•¨£
;

1162 i‡(0 =
	`°rcmp
(
˝
, "flock"))

1163 ++
Â
->
Êock
;

1165 
	`Ârötf
(
°dîr
, "uƒecogni£d fœg: %s\n", 
˝
);

1168 
˝
 = 
≈
;

1169 } 
˝
);

1171 
	}
}

1176 
	$¥o˚ss_c⁄v
(c⁄° * 
¨g
, 
Êags_t
 * 
iÂ
, Êags_à* 
oÂ
)

1178 
buff
[256];

1179 * 
˝
;

1180 * 
≈
;

1182 
	`°∫˝y
(
buff
, 
¨g
, (buff));

1183 
buff
[(buff) - 1] = '\0';

1184 i‡('\0' =
buff
[0]) {

1185 
	`Ârötf
(
°dîr
, "no conversions found\n");

1188 
˝
 = 
buff
;

1190 
≈
 = 
	`°rchr
(
˝
, ',');

1191 i‡(
≈
)

1192 *
≈
++ = '\0';

1194 i‡(0 =
	`°rcmp
(
˝
, "fdatasync"))

1195 ++
oÂ
->
fd©async
;

1196 i‡(0 =
	`°rcmp
(
˝
, "fsync"))

1197 ++
oÂ
->
fsync
;

1199 i‡(0 =
	`°rcmp
(
˝
, "noerror"))

1200 ++
iÂ
->
c€
;

1201 i‡(0 =
	`°rcmp
(
˝
, "notrunc"))

1203 i‡(0 =
	`°rcmp
(
˝
, "null"))

1206 i‡(0 =
	`°rcmp
(
˝
, "sparing"))

1207 ++
oÂ
->
•¨ög
;

1209 i‡(0 =
	`°rcmp
(
˝
, "sparse"))

1210 ++
oÂ
->
•¨£
;

1211 i‡(0 =
	`°rcmp
(
˝
, "sync"))

1215 i‡(0 =
	`°rcmp
(
˝
, "trunc"))

1216 ++
oÂ
->
åunc
;

1219 
	`Ârötf
(
°dîr
, "uƒecogni£d fœg: %s\n", 
˝
);

1222 
˝
 = 
≈
;

1223 } 
˝
);

1225 
	}
}

1231 
	$›í_if
(c⁄° * 
öf
, 
öt64_t
 
skù
, 
b±
, 
Êags_t
 * 
iÂ
,

1232 * 
ö_ty≥p
, 
vîbo£
)

1234 
öfd
, 
Êags
, 
Ê
, 
t
, 
vîb
, 
ªs
;

1235 
ebuff
[
EBUFF_SZ
];

1236 
sg_sim∂e_öquúy_ª•
 
sú
;

1238 
vîb
 = (
vîbo£
 ? verbose - 1: 0);

1239 *
ö_ty≥p
 = 
	`dd_fûëy≥
(
öf
);

1240 i‡(
vîbo£
)

1241 
	`Ârötf
(
°dîr
, " >> Input fileÅype: %s\n",

1242 
	`dd_fûëy≥_°r
(*
ö_ty≥p
, 
ebuff
));

1243 i‡(
FT_ERROR
 & *
ö_ty≥p
) {

1244 
	`Ârötf
(
°dîr
, 
ME
 "u«bÀác˚s†%s\n", 
öf
);

1245 
fûe_îr
;

1246 } i‡((
FT_BLOCK
 & *
ö_ty≥p
Ë&& 
iÂ
->
sgio
)

1247 *
ö_ty≥p
 |
FT_SG
;

1249 i‡(
FT_ST
 & *
ö_ty≥p
) {

1250 
	`Ârötf
(
°dîr
, 
ME
 "u«bÀÅÿu£ scsòè≥ devi˚ %s\n", 
öf
);

1251 
fûe_îr
;

1252 } i‡(
FT_SG
 & *
ö_ty≥p
) {

1253 
Êags
 = 
O_NONBLOCK
;

1254 i‡(
iÂ
->
dúe˘
)

1255 
Êags
 |
O_DIRECT
;

1256 i‡(
iÂ
->
ex˛
)

1257 
Êags
 |
O_EXCL
;

1258 i‡(
iÂ
->
dsync
)

1259 
Êags
 |
O_SYNC
;

1260 
Ê
 = 
O_RDWR
;

1261 i‡((
öfd
 = 
	`›í
(
öf
, 
Ê
 | 
Êags
)) < 0) {

1262 
Ê
 = 
O_RDONLY
;

1263 i‡((
öfd
 = 
	`›í
(
öf
, 
Ê
 | 
Êags
)) < 0) {

1264 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

1265 
ME
 "couldÇŸ o≥¿%†f‹ sgÑódög", 
öf
);

1266 
	`≥º‹
(
ebuff
);

1267 
fûe_îr
;

1270 i‡(
vîbo£
)

1271 
	`Ârötf
(
°dîr
, " open input(sg_io), flags=0x%x\n",

1272 
Ê
 | 
Êags
);

1273 i‡(
	`sg_sim∂e_öquúy
(
öfd
, &
sú
, 0, 
vîb
)) {

1274 
	`Ârötf
(
°dîr
, "INQUIRY faûed o¿%s\n", 
öf
);

1275 
Ÿhî_îr
;

1277 
iÂ
->
pdt
 = 
sú
.
≥rùhîÆ_ty≥
;

1278 i‡(
vîbo£
)

1279 
	`Ârötf
(
°dîr
, " %s: %.8s %.16s %.4s [pdt=%d]\n",

1280 
öf
, 
sú
.
víd‹
, sú.
¥odu˘
, sú.
ªvisi⁄
, 
iÂ
->
pdt
);

1281 i‡(! (
FT_BLOCK
 & *
ö_ty≥p
)) {

1282 
t
 = 
blk_sz
 * 
b±
;

1283 
ªs
 = 
	`io˘l
(
öfd
, 
SG_SET_RESERVED_SIZE
, &
t
);

1284 i‡(
ªs
 < 0)

1285 
	`≥º‹
(
ME
 "SG_SET_RESERVED_SIZEÉrror");

1286 
ªs
 = 
	`io˘l
(
öfd
, 
SG_GET_VERSION_NUM
, &
t
);

1287 i‡((
ªs
 < 0Ë|| (
t
 < 30000)) {

1288 i‡(
FT_BLOCK
 & *
ö_ty≥p
)

1289 
	`Ârötf
(
°dîr
, 
ME
 "SG_IO unsupported onÅhis block"

1292 
	`Ârötf
(
°dîr
, 
ME
 "sg driverÖriorÅo 3.x.y\n");

1293 
fûe_îr
;

1297 
Êags
 = 
O_RDONLY
;

1298 i‡(
iÂ
->
dúe˘
)

1299 
Êags
 |
O_DIRECT
;

1300 i‡(
iÂ
->
ex˛
)

1301 
Êags
 |
O_EXCL
;

1302 i‡(
iÂ
->
dsync
)

1303 
Êags
 |
O_SYNC
;

1304 
öfd
 = 
	`›í
(
öf
, 
Êags
);

1305 i‡(
öfd
 < 0) {

1306 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

1307 
ME
 "couldÇŸ o≥¿%†f‹Ñódög", 
öf
);

1308 
	`≥º‹
(
ebuff
);

1309 
fûe_îr
;

1311 i‡(
vîbo£
)

1312 
	`Ârötf
(
°dîr
, " open input, flags=0x%x\n",

1313 
Êags
);

1314 i‡(
skù
 > 0) {

1315 
off64_t
 
off£t
 = 
skù
;

1317 
off£t
 *
blk_sz
;

1318 i‡(
	`l£ek64
(
öfd
, 
off£t
, 
SEEK_SET
) < 0) {

1319 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, 
ME
 "couldn't skipÅo "

1320 "ªquúedÖosôi⁄ o¿%s", 
öf
);

1321 
	`≥º‹
(
ebuff
);

1322 
fûe_îr
;

1324 i‡(
vîbo£
)

1325 
	`Ârötf
(
°dîr
, " >> skip:Üseek64 SEEK_SET, "

1326 "byã off£t=0x%"
PRIx64
"\n",

1327 (
uöt64_t
)
off£t
);

1329 #ifde‡
HAVE_POSIX_FADVISE


1330 i‡(
iÂ
->
noˇche
) {

1331 
π
;

1333 
π
 = 
	`posix_Ádvi£
(
öfd
, 0, 0, 
POSIX_FADV_SEQUENTIAL
);

1334 i‡(
π
)

1335 
	`Ârötf
(
°dîr
, "open_if:Öosix_fadvise(SEQUENTIAL), "

1336 "îr=%d\n", 
π
);

1341 i‡(
iÂ
->
Êock
) {

1342 
ªs
 = 
	`Êock
(
öfd
, 
LOCK_EX
 | 
LOCK_NB
);

1343 i‡(
ªs
 < 0) {

1344 
	`˛o£
(
öfd
);

1345 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, 
ME
 "flock(LOCK_EX | LOCK_NB) on %s "

1346 "Áûed", 
öf
);

1347 
	`≥º‹
(
ebuff
);

1348  -
SG_LIB_FLOCK_ERR
;

1351  
öfd
;

1353 
fûe_îr
:

1354  -
SG_LIB_FILE_ERROR
;

1355 
Ÿhî_îr
:

1356  -
SG_LIB_CAT_OTHER
;

1357 
	}
}

1364 
	$›í_of
(c⁄° * 
outf
, 
öt64_t
 
£ek
, 
b±
, 
Êags_t
 * 
oÂ
,

1365 * 
out_ty≥p
, 
vîbo£
)

1367 
outfd
, 
Êags
, 
t
, 
vîb
, 
ªs
;

1368 
ebuff
[
EBUFF_SZ
];

1369 
sg_sim∂e_öquúy_ª•
 
sú
;

1371 
vîb
 = (
vîbo£
 ? verbose - 1: 0);

1372 *
out_ty≥p
 = 
	`dd_fûëy≥
(
outf
);

1373 i‡(
vîbo£
)

1374 
	`Ârötf
(
°dîr
, " >> Output fileÅype: %s\n",

1375 
	`dd_fûëy≥_°r
(*
out_ty≥p
, 
ebuff
));

1377 i‡((
FT_BLOCK
 & *
out_ty≥p
Ë&& 
oÂ
->
sgio
)

1378 *
out_ty≥p
 |
FT_SG
;

1380 i‡(
FT_ST
 & *
out_ty≥p
) {

1381 
	`Ârötf
(
°dîr
, 
ME
 "u«bÀÅÿu£ scsòè≥ devi˚ %s\n", 
outf
);

1382 
fûe_îr
;

1383 } i‡(
FT_SG
 & *
out_ty≥p
) {

1384 
Êags
 = 
O_RDWR
 | 
O_NONBLOCK
;

1385 i‡(
oÂ
->
dúe˘
)

1386 
Êags
 |
O_DIRECT
;

1387 i‡(
oÂ
->
ex˛
)

1388 
Êags
 |
O_EXCL
;

1389 i‡(
oÂ
->
dsync
)

1390 
Êags
 |
O_SYNC
;

1391 i‡((
outfd
 = 
	`›í
(
outf
, 
Êags
)) < 0) {

1392 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

1393 
ME
 "couldÇŸ o≥¿%†f‹ sg wrôög", 
outf
);

1394 
	`≥º‹
(
ebuff
);

1395 
fûe_îr
;

1397 i‡(
vîbo£
)

1398 
	`Ârötf
(
°dîr
, " open output(sg_io), flags=0x%x\n",

1399 
Êags
);

1400 i‡(
	`sg_sim∂e_öquúy
(
outfd
, &
sú
, 0, 
vîb
)) {

1401 
	`Ârötf
(
°dîr
, "INQUIRY faûed o¿%s\n", 
outf
);

1402 
Ÿhî_îr
;

1404 
oÂ
->
pdt
 = 
sú
.
≥rùhîÆ_ty≥
;

1405 i‡(
vîbo£
)

1406 
	`Ârötf
(
°dîr
, " %s: %.8s %.16s %.4s [pdt=%d]\n",

1407 
outf
, 
sú
.
víd‹
, sú.
¥odu˘
, sú.
ªvisi⁄
, 
oÂ
->
pdt
);

1408 i‡(! (
FT_BLOCK
 & *
out_ty≥p
)) {

1409 
t
 = 
blk_sz
 * 
b±
;

1410 
ªs
 = 
	`io˘l
(
outfd
, 
SG_SET_RESERVED_SIZE
, &
t
);

1411 i‡(
ªs
 < 0)

1412 
	`≥º‹
(
ME
 "SG_SET_RESERVED_SIZEÉrror");

1413 
ªs
 = 
	`io˘l
(
outfd
, 
SG_GET_VERSION_NUM
, &
t
);

1414 i‡((
ªs
 < 0Ë|| (
t
 < 30000)) {

1415 
	`Ârötf
(
°dîr
, 
ME
 "sg driverÖriorÅo 3.x.y\n");

1416 
fûe_îr
;

1419 } i‡(
FT_DEV_NULL
 & *
out_ty≥p
)

1420 
outfd
 = -1;

1422 i‡(! (
FT_RAW
 & *
out_ty≥p
)) {

1423 
Êags
 = 
O_WRONLY
 | 
O_CREAT
;

1424 i‡(
oÂ
->
dúe˘
)

1425 
Êags
 |
O_DIRECT
;

1426 i‡(
oÂ
->
ex˛
)

1427 
Êags
 |
O_EXCL
;

1428 i‡(
oÂ
->
dsync
)

1429 
Êags
 |
O_SYNC
;

1430 i‡(
oÂ
->
≠≥nd
)

1431 
Êags
 |
O_APPEND
;

1432 i‡((
outfd
 = 
	`›í
(
outf
, 
Êags
, 0666)) < 0) {

1433 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

1434 
ME
 "couldÇŸ o≥¿%†f‹ wrôög", 
outf
);

1435 
	`≥º‹
(
ebuff
);

1436 
fûe_îr
;

1439 
Êags
 = 
O_WRONLY
;

1440 i‡(
oÂ
->
dúe˘
)

1441 
Êags
 |
O_DIRECT
;

1442 i‡(
oÂ
->
ex˛
)

1443 
Êags
 |
O_EXCL
;

1444 i‡(
oÂ
->
dsync
)

1445 
Êags
 |
O_SYNC
;

1446 i‡((
outfd
 = 
	`›í
(
outf
, 
Êags
)) < 0) {

1447 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

1448 
ME
 "couldÇŸ o≥¿%†f‹Ñaw wrôög", 
outf
);

1449 
	`≥º‹
(
ebuff
);

1450 
fûe_îr
;

1453 i‡(
vîbo£
)

1454 
	`Ârötf
(
°dîr
, " %s output, flags=0x%x\n",

1455 ((
O_CREAT
 & 
Êags
) ? "create" : "open"), flags);

1456 i‡(
£ek
 > 0) {

1457 
off64_t
 
off£t
 = 
£ek
;

1459 
off£t
 *
blk_sz
;

1460 i‡(
	`l£ek64
(
outfd
, 
off£t
, 
SEEK_SET
) < 0) {

1461 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

1462 
ME
 "couldn'à£ekÅÿªquúedÖosôi⁄ o¿%s", 
outf
);

1463 
	`≥º‹
(
ebuff
);

1464 
fûe_îr
;

1466 i‡(
vîbo£
)

1467 
	`Ârötf
(
°dîr
, " >> seek:Üseek64 SEEK_SET, "

1468 "byã off£t=0x%"
PRIx64
"\n",

1469 (
uöt64_t
)
off£t
);

1472 i‡(
oÂ
->
Êock
) {

1473 
ªs
 = 
	`Êock
(
outfd
, 
LOCK_EX
 | 
LOCK_NB
);

1474 i‡(
ªs
 < 0) {

1475 
	`˛o£
(
outfd
);

1476 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, 
ME
 "flock(LOCK_EX | LOCK_NB) on %s "

1477 "Áûed", 
outf
);

1478 
	`≥º‹
(
ebuff
);

1479  -
SG_LIB_FLOCK_ERR
;

1482  
outfd
;

1484 
fûe_îr
:

1485  -
SG_LIB_FILE_ERROR
;

1486 
Ÿhî_îr
:

1487  -
SG_LIB_CAT_OTHER
;

1488 
	}
}

1492 
	$maö
(
¨gc
, * 
¨gv
[])

1494 
öt64_t
 
skù
 = 0;

1495 
öt64_t
 
£ek
 = 0;

1496 
öt64_t
 
out2_off
 = 0;

1497 
ibs
 = 0;

1498 
obs
 = 0;

1499 
b±
 = 
DEF_BLOCKS_PER_TRANSFER
;

1500 
b±_giví
 = 0;

1501 
°r
[
STR_SZ
];

1502 * 
key
;

1503 * 
buf
;

1504 
öf
[
INOUTF_SZ
];

1505 
ö_ty≥
 = 
FT_OTHER
;

1506 
outf
[
INOUTF_SZ
];

1507 
out2f
[
INOUTF_SZ
];

1508 
out_ty≥
 = 
FT_OTHER
;

1509 
out2_ty≥
 = 
FT_OTHER
;

1510 
dio_öcom∂ëe
 = 0;

1511 
cdbsz_giví
 = 0;

1512 
do_sync
 = 0;

1513 
blocks
 = 0;

1514 
ªs
, 
k
, 
t
, 
buf_sz
, 
dio_tmp
, 
fú°
, 
blocks_≥r
;

1515 
öfd
, 
outfd
, 
out2fd
, 
ªåõs_tmp
, 
blks_ªad
;

1516 
byãs_ªad
, 
byãs_of2
, 
byãs_of
;

1517 * 
wrkBuff
;

1518 * 
wrkPos
;

1519 
öt64_t
 
ö_num_£˘
 = -1;

1520 
öt64_t
 
out_num_£˘
 = -1;

1521 
ö_£˘_sz
, 
out_£˘_sz
;

1522 
ebuff
[
EBUFF_SZ
];

1523 
•¨£_skù
 = 0;

1524 
≥nu…_•¨£_skù
 = 0;

1525 
≥nu…_blocks
 = 0;

1526 
ªt
 = 0;

1528 
öf
[0] = '\0';

1529 
outf
[0] = '\0';

1530 
out2f
[0] = '\0';

1531 
iÊag
.
cdbsz
 = 
DEF_SCSI_CDBSZ
;

1532 
oÊag
.
cdbsz
 = 
DEF_SCSI_CDBSZ
;

1533 i‡(
¨gc
 < 2) {

1534 
	`Ârötf
(
°dîr
,

1536 
	`Ârötf
(
°dîr
, "For more information use '--help'\n");

1537  
SG_LIB_SYNTAX_ERROR
;

1540 
k
 = 1; k < 
¨gc
; k++) {

1541 i‡(
¨gv
[
k
]) {

1542 
	`°∫˝y
(
°r
, 
¨gv
[
k
], 
STR_SZ
);

1543 
°r
[
STR_SZ
 - 1] = '\0';

1546 
key
 = 
°r
, 
buf
 = key; *buf && *buf != '=';)

1547 
buf
++;

1548 i‡(*
buf
)

1549 *
buf
++ = '\0';

1550 i‡(0 =
	`°∫cmp
(
key
, "app", 3)) {

1551 
iÊag
.
≠≥nd
 = 
	`sg_gë_num
(
buf
);

1552 
oÊag
.
≠≥nd
 = 
iÊag
.append;

1553 } i‡(0 =
	`°rcmp
(
key
, "blk_sgio")) {

1554 
iÊag
.
sgio
 = 
	`sg_gë_num
(
buf
);

1555 
oÊag
.
sgio
 = 
iÊag
.sgio;

1556 } i‡(0 =
	`°rcmp
(
key
, "bpt")) {

1557 
b±
 = 
	`sg_gë_num
(
buf
);

1558 i‡(-1 =
b±
) {

1559 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'bpt='\n");

1560  
SG_LIB_SYNTAX_ERROR
;

1562 
b±_giví
 = 1;

1563 } i‡(0 =
	`°rcmp
(
key
, "bs")) {

1564 
blk_sz
 = 
	`sg_gë_num
(
buf
);

1565 i‡(-1 =
blk_sz
) {

1566 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'bs='\n");

1567  
SG_LIB_SYNTAX_ERROR
;

1569 } i‡(0 =
	`°rcmp
(
key
, "cdbsz")) {

1570 
iÊag
.
cdbsz
 = 
	`sg_gë_num
(
buf
);

1571 
oÊag
.
cdbsz
 = 
iÊag
.cdbsz;

1572 
cdbsz_giví
 = 1;

1573 } i‡(0 =
	`°rcmp
(
key
, "coe")) {

1574 
iÊag
.
c€
 = 
	`sg_gë_num
(
buf
);

1575 
oÊag
.
c€
 = 
iÊag
.coe;

1576 } i‡(0 =
	`°rcmp
(
key
, "coe_limit")) {

1577 
c€_limô
 = 
	`sg_gë_num
(
buf
);

1578 i‡(-1 =
c€_limô
) {

1579 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'coe_limit='\n");

1580  
SG_LIB_SYNTAX_ERROR
;

1582 } i‡(0 =
	`°rcmp
(
key
, "conv")) {

1583 i‡(
	`¥o˚ss_c⁄v
(
buf
, &
iÊag
, &
oÊag
)) {

1584 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'conv='\n");

1585  
SG_LIB_SYNTAX_ERROR
;

1587 } i‡(0 =
	`°rcmp
(
key
, "count")) {

1588 i‡(0 !
	`°rcmp
("-1", 
buf
)) {

1589 
dd_cou¡
 = 
	`sg_gë_Œnum
(
buf
);

1590 i‡(-1LL =
dd_cou¡
) {

1591 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'count='\n");

1592  
SG_LIB_SYNTAX_ERROR
;

1595 } i‡(0 =
	`°rcmp
(
key
, "dio")) {

1596 
oÊag
.
dio
 = 
	`sg_gë_num
(
buf
);

1597 
iÊag
.
dio
 = 
oÊag
.dio;

1598 } i‡(0 =
	`°rcmp
(
key
, "fua")) {

1599 
t
 = 
	`sg_gë_num
(
buf
);

1600 
oÊag
.
fua
 = (
t
 & 1) ? 1 : 0;

1601 
iÊag
.
fua
 = (
t
 & 2) ? 1 : 0;

1602 } i‡(0 =
	`°rcmp
(
key
, "ibs"))

1603 
ibs
 = 
	`sg_gë_num
(
buf
);

1604 i‡(
	`°rcmp
(
key
, "if") == 0) {

1605 i‡('\0' !
öf
[0]) {

1606 
	`Ârötf
(
°dîr
, "Second IFILEárgument??\n");

1607  
SG_LIB_SYNTAX_ERROR
;

1609 
	`°∫˝y
(
öf
, 
buf
, 
INOUTF_SZ
);

1610 } i‡(0 =
	`°rcmp
(
key
, "iflag")) {

1611 i‡(
	`¥o˚ss_Êags
(
buf
, &
iÊag
)) {

1612 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'iflag='\n");

1613  
SG_LIB_SYNTAX_ERROR
;

1615 } i‡(0 =
	`°rcmp
(
key
, "obs"))

1616 
obs
 = 
	`sg_gë_num
(
buf
);

1617 i‡(0 =
	`°rcmp
(
key
, "odir")) {

1618 
iÊag
.
dúe˘
 = 
	`sg_gë_num
(
buf
);

1619 
oÊag
.
dúe˘
 = 
iÊag
.direct;

1620 } i‡(
	`°rcmp
(
key
, "of") == 0) {

1621 i‡('\0' !
outf
[0]) {

1622 
	`Ârötf
(
°dîr
, "Second OFILEárgument??\n");

1623  
SG_LIB_SYNTAX_ERROR
;

1625 
	`°∫˝y
(
outf
, 
buf
, 
INOUTF_SZ
);

1626 } i‡(
	`°rcmp
(
key
, "of2") == 0) {

1627 i‡('\0' !
out2f
[0]) {

1628 
	`Ârötf
(
°dîr
, "Second OFILE2árgument??\n");

1629  
SG_LIB_SYNTAX_ERROR
;

1631 
	`°∫˝y
(
out2f
, 
buf
, 
INOUTF_SZ
);

1632 } i‡(0 =
	`°rcmp
(
key
, "oflag")) {

1633 i‡(
	`¥o˚ss_Êags
(
buf
, &
oÊag
)) {

1634 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'oflag='\n");

1635  
SG_LIB_SYNTAX_ERROR
;

1637 } i‡(0 =
	`°rcmp
(
key
, "retries")) {

1638 
iÊag
.
ªåõs
 = 
	`sg_gë_num
(
buf
);

1639 
oÊag
.
ªåõs
 = 
iÊag
.retries;

1640 i‡(-1 =
iÊag
.
ªåõs
) {

1641 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'retries='\n");

1642  
SG_LIB_SYNTAX_ERROR
;

1644 } i‡(0 =
	`°rcmp
(
key
, "seek")) {

1645 
£ek
 = 
	`sg_gë_Œnum
(
buf
);

1646 i‡(-1LL =
£ek
) {

1647 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'seek='\n");

1648  
SG_LIB_SYNTAX_ERROR
;

1650 } i‡(0 =
	`°rcmp
(
key
, "skip")) {

1651 
skù
 = 
	`sg_gë_Œnum
(
buf
);

1652 i‡(-1LL =
skù
) {

1653 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'skip='\n");

1654  
SG_LIB_SYNTAX_ERROR
;

1656 } i‡(0 =
	`°rcmp
(
key
, "sync"))

1657 
do_sync
 = 
	`sg_gë_num
(
buf
);

1658 i‡(0 =
	`°rcmp
(
key
, "time"))

1659 
do_time
 = 
	`sg_gë_num
(
buf
);

1660 i‡(0 =
	`°∫cmp
(
key
, "verb", 4))

1661 
vîbo£
 = 
	`sg_gë_num
(
buf
);

1662 i‡((0 =
	`°∫cmp
(
key
, "--help", 7)) ||

1663 (0 =
	`°∫cmp
(
key
, "-h", 2)) ||

1664 (0 =
	`°rcmp
(
key
, "-?"))) {

1665 
	`ußge
();

1667 } i‡((0 =
	`°∫cmp
(
key
, "--vers", 6)) ||

1668 (0 =
	`°rcmp
(
key
, "-V"))) {

1669 
	`Ârötf
(
°dîr
, 
ME
 "%s\n", 
vîsi⁄_°r
);

1672 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%s'\n", 
key
);

1673 
	`Ârötf
(
°dîr
, "For more information use '--help'\n");

1674  
SG_LIB_SYNTAX_ERROR
;

1677 i‡(
blk_sz
 <= 0) {

1678 
blk_sz
 = 
DEF_BLOCK_SIZE
;

1679 
	`Ârötf
(
°dîr
, "Assume default 'bs' (block size) of %d bytes\n",

1680 
blk_sz
);

1682 i‡((
ibs
 && (ib†!
blk_sz
)Ë|| (
obs
 && (obs != blk_sz))) {

1683 
	`Ârötf
(
°dîr
, "If 'ibs' or 'obs' given must be sameás 'bs'\n");

1684 
	`Ârötf
(
°dîr
, "For more information use '--help'\n");

1685  
SG_LIB_SYNTAX_ERROR
;

1687 i‡((
skù
 < 0Ë|| (
£ek
 < 0)) {

1688 
	`Ârötf
(
°dîr
, "skipánd seek cannot beÇegative\n");

1689  
SG_LIB_SYNTAX_ERROR
;

1691 i‡((
oÊag
.
≠≥nd
 > 0Ë&& (
£ek
 > 0)) {

1692 
	`Ârötf
(
°dîr
, "Can't use botháppendánd seek switches\n");

1693  
SG_LIB_SYNTAX_ERROR
;

1695 i‡(
b±
 < 1) {

1696 
	`Ârötf
(
°dîr
, "bpt must be greaterÅhan 0\n");

1697  
SG_LIB_SYNTAX_ERROR
;

1699 i‡(
iÊag
.
•¨£
)

1700 
	`Ârötf
(
°dîr
, "sparse flag ignored for iflag\n");

1705 i‡((
blk_sz
 >2048Ë&& (0 =
b±_giví
))

1706 
b±
 = 
DEF_BLOCKS_PER_2048TRANSFER
;

1707 #ifde‡
SG_DEBUG


1708 
	`Ârötf
(
°dîr
, 
ME
 "if=%†skù=%" 
PRId64
 " of=%s seek=%" PRId64

1709 " cou¡=%" 
PRId64
 "\n", 
öf
, 
skù
, 
outf
, 
£ek
, 
dd_cou¡
);

1711 
	`ö°Æl_h™dÀr
(
SIGINT
, 
öãºu±_h™dÀr
);

1712 
	`ö°Æl_h™dÀr
(
SIGQUIT
, 
öãºu±_h™dÀr
);

1713 
	`ö°Æl_h™dÀr
(
SIGPIPE
, 
öãºu±_h™dÀr
);

1714 
	`ö°Æl_h™dÀr
(
SIGUSR1
, 
sigöfo_h™dÀr
);

1716 
öfd
 = 
STDIN_FILENO
;

1717 
outfd
 = 
STDOUT_FILENO
;

1718 
iÊag
.
pdt
 = -1;

1719 
oÊag
.
pdt
 = -1;

1720 i‡(
öf
[0] && ('-' != inf[0])) {

1721 
öfd
 = 
	`›í_if
(
öf
, 
skù
, 
b±
, &
iÊag
, &
ö_ty≥
, 
vîbo£
);

1722 i‡(
öfd
 < 0)

1723  -
öfd
;

1726 i‡(
outf
[0] && ('-' != outf[0])) {

1727 
outfd
 = 
	`›í_of
(
outf
, 
£ek
, 
b±
, &
oÊag
, &
out_ty≥
, 
vîbo£
);

1728 i‡(
outfd
 < -1)

1729  -
outfd
;

1732 i‡(
out2f
[0]) {

1733 
out2_ty≥
 = 
	`dd_fûëy≥
(
out2f
);

1734 i‡((
out2fd
 = 
	`›í
(
out2f
, 
O_WRONLY
 | 
O_CREAT
, 0666)) < 0) {

1735 
ªs
 = 
î∫o
;

1736 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

1737 
ME
 "couldÇŸ o≥¿%†f‹ wrôög", 
out2f
);

1738 
	`≥º‹
(
ebuff
);

1739  
ªs
;

1742 
out2fd
 = -1;

1744 i‡((
STDIN_FILENO
 =
öfd
Ë&& (
STDOUT_FILENO
 =
outfd
)) {

1745 
	`Ârötf
(
°dîr
,

1747 
	`Ârötf
(
°dîr
, "For more information use '--help'\n");

1748  
SG_LIB_SYNTAX_ERROR
;

1750 i‡(
oÊag
.
•¨£
) {

1751 i‡(
STDOUT_FILENO
 =
outfd
) {

1752 
	`Ârötf
(
°dîr
, "oflag=sparseÇeeds seekable output file\n");

1753  
SG_LIB_SYNTAX_ERROR
;

1757 i‡((
dd_cou¡
 < 0Ë|| ((
vîbo£
 > 0) && (0 == dd_count))) {

1758 
ö_num_£˘
 = -1;

1759 
ö_£˘_sz
 = -1;

1760 i‡(
FT_SG
 & 
ö_ty≥
) {

1761 
ªs
 = 
	`scsi_ªad_ˇ∑côy
(
öfd
, &
ö_num_£˘
, &
ö_£˘_sz
);

1762 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
) {

1763 
	`Ârötf
(
°dîr
, "Unitáttention (readcap in), continuing\n");

1764 
ªs
 = 
	`scsi_ªad_ˇ∑côy
(
öfd
, &
ö_num_£˘
, &
ö_£˘_sz
);

1765 } i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
) {

1766 
	`Ârötf
(
°dîr
, "Aborted command (readcap in), continuing\n");

1767 
ªs
 = 
	`scsi_ªad_ˇ∑côy
(
öfd
, &
ö_num_£˘
, &
ö_£˘_sz
);

1769 i‡(0 !
ªs
) {

1770 i‡(
ªs
 =
SG_LIB_CAT_INVALID_OP
)

1771 
	`Ârötf
(
°dîr
, "read capacityÇot supported on %s\n",

1772 
öf
);

1773 i‡(
ªs
 =
SG_LIB_CAT_NOT_READY
)

1774 
	`Ârötf
(
°dîr
, "read capacity failed on %s -Çot "

1775 "ªady\n", 
öf
);

1777 
	`Ârötf
(
°dîr
, "U«bÀÅÿªad c≠acôy o¿%s\n", 
öf
);

1778 
ö_num_£˘
 = -1;

1779 } i‡(
ö_£˘_sz
 !
blk_sz
)

1780 
	`Ârötf
(
°dîr
, ">> warning: block size on %s confusion: "

1781 "bs=%d, devi˚ cœims=%d\n", 
öf
, 
blk_sz
, 
ö_£˘_sz
);

1782 } i‡(
FT_BLOCK
 & 
ö_ty≥
) {

1783 i‡(0 !
	`ªad_blkdev_ˇ∑côy
(
öfd
, &
ö_num_£˘
, &
ö_£˘_sz
)) {

1784 
	`Ârötf
(
°dîr
, "U«bÀÅÿªad block c≠acôy o¿%s\n", 
öf
);

1785 
ö_num_£˘
 = -1;

1787 i‡(
blk_sz
 !
ö_£˘_sz
) {

1788 
	`Ârötf
(
°dîr
, "block size on %s confusion: bs=%d, "

1789 "devi˚ cœims=%d\n", 
öf
, 
blk_sz
, 
ö_£˘_sz
);

1790 
ö_num_£˘
 = -1;

1793 i‡(
ö_num_£˘
 > 
skù
)

1794 
ö_num_£˘
 -
skù
;

1796 
out_num_£˘
 = -1;

1797 
out_£˘_sz
 = -1;

1798 i‡(
FT_SG
 & 
out_ty≥
) {

1799 
ªs
 = 
	`scsi_ªad_ˇ∑côy
(
outfd
, &
out_num_£˘
, &
out_£˘_sz
);

1800 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
) {

1801 
	`Ârötf
(
°dîr
, "Unitáttention (readcap out), continuing\n");

1802 
ªs
 = 
	`scsi_ªad_ˇ∑côy
(
outfd
, &
out_num_£˘
, &
out_£˘_sz
);

1803 } i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
) {

1804 
	`Ârötf
(
°dîr
,

1806 
ªs
 = 
	`scsi_ªad_ˇ∑côy
(
outfd
, &
out_num_£˘
, &
out_£˘_sz
);

1808 i‡(0 !
ªs
) {

1809 i‡(
ªs
 =
SG_LIB_CAT_INVALID_OP
)

1810 
	`Ârötf
(
°dîr
, "read capacityÇot supported on %s\n",

1811 
outf
);

1813 
	`Ârötf
(
°dîr
, "U«bÀÅÿªad c≠acôy o¿%s\n", 
outf
);

1814 
out_num_£˘
 = -1;

1815 } i‡(
blk_sz
 !
out_£˘_sz
)

1816 
	`Ârötf
(
°dîr
, ">> warning: block size on %s confusion: "

1817 "bs=%d, devi˚ cœims=%d\n", 
outf
, 
blk_sz
,

1818 
out_£˘_sz
);

1819 } i‡(
FT_BLOCK
 & 
out_ty≥
) {

1820 i‡(0 !
	`ªad_blkdev_ˇ∑côy
(
outfd
, &
out_num_£˘
,

1821 &
out_£˘_sz
)) {

1822 
	`Ârötf
(
°dîr
, "UnableÅoÑead block capacity on %s\n",

1823 
outf
);

1824 
out_num_£˘
 = -1;

1825 } i‡(
blk_sz
 !
out_£˘_sz
) {

1826 
	`Ârötf
(
°dîr
, "block size on %s confusion: bs=%d, "

1827 "devi˚ cœims=%d\n", 
outf
, 
blk_sz
, 
out_£˘_sz
);

1828 
out_num_£˘
 = -1;

1831 i‡(
out_num_£˘
 > 
£ek
)

1832 
out_num_£˘
 -
£ek
;

1833 #ifde‡
SG_DEBUG


1834 
	`Ârötf
(
°dîr
, "Sèπ o‡lo›, cou¡=%" 
PRId64
 ", in_num_sect=%"

1835 
PRId64
 ", out_num_£˘=%"PRId64"\n", 
dd_cou¡
, 
ö_num_£˘
,

1836 
out_num_£˘
);

1838 i‡(
dd_cou¡
 < 0) {

1839 i‡(
ö_num_£˘
 > 0) {

1840 i‡(
out_num_£˘
 > 0)

1841 
dd_cou¡
 = (
ö_num_£˘
 > 
out_num_£˘
) ? out_num_sect :

1842 
ö_num_£˘
;

1844 
dd_cou¡
 = 
ö_num_£˘
;

1846 
dd_cou¡
 = 
out_num_£˘
;

1850 i‡(
dd_cou¡
 < 0) {

1851 
	`Ârötf
(
°dîr
, "Couldn't calculate count,Ölease give one\n");

1852  
SG_LIB_CAT_OTHER
;

1854 i‡(! 
cdbsz_giví
) {

1855 i‡((
FT_SG
 & 
ö_ty≥
Ë&& (
MAX_SCSI_CDBSZ
 !
iÊag
.
cdbsz
) &&

1856 (((
dd_cou¡
 + 
skù
Ë> 
UINT_MAX
Ë|| (
b±
 > 
USHRT_MAX
))) {

1857 
	`Ârötf
(
°dîr
, "Note: SCSI command size increasedÅo 16 bytes "

1859 
iÊag
.
cdbsz
 = 
MAX_SCSI_CDBSZ
;

1861 i‡((
FT_SG
 & 
out_ty≥
Ë&& (
MAX_SCSI_CDBSZ
 !
oÊag
.
cdbsz
) &&

1862 (((
dd_cou¡
 + 
£ek
Ë> 
UINT_MAX
Ë|| (
b±
 > 
USHRT_MAX
))) {

1863 
	`Ârötf
(
°dîr
, "Note: SCSI command size increasedÅo 16 bytes "

1865 
oÊag
.
cdbsz
 = 
MAX_SCSI_CDBSZ
;

1869 i‡(
iÊag
.
dio
 || iÊag.
dúe˘
 || 
oÊag
.dúe˘ || (
FT_RAW
 & 
ö_ty≥
) ||

1870 (
FT_RAW
 & 
out_ty≥
)) {

1871 
size_t
 
psz
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

1873 
wrkBuff
 = (*)
	`mÆloc
(
blk_sz
 * 
b±
 + 
psz
);

1874 i‡(0 =
wrkBuff
) {

1875 
	`Ârötf
(
°dîr
, "NotÉnough user memory forÑaw\n");

1876  
SG_LIB_CAT_OTHER
;

1878 
wrkPos
 = (*)((()
wrkBuff
 + 
psz
 - 1) &

1879 (~(
psz
 - 1)));

1881 
wrkBuff
 = (*)
	`mÆloc
(
blk_sz
 * 
b±
);

1882 i‡(0 =
wrkBuff
) {

1883 
	`Ârötf
(
°dîr
, "NotÉnough user memory\n");

1884  
SG_LIB_CAT_OTHER
;

1886 
wrkPos
 = 
wrkBuff
;

1889 
blocks_≥r
 = 
b±
;

1890 #ifde‡
SG_DEBUG


1891 
	`Ârötf
(
°dîr
, "Sèπ o‡lo›, cou¡=%"
PRId64
", blocks_per=%d\n",

1892 
dd_cou¡
, 
blocks_≥r
);

1894 i‡(
do_time
) {

1895 
°¨t_tm
.
tv_£c
 = 0;

1896 
°¨t_tm
.
tv_u£c
 = 0;

1897 
	`gëtimeofday
(&
°¨t_tm
, 
NULL
);

1898 
°¨t_tm_vÆid
 = 1;

1900 
ªq_cou¡
 = 
dd_cou¡
;

1903 
dd_cou¡
 > 0) {

1904 
byãs_ªad
 = 0;

1905 
byãs_of
 = 0;

1906 
byãs_of2
 = 0;

1907 
≥nu…_•¨£_skù
 = 
•¨£_skù
;

1908 
≥nu…_blocks
 = 
≥nu…_•¨£_skù
 ? 
blocks
 : 0;

1909 
•¨£_skù
 = 0;

1910 
blocks
 = (
dd_cou¡
 > 
blocks_≥r
) ? blocks_per : dd_count;

1911 i‡(
FT_SG
 & 
ö_ty≥
) {

1912 
dio_tmp
 = 
iÊag
.
dio
;

1913 
ªs
 = 
	`sg_ªad
(
öfd
, 
wrkPos
, 
blocks
, 
skù
, 
blk_sz
, &
iÊag
,

1914 &
dio_tmp
, &
blks_ªad
);

1915 i‡(-2 =
ªs
) {

1916 i‡(
	`io˘l
(
öfd
, 
SG_GET_RESERVED_SIZE
, &
buf_sz
) < 0) {

1917 
	`≥º‹
("RESERVED_SIZE ioctls failed");

1918 
ªt
 = 
ªs
;

1921 i‡(
buf_sz
 < 
MIN_RESERVED_SIZE
)

1922 
buf_sz
 = 
MIN_RESERVED_SIZE
;

1923 
blocks_≥r
 = (
buf_sz
 + 
blk_sz
 - 1) / blk_sz;

1924 i‡(
blocks_≥r
 < 
blocks
) {

1925 
blocks
 = 
blocks_≥r
;

1926 
	`Ârötf
(
°dîr
, "ReducingÑeadÅo %d blocksÖer "

1927 "lo›\n", 
blocks_≥r
);

1928 
ªs
 = 
	`sg_ªad
(
öfd
, 
wrkPos
, 
blocks
, 
skù
, 
blk_sz
,

1929 &
iÊag
, &
dio_tmp
, &
blks_ªad
);

1932 i‡(
ªs
) {

1933 
	`Ârötf
(
°dîr
, "sg_ªad faûed,%†© o∏a·îÜba=%"
PRId64
" "

1934 "[0x%"
PRIx64
"]\n",

1935 ((-2 =
ªs
Ë? "ÅryÑeducög b±," : ""), 
skù
, skip);

1936 
ªt
 = 
ªs
;

1939 i‡(
blks_ªad
 < 
blocks
) {

1940 
dd_cou¡
 = 0;

1941 
blocks
 = 
blks_ªad
;

1943 
ö_fuŒ
 +
blocks
;

1944 i‡(
iÊag
.
dio
 && (0 =
dio_tmp
))

1945 
dio_öcom∂ëe
++;

1948 ((
ªs
 = 
	`ªad
(
öfd
, 
wrkPos
, 
blocks
 * 
blk_sz
)) < 0) &&

1949 (
EINTR
 =
î∫o
))

1951 i‡(
vîbo£
 > 2)

1952 
	`Ârötf
(
°dîr
, "read(unix): count=%d,Ñes=%d\n",

1953 
blocks
 * 
blk_sz
, 
ªs
);

1954 i‡(
ªs
 < 0) {

1955 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, 
ME
 "ªadög, skù=%"
PRId64
" ", 
skù
);

1956 
	`≥º‹
(
ebuff
);

1957 
ªt
 = -1;

1959 } i‡(
ªs
 < 
blocks
 * 
blk_sz
) {

1960 
dd_cou¡
 = 0;

1961 
blocks
 = 
ªs
 / 
blk_sz
;

1962 i‡((
ªs
 % 
blk_sz
) > 0) {

1963 
blocks
++;

1964 
ö_∑πül
++;

1967 
byãs_ªad
 = 
ªs
;

1968 
ö_fuŒ
 +
blocks
;

1971 i‡(0 =
blocks
)

1974 i‡(
out2f
[0]) {

1975 ((
ªs
 = 
	`wrôe
(
out2fd
, 
wrkPos
, 
blocks
 * 
blk_sz
)) < 0)

1976 && (
EINTR
 =
î∫o
))

1978 i‡(
vîbo£
 > 2)

1979 
	`Ârötf
(
°dîr
, "writeÅo of2: count=%d,Ñes=%d\n",

1980 
blocks
 * 
blk_sz
, 
ªs
);

1981 i‡(
ªs
 < 0) {

1982 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, 
ME
 "wrôögÅÿof2, sìk=%"
PRId64
" ",

1983 
£ek
);

1984 
	`≥º‹
(
ebuff
);

1985 
ªt
 = -1;

1988 
byãs_of2
 = 
ªs
;

1989 
out2_off
 +
ªs
;

1992 i‡((
oÊag
.
•¨£
Ë&& (
dd_cou¡
 > 
blocks
) &&

1993 (! (
FT_DEV_NULL
 & 
out_ty≥
))) {

1994 i‡(
NULL
 =
zîos_buff
) {

1995 
zîos_buff
 = (*)
	`mÆloc
(
blocks
 * 
blk_sz
);

1996 i‡(
NULL
 =
zîos_buff
) {

1997 
	`Ârötf
(
°dîr
, "zeros_buff malloc failed\n");

1998 
ªt
 = -1;

2001 
	`mem£t
(
zîos_buff
, 0, 
blocks
 * 
blk_sz
);

2003 i‡(0 =
	`memcmp
(
wrkPos
, 
zîos_buff
, 
blocks
 * 
blk_sz
))

2004 
•¨£_skù
 = 1;

2006 i‡(
•¨£_skù
) {

2007 i‡(
FT_SG
 & 
out_ty≥
) {

2008 
out_•¨£
 +
blocks
;

2009 i‡(
vîbo£
 > 2)

2010 
	`Ârötf
(
°dîr
, "sparse bypassing sg_write: seek "

2011 "blk=%"
PRId64
", off£àblks=%d\n", 
£ek
, 
blocks
);

2012 } i‡(
FT_DEV_NULL
 & 
out_ty≥
)

2015 
off64_t
 
off£t
 = 
blocks
 * 
blk_sz
;

2016 
off64_t
 
off_ªs
;

2018 i‡(
vîbo£
 > 2)

2019 
	`Ârötf
(
°dîr
, "•¨£ by∑ssög wrôe: sìk=%" 
PRId64


2020 ",Ññ off£t=%" 
PRId64
 "\n", (
£ek
 * 
blk_sz
),

2021 (
öt64_t
)
off£t
);

2022 
off_ªs
 = 
	`l£ek64
(
outfd
, 
off£t
, 
SEEK_CUR
);

2023 i‡(
off_ªs
 < 0) {

2024 
	`Ârötf
(
°dîr
, "sparseÅriedÅo bypass write: seek=%"

2025 
PRId64
 ",Ñel offset=%" PRId64 " but ...\n",

2026 (
£ek
 * 
blk_sz
), (
öt64_t
)
off£t
);

2027 
	`≥º‹
("lseek64 on output");

2028 
ªt
 = 
SG_LIB_FILE_ERROR
;

2030 } i‡(
vîbo£
 > 4)

2031 
	`Ârötf
(
°dîr
, "oÊag=•¨£Ü£ek64Ñesu…=%" 
PRId64


2032 "\n", (
öt64_t
)
off_ªs
);

2033 
out_•¨£
 +
blocks
;

2035 } i‡(
FT_SG
 & 
out_ty≥
) {

2036 
dio_tmp
 = 
oÊag
.
dio
;

2037 
ªåõs_tmp
 = 
oÊag
.
ªåõs
;

2038 
fú°
 = 1;

2040 
ªt
 = 
	`sg_wrôe
(
outfd
, 
wrkPos
, 
blocks
, 
£ek
, 
blk_sz
,

2041 &
oÊag
, &
dio_tmp
);

2042 i‡(0 =
ªt
)

2044 i‡((
SG_LIB_CAT_NOT_READY
 =
ªt
) ||

2045 (
SG_LIB_SYNTAX_ERROR
 =
ªt
))

2047 i‡((-2 =
ªt
Ë&& 
fú°
) {

2049 i‡(
	`io˘l
(
outfd
, 
SG_GET_RESERVED_SIZE
, &
buf_sz
) < 0) {

2050 
	`≥º‹
("RESERVED_SIZE ioctls failed");

2053 i‡(
buf_sz
 < 
MIN_RESERVED_SIZE
)

2054 
buf_sz
 = 
MIN_RESERVED_SIZE
;

2055 
blocks_≥r
 = (
buf_sz
 + 
blk_sz
 - 1) / blk_sz;

2056 i‡(
blocks_≥r
 < 
blocks
) {

2057 
blocks
 = 
blocks_≥r
;

2058 
	`Ârötf
(
°dîr
, "Reducing writeÅo %d blocksÖer "

2059 "lo›\n", 
blocks
);

2062 } i‡((
SG_LIB_CAT_UNIT_ATTENTION
 =
ªt
Ë&& 
fú°
) {

2063 i‡(--
max_uas
 > 0)

2064 
	`Ârötf
(
°dîr
, "Unitáttention, continuing (w)\n");

2066 
	`Ârötf
(
°dîr
, "Unitáttention,Åoo many (w)\n");

2069 } i‡((
SG_LIB_CAT_ABORTED_COMMAND
 =
ªt
Ë&& 
fú°
) {

2070 i‡(--
max_ab‹ãd
 > 0)

2071 
	`Ârötf
(
°dîr
, "Aborted command, continuing (w)\n");

2073 
	`Ârötf
(
°dîr
, "Aborted command,Åoo many (w)\n");

2076 } i‡(
ªt
 < 0)

2078 i‡(
ªåõs_tmp
 > 0) {

2079 
	`Ârötf
(
°dîr
, ">>>Ñetryingá sgio write, "

2080 "lba=0x%"
PRIx64
"\n", (
uöt64_t
)
£ek
);

2081 --
ªåõs_tmp
;

2082 ++
num_ªåõs
;

2083 i‡(
uƒecovîed_îrs
 > 0)

2084 --
uƒecovîed_îrs
;

2087 
fú°
 = 0;

2089 i‡(0 !
ªt
) {

2090 
	`Ârötf
(
°dîr
, "sg_wrôêÁûed,%†£ek=%"
PRId64
"\n",

2091 ((-2 =
ªt
Ë? "ÅryÑeducög b±," : ""), 
£ek
);

2094 
out_fuŒ
 +
blocks
;

2095 i‡(
oÊag
.
dio
 && (0 =
dio_tmp
))

2096 
dio_öcom∂ëe
++;

2098 } i‡(
FT_DEV_NULL
 & 
out_ty≥
)

2099 
out_fuŒ
 +
blocks
;

2101 ((
ªs
 = 
	`wrôe
(
outfd
, 
wrkPos
, 
blocks
 * 
blk_sz
)) < 0)

2102 && (
EINTR
 =
î∫o
))

2104 i‡(
vîbo£
 > 2)

2105 
	`Ârötf
(
°dîr
, "write(unix): count=%d,Ñes=%d\n",

2106 
blocks
 * 
blk_sz
, 
ªs
);

2107 i‡(
ªs
 < 0) {

2108 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, 
ME
 "wrôög, sìk=%"
PRId64
" ", 
£ek
);

2109 
	`≥º‹
(
ebuff
);

2110 
ªt
 = -1;

2112 } i‡(
ªs
 < 
blocks
 * 
blk_sz
) {

2113 
	`Ârötf
(
°dîr
, "ouçuàfûê¥obably fuŒ, sìk=%" 
PRId64


2114 " ", 
£ek
);

2115 
blocks
 = 
ªs
 / 
blk_sz
;

2116 
out_fuŒ
 +
blocks
;

2117 i‡((
ªs
 % 
blk_sz
) > 0)

2118 
out_∑πül
++;

2119 
ªt
 = -1;

2122 
out_fuŒ
 +
blocks
;

2123 
byãs_of
 = 
ªs
;

2126 #ifde‡
HAVE_POSIX_FADVISE


2128 
π
, 
ö_vÆid
, 
out2_vÆid
, 
out_vÆid
;

2130 
ö_vÆid
 = ((
FT_OTHER
 =
ö_ty≥
Ë|| (
FT_BLOCK
 == in_type));

2131 
out2_vÆid
 = ((
FT_OTHER
 =
out2_ty≥
Ë|| (
FT_BLOCK
 == out2_type));

2132 
out_vÆid
 = ((
FT_OTHER
 =
out_ty≥
Ë|| (
FT_BLOCK
 == out_type));

2133 i‡(
iÊag
.
noˇche
 && (
byãs_ªad
 > 0Ë&& 
ö_vÆid
) {

2134 
π
 = 
	`posix_Ádvi£
(
öfd
, 0, (
skù
 * 
blk_sz
Ë+ 
byãs_ªad
,

2135 
POSIX_FADV_DONTNEED
);

2139 i‡(
π
)

2140 
	`Ârötf
(
°dîr
, "posix_fadvise onÑead, skip="

2141 "%"
PRId64
" ,îr=%d\n", 
skù
, 
π
);

2143 i‡((
oÊag
.
noˇche
 & 2Ë&& (
byãs_of2
 > 0Ë&& 
out2_vÆid
) {

2144 
π
 = 
	`posix_Ádvi£
(
out2fd
, 0, 0, 
POSIX_FADV_DONTNEED
);

2145 i‡(
π
)

2146 
	`Ârötf
(
°dîr
, "posix_fadvise on of2, seek="

2147 "%"
PRId64
" ,îr=%d\n", 
£ek
, 
π
);

2149 i‡((
oÊag
.
noˇche
 & 1Ë&& (
byãs_of
 > 0Ë&& 
out_vÆid
) {

2150 
π
 = 
	`posix_Ádvi£
(
outfd
, 0, 0, 
POSIX_FADV_DONTNEED
);

2151 i‡(
π
)

2152 
	`Ârötf
(
°dîr
, "posix_fadvise on output, seek="

2153 "%"
PRId64
" ,îr=%d\n", 
£ek
, 
π
);

2157 i‡(
dd_cou¡
 > 0)

2158 
dd_cou¡
 -
blocks
;

2159 
skù
 +
blocks
;

2160 
£ek
 +
blocks
;

2162 i‡(
ªt
 && 
≥nu…_•¨£_skù
 && (
≥nu…_blocks
 > 0)) {

2164 i‡((
FT_SG
 & 
out_ty≥
Ë|| (
FT_DEV_NULL
 & out_type))

2168 ((
ªs
 = 
	`wrôe
(
outfd
, 
zîos_buff
, 
≥nu…_blocks
 * 
blk_sz
))

2169 < 0Ë&& (
EINTR
 =
î∫o
))

2171 i‡(
vîbo£
 > 2)

2172 
	`Ârötf
(
°dîr
, "write(unix, sparseáfterÉrror): count=%d, "

2173 "ªs=%d\n", 
≥nu…_blocks
 * 
blk_sz
, 
ªs
);

2174 i‡(
ªs
 < 0) {

2175 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, 
ME
 "writing(sparseáfterÉrror), "

2176 "£ek=%"
PRId64
" ", 
£ek
);

2177 
	`≥º‹
(
ebuff
);

2182 i‡(
do_time
)

2183 
	`ˇlc_duøti⁄_throughput
(0);

2185 i‡(
do_sync
) {

2186 i‡(
FT_SG
 & 
out_ty≥
) {

2187 
	`Ârötf
(
°dîr
, ">> Synchr⁄izög cachê⁄ %s\n", 
outf
);

2188 
ªs
 = 
	`sg_Œ_sync_ˇche_10
(
outfd
, 0, 0, 0, 0, 0, 1, 0);

2189 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
) {

2190 
	`Ârötf
(
°dîr
, "Unitáttention (out, sync cache), "

2192 
ªs
 = 
	`sg_Œ_sync_ˇche_10
(
outfd
, 0, 0, 0, 0, 0, 0, 0);

2194 i‡(0 !
ªs
)

2195 
	`Ârötf
(
°dîr
, "UnableÅo synchronize cache\n");

2198 
	`‰ì
(
wrkBuff
);

2199 i‡(
zîos_buff
)

2200 
	`‰ì
(
zîos_buff
);

2201 i‡(
STDIN_FILENO
 !
öfd
)

2202 
	`˛o£
(
öfd
);

2203 i‡(! ((
STDOUT_FILENO
 =
outfd
Ë|| (
FT_DEV_NULL
 & 
out_ty≥
)))

2204 
	`˛o£
(
outfd
);

2205 i‡(0 !
dd_cou¡
) {

2206 
	`Ârötf
(
°dîr
, "SomeÉrror occurred,");

2207 i‡(0 =
ªt
)

2208 
ªt
 = 
SG_LIB_CAT_OTHER
;

2210 
	`¥öt_°©s
("");

2211 i‡(
dio_öcom∂ëe
) {

2212 
fd
;

2213 
c
;

2215 
	`Ârötf
(
°dîr
, ">> Direct IOÑequested but incomplete %dÅimes\n",

2216 
dio_öcom∂ëe
);

2217 i‡((
fd
 = 
	`›í
(
¥oc_Ælow_dio
, 
O_RDONLY
)) >= 0) {

2218 i‡(1 =
	`ªad
(
fd
, &
c
, 1)) {

2219 i‡('0' =
c
)

2220 
	`Ârötf
(
°dîr
, ">>> %s setÅo '0' but should be set "

2221 "tÿ'1' f‹ dúe˘ IO\n", 
¥oc_Ælow_dio
);

2223 
	`˛o£
(
fd
);

2226 i‡(
sum_of_ªsids
)

2227 
	`Ârötf
(
°dîr
, ">> Non-zero sum ofÑesidual counts=%d\n",

2228 
sum_of_ªsids
);

2229  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

2230 
	}
}

	@src/sg_decode_sense.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<î∫o.h
>

14 
	~<limôs.h
>

15 
	~<˘y≥.h
>

16 
	~<sys/ty≥s.h
>

17 
	~<sys/°©.h
>

18 
	~<gë›t.h
>

19 
	#__STDC_FORMAT_MACROS
 1

	)

20 
	~<öây≥s.h
>

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

25 
	~"sg_lib.h
"

28 c⁄° * 
	gvîsi⁄_°r
 = "1.04 20130507";

30 
	#MAX_SENSE_LEN
 1024

	)

32 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

33 {"bö¨y", 
ªquúed_¨gumít
, 0, 'b'},

34 {"fûe", 
ªquúed_¨gumít
, 0, 'f'},

35 {"hñp", 
no_¨gumít
, 0, 'h'},

36 {"hex", 
no_¨gumít
, 0, 'H'},

37 {"no•a˚", 
no_¨gumít
, 0, 'n'},

38 {"°©us", 
ªquúed_¨gumít
, 0, 's'},

39 {"vîbo£", 
no_¨gumít
, 0, 'v'},

40 {"vîsi⁄", 
no_¨gumít
, 0, 'V'},

41 {"wrôe", 
ªquúed_¨gumít
, 0, 'w'},

45 
	s›ts_t
 {

46 
	mdo_bö¨y
;

47 c⁄° * 
	m‚ame
;

48 
	mdo_fûe
;

49 
	mdo_hñp
;

50 
	mdo_hex
;

51 
	mno_•a˚
;

52 
	mdo_°©us
;

53 
	ms°©us
;

54 
	mdo_vîbo£
;

55 
	mdo_vîsi⁄
;

56 c⁄° * 
	mw‚ame
;

57 
	m£n£
[
MAX_SENSE_LEN
 + 4];

58 c⁄° * 
	mno_•a˚_°r
;

59 
	m£n£_Àn
;

64 
	$ußge
()

66 
	`Ârötf
(
°dîr
, "Usage: "

101 
	}
}

104 
	$¥o˚ss_˛
(
›ts_t
 *
›t•
, 
¨gc
, *
¨gv
[])

106 
c
;

107 
ui
;

108 * 
›t
;

109 *
íd±r
;

110 
vÆ
;

113 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "b:f:hHns:vVw:", 
l⁄g_›ti⁄s
, 
NULL
);

114 i‡(
c
 == -1)

117 
c
) {

119 i‡(
›t•
->
‚ame
) {

120 
	`Ârötf
(
°dîr
, "expect only one '--binary=FN' or "

122  
SG_LIB_SYNTAX_ERROR
;

124 ++
›t•
->
do_bö¨y
;

125 
›t•
->
‚ame
 = 
›èrg
;

128 i‡(
›t•
->
‚ame
) {

129 
	`Ârötf
(
°dîr
, "expect only one '--binary=FN' or "

131  
SG_LIB_SYNTAX_ERROR
;

133 ++
›t•
->
do_fûe
;

134 
›t•
->
‚ame
 = 
›èrg
;

138 
›t•
->
do_hñp
 = 1;

141 ++
›t•
->
do_hex
;

144 ++
›t•
->
no_•a˚
;

147 i‡(1 !
	`ssˇnf
(
›èrg
, "%x", &
ui
)) {

148 
	`Ârötf
(
°dîr
, "'--status=SS'Éxpectsá byte value\n");

149  
SG_LIB_SYNTAX_ERROR
;

151 i‡(
ui
 > 0xff) {

152 
	`Ârötf
(
°dîr
, "'--status=SS' byte valueÉxceeds FF\n");

153  
SG_LIB_SYNTAX_ERROR
;

155 ++
›t•
->
do_°©us
;

156 
›t•
->
s°©us
 = 
ui
;

159 ++
›t•
->
do_vîbo£
;

162 
›t•
->
do_vîsi⁄
 = 1;

165 
›t•
->
w‚ame
 = 
›èrg
;

168  
SG_LIB_SYNTAX_ERROR
;

172 
›töd
 < 
¨gc
) {

173 
›t
 = 
¨gv
[
›töd
++];

174 i‡(
›t•
->
no_•a˚
) {

175 i‡(
›t•
->
no_•a˚_°r
) {

176 
	`Ârötf
(
°dîr
, "With '--nospace' only wantá single string "

177 "o‡hex digôs,Éxåa: '%s'\n", 
›t
);

178  
SG_LIB_SYNTAX_ERROR
;

180 
›t•
->
no_•a˚_°r
 = 
›t
;

184 
vÆ
 = 
	`°πﬁ
(
›t
, &
íd±r
, 16);

185 i‡(*
›t
 ='\0' || *
íd±r
 !'\0' || 
vÆ
 < 0x00 || val > 0xff) {

186 
	`Ârötf
(
°dîr
, "InvÆid byã '%s'\n", 
›t
);

187  
SG_LIB_SYNTAX_ERROR
;

190 i‡(
›t•
->
£n£_Àn
 > 
MAX_SENSE_LEN
) {

191 
	`Ârötf
(
°dîr
, "sense dataÅooÜong (max. %d bytes)\n",

192 
MAX_SENSE_LEN
);

193  
SG_LIB_SYNTAX_ERROR
;

195 
›t•
->
£n£
[›t•->
£n£_Àn
++] = ()
vÆ
;

198 
	}
}

206 
	$f2hex_¨r
(c⁄° * 
‚ame
, 
no_•a˚
, * 
mp_¨r
,

207 * 
mp_¨r_Àn
, 
max_¨r_Àn
)

209 
‚_Àn
, 
ö_Àn
, 
k
, 
j
, 
m
;

210 
h
;

211 c⁄° * 
l˝
;

212 
FILE
 * 
Â
;

213 
löe
[512];

214 
off
 = 0;

216 i‡((
NULL
 =
‚ame
Ë|| (NULL =
mp_¨r
Ë|| (NULL =
mp_¨r_Àn
))

218 
‚_Àn
 = 
	`°æí
(
‚ame
);

219 i‡(0 =
‚_Àn
)

221 i‡((1 =
‚_Àn
Ë&& ('-' =
‚ame
[0]))

222 
Â
 = 
°dö
;

224 
Â
 = 
	`f›í
(
‚ame
, "r");

225 i‡(
NULL
 =
Â
) {

226 
	`Ârötf
(
°dîr
, "U«bÀÅÿ›í %†f‹Ñódög\n", 
‚ame
);

231 
j
 = 0; j < 512; ++j) {

232 i‡(
NULL
 =
	`fgës
(
löe
, ÷öe), 
Â
))

234 
ö_Àn
 = 
	`°æí
(
löe
);

235 i‡(
ö_Àn
 > 0) {

236 i‡('\n' =
löe
[
ö_Àn
 - 1]) {

237 --
ö_Àn
;

238 
löe
[
ö_Àn
] = '\0';

241 i‡(0 =
ö_Àn
)

243 
l˝
 = 
löe
;

244 
m
 = 
	`°r•n
(
l˝
, " \t");

245 i‡(
m
 =
ö_Àn
)

247 
l˝
 +
m
;

248 
ö_Àn
 -
m
;

249 i‡('#' =*
l˝
)

251 
k
 = 
	`°r•n
(
l˝
, "0123456789aAbBcCdDeEfF ,\t");

252 i‡((
k
 < 
ö_Àn
Ë&& ('#' !
l˝
[k])) {

253 
	`Ârötf
(
°dîr
, "f2hex_arr: syntaxÉrrorátÜine %d,Öos %d\n",

254 
j
 + 1, 
m
 + 
k
 + 1);

255 
bad
;

257 i‡(
no_•a˚
) {

258 
k
 = 0; 
	`isxdigô
(*
l˝
) && isxdigit(*(lcp + 1));

259 ++
k
, 
l˝
 += 2) {

260 i‡(1 !
	`ssˇnf
(
l˝
, "%2x", &
h
)) {

261 
	`Ârötf
(
°dîr
, "f2hex_arr: bad hexÇumber inÜine %d, "

262 "po†%d\n", 
j
 + 1, ()(
l˝
 - 
löe
 + 1));

263 
bad
;

265 i‡((
off
 + 
k
Ë>
max_¨r_Àn
) {

266 
	`Ârötf
(
°dîr
, "f2hex_arr:árrayÜengthÉxceeded\n");

267 
bad
;

269 
mp_¨r
[
off
 + 
k
] = 
h
;

271 
off
 +
k
;

273 
k
 = 0; k < 1024; ++k) {

274 i‡(1 =
	`ssˇnf
(
l˝
, "%x", &
h
)) {

275 i‡(
h
 > 0xff) {

276 
	`Ârötf
(
°dîr
, "f2hex_arr: hexÇumberÜargerÅhan "

277 "0xf‡öÜöê%d,Öo†%d\n", 
j
 + 1,

278 ()(
l˝
 - 
löe
 + 1));

279 
bad
;

281 i‡((
off
 + 
k
Ë>
max_¨r_Àn
) {

282 
	`Ârötf
(
°dîr
, "f2hex_arr:árrayÜengthÉxceeded\n");

283 
bad
;

285 
mp_¨r
[
off
 + 
k
] = 
h
;

286 
l˝
 = 
	`°Ωbrk
(lcp, " ,\t");

287 i‡(
NULL
 =
l˝
)

289 
l˝
 +
	`°r•n
(lcp, " ,\t");

290 i‡('\0' =*
l˝
)

293 i‡('#' =*
l˝
) {

294 --
k
;

297 
	`Ârötf
(
°dîr
, "f2hex_arr:Érror inÜine %d,átÖos "

298 "%d\n", 
j
 + 1, ()(
l˝
 - 
löe
 + 1));

299 
bad
;

302 
off
 +(
k
 + 1);

305 *
mp_¨r_Àn
 = 
off
;

306 
	`f˛o£
(
Â
);

308 
bad
:

309 
	`f˛o£
(
Â
);

311 
	}
}

314 
	$wrôe2w‚
(
FILE
 * 
Â
, 
›ts_t
 * 
›t•
)

316 
k
, 
n
;

317 
size_t
 
s
;

318 
b
[128];

320 i‡(
›t•
->
do_hex
) {

321 
k
 = 0, 
n
 = 0; k < 
›t•
->
£n£_Àn
; ++k) {

322 
n
 +
	`•rötf
(
b
 +Ç, "0x%02x,", 
›t•
->
£n£
[
k
]);

323 i‡(15 =(
k
 % 16)) {

324 
b
[
n
] = '\n';

325 
s
 = 
	`fwrôe
(
b
, 1, 
n
 + 1, 
Â
);

326 
n
 = 0;

329 i‡(
n
 > 0) {

330 
b
[
n
] = '\n';

331 
s
 = 
	`fwrôe
(
b
, 1, 
n
 + 1, 
Â
);

334 
s
 = 
	`fwrôe
(
›t•
->
£n£
, 1, o±•->
£n£_Àn
, 
Â
);

335 i‡(()
s
 !
›t•
->
£n£_Àn
)

336 
	`Ârötf
(
°dîr
, "onlyábleÅo write %d of %d bytesÅo %s\n",

337 ()
s
, 
›t•
->
£n£_Àn
, o±•->
w‚ame
);

339 
	}
}

343 
	$maö
(
¨gc
, *
¨gv
[])

345 
k
;

346 
ªt
 = 0;

347 
ui
;

348 
size_t
 
s
;

349 
›ts_t
 
›ts
;

350 
b
[2048];

351 
FILE
 * 
Â
 = 
NULL
;

352 c⁄° * 
˝
;

354 
	`mem£t
(&
›ts
, 0, (opts));

355 
	`mem£t
(
b
, 0, (b));

356 
ªt
 = 
	`¥o˚ss_˛
(&
›ts
, 
¨gc
, 
¨gv
);

357 i‡(
ªt
 != 0) {

358 
	`ußge
();

359  
ªt
;

360 } i‡(
›ts
.
do_hñp
) {

361 
	`ußge
();

363 } i‡(
›ts
.
do_vîsi⁄
) {

364 
	`Ârötf
(
°dîr
, "vîsi⁄: %s\n", 
vîsi⁄_°r
);

369 i‡(
›ts
.
do_°©us
) {

370 
	`sg_gë_scsi_°©us_°r
(
›ts
.
s°©us
, (
b
) - 1, b);

371 
	`¥ötf
("SCSI sètus: %s\n", 
b
);

374 i‡((0 =
›ts
.
£n£_Àn
Ë&& o±s.
no_•a˚_°r
) {

375 
˝
 = 
›ts
.
no_•a˚_°r
;

376 
k
 = 0; 
	`isxdigô
(
˝
[k]) && isxdigit(cp[k + 1]); k += 2) {

377 i‡(1 !
	`ssˇnf
(
˝
 + 
k
, "%2x", &
ui
)) {

378 
	`Ârötf
(
°dîr
, "badÇo_•a˚ hex såög: %s\n", 
˝
);

379  
SG_LIB_SYNTAX_ERROR
;

381 
›ts
.
£n£
[›ts.
£n£_Àn
++] = ()
ui
;

385 i‡((0 =
›ts
.
£n£_Àn
Ë&& (! o±s.
do_bö¨y
Ë&& (! o±s.
do_fûe
)) {

386 i‡(
›ts
.
do_°©us
)

388 
	`Ârötf
(
°dîr
, ">> Need sense data onÅhe commandÜine or iná "

390 
	`ußge
();

391  
SG_LIB_SYNTAX_ERROR
;

393 i‡(
›ts
.
£n£_Àn
 && (›ts.
do_bö¨y
 || o±s.
do_fûe
)) {

394 
	`Ârötf
(
°dîr
, ">> Need sense data on commandÜine or iná file, "

396  
SG_LIB_SYNTAX_ERROR
;

398 i‡(
›ts
.
do_bö¨y
 && o±s.
do_fûe
) {

399 
	`Ârötf
(
°dîr
, ">> Eitherá binary file orá ASCII hexadecimal, "

401  
SG_LIB_SYNTAX_ERROR
;

404 i‡(
›ts
.
do_bö¨y
) {

405 
Â
 = 
	`f›í
(
›ts
.
‚ame
, "r");

406 i‡(
NULL
 =
Â
) {

407 
	`Ârötf
(
°dîr
, "u«bÀÅÿ›í fûe: %s\n", 
›ts
.
‚ame
);

408  
SG_LIB_SYNTAX_ERROR
;

410 
s
 = 
	`‰ód
(
›ts
.
£n£
, 1, 
MAX_SENSE_LEN
, 
Â
);

411 
	`f˛o£
(
Â
);

412 i‡(0 =
s
) {

413 
	`Ârötf
(
°dîr
, "ªadÇŸhög from fûe: %s\n", 
›ts
.
‚ame
);

414  
SG_LIB_SYNTAX_ERROR
;

416 
›ts
.
£n£_Àn
 = 
s
;

417 } i‡(
›ts
.
do_fûe
) {

418 
ªt
 = 
	`f2hex_¨r
(
›ts
.
‚ame
, o±s.
no_•a˚
, o±s.
£n£
,

419 &
›ts
.
£n£_Àn
, 
MAX_SENSE_LEN
);

420 i‡(
ªt
) {

421 
	`Ârötf
(
°dîr
, "unableÅo decode ASCII hex from file: %s\n",

422 
›ts
.
‚ame
);

423  
SG_LIB_SYNTAX_ERROR
;

427 i‡(
›ts
.
£n£_Àn
) {

428 i‡(
›ts
.
w‚ame
) {

429 i‡((
Â
 = 
	`f›í
(
›ts
.
w‚ame
, "w"))) {

430 
	`wrôe2w‚
(
Â
, &
›ts
);

431 
	`f˛o£
(
Â
);

433 
	`≥º‹
("open");

434 
	`Ârötf
(
°dîr
, "åyögÅÿwrôêtÿ%s\n", 
›ts
.
w‚ame
);

437 
	`sg_gë_£n£_°r
(
NULL
, 
›ts
.
£n£
, o±s.
£n£_Àn
, o±s.
do_vîbo£
,

438 (
b
) - 1, b);

439 
	`¥ötf
("%s\n", 
b
);

443 
	}
}

	@src/sg_emc_trespass.c

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<uni°d.h
>

19 
	~<°rög.h
>

20 
	~<sys/ty≥s.h
>

21 
	~<sys/°©.h
>

22 
	~<f˙é.h
>

24 #ifde‡
HAVE_CONFIG_H


25 
	~"c⁄fig.h
"

27 
	~"sg_lib.h
"

28 
	~"sg_cmds_basic.h
"

31 c⁄° * 
	gvîsi⁄_°r
 = "0.18 20130507";

33 
	gdebug
 = 0;

35 
	#TRESPASS_PAGE
 0x22

	)

37 
	$do_åe•ass
(
fd
, 
hr
, 
sh‹t_cmd
)

39 
l⁄g_åe•ass_pg
[] =

41 
TRESPASS_PAGE
,

48 
sh‹t_åe•ass_pg
[] =

50 
TRESPASS_PAGE
,

56 
ªs
;

58 i‡(
hr
) {

59 
sh‹t_åe•ass_pg
[6] = 0x01;

60 
l⁄g_åe•ass_pg
[10] = 0x01;

62 i‡(
sh‹t_cmd
)

63 
ªs
 = 
	`sg_Œ_mode_£À˘6
(
fd
, 1 , 0 ,

64 
sh‹t_åe•ass_pg
, (short_trespass_pg),

65 1, (
debug
 ? 2 : 0));

67 
ªs
 = 
	`sg_Œ_mode_£À˘10
(
fd
, 1 , 0 ,

68 
l⁄g_åe•ass_pg
, (long_trespass_pg),

69 1, (
debug
 ? 2 : 0));

71 
ªs
) {

73 i‡(
debug
)

74 
	`Ârötf
(
°dîr
, "%sÅrespass successful\n",

75 
sh‹t_cmd
 ? "short" : "long");

77 
SG_LIB_CAT_INVALID_OP
:

78 
SG_LIB_CAT_ILLEGAL_REQ
:

79 
	`Ârötf
(
°dîr
, "%s formÅrepassÖage failed,Åryágain %s "

80 "'-s' o±i⁄\n", 
sh‹t_cmd
 ? "short" : "long",

81 
sh‹t_cmd
 ? "without" : "with");

83 
SG_LIB_CAT_NOT_READY
:

84 
	`Ârötf
(
°dîr
, "deviceÇotÑeady\n");

86 
SG_LIB_CAT_UNIT_ATTENTION
:

87 
	`Ârötf
(
°dîr
, "unitáttention\n");

90 i‡(
debug
)

91 
	`Ârötf
(
°dîr
, "%sÅrespass failed\n",

92 
sh‹t_cmd
 ? "short" : "long");

95  
ªs
;

96 
	}
}

98 
	$ußge
 ()

100 
	`Ârötf
(
°dîr
, "Usage: sg_emc_trespass [-d] [-hr] [-s] "

112 
	`exô
 (1);

113 
	}
}

115 
	$maö
(
¨gc
, * 
¨gv
[])

117 **
¨g±r
;

118 * 
fûe_«me
 = 0;

119 
k
, 
fd
;

120 
hr
 = 0;

121 
sh‹t_cmd
 = 0;

122 
ªt
 = 0;

124 i‡(
¨gc
 < 2)

125 
	`ußge
 ();

127 
k
 = 1; k < 
¨gc
; ++k) {

128 
¨g±r
 = 
¨gv
 + 
k
;

129 i‡(!
	`°rcmp
 (*
¨g±r
, "-d"))

130 ++
debug
;

131 i‡(!
	`°rcmp
 (*
¨g±r
, "-s"))

132 
sh‹t_cmd
 = 1;

133 i‡(!
	`°rcmp
 (*
¨g±r
, "-hr"))

134 
hr
 = 1;

135 i‡(!
	`°rcmp
 (*
¨g±r
, "-V")) {

136 
	`¥ötf
("Vîsi⁄ såög: %s\n", 
vîsi⁄_°r
);

137 
	`exô
(0);

139 i‡(*
¨gv
[
k
] == '-') {

140 
	`Ârötf
(
°dîr
, "Uƒecognized swôch: %s\n", 
¨gv
[
k
]);

141 
fûe_«me
 = 0;

144 i‡(0 =
fûe_«me
)

145 
fûe_«me
 = 
¨gv
[
k
];

147 
	`Ârötf
(
°dîr
, "too manyárguments\n");

148 
fûe_«me
 = 0;

152 i‡(0 =
fûe_«me
) {

153 
	`ußge
();

154  
SG_LIB_SYNTAX_ERROR
;

157 
fd
 = 
	`›í
(
fûe_«me
, 
O_RDWR
 | 
O_NONBLOCK
);

158 i‡(
fd
 < 0) {

159 
	`Ârötf
(
°dîr
, "Eº‹ÅryögÅÿ›í %s\n", 
fûe_«me
);

160 
	`≥º‹
("");

161 
	`ußge
();

162  
SG_LIB_FILE_ERROR
;

165 
ªt
 = 
	`do_åe•ass
(
fd
, 
hr
, 
sh‹t_cmd
);

167 
	`˛o£
 (
fd
);

168  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

169 
	}
}

	@src/sg_format.c

35 
	~<°dio.h
>

36 
	~<°dlib.h
>

37 
	~<°rög.h
>

38 
	~<gë›t.h
>

39 
	~<uni°d.h
>

40 
	#__STDC_FORMAT_MACROS
 1

	)

41 
	~<öây≥s.h
>

43 #ifde‡
HAVE_CONFIG_H


44 
	~"c⁄fig.h
"

46 
	~"sg_lib.h
"

47 
	~"sg_cmds_basic.h
"

48 
	~"sg_cmds_exåa.h
"

50 c⁄° * 
	gvîsi⁄_°r
 = "1.23 20130530";

52 
	#RW_ERROR_RECOVERY_PAGE
 1

	)

53 
	#FORMAT_DEV_PAGE
 3

	)

54 
	#CONTROL_MODE_PAGE
 0x®

	)

56 
	#THIS_MPAGE_EXISTS
 
RW_ERROR_RECOVERY_PAGE


	)

58 
	#SHORT_TIMEOUT
 20

	)

59 
	#FORMAT_TIMEOUT
 (20 * 3600Ë

	)

62 
	#POLL_DURATION_SECS
 60

	)

63 
	#DEF_POLL_TYPE
 0

	)

65 #i‡
deföed
(
MSC_VER
Ë|| deföed(
__MINGW32__
)

66 
	#HAVE_MS_SLEEP


	)

69 #ifde‡
HAVE_MS_SLEEP


70 
	~<wödows.h
>

71 
	#¶ìp_f‹
(
£c⁄ds
Ë
	`SÀï
–(£c⁄dsË* 1000)

	)

73 
	#¶ìp_f‹
(
£c⁄ds
Ë
	`¶ìp
(£c⁄ds)

	)

77 
	#MAX_BUFF_SZ
 252

	)

78 
	gdbuff
[
MAX_BUFF_SZ
];

81 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

82 {"cou¡", 
ªquúed_¨gumít
, 0, 'c'},

83 {"cm∂°", 
ªquúed_¨gumít
, 0, 'C'},

84 {"d¸t", 
no_¨gumít
, 0, 'D'},

85 {"óæy", 
no_¨gumít
, 0, 'e'},

86 {"fmçöfo", 
ªquúed_¨gumít
, 0, 'f'},

87 {"f‹m©", 
no_¨gumít
, 0, 'F'},

88 {"hñp", 
no_¨gumít
, 0, 'h'},

89 {"l⁄g", 
no_¨gumít
, 0, 'l'},

90 {"pöfo", 
no_¨gumít
, 0, 'p'},

91 {"pfu", 
ªquúed_¨gumít
, 0, 'P'},

92 {"põ", 
ªquúed_¨gumít
, 0, 'q'},

93 {"pﬁl", 
ªquúed_¨gumít
, 0, 'x'},

94 {"ªsize", 
no_¨gumít
, 0, 'r'},

95 {"πo_ªq", 
no_¨gumít
, 0, 'R'},

96 {"£curôy", 
no_¨gumít
, 0, 'S'},

97 {"six", 
no_¨gumít
, 0, '6'},

98 {"size", 
ªquúed_¨gumít
, 0, 's'},

99 {"vîbo£", 
no_¨gumít
, 0, 'v'},

100 {"vîsi⁄", 
no_¨gumít
, 0, 'V'},

101 {"waô", 
no_¨gumít
, 0, 'w'},

107 
	$ußge
()

109 
	`¥ötf
("usage: sg_format [--cmplst=0|1] [--count=COUNT] [--dcrt] "

148 
	`¥ötf
(" --resize|-rÑesize (ratherÅhan format)Åo COUNT "

170 
	`¥ötf
("WARNING: This utility will destroyállÅhe data on "

173 
	}
}

177 
	$scsi_f‹m©
(
fd
, 
fmçöfo
, 
cm∂°
, 
pf_ußge
, 
immed
,

178 
d¸t
, 
põ
, 
si
, 
óæy
, 
±
, 
vîbo£
)

180 
ªs
, 
√ed_hdr
, 
¥ogªss
, 
¥
, 
ªm
, 
vîb
, 
fmt_∂_sz
, 
l⁄gli°
, 
off
;

181 
ª•_Àn
;

182 c⁄° 
SH_FORMAT_HEADER_SZ
 = 4;

183 c⁄° 
LO_FORMAT_HEADER_SZ
 = 8;

184 c⁄° 
INIT_PATTERN_DESC_SZ
 = 4;

185 
fmt_∂
[
LO_FORMAT_HEADER_SZ
 + 
INIT_PATTERN_DESC_SZ
];

186 
ªqSí£
[
MAX_BUFF_SZ
];

188 
	`mem£t
(
fmt_∂
, 0, (fmt_pl));

189 
l⁄gli°
 = (
põ
 > 0);

190 
off
 = 
l⁄gli°
 ? 
LO_FORMAT_HEADER_SZ
 : 
SH_FORMAT_HEADER_SZ
;

191 
fmt_∂
[0] = 
pf_ußge
 & 0x7;

192 
fmt_∂
[1] = (
immed
 ? 0x2 : 0);

193 i‡(
d¸t
)

194 
fmt_∂
[1] |= 0xa0;

195 i‡(
si
) {

196 
fmt_∂
[1] |= 0x88;

197 
fmt_∂
[
off
 + 0] = 0x20;

199 i‡(
l⁄gli°
)

200 
fmt_∂
[3] = (
põ
 & 0xf);

202 
√ed_hdr
 = (
immed
 || 
cm∂°
 || 
d¸t
 || 
si
 || (
pf_ußge
 > 0) ||

203 (
põ
 > 0));

204 
fmt_∂_sz
 = 0;

205 i‡(
√ed_hdr
)

206 
fmt_∂_sz
 = 
off
 + (
si
 ? 
INIT_PATTERN_DESC_SZ
 : 0);

208 
ªs
 = 
	`sg_Œ_f‹m©_unô
(
fd
, 
fmçöfo
, 
l⁄gli°
, 
√ed_hdr
 ,

209 
cm∂°
, 0 ,

210 (
immed
 ? 
SHORT_TIMEOUT
 : 
FORMAT_TIMEOUT
),

211 
fmt_∂
, 
fmt_∂_sz
, 1, 
vîbo£
);

212 
ªs
) {

215 
SG_LIB_CAT_NOT_READY
:

216 
	`Ârötf
(
°dîr
, "Format command, deviceÇotÑeady\n");

218 
SG_LIB_CAT_INVALID_OP
:

219 
	`Ârötf
(
°dîr
, "Format commandÇot supported\n");

221 
SG_LIB_CAT_ILLEGAL_REQ
:

222 
	`Ârötf
(
°dîr
, "Format command, illegalÖarameter\n");

224 
SG_LIB_CAT_UNIT_ATTENTION
:

225 
	`Ârötf
(
°dîr
, "Format command, unitáttention\n");

227 
SG_LIB_CAT_ABORTED_COMMAND
:

228 
	`Ârötf
(
°dîr
, "Format command,áborted command\n");

231 
	`Ârötf
(
°dîr
, "Format command failed\n");

234 i‡(
ªs
)

235  
ªs
;

237 i‡(! 
immed
)

240 
	`¥ötf
("\nFormat has started\n");

241 i‡(
óæy
) {

242 i‡(
immed
)

243 
	`¥ötf
("Format continuing,\nÑequest sense or "

249 
vîb
 = (
vîbo£
 > 1) ? (verbose - 1) : 0;

250 i‡(0 =
±
) {

252 
	`¶ìp_f‹
(
POLL_DURATION_SECS
);

253 
¥ogªss
 = -1;

254 
ªs
 = 
	`sg_Œ_ã°_unô_ªady_¥ogªss
(
fd
, 0, &
¥ogªss
,

255 1, 
vîb
);

256 i‡(
¥ogªss
 >= 0) {

257 
¥
 = (
¥ogªss
 * 100) / 65536;

258 
ªm
 = ((
¥ogªss
 * 100) % 65536) / 656;

259 
	`¥ötf
("Format inÖrogress, %d.%02d%% done\n",

260 
¥
, 
ªm
);

265 i‡(
±
 || (
SG_LIB_CAT_NOT_READY
 =
ªs
)) {

267 
	`¶ìp_f‹
(
POLL_DURATION_SECS
);

268 
	`mem£t
(
ªqSí£
, 0x0, (reqSense));

269 
ªs
 = 
	`sg_Œ_ªque°_£n£
(
fd
, 0, 
ªqSí£
,

270 (
ªqSí£
), 0, 
vîb
);

271 i‡(
ªs
) {

272 
	`Ârötf
(
°dîr
, "polling with Request Sense "

273 "comm™d faûed [ªs=%d]\n", 
ªs
);

276 
ª•_Àn
 = 
ªqSí£
[7] + 8;

277 i‡(
vîb
) {

278 
	`Ârötf
(
°dîr
, "Parameter data in hex:\n");

279 
	`dSåHex
((c⁄° *)
ªqSí£
, 
ª•_Àn
, 1);

281 
¥ogªss
 = -1;

282 
	`sg_gë_£n£_¥ogªss_Êd
(
ªqSí£
, 
ª•_Àn
,

283 &
¥ogªss
);

284 i‡(
¥ogªss
 >= 0) {

285 
¥
 = (
¥ogªss
 * 100) / 65536;

286 
ªm
 = ((
¥ogªss
 * 100) % 65536) / 656;

287 
	`¥ötf
("Format inÖrogress, %d.%02d%% done\n",

288 
¥
, 
ªm
);

294 
k
 = 0; k < 
num_rs
; ++k) {

295 i‡(
k
 > 0)

296 
	`¶ìp_f‹
(30);

297 
	`mem£t
(
ªque°Sí£Buff
, 0x0, (requestSenseBuff));

298 
ªs
 = 
	`sg_Œ_ªque°_£n£
(
sg_fd
, 
desc
, 
ªque°Sí£Buff
, 
maxÀn
,

299 1, 
vîbo£
);

300 i‡(
ªs
) {

301 
ªt
 = 
ªs
;

302 i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

303 
	`Ârötf
(
°dîr
, "Request Sense commandÇot supported\n");

304 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

305 
	`Ârötf
(
°dîr
, "bad field in Request Sense cdb\n");

306 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

307 
	`Ârötf
(
°dîr
, "Request Sense,áborted command\n");

309 
	`Ârötf
(
°dîr
, "Request Sense command unexpectedly "

311 i‡(0 =
vîbo£
)

312 
	`Ârötf
(
°dîr
, "ÅryÅhe '-v' option for "

318 
ª•_Àn
 = 
ªque°Sí£Buff
[7] + 8;

319 i‡(
vîbo£
 > 1) {

320 
	`Ârötf
(
°dîr
, "Parameter data in hex\n");

321 
	`dSåHex
((c⁄° *)
ªque°Sí£Buff
, 
ª•_Àn
, 1);

323 
¥ogªss
 = -1;

324 
	`sg_gë_£n£_¥ogªss_Êd
(
ªque°Sí£Buff
, 
ª•_Àn
,

325 &
¥ogªss
);

326 i‡(
¥ogªss
 < 0) {

327 
ªt
 = 
ªs
;

328 i‡(
vîbo£
 > 1)

329 
	`Ârötf
(
°dîr
, "NoÖrogress indication found, "

330 "ôî©i⁄ %d\n", 
k
 + 1);

334 
	`¥ötf
("Progress indication: %d.%02d%% done\n",

335 (
¥ogªss
 * 100) / 65536,

336 ((
¥ogªss
 * 100) % 65536) / 656);

339 
	`¥ötf
("FORMAT Complete\n");

341 
	}
}

343 
	#RCAP_REPLY_LEN
 32

	)

348 
	$¥öt_ªad_ˇp
(
fd
, 
do_16
, 
vîbo£
)

350 
ªs
, 
k
;

351 
ª•_buff
[
RCAP_REPLY_LEN
];

352 
œ°_blk_addr
, 
block_size
;

353 
uöt64_t
 
Œa°_blk_addr
;

355 i‡(
do_16
) {

356 
ªs
 = 
	`sg_Œ_ªadˇp_16
(
fd
, 0 , 0 ,

357 
ª•_buff
, 32, 1, 
vîbo£
);

358 i‡(0 =
ªs
) {

359 
k
 = 0, 
Œa°_blk_addr
 = 0; k < 8; ++k) {

360 
Œa°_blk_addr
 <<= 8;

361 
Œa°_blk_addr
 |
ª•_buff
[
k
];

363 
block_size
 = ((
ª•_buff
[8] << 24) |

364 (
ª•_buff
[9] << 16) |

365 (
ª•_buff
[10] << 8) |

366 
ª•_buff
[11]);

367 
	`¥ötf
("Read Capacity (16)Ñesults:\n");

368 
	`¥ötf
(" Protection:Örot_en=%d,Ö_type=%d, "

370 !!(
ª•_buff
[12] & 0x1),

371 ((
ª•_buff
[12] >> 1) & 0x7),

372 ((
ª•_buff
[13] >> 4) & 0xf));

373 
	`¥ötf
(" Logical blockÖrovisioning:Übpme=%d, "

374 "lb¥z=%d\n", !!(
ª•_buff
[14] & 0x80),

375 !!(
ª•_buff
[14] & 0x40));

376 
	`¥ötf
(" Logical blocksÖerÖhysical block "

377 "exp⁄ít=%d\n", 
ª•_buff
[13] & 0xf);

378 
	`¥ötf
(" LowestálignedÜogical blockáddress=%d\n",

379 ((
ª•_buff
[14] & 0x3f) << 8) +Ñesp_buff[15]);

380 
	`¥ötf
(" Numbî o‡logiˇ»blocks=%" 
PRIu64
 "\n",

381 
Œa°_blk_addr
 + 1);

382 
	`¥ötf
(" Logical block size=%u bytes\n",

383 
block_size
);

384  ()
block_size
;

387 
ªs
 = 
	`sg_Œ_ªadˇp_10
(
fd
, 0 , 0 ,

388 
ª•_buff
, 8, 1, 
vîbo£
);

389 i‡(0 =
ªs
) {

390 
œ°_blk_addr
 = ((
ª•_buff
[0] << 24) |

391 (
ª•_buff
[1] << 16) |

392 (
ª•_buff
[2] << 8) |

393 
ª•_buff
[3]);

394 
block_size
 = ((
ª•_buff
[4] << 24) |

395 (
ª•_buff
[5] << 16) |

396 (
ª•_buff
[6] << 8) |

397 
ª•_buff
[7]);

398 i‡(0xfffffff‡=
œ°_blk_addr
) {

399 i‡(
vîbo£
)

400 
	`¥ötf
("Read Capacity (10)Ñeponse "

405 
	`¥ötf
("Read Capacity (10)Ñesults:\n");

406 
	`¥ötf
(" Number ofÜogical blocks=%u\n",

407 
œ°_blk_addr
 + 1);

408 
	`¥ötf
(" Logical block size=%u bytes\n",

409 
block_size
);

410  ()
block_size
;

413 i‡(
SG_LIB_CAT_NOT_READY
 =
ªs
)

414 
	`Ârötf
(
°dîr
, "READ CAPACITY (%d): deviceÇotÑeady\n",

415 (
do_16
 ? 16 : 10));

416 i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

417 
	`Ârötf
(
°dîr
, "READ CAPACITY (%d)Çot supported\n",

418 (
do_16
 ? 16 : 10));

419 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

420 
	`Ârötf
(
°dîr
, "bad field in READ CAPACITY (%d) "

421 "cdb\n", (
do_16
 ? 16 : 10));

422 i‡(
vîbo£
)

423 
	`Ârötf
(
°dîr
, "READ CAPACITY (%d) failed "

424 "[ªs=%d]\n", (
do_16
 ? 16 : 10), 
ªs
);

426 
	}
}

430 
	$maö
(
¨gc
, **
¨gv
)

432 c⁄° 
mode_∑ge
 = 
THIS_MPAGE_EXISTS
;

433 
fd
, 
ªs
, 
ˇlc_Àn
, 
bd_Àn
, 
dev_•ecific_∑øm
;

434 
off£t
, 
j
, 
bd_blk_Àn
, 
¥ob
, 
Àn
;

435 
uöt64_t
 
uŒ
;

436 
öt64_t
 
blk_cou¡
 = 0;

437 
blk_size
 = 0;

438 
f‹m©
 = 0;

439 
ªsize
 = 0;

440 
vîbo£
 = 0;

441 
fwaô
 = 0;

442 
mode6
 = 0;

443 
fmçöfo
 = 0;

444 
pöfo
 = 0;

445 
põ
 = 0;

446 
pfu
 = 0;

447 
±
 = 
DEF_POLL_TYPE
;

448 
πo_ªq
 = 0;

449 
cm∂°
 = 1;

450 
do_rˇp16
 = 0;

451 
l⁄g_lba
 = 0;

452 
d¸t
 = 0;

453 
do_si
 = 0;

454 
óæy
 = 0;

455 c⁄° * 
devi˚_«me
 = 
NULL
;

456 
pdt_«me
[64];

457 
sg_sim∂e_öquúy_ª•
 
öq_out
;

458 
ªt
 = 0;

461 
›ti⁄_ödex
 = 0;

462 
c
;

464 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "c:C:Def:FhlpP:q:rRs:SvVwx:6",

465 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

466 i‡(
c
 == -1)

469 
c
) {

471 i‡(0 =
	`°rcmp
("-1", 
›èrg
))

472 
blk_cou¡
 = -1;

474 
blk_cou¡
 = 
	`sg_gë_Œnum
(
›èrg
);

475 i‡(-1 =
blk_cou¡
) {

476 
	`Ârötf
(
°dîr
, "badárgumentÅo "

478  
SG_LIB_SYNTAX_ERROR
;

483 
cm∂°
 = 
	`sg_gë_num
(
›èrg
);

484 i‡((
cm∂°
 < 0) || ( cmplst > 1)) {

485 
	`Ârötf
(
°dîr
, "badárgumentÅo '--cmplst', "

487  
SG_LIB_SYNTAX_ERROR
;

491 
d¸t
 = 1;

494 
óæy
 = 1;

497 
fmçöfo
 = 
	`sg_gë_num
(
›èrg
);

498 i‡((
fmçöfo
 < 0) || ( fmtpinfo > 3)) {

499 
	`Ârötf
(
°dîr
, "badárgumentÅo "

502  
SG_LIB_SYNTAX_ERROR
;

506 
f‹m©
 = 1;

509 
	`ußge
();

512 
l⁄g_lba
 = 1;

513 
do_rˇp16
 = 1;

516 
pöfo
 = 1;

519 
pfu
 = 
	`sg_gë_num
(
›èrg
);

520 i‡((
pfu
 < 0) || (Öfu > 7)) {

521 
	`Ârötf
(
°dîr
, "badárgumentÅo '--pfu', "

523  
SG_LIB_SYNTAX_ERROR
;

527 
põ
 = 
	`sg_gë_num
(
›èrg
);

528 i‡((
põ
 < 0) || (Öie > 15)) {

529 
	`Ârötf
(
°dîr
, "badárgumentÅo '--pie', "

531  
SG_LIB_SYNTAX_ERROR
;

535 
ªsize
 = 1;

538 
πo_ªq
 = 1;

541 
blk_size
 = 
	`sg_gë_num
(
›èrg
);

542 i‡(
blk_size
 <= 0) {

543 
	`Ârötf
(
°dîr
, "badárgumentÅo '--size', "

545  
SG_LIB_SYNTAX_ERROR
;

549 
do_si
 = 1;

552 
vîbo£
++;

555 
	`Ârötf
(
°dîr
, "sg_format version: %s\n",

556 
vîsi⁄_°r
);

559 
fwaô
 = 1;

562 
±
 = !!
	`sg_gë_num
(
›èrg
);

565 
mode6
 = 1;

568 
	`ußge
();

569  
SG_LIB_SYNTAX_ERROR
;

572 i‡(
›töd
 < 
¨gc
) {

573 i‡(
NULL
 =
devi˚_«me
) {

574 
devi˚_«me
 = 
¨gv
[
›töd
];

575 ++
›töd
;

578 i‡(
›töd
 < 
¨gc
) {

579 ; 
›töd
 < 
¨gc
; ++optind)

580 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

581 
¨gv
[
›töd
]);

582 
	`ußge
();

583  
SG_LIB_SYNTAX_ERROR
;

585 i‡(
NULL
 =
devi˚_«me
) {

586 
	`Ârötf
(
°dîr
, "no DEVICEÇame given\n");

587 
	`ußge
();

588  
SG_LIB_SYNTAX_ERROR
;

590 i‡(
ªsize
) {

591 i‡(
f‹m©
) {

592 
	`Ârötf
(
°dîr
, "both '--format'ánd '--resize'"

594 
	`ußge
();

595  
SG_LIB_SYNTAX_ERROR
;

596 } i‡(0 =
blk_cou¡
) {

597 
	`Ârötf
(
°dîr
, "'--resize'Çeedsá '--count' (other"

599 
	`ußge
();

600  
SG_LIB_SYNTAX_ERROR
;

601 } i‡(0 !
blk_size
) {

602 
	`Ârötf
(
°dîr
, "'--resize'Çot compatible with "

604 
	`ußge
();

605  
SG_LIB_SYNTAX_ERROR
;

608 i‡((
pöfo
 > 0Ë|| (
πo_ªq
 > 0Ë|| (
fmçöfo
 > 0)) {

609 i‡((
pöfo
 || 
πo_ªq
Ë&& 
fmçöfo
) {

610 
	`Ârötf
(
°dîr
, "confusing with both '--pinfo' or "

613 
	`ußge
();

614  
SG_LIB_SYNTAX_ERROR
;

616 i‡(
pöfo
)

617 
fmçöfo
 |= 2;

618 i‡(
πo_ªq
)

619 
fmçöfo
 |= 1;

622 i‡((
fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 0 , 
vîbo£
)) < 0) {

623 
	`Ârötf
(
°dîr
, "error opening device file: %s: %s\n",

624 
devi˚_«me
, 
	`ß„_°ªº‹
(-
fd
));

625  
SG_LIB_FILE_ERROR
;

628 i‡(
	`sg_sim∂e_öquúy
(
fd
, &
öq_out
, 1, 
vîbo£
)) {

629 
	`Ârötf
(
°dîr
, "%s doesn'tÑespondÅoá SCSI INQUIRY\n",

630 
devi˚_«me
);

631 
ªt
 = 
SG_LIB_CAT_OTHER
;

632 
out
;

634 
	`¥ötf
(" %.8s %.16s %.4sÖeripheral_type: %s [0x%x]\n",

635 
öq_out
.
víd‹
, inq_out.
¥odu˘
, inq_out.
ªvisi⁄
,

636 
	`sg_gë_pdt_°r
(
öq_out
.
≥rùhîÆ_ty≥
, (
pdt_«me
),

637 
pdt_«me
),

638 
öq_out
.
≥rùhîÆ_ty≥
);

639 i‡(
vîbo£
)

640 
	`¥ötf
(" PROTECT=%d\n", !!(
öq_out
.
byã_5
 & 1));

641 i‡(
öq_out
.
byã_5
 & 1)

642 
	`¥ötf
(" << supportsÖrotection information>>\n");

644 i‡((0 !
öq_out
.
≥rùhîÆ_ty≥
) &&

645 (7 !
öq_out
.
≥rùhîÆ_ty≥
) &&

646 (0xê!
öq_out
.
≥rùhîÆ_ty≥
)) {

647 
	`Ârötf
(
°dîr
, "This format is only defined for disks "

649 
ªt
 = 
SG_LIB_CAT_MALFORMED
;

650 
out
;

653 
agaö_wôh_l⁄g_lba
:

654 
	`mem£t
(
dbuff
, 0, 
MAX_BUFF_SZ
);

655 i‡(
mode6
)

656 
ªs
 = 
	`sg_Œ_mode_£n£6
(
fd
, 0 , 0 ,

657 
mode_∑ge
, 0 , 
dbuff
,

658 
MAX_BUFF_SZ
, 1, 
vîbo£
);

660 
ªs
 = 
	`sg_Œ_mode_£n£10
(
fd
, 
l⁄g_lba
, 0 ,

661 0 , 
mode_∑ge
,

662 0 , 
dbuff
,

663 
MAX_BUFF_SZ
, 1, 
vîbo£
);

664 
ªt
 = 
ªs
;

665 i‡(
ªs
) {

666 i‡(
SG_LIB_CAT_NOT_READY
 =
ªs
)

667 
	`Ârötf
(
°dîr
, "MODE SENSE (%d) command, device "

668 "nŸÑódy\n", (
mode6
 ? 6 : 10));

669 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
)

670 
	`Ârötf
(
°dîr
, "MODE SENSE (%d) command, unit "

671 "©ã¡i⁄\n", (
mode6
 ? 6 : 10));

672 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

673 
	`Ârötf
(
°dîr
, "MODE SENSE (%d) command,áborted "

674 "comm™d\n", (
mode6
 ? 6 : 10));

675 i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
) {

676 
	`Ârötf
(
°dîr
, "MODE SENSE (%d) command isÇot "

677 "suµ‹ãd\n", (
mode6
 ? 6 : 10));

678 
	`Ârötf
(
°dîr
, "Åryágain %sÅhe '--six' "

679 "›ti⁄\n", (
mode6
 ? "without" : "with"));

681 } i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
) {

682 i‡(
l⁄g_lba
 && (! 
mode6
))

683 
	`Ârötf
(
°dîr
, "bad field in MODE SENSE "

685 "\n", (
mode6
 ? 6 : 10));

687 
	`Ârötf
(
°dîr
, "bad field in MODE SENSE "

689 "\n", (
mode6
 ? 6 : 10), 
mode_∑ge
);

691 
	`Ârötf
(
°dîr
, "MODE SENSE (%d) command failed\n",

692 (
mode6
 ? 6 : 10));

693 i‡(0 =
vîbo£
)

694 
	`Ârötf
(
°dîr
, "Åry '-v' for more "

696 
out
;

698 i‡(
mode6
) {

699 
ˇlc_Àn
 = 
dbuff
[0] + 1;

700 
dev_•ecific_∑øm
 = 
dbuff
[2];

701 
bd_Àn
 = 
dbuff
[3];

702 
l⁄g_lba
 = 0;

703 
off£t
 = 4;

705 
dbuff
[0] = 0;

706 
dbuff
[1] = 0;

707 
dbuff
[2] = 0;

709 
ˇlc_Àn
 = (
dbuff
[0] << 8) + dbuff[1] + 2;

710 
dev_•ecific_∑øm
 = 
dbuff
[3];

711 
bd_Àn
 = (
dbuff
[6] << 8) + dbuff[7];

712 
l⁄g_lba
 = (
dbuff
[4] & 1);

713 
off£t
 = 8;

715 
dbuff
[0] = 0;

716 
dbuff
[1] = 0;

717 
dbuff
[2] = 0;

718 
dbuff
[3] = 0;

720 i‡((
off£t
 + 
bd_Àn
Ë< 
ˇlc_Àn
)

721 
dbuff
[
off£t
 + 
bd_Àn
] &= 0x7f;

722 
¥ob
 = 0;

723 
bd_blk_Àn
 = 0;

724 
	`¥ötf
("Mode Sense (block descriptor) data,ÖriorÅo changes:\n");

725 i‡(
dev_•ecific_∑øm
 & 0x40)

726 
	`¥ötf
(" <<< Write Protect (WP) bit set >>>\n");

727 i‡(
bd_Àn
 > 0) {

728 
uŒ
 = 0;

729 
j
 = 0; j < (
l⁄g_lba
 ? 8 : 4); ++j) {

730 i‡(
j
 > 0)

731 
uŒ
 <<= 8;

732 
uŒ
 |
dbuff
[
off£t
 + 
j
];

734 i‡((0 =
l⁄g_lba
Ë&& (0xfffffff‡=
uŒ
)) {

735 i‡(
vîbo£
)

736 
	`Ârötf
(
°dîr
, "Mode senseÇumber of "

738 
l⁄g_lba
 = 1;

739 
mode6
 = 0;

740 
do_rˇp16
 = 1;

741 
agaö_wôh_l⁄g_lba
;

743 i‡(
l⁄g_lba
)

744 
bd_blk_Àn
 = (
dbuff
[
off£t
 + 12] << 24) +

745 (
dbuff
[
off£t
 + 13] << 16) +

746 (
dbuff
[
off£t
 + 14] << 8) +

747 
dbuff
[
off£t
 + 15];

749 
bd_blk_Àn
 = (
dbuff
[
off£t
 + 5] << 16) +

750 (
dbuff
[
off£t
 + 6] << 8) +

751 
dbuff
[
off£t
 + 7];

752 i‡(
l⁄g_lba
) {

753 
	`¥ötf
(" <<<Üonglba flag set (64 bitÜba) >>>\n");

754 i‡(
bd_Àn
 != 16)

755 
¥ob
 = 1;

756 } i‡(
bd_Àn
 != 8)

757 
¥ob
 = 1;

758 
	`¥ötf
(" Numbî o‡blocks=%" 
PRIu64
 " [0x%" 
PRIx64
 "]\n",

759 
uŒ
, ull);

760 
	`¥ötf
(" Block size=%d [0x%x]\n", 
bd_blk_Àn
, bd_blk_len);

762 
	`¥ötf
(" No block descriptorsÖresent\n");

763 
¥ob
 = 1;

765 i‡(
ªsize
 ||

766 (
f‹m©
 && ((
blk_cou¡
 != 0) ||

767 ((
blk_size
 > 0Ë&& (blk_sizê!
bd_blk_Àn
))))) {

803 i‡(
¥ob
) {

804 
	`Ârötf
(
°dîr
, "NeedÅoÖerform MODE SELECT (to "

806 
	`Ârötf
(
°dîr
, "but (single) block descriptorÇot "

808 
ªt
 = 
SG_LIB_CAT_MALFORMED
;

809 
out
;

811 i‡(
blk_cou¡
 != 0) {

812 
Àn
 = (
l⁄g_lba
 ? 8 : 4);

813 
j
 = 0; j < 
Àn
; ++j)

814 
dbuff
[
off£t
 + 
j
] =

815 (
blk_cou¡
 >> ((
Àn
 - 
j
 - 1) * 8)) & 0xff;

816 } i‡((
blk_size
 > 0Ë&& (blk_sizê!
bd_blk_Àn
)) {

817 
Àn
 = (
l⁄g_lba
 ? 8 : 4);

818 
j
 = 0; j < 
Àn
; ++j)

819 
dbuff
[
off£t
 + 
j
] = 0;

821 i‡((
blk_size
 > 0Ë&& (blk_sizê!
bd_blk_Àn
)) {

822 i‡(
l⁄g_lba
) {

823 
dbuff
[
off£t
 + 12] = (
blk_size
 >> 24) & 0xff;

824 
dbuff
[
off£t
 + 13] = (
blk_size
 >> 16) & 0xff;

825 
dbuff
[
off£t
 + 14] = (
blk_size
 >> 8) & 0xff;

826 
dbuff
[
off£t
 + 15] = 
blk_size
 & 0xff;

828 
dbuff
[
off£t
 + 5] = (
blk_size
 >> 16) & 0xff;

829 
dbuff
[
off£t
 + 6] = (
blk_size
 >> 8) & 0xff;

830 
dbuff
[
off£t
 + 7] = 
blk_size
 & 0xff;

833 i‡(
mode6
)

834 
ªs
 = 
	`sg_Œ_mode_£À˘6
(
fd
, 1 , 1 ,

835 
dbuff
, 
ˇlc_Àn
, 1, 
vîbo£
);

837 
ªs
 = 
	`sg_Œ_mode_£À˘10
(
fd
, 1 , 1 ,

838 
dbuff
, 
ˇlc_Àn
, 1, 
vîbo£
);

839 
ªt
 = 
ªs
;

840 i‡(
ªs
) {

841 i‡(
SG_LIB_CAT_NOT_READY
 =
ªs
)

842 
	`Ârötf
(
°dîr
, "MODE SELECT command, "

844 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
)

845 
	`Ârötf
(
°dîr
, "MODE SELECT command, "

847 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

848 
	`Ârötf
(
°dîr
, "MODE SELECT command, "

850 i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

851 
	`Ârötf
(
°dîr
, "MODE SELECT (%d) command is "

852 "nŸ suµ‹ãd\n", (
mode6
 ? 6 : 10));

853 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

854 
	`Ârötf
(
°dîr
, "bad field in MODE SELECT "

855 "(%d)\n", (
mode6
 ? 6 : 10));

857 
	`Ârötf
(
°dîr
, "MODE SELECT (%d) command "

858 "Áûed\n", (
mode6
 ? 6 : 10));

859 i‡(0 =
vîbo£
)

860 
	`Ârötf
(
°dîr
, "Åry '-v' for "

862 
out
;

865 i‡(
ªsize
) {

866 
	`¥ötf
("Resize operation seemsÅo have been successful\n");

867 
out
;

869 i‡(! 
f‹m©
) {

870 
ªs
 = 
	`¥öt_ªad_ˇp
(
fd
, 
do_rˇp16
, 
vîbo£
);

871 i‡(-2 =
ªs
) {

872 
do_rˇp16
 = 1;

873 
ªs
 = 
	`¥öt_ªad_ˇp
(
fd
, 
do_rˇp16
, 
vîbo£
);

875 i‡(
ªs
 < 0)

876 
ªt
 = -1;

877 i‡((
ªs
 > 0Ë&& (
bd_blk_Àn
 > 0) &&

878 (
ªs
 !()
bd_blk_Àn
)) {

879 
	`¥ötf
(" Warning: mode senseándÑead capacity "

881 
bd_blk_Àn
, 
ªs
);

882 
	`¥ötf
(" ProbablyÇeeds format\n");

884 
	`¥ötf
("No changes made. To format use '--format'. To "

886 
out
;

889 i‡(
f‹m©
)

891 
	`¥ötf
("\nA FORMAT will commence in 10 seconds\n");

892 
	`¥ötf
(" ALL d©®⁄ %†wû»bêDESTROYED\n", 
devi˚_«me
);

893 
	`¥ötf
(" Press control-CÅoábort\n");

894 
	`¶ìp_f‹
(5);

895 
	`¥ötf
("A FORMAT will commence in 5 seconds\n");

896 
	`¥ötf
(" ALL d©®⁄ %†wû»bêDESTROYED\n", 
devi˚_«me
);

897 
	`¥ötf
(" Press control-CÅoábort\n");

898 
	`¶ìp_f‹
(5);

899 
ªs
 = 
	`scsi_f‹m©
(
fd
, 
fmçöfo
, 
cm∂°
, 
pfu
, ! 
fwaô
, 
d¸t
,

900 
põ
, 
do_si
, 
óæy
, 
±
, 
vîbo£
);

901 
ªt
 = 
ªs
;

902 i‡(
ªs
) {

903 
	`Ârötf
(
°dîr
, "FORMAT failed\n");

904 i‡(0 =
vîbo£
)

905 
	`Ârötf
(
°dîr
, "Åry '-v' for more "

909 
	`Ârötf
(
°dîr
, "FORMAT ignored,Åesting\n");

912 
out
:

913 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
fd
);

914 i‡(
ªs
 < 0) {

915 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

916 i‡(0 =
ªt
)

917  
SG_LIB_FILE_ERROR
;

919  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

920 
	}
}

	@src/sg_get_config.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<˘y≥.h
>

14 
	~<gë›t.h
>

16 #ifde‡
HAVE_CONFIG_H


17 
	~"c⁄fig.h
"

19 
	~"sg_lib.h
"

20 
	~"sg_cmds_basic.h
"

21 
	~"sg_cmds_mmc.h
"

30 c⁄° * 
	gvîsi⁄_°r
 = "0.38 20130507";

32 
	#MX_ALLOC_LEN
 8192

	)

33 
	#NAME_BUFF_SZ
 64

	)

35 
	#ME
 "sg_gë_c⁄fig: "

	)

38 
	gª•_buf„r
[
MX_ALLOC_LEN
];

40 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

58 
	$ußge
()

60 
	`Ârötf
(
°dîr
,

91 
	}
}

93 
	svÆ_desc_t
 {

94 
	mvÆ
;

95 c⁄° * 
	mdesc
;

98 
vÆ_desc_t
 
	g¥ofûe_desc_¨r
[] = {

135 {-1, 
NULL
},

139 
	$gë_¥ofûe_°r
(
¥ofûe_num
, * 
buff
)

141 c⁄° 
vÆ_desc_t
 * 
pdp
;

143 
pdp
 = 
¥ofûe_desc_¨r
;Ödp->
desc
; ++pdp) {

144 i‡(
pdp
->
vÆ
 =
¥ofûe_num
) {

145 
	`°r˝y
(
buff
, 
pdp
->
desc
);

146  
buff
;

149 
	`¢¥ötf
(
buff
, 64, "0x%x", 
¥ofûe_num
);

150  
buff
;

151 
	}
}

153 
vÆ_desc_t
 
	g„©uª_desc_¨r
[] = {

218 
	$gë_„©uª_°r
(
„©uª_num
, * 
buff
)

220 
k
, 
num
;

222 
num
 = (
„©uª_desc_¨r
) / (feature_desc_arr[0]);

223 
k
 = 0; k < 
num
; ++k) {

224 i‡(
„©uª_desc_¨r
[
k
].
vÆ
 =
„©uª_num
) {

225 
	`°r˝y
(
buff
, 
„©uª_desc_¨r
[
k
].
desc
);

226  
buff
;

229 
	`¢¥ötf
(
buff
, 64, "0x%x", 
„©uª_num
);

230  
buff
;

231 
	}
}

234 
	$dSåRaw
(c⁄° * 
°r
, 
Àn
)

236 
k
;

238 
k
 = 0 ; k < 
Àn
; ++k)

239 
	`¥ötf
("%c", 
°r
[
k
]);

240 
	}
}

243 
	$decode_„©uª
(
„©uª
, * 
u˝
, 
Àn
)

245 
k
, 
num
, 
n
, 
¥ofûe
;

246 
buff
[128];

247 c⁄° * 
˝
;

249 
˝
 = "";

250 
„©uª
) {

252 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

253 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 2), !!(ucp[2] & 1),

254 
„©uª
);

255 
	`¥ötf
("ávailableÖrofiles [moreÑecentÅypically higher "

257 
k
 = 4; k < 
Àn
; k += 4) {

258 
¥ofûe
 = (
u˝
[
k
] << 8) + ucp[k + 1];

259 
	`¥ötf
("Örofile: %s , currentP=%d\n",

260 
	`gë_¥ofûe_°r
(
¥ofûe
, 
buff
), !!(
u˝
[
k
 + 2] & 1));

264 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

265 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 2), !!(ucp[2] & 1),

266 
„©uª
);

267 i‡(
Àn
 < 8) {

268 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

271 
num
 = (
u˝
[4] << 24) + (ucp[5] << 16) + (ucp[6] << 8) + ucp[7];

272 
num
) {

273 0: 
˝
 = "unspecified"; ;

274 1: 
˝
 = "SCSI family"; ;

275 2: 
˝
 = "ATAPI"; ;

276 3: 
˝
 = "IEEE 1394 - 1995"; ;

277 4: 
˝
 = "IEEE 1394A"; ;

278 5: 
˝
 = "Fibre channel"; ;

279 6: 
˝
 = "IEEE 1394B"; ;

280 7: 
˝
 = "Serial ATAPI"; ;

281 8: 
˝
 = "USB (both 1ánd 2)"; ;

282 0xffff: 
˝
 = "vendor unique"; ;

284 
	`¢¥ötf
(
buff
, (buff), "[0x%x]", 
num
);

285 
˝
 = 
buff
;

288 
	`¥ötf
(" Physiˇ»öãrÁ˚ sènd¨d: %s", 
˝
);

289 i‡(
Àn
 > 8)

290 
	`¥ötf
(", INQ2=%d, DBE=%d\n", !!(
u˝
[8] & 2), !!(ucp[8] & 1));

292 
	`¥ötf
("\n");

295 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

296 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 2), !!(ucp[2] & 1),

297 
„©uª
);

298 i‡(
Àn
 < 8) {

299 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

302 
	`¥ötf
(" OCEvít=%d, ASYNC=%d\n", !!(
u˝
[4] & 2),

303 !!(
u˝
[4] & 1));

306 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

307 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 2), !!(ucp[2] & 1),

308 
„©uª
);

309 i‡(
Àn
 < 8) {

310 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

313 
num
 = (
u˝
[4] >> 5) & 0x7;

314 
num
) {

315 0: 
˝
 = "Caddy/slotÅype"; ;

316 1: 
˝
 = "TrayÅype"; ;

317 2: 
˝
 = "Pop-upÅype"; ;

318 4: 
˝
 = "Embedded changer with individually changeable discs";

320 5: 
˝
 = "Embedded changer usingá magazine"; ;

322 
	`¢¥ötf
(
buff
, (buff), "[0x%x]", 
num
);

323 
˝
 = 
buff
;

326 
	`¥ötf
(" Lﬂdög mech™ism: %s\n", 
˝
);

327 
	`¥ötf
(" Load=%d, Eject=%d, Prevent jumper=%d, Lock=%d\n",

328 !!(
u˝
[4] & 0x10), !!(ucp[4] & 0x8), !!(ucp[4] & 0x4),

329 !!(
u˝
[4] & 0x1));

332 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

333 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

334 
„©uª
);

335 i‡(
Àn
 < 8) {

336 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

339 
	`¥ötf
(" DWP=%d, WDCB=%d, SPWP=%d, SSWPP=%d\n", !!(
u˝
[4] & 0x8),

340 !!(
u˝
[4] & 0x4), !!(ucp[4] & 0x2), !!(ucp[4] & 0x1));

343 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

344 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

345 
„©uª
);

346 i‡(
Àn
 < 12) {

347 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

350 
num
 = (
u˝
[4] << 24) + (ucp[5] << 16) + (ucp[6] << 8) + ucp[7];

351 
	`¥ötf
(" Logical block size=0x%x, blocking=0x%x, PP=%d\n",

352 
num
, ((
u˝
[8] << 8) + ucp[9]), !!(ucp[10] & 0x1));

365 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

366 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

367 
„©uª
);

370 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

371 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

372 
„©uª
);

373 i‡(
Àn
 < 8) {

374 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

377 
	`¥ötf
(" DAP=%d, C2 fœgs=%d, CD-Text=%d\n", !!(
u˝
[4] & 0x80),

378 !!(
u˝
[4] & 0x2), !!(ucp[4] & 0x1));

381 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

382 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

383 
„©uª
);

384 i‡(
Àn
 > 7)

385 
	`¥ötf
(" MULTI110=%d, Dual-RW=%d, Dual-R=%d\n",

386 !!(
u˝
[4] & 0x1), !!(ucp[6] & 0x2), !!(ucp[6] & 0x1));

389 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

390 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

391 
„©uª
);

392 i‡(
Àn
 < 16) {

393 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

396 
num
 = (
u˝
[4] << 24) + (ucp[5] << 16) + (ucp[6] << 8) + ucp[7];

397 
n
 = (
u˝
[8] << 24) + (ucp[9] << 16) + (ucp[10] << 8) + ucp[11];

398 
	`¥ötf
(" LastÜba=0x%x, Logical block size=0x%x, blocking=0x%x,"

399 " PP=%d\n", 
num
, 
n
, ((
u˝
[12] << 8) + ucp[13]),

400 !!(
u˝
[14] & 0x1));

403 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

404 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

405 
„©uª
);

406 i‡(
Àn
 < 8) {

407 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

410 
	`¥ötf
(" Data blockÅypes supported=0x%x, TRIO=%d, ARSV=%d, "

411 "BUF=%d\n", ((
u˝
[4] << 8) + ucp[5]), !!(ucp[6] & 0x4),

412 !!(
u˝
[6] & 0x2), !!(ucp[6] & 0x1));

413 
num
 = 
u˝
[7];

414 
	`¥ötf
(" Numbî o‡lök sizes=%d\n", 
num
);

415 
k
 = 0; k < 
num
; ++k)

416 
	`¥ötf
(" %d\n", 
u˝
[8 + 
k
]);

420 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

421 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

422 
„©uª
);

423 i‡(
Àn
 > 4)

424 
	`¥ötf
(" BD-RE: RENoSA=%d, Expand=%d, QCert=%d, Cert=%d, "

425 "FRF=%d\n", !!(
u˝
[4] & 0x8), !!(ucp[4] & 0x4),

426 !!(
u˝
[4] & 0x2), !!(ucp[4] & 0x1), !!(ucp[5] & 0x80));

427 i‡(
Àn
 > 8)

428 
	`¥ötf
(" BD-R: RRM=%d\n", !!(
u˝
[8] & 0x1));

431 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

432 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

433 
„©uª
);

434 i‡(
Àn
 > 4)

435 
	`¥ötf
(" SSA=%d\n", !!(
u˝
[4] & 0x80));

438 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

439 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

440 
„©uª
);

441 i‡(
Àn
 < 12) {

442 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

445 
num
 = (
u˝
[4] << 24) + (ucp[5] << 16) + (ucp[6] << 8) + ucp[7];

446 
	`¥ötf
(" Logical block size=0x%x, blocking=0x%x, PP=%d\n",

447 
num
, ((
u˝
[8] << 8) + ucp[9]), !!(ucp[10] & 0x1));

452 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

453 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

454 
„©uª
);

455 i‡(
Àn
 > 4)

456 
	`¥ötf
(" DVD+Write=%d, DVD+Read=%d, Write=%d\n",

457 !!(
u˝
[4] & 0x4), !!(ucp[4] & 0x2), !!(ucp[4] & 0x1));

460 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

461 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

462 
„©uª
);

463 i‡(
Àn
 < 8) {

464 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

467 
	`¥ötf
(" DRT-DM=%d,Çumber of DBI cache zones=0x%x,Çumber of "

468 "íåõs=0x%x\n", !!(
u˝
[4] & 0x1), ucp[5],

469 ((
u˝
[6] << 8) + ucp[7]));

472 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

473 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

474 
„©uª
);

475 i‡(
Àn
 < 8) {

476 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

479 
	`¥ötf
(" Write=%d, Quick start=%d, Close only=%d\n",

480 !!(
u˝
[4] & 0x1), !!(ucp[5] & 0x2), !!(ucp[5] & 0x1));

483 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

484 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

485 
„©uª
);

486 i‡(
Àn
 < 8) {

487 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

490 
	`¥ötf
(" Wrôe=%d\n", !!(
u˝
[4] & 0x1));

493 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

494 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

495 
„©uª
);

496 i‡(
Àn
 < 8) {

497 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

500 
	`¥ötf
(" DSDG=%d, DSDR=%d, Intermediate=%d, Blank=%d\n",

501 !!(
u˝
[4] & 0x8), !!(ucp[4] & 0x4), !!(ucp[4] & 0x2),

502 !!(
u˝
[4] & 0x1));

505 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

506 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

507 
„©uª
);

508 i‡(
Àn
 < 8) {

509 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

512 
	`¥ötf
(" BUF=%d, R-WÑaw=%d, R-WÖack=%d, Test write=%d\n",

513 !!(
u˝
[4] & 0x40), !!(ucp[4] & 0x10), !!(ucp[4] & 0x8),

514 !!(
u˝
[4] & 0x4));

515 
	`¥ötf
(" CD-RW=%d, R-W sub-code=%d, DataÅype supported=%d\n",

516 !!(
u˝
[4] & 0x2), !!(ucp[4] & 0x1), (ucp[6] << 8) + ucp[7]);

519 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

520 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

521 
„©uª
);

522 i‡(
Àn
 < 8) {

523 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

526 
	`¥ötf
(" BUF=%d, SAO=%d, Raw MS=%d, Raw=%d\n",

527 !!(
u˝
[4] & 0x40), !!(ucp[4] & 0x20), !!(ucp[4] & 0x10),

528 !!(
u˝
[4] & 0x8));

529 
	`¥ötf
(" Test write=%d, CD-RW=%d, R-W=%d\n",

530 !!(
u˝
[4] & 0x4), !!(ucp[4] & 0x2), !!(ucp[4] & 0x1));

531 
	`¥ötf
(" Maximum cue sheetÜength=0x%x\n",

532 (
u˝
[5] << 16) + (ucp[6] << 8) + ucp[7]);

535 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

536 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

537 
„©uª
);

538 i‡(
Àn
 < 8) {

539 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

542 
	`¥ötf
(" BUF=%d, RDL=%d, Test write=%d, DVD-RW SL=%d\n",

543 !!(
u˝
[4] & 0x40), !!(ucp[4] & 0x8), !!(ucp[4] & 0x4),

544 !!(
u˝
[4] & 0x2));

547 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

548 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

549 
„©uª
);

550 i‡(
Àn
 < 8) {

551 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

554 
num
 = 
u˝
[7];

555 
	`¥ötf
(" Numbî o‡lök sizes=%d\n", 
num
);

556 
k
 = 0; k < 
num
; ++k)

557 
	`¥ötf
(" %d\n", 
u˝
[8 + 
k
]);

560 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

561 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

562 
„©uª
);

563 i‡(
Àn
 < 8) {

564 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

567 
	`¥ötf
(" CLJB=%d\n", !!(
u˝
[4] & 0x1));

568 
	`¥ötf
(" Buf„∏block size=%d\n", 
u˝
[7]);

572 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

573 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

574 
„©uª
);

575 i‡(
Àn
 < 8) {

576 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

579 
	`¥ötf
(" CD-RW medü sub-ty≥ suµ‹à(bômask)=0x%x\n", 
u˝
[5]);

583 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

584 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

585 
„©uª
);

586 i‡(
Àn
 < 8) {

587 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

590 
	`¥ötf
(" write=%d, quick_start=%d, close_only=%d\n",

591 !!(
u˝
[4] & 0x1), !!(ucp[5] & 0x2), !!(ucp[5] & 0x1));

594 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

595 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

596 
„©uª
);

597 i‡(
Àn
 < 8) {

598 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

601 
	`¥ötf
(" wrôe=%d\n", !!(
u˝
[4] & 0x1));

604 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

605 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

606 
„©uª
);

607 i‡(
Àn
 < 32) {

608 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

611 
	`¥ötf
(" Bitmaps for BD-REÑead support:\n");

612 
	`¥ötf
(" Class 0=0x%x, Class 1=0x%x, Class 2=0x%x, "

613 "Cœs†3=0x%x\n", (
u˝
[8] << 8) + ucp[9],

614 (
u˝
[10] << 8) + ucp[11],

615 (
u˝
[12] << 8) + ucp[13],

616 (
u˝
[14] << 8) + ucp[15]);

617 
	`¥ötf
(" Bitmaps for BD-RÑead support:\n");

618 
	`¥ötf
(" Class 0=0x%x, Class 1=0x%x, Class 2=0x%x, "

619 "Cœs†3=0x%x\n", (
u˝
[16] << 8) + ucp[17],

620 (
u˝
[18] << 8) + ucp[19],

621 (
u˝
[20] << 8) + ucp[21],

622 (
u˝
[22] << 8) + ucp[23]);

623 
	`¥ötf
(" Bitmaps for BD-ROMÑead support:\n");

624 
	`¥ötf
(" Class 0=0x%x, Class 1=0x%x, Class 2=0x%x, "

625 "Cœs†3=0x%x\n", (
u˝
[24] << 8) + ucp[25],

626 (
u˝
[26] << 8) + ucp[27],

627 (
u˝
[28] << 8) + ucp[29],

628 (
u˝
[30] << 8) + ucp[31]);

631 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

632 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

633 
„©uª
);

634 i‡(
Àn
 < 32) {

635 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

638 
	`¥ötf
(" SVNR=%d\n", !!(
u˝
[4] & 0x1));

639 
	`¥ötf
(" Bitmaps for BD-RE write support:\n");

640 
	`¥ötf
(" Class 0=0x%x, Class 1=0x%x, Class 2=0x%x, "

641 "Cœs†3=0x%x\n", (
u˝
[8] << 8) + ucp[9],

642 (
u˝
[10] << 8) + ucp[11],

643 (
u˝
[12] << 8) + ucp[13],

644 (
u˝
[14] << 8) + ucp[15]);

645 
	`¥ötf
(" Bitmaps for BD-R write support:\n");

646 
	`¥ötf
(" Class 0=0x%x, Class 1=0x%x, Class 2=0x%x, "

647 "Cœs†3=0x%x\n", (
u˝
[16] << 8) + ucp[17],

648 (
u˝
[18] << 8) + ucp[19],

649 (
u˝
[20] << 8) + ucp[21],

650 (
u˝
[22] << 8) + ucp[23]);

651 
	`¥ötf
(" Bitmaps for BD-ROM write support:\n");

652 
	`¥ötf
(" Class 0=0x%x, Class 1=0x%x, Class 2=0x%x, "

653 "Cœs†3=0x%x\n", (
u˝
[24] << 8) + ucp[25],

654 (
u˝
[26] << 8) + ucp[27],

655 (
u˝
[28] << 8) + ucp[29],

656 (
u˝
[30] << 8) + ucp[31]);

660 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

661 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

662 
„©uª
);

663 i‡(
Àn
 < 8) {

664 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

667 
	`¥ötf
(" HD DVD-R=%d, HD DVD-RAM=%d\n", !!(
u˝
[4] & 0x1),

668 !!(
u˝
[6] & 0x1));

671 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

672 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

673 
„©uª
);

674 i‡(
Àn
 < 8) {

675 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

678 
	`¥ötf
(" HD DVD-R=%d, HD DVD-RAM=%d\n", !!(
u˝
[4] & 0x1),

679 !!(
u˝
[6] & 0x1));

682 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

683 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

684 
„©uª
);

685 i‡(
Àn
 < 8) {

686 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

689 
	`¥ötf
(" BGP=%d\n", !!(
u˝
[4] & 0x1));

692 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

693 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

694 
„©uª
);

695 i‡(
Àn
 < 8) {

696 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

699 
	`¥ötf
(" RI=%d\n", !!(
u˝
[4] & 0x1));

703 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

704 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

705 
„©uª
);

706 i‡(
Àn
 < 8) {

707 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

710 
	`¥ötf
(" PP=%d\n", !!(
u˝
[4] & 0x1));

713 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

714 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

715 
„©uª
);

716 i‡(
Àn
 < 8) {

717 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

720 
	`¥ötf
(" SCC=%d, SDP=%d, highest slotÇumber=%d\n",

721 !!(
u˝
[4] & 0x10), !!(ucp[4] & 0x4), (ucp[7] & 0x1f));

724 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

725 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

726 
„©uª
);

727 i‡(
Àn
 < 8) {

728 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

731 
	`¥ötf
(" Scan=%d, SCM=%d, SV=%d,Çumber of volumeÜevels=%d\n",

732 !!(
u˝
[4] & 0x4), !!(ucp[4] & 0x2), !!(ucp[4] & 0x1),

733 (
u˝
[6] << 8) + ucp[7]);

736 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

737 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

738 
„©uª
);

739 i‡(
Àn
 < 4) {

740 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

743 i‡(
Àn
 > 4)

744 
	`¥ötf
(" M5=%d\n", !!(
u˝
[4] & 0x1));

747 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

748 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

749 
„©uª
);

750 i‡(
Àn
 > 7) {

751 
	`¥ötf
(" Group 3=%d, unitÜength=%d\n",

752 !!(
u˝
[4] & 0x1), (ucp[6] << 8) + ucp[7]);

756 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

757 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

758 
„©uª
);

759 i‡(
Àn
 < 8) {

760 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

763 
	`¥ötf
(" CSS vîsi⁄=%d\n", 
u˝
[7]);

766 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

767 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

768 
„©uª
);

769 i‡(
Àn
 < 8) {

770 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

773 
	`¥ötf
(" RBCB=%d, SCS=%d, MP2A=%d, WSPD=%d, SW=%d\n",

774 !!(
u˝
[4] & 0x10), !!(ucp[4] & 0x8), !!(ucp[4] & 0x4),

775 !!(
u˝
[4] & 0x2), !!(ucp[4] & 0x1));

778 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

779 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

780 
„©uª
);

781 
num
 = 
Àn
 - 4;

782 
n
 = (
buff
) - 1;

783 
n
 = ((
num
 <Ç) ?Çum :Ç);

784 
	`°∫˝y
(
buff
, (c⁄° *)(
u˝
 + 4), 
n
);

785 
buff
[
n
] = '\0';

786 
	`¥ötf
(" Drivê£rü»numbî: %s\n", 
buff
);

790 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

791 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

792 
„©uª
);

793 
	`¥ötf
(" Disc control blocks:\n");

794 
k
 = 4; k < 
Àn
; k += 4) {

795 
	`¥ötf
(" 0x%x\n", (()
u˝
[
k
] << 24) +

796 (
u˝
[
k
 + 1] << 16) + (ucp[k + 2] << 8) + ucp[k + 3]);

800 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

801 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

802 
„©uª
);

803 i‡(
Àn
 < 8) {

804 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

807 
	`¥ötf
(" CPRM vîsi⁄=%d\n", 
u˝
[7]);

810 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

811 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

812 
„©uª
);

813 i‡(
Àn
 < 20) {

814 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

817 
	`¥ötf
(" %.2s%.2s/%.2s/%.2†%.2s:%.2s:%.2s\n", 
u˝
 + 4,

818 
u˝
 + 6, ucp + 8, ucp + 10, ucp + 12, ucp + 14, ucp + 16);

821 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

822 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

823 
„©uª
);

824 i‡(
Àn
 < 8) {

825 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

828 
	`¥ötf
(" BNG=%d, Block count for bindingÇonce=%d\n",

829 !!(
u˝
[4] & 0x1), ucp[5]);

830 
	`¥ötf
(" Number of AGIDs=%d, AACS version=%d\n",

831 (
u˝
[6] & 0xf), ucp[7]);

834 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

835 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

836 
„©uª
);

837 i‡(
Àn
 < 8) {

838 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

841 
	`¥ötf
(" MaximumÇumber of scrambledÉxtent information "

842 "íåõs=%d\n", 
u˝
[4]);

847 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

848 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

849 
„©uª
);

850 i‡(
Àn
 < 8) {

851 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

854 
	`¥ötf
(" BD CPS major:minor versionÇumber=%d:%d, max open "

855 "SACs=%d\n", ((
u˝
[5] >> 4) & 0xf), (ucp[5] & 0xf),

856 
u˝
[6] & 0x3);

859 
	`¥ötf
(" version=%d,Öersist=%d, current=%d [0x%x]\n",

860 ((
u˝
[2] >> 2) & 0xf), !!(ucp[2] & 0x2), !!(ucp[2] & 0x1),

861 
„©uª
);

862 i‡(
Àn
 < 8) {

863 
	`¥ötf
("áddôi⁄ÆÜígth [%d]Åoÿsh‹t\n", 
Àn
 - 4);

866 
	`¥ötf
(" PSAU=%d, LOSPB=%d, ME=%d\n", !!(
u˝
[4] & 0x80),

867 !!(
u˝
[4] & 0x40), !!(ucp[4] & 0x1));

868 
num
 = 
u˝
[5];

869 
	`¥ötf
(" ProfileÇumbers:\n");

870 
k
 = 6; (
num
 > 0Ë&& (k < 
Àn
); --num, k += 2) {

871 
	`¥ötf
(" %d\n",

872 (()
u˝
[
k
] << 8) + ucp[k + 1]);

876 
	`¥ötf
(" Unknown feature [0x%x], version=%dÖersist=%d, "

877 "cuºít=%d\n", 
„©uª
, ((
u˝
[2] >> 2) & 0xf),

878 !!(
u˝
[2] & 0x2), !!(ucp[2] & 0x1));

879 
	`dSåHex
((c⁄° *)
u˝
, 
Àn
, 1);

882 
	}
}

885 
	$decode_c⁄fig
(* 
ª•
, 
max_ª•_Àn
, 
Àn
, 
brõf
,

886 
ö√r_hex
)

888 
k
, 
cuº_¥ofûe
, 
exåa_Àn
, 
„©uª
;

889 * 
u˝
;

890 
buff
[128];

892 i‡(
max_ª•_Àn
 < 
Àn
) {

893 
	`Ârötf
(
°dîr
, "<<<warning:ÑesponseÅoÜong for buffer, "

894 "ª•_Àn=%d>>>\n", 
Àn
);

895 
Àn
 = 
max_ª•_Àn
;

897 i‡(
Àn
 < 8) {

898 
	`Ârötf
(
°dîr
, "ª•⁄£ÜígthÅoÿsh‹t: %d\n", 
Àn
);

901 
cuº_¥ofûe
 = (
ª•
[6] << 8) +Ñesp[7];

902 i‡(0 =
cuº_¥ofûe
)

903 
	`Ârötf
(
°dîr
, "No currentÖrofile\n");

905 
	`¥ötf
("Cuºíà¥ofûe: %s\n", 
	`gë_¥ofûe_°r
(
cuº_¥ofûe
, 
buff
));

906 
	`¥ötf
("Fótuªs%s:\n", (
brõf
 ? " (in brief)" : ""));

907 
u˝
 = 
ª•
 + 8;

908 
Àn
 -= 8;

909 
k
 = 0; k < 
Àn
; k +
exåa_Àn
, 
u˝
 +=Éxtra_len) {

910 
exåa_Àn
 = 4 + 
u˝
[3];

911 
„©uª
 = (
u˝
[0] << 8) + ucp[1];

912 
	`¥ötf
(" %†„©uª\n", 
	`gë_„©uª_°r
(
„©uª
, 
buff
));

913 i‡(
brõf
)

915 i‡(
ö√r_hex
) {

916 
	`dSåHex
((c⁄° *)
u˝
, 
exåa_Àn
, 1);

919 i‡(0 !(
exåa_Àn
 % 4))

920 
	`¥ötf
("ádditionalÜength [%d]Çotá multiple of 4, ignore\n",

921 
exåa_Àn
 - 4);

923 
	`decode_„©uª
(
„©uª
, 
u˝
, 
exåa_Àn
);

925 
	}
}

928 
	$li°_known
(
brõf
)

930 
k
, 
num
;

932 
num
 = (
„©uª_desc_¨r
) / (feature_desc_arr[0]);

933 
	`¥ötf
("Known features:\n");

934 
k
 = 0; k < 
num
; ++k)

935 
	`¥ötf
(" %†[0x%x]\n", 
„©uª_desc_¨r
[
k
].
desc
,

936 
„©uª_desc_¨r
[
k
].
vÆ
);

937 i‡(! 
brõf
) {

938 
	`¥ötf
("KnownÖrofiles:\n");

939 
num
 = (
¥ofûe_desc_¨r
) / (profile_desc_arr[0]);

940 
k
 = 0; k < 
num
; ++k)

941 
	`¥ötf
(" %†[0x%x]\n", 
¥ofûe_desc_¨r
[
k
].
desc
,

942 
¥ofûe_desc_¨r
[
k
].
vÆ
);

944 
	}
}

948 
	$maö
(
¨gc
, * 
¨gv
[])

950 
sg_fd
, 
ªs
, 
c
, 
Àn
;

951 
≥ri_ty≥
 = 0;

952 
brõf
 = 0;

953 
do_hex
 = 0;

954 
ö√r_hex
 = 0;

955 
li°
 = 0;

956 
do_øw
 = 0;

957 
ªad⁄ly
 = 0;

958 
π
 = 0;

959 
°¨tög
 = 0;

960 
vîbo£
 = 0;

961 c⁄° * 
devi˚_«me
 = 
NULL
;

962 
buff
[64];

963 c⁄° * 
˝
;

964 
sg_sim∂e_öquúy_ª•
 
öq_ª•
;

965 
ªt
 = 0;

968 
›ti⁄_ödex
 = 0;

970 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "bchHûqr:Rs:vV", 
l⁄g_›ti⁄s
,

971 &
›ti⁄_ödex
);

972 i‡(
c
 == -1)

975 
c
) {

977 
brõf
 = 1;

980 
π
 = 1;

984 
	`ußge
();

987 ++
do_hex
;

990 
ö√r_hex
 = 1;

993 
li°
 = 1;

996 ++
ªad⁄ly
;

999 
π
 = 
	`sg_gë_num
(
›èrg
);

1000 i‡((
π
 < 0) || (rt > 3)) {

1001 
	`Ârötf
(
°dîr
, "badárgumentÅo '--rt'\n");

1002  
SG_LIB_SYNTAX_ERROR
;

1006 ++
do_øw
;

1009 
°¨tög
 = 
	`sg_gë_num
(
›èrg
);

1010 i‡((
°¨tög
 < 0) || (starting > 0xffff)) {

1011 
	`Ârötf
(
°dîr
, "badárgumentÅo '--starting'\n");

1012  
SG_LIB_SYNTAX_ERROR
;

1016 ++
vîbo£
;

1019 
	`Ârötf
(
°dîr
, 
ME
 "vîsi⁄: %s\n", 
vîsi⁄_°r
);

1022 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê0x%x ??\n", 
c
);

1023 
	`ußge
();

1024  
SG_LIB_SYNTAX_ERROR
;

1027 i‡(
›töd
 < 
¨gc
) {

1028 i‡(
NULL
 =
devi˚_«me
) {

1029 
devi˚_«me
 = 
¨gv
[
›töd
];

1030 ++
›töd
;

1032 i‡(
›töd
 < 
¨gc
) {

1033 ; 
›töd
 < 
¨gc
; ++optind)

1034 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

1035 
¨gv
[
›töd
]);

1036 
	`ußge
();

1037  
SG_LIB_SYNTAX_ERROR
;

1041 i‡(
li°
) {

1042 
	`li°_known
(
brõf
);

1045 i‡(
NULL
 =
devi˚_«me
) {

1046 
	`Ârötf
(
°dîr
, "missing deviceÇame!\n");

1047 
	`ußge
();

1048  
SG_LIB_SYNTAX_ERROR
;

1050 i‡((
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 1 , 
vîbo£
)) < 0) {

1051 
	`Ârötf
(
°dîr
, 
ME
 "error opening file: %s (ro): %s\n",

1052 
devi˚_«me
, 
	`ß„_°ªº‹
(-
sg_fd
));

1053  
SG_LIB_FILE_ERROR
;

1055 i‡(0 =
	`sg_sim∂e_öquúy
(
sg_fd
, &
öq_ª•
, 1, 
vîbo£
)) {

1056 i‡(0 =
do_øw
)

1057 
	`¥ötf
(" %.8† %.16† %.4s\n", 
öq_ª•
.
víd‹
, inq_ª•.
¥odu˘
,

1058 
öq_ª•
.
ªvisi⁄
);

1059 
≥ri_ty≥
 = 
öq_ª•
.
≥rùhîÆ_ty≥
;

1060 
˝
 = 
	`sg_gë_pdt_°r
(
≥ri_ty≥
, (
buff
), buff);

1061 i‡(0 =
do_øw
) {

1062 i‡(
	`°æí
(
˝
) > 0)

1063 
	`¥ötf
(" PîùhîÆ devi˚Åy≥: %s\n", 
˝
);

1065 
	`¥ötf
(" PîùhîÆ devi˚Åy≥: 0x%x\n", 
≥ri_ty≥
);

1068 
	`Ârötf
(
°dîr
, 
ME
 "%s doesn'tÑespondÅoá SCSI INQUIRY\n",

1069 
devi˚_«me
);

1070  
SG_LIB_CAT_OTHER
;

1072 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

1074 
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 
ªad⁄ly
, 
vîbo£
);

1075 i‡(
sg_fd
 < 0) {

1076 
	`Ârötf
(
°dîr
, 
ME
 "›íÉº‹ (rw): %s\n", 
	`ß„_°ªº‹
(-
sg_fd
));

1077  
SG_LIB_FILE_ERROR
;

1079 i‡(
do_øw
) {

1080 i‡(
	`sg_£t_bö¨y_mode
(
STDOUT_FILENO
) < 0) {

1081 
	`≥º‹
("sg_set_binary_mode");

1082  
SG_LIB_FILE_ERROR
;

1086 
ªs
 = 
	`sg_Œ_gë_c⁄fig
(
sg_fd
, 
π
, 
°¨tög
, 
ª•_buf„r
,

1087 (
ª•_buf„r
), 1, 
vîbo£
);

1088 
ªt
 = 
ªs
;

1089 i‡(0 =
ªs
) {

1090 
Àn
 = (
ª•_buf„r
[0] << 24) + (resp_buffer[1] << 16) +

1091 (
ª•_buf„r
[2] << 8) +Ñesp_buffer[3] + 4;

1092 i‡(
do_hex
) {

1093 i‡(
Àn
 > ()(
ª•_buf„r
))

1094 
Àn
 = (
ª•_buf„r
);

1095 
	`dSåHex
((c⁄° *)
ª•_buf„r
, 
Àn
, 0);

1096 } i‡(
do_øw
)

1097 
	`dSåRaw
((c⁄° *)
ª•_buf„r
, 
Àn
);

1099 
	`decode_c⁄fig
(
ª•_buf„r
, ‘e•_buf„r), 
Àn
, 
brõf
,

1100 
ö√r_hex
);

1101 } i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

1102 
	`Ârötf
(
°dîr
, "Get Configuration commandÇot supported\n");

1103 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

1104 
	`Ârötf
(
°dîr
, "field in Get Configuration command illegal\n");

1105 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
)

1106 
	`Ârötf
(
°dîr
, "Get ConfigurationÑeceived unitáttention\n");

1107 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

1108 
	`Ârötf
(
°dîr
, "Get Configuration:áborted command\n");

1110 
	`Ârötf
(
°dîr
, "Get Configuration command failed\n");

1111 i‡(0 =
vîbo£
)

1112 
	`Ârötf
(
°dîr
, "Åry '-v' option for more information\n");

1115 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

1116 i‡(
ªs
 < 0) {

1117 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

1118 i‡(0 =
ªt
)

1119  
SG_LIB_FILE_ERROR
;

1121  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

1122 
	}
}

	@src/sg_get_lba_status.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<gë›t.h
>

14 
	#__STDC_FORMAT_MACROS
 1

	)

15 
	~<öây≥s.h
>

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

20 
	~"sg_lib.h
"

21 
	~"sg_cmds_basic.h
"

22 
	~"sg_cmds_exåa.h
"

31 c⁄° * 
	gvîsi⁄_°r
 = "1.05 20130507";

33 
	#MAX_GLBAS_BUFF_LEN
 (1024 * 1024)

	)

34 
	#DEF_GLBAS_BUFF_LEN
 24

	)

36 
	gglbasBuff
[
DEF_GLBAS_BUFF_LEN
];

37 * 
	gglbasBufÂ
 = 
glbasBuff
;

40 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

41 {"brõf", 
no_¨gumít
, 0, 'b'},

42 {"hñp", 
no_¨gumít
, 0, 'h'},

43 {"hex", 
no_¨gumít
, 0, 'H'},

44 {"lba", 
ªquúed_¨gumít
, 0, 'l'},

45 {"maxÀn", 
ªquúed_¨gumít
, 0, 'm'},

46 {"øw", 
no_¨gumít
, 0, 'r'},

47 {"vîbo£", 
no_¨gumít
, 0, 'v'},

48 {"vîsi⁄", 
no_¨gumít
, 0, 'V'},

53 
	$ußge
()

55 
	`Ârötf
(
°dîr
, "Usage: "

72 
DEF_GLBAS_BUFF_LEN
 );

73 
	`Ârötf
(
°dîr
,

79 
	}
}

82 
	$dSåRaw
(c⁄° * 
°r
, 
Àn
)

84 
k
;

86 
k
 = 0 ; k < 
Àn
; ++k)

87 
	`¥ötf
("%c", 
°r
[
k
]);

88 
	}
}

94 
	$decode_lba_°©us_desc
(c⁄° * 
u˝
, 
uöt64_t
 * 
¶b≠
,

95 
uöt32_t
 * 
block•
)

97 
j
;

98 
uöt32_t
 
blocks
;

99 
uöt64_t
 
uŒ
;

101 i‡(
NULL
 =
u˝
)

103 
uŒ
 = 0;

104 
j
 = 0; j < 8; ++j) {

105 i‡(
j
 > 0)

106 
uŒ
 <<= 8;

107 
uŒ
 |
u˝
[
j
];

109 
blocks
 = 0;

110 
j
 = 0; j < 4; ++j) {

111 i‡(
j
 > 0)

112 
blocks
 <<= 8;

113 
blocks
 |
u˝
[8 + 
j
];

115 i‡(
¶b≠
)

116 *
¶b≠
 = 
uŒ
;

117 i‡(
block•
)

118 *
block•
 = 
blocks
;

119  
u˝
[12] & 0xf;

120 
	}
}

124 
	$maö
(
¨gc
, * 
¨gv
[])

126 
sg_fd
, 
k
, 
j
, 
ªs
, 
c
, 
æí
, 
num_descs
;

127 
do_brõf
 = 0;

128 
do_hex
 = 0;

129 
öt64_t
 
Œ
;

130 
uöt64_t
 
lba
 = 0;

131 
uöt64_t
 
d_lba
 = 0;

132 
uöt32_t
 
d_blocks
 = 0;

133 
maxÀn
 = 
DEF_GLBAS_BUFF_LEN
;

134 
do_øw
 = 0;

135 
vîbo£
 = 0;

136 c⁄° * 
devi˚_«me
 = 
NULL
;

137 c⁄° * 
u˝
;

138 
ªt
 = 0;

141 
›ti⁄_ödex
 = 0;

143 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "bhHl:m:rvV", 
l⁄g_›ti⁄s
,

144 &
›ti⁄_ödex
);

145 i‡(
c
 == -1)

148 
c
) {

150 ++
do_brõf
;

154 
	`ußge
();

157 ++
do_hex
;

160 
Œ
 = 
	`sg_gë_Œnum
(
›èrg
);

161 i‡(-1 =
Œ
) {

162 
	`Ârötf
(
°dîr
, "badárgumentÅo '--lba'\n");

163  
SG_LIB_SYNTAX_ERROR
;

165 
lba
 = (
uöt64_t
)
Œ
;

168 
maxÀn
 = 
	`sg_gë_num
(
›èrg
);

169 i‡((
maxÀn
 < 0Ë|| (maxÀ¿> 
MAX_GLBAS_BUFF_LEN
)) {

170 
	`Ârötf
(
°dîr
, "argumentÅo '--maxlen' should be %d or "

171 "Àss\n", 
MAX_GLBAS_BUFF_LEN
);

172  
SG_LIB_SYNTAX_ERROR
;

176 ++
do_øw
;

179 ++
vîbo£
;

182 
	`Ârötf
(
°dîr
, "vîsi⁄: %s\n", 
vîsi⁄_°r
);

185 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê0x%x ??\n", 
c
);

186 
	`ußge
();

187  
SG_LIB_SYNTAX_ERROR
;

190 i‡(
›töd
 < 
¨gc
) {

191 i‡(
NULL
 =
devi˚_«me
) {

192 
devi˚_«me
 = 
¨gv
[
›töd
];

193 ++
›töd
;

195 i‡(
›töd
 < 
¨gc
) {

196 ; 
›töd
 < 
¨gc
; ++optind)

197 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

198 
¨gv
[
›töd
]);

199 
	`ußge
();

200  
SG_LIB_SYNTAX_ERROR
;

204 i‡(
NULL
 =
devi˚_«me
) {

205 
	`Ârötf
(
°dîr
, "missing deviceÇame!\n");

206 
	`ußge
();

207  
SG_LIB_SYNTAX_ERROR
;

209 i‡(
maxÀn
 > 
DEF_GLBAS_BUFF_LEN
) {

210 
glbasBufÂ
 = (*)
	`ˇŒoc
(
maxÀn
, 1);

211 i‡(
NULL
 =
glbasBufÂ
) {

212 
	`Ârötf
(
°dîr
, "u«bÀÅÿÆloˇã %d byã†⁄ hóp\n", 
maxÀn
);

213  
SG_LIB_SYNTAX_ERROR
;

216 i‡(
do_øw
) {

217 i‡(
	`sg_£t_bö¨y_mode
(
STDOUT_FILENO
) < 0) {

218 
	`≥º‹
("sg_set_binary_mode");

219 
ªt
 = 
SG_LIB_FILE_ERROR
;

220 
‰ì_buff
;

224 
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 0 , 
vîbo£
);

225 i‡(
sg_fd
 < 0) {

226 
	`Ârötf
(
°dîr
, "›íÉº‹: %s: %s\n", 
devi˚_«me
,

227 
	`ß„_°ªº‹
(-
sg_fd
));

228 
ªt
 = 
SG_LIB_FILE_ERROR
;

229 
‰ì_buff
;

232 
ªs
 = 
	`sg_Œ_gë_lba_°©us
(
sg_fd
, 
lba
, 
glbasBufÂ
, 
maxÀn
, 1,

233 
vîbo£
);

234 
ªt
 = 
ªs
;

235 i‡(0 =
ªs
) {

238 i‡(
maxÀn
 >= 4)

239 
æí
 = (
glbasBufÂ
[0] << 24) + (glbasBuffp[1] << 16) +

240 (
glbasBufÂ
[2] << 8) + glbasBuffp[3] + 4;

242 
æí
 = 
maxÀn
;

243 
k
 = (
æí
 > 
maxÀn
) ? maxlen :Ñlen;

244 i‡(
do_øw
) {

245 
	`dSåRaw
((c⁄° *)
glbasBufÂ
, 
k
);

246 
the_íd
;

248 i‡(
do_hex
) {

249 
	`dSåHex
((c⁄° *)
glbasBufÂ
, 
k
, 1);

250 
the_íd
;

252 i‡(
maxÀn
 < 4) {

253 i‡(
vîbo£
)

254 
	`Ârötf
(
°dîr
, "Exiting becauseállocationÜength (maxlen) "

256 
the_íd
;

258 i‡((
vîbo£
 > 1Ë|| (vîbo£ && (
æí
 > 
maxÀn
))) {

259 
	`Ârötf
(
°dîr
, "ª•⁄£Üígth %d byãs\n", 
æí
);

260 i‡(
æí
 > 
maxÀn
)

261 
	`Ârötf
(
°dîr
, " ... which is greaterÅhan maxlen "

262 "◊Œoˇti⁄Üígth %d),Årunˇti⁄\n", 
maxÀn
);

264 i‡(
æí
 > 
maxÀn
)

265 
æí
 = 
maxÀn
;

267 i‡(
do_brõf
 > 1) {

268 i‡(
æí
 < 24) {

269 
	`Ârötf
(
°dîr
, "Need maxlenándÑesponseÜengthÅo "

270 " bê©Üó° 24, havê%d byãs\n", 
æí
);

271 
ªt
 = 
SG_LIB_CAT_OTHER
;

272 
the_íd
;

274 
ªs
 = 
	`decode_lba_°©us_desc
(
glbasBufÂ
 + 8, &
d_lba
, &
d_blocks
);

275 i‡((
ªs
 < 0) || (res > 15)) {

276 
	`Ârötf
(
°dîr
, "first LBA status descriptorÑeturned %d "

277 "??\n", 
ªs
);

278 
ªt
 = 
SG_LIB_CAT_OTHER
;

279 
the_íd
;

281 i‡((
lba
 < 
d_lba
Ë|| (lb®>(d_lb®+ 
d_blocks
))) {

282 
	`Ârötf
(
°dîr
, "given LBAÇot inÑange of first "

284 
j
 = 0; j < 8; ++j)

285 
	`Ârötf
(
°dîr
, "%02x", 
glbasBufÂ
[8 + 
j
]);

286 
	`Ârötf
(
°dîr
, " blocks: 0x%xÖ_status: %d\n",

287 ()
d_blocks
, 
ªs
);

288 
ªt
 = 
SG_LIB_CAT_OTHER
;

289 
the_íd
;

291 
	`¥ötf
("%d\n", 
ªs
);

292 
the_íd
;

295 i‡(
æí
 < 24) {

296 
	`¥ötf
("No complete LBA status descriptorsávailable\n");

297 
the_íd
;

299 
num_descs
 = (
æí
 - 8) / 16;

300 i‡(
vîbo£
)

301 
	`Ârötf
(
°dîr
, "%d complete LBA status descriptors found\n",

302 
num_descs
);

303 
u˝
 = 
glbasBufÂ
 + 8, 
k
 = 0; k < 
num_descs
; ucp += 16, ++k) {

304 
ªs
 = 
	`decode_lba_°©us_desc
(
u˝
, &
d_lba
, &
d_blocks
);

305 i‡((
ªs
 < 0) || (res > 15))

306 
	`Ârötf
(
°dîr
, "descriptor %d: bad LBA status descriptor "

307 "ªtu∫ed %d\n", 
k
 + 1, 
ªs
);

308 i‡(
do_brõf
) {

309 
	`¥ötf
("0x");

310 
j
 = 0; j < 8; ++j)

311 
	`¥ötf
("%02x", 
u˝
[
j
]);

312 
	`¥ötf
(" 0x%x %d\n", ()
d_blocks
, 
ªs
);

314 
	`¥ötf
("descriptor LBA: 0x");

315 
j
 = 0; j < 8; ++j)

316 
	`¥ötf
("%02x", 
u˝
[
j
]);

317 
	`¥ötf
(" blocks: %u", ()
d_blocks
);

318 
ªs
) {

320 
	`¥ötf
(" mapped\n");

323 
	`¥ötf
(" deallocated\n");

326 
	`¥ötf
("ánchored\n");

329 
	`¥ötf
(" Provisi⁄ög sètus: %d\n", 
ªs
);

334 i‡((
num_descs
 * 16Ë+ 8 < 
æí
)

335 
	`Ârötf
(
°dîr
, "incompleteÅrailing LBA status descriptors "

337 } i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

338 
	`Ârötf
(
°dîr
, "Get LBA Status commandÇot supported\n");

339 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

340 
	`Ârötf
(
°dîr
, "Get LBA Status,áborted command\n");

341 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

342 
	`Ârötf
(
°dîr
, "Get LBA Status command has bad field in cdb\n");

344 
	`Ârötf
(
°dîr
, "Get LBA Status command failed\n");

345 i‡(0 =
vîbo£
)

346 
	`Ârötf
(
°dîr
, "Åry '-v' option for more information\n");

349 
the_íd
:

350 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

351 i‡(
ªs
 < 0) {

352 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

353 i‡(0 =
ªt
)

354 
ªt
 = 
SG_LIB_FILE_ERROR
;

356 
‰ì_buff
:

357 i‡(
glbasBufÂ
 && (glbasBufÂ !
glbasBuff
))

358 
	`‰ì
(
glbasBufÂ
);

359  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

360 
	}
}

	@src/sg_hot_add.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~"sg_lib.h
"

12 
	~"sg_cmds_basic.h
"

14 
	#DEF_RLUNS_BUFF_LEN
 (1024 * 8)

	)

16 
	sèrgë_lu
 {

20 
	$maö
–
¨gc
, * 
¨gv
[] ) {

21 
sg_fd
;

22 
max_Àn
 = 
DEF_RLUNS_BUFF_LEN
;

23 
luns
, 
li°_Àngth
, 
i
;

24 * 
æun_buf„r
 = 
NULL
;

26 
	`¥ötf
("Opená device?\n");

27 if–(
sg_fd
 = 
	`sg_cmds_›í_devi˚
("/dev/sdd", 0, 3)) < 0 ) {

30 
æun_buf„r
 = (*)
	`ˇŒoc
(1, 
max_Àn
);

33 
	`sg_Œ_ªp‹t_luns
(
sg_fd
, 0, 
æun_buf„r
, 
max_Àn
, 1, 3);

35 
li°_Àngth
 = (
æun_buf„r
[3]) + (rlun_buffer[2] << 8) + (rlun_buffer[1] << 16) + (rlun_buffer[0] << 24);

36 
	`dSåHex
((c⁄° *)
æun_buf„r
, (
li°_Àngth
+8), 1);

38 
n
;

39 * 
ídp
;

40 c⁄° * 
ã°
 = (c⁄° *)
	`mÆloc
(2*(const ));

41 
	`¥ötf
("TEST: %02d\n", 
æun_buf„r
[65]);

42 
	`dSåHex
(&
æun_buf„r
[65], 1, 1);

45 
ã°
 = "2";

46 
	`ssˇnf
(&
ã°
, "0%d", &
n
);

47 
	`dSåHex
(&
ã°
, 1, 1);

49 
	`¥ötf
("D⁄e: %d\n", 
n
);

55 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

56 
	`‰ì
(
æun_buf„r
);

59 
	}
}

	@src/sg_ident.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<gë›t.h
>

15 #ifde‡
HAVE_CONFIG_H


16 
	~"c⁄fig.h
"

18 
	~"sg_lib.h
"

19 
	~"sg_cmds_basic.h
"

20 
	~"sg_cmds_exåa.h
"

30 c⁄° * 
	gvîsi⁄_°r
 = "1.10 20130507";

32 
	#ME
 "sg_idít: "

	)

34 
	#REPORT_ID_INFO_SANITY_LEN
 512

	)

37 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

49 
	$decode_ii
(c⁄° * 
iù
, 
ii_Àn
, 
ôy≥
,

50 
ascii
, 
øw
, 
vîbo£
)

52 
k
, 
n
;

54 i‡(
øw
) {

55 i‡(
ii_Àn
 > 0) {

56 i‡(
	`sg_£t_bö¨y_mode
(
STDOUT_FILENO
) < 0)

57 
	`≥º‹
("sg_set_binary_mode");

59 
n
 = 
	`fwrôe
(
iù
, 1, 
ii_Àn
, 
°dout
);

61 
n
 = 
	`wrôe
(
STDOUT_FILENO
, 
iù
, 
ii_Àn
);

64 
n
 =Ç;

67 i‡(0x7‡=
ôy≥
) {

68 
k
 = 0; k < (
ii_Àn
 - 3); k += 4)

69 
	`¥ötf
(" InformationÅype: %d, Maximum informationÜength: "

70 "%d byãs\n", 
iù
[
k
], ((iip[k + 2] << 8) + iip[k + 3]));

72 i‡(
vîbo£
)

73 
	`¥ötf
("Information:\n");

74 i‡(
ii_Àn
 > 0) {

75 i‡(
ascii
)

76 
	`¥ötf
("%.*s\n", 
ii_Àn
, (c⁄° *)
iù
);

78 
	`dSåHex
((c⁄° *)
iù
, 
ii_Àn
, 0);

81 
	}
}

83 
	$ußge
()

85 
	`Ârötf
(
°dîr
, "Usage: "

104 
	}
}

106 
	$maö
(
¨gc
, * 
¨gv
[])

108 
sg_fd
, 
ªs
, 
c
, 
ii_Àn
;

109 
rdi_buff
[
REPORT_ID_INFO_SANITY_LEN
 + 4];

110 * 
u˝
 = 
NULL
;

111 
ascii
 = 0;

112 
do_˛ór
 = 0;

113 
ôy≥
 = 0;

114 
øw
 = 0;

115 
do_£t
 = 0;

116 
vîbo£
 = 0;

117 c⁄° * 
devi˚_«me
 = 
NULL
;

118 
ªt
 = 0;

121 
›ti⁄_ödex
 = 0;

123 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "AChi:rSvV", 
l⁄g_›ti⁄s
,

124 &
›ti⁄_ödex
);

125 i‡(
c
 == -1)

128 
c
) {

130 
ascii
 = 1;

133 
do_˛ór
 = 1;

137 
	`ußge
();

140 
ôy≥
 = 
	`sg_gë_num
(
›èrg
);

141 i‡((
ôy≥
 < 0) || (itype > 127)) {

142 
	`Ârötf
(
°dîr
, "argumentÅo '--itype' should be inÑange "

144  
SG_LIB_SYNTAX_ERROR
;

148 
øw
 = 1;

151 
do_£t
 = 1;

154 ++
vîbo£
;

157 
	`Ârötf
(
°dîr
, 
ME
 "vîsi⁄: %s\n", 
vîsi⁄_°r
);

160 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê0x%x ??\n", 
c
);

161 
	`ußge
();

162  
SG_LIB_SYNTAX_ERROR
;

165 i‡(
›töd
 < 
¨gc
) {

166 i‡(
NULL
 =
devi˚_«me
) {

167 
devi˚_«me
 = 
¨gv
[
›töd
];

168 ++
›töd
;

170 i‡(
›töd
 < 
¨gc
) {

171 ; 
›töd
 < 
¨gc
; ++optind)

172 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

173 
¨gv
[
›töd
]);

174 
	`ußge
();

175  
SG_LIB_SYNTAX_ERROR
;

179 i‡(
NULL
 =
devi˚_«me
) {

180 
	`Ârötf
(
°dîr
, "missing deviceÇame!\n");

181 
	`ußge
();

182  
SG_LIB_SYNTAX_ERROR
;

184 i‡(
do_£t
 && 
do_˛ór
) {

185 
	`Ârötf
(
°dîr
, "only one of '--clear'ánd '--set' can be given\n");

186 
	`ußge
();

187  
SG_LIB_SYNTAX_ERROR
;

189 i‡(
ascii
 && 
øw
) {

190 
	`Ârötf
(
°dîr
, "only one of '--ascii'ánd '--raw' can be given\n");

191 
	`ußge
();

192  
SG_LIB_SYNTAX_ERROR
;

194 i‡((
do_£t
 || 
do_˛ór
Ë&& (
øw
 || 
ascii
)) {

195 
	`Ârötf
(
°dîr
, "'--set' cannot be used withÉither '--ascii' or "

197 
	`ußge
();

198  
SG_LIB_SYNTAX_ERROR
;

200 
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 0 , 
vîbo£
);

201 i‡(
sg_fd
 < 0) {

202 
	`Ârötf
(
°dîr
, 
ME
 "›íÉº‹: %s: %s\n", 
devi˚_«me
,

203 
	`ß„_°ªº‹
(-
sg_fd
));

204  
SG_LIB_FILE_ERROR
;

207 
	`mem£t
(
rdi_buff
, 0x0, (rdi_buff));

208 i‡(
do_£t
 || 
do_˛ór
) {

209 i‡(
do_£t
) {

210 
ªs
 = 
	`‰ód
(
rdi_buff
, 1, 
REPORT_ID_INFO_SANITY_LEN
 + 2, 
°dö
);

211 i‡(
ªs
 <= 0) {

212 
	`Ârötf
(
°dîr
, "no dataÑead from stdin;Åo clear "

214 
ªt
 = -1;

215 
îr_out
;

216 } i‡(
ªs
 > 
REPORT_ID_INFO_SANITY_LEN
) {

217 
	`Ârötf
(
°dîr
, "SPC-4Üimits informationÜengthÅo 512 "

219 
ªt
 = -1;

220 
îr_out
;

222 
ii_Àn
 = 
ªs
;

223 
ªs
 = 
	`sg_Œ_£t_id_öfo
(
sg_fd
, 
ôy≥
, 
rdi_buff
, 
ii_Àn
, 1,

224 
vîbo£
);

226 
ªs
 = 
	`sg_Œ_£t_id_öfo
(
sg_fd
, 
ôy≥
, 
rdi_buff
, 0, 1, 
vîbo£
);

227 i‡(
ªs
) {

228 
ªt
 = 
ªs
;

229 i‡(
SG_LIB_CAT_NOT_READY
 =
ªs
)

230 
	`Ârötf
(
°dîr
, "Set identifying information command, device "

232 i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

233 
	`Ârötf
(
°dîr
, "Set identifying information commandÇot "

235 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
)

236 
	`Ârötf
(
°dîr
, "Set identifying information, unit "

238 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

239 
	`Ârötf
(
°dîr
, "Set identifying information,áborted "

241 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

242 
	`Ârötf
(
°dîr
, "bad field in Set identifying information "

245 
	`Ârötf
(
°dîr
, "Set identifying information command "

247 i‡(0 =
vîbo£
)

248 
	`Ârötf
(
°dîr
, "Åry '-v' for more information\n");

252 
ªs
 = 
	`sg_Œ_ªp‹t_id_öfo
(
sg_fd
, 
ôy≥
, 
rdi_buff
, 4, 1, 
vîbo£
);

253 i‡(0 =
ªs
) {

254 
ii_Àn
 = (
rdi_buff
[0] << 24) + (rdi_buff[1] << 16) +

255 (
rdi_buff
[2] << 8) +Ñdi_buff[3];

256 i‡((! 
øw
Ë&& (
vîbo£
 > 0))

257 
	`¥ötf
("Reported identifying informationÜength = %d\n",

258 
ii_Àn
);

259 i‡(0 =
ii_Àn
) {

260 i‡(
vîbo£
 > 1)

261 
	`Ârötf
(
°dîr
, " This impliesÅhe device hasán "

263 
îr_out
;

265 i‡(
ii_Àn
 > 
REPORT_ID_INFO_SANITY_LEN
) {

266 
	`Ârötf
(
°dîr
, " ThatÜength (%d) seemsÅooÜong forán "

267 "öf‹m©i⁄\n", 
ii_Àn
);

268 
ªt
 = -1;

269 
îr_out
;

271 
u˝
 = 
rdi_buff
;

272 
ªs
 = 
	`sg_Œ_ªp‹t_id_öfo
(
sg_fd
, 
ôy≥
, 
u˝
, 
ii_Àn
 + 4, 1,

273 
vîbo£
);

274 i‡(0 =
ªs
) {

275 
ii_Àn
 = (
u˝
[0] << 24) + (ucp[1] << 16) + (ucp[2] << 8) +

276 
u˝
[3];

277 
	`decode_ii
(
u˝
 + 4, 
ii_Àn
, 
ôy≥
, 
ascii
, 
øw
, 
vîbo£
);

279 
ªt
 = 
ªs
;

281 
ªt
 = 
ªs
;

282 i‡(
ªt
) {

283 i‡(
SG_LIB_CAT_NOT_READY
 =
ªt
)

284 
	`Ârötf
(
°dîr
, "Report identifying information command, "

286 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªt
)

287 
	`Ârötf
(
°dîr
, "Report identifying information, unit "

289 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªt
)

290 
	`Ârötf
(
°dîr
, "Report identifying information,áborted "

292 i‡(
SG_LIB_CAT_INVALID_OP
 =
ªt
)

293 
	`Ârötf
(
°dîr
, "Report identifying information command "

295 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªt
)

296 
	`Ârötf
(
°dîr
, "bad field in Report identifying "

300 
	`Ârötf
(
°dîr
, "Report identifying information command "

302 i‡(0 =
vîbo£
)

303 
	`Ârötf
(
°dîr
, "Åry '-v' for more "

309 
îr_out
:

310 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

311 i‡(
ªs
 < 0) {

312 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

313 i‡(0 =
ªt
)

314  
SG_LIB_FILE_ERROR
;

316  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

317 
	}
}

	@src/sg_inq.c

18 
	~<uni°d.h
>

19 
	~<f˙é.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<˘y≥.h
>

24 
	~<gë›t.h
>

25 
	#__STDC_FORMAT_MACROS
 1

	)

26 
	~<öây≥s.h
>

28 #ifde‡
HAVE_CONFIG_H


29 
	~"c⁄fig.h
"

31 #ifde‡
SG_LIB_LINUX


32 
	~<î∫o.h
>

33 
	~<sys/io˘l.h
>

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<löux/hdªg.h
>

39 
	~"sg_lib.h
"

40 
	~"sg_cmds_basic.h
"

41 
	~"sg_±.h
"

70 c⁄° * 
	gvîsi⁄_°r
 = "1.13 20130507";

74 
	#VPD_SUPPORTED_VPDS
 0x0

	)

75 
	#VPD_UNIT_SERIAL_NUM
 0x80

	)

76 
	#VPD_DEVICE_ID
 0x83

	)

77 
	#VPD_SOFTW_INF_ID
 0x84

	)

78 
	#VPD_MAN_NET_ADDR
 0x85

	)

79 
	#VPD_EXT_INQ
 0x86

	)

80 
	#VPD_MODE_PG_POLICY
 0x87

	)

81 
	#VPD_SCSI_PORTS
 0x88

	)

82 
	#VPD_ATA_INFO
 0x89

	)

83 
	#VPD_POWER_CONDITION
 0x8a

	)

84 
	#VPD_DEVICE_CONSTITUENTS
 0x8b

	)

85 
	#VPD_CFA_PROFILE_INFO
 0x8c

	)

86 
	#VPD_POWER_CONSUMPTION
 0x8d

	)

87 
	#VPD_3PARTY_COPY
 0x8f

	)

88 
	#VPD_PROTO_LU
 0x90

	)

89 
	#VPD_PROTO_PORT
 0x91

	)

90 
	#VPD_BLOCK_LIMITS
 0xb0

	)

91 
	#VPD_BLOCK_DEV_CHARS
 0xb1

	)

92 
	#VPD_MAN_ASS_SN
 0xb1

	)

93 
	#VPD_LB_PROVISIONING
 0xb2

	)

94 
	#VPD_REFERRALS
 0xb3

	)

95 
	#VPD_UPR_EMC
 0xc0

	)

96 
	#VPD_RDAC_VERS
 0xc2

	)

97 
	#VPD_RDAC_VAC
 0xc9

	)

101 
	#VPD_DI_SEL_LU
 1

	)

102 
	#VPD_DI_SEL_TPORT
 2

	)

103 
	#VPD_DI_SEL_TARGET
 4

	)

104 
	#VPD_DI_SEL_AS_IS
 32

	)

106 
	#DEF_ALLOC_LEN
 252

	)

107 
	#SAFE_STD_INQ_RESP_LEN
 36

	)

108 
	#MX_ALLOC_LEN
 (0xc000 + 0x80)

	)

109 
	#VPD_ATA_INFO_LEN
 572

	)

111 
	#SENSE_BUFF_LEN
 64

	)

112 
	#INQUIRY_CMD
 0x12

	)

113 
	#INQUIRY_CMDLEN
 6

	)

114 
	#DEF_PT_TIMEOUT
 60

	)

117 
	gr•_buff
[
MX_ALLOC_LEN
 + 1];

118 
	gxåa_buff
[
MX_ALLOC_LEN
 + 1];

120 c⁄° * 
föd_vîsi⁄_des¸ùt‹_°r
(
vÆue
);

121 
decode_dev_ids
(c⁄° * 
Àadö
, * 
buff
,

122 
Àn
, 
do_hex
);

123 
decode_å™•‹t_id
(c⁄° * 
Àadö
, * 
u˝
,

124 
Àn
);

126 #i‡
deföed
(
SG_LIB_LINUX
Ë&& deföed(
SG_SCSI_STRINGS
)

127 
åy_©a_idítify
(
©a_fd
, 
do_hex
, 
do_øw
,

128 
do_vîbo£
);

133 
	ssvpd_vÆues_«me_t
 {

134 
	mvÆue
;

135 
	msubvÆue
;

136 
	mpdt
;

138 
	mvíd‹
;

139 c⁄° * 
	ma¸⁄
;

140 c⁄° * 
	m«me
;

143 
svpd_vÆues_«me_t
 
	gvpd_pg
[] = {

144 {
VPD_ATA_INFO
, 0, -1, 0, "ai", "ATA information (SAT)"},

145 {
VPD_BLOCK_DEV_CHARS
, 0, 0, 0, "bdc",

147 {
VPD_BLOCK_LIMITS
, 0, 0, 0, "bl", "BlockÜimits (SBC)"},

148 {
VPD_DEVICE_ID
, 0, -1, 0, "di", "Device identification"},

150 {
VPD_DEVICE_ID
, 
VPD_DI_SEL_AS_IS
, -1, 0, "di_asis", "Like 'di' "

152 {
VPD_DEVICE_ID
, 
VPD_DI_SEL_LU
, -1, 0, "di_lu", "Device identification, "

154 {
VPD_DEVICE_ID
, 
VPD_DI_SEL_TPORT
, -1, 0, "di_port", "Device "

156 {
VPD_DEVICE_ID
, 
VPD_DI_SEL_TARGET
, -1, 0, "di_target", "Device "

159 {
VPD_EXT_INQ
, 0, -1, 0, "ei", "Extended inquiry data"},

160 {
VPD_LB_PROVISIONING
, 0, 0, 0, "lbpv", "Logical blockÖrovisioning "

162 {
VPD_MAN_NET_ADDR
, 0, -1, 0, "mna", "ManagementÇetworkáddresses"},

163 {
VPD_MODE_PG_POLICY
, 0, -1, 0, "mpp", "ModeÖageÖolicy"},

164 {
VPD_POWER_CONDITION
, 0, -1, 0, "po", "Power condition"},

165 {
VPD_POWER_CONSUMPTION
, 0, -1, 0, "psm", "Power consumption"},

166 {
VPD_PROTO_LU
, 0, 0x0, 0, "pslu", "Protocol-specificÜogical unit "

168 {
VPD_PROTO_PORT
, 0, 0x0, 0, "pspo", "Protocol-specificÖort information"},

169 {
VPD_REFERRALS
, 0, 0, 0, "ref", "Referrals (SBC)"},

170 {
VPD_SOFTW_INF_ID
, 0, -1, 0, "sii", "Software interface identification"},

171 {
VPD_UNIT_SERIAL_NUM
, 0, -1, 0, "sn", "Unit serialÇumber"},

172 {
VPD_SCSI_PORTS
, 0, -1, 0, "sp", "SCSIÖorts"},

173 {
VPD_SUPPORTED_VPDS
, 0, -1, 0, "sv", "Supported VPDÖages"},

174 {
VPD_3PARTY_COPY
, 0, -1, 0, "tpc", "ThirdÖarty copy"},

176 {
VPD_RDAC_VAC
, 0, -1, 1, "rdac_vac", "RDAC volumeáccess control (RDAC)"},

177 {
VPD_RDAC_VERS
, 0, -1, 1, "rdac_vers", "RDAC software version (RDAC)"},

178 {
VPD_UPR_EMC
, 0, -1, 1, "upr", "UnitÖathÑeport (EMC)"},

179 {0, 0, 0, 0, 
NULL
, NULL},

182 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

183 #i‡
deföed
(
SG_LIB_LINUX
Ë&& deföed(
SG_SCSI_STRINGS
)

195 #ifde‡
SG_SCSI_STRINGS


208 
	s›ts_t
 {

209 
	mdo_©a
;

210 
	mdo_cmddt
;

211 
	mdo_des¸ùt‹s
;

212 
	mdo_exp‹t
;

213 
	mdo_hñp
;

214 
	mdo_hex
;

215 
	mdo_øw
;

216 
	mdo_víd‹
;

217 
	mdo_vîbo£
;

218 
	mdo_vîsi⁄
;

219 
	mdo_decode
;

220 
	mdo_vpd
;

221 
	mª•_Àn
;

222 
	m∑ge_num
;

223 
	mnum_∑ges
;

224 
	mnum_›codes
;

225 
	mp_giví
;

226 c⁄° * 
	m∑ge_¨g
;

227 c⁄° * 
	mdevi˚_«me
;

228 #ifde‡
SG_SCSI_STRINGS


229 
	m›t_√w
;

234 
	$ußge
()

236 #i‡
	`deföed
(
SG_LIB_LINUX
Ë&& deföed(
SG_SCSI_STRINGS
)

237 
	`Ârötf
(
°dîr
,

249 
	`Ârötf
(
°dîr
,

257 
	`Ârötf
(
°dîr
,

294 
	}
}

296 #ifde‡
SG_SCSI_STRINGS


298 
	$ußge_ﬁd
()

300 #ifde‡
SG_LIB_LINUX


301 
	`Ârötf
(
°dîr
,

312 
	`Ârötf
(
°dîr
,

323 
	`Ârötf
(
°dîr
,

350 
	}
}

353 
	$ußge_f‹
(c⁄° 
›ts_t
 * 
›t•
)

355 i‡(
›t•
->
›t_√w
)

356 
	`ußge
();

358 
	`ußge_ﬁd
();

359 
	}
}

364 
	$ußge_f‹
(c⁄° 
›ts_t
 * 
›t•
)

366 
›t•
 = optsp;

367 
	`ußge
();

368 
	}
}

375 
	$¥o˚ss_˛_√w
(
›ts_t
 * 
›t•
, 
¨gc
, * 
¨gv
[])

377 
c
, 
n
;

380 
›ti⁄_ödex
 = 0;

382 #ifde‡
SG_LIB_LINUX


383 #ifde‡
SG_SCSI_STRINGS


384 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "acdeEhHû:m:NOp:rsuvVx", 
l⁄g_›ti⁄s
,

385 &
›ti⁄_ödex
);

387 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "cdeEhHû:m:p:rsuvVx", 
l⁄g_›ti⁄s
,

388 &
›ti⁄_ödex
);

391 #ifde‡
SG_SCSI_STRINGS


392 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "cdeEhHû:m:NOp:rsuvVx", 
l⁄g_›ti⁄s
,

393 &
›ti⁄_ödex
);

395 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "cdeEhHû:m:p:rsuvVx", 
l⁄g_›ti⁄s
,

396 &
›ti⁄_ödex
);

399 i‡(
c
 == -1)

402 
c
) {

403 #i‡
	`deföed
(
SG_LIB_LINUX
Ë&& deföed(
SG_SCSI_STRINGS
)

405 ++
›t•
->
do_©a
;

409 ++
›t•
->
do_cmddt
;

412 ++
›t•
->
do_des¸ùt‹s
;

415 ++
›t•
->
do_vpd
;

419 ++
›t•
->
do_decode
;

420 ++
›t•
->
do_vpd
;

421 
›t•
->
∑ge_num
 = 
VPD_EXT_INQ
;

424 ++
›t•
->
do_hñp
;

427 i‡(! 
›t•
->
do_hñp
)

428 ++
›t•
->
do_hñp
;

431 ++
›t•
->
do_hex
;

434 ++
›t•
->
do_decode
;

435 ++
›t•
->
do_vpd
;

436 
›t•
->
∑ge_num
 = 
VPD_DEVICE_ID
;

440 
n
 = 
	`sg_gë_num
(
›èrg
);

441 i‡((
n
 < 0) || (n > 65532)) {

442 
	`Ârötf
(
°dîr
, "badárgumentÅo '--len='\n");

443 
	`ußge_f‹
(
›t•
);

444  
SG_LIB_SYNTAX_ERROR
;

446 
›t•
->
ª•_Àn
 = 
n
;

447 #ifde‡
SG_SCSI_STRINGS


451 
›t•
->
›t_√w
 = 0;

455 
›t•
->
∑ge_¨g
 = 
›èrg
;

456 ++
›t•
->
p_giví
;

459 ++
›t•
->
do_øw
;

462 ++
›t•
->
do_víd‹
;

465 ++
›t•
->
do_exp‹t
;

468 ++
›t•
->
do_vîbo£
;

471 ++
›t•
->
do_vîsi⁄
;

474 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê%¯[0x%x]\n", 
c
, c);

475 i‡(
›t•
->
do_hñp
)

477 
	`ußge_f‹
(
›t•
);

478  
SG_LIB_SYNTAX_ERROR
;

481 i‡(
›töd
 < 
¨gc
) {

482 i‡(
NULL
 =
›t•
->
devi˚_«me
) {

483 
›t•
->
devi˚_«me
 = 
¨gv
[
›töd
];

484 ++
›töd
;

486 i‡(
›töd
 < 
¨gc
) {

487 ; 
›töd
 < 
¨gc
; ++optind)

488 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

489 
¨gv
[
›töd
]);

490 
	`ußge_f‹
(
›t•
);

491  
SG_LIB_SYNTAX_ERROR
;

495 
	}
}

497 #ifde‡
SG_SCSI_STRINGS


501 
	$¥o˚ss_˛_ﬁd
(
›ts_t
 * 
›t•
, 
¨gc
, * 
¨gv
[])

503 
k
, 
jmp_out
, 
∂í
, 
num
, 
n
;

504 c⁄° * 
˝
;

506 
k
 = 1; k < 
¨gc
; ++k) {

507 
˝
 = 
¨gv
[
k
];

508 
∂í
 = 
	`°æí
(
˝
);

509 i‡(
∂í
 <= 0)

511 i‡('-' =*
˝
) {

512 --
∂í
, ++
˝
, 
jmp_out
 = 0;Ölen > 0; --plen, ++cp) {

513 *
˝
) {

515 i‡('6' =*(
˝
 + 1)) {

516 
›t•
->
ª•_Àn
 = 36;

517 --
∂í
;

518 ++
˝
;

520 
jmp_out
 = 1;

523 
›t•
->
∑ge_num
 = 
VPD_ATA_INFO
;

524 ++
›t•
->
do_vpd
;

525 ++
›t•
->
num_∑ges
;

527 #ifde‡
SG_LIB_LINUX


529 ++
›t•
->
do_©a
;

533 
›t•
->
∑ge_num
 = 
VPD_BLOCK_LIMITS
;

534 ++
›t•
->
do_vpd
;

535 ++
›t•
->
num_∑ges
;

538 ++
›t•
->
do_cmddt
;

539 i‡('l' =*(
˝
 + 1)) {

540 ++
›t•
->
do_cmddt
;

541 --
∂í
;

542 ++
˝
;

546 ++
›t•
->
do_des¸ùt‹s
;

547 ++
›t•
->
do_decode
;

550 ++
›t•
->
do_vpd
;

554 ++
›t•
->
do_hex
;

557 
›t•
->
∑ge_num
 = 
VPD_DEVICE_ID
;

558 ++
›t•
->
do_vpd
;

559 ++
›t•
->
num_∑ges
;

562 
›t•
->
∑ge_num
 = 
VPD_MAN_NET_ADDR
;

563 ++
›t•
->
do_vpd
;

564 ++
›t•
->
num_∑ges
;

567 
›t•
->
∑ge_num
 = 
VPD_MODE_PG_POLICY
;

568 ++
›t•
->
do_vpd
;

569 ++
›t•
->
num_∑ges
;

572 
›t•
->
›t_√w
 = 1;

577 
›t•
->
∑ge_num
 = 
VPD_UPR_EMC
;

578 ++
›t•
->
do_vpd
;

579 ++
›t•
->
num_∑ges
;

582 ++
›t•
->
do_øw
;

585 
›t•
->
∑ge_num
 = 
VPD_SCSI_PORTS
;

586 ++
›t•
->
do_vpd
;

587 ++
›t•
->
num_∑ges
;

590 ++
›t•
->
do_exp‹t
;

593 ++
›t•
->
do_vîbo£
;

596 ++
›t•
->
do_vîsi⁄
;

599 
›t•
->
∑ge_num
 = 
VPD_EXT_INQ
;

600 ++
›t•
->
do_vpd
;

601 ++
›t•
->
num_∑ges
;

604 i‡(! 
›t•
->
do_hñp
)

605 ++
›t•
->
do_hñp
;

608 
jmp_out
 = 1;

611 i‡(
jmp_out
)

614 i‡(
∂í
 <= 0)

616 i‡(0 =
	`°∫cmp
("l=", 
˝
, 2)) {

617 
num
 = 
	`ssˇnf
(
˝
 + 2, "%d", &
n
);

618 i‡((1 !
num
Ë|| (
n
 < 1)) {

619 
	`Ârötf
(
°dîr
, "Inappropriate valueáfter 'l=' "

621 
	`ußge_f‹
(
›t•
);

622  
SG_LIB_SYNTAX_ERROR
;

623 } i‡(
n
 > 
MX_ALLOC_LEN
) {

624 
	`Ârötf
(
°dîr
, "valueáfter 'l=' "

626  
SG_LIB_SYNTAX_ERROR
;

628 
›t•
->
ª•_Àn
 = 
n
;

629 } i‡(0 =
	`°∫cmp
("o=", 
˝
, 2)) {

630 
›t•
->
∑ge_¨g
 = 
˝
 + 2;

631 ++
›t•
->
num_›codes
;

632 } i‡(0 =
	`°∫cmp
("p=", 
˝
, 2)) {

633 
›t•
->
∑ge_¨g
 = 
˝
 + 2;

634 ++
›t•
->
p_giví
;

635 } i‡(0 =
	`°∫cmp
("-ﬁd", 
˝
, 4))

637 i‡(
jmp_out
) {

638 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄: %s\n", 
˝
);

639 
	`ußge_f‹
(
›t•
);

640  
SG_LIB_SYNTAX_ERROR
;

642 } i‡(0 =
›t•
->
devi˚_«me
)

643 
›t•
->
devi˚_«me
 = 
˝
;

645 
	`Ârötf
(
°dîr
, "too manyárguments, got: %s,ÇotÉxpecting: "

646 "%s\n", 
›t•
->
devi˚_«me
, 
˝
);

647 
	`ußge_f‹
(
›t•
);

648  
SG_LIB_SYNTAX_ERROR
;

652 
	}
}

661 
	$¥o˚ss_˛
(
›ts_t
 * 
›t•
, 
¨gc
, * 
¨gv
[])

663 
ªs
;

664 * 
˝
;

666 
˝
 = 
	`gëív
("SG3_UTILS_OLD_OPTS");

667 i‡(
˝
) {

668 
›t•
->
›t_√w
 = 0;

669 
ªs
 = 
	`¥o˚ss_˛_ﬁd
(
›t•
, 
¨gc
, 
¨gv
);

670 i‡((0 =
ªs
Ë&& 
›t•
->
›t_√w
)

671 
ªs
 = 
	`¥o˚ss_˛_√w
(
›t•
, 
¨gc
, 
¨gv
);

673 
›t•
->
›t_√w
 = 1;

674 
ªs
 = 
	`¥o˚ss_˛_√w
(
›t•
, 
¨gc
, 
¨gv
);

675 i‡((0 =
ªs
Ë&& (0 =
›t•
->
›t_√w
))

676 
ªs
 = 
	`¥o˚ss_˛_ﬁd
(
›t•
, 
¨gc
, 
¨gv
);

678  
ªs
;

679 
	}
}

684 
	$¥o˚ss_˛
(
›ts_t
 * 
›t•
, 
¨gc
, * 
¨gv
[])

686  
	`¥o˚ss_˛_√w
(
›t•
, 
¨gc
, 
¨gv
);

687 
	}
}

695 
	$Œ_öquúy
(
sg_fd
, 
cmddt
, 
evpd
, 
pg_›
, * 
ª•
,

696 
mx_ª•_Àn
, * 
ªsidp
, 
noisy
, 
vîbo£
)

698 
ªs
, 
ªt
, 
k
, 
£n£_ˇt
;

699 
öqCmdBlk
[
INQUIRY_CMDLEN
] = {
INQUIRY_CMD
, 0, 0, 0, 0, 0};

700 
£n£_b
[
SENSE_BUFF_LEN
];

701 * 
up
;

702 
sg_±_ba£
 * 
±vp
;

704 i‡(
cmddt
)

705 
öqCmdBlk
[1] |= 2;

706 i‡(
evpd
)

707 
öqCmdBlk
[1] |= 1;

708 
öqCmdBlk
[2] = ()
pg_›
;

710 
öqCmdBlk
[3] = ()((
mx_ª•_Àn
 >> 8) & 0xff);

711 
öqCmdBlk
[4] = ()(
mx_ª•_Àn
 & 0xff);

712 i‡(
vîbo£
) {

713 
	`Ârötf
(
°dîr
, " inquiry cdb: ");

714 
k
 = 0; k < 
INQUIRY_CMDLEN
; ++k)

715 
	`Ârötf
(
°dîr
, "%02x ", 
öqCmdBlk
[
k
]);

716 
	`Ârötf
(
°dîr
, "\n");

718 i‡(
ª•
 && (
mx_ª•_Àn
 > 0)) {

719 
up
 = (*)
ª•
;

720 
up
[0] = 0x7f;

721 i‡(
mx_ª•_Àn
 > 4)

722 
up
[4] = 0;

724 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

725 i‡(
NULL
 =
±vp
) {

726 
	`Ârötf
(
°dîr
, "inquiry: out of memory\n");

729 
	`£t_scsi_±_cdb
(
±vp
, 
öqCmdBlk
, (inqCmdBlk));

730 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

731 
	`£t_scsi_±_d©a_ö
(
±vp
, (*)
ª•
, 
mx_ª•_Àn
);

732 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

733 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "öquúy", 
ªs
, 
mx_ª•_Àn
, 
£n£_b
,

734 
noisy
, 
vîbo£
, &
£n£_ˇt
);

735 i‡(
ªsidp
)

736 *
ªsidp
 = 
	`gë_scsi_±_ªsid
(
±vp
);

737 
	`de°ru˘_scsi_±_obj
(
±vp
);

738 i‡(-1 =
ªt
)

740 i‡(-2 =
ªt
) {

741 
£n£_ˇt
) {

742 
SG_LIB_CAT_INVALID_OP
:

743 
SG_LIB_CAT_ILLEGAL_REQ
:

744 
SG_LIB_CAT_ABORTED_COMMAND
:

745 
ªt
 = 
£n£_ˇt
;

747 
SG_LIB_CAT_RECOVERED
:

748 
SG_LIB_CAT_NO_SENSE
:

749 
ªt
 = 0;

752 
ªt
 = -1;

755 } i‡(
ªt
 < 4) {

756 i‡(
vîbo£
)

757 
	`Ârötf
(
°dîr
, "öquúy: gŸÅoÿ„w byã†(%d)\n", 
ªt
);

758 
ªt
 = 
SG_LIB_CAT_MALFORMED
;

760 
ªt
 = 0;

762  
ªt
;

763 
	}
}

765 c⁄° 
svpd_vÆues_«me_t
 *

766 
	$sdp_föd_vpd_by_a¸⁄
(c⁄° * 
≠
)

768 c⁄° 
svpd_vÆues_«me_t
 * 
v≈
;

770 
v≈
 = 
vpd_pg
; v≈->
a¸⁄
; ++vnp) {

771 i‡(0 =
	`°rcmp
(
v≈
->
a¸⁄
, 
≠
))

772  
v≈
;

774  
NULL
;

775 
	}
}

778 
	$íumî©e_vpds
()

780 c⁄° 
svpd_vÆues_«me_t
 * 
v≈
;

782 
v≈
 = 
vpd_pg
; v≈->
a¸⁄
; ++vnp) {

783 i‡(
v≈
->
«me
)

784 
	`¥ötf
(" %-10†0x%02x %s\n", 
v≈
->
a¸⁄
, v≈->
vÆue
,

785 
v≈
->
«me
);

787 
	}
}

790 
	$dSåRaw
(c⁄° * 
°r
, 
Àn
)

792 
k
;

794 
k
 = 0 ; k < 
Àn
; ++k)

795 
	`¥ötf
("%c", 
°r
[
k
]);

796 
	}
}

805 
	$ícode_whôe•a˚s
(*
°r
, 
öÀn
)

807 
k
, 
ªs
;

808 
j
 = 0;

809 
vÆid
 = 0;

810 
ouéí
 = 
öÀn
;

813 
	`isbœnk
(
°r
[
j
]))

814 
j
++;

815 
k
 = 
j
;

817 (
ouéí
 > 
k
) &&

818 (
	`isbœnk
(
°r
[
ouéí
 - 1]) || ('\0' == str[outlen - 1]))) {

819 
°r
[
ouéí
 - 1] = '\0';

820 
ouéí
--;

822 
ªs
 = 0; 
k
 < 
ouéí
; ++k) {

823 i‡(
	`isbœnk
(
°r
[
k
])) {

824 i‡((
ªs
 > 0Ë&& ('_' !
°r
[res - 1])) {

825 
°r
[
ªs
++] = '_';

826 
vÆid
++;

828 } i‡(! 
	`i•röt
(
°r
[
k
]))

829 
°r
[
ªs
++] = '.';

831 
°r
[
ªs
++] = så[
k
];

832 
vÆid
++;

835 i‡(! 
vÆid
)

836 
ªs
 = 0;

837 
°r
[
ªs
] = '\0';

838  
ªs
;

839 
	}
}

842 
	$ícode_°rög
(*
out
, c⁄° *
ö
, 
öÀn
)

844 
i
, 
j
 = 0;

846 
i
 = 0; (ò< 
öÀn
); ++i) {

847 i‡(
	`isbœnk
(
ö
[
i
]Ë|| !
	`i•röt
(in[i])) {

848 
	`•rötf
(&
out
[
j
], "\\x%02x", 
ö
[
i
]);

849 
j
 += 4;

851 
out
[
j
] = 
ö
[
i
];

852 
j
++;

855 
out
[
j
] = '\0';

856  
j
;

857 
	}
}

859 
	svpd_«me
 {

860 
	mnumbî
;

861 
	m≥ri_ty≥
;

862 c⁄° * 
	m«me
;

866 
vpd_«me
 
	gvpd_«me_¨r
[] = {

867 {
VPD_SUPPORTED_VPDS
, 0, "Supported VPDÖages"},

868 {
VPD_UNIT_SERIAL_NUM
, 0, "Unit serialÇumber"},

871 {
VPD_DEVICE_ID
, 0, "Device identification"},

872 {
VPD_SOFTW_INF_ID
, 0, "Software interface identification"},

873 {
VPD_MAN_NET_ADDR
, 0, "ManagementÇetworkáddresses"},

874 {
VPD_EXT_INQ
, 0, "Extended INQUIRY data"},

875 {
VPD_MODE_PG_POLICY
, 0, "ModeÖageÖolicy"},

876 {
VPD_SCSI_PORTS
, 0, "SCSIÖorts"},

877 {
VPD_ATA_INFO
, 0, "ATA information"},

878 {
VPD_POWER_CONDITION
, 0, "Power condition"},

879 {
VPD_DEVICE_CONSTITUENTS
, 0, "Device constituents"},

880 {
VPD_CFA_PROFILE_INFO
, 0, "CFAÖrofile information"},

881 {
VPD_POWER_CONSUMPTION
, 0, "Power consumption"},

882 {
VPD_3PARTY_COPY
, 0, "ThirdÖarty copy"},

884 {
VPD_BLOCK_LIMITS
, 0, "BlockÜimits (sbc2)"},

885 {
VPD_BLOCK_DEV_CHARS
, 0, "Block device characteristics (sbc3)"},

886 {
VPD_LB_PROVISIONING
, 0, "Logical blockÖrovisioning (sbc3)"},

887 {
VPD_REFERRALS
, 0, "Referrals (sbc3)"},

888 {0xb0, 
PDT_TAPE
, "Sequentialáccess device capabilities (ssc3)"},

889 {0xb2, 
PDT_TAPE
, "TapeAlert supported flags (ssc3)"},

890 {0xb0, 
PDT_OSD
, "OSD information (osd)"},

891 {0xb1, 
PDT_OSD
, "SecurityÅoken (osd)"},

901 
	$gë_vpd_∑ge_°r
(
vpd_∑ge_num
, 
scsi_±y≥
)

903 
k
;

904 
vpd_«me_¨r_sz
 =

905 ()((
vpd_«me_¨r
) / (vpd_name_arr[0]));

907 i‡((
vpd_∑ge_num
 >= 0xb0) && (vpd_page_num < 0xc0)) {

909 
k
 = 0; k < 
vpd_«me_¨r_sz
; ++k) {

910 i‡((
vpd_«me_¨r
[
k
].
numbî
 =
vpd_∑ge_num
) &&

911 (
vpd_«me_¨r
[
k
].
≥ri_ty≥
 =
scsi_±y≥
))

914 i‡(
k
 < 
vpd_«me_¨r_sz
)

915  
vpd_«me_¨r
[
k
].
«me
;

916 
k
 = 0; k < 
vpd_«me_¨r_sz
; ++k) {

917 i‡((
vpd_«me_¨r
[
k
].
numbî
 =
vpd_∑ge_num
) &&

918 (
vpd_«me_¨r
[
k
].
≥ri_ty≥
 == 0))

921 i‡(
k
 < 
vpd_«me_¨r_sz
)

922  
vpd_«me_¨r
[
k
].
«me
;

924  
NULL
;

927 
k
 = 0; k < 
vpd_«me_¨r_sz
; ++k) {

928 i‡(
vpd_«me_¨r
[
k
].
numbî
 =
vpd_∑ge_num
)

931 i‡(
k
 < 
vpd_«me_¨r_sz
)

932  
vpd_«me_¨r
[
k
].
«me
;

934  
NULL
;

936 
	}
}

939 
	$decode_id_vpd
(* 
buff
, 
Àn
, 
do_hex
)

941 i‡(
Àn
 < 4) {

942 
	`Ârötf
(
°dîr
, "Device identification VPDÖageÜengthÅoo "

943 "sh‹t=%d\n", 
Àn
);

946 
	`decode_dev_ids
("Devi˚ idítifiˇti⁄", 
buff
 + 4, 
Àn
 - 4, 
do_hex
);

947 
	}
}

949 c⁄° * 
	gassoc_¨r
[] =

957 c⁄° * 
	g√tw‹k_£rvi˚_ty≥_¨r
[] =

974 
	$decode_√t_m™_vpd
(* 
buff
, 
Àn
, 
do_hex
)

976 
k
, 
bump
, 
«_Àn
;

977 * 
u˝
;

979 i‡(
Àn
 < 4) {

980 
	`Ârötf
(
°dîr
, "ManagementÇetworkáddresses VPDÖageÜengthÅoo "

981 "sh‹t=%d\n", 
Àn
);

984 
Àn
 -= 4;

985 
u˝
 = 
buff
 + 4;

986 
k
 = 0; k < 
Àn
; k +
bump
, 
u˝
 += bump) {

987 
	`¥ötf
(" %s, ServiceÅype: %s\n",

988 
assoc_¨r
[(
u˝
[0] >> 5) & 0x3],

989 
√tw‹k_£rvi˚_ty≥_¨r
[
u˝
[0] & 0x1f]);

990 
«_Àn
 = (
u˝
[2] << 8) + ucp[3];

991 
bump
 = 4 + 
«_Àn
;

992 i‡((
k
 + 
bump
Ë> 
Àn
) {

993 
	`Ârötf
(
°dîr
, "ManagementÇetworkáddresses VPDÖage, short "

994 "des¸ùt‹Üígth=%d,Üe·=%d\n", 
bump
, (
Àn
 - 
k
));

997 i‡(
«_Àn
 > 0) {

998 i‡(
do_hex
) {

999 
	`¥ötf
(" Networkáddress:\n");

1000 
	`dSåHex
((c⁄° *)(
u˝
 + 4), 
«_Àn
, 0);

1002 
	`¥ötf
(" %s\n", 
u˝
 + 4);

1005 
	}
}

1007 c⁄° * 
	gmode_∑ge_pﬁicy_¨r
[] =

1017 
	$decode_mode_pﬁicy_vpd
(* 
buff
, 
Àn
, 
do_hex
)

1019 
k
, 
bump
;

1020 * 
u˝
;

1022 i‡(
Àn
 < 4) {

1023 
	`Ârötf
(
°dîr
, "ModeÖageÖolicy VPDÖageÜengthÅoo short=%d\n",

1024 
Àn
);

1027 
Àn
 -= 4;

1028 
u˝
 = 
buff
 + 4;

1029 
k
 = 0; k < 
Àn
; k +
bump
, 
u˝
 += bump) {

1030 
bump
 = 4;

1031 i‡((
k
 + 
bump
Ë> 
Àn
) {

1032 
	`Ârötf
(
°dîr
, "ModeÖageÖolicy VPDÖage, short "

1033 "des¸ùt‹Üígth=%d,Üe·=%d\n", 
bump
, (
Àn
 - 
k
));

1036 i‡(
do_hex
)

1037 
	`dSåHex
((c⁄° *)
u˝
, 4, 1);

1039 
	`¥ötf
(" PﬁicyÖagêcode: 0x%x", (
u˝
[0] & 0x3f));

1040 i‡(
u˝
[1])

1041 
	`¥ötf
(", sub∑gêcode: 0x%x\n", 
u˝
[1]);

1043 
	`¥ötf
("\n");

1044 
	`¥ötf
(" MLUS=%d, Pﬁicy: %s\n", !!(
u˝
[2] & 0x80),

1045 
mode_∑ge_pﬁicy_¨r
[
u˝
[2] & 0x3]);

1048 
	}
}

1052 
	$decode_scsi_p‹ts_vpd
(* 
buff
, 
Àn
, 
do_hex
)

1054 
k
, 
bump
, 
ªl_p‹t
, 
ù_tid_Àn
, 
çd_Àn
;

1055 * 
u˝
;

1057 i‡(
Àn
 < 4) {

1058 
	`Ârötf
(
°dîr
, "SCSI P‹t†VPDÖagêÀngthÅoÿsh‹t=%d\n", 
Àn
);

1061 
Àn
 -= 4;

1062 
u˝
 = 
buff
 + 4;

1063 
k
 = 0; k < 
Àn
; k +
bump
, 
u˝
 += bump) {

1064 
ªl_p‹t
 = (
u˝
[2] << 8) + ucp[3];

1065 
	`¥ötf
("Rñ©ivêp‹t=%d\n", 
ªl_p‹t
);

1066 
ù_tid_Àn
 = (
u˝
[6] << 8) + ucp[7];

1067 
bump
 = 8 + 
ù_tid_Àn
;

1068 i‡((
k
 + 
bump
Ë> 
Àn
) {

1069 
	`Ârötf
(
°dîr
, "SCSI Ports VPDÖage, short descriptor "

1070 "Àngth=%d,Üe·=%d\n", 
bump
, (
Àn
 - 
k
));

1073 i‡(
ù_tid_Àn
 > 0) {

1074 i‡(
do_hex
) {

1075 
	`¥ötf
(" InitiatorÖortÅransport id:\n");

1076 
	`dSåHex
((c⁄° *)(
u˝
 + 8), 
ù_tid_Àn
, 1);

1078 
	`decode_å™•‹t_id
(" ", 
u˝
 + 8, 
ù_tid_Àn
);

1080 
çd_Àn
 = (
u˝
[
bump
 + 2] << 8) + ucp[bump + 3];

1081 i‡((
k
 + 
bump
 + 
çd_Àn
 + 4Ë> 
Àn
) {

1082 
	`Ârötf
(
°dîr
, "SCSI Ports VPDÖage, short descriptor(tgt) "

1083 "Àngth=%d,Üe·=%d\n", 
bump
, (
Àn
 - 
k
));

1086 i‡(
çd_Àn
 > 0) {

1087 
	`¥ötf
(" TargetÖort descriptor(s):\n");

1088 i‡(
do_hex
)

1089 
	`dSåHex
((c⁄° *)(
u˝
 + 
bump
 + 4), 
çd_Àn
, 1);

1091 
	`decode_dev_ids
("SCSI P‹ts", 
u˝
 + 
bump
 + 4, 
çd_Àn
,

1092 
do_hex
);

1094 
bump
 +
çd_Àn
 + 4;

1096 
	}
}

1098 c⁄° * 
	gcode_£t_¨r
[] =

1108 c⁄° * 
	gdesig_ty≥_¨r
[] =

1125 
	$decode_dev_ids
(c⁄° * 
Àadö
, * 
buff
, 
Àn
, 
do_hex
)

1127 
u
, 
j
, 
m
, 
id_Àn
, 
p_id
, 
c_£t
, 
piv
, 
assoc
, 
desig_ty≥
, 
i_Àn
;

1128 
off
, 
ci_off
, 
c_id
, 
d_id
, 
«a
, 
vsi
, 
k
;

1129 
uöt64_t
 
v£i
;

1130 
uöt64_t
 
id_ext
;

1131 c⁄° * 
u˝
;

1132 c⁄° * 
ù
;

1133 
b
[64];

1135 i‡(
buff
[2] != 0) {

1146 
i_Àn
 = 
Àn
;

1147 
ù
 = 
u˝
 = 
buff
;

1148 
c_£t
 = 1;

1149 
assoc
 = 0;

1150 
piv
 = 0;

1151 
p_id
 = 0xf;

1152 
desig_ty≥
 = 3;

1153 
j
 = 1;

1154 
off
 = 16;

1155 
	`¥ötf
(" Pª-SPC des¸ùt‹, des¸ùt‹Üígth: %d\n", 
i_Àn
);

1156 
decode
;

1159 
j
 = 1, 
off
 = -1;

1160 (
u
 = 
	`sg_vpd_dev_id_ôî
(
buff
, 
Àn
, &
off
, -1, -1, -1)) == 0;

1161 ++
j
) {

1162 
u˝
 = 
buff
 + 
off
;

1163 
i_Àn
 = 
u˝
[3];

1164 
id_Àn
 = 
i_Àn
 + 4;

1165 
	`¥ötf
(" Designation descriptorÇumber %d, "

1166 "des¸ùt‹Üígth: %d\n", 
j
, 
id_Àn
);

1167 i‡((
off
 + 
id_Àn
Ë> 
Àn
) {

1168 
	`Ârötf
(
°dîr
, "%s VPDÖageÉrror: designatorÜengthÜonger "

1169 "th™\¿ÑemaöögÑe•⁄£Üígth=%d\n", 
Àadö
,

1170 (
Àn
 - 
off
));

1173 
ù
 = 
u˝
 + 4;

1174 
p_id
 = ((
u˝
[0] >> 4) & 0xf);

1175 
c_£t
 = (
u˝
[0] & 0xf);

1176 
piv
 = ((
u˝
[1] & 0x80) ? 1 : 0);

1177 
assoc
 = ((
u˝
[1] >> 4) & 0x3);

1178 
desig_ty≥
 = (
u˝
[1] & 0xf);

1179 
decode
:

1180 i‡(
piv
 && ((1 =
assoc
) || (2 ==ássoc)))

1181 
	`¥ötf
("Åransport: %s\n",

1182 
	`sg_gë_å™s_¥Ÿo_°r
(
p_id
, (
b
), b));

1183 
	`¥ötf
(" designator_type: %s, code_set: %s\n",

1184 
desig_ty≥_¨r
[
desig_ty≥
], 
code_£t_¨r
[
c_£t
]);

1185 
	`¥ötf
("ássocüãd wôhÅhê%s\n", 
assoc_¨r
[
assoc
]);

1186 i‡(
do_hex
) {

1187 
	`¥ötf
(" designator header(hex): %.2x %.2x %.2x %.2x\n",

1188 
u˝
[0], ucp[1], ucp[2], ucp[3]);

1189 
	`¥ötf
(" designator:\n");

1190 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

1193 
desig_ty≥
) {

1195 
k
 = 0;

1196 i‡((1 =
c_£t
) || (2 == c_set)) {

1197 
k
 = 0; (k < 
i_Àn
Ë&& 
	`i•röt
(
ù
[k]); ++k)

1199 i‡(
k
 >
i_Àn
)

1200 
k
 = 1;

1202 i‡(
k
)

1203 
	`¥ötf
(" víd‹ s≥cific: %.*s\n", 
i_Àn
, 
ù
);

1205 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, -1);

1208 
	`¥ötf
(" víd‹ id: %.8s\n", 
ù
);

1209 i‡(
i_Àn
 > 8)

1210 
	`¥ötf
(" víd‹ s≥cific: %.*s\n", 
i_Àn
 - 8, 
ù
 + 8);

1213 
	`¥ötf
(" EUI-64 ba£d %d byã idítifõr\n", 
i_Àn
);

1214 i‡(1 !
c_£t
) {

1215 
	`Ârötf
(
°dîr
, " <<Éxpected binary code_set (1)>>\n");

1216 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, -1);

1219 
ci_off
 = 0;

1220 i‡(16 =
i_Àn
) {

1221 
ci_off
 = 8;

1222 
id_ext
 = 0;

1223 
m
 = 0; m < 8; ++m) {

1224 i‡(
m
 > 0)

1225 
id_ext
 <<= 8;

1226 
id_ext
 |
ù
[
m
];

1228 
	`¥ötf
(" Idítifõ∏exãnsi⁄: 0x%" 
PRIx64
 "\n", 
id_ext
);

1229 } i‡((8 !
i_Àn
) && (12 != i_len)) {

1230 
	`Ârötf
(
°dîr
, " << can only decode 8, 12ánd 16 "

1232 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, -1);

1235 
c_id
 = ((
ù
[
ci_off
] << 16) | (ip[ci_off + 1] << 8) |

1236 
ù
[
ci_off
 + 2]);

1237 
	`¥ötf
(" IEEE Com∑ny_id: 0x%x\n", 
c_id
);

1238 
v£i
 = 0;

1239 
m
 = 0; m < 5; ++m) {

1240 i‡(
m
 > 0)

1241 
v£i
 <<= 8;

1242 
v£i
 |
ù
[
ci_off
 + 3 + 
m
];

1244 
	`¥ötf
(" Víd‹ S≥cifi¯Exãnsi⁄ Idítifõr: 0x%" 
PRIx64


1245 "\n", 
v£i
);

1246 i‡(12 =
i_Àn
) {

1247 
d_id
 = ((
ù
[8] << 24) | (ip[9] << 16) | (ip[10] << 8) |

1248 
ù
[11]);

1249 
	`¥ötf
(" Dúe˘‹y ID: 0x%x\n", 
d_id
);

1251 
	`¥ötf
(" [0x");

1252 
m
 = 0; m < 
i_Àn
; ++m)

1253 
	`¥ötf
("%02x", ()
ù
[
m
]);

1254 
	`¥ötf
("]\n");

1257 i‡(1 !
c_£t
) {

1258 
	`Ârötf
(
°dîr
, " <<Éxpected binary code_set (1)>>\n");

1259 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, -1);

1262 
«a
 = (
ù
[0] >> 4) & 0xff;

1263 i‡((
«a
 < 2) || (naa > 6) || (4 ==Çaa)) {

1264 
	`Ârötf
(
°dîr
, " << u√x≥˘edÇØ [0x%x]>>\n", 
«a
);

1265 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, -1);

1268 i‡(2 =
«a
) {

1269 i‡(8 !
i_Àn
) {

1270 
	`Ârötf
(
°dîr
, " << unexpected NAA 2 identifier "

1271 "Àngth: 0x%x>>\n", 
i_Àn
);

1272 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, -1);

1275 
d_id
 = (((
ù
[0] & 0xf) << 8) | ip[1]);

1276 
c_id
 = ((
ù
[2] << 16) | (ip[3] << 8) | ip[4]);

1277 
vsi
 = ((
ù
[5] << 16) | (ip[6] << 8) | ip[7]);

1278 
	`¥ötf
(" NAA 2, vendor specific identifier A: 0x%x\n",

1279 
d_id
);

1280 
	`¥ötf
(" IEEE Com∑ny_id: 0x%x\n", 
c_id
);

1281 
	`¥ötf
(" víd‹ s≥cifi¯idítifõ∏B: 0x%x\n", 
vsi
);

1282 
	`¥ötf
(" [0x");

1283 
m
 = 0; m < 8; ++m)

1284 
	`¥ötf
("%02x", ()
ù
[
m
]);

1285 
	`¥ötf
("]\n");

1286 } i‡(3 =
«a
) {

1287 i‡(8 !
i_Àn
) {

1288 
	`Ârötf
(
°dîr
, " << unexpected NAA 3 identifier "

1289 "Àngth: 0x%x>>\n", 
i_Àn
);

1290 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, -1);

1293 
	`¥ötf
(" NAA 3, Locallyássigned:\n");

1294 
	`¥ötf
(" [0x");

1295 
m
 = 0; m < 8; ++m)

1296 
	`¥ötf
("%02x", ()
ù
[
m
]);

1297 
	`¥ötf
("]\n");

1298 } i‡(5 =
«a
) {

1299 i‡(8 !
i_Àn
) {

1300 
	`Ârötf
(
°dîr
, " << unexpected NAA 5 identifier "

1301 "Àngth: 0x%x>>\n", 
i_Àn
);

1302 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, -1);

1305 
c_id
 = (((
ù
[0] & 0xf) << 20) | (ip[1] << 12) |

1306 (
ù
[2] << 4) | ((ip[3] & 0xf0) >> 4));

1307 
v£i
 = 
ù
[3] & 0xf;

1308 
m
 = 1; m < 5; ++m) {

1309 
v£i
 <<= 8;

1310 
v£i
 |
ù
[3 + 
m
];

1312 
	`¥ötf
(" NAA 5, IEEE Com∑ny_id: 0x%x\n", 
c_id
);

1313 
	`¥ötf
(" Víd‹ S≥cifi¯Idítifõr: 0x%" 
PRIx64


1314 "\n", 
v£i
);

1315 
	`¥ötf
(" [0x");

1316 
m
 = 0; m < 8; ++m)

1317 
	`¥ötf
("%02x", ()
ù
[
m
]);

1318 
	`¥ötf
("]\n");

1319 } i‡(6 =
«a
) {

1320 i‡(16 !
i_Àn
) {

1321 
	`Ârötf
(
°dîr
, " << unexpected NAA 6 identifier "

1322 "Àngth: 0x%x>>\n", 
i_Àn
);

1323 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

1326 
c_id
 = (((
ù
[0] & 0xf) << 20) | (ip[1] << 12) |

1327 (
ù
[2] << 4) | ((ip[3] & 0xf0) >> 4));

1328 
v£i
 = 
ù
[3] & 0xf;

1329 
m
 = 1; m < 5; ++m) {

1330 
v£i
 <<= 8;

1331 
v£i
 |
ù
[3 + 
m
];

1333 
	`¥ötf
(" NAA 6, IEEE Com∑ny_id: 0x%x\n", 
c_id
);

1334 
	`¥ötf
(" Víd‹ S≥cifi¯Idítifõr: 0x%" 
PRIx64
 "\n",

1335 
v£i
);

1336 
v£i
 = 0;

1337 
m
 = 0; m < 8; ++m) {

1338 i‡(
m
 > 0)

1339 
v£i
 <<= 8;

1340 
v£i
 |
ù
[8 + 
m
];

1342 
	`¥ötf
(" Vendor Specific Identifier Extension: "

1343 "0x%" 
PRIx64
 "\n", 
v£i
);

1344 
	`¥ötf
(" [0x");

1345 
m
 = 0; m < 16; ++m)

1346 
	`¥ötf
("%02x", ()
ù
[
m
]);

1347 
	`¥ötf
("]\n");

1351 i‡((1 !
c_£t
Ë|| (1 !
assoc
Ë|| (4 !
i_Àn
)) {

1352 
	`Ârötf
(
°dîr
, " <<Éxpected binary code_set,Åarget "

1354 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, -1);

1357 
d_id
 = ((
ù
[2] << 8) | ip[3]);

1358 
	`¥ötf
(" Rñ©ivêèrgëÖ‹t: 0x%x\n", 
d_id
);

1361 i‡((1 !
c_£t
Ë|| (1 !
assoc
Ë|| (4 !
i_Àn
)) {

1362 
	`Ârötf
(
°dîr
, " <<Éxpected binary code_set,Åarget "

1364 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, -1);

1367 
d_id
 = ((
ù
[2] << 8) | ip[3]);

1368 
	`¥ötf
(" T¨gëÖ‹àgroup: 0x%x\n", 
d_id
);

1371 i‡((1 !
c_£t
Ë|| (0 !
assoc
Ë|| (4 !
i_Àn
)) {

1372 
	`Ârötf
(
°dîr
, " <<Éxpected binary code_set,Üogical "

1374 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, -1);

1377 
d_id
 = ((
ù
[2] << 8) | ip[3]);

1378 
	`¥ötf
(" Logiˇ»unô group: 0x%x\n", 
d_id
);

1381 i‡((1 !
c_£t
Ë|| (0 !
assoc
)) {

1382 
	`Ârötf
(
°dîr
, " <<Éxpected binary code_set,Üogical "

1384 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, -1);

1387 
	`¥ötf
(" MD5Üogical unit identifier:\n");

1388 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, -1);

1391 i‡(3 !
c_£t
) {

1392 
	`Ârötf
(
°dîr
, " <<Éxpected UTF-8 code_set>>\n");

1393 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, -1);

1396 
	`¥ötf
(" SCSIÇame string:\n");

1401 
	`¥ötf
(" %s\n", (c⁄° *)
ù
);

1406 i‡(! 
piv
)

1407 
	`¥ötf
(" >>>> Protocol specificÖort identifier "

1410 i‡(
TPROTO_UAS
 =
p_id
) {

1411 
	`¥ötf
(" USB devi˚áddªss: 0x%x\n", 0x7‡& 
ù
[0]);

1412 
	`¥ötf
(" USB i¡îÁ˚Çumbî: 0x%x\n", 
ù
[2]);

1413 } i‡(
TPROTO_SOP
 =
p_id
) {

1414 
	`¥ötf
(" PCIêroutög ID, bu†numbî: 0x%x\n", 
ù
[0]);

1415 
	`¥ötf
(" fun˘i⁄Çumbî: 0x%x\n", 
ù
[1]);

1416 
	`¥ötf
(" [or deviceÇumber: 0x%x, functionÇumber: "

1417 "0x%x]\n", (0x1‡& (
ù
[1] >> 3)), 0x7 & ip[1]);

1419 
	`¥ötf
(" >>>> unexpectedÖrotocol indentifier: %s\n"

1422 
	`sg_gë_å™s_¥Ÿo_°r
(
p_id
, (
b
), b));

1425 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, -1);

1429 i‡(-2 =
u
)

1430 
	`Ârötf
(
°dîr
, "%†VPDÖagêîr‹:áround off£t=%d\n", 
Àadö
, 
off
);

1431 
	}
}

1434 
	$exp‹t_dev_ids
(* 
buff
, 
Àn
)

1436 
u
, 
j
, 
m
, 
id_Àn
, 
c_£t
, 
assoc
, 
desig_ty≥
, 
i_Àn
;

1437 
off
, 
d_id
, 
«a
, 
k
;

1438 * 
u˝
;

1439 * 
ù
;

1440 c⁄° * 
assoc_°r
;

1442 i‡(
buff
[2] != 0) {

1446 
i_Àn
 = 
Àn
;

1447 
ù
 = 
buff
;

1448 
c_£t
 = 1;

1449 
assoc
 = 0;

1450 
desig_ty≥
 = 3;

1451 
j
 = 1;

1452 
off
 = 16;

1453 
decode
;

1456 
j
 = 1, 
off
 = -1;

1457 (
u
 = 
	`sg_vpd_dev_id_ôî
(
buff
, 
Àn
, &
off
, -1, -1, -1)) == 0;

1458 ++
j
) {

1459 
u˝
 = 
buff
 + 
off
;

1460 
i_Àn
 = 
u˝
[3];

1461 
id_Àn
 = 
i_Àn
 + 4;

1462 i‡((
off
 + 
id_Àn
Ë> 
Àn
) {

1463 
	`Ârötf
(
°dîr
, "Device Identification VPDÖageÉrror: designator "

1465 (
Àn
 - 
off
));

1468 
ù
 = 
u˝
 + 4;

1469 
c_£t
 = (
u˝
[0] & 0xf);

1470 
assoc
 = ((
u˝
[1] >> 4) & 0x3);

1471 
desig_ty≥
 = (
u˝
[1] & 0xf);

1472 
decode
:

1473 
assoc
) {

1475 
assoc_°r
 = "LUN";

1478 
assoc_°r
 = "PORT";

1481 
assoc_°r
 = "TARGET";

1484 
	`Ârötf
(
°dîr
, " InvÆidássocüti⁄ %d\n", 
assoc
);

1487 
desig_ty≥
) {

1489 
k
 = 0;

1490 i‡((1 =
c_£t
) || (2 == c_set)) {

1491 
k
 = 
	`ícode_whôe•a˚s
(
ù
, 
i_Àn
);

1492 i‡(
k
 >
i_Àn
)

1493 
k
 = 1;

1495 i‡(
k
)

1496 
	`¥ötf
("SCSI_IDENT_%s_VENDOR=%.*s\n", 
assoc_°r
, 
k
, 
ù
);

1499 
k
 = 
	`ícode_whôe•a˚s
(
ù
, 
i_Àn
);

1500 
	`¥ötf
("SCSI_IDENT_%s_T10=%.*s\n", 
assoc_°r
, 
k
, 
ù
);

1503 i‡(1 !
c_£t
) {

1504 
	`Ârötf
(
°dîr
, " <<Éxpected binary code_set (1)>>\n");

1505 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

1508 
	`¥ötf
("SCSI_IDENT_%s_EUI64=", 
assoc_°r
);

1509 
m
 = 0; m < 
i_Àn
; ++m)

1510 
	`¥ötf
("%02x", ()
ù
[
m
]);

1511 
	`¥ötf
("\n");

1514 i‡(1 !
c_£t
) {

1515 
	`Ârötf
(
°dîr
, " <<Éxpected binary code_set (1)>>\n");

1516 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

1519 
«a
 = (
ù
[0] >> 4) & 0xff;

1520 i‡((
«a
 < 2) || (naa > 6) || (4 ==Çaa)) {

1521 
	`Ârötf
(
°dîr
, " << u√x≥˘edÇØ [0x%x]>>\n", 
«a
);

1522 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

1525 i‡(6 !
«a
) {

1526 i‡(8 !
i_Àn
) {

1527 
	`Ârötf
(
°dîr
, " << unexpected NAA 2 identifier "

1528 "Àngth: 0x%x>>\n", 
i_Àn
);

1529 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

1532 
	`¥ötf
("SCSI_IDENT_%s_NAA=", 
assoc_°r
);

1533 
m
 = 0; m < 8; ++m)

1534 
	`¥ötf
("%02x", ()
ù
[
m
]);

1535 
	`¥ötf
("\n");

1537 i‡(16 !
i_Àn
) {

1538 
	`Ârötf
(
°dîr
, " << unexpected NAA 6 identifier "

1539 "Àngth: 0x%x>>\n", 
i_Àn
);

1540 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

1543 
	`¥ötf
("SCSI_IDENT_%s_NAA=", 
assoc_°r
);

1544 
m
 = 0; m < 16; ++m)

1545 
	`¥ötf
("%02x", ()
ù
[
m
]);

1546 
	`¥ötf
("\n");

1550 i‡((1 !
c_£t
Ë|| (1 !
assoc
Ë|| (4 !
i_Àn
)) {

1551 
	`Ârötf
(
°dîr
, " <<Éxpected binary code_set,Åarget "

1553 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

1556 
d_id
 = ((
ù
[2] << 8) | ip[3]);

1557 
	`¥ötf
("SCSI_IDENT_%s_RELATIVE=%d\n", 
assoc_°r
, 
d_id
);

1560 i‡((1 !
c_£t
Ë|| (1 !
assoc
Ë|| (4 !
i_Àn
)) {

1561 
	`Ârötf
(
°dîr
, " <<Éxpected binary code_set,Åarget "

1563 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

1566 
d_id
 = ((
ù
[2] << 8) | ip[3]);

1567 
	`¥ötf
("SCSI_IDENT_%s_TARGET_PORT_GROUP=0x%x\n", 
assoc_°r
, 
d_id
);

1570 i‡((1 !
c_£t
Ë|| (0 !
assoc
Ë|| (4 !
i_Àn
)) {

1571 
	`Ârötf
(
°dîr
, " <<Éxpected binary code_set,Üogical "

1573 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

1576 
d_id
 = ((
ù
[2] << 8) | ip[3]);

1577 
	`¥ötf
("SCSI_IDENT_%s_LOGICAL_UNIT_GROUP=0x%x\n", 
assoc_°r
, 
d_id
);

1580 i‡((1 !
c_£t
Ë|| (0 !
assoc
)) {

1581 
	`Ârötf
(
°dîr
, " <<Éxpected binary code_set,Üogical "

1583 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

1586 
	`¥ötf
("SCSI_IDENT_%s_MD5=", 
assoc_°r
);

1587 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, -1);

1590 i‡(3 !
c_£t
) {

1591 
	`Ârötf
(
°dîr
, " <<Éxpected UTF-8 code_set>>\n");

1592 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, -1);

1595 
	`¥ötf
("SCSI_IDENT_%s_NAME=%.*s\n", 
assoc_°r
, 
i_Àn
,

1596 (c⁄° *)
ù
);

1601 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, -1);

1605 i‡(-2 =
u
)

1606 
	`Ârötf
(
°dîr
, "Device identification VPDÖageÉrror: "

1607 "¨ound off£t=%d\n", 
off
);

1608 
	}
}

1613 
	$decode_å™•‹t_id
(c⁄° * 
Àadö
, * 
u˝
, 
Àn
)

1615 
f‹m©_code
, 
¥Ÿo_id
, 
num
, 
j
, 
k
;

1616 
uöt64_t
 
uŒ
;

1617 
bump
;

1619 
k
 = 0, 
bump
 = 24; k < 
Àn
; k +bump, 
u˝
 += bump) {

1620 i‡((
Àn
 < 24) || (0 != (len % 4)))

1621 
	`¥ötf
("%sTransport Id short orÇot multiple of 4 "

1622 "[Àngth=%d]:\n", 
Àadö
, 
Àn
);

1624 
	`¥ötf
("%sTøn•‹àId o‡öôüt‹:\n", 
Àadö
);

1625 
f‹m©_code
 = ((
u˝
[0] >> 6) & 0x3);

1626 
¥Ÿo_id
 = (
u˝
[0] & 0xf);

1627 
¥Ÿo_id
) {

1628 
TPROTO_FCP
:

1629 
	`¥ötf
("%† FCP-2 W‹ld WidêName:\n", 
Àadö
);

1630 i‡(0 !
f‹m©_code
)

1631 
	`¥ötf
("%† [U√x≥˘ed f‹m© code: %d]\n", 
Àadö
,

1632 
f‹m©_code
);

1633 
	`dSåHex
((c⁄° *)&
u˝
[8], 8, -1);

1634 
bump
 = 24;

1636 
TPROTO_SPI
:

1637 
	`¥ötf
("%s Parallel SCSI initiator SCSIáddress: 0x%x\n",

1638 
Àadö
, ((
u˝
[2] << 8) | ucp[3]));

1639 i‡(0 !
f‹m©_code
)

1640 
	`¥ötf
("%† [U√x≥˘ed f‹m© code: %d]\n", 
Àadö
,

1641 
f‹m©_code
);

1642 
	`¥ötf
("%sÑelativeÖortÇumber (of correspondingÅarget): "

1643 "0x%x\n", 
Àadö
, ((
u˝
[6] << 8) | ucp[7]));

1644 
bump
 = 24;

1646 
TPROTO_SSA
:

1647 
	`¥ötf
("%† SSA (å™•‹àidÇŸ deföed):\n", 
Àadö
);

1648 
	`¥ötf
("%† f‹m© code: %d\n", 
Àadö
, 
f‹m©_code
);

1649 
	`dSåHex
((c⁄° *)
u˝
, ((
Àn
 > 24) ? 24 :Üen), -1);

1650 
bump
 = 24;

1652 
TPROTO_1394
:

1653 
	`¥ötf
("%† IEEE 1394 EUI-64Çame:\n", 
Àadö
);

1654 i‡(0 !
f‹m©_code
)

1655 
	`¥ötf
("%† [U√x≥˘ed f‹m© code: %d]\n", 
Àadö
,

1656 
f‹m©_code
);

1657 
	`dSåHex
((c⁄° *)&
u˝
[8], 8, -1);

1658 
bump
 = 24;

1660 
TPROTO_SRP
:

1661 
	`¥ötf
("%† RDMA inôüt‹Ö‹àidítifõr:\n", 
Àadö
);

1662 i‡(0 !
f‹m©_code
)

1663 
	`¥ötf
("%† [U√x≥˘ed f‹m© code: %d]\n", 
Àadö
,

1664 
f‹m©_code
);

1665 
	`dSåHex
((c⁄° *)&
u˝
[8], 16, -1);

1666 
bump
 = 24;

1668 
TPROTO_ISCSI
:

1669 
	`¥ötf
("%† iSCSI ", 
Àadö
);

1670 
num
 = ((
u˝
[2] << 8) | ucp[3]);

1671 i‡(0 =
f‹m©_code
)

1672 
	`¥ötf
("«me: %.*s\n", 
num
, &
u˝
[4]);

1673 i‡(1 =
f‹m©_code
)

1674 
	`¥ötf
("w‹ld widêuniquêp‹àid: %.*s\n", 
num
, &
u˝
[4]);

1676 
	`¥ötf
(" [U√x≥˘ed f‹m© code: %d]\n", 
f‹m©_code
);

1677 
	`dSåHex
((c⁄° *)
u˝
, 
num
 + 4, -1);

1679 
bump
 = (((
num
 + 4) < 24) ? 24 :Çum + 4);

1681 
TPROTO_SAS
:

1682 
uŒ
 = 0;

1683 
j
 = 0; j < 8; ++j) {

1684 i‡(
j
 > 0)

1685 
uŒ
 <<= 8;

1686 
uŒ
 |
u˝
[4 + 
j
];

1688 
	`¥ötf
("%† SASáddªss: 0x%" 
PRIx64
 "\n", 
Àadö
, 
uŒ
);

1689 i‡(0 !
f‹m©_code
)

1690 
	`¥ötf
("%† [U√x≥˘ed f‹m© code: %d]\n", 
Àadö
,

1691 
f‹m©_code
);

1692 
bump
 = 24;

1694 
TPROTO_ADT
:

1695 
	`¥ötf
("%† ADT:\n", 
Àadö
);

1696 
	`¥ötf
("%† f‹m© code: %d\n", 
Àadö
, 
f‹m©_code
);

1697 
	`dSåHex
((c⁄° *)
u˝
, ((
Àn
 > 24) ? 24 :Üen), -1);

1698 
bump
 = 24;

1700 
TPROTO_ATA
:

1701 
	`¥ötf
("%† ATAPI:\n", 
Àadö
);

1702 
	`¥ötf
("%† f‹m© code: %d\n", 
Àadö
, 
f‹m©_code
);

1703 
	`dSåHex
((c⁄° *)
u˝
, ((
Àn
 > 24) ? 24 :Üen), -1);

1704 
bump
 = 24;

1706 
TPROTO_UAS
:

1707 
	`¥ötf
("%† UAS:\n", 
Àadö
);

1708 
	`¥ötf
("%† f‹m© code: %d\n", 
Àadö
, 
f‹m©_code
);

1709 
	`dSåHex
((c⁄° *)
u˝
, ((
Àn
 > 24) ? 24 :Üen), -1);

1710 
bump
 = 24;

1712 
TPROTO_SOP
:

1713 
	`¥ötf
("%† SOP ", 
Àadö
);

1714 
num
 = ((
u˝
[2] << 8) | ucp[3]);

1715 i‡(0 =
f‹m©_code
)

1716 
	`¥ötf
("Routög ID: 0x%x\n", 
num
);

1718 
	`¥ötf
(" [U√x≥˘ed f‹m© code: %d]\n", 
f‹m©_code
);

1719 
	`dSåHex
((c⁄° *)
u˝
, 24, -1);

1721 
bump
 = 24;

1723 
TPROTO_NONE
:

1724 
	`Ârötf
(
°dîr
, "%† Nÿ•ecifõdÖrŸocﬁ\n", 
Àadö
);

1726 
bump
 = 24;

1729 
	`Ârötf
(
°dîr
, "%s unknownÖrotocol id=0x%x "

1730 "f‹m©_code=%d\n", 
Àadö
, 
¥Ÿo_id
, 
f‹m©_code
);

1731 
	`dSåHex
((c⁄° *)
u˝
, ((
Àn
 > 24) ? 24 :Üen), 0);

1732 
bump
 = 24;

1736 
	}
}

1740 
	$decode_x_öq_vpd
(* 
buff
, 
Àn
, 
do_hex
)

1742 i‡(
Àn
 < 7) {

1743 
	`Ârötf
(
°dîr
, "Extended INQUIRY data VPDÖageÜengthÅoo "

1744 "sh‹t=%d\n", 
Àn
);

1747 i‡(
do_hex
) {

1748 
	`dSåHex
((c⁄° *)
buff
, 
Àn
, 0);

1751 
	`¥ötf
(" SPT=%d GRD_CHK=%d APP_CHK=%d REF_CHK=%d\n",

1752 ((
buff
[4] >> 3) & 0x7), !!(buff[4] & 0x4), !!(buff[4] & 0x2),

1753 !!(
buff
[4] & 0x1));

1754 
	`¥ötf
(" UASK_SUP=%d GROUP_SUP=%d PRIOR_SUP=%d HEADSUP=%d ORDSUP=%d "

1755 "SIMPSUP=%d\n", !!(
buff
[5] & 0x20), !!(buff[5] & 0x10),

1756 !!(
buff
[5] & 0x8), !!(buff[5] & 0x4), !!(buff[5] & 0x2),

1757 !!(
buff
[5] & 0x1));

1758 
	`¥ötf
(" WU_SUP=%d CRD_SUP=%d NV_SUP=%d V_SUP=%d\n",

1759 !!(
buff
[6] & 0x8), !!(buff[6] & 0x4), !!(buff[6] & 0x2),

1760 !!(
buff
[6] & 0x1));

1761 
	`¥ötf
(" P_I_I_SUP=%d LUICLR=%d CBCS=%d R_SUP=%d\n",

1762 !!(
buff
[7] & 0x10), !!(buff[7] & 0x1), !!(buff[8] & 0x1),

1763 !!(
buff
[8] & 0x10));

1764 
	`¥ötf
(" Mu…òI_TÇexu†mi¸ocodêdow∆ﬂd=%d\n", 
buff
[9] & 0xf);

1765 
	`¥ötf
(" Extended self-test completion minutes=%d\n",

1766 (
buff
[10] << 8) + buff[11]);

1767 
	`¥ötf
(" POA_SUP=%d HRA_SUP=%d VSA_SUP=%d\n",

1768 !!(
buff
[12] & 0x80), !!(buff[12] & 0x40), !!(buff[12] & 0x20));

1769 
	`¥ötf
(" Maximum supported sense dataÜength=%d\n",

1770 
buff
[13]);

1771 
	}
}

1775 
	$decode_so·w_öf_id
(* 
buff
, 
Àn
, 
do_hex
)

1777 i‡(
do_hex
) {

1778 
	`dSåHex
((c⁄° *)
buff
, 
Àn
, 0);

1781 
Àn
 -= 4;

1782 
buff
 += 4;

1783  ; 
Àn
 > 5;Üí -6, 
buff
 += 6)

1784 
	`¥ötf
(" IEEE Company_id: 0x%06x, vendor specificÉxtension "

1785 "id: 0x%06x\n", (
buff
[0] << 16) | (buff[1] << 8) | buff[2],

1786 (
buff
[3] << 16) | (buff[4] << 8) | buff[5]);

1787 
	}
}

1791 
	$decode_©a_öfo_vpd
(* 
buff
, 
Àn
, 
do_hex
)

1793 
b
[80];

1794 
is_be
, 
num
;

1796 i‡(
Àn
 < 36) {

1797 
	`Ârötf
(
°dîr
, "ATA information VPDÖageÜengthÅoo "

1798 "sh‹t=%d\n", 
Àn
);

1801 i‡(
do_hex
 && (2 != do_hex)) {

1802 
	`dSåHex
((c⁄° *)
buff
, 
Àn
, 0);

1805 
	`mem˝y
(
b
, 
buff
 + 8, 8);

1806 
b
[8] = '\0';

1807 
	`¥ötf
(" SAT Víd‹ idítifiˇti⁄: %s\n", 
b
);

1808 
	`mem˝y
(
b
, 
buff
 + 16, 16);

1809 
b
[16] = '\0';

1810 
	`¥ötf
(" SAT Produ˘ idítifiˇti⁄: %s\n", 
b
);

1811 
	`mem˝y
(
b
, 
buff
 + 32, 4);

1812 
b
[4] = '\0';

1813 
	`¥ötf
(" SAT Produ˘Ñevisi⁄Üevñ: %s\n", 
b
);

1814 i‡(
Àn
 < 56)

1816 
	`¥ötf
(" Signature (DeviceÅo host FIS):\n");

1817 
	`dSåHex
((c⁄° *)
buff
 + 36, 20, 1);

1818 i‡(
Àn
 < 60)

1820 
is_be
 = 
	`sg_is_big_ídün
();

1821 i‡((0xe¯=
buff
[56]) || (0xa1 == buff[56])) {

1822 
	`¥ötf
(" ATA command IDENTIFY %sDEVICEÑesponse summary:\n",

1823 ((0xa1 =
buff
[56]) ? "PACKET " : ""));

1824 
num
 = 
	`sg_©a_gë_ch¨s
((c⁄° *)(
buff
 + 60), 27, 20,

1825 
is_be
, 
b
);

1826 
b
[
num
] = '\0';

1827 
	`¥ötf
(" modñ: %s\n", 
b
);

1828 
num
 = 
	`sg_©a_gë_ch¨s
((c⁄° *)(
buff
 + 60), 10, 10,

1829 
is_be
, 
b
);

1830 
b
[
num
] = '\0';

1831 
	`¥ötf
(" sîü»numbî: %s\n", 
b
);

1832 
num
 = 
	`sg_©a_gë_ch¨s
((c⁄° *)(
buff
 + 60), 23, 4,

1833 
is_be
, 
b
);

1834 
b
[
num
] = '\0';

1835 
	`¥ötf
(" fúmw¨êªvisi⁄: %s\n", 
b
);

1836 
	`¥ötf
("Ñesponse in hex:\n");

1838 
	`¥ötf
(" ATA command 0x%x got followingÑesponse:\n",

1839 ()
buff
[56]);

1840 i‡(
Àn
 < 572)

1842 i‡(2 =
do_hex
)

1843 
	`dSåHex
((c⁄° *)(
buff
 + 60), 512, 0);

1845 
	`dW‹dHex
((c⁄° *)(
buff
 + 60), 256, 0,

1846 
	`sg_is_big_ídün
());

1847 
	}
}

1851 
	$decode_powî_c⁄dôi⁄
(* 
buff
, 
Àn
, 
do_hex
)

1853 i‡(
Àn
 < 18) {

1854 
	`Ârötf
(
°dîr
, "Power condition VPDÖageÜengthÅoo short=%d\n",

1855 
Àn
);

1858 i‡(
do_hex
) {

1859 
	`dSåHex
((c⁄° *)
buff
, 
Àn
, 0);

1862 
	`¥ötf
(" Standby_y=%d Standby_z=%d Idle_c=%d Idle_b=%d Idle_a=%d\n",

1863 !!(
buff
[4] & 0x2), !!(buff[4] & 0x1),

1864 !!(
buff
[5] & 0x4), !!(buff[5] & 0x2), !!(buff[5] & 0x1));

1865 
	`¥ötf
(" Stopped conditionÑecoveryÅime (ms) %d\n",

1866 (
buff
[6] << 8) + buff[7]);

1867 
	`¥ötf
(" Standby_z conditionÑecoveryÅime (ms) %d\n",

1868 (
buff
[8] << 8) + buff[9]);

1869 
	`¥ötf
(" Standby_y conditionÑecoveryÅime (ms) %d\n",

1870 (
buff
[10] << 8) + buff[11]);

1871 
	`¥ötf
(" Idle_a conditionÑecoveryÅime (ms) %d\n",

1872 (
buff
[12] << 8) + buff[13]);

1873 
	`¥ötf
(" Idle_b conditionÑecoveryÅime (ms) %d\n",

1874 (
buff
[14] << 8) + buff[15]);

1875 
	`¥ötf
(" Idle_c conditionÑecoveryÅime (ms) %d\n",

1876 (
buff
[16] << 8) + buff[17]);

1877 
	}
}

1880 
	$decode_b0_vpd
(* 
buff
, 
Àn
, 
do_hex
, 
pdt
)

1882 
u
;

1884 i‡(
do_hex
) {

1885 
	`dSåHex
((c⁄° *)
buff
, 
Àn
, 0);

1888 
pdt
) {

1889 
PDT_DISK
: 
PDT_WO
: 
PDT_OPTICAL
:

1890 i‡(
Àn
 < 16) {

1891 
	`Ârötf
(
°dîr
, "BlockÜimits VPDÖageÜengthÅoo "

1892 "sh‹t=%d\n", 
Àn
);

1895 
	`¥ötf
(" Maximum compareánd writeÜength: %u blocks\n",

1896 
buff
[5]);

1897 
u
 = (
buff
[6] << 8) | buff[7];

1898 
	`¥ötf
(" O±imÆÅøns„∏Àngth gønuœrôy: %u blocks\n", 
u
);

1899 
u
 = (
buff
[8] << 24) | (buff[9] << 16) | (buff[10] << 8) |

1900 
buff
[11];

1901 
	`¥ötf
(" MaximumÅøns„∏Àngth: %u blocks\n", 
u
);

1902 
u
 = (
buff
[12] << 24) | (buff[13] << 16) | (buff[14] << 8) |

1903 
buff
[15];

1904 
	`¥ötf
(" O±imÆÅøns„∏Àngth: %u blocks\n", 
u
);

1905 i‡(
Àn
 > 19) {

1906 
u
 = (
buff
[16] << 24) | (buff[17] << 16) | (buff[18] << 8) |

1907 
buff
[19];

1908 
	`¥ötf
(" MaximumÖrefetch, xdread, xdwriteÅransferÜength: "

1909 "%u blocks\n", 
u
);

1911 i‡(
Àn
 > 27) {

1912 
u
 = (()
buff
[20] << 24) | (buff[21] << 16) |

1913 (
buff
[22] << 8) | buff[23];

1914 
	`¥ötf
(" Maximum unm≠ LBA cou¡: %u\n", 
u
);

1915 
u
 = (()
buff
[24] << 24) | (buff[25] << 16) |

1916 (
buff
[26] << 8) | buff[27];

1917 
	`¥ötf
(" Maximum unm≠ block des¸ùt‹ cou¡: %u\n", 
u
);

1919 i‡(
Àn
 > 35) {

1920 
u
 = (()
buff
[28] << 24) | (buff[29] << 16) |

1921 (
buff
[30] << 8) | buff[31];

1922 
	`¥ötf
(" O±imÆ unm≠ gønuœrôy: %u\n", 
u
);

1923 
	`¥ötf
(" Unmap granularityálignment valid: %u\n",

1924 !!(
buff
[32] & 0x80));

1925 
u
 = (()(
buff
[32] & 0x7f) << 24) |

1926 (
buff
[33] << 16) | (buff[34] << 8) | buff[35];

1927 
	`¥ötf
(" Unm≠ gønuœrôyálignmít: %u\n", 
u
);

1930 
PDT_TAPE
: 
PDT_MCHANGER
:

1931 
	`¥ötf
(" WORM=%d\n", !!(
buff
[4] & 0x1));

1933 
PDT_OSD
:

1935 
	`¥ötf
(" U«bÀÅÿdecodêpdt=0x%x, i¿hex:\n", 
pdt
);

1936 
	`dSåHex
((c⁄° *)
buff
, 
Àn
, 0);

1939 
	}
}

1944 
	$decode_b1_vpd
(* 
buff
, 
Àn
, 
do_hex
, 
pdt
)

1946 
u
;

1948 i‡(
do_hex
) {

1949 
	`dSåHex
((c⁄° *)
buff
, 
Àn
, 0);

1952 
pdt
) {

1953 
PDT_DISK
: 
PDT_WO
: 
PDT_OPTICAL
:

1954 i‡(
Àn
 < 64) {

1955 
	`Ârötf
(
°dîr
, "Block device characteristics VPDÖageÜength "

1956 "toÿsh‹t=%d\n", 
Àn
);

1959 
u
 = (
buff
[4] << 8) | buff[5];

1960 i‡(0 =
u
)

1961 
	`¥ötf
(" MediumÑotationÑate isÇotÑeported\n");

1962 i‡(1 =
u
)

1963 
	`¥ötf
(" Non-rotating medium (e.g. solid state)\n");

1964 i‡((
u
 < 0x401) || (0xffff == u))

1965 
	`¥ötf
(" Re£rved [0x%x]\n", 
u
);

1967 
	`¥ötf
(" NomöÆÑŸ©i⁄Ñ©e: %dÑpm\n", 
u
);

1968 
	`¥ötf
(" Produ˘Åy≥=%d\n", 
buff
[6]);

1969 
	`¥ötf
(" WABEREQ=%d\n", (
buff
[7] >> 6) & 0x3);

1970 
	`¥ötf
(" WACEREQ=%d\n", (
buff
[7] >> 4) & 0x3);

1971 
u
 = 
buff
[7] & 0xf;

1972 
	`¥ötf
(" Nominal form factor ");

1973 
u
) {

1975 
	`¥ötf
("isÇotÑeported\n");

1978 
	`¥ötf
("5.25 inches\n");

1981 
	`¥ötf
("3.5 inches\n");

1984 
	`¥ötf
("2.5 inches\n");

1987 
	`¥ötf
("1.8 inches\n");

1990 
	`¥ötf
("lessÅhen 1.8 inches\n");

1993 
	`¥ötf
("ª£rved [%u]\n", 
u
);

1996 
	`¥ötf
(" VBULS=%d\n", 
buff
[8] & 0x1);

1998 
PDT_TAPE
: 
PDT_MCHANGER
: 
PDT_ADC
:

1999 
	`¥ötf
(" Manufacturer-assigned serialÇumber: %.*s\n",

2000 
Àn
 - 4, 
buff
 + 4);

2003 
	`¥ötf
(" U«bÀÅÿdecodêpdt=0x%x, i¿hex:\n", 
pdt
);

2004 
	`dSåHex
((c⁄° *)
buff
, 
Àn
, 0);

2007 
	}
}

2011 
	$decode_b3_vpd
(* 
buff
, 
Àn
, 
do_hex
, 
pdt
)

2013 
s
, 
m
;

2015 i‡(
do_hex
) {

2016 
	`dSåHex
((c⁄° *)
buff
, 
Àn
, 0);

2019 
pdt
) {

2020 
PDT_DISK
: 
PDT_WO
: 
PDT_OPTICAL
:

2021 i‡(
Àn
 < 0xc0) {

2022 
	`Ârötf
(
°dîr
, "Referrals VPDÖageÜengthÅoo short=%d\n",

2023 
Àn
);

2026 
s
 = (
buff
[8] << 24) | (buff[9] << 16) | (buff[10] << 8) | buff[11];

2027 
m
 = (
buff
[12] << 24) | (buff[13] << 16) | (buff[14] << 8) |

2028 
buff
[15];

2029 i‡(0 =
s
)

2030 
	`¥ötf
(" Single user data segment\n");

2031 i‡(0 =
m
)

2032 
	`¥ötf
(" Segment size specified by user data segment "

2035 
	`¥ötf
(" Segmíàsize: %u, segmíàmu…ùlõr: %u\n", 
s
, 
m
);

2038 
	`¥ötf
(" U«bÀÅÿdecodêpdt=0x%x, i¿hex:\n", 
pdt
);

2039 
	`dSåHex
((c⁄° *)
buff
, 
Àn
, 0);

2042 
	}
}

2044 c⁄° * 
	glun_°©e_¨r
[] =

2051 c⁄° * 
	gù_mgmt_¨r
[] =

2059 c⁄° * 
	g•_¨r
[] =

2065 c⁄° * 
	glun_›_¨r
[] =

2071 c⁄° * 
	gÁûovî_mode_¨r
[] =

2092 
	$decode_u¥_vpd_c0_emc
(* 
buff
, 
Àn
)

2094 
k
, 
ù_mgmt
, 
vµ80
, 
lun_z
;

2096 i‡(
Àn
 < 3) {

2097 
	`Ârötf
(
°dîr
, "EMC upr VPDÖage [0xc0]:ÜengthÅoo short=%d\n",

2098 
Àn
);

2101 i‡(
buff
[9] != 0x00) {

2102 
	`Ârötf
(
°dîr
, "UnsupportedÖageÑevision %d, decodingÇot "

2103 "possibÀ.\n" , 
buff
[9]);

2106 
	`¥ötf
(" LUN WWN: ");

2107 
k
 = 0; k < 16; ++k)

2108 
	`¥ötf
("%02x", 
buff
[10 + 
k
]);

2109 
	`¥ötf
("\n");

2110 
	`¥ötf
(" Array Serial Number: ");

2111 
	`dSåRaw
((c⁄° *)&
buff
[50], buff[49]);

2112 
	`¥ötf
("\n");

2114 
	`¥ötf
(" LUN State: ");

2115 i‡(
buff
[4] > 0x02)

2116 
	`¥ötf
("Unknow¿(%x)\n", 
buff
[4]);

2118 
	`¥ötf
("%s\n", 
lun_°©e_¨r
[
buff
[4]]);

2120 
	`¥ötf
(" ThisÖath connectsÅo: ");

2121 i‡(
buff
[8] > 0x01)

2122 
	`¥ötf
("Unknow¿SP (%x)", 
buff
[8]);

2124 
	`¥ötf
("%s", 
•_¨r
[
buff
[8]]);

2125 
	`¥ötf
(", P‹àNumbî: %u\n", 
buff
[7]);

2127 
	`¥ötf
(" Default Owner: ");

2128 i‡(
buff
[5] > 0x01)

2129 
	`¥ötf
("Unknow¿(%x)\n", 
buff
[5]);

2131 
	`¥ötf
("%s\n", 
•_¨r
[
buff
[5]]);

2133 
	`¥ötf
(" NO_ATF: %s, Access Logix: %s\n",

2134 
buff
[6] & 0x80 ? "set" : "not set",

2135 
buff
[6] & 0x40 ? "supported" : "not supported");

2137 
ù_mgmt
 = (
buff
[6] >> 4) & 0x3;

2139 
	`¥ötf
(" SP IP M™agemíàMode: %s\n", 
ù_mgmt_¨r
[
ù_mgmt
]);

2140 i‡(
ù_mgmt
 == 2)

2141 
	`¥ötf
(" SP IPv4áddress: %u.%u.%u.%u\n",

2142 
buff
[44], buff[45], buff[46], buff[47]);

2144 
	`¥ötf
(" SP IPv6áddress: ");

2145 
k
 = 0; k < 16; ++k)

2146 
	`¥ötf
("%02x", 
buff
[32 + 
k
]);

2147 
	`¥ötf
("\n");

2150 
vµ80
 = 
buff
[30] & 0x08;

2151 
lun_z
 = 
buff
[30] & 0x04;

2153 
	`¥ötf
(" System Type: %x, Failover mode: %s\n",

2154 
buff
[27], 
Áûovî_mode_¨r
[buff[28] & 0x0f]);

2156 
	`¥ötf
(" Inquiry VPP 0x80Ñeturns: %s, Arraycommpath: %s\n",

2157 
vµ80
 ? "array serial#" : "LUN serial#",

2158 
lun_z
 ? "SetÅo 1" : "Unknown");

2160 
	`¥ötf
(" Lun operations: %s\n",

2161 
buff
[48] > 1 ? "undeföed" : 
lun_›_¨r
[buff[48]]);

2164 
	}
}

2167 
	$decode_rdac_vpd_c2
(* 
buff
, 
Àn
)

2169 i‡(
Àn
 < 3) {

2170 
	`Ârötf
(
°dîr
, "Software Version VPDÖageÜengthÅoo "

2171 "sh‹t=%d\n", 
Àn
);

2174 i‡(
buff
[4] != 's' && buff[5] != 'w' && buff[6] != 'r') {

2175 
	`Ârötf
(
°dîr
, "InvalidÖage identifier %c%c%c%c, decoding "

2176 "nŸÖossibÀ.\n" , 
buff
[4], buff[5], buff[6], buff[7]);

2179 
	`¥ötf
(" So·w¨êVîsi⁄: %d.%d.%d\n", 
buff
[8], buff[9], buff[10]);

2180 
	`¥ötf
(" So·w¨êD©e: %02x/%02x/%02x\n", 
buff
[11], buff[12], buff[13]);

2181 
	`¥ötf
(" Features:");

2182 i‡(
buff
[14] & 0x01)

2183 
	`¥ötf
(" Dual Active,");

2184 i‡(
buff
[14] & 0x02)

2185 
	`¥ötf
(" Series 3,");

2186 i‡(
buff
[14] & 0x04)

2187 
	`¥ötf
(" Multiple Sub-enclosures,");

2188 i‡(
buff
[14] & 0x08)

2189 
	`¥ötf
(" DCE/DRM,");

2190 i‡(
buff
[14] & 0x10)

2191 
	`¥ötf
(" AVT,");

2192 
	`¥ötf
("\n");

2193 
	`¥ötf
(" Max. #o‡LUNS: %d\n", 
buff
[15]);

2195 
	}
}

2198 
	$decode_rdac_vpd_c9
(* 
buff
, 
Àn
)

2200 i‡(
Àn
 < 3) {

2201 
	`Ârötf
(
°dîr
, "Volume Access Control VPDÖageÜengthÅoo "

2202 "sh‹t=%d\n", 
Àn
);

2205 i‡(
buff
[4] != 'v' && buff[5] != 'a' && buff[6] != 'c') {

2206 
	`Ârötf
(
°dîr
, "InvalidÖage identifier %c%c%c%c, decoding "

2207 "nŸÖossibÀ.\n" , 
buff
[4], buff[5], buff[6], buff[7]);

2210 i‡(
buff
[7] != '1') {

2211 
	`Ârötf
(
°dîr
, "InvalidÖage version '%c' (should be 1)\n",

2212 
buff
[7]);

2214 
	`¥ötf
(" AVT:");

2215 i‡(
buff
[8] & 0x80) {

2216 
	`¥ötf
(" Enabled");

2217 i‡(
buff
[8] & 0x40)

2218 
	`¥ötf
(" (AllowÑeads on sector 0)");

2219 
	`¥ötf
("\n");

2221 
	`¥ötf
(" Disabled\n");

2223 
	`¥ötf
(" Volume Access via: ");

2224 i‡(
buff
[8] & 0x01)

2225 
	`¥ötf
("primary controller\n");

2227 
	`¥ötf
("alternate controller\n");

2229 
	`¥ötf
(" P©hÖri‹ôy: %d ", 
buff
[9] & 0xf);

2230 
buff
[9] & 0xf) {

2232 
	`¥ötf
("(preferredÖath)\n");

2235 
	`¥ötf
("(secondaryÖath)\n");

2238 
	`¥ötf
("(unknown)\n");

2243 
	}
}

2248 
	$„tch_unô_£rül_num
(
sg_fd
, * 
obuff
, 
obuff_Àn
, 
vîbo£
)

2250 
sz
, 
Àn
, 
k
, 
ªs
;

2251 
b
[
DEF_ALLOC_LEN
];

2253 
ªs
 = 0;

2254 
sz
 = (
b
);

2255 
	`mem£t
(
b
, 0xff, 4);

2257 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
VPD_SUPPORTED_VPDS
, 
b
, 
sz
, 0, 
vîbo£
);

2258 i‡(0 =
ªs
) {

2259 i‡((
VPD_SUPPORTED_VPDS
 !
b
[1]) || (0x0 != b[2])) {

2260 i‡(
vîbo£
 > 2)

2261 
	`Ârötf
(
°dîr
, "fetch_unit_serial_num: bad supported VPDs "

2263  
SG_LIB_CAT_MALFORMED
;

2265 
Àn
 = (
b
[2] << 8) + b[3];

2266 
k
 = 0; k < 
Àn
; ++k) {

2267 i‡(
VPD_UNIT_SERIAL_NUM
 =
b
[
k
 + 4])

2270 i‡(
k
 < 
Àn
) {

2271 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
VPD_UNIT_SERIAL_NUM
,

2272 
b
, 
sz
, 0, 
vîbo£
);

2273 i‡(0 =
ªs
) {

2274 
Àn
 = (
b
[2] << 8) + b[3];

2275 
Àn
 = (À¿< (
obuff_Àn
 - 1)) ?Üen : (obuff_len - 1);

2276 i‡((
VPD_UNIT_SERIAL_NUM
 =
b
[1]Ë&& (
Àn
 > 0)) {

2277 
	`mem˝y
(
obuff
, 
b
 + 4, 
Àn
);

2278 
obuff
[
Àn
] = '\0';

2281 i‡(
vîbo£
 > 2)

2282 
	`Ârötf
(
°dîr
, "fetch_unit_serial_num: bad sn VPD "

2284  
SG_LIB_CAT_MALFORMED
;

2288 i‡(
vîbo£
 > 2)

2289 
	`Ârötf
(
°dîr
, "fetch_unit_serial_num:Ço supported VPDs "

2291  
SG_LIB_CAT_MALFORMED
;

2293 } i‡(
vîbo£
 > 2)

2294 
	`Ârötf
(
°dîr
, "fetch_unit_serial_num: fetch supported VPDs "

2296  
ªs
;

2297 
	}
}

2299 c⁄° * 
sg_™si_vîsi⁄_¨r
[];

2302 
	$gë_™si_vîsi⁄_°r
(
vîsi⁄
, * 
buff
, 
buff_Àn
)

2304 
vîsi⁄
 &= 0xf;

2305 
buff
[
buff_Àn
 - 1] = '\0';

2306 
	`°∫˝y
(
buff
, 
sg_™si_vîsi⁄_¨r
[
vîsi⁄
], 
buff_Àn
 - 1);

2307  
buff
;

2308 
	}
}

2313 
	$¥o˚ss_°d_öq
(
sg_fd
, c⁄° 
›ts_t
 * 
›t•
)

2315 
ªs
, 
Àn
, 
æí
, 
a˘_Àn
, 
pquÆ
, 
≥ri_ty≥
, 
™si_vîsi⁄
, 
k
, 
j
;

2316 c⁄° * 
˝
;

2317 
vdesc_¨r
[8];

2318 
buff
[48];

2319 
vîb
, 
ªsid
;

2321 
	`mem£t
(
vdesc_¨r
, 0, (vdesc_arr));

2322 
æí
 = (
›t•
->
ª•_Àn
 > 0Ë? o±•->ª•_À¿: 
SAFE_STD_INQ_RESP_LEN
;

2323 
vîb
 = 
›t•
->
do_vîbo£
;

2324 
ªs
 = 
	`Œ_öquúy
(
sg_fd
, 0, 0, 0, 
r•_buff
, 
æí
, &
ªsid
, 0, 
vîb
);

2325 i‡(0 =
ªs
) {

2326 
pquÆ
 = (
r•_buff
[0] & 0xe0) >> 5;

2327 i‡(! 
›t•
->
do_øw
 && ! o±•->
do_exp‹t
) {

2328 i‡(0 =
pquÆ
)

2329 
	`¥ötf
("standard INQUIRY:\n");

2330 i‡(1 =
pquÆ
)

2331 
	`¥ötf
("standard INQUIRY: [qualifier indicatesÇo connected "

2333 i‡(3 =
pquÆ
)

2334 
	`¥ötf
("standard INQUIRY: [qualifier indicatesÇot capable "

2337 
	`¥ötf
("standard INQUIRY: [reserved or vendor specific "

2338 "quÆifõ∏[%d]]\n", 
pquÆ
);

2340 
Àn
 = 
r•_buff
[4] + 5;

2344 
™si_vîsi⁄
 = 
r•_buff
[2] & 0x7;

2345 
≥ri_ty≥
 = 
r•_buff
[0] & 0x1f;

2346 i‡((
Àn
 > 
SAFE_STD_INQ_RESP_LEN
) && (len < 256) &&

2347 (0 =
›t•
->
ª•_Àn
)) {

2348 
æí
 = 
Àn
;

2349 
	`mem£t
(
r•_buff
, 0, 
æí
);

2350 i‡(
	`Œ_öquúy
(
sg_fd
, 0, 0, 0, 
r•_buff
, 
æí
, &
ªsid
, 1, 
vîb
)) {

2351 
	`Ârötf
(
°dîr
, "£c⁄d INQUIRY (%d byãËÁûed\n", 
Àn
);

2352  
SG_LIB_CAT_OTHER
;

2354 i‡(
Àn
 !(
r•_buff
[4] + 5)) {

2355 
	`Ârötf
(
°dîr
, "strange, consecutive INQUIRYs yield "

2357 
ªs
 = 
SG_LIB_CAT_MALFORMED
;

2358 
Àn
 = 
r•_buff
[4] + 5;

2361 i‡(
›t•
->
ª•_Àn
 > 0)

2362 
a˘_Àn
 = 
æí
;

2364 
a˘_Àn
 = (
æí
 < 
Àn
) ?Ñlen :Üen;

2366 i‡(
a˘_Àn
 > (
æí
 - 
ªsid
))

2367 
a˘_Àn
 = 
æí
 - 
ªsid
;

2368 i‡(
›t•
->
do_øw
)

2369 
	`dSåRaw
((c⁄° *)
r•_buff
, 
a˘_Àn
);

2370 i‡(
›t•
->
do_hex
)

2371 
	`dSåHex
((c⁄° *)
r•_buff
, 
a˘_Àn
, 0);

2372 i‡(!
›t•
->
do_exp‹t
) {

2373 
	`¥ötf
(" PQual=%d Device_type=%d RMB=%d version=0x%02x ",

2374 
pquÆ
, 
≥ri_ty≥
, !!(
r•_buff
[1] & 0x80),

2375 ()
r•_buff
[2]);

2376 
	`¥ötf
(" [%s]\n", 
	`gë_™si_vîsi⁄_°r
(
™si_vîsi⁄
, 
buff
,

2377 (
buff
)));

2378 
	`¥ötf
(" [AERC=%d] [TrmTsk=%d] NormACA=%d HiSUP=%d "

2380 !!(
r•_buff
[3] & 0x80), !!(rsp_buff[3] & 0x40),

2381 !!(
r•_buff
[3] & 0x20), !!(rsp_buff[3] & 0x10),

2382 
r•_buff
[3] & 0x0f, !!(rsp_buff[5] & 0x80));

2383 
	`¥ötf
("ACC=%d TPGS=%d 3PC=%d Protect=%d ",

2384 !!(
r•_buff
[5] & 0x40), ((rsp_buff[5] & 0x30) >> 4),

2385 !!(
r•_buff
[5] & 0x08), !!(rsp_buff[5] & 0x01));

2386 
	`¥ötf
(" [BQue=%d]\¿ EncSîv=%d ", !!(
r•_buff
[6] & 0x80),

2387 !!(
r•_buff
[6] & 0x40));

2388 i‡(
r•_buff
[6] & 0x10)

2389 
	`¥ötf
("Mu…iP=1 (VS=%dË ", !!(
r•_buff
[6] & 0x20));

2391 
	`¥ötf
("MultiP=0 ");

2392 
	`¥ötf
("[MChngr=%d] [ACKREQQ=%d] Addr16=%d\n [RelAdr=%d] ",

2393 !!(
r•_buff
[6] & 0x08), !!(rsp_buff[6] & 0x04),

2394 !!(
r•_buff
[6] & 0x01), !!(rsp_buff[7] & 0x80));

2395 
	`¥ötf
("WBus16=%d Sync=%d Linked=%d [TranDis=%d] ",

2396 !!(
r•_buff
[7] & 0x20), !!(rsp_buff[7] & 0x10),

2397 !!(
r•_buff
[7] & 0x08), !!(rsp_buff[7] & 0x04));

2398 
	`¥ötf
("CmdQue=%d\n", !!(
r•_buff
[7] & 0x02));

2399 i‡(
a˘_Àn
 > 56)

2400 
	`¥ötf
(" [SPI: Clocking=0x%x QAS=%d IUS=%d]\n",

2401 (
r•_buff
[56] & 0x0c) >> 2, !!(rsp_buff[56] & 0x2),

2402 !!(
r•_buff
[56] & 0x1));

2403 i‡(
a˘_Àn
 >
Àn
)

2404 
	`¥ötf
("Üígth=%d (0x%x)", 
Àn
,Üen);

2406 
	`¥ötf
("Üength=%d (0x%x), but only fetched %d bytes",

2407 
Àn
,Üí, 
a˘_Àn
);

2408 i‡((
™si_vîsi⁄
 >2Ë&& (
Àn
 < 
SAFE_STD_INQ_RESP_LEN
))

2409 
	`¥ötf
(" [for SCSI>=2,Üen>=36 isÉxpected]");

2410 
˝
 = 
	`sg_gë_pdt_°r
(
≥ri_ty≥
, (
buff
), buff);

2411 i‡(
	`°æí
(
˝
) > 0)

2412 
	`¥ötf
(" PîùhîÆ devi˚Åy≥: %s\n", 
˝
);

2414 i‡(
a˘_Àn
 <= 8) {

2415 i‡(! 
›t•
->
do_exp‹t
)

2416 
	`¥ötf
(" InquiryÑesponseÜength=%d,Ço vendor, "

2417 "¥odu˘ o∏ªvisi⁄ d©a\n", 
a˘_Àn
);

2419 
i
;

2421 i‡(
a˘_Àn
 < 
SAFE_STD_INQ_RESP_LEN
)

2422 
r•_buff
[
a˘_Àn
] = '\0';

2423 
	`mem˝y
(
xåa_buff
, &
r•_buff
[8], 8);

2424 
xåa_buff
[8] = '\0';

2426 
i
 = 0; i < 8; ++i)

2427 i‡(
xåa_buff
[
i
] == 0x09)

2428 
xåa_buff
[
i
] = ' ';

2429 i‡(
›t•
->
do_exp‹t
) {

2430 
Àn
 = 
	`ícode_whôe•a˚s
((*)
xåa_buff
, 8);

2431 
	`¥ötf
("SCSI_VENDOR=%s\n", 
xåa_buff
);

2432 
	`ícode_°rög
(
xåa_buff
, &
r•_buff
[8], 8);

2433 
	`¥ötf
("SCSI_VENDOR_ENC=%s\n", 
xåa_buff
);

2435 
	`¥ötf
(" Víd‹ idítifiˇti⁄: %s\n", 
xåa_buff
);

2436 i‡(
a˘_Àn
 <= 16) {

2437 i‡(! 
›t•
->
do_exp‹t
)

2438 
	`¥ötf
(" Product identification: <none>\n");

2440 
	`mem˝y
(
xåa_buff
, &
r•_buff
[16], 16);

2441 
xåa_buff
[16] = '\0';

2442 i‡(
›t•
->
do_exp‹t
) {

2443 
Àn
 = 
	`ícode_whôe•a˚s
((*)
xåa_buff
, 16);

2444 
	`¥ötf
("SCSI_MODEL=%s\n", 
xåa_buff
);

2445 
	`ícode_°rög
(
xåa_buff
, &
r•_buff
[16], 16);

2446 
	`¥ötf
("SCSI_MODEL_ENC=%s\n", 
xåa_buff
);

2448 
	`¥ötf
(" Produ˘ idítifiˇti⁄: %s\n", 
xåa_buff
);

2450 i‡(
a˘_Àn
 <= 32) {

2451 i‡(!
›t•
->
do_exp‹t
)

2452 
	`¥ötf
(" ProductÑevisionÜevel: <none>\n");

2454 
	`mem˝y
(
xåa_buff
, &
r•_buff
[32], 4);

2455 
xåa_buff
[4] = '\0';

2456 i‡(
›t•
->
do_exp‹t
) {

2457 
Àn
 = 
	`ícode_whôe•a˚s
((*)
xåa_buff
, 4);

2458 
	`¥ötf
("SCSI_REVISION=%s\n", 
xåa_buff
);

2460 
	`¥ötf
(" Produ˘Ñevisi⁄Üevñ: %s\n", 
xåa_buff
);

2462 i‡(
›t•
->
do_víd‹
 && (
a˘_Àn
 > 36Ë&& ('\0' !
r•_buff
[36]) &&

2463 (' ' !
r•_buff
[36])) {

2464 
	`mem˝y
(
xåa_buff
, &
r•_buff
[36], 
a˘_Àn
 < 56 ?áct_len - 36 :

2466 i‡(
›t•
->
do_exp‹t
) {

2467 
Àn
 = 
	`ícode_whôe•a˚s
((*)
xåa_buff
, 20);

2468 
	`¥ötf
("VENDOR_SPECIFIC=%s\n", 
xåa_buff
);

2470 
	`¥ötf
(" Víd‹ s≥cific: %s\n", 
xåa_buff
);

2472 i‡(
›t•
->
do_des¸ùt‹s
) {

2473 
j
 = 0, 
k
 = 58; ((j < 8Ë&& ((k + 1Ë< 
a˘_Àn
));

2474 
k
 +=2, ++
j
)

2475 
vdesc_¨r
[
j
] = ((
r•_buff
[
k
] << 8) +

2476 
r•_buff
[
k
 + 1]);

2478 i‡((
›t•
->
do_víd‹
 > 1Ë&& (
a˘_Àn
 > 96)) {

2479 
	`mem˝y
(
xåa_buff
, &
r•_buff
[96], 
a˘_Àn
 - 96);

2480 i‡(
›t•
->
do_exp‹t
) {

2481 
Àn
 = 
	`ícode_whôe•a˚s
((*)
xåa_buff
,

2482 
a˘_Àn
 - 96);

2483 
	`¥ötf
("VENDOR_SPECIFIC=%s\n", 
xåa_buff
);

2485 
	`¥ötf
(" Víd‹ s≥cific: %s\n", 
xåa_buff
);

2488 i‡(! (
›t•
->
do_øw
 || o±•->
do_hex
 || o±•->
do_exp‹t
)) {

2489 i‡(0 =
›t•
->
ª•_Àn
) {

2490 i‡(0 =
	`„tch_unô_£rül_num
(
sg_fd
, 
xåa_buff
,

2491 (
xåa_buff
), 
›t•
->
do_vîbo£
))

2492 
	`¥ötf
(" Unô sîü»numbî: %s\n", 
xåa_buff
);

2494 i‡(
›t•
->
do_des¸ùt‹s
) {

2495 i‡(0 =
vdesc_¨r
[0])

2496 
	`¥ötf
("\n No version descriptorsávailable\n");

2498 
	`¥ötf
("\n Version descriptors:\n");

2499 
k
 = 0; k < 8; ++k) {

2500 i‡(0 =
vdesc_¨r
[
k
])

2502 
˝
 = 
	`föd_vîsi⁄_des¸ùt‹_°r
(
vdesc_¨r
[
k
]);

2503 i‡(
˝
)

2504 
	`¥ötf
(" %s\n", 
˝
);

2506 
	`¥ötf
(" [unrecognised version descriptor "

2507 "code: 0x%x]\n", 
vdesc_¨r
[
k
]);

2512 } i‡(
ªs
 < 0) {

2513 #i‡
	`deföed
(
SG_LIB_LINUX
Ë&& deföed(
SG_SCSI_STRINGS
)

2515 
ªs
 = 
	`åy_©a_idítify
(
sg_fd
, 
›t•
->
do_hex
, o±•->
do_øw
,

2516 
›t•
->
do_vîbo£
);

2517 i‡(0 !
ªs
) {

2518 
	`Ârötf
(
°dîr
, "Both SCSI INQUIRYánd fetching ATA information "

2519 "Áûed o¿%s\n", 
›t•
->
devi˚_«me
);

2520  
SG_LIB_CAT_OTHER
;

2523 
	`Ârötf
(
°dîr
, "SCSI INQUIRY failed on %s,Ñes=%d\n",

2524 
›t•
->
devi˚_«me
, 
ªs
);

2525  
ªs
;

2528 
	`Ârötf
(
°dîr
, " inquiry: failedÑequesting %d byteÑesponse: ",

2529 
æí
);

2530 i‡(
ªsid
 && 
vîb
)

2531 
	`¢¥ötf
(
buff
, (buff), " [ªsid=%d]", 
ªsid
);

2533 
buff
[0] = '\0';

2534 i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

2535 
	`Ârötf
(
°dîr
, "nŸ suµ‹ãd (?)%s\n", 
buff
);

2536 i‡(
SG_LIB_CAT_NOT_READY
 =
ªs
)

2537 
	`Ârötf
(
°dîr
, "devi˚ÇŸÑódy (?)%s\n", 
buff
);

2538 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

2539 
	`Ârötf
(
°dîr
, "fõld i¿cdb iŒegÆ%s\n", 
buff
);

2540 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
)

2541 
	`Ârötf
(
°dîr
, "unôáâíti⁄ (?)%s\n", 
buff
);

2542 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

2543 
	`Ârötf
(
°dîr
, "ab‹ãd comm™d%s\n", 
buff
);

2545 
	`Ârötf
(
°dîr
, "ªs=%d%s\n", 
ªs
, 
buff
);

2546  
ªs
;

2549 
	}
}

2551 #ifde‡
SG_SCSI_STRINGS


2554 
	$¥o˚ss_cmddt
(
sg_fd
, c⁄° 
›ts_t
 * 
›t•
)

2556 
k
, 
j
, 
num
, 
Àn
, 
≥ri_ty≥
, 
ª£rved_cmddt
, 
suµ‹t_num
, 
ªs
;

2557 
›_«me
[128];

2559 
	`mem£t
(
r•_buff
, 0, 
DEF_ALLOC_LEN
);

2560 i‡(
›t•
->
do_cmddt
 > 1) {

2561 
	`¥ötf
("Supported commandÜist:\n");

2562 
k
 = 0; k < 256; ++k) {

2563 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 1, 0, 
k
, 
r•_buff
, 
DEF_ALLOC_LEN
,

2564 1, 
›t•
->
do_vîbo£
);

2565 i‡(0 =
ªs
) {

2566 
≥ri_ty≥
 = 
r•_buff
[0] & 0x1f;

2567 
suµ‹t_num
 = 
r•_buff
[1] & 7;

2568 
ª£rved_cmddt
 = 
r•_buff
[4];

2569 i‡((3 =
suµ‹t_num
) || (5 == support_num)) {

2570 
num
 = 
r•_buff
[5];

2571 
j
 = 0; j < 
num
; ++j)

2572 
	`¥ötf
(" %.2x", ()
r•_buff
[6 + 
j
]);

2573 i‡(5 =
suµ‹t_num
)

2574 
	`¥ötf
(" [vendor specific manner (5)]");

2575 
	`sg_gë_›code_«me
(()
k
, 
≥ri_ty≥
,

2576 (
›_«me
) - 1, op_name);

2577 
›_«me
[(op_name) - 1] = '\0';

2578 
	`¥ötf
(" %s\n", 
›_«me
);

2579 } i‡((4 =
suµ‹t_num
) || (6 == support_num))

2580 
	`¥ötf
(" opcode=0x%.2x vendor specific (%d)\n",

2581 
k
, 
suµ‹t_num
);

2582 i‡((0 =
suµ‹t_num
Ë&& (
ª£rved_cmddt
 > 0)) {

2583 
	`¥ötf
(" opcode=0x%.2x ignored cmddt bit, "

2584 "giví sènd¨d INQUIRYÑe•⁄£, st›\n", 
k
);

2589 
	`Ârötf
(
°dîr
,

2590 "CmdDàINQUIRY o¿›code=0x%.2x: faûed\n", 
k
);

2596 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 1, 0, 
›t•
->
∑ge_num
, 
r•_buff
,

2597 
DEF_ALLOC_LEN
, 1, 
›t•
->
do_vîbo£
);

2598 i‡(0 =
ªs
) {

2599 
≥ri_ty≥
 = 
r•_buff
[0] & 0x1f;

2600 i‡(! 
›t•
->
do_øw
) {

2601 
	`¥ötf
("CmdDàINQUIRY, opcode=0x%.2x: [", 
›t•
->
∑ge_num
);

2602 
	`sg_gë_›code_«me
(()
›t•
->
∑ge_num
, 
≥ri_ty≥
,

2603 (
›_«me
) - 1, op_name);

2604 
›_«me
[(op_name) - 1] = '\0';

2605 
	`¥ötf
("%s]\n", 
›_«me
);

2607 
Àn
 = 
r•_buff
[5] + 6;

2608 
ª£rved_cmddt
 = 
r•_buff
[4];

2609 i‡(
›t•
->
do_hex
)

2610 
	`dSåHex
((c⁄° *)
r•_buff
, 
Àn
, 0);

2611 i‡(
›t•
->
do_øw
)

2612 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

2614 c⁄° * 
desc_p
;

2615 
¥¡_cmd
 = 0;

2617 
suµ‹t_num
 = 
r•_buff
[1] & 7;

2618 
num
 = 
r•_buff
[5];

2619 
suµ‹t_num
) {

2621 i‡(0 =
ª£rved_cmddt
)

2622 
desc_p
 = "no dataávailable";

2624 
desc_p
 = "ignored cmddt bit, standard INQUIRY "

2627 1: 
desc_p
 = "not supported"; ;

2628 2: 
desc_p
 = "reserved (2)"; ;

2629 3: 
desc_p
 = "supportedásÖer standard";

2630 
¥¡_cmd
 = 1;

2632 4: 
desc_p
 = "vendor specific (4)"; ;

2633 5: 
desc_p
 = "supported in vendor specific way";

2634 
¥¡_cmd
 = 1;

2636 6: 
desc_p
 = "vendor specific (6)"; ;

2637 7: 
desc_p
 = "reserved (7)"; ;

2638 : 
desc_p
 = "impossible value > 7"; ;

2640 i‡(
¥¡_cmd
) {

2641 
	`¥ötf
(" Suµ‹àfõld: %†[", 
desc_p
);

2642 
j
 = 0; j < 
num
; ++j)

2643 
	`¥ötf
(" %.2x", ()
r•_buff
[6 + 
j
]);

2644 
	`¥ötf
(" ]\n");

2646 
	`¥ötf
(" Suµ‹àfõld: %s\n", 
desc_p
);

2650 i‡(! 
›t•
->
do_øw
) {

2651 
	`¥ötf
("CmdDàINQUIRY, opcode=0x%.2x: [", 
›t•
->
∑ge_num
);

2652 
	`sg_gë_›code_«me
(()
›t•
->
∑ge_num
, 0,

2653 (
›_«me
) - 1, op_name);

2654 
›_«me
[(op_name) - 1] = '\0';

2655 
	`¥ötf
("%s]\n", 
›_«me
);

2657 
	`Ârötf
(
°dîr
, "CmdDt INQUIRY on opcode=0x%.2x: failed\n",

2658 
›t•
->
∑ge_num
);

2661  
ªs
;

2662 
	}
}

2668 
	$¥o˚ss_cmddt
(
sg_fd
, c⁄° 
›ts_t
 * 
›t•
)

2670 
sg_fd
 = sg_fd;

2671 
›t•
 = optsp;

2672 
	`Ârötf
(
°dîr
, "'--cmddt'Çot implemented, use sg_opcodes\n");

2674 
	}
}

2681 
	$¥o˚ss_vpd
(
sg_fd
, c⁄° 
›ts_t
 * 
›t•
)

2683 
ªs
, 
Àn
, 
num
, 
k
, 
≥ri_ty≥
, 
vpd
;

2684 c⁄° * 
˝
;

2685 
buff
[48];

2687 
	`mem£t
(
r•_buff
, 0, 
DEF_ALLOC_LEN
);

2688 i‡(! 
›t•
->
do_øw
)

2689 
	`¥ötf
("VPD INQUIRY,Öagêcode=0x%.2x:\n", 
›t•
->
∑ge_num
);

2690 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
›t•
->
∑ge_num
, 
r•_buff
,

2691 
DEF_ALLOC_LEN
, 1, 
›t•
->
do_vîbo£
);

2692 i‡(0 =
ªs
) {

2693 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

2694 i‡(
›t•
->
∑ge_num
 !
r•_buff
[1]) {

2695 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

2697  
SG_LIB_CAT_MALFORMED
;

2699 i‡(
Àn
 > 
MX_ALLOC_LEN
) {

2700 
	`Ârötf
(
°dîr
, "ª•⁄£ÜígthÅoÿl⁄g: %d > %d\n", 
Àn
,

2701 
MX_ALLOC_LEN
);

2702  
SG_LIB_CAT_MALFORMED
;

2703 } i‡(
Àn
 > 
DEF_ALLOC_LEN
) {

2704 i‡(
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
›t•
->
∑ge_num
, 
r•_buff
, 
Àn
, 1,

2705 
›t•
->
do_vîbo£
))

2706  
SG_LIB_CAT_OTHER
;

2708 i‡(
›t•
->
do_øw
)

2709 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

2711 i‡(
›t•
->
do_hex
)

2712 
	`dSåHex
((c⁄° *)
r•_buff
, 
Àn
, 0);

2713 i‡(0 =
›t•
->
∑ge_num
) {

2714 
≥ri_ty≥
 = 
r•_buff
[0] & 0x1f;

2715 
	`¥ötf
(" [PQual=%d Peripheral deviceÅype: %s]\n",

2716 (
r•_buff
[0] & 0xe0) >> 5,

2717 
	`sg_gë_pdt_°r
(
≥ri_ty≥
, (
buff
), buff));

2718 
	`¥ötf
(" Supported VPDÖages:\n");

2719 
num
 = 
r•_buff
[3];

2720 
k
 = 0; k < 
num
; ++k) {

2721 
vpd
 = 
r•_buff
[4 + 
k
];

2722 
˝
 = 
	`gë_vpd_∑ge_°r
(
vpd
, 
≥ri_ty≥
);

2723 i‡(
˝
)

2724 
	`¥ötf
(" 0x%x\t%s\n", 
vpd
, 
˝
);

2726 
	`¥ötf
(" 0x%x\n", 
vpd
);

2729 
	`dSåHex
((c⁄° *)
r•_buff
, 
Àn
, 0);

2732 i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

2733 
	`Ârötf
(
°dîr
, " inquiry:Çot supported (?)\n");

2734 i‡(
SG_LIB_CAT_NOT_READY
 =
ªs
)

2735 
	`Ârötf
(
°dîr
, " inquiry: deviceÇotÑeady (?)\n");

2736 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

2737 
	`Ârötf
(
°dîr
, " inquiry: field in cdb illegal (pageÇot "

2739 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
)

2740 
	`Ârötf
(
°dîr
, " inquiry: unitáttention (?)\n");

2741 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

2742 
	`Ârötf
(
°dîr
, " inquiry:áborted command\n");

2744 
	`Ârötf
(
°dîr
, " inquúy: faûed,Ñes=%d\n", 
ªs
);

2746  
ªs
;

2747 
	}
}

2751 
	$decode_vpd
(
sg_fd
, c⁄° 
›ts_t
 * 
›t•
)

2753 
Àn
, 
pdt
;

2754 
ªs
 = 0;

2756 
›t•
->
∑ge_num
) {

2757 
VPD_UNIT_SERIAL_NUM
:

2758 i‡(! 
›t•
->
do_øw
 && ! o±•->
do_exp‹t
)

2759 
	`¥ötf
("VPD INQUIRY: Unit serialÇumberÖage\n");

2760 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
VPD_UNIT_SERIAL_NUM
, 
r•_buff
,

2761 
DEF_ALLOC_LEN
, 1, 
›t•
->
do_vîbo£
);

2762 i‡(0 =
ªs
) {

2763 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

2764 i‡(
VPD_UNIT_SERIAL_NUM
 !
r•_buff
[1]) {

2765 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

2767  
SG_LIB_CAT_MALFORMED
;

2769 i‡(
›t•
->
do_øw
)

2770 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

2771 i‡(
›t•
->
do_hex
)

2772 
	`dSåHex
((c⁄° *)
r•_buff
, 
Àn
, 0);

2774 
obuff
[
DEF_ALLOC_LEN
];

2776 
	`mem£t
(
obuff
, 0, (obuff));

2777 
Àn
 -= 4;

2778 i‡(
Àn
 >()(
obuff
))

2779 
Àn
 = (
obuff
) - 1;

2780 
	`mem˝y
(
obuff
, 
r•_buff
 + 4, 
Àn
);

2781 i‡(
›t•
->
do_exp‹t
) {

2782 
Àn
 = 
	`ícode_whôe•a˚s
((*)
obuff
,Üen);

2783 
	`¥ötf
("SCSI_IDENT_SERIAL=%s\n", 
obuff
);

2785 
	`¥ötf
(" Unô sîü»numbî: %s\n", 
obuff
);

2790 
VPD_DEVICE_ID
:

2791 i‡(! 
›t•
->
do_øw
 && ! o±•->
do_exp‹t
)

2792 
	`¥ötf
("VPD INQUIRY: Device IdentificationÖage\n");

2793 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
VPD_DEVICE_ID
, 
r•_buff
,

2794 
DEF_ALLOC_LEN
, 1, 
›t•
->
do_vîbo£
);

2795 i‡(0 =
ªs
) {

2796 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

2797 i‡(
VPD_DEVICE_ID
 !
r•_buff
[1]) {

2798 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

2800  
SG_LIB_CAT_MALFORMED
;

2802 i‡(
Àn
 > 
MX_ALLOC_LEN
) {

2803 
	`Ârötf
(
°dîr
, "ª•⁄£ÜígthÅoÿl⁄g: %d > %d\n", 
Àn
,

2804 
MX_ALLOC_LEN
);

2805  
SG_LIB_CAT_MALFORMED
;

2806 } i‡(
Àn
 > 
DEF_ALLOC_LEN
) {

2807 i‡(
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
VPD_DEVICE_ID
, 
r•_buff
, 
Àn
,

2808 1, 
›t•
->
do_vîbo£
))

2809  
SG_LIB_CAT_OTHER
;

2811 i‡(
›t•
->
do_øw
)

2812 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

2813 i‡(
›t•
->
do_exp‹t
) {

2814 i‡(
Àn
 < 4) {

2815 
	`Ârötf
(
°dîr
, "Device identificationÖageÜengthÅoo "

2816 "sh‹t=%d\n", 
Àn
);

2818 
	`exp‹t_dev_ids
(
r•_buff
 + 4, 
Àn
 - 4);

2821 
	`decode_id_vpd
(
r•_buff
, 
Àn
, 
›t•
->
do_hex
);

2824 
VPD_SOFTW_INF_ID
:

2825 i‡(! 
›t•
->
do_øw
)

2826 
	`¥ötf
("VPD INQUIRY: Software interface identificationÖage\n");

2827 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
VPD_SOFTW_INF_ID
, 
r•_buff
,

2828 
DEF_ALLOC_LEN
, 1, 
›t•
->
do_vîbo£
);

2829 i‡(0 =
ªs
) {

2830 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

2831 i‡(
VPD_SOFTW_INF_ID
 !
r•_buff
[1]) {

2832 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

2834  
SG_LIB_CAT_MALFORMED
;

2836 i‡(
›t•
->
do_øw
)

2837 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

2839 
	`decode_so·w_öf_id
(
r•_buff
, 
Àn
, 
›t•
->
do_hex
);

2842 
VPD_MAN_NET_ADDR
:

2843 i‡(!
›t•
->
do_øw
)

2844 
	`¥ötf
("VPD INQUIRY: ManagementÇetworkáddressesÖage\n");

2845 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
VPD_MAN_NET_ADDR
, 
r•_buff
,

2846 
DEF_ALLOC_LEN
, 1, 
›t•
->
do_vîbo£
);

2847 i‡(0 =
ªs
) {

2848 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

2849 i‡(
VPD_MAN_NET_ADDR
 !
r•_buff
[1]) {

2850 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

2852  
SG_LIB_CAT_MALFORMED
;

2854 i‡(
Àn
 > 
MX_ALLOC_LEN
) {

2855 
	`Ârötf
(
°dîr
, "ª•⁄£ÜígthÅoÿl⁄g: %d > %d\n", 
Àn
,

2856 
MX_ALLOC_LEN
);

2857  
SG_LIB_CAT_MALFORMED
;

2858 } i‡(
Àn
 > 
DEF_ALLOC_LEN
) {

2859 i‡(
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
VPD_MAN_NET_ADDR
, 
r•_buff
,

2860 
Àn
, 1, 
›t•
->
do_vîbo£
))

2861  
SG_LIB_CAT_OTHER
;

2863 i‡(
›t•
->
do_øw
)

2864 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

2866 
	`decode_√t_m™_vpd
(
r•_buff
, 
Àn
, 
›t•
->
do_hex
);

2869 
VPD_MODE_PG_POLICY
:

2870 i‡(!
›t•
->
do_øw
)

2871 
	`¥ötf
("VPD INQUIRY: ModeÖageÖolicy\n");

2872 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
VPD_MODE_PG_POLICY
, 
r•_buff
,

2873 
DEF_ALLOC_LEN
, 1, 
›t•
->
do_vîbo£
);

2874 i‡(0 =
ªs
) {

2875 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

2876 i‡(
VPD_MODE_PG_POLICY
 !
r•_buff
[1]) {

2877 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

2879  
SG_LIB_CAT_MALFORMED
;

2881 i‡(
Àn
 > 
MX_ALLOC_LEN
) {

2882 
	`Ârötf
(
°dîr
, "ª•⁄£ÜígthÅoÿl⁄g: %d > %d\n", 
Àn
,

2883 
MX_ALLOC_LEN
);

2884  
SG_LIB_CAT_MALFORMED
;

2885 } i‡(
Àn
 > 
DEF_ALLOC_LEN
) {

2886 i‡(
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
VPD_MODE_PG_POLICY
, 
r•_buff
,

2887 
Àn
, 1, 
›t•
->
do_vîbo£
))

2888  
SG_LIB_CAT_OTHER
;

2890 i‡(
›t•
->
do_øw
)

2891 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

2893 
	`decode_mode_pﬁicy_vpd
(
r•_buff
, 
Àn
, 
›t•
->
do_hex
);

2896 
VPD_EXT_INQ
:

2897 i‡(!
›t•
->
do_øw
)

2898 
	`¥ötf
("VPD INQUIRY:Éxtended INQUIRY dataÖage\n");

2899 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
VPD_EXT_INQ
, 
r•_buff
,

2900 
DEF_ALLOC_LEN
, 1, 
›t•
->
do_vîbo£
);

2901 i‡(0 =
ªs
) {

2902 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

2903 i‡(
VPD_EXT_INQ
 !
r•_buff
[1]) {

2904 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

2906  
SG_LIB_CAT_MALFORMED
;

2908 i‡(
Àn
 > 
MX_ALLOC_LEN
) {

2909 
	`Ârötf
(
°dîr
, "ª•⁄£ÜígthÅoÿl⁄g: %d > %d\n", 
Àn
,

2910 
MX_ALLOC_LEN
);

2911  
SG_LIB_CAT_MALFORMED
;

2912 } i‡(
Àn
 > 
DEF_ALLOC_LEN
) {

2913 i‡(
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
VPD_EXT_INQ
, 
r•_buff
, 
Àn
,

2914 1, 
›t•
->
do_vîbo£
))

2915  
SG_LIB_CAT_OTHER
;

2917 i‡(
›t•
->
do_øw
)

2918 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

2920 
	`decode_x_öq_vpd
(
r•_buff
, 
Àn
, 
›t•
->
do_hex
);

2923 
VPD_ATA_INFO
:

2924 i‡(!
›t•
->
do_øw
)

2925 
	`¥ötf
("VPD INQUIRY: ATA informationÖage\n");

2926 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
VPD_ATA_INFO
, 
r•_buff
,

2927 
VPD_ATA_INFO_LEN
, 1, 
›t•
->
do_vîbo£
);

2928 i‡(0 =
ªs
) {

2929 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

2930 i‡(
VPD_ATA_INFO
 !
r•_buff
[1]) {

2931 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

2933  
SG_LIB_CAT_MALFORMED
;

2935 i‡(
Àn
 > 
MX_ALLOC_LEN
) {

2936 
	`Ârötf
(
°dîr
, "ª•⁄£ÜígthÅoÿl⁄g: %d > %d\n", 
Àn
,

2937 
MX_ALLOC_LEN
);

2938  
SG_LIB_CAT_MALFORMED
;

2939 } i‡(
Àn
 > 
VPD_ATA_INFO_LEN
) {

2940 i‡(
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
VPD_ATA_INFO
, 
r•_buff
, 
Àn
,

2941 1, 
›t•
->
do_vîbo£
))

2942  
SG_LIB_CAT_OTHER
;

2945 i‡((2 =
›t•
->
do_øw
Ë|| (3 =›t•->
do_hex
))

2946 
	`dW‹dHex
((c⁄° *)(
r•_buff
 + 60),

2947 256, -2, 
	`sg_is_big_ídün
());

2948 i‡(
›t•
->
do_øw
)

2949 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

2951 
	`decode_©a_öfo_vpd
(
r•_buff
, 
Àn
, 
›t•
->
do_hex
);

2954 
VPD_POWER_CONDITION
:

2955 i‡(!
›t•
->
do_øw
)

2956 
	`¥ötf
("VPD INQUIRY: Power conditionÖage\n");

2957 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
VPD_POWER_CONDITION
, 
r•_buff
,

2958 
DEF_ALLOC_LEN
, 1, 
›t•
->
do_vîbo£
);

2959 i‡(0 =
ªs
) {

2960 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

2961 i‡(
VPD_POWER_CONDITION
 !
r•_buff
[1]) {

2962 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

2964  
SG_LIB_CAT_MALFORMED
;

2966 i‡(
Àn
 > 
MX_ALLOC_LEN
) {

2967 
	`Ârötf
(
°dîr
, "ª•⁄£ÜígthÅoÿl⁄g: %d > %d\n", 
Àn
,

2968 
MX_ALLOC_LEN
);

2969  
SG_LIB_CAT_MALFORMED
;

2970 } i‡(
Àn
 > 
DEF_ALLOC_LEN
) {

2971 i‡(
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
VPD_POWER_CONDITION
, 
r•_buff
,

2972 
Àn
, 1, 
›t•
->
do_vîbo£
))

2973  
SG_LIB_CAT_OTHER
;

2975 i‡(
›t•
->
do_øw
)

2976 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

2978 
	`decode_powî_c⁄dôi⁄
(
r•_buff
, 
Àn
, 
›t•
->
do_hex
);

2982 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 0xb0, 
r•_buff
,

2983 
DEF_ALLOC_LEN
, 1, 
›t•
->
do_vîbo£
);

2984 i‡(0 =
ªs
) {

2985 
pdt
 = 
r•_buff
[0] & 0x1f;

2986 i‡(! 
›t•
->
do_øw
) {

2987 
pdt
) {

2988 
PDT_DISK
: 
PDT_WO
: 
PDT_OPTICAL
:

2989 
	`¥ötf
("VPD INQUIRY: BlockÜimitsÖage (SBC)\n");

2991 
PDT_TAPE
: 
PDT_MCHANGER
:

2992 
	`¥ötf
("VPD INQUIRY: Sequentialáccess device "

2995 
PDT_OSD
:

2996 
	`¥ötf
("VPD INQUIRY: OSD information (OSD)\n");

2999 
	`¥ötf
("VPD INQUIRY:Öage=0x%x,Ödt=0x%x\n", 0xb0, 
pdt
);

3003 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

3004 i‡(0xb0 !
r•_buff
[1]) {

3005 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

3007  
SG_LIB_CAT_MALFORMED
;

3009 i‡(
Àn
 > 
MX_ALLOC_LEN
) {

3010 
	`Ârötf
(
°dîr
, "ª•⁄£ÜígthÅoÿl⁄g: %d > %d\n", 
Àn
,

3011 
MX_ALLOC_LEN
);

3012  
SG_LIB_CAT_MALFORMED
;

3013 } i‡(
Àn
 > 
DEF_ALLOC_LEN
) {

3014 i‡(
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 0xb0, 
r•_buff
,

3015 
Àn
, 1, 
›t•
->
do_vîbo£
))

3016  
SG_LIB_CAT_OTHER
;

3018 i‡(
›t•
->
do_øw
)

3019 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

3021 
	`decode_b0_vpd
(
r•_buff
, 
Àn
, 
›t•
->
do_hex
, 
pdt
);

3022 } i‡(! 
›t•
->
do_øw
)

3023 
	`¥ötf
("VPD INQUIRY:Öage=0xb0\n");

3026 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 0xb1, 
r•_buff
,

3027 
DEF_ALLOC_LEN
, 1, 
›t•
->
do_vîbo£
);

3028 i‡(0 =
ªs
) {

3029 
pdt
 = 
r•_buff
[0] & 0x1f;

3030 i‡(! 
›t•
->
do_øw
) {

3031 
pdt
) {

3032 
PDT_DISK
: 
PDT_WO
: 
PDT_OPTICAL
:

3033 
	`¥ötf
("VPD INQUIRY: Block device characteristcisÖage "

3036 
PDT_TAPE
: 
PDT_MCHANGER
:

3037 
	`¥ötf
("Manufacturedássigned serialÇumber VPDÖage "

3040 
PDT_OSD
:

3041 
	`¥ötf
("SecurityÅoken VPDÖage (OSD):\n");

3043 
PDT_ADC
:

3044 
	`¥ötf
("Manufacturedássigned serialÇumber VPDÖage "

3048 
	`¥ötf
("VPD INQUIRY:Öage=0x%x,Ödt=0x%x\n", 0xb1, 
pdt
);

3052 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

3053 i‡(0xb1 !
r•_buff
[1]) {

3054 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

3056  
SG_LIB_CAT_MALFORMED
;

3058 i‡(
Àn
 > 
MX_ALLOC_LEN
) {

3059 
	`Ârötf
(
°dîr
, "ª•⁄£ÜígthÅoÿl⁄g: %d > %d\n", 
Àn
,

3060 
MX_ALLOC_LEN
);

3061  
SG_LIB_CAT_MALFORMED
;

3062 } i‡(
Àn
 > 
DEF_ALLOC_LEN
) {

3063 i‡(
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 0xb1, 
r•_buff
,

3064 
Àn
, 1, 
›t•
->
do_vîbo£
))

3065  
SG_LIB_CAT_OTHER
;

3067 i‡(
›t•
->
do_øw
)

3068 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

3070 
	`decode_b1_vpd
(
r•_buff
, 
Àn
, 
›t•
->
do_hex
, 
pdt
);

3071 } i‡(! 
›t•
->
do_øw
)

3072 
	`¥ötf
("VPD INQUIRY:Öage=0xb1\n");

3075 
	`¥ötf
(" Only hex output supported. sg_vpd decodesÅhe B2hÖage.\n");

3076  
	`¥o˚ss_vpd
(
sg_fd
, 
›t•
);

3078 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 0xb3, 
r•_buff
,

3079 
DEF_ALLOC_LEN
, 1, 
›t•
->
do_vîbo£
);

3080 i‡(0 =
ªs
) {

3081 
pdt
 = 
r•_buff
[0] & 0x1f;

3082 i‡(! 
›t•
->
do_øw
) {

3083 
pdt
) {

3084 
PDT_DISK
: 
PDT_WO
: 
PDT_OPTICAL
:

3085 
	`¥ötf
("VPD INQUIRY: Referrals VPDÖage (SBC)\n");

3088 
	`¥ötf
("VPD INQUIRY:Öage=0x%x,Ödt=0x%x\n", 0xb3, 
pdt
);

3092 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

3093 i‡(0xb3 !
r•_buff
[1]) {

3094 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

3096  
SG_LIB_CAT_MALFORMED
;

3098 i‡(
Àn
 > 
MX_ALLOC_LEN
) {

3099 
	`Ârötf
(
°dîr
, "ª•⁄£ÜígthÅoÿl⁄g: %d > %d\n", 
Àn
,

3100 
MX_ALLOC_LEN
);

3101  
SG_LIB_CAT_MALFORMED
;

3102 } i‡(
Àn
 > 
DEF_ALLOC_LEN
) {

3103 i‡(
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 0xb3, 
r•_buff
,

3104 
Àn
, 1, 
›t•
->
do_vîbo£
))

3105  
SG_LIB_CAT_OTHER
;

3107 i‡(
›t•
->
do_øw
)

3108 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

3110 
	`decode_b3_vpd
(
r•_buff
, 
Àn
, 
›t•
->
do_hex
, 
pdt
);

3111 } i‡(! 
›t•
->
do_øw
)

3112 
	`¥ötf
("VPD INQUIRY:Öage=0xb3\n");

3114 
VPD_UPR_EMC
:

3115 i‡(!
›t•
->
do_øw
)

3116 
	`¥ötf
("VPD INQUIRY: Unit Path Report Page (EMC)\n");

3117 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
VPD_UPR_EMC
, 
r•_buff
,

3118 
DEF_ALLOC_LEN
, 1, 
›t•
->
do_vîbo£
);

3119 i‡(0 =
ªs
) {

3120 
Àn
 = 
r•_buff
[3] + 4;

3121 i‡(
VPD_UPR_EMC
 !
r•_buff
[1]) {

3122 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;ÖrobablyÇot "

3124  
SG_LIB_CAT_MALFORMED
;

3126 i‡(
Àn
 > 
MX_ALLOC_LEN
) {

3127 
	`Ârötf
(
°dîr
, "ª•⁄£ÜígthÅoÿl⁄g: %d > %d\n", 
Àn
,

3128 
MX_ALLOC_LEN
);

3129  
SG_LIB_CAT_MALFORMED
;

3130 } i‡(
Àn
 > 
DEF_ALLOC_LEN
) {

3131 i‡(
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
VPD_UPR_EMC
, 
r•_buff
, 
Àn
, 1,

3132 
›t•
->
do_vîbo£
))

3133  
SG_LIB_CAT_OTHER
;

3135 i‡(
›t•
->
do_øw
)

3136 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

3137 i‡(
›t•
->
do_hex
)

3138 
	`dSåHex
((c⁄° *)
r•_buff
, 
Àn
, 1);

3140 
	`decode_u¥_vpd_c0_emc
(
r•_buff
, 
Àn
);

3143 
VPD_RDAC_VERS
:

3144 i‡(!
›t•
->
do_øw
)

3145 
	`¥ötf
("VPD INQUIRY: Software Version (RDAC)\n");

3146 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
VPD_RDAC_VERS
, 
r•_buff
,

3147 
DEF_ALLOC_LEN
, 1, 
›t•
->
do_vîbo£
);

3148 i‡(0 =
ªs
) {

3149 
Àn
 = 
r•_buff
[3] + 4;

3150 i‡(
VPD_RDAC_VERS
 !
r•_buff
[1]) {

3151 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;ÖrobablyÇot "

3153  
SG_LIB_CAT_MALFORMED
;

3155 i‡(
Àn
 > 
MX_ALLOC_LEN
) {

3156 
	`Ârötf
(
°dîr
, "ª•⁄£ÜígthÅoÿl⁄g: %d > %d\n", 
Àn
,

3157 
MX_ALLOC_LEN
);

3158  
SG_LIB_CAT_MALFORMED
;

3159 } i‡(
Àn
 > 
DEF_ALLOC_LEN
) {

3160 i‡(
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
VPD_RDAC_VERS
, 
r•_buff
, 
Àn
, 1,

3161 
›t•
->
do_vîbo£
))

3162  
SG_LIB_CAT_OTHER
;

3164 i‡(
›t•
->
do_øw
)

3165 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

3166 i‡(
›t•
->
do_hex
)

3167 
	`dSåHex
((c⁄° *)
r•_buff
, 
Àn
, 1);

3169 
	`decode_rdac_vpd_c2
(
r•_buff
, 
Àn
);

3172 
VPD_RDAC_VAC
:

3173 i‡(!
›t•
->
do_øw
)

3174 
	`¥ötf
("VPD INQUIRY: Volume Access Control (RDAC)\n");

3175 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
VPD_RDAC_VAC
, 
r•_buff
,

3176 
DEF_ALLOC_LEN
, 1, 
›t•
->
do_vîbo£
);

3177 i‡(0 =
ªs
) {

3178 
Àn
 = 
r•_buff
[3] + 4;

3179 i‡(
VPD_RDAC_VAC
 !
r•_buff
[1]) {

3180 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;ÖrobablyÇot "

3182  
SG_LIB_CAT_MALFORMED
;

3184 i‡(
Àn
 > 
MX_ALLOC_LEN
) {

3185 
	`Ârötf
(
°dîr
, "ª•⁄£ÜígthÅoÿl⁄g: %d > %d\n", 
Àn
,

3186 
MX_ALLOC_LEN
);

3187  
SG_LIB_CAT_MALFORMED
;

3188 } i‡(
Àn
 > 
DEF_ALLOC_LEN
) {

3189 i‡(
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
VPD_RDAC_VAC
, 
r•_buff
, 
Àn
, 1,

3190 
›t•
->
do_vîbo£
))

3191  
SG_LIB_CAT_OTHER
;

3193 i‡(
›t•
->
do_øw
)

3194 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

3195 i‡(
›t•
->
do_hex
)

3196 
	`dSåHex
((c⁄° *)
r•_buff
, 
Àn
, 1);

3198 
	`decode_rdac_vpd_c9
(
r•_buff
, 
Àn
);

3201 
VPD_SCSI_PORTS
:

3202 i‡(!
›t•
->
do_øw
)

3203 
	`¥ötf
("VPD INQUIRY: SCSI PortsÖage\n");

3204 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
VPD_SCSI_PORTS
, 
r•_buff
,

3205 
DEF_ALLOC_LEN
, 1, 
›t•
->
do_vîbo£
);

3206 i‡(0 =
ªs
) {

3207 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

3208 i‡(
VPD_SCSI_PORTS
 !
r•_buff
[1]) {

3209 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

3211  
SG_LIB_CAT_MALFORMED
;

3213 i‡(
Àn
 > 
MX_ALLOC_LEN
) {

3214 
	`Ârötf
(
°dîr
, "ª•⁄£ÜígthÅoÿl⁄g: %d > %d\n", 
Àn
,

3215 
MX_ALLOC_LEN
);

3216  
SG_LIB_CAT_MALFORMED
;

3217 } i‡(
Àn
 > 
DEF_ALLOC_LEN
) {

3218 i‡(
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
VPD_SCSI_PORTS
, 
r•_buff
, 
Àn
,

3219 1, 
›t•
->
do_vîbo£
))

3220  
SG_LIB_CAT_OTHER
;

3222 i‡(
›t•
->
do_øw
)

3223 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

3225 
	`decode_scsi_p‹ts_vpd
(
r•_buff
, 
Àn
, 
›t•
->
do_hex
);

3229 
	`¥ötf
(" Only hex output supported. sg_vpd decodes moreÖages.\n");

3230  
	`¥o˚ss_vpd
(
sg_fd
, 
›t•
);

3232 i‡(
ªs
) {

3233 i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

3234 
	`Ârötf
(
°dîr
, " inquiry:Çot supported (?)\n");

3235 i‡(
SG_LIB_CAT_NOT_READY
 =
ªs
)

3236 
	`Ârötf
(
°dîr
, " inquiry: deviceÇotÑeady (?)\n");

3237 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

3238 
	`Ârötf
(
°dîr
, " inquiry: field in cdb illegal (pageÇot "

3240 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
)

3241 
	`Ârötf
(
°dîr
, " inquiry: unitáttention (?)\n");

3242 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

3243 
	`Ârötf
(
°dîr
, " inquiry:áborted command\n");

3245 
	`Ârötf
(
°dîr
, " inquúy: faûed,Ñes=%d\n", 
ªs
);

3247  
ªs
;

3248 
	}
}

3252 
	$maö
(
¨gc
, * 
¨gv
[])

3254 
sg_fd
, 
ªs
, 
n
;

3255 
ªt
 = 0;

3256 c⁄° 
svpd_vÆues_«me_t
 * 
v≈
;

3257 
›ts_t
 
›ts
;

3259 
	`mem£t
(&
›ts
, 0, (opts));

3260 
›ts
.
∑ge_num
 = -1;

3261 
ªs
 = 
	`¥o˚ss_˛
(&
›ts
, 
¨gc
, 
¨gv
);

3262 i‡(
ªs
)

3263  
SG_LIB_SYNTAX_ERROR
;

3264 i‡(
›ts
.
do_hñp
) {

3265 
	`ußge_f‹
(&
›ts
);

3266 i‡(
›ts
.
do_hñp
 > 1) {

3267 
	`Ârötf
(
°dîr
, "\n>>> Available VPDÖageábbreviations:\n");

3268 
	`íumî©e_vpds
();

3272 i‡(
›ts
.
do_vîsi⁄
) {

3273 
	`Ârötf
(
°dîr
, "Vîsi⁄ såög: %s\n", 
vîsi⁄_°r
);

3276 i‡(
›ts
.
∑ge_¨g
) {

3277 i‡(
›ts
.
∑ge_num
 >= 0) {

3278 
	`Ârötf
(
°dîr
, "Given '-p' optionándánother optionÅhat "

3280  
SG_LIB_SYNTAX_ERROR
;

3282 i‡(
	`ißÕha
(*
›ts
.
∑ge_¨g
)) {

3283 
v≈
 = 
	`sdp_föd_vpd_by_a¸⁄
(
›ts
.
∑ge_¨g
);

3284 i‡(
NULL
 =
v≈
) {

3285 #ifde‡
SG_SCSI_STRINGS


3286 i‡(
›ts
.
›t_√w
)

3287 
	`Ârötf
(
°dîr
, "abbreviation %s givenÅo '--page=' "

3288 "nŸÑecognized\n", 
›ts
.
∑ge_¨g
);

3290 
	`Ârötf
(
°dîr
, "abbreviation %s givenÅo '-p=' "

3291 "nŸÑecognized\n", 
›ts
.
∑ge_¨g
);

3293 
	`Ârötf
(
°dîr
, "abbreviation %s givenÅo '--page=' "

3294 "nŸÑecognized\n", 
›ts
.
∑ge_¨g
);

3296 
	`Ârötf
(
°dîr
, ">>> Availableábbreviations:\n");

3297 
	`íumî©e_vpds
();

3298  
SG_LIB_SYNTAX_ERROR
;

3300 i‡((1 !
›ts
.
do_hex
Ë&& (0 =›ts.
do_øw
))

3301 ++
›ts
.
do_decode
;

3302 
›ts
.
∑ge_num
 = 
v≈
->
vÆue
;

3304 #ifde‡
SG_SCSI_STRINGS


3305 i‡(
›ts
.
›t_√w
) {

3306 
n
 = 
	`sg_gë_num
(
›ts
.
∑ge_¨g
);

3307 i‡((
n
 < 0) || (n > 255)) {

3308 
	`Ârötf
(
°dîr
, "BadárgumentÅo '--page=', "

3310 
	`ußge_f‹
(&
›ts
);

3311  
SG_LIB_SYNTAX_ERROR
;

3313 i‡((1 !
›ts
.
do_hex
Ë&& (0 =›ts.
do_øw
))

3314 ++
›ts
.
do_decode
;

3316 
num
;

3317 
u
;

3319 
num
 = 
	`ssˇnf
(
›ts
.
∑ge_¨g
, "%x", &
u
);

3320 i‡((1 !
num
Ë|| (
u
 > 255)) {

3321 
	`Ârötf
(
°dîr
, "Inappropriate valueáfter '-o=' "

3323 
	`ußge_f‹
(&
›ts
);

3324  
SG_LIB_SYNTAX_ERROR
;

3326 
n
 = 
u
;

3329 
n
 = 
	`sg_gë_num
(
›ts
.
∑ge_¨g
);

3330 i‡((
n
 < 0) || (n > 255)) {

3331 
	`Ârötf
(
°dîr
, "BadárgumentÅo '--page=', "

3333 
	`ußge_f‹
(&
›ts
);

3334  
SG_LIB_SYNTAX_ERROR
;

3336 i‡((1 !
›ts
.
do_hex
Ë&& (0 =›ts.
do_øw
))

3337 ++
›ts
.
do_decode
;

3339 
›ts
.
∑ge_num
 = 
n
;

3342 i‡(
›ts
.
do_exp‹t
) {

3343 i‡(
›ts
.
∑ge_num
 != -1) {

3344 i‡(
›ts
.
∑ge_num
 !
VPD_DEVICE_ID
 &&

3345 
›ts
.
∑ge_num
 !
VPD_UNIT_SERIAL_NUM
) {

3346 
	`Ârötf
(
°dîr
, "Option '--export' only supported "

3348 
	`ußge_f‹
(&
›ts
);

3349  
SG_LIB_SYNTAX_ERROR
;

3351 ++
›ts
.
do_decode
;

3352 ++
›ts
.
do_vpd
;

3356 i‡((0 =
›ts
.
do_cmddt
Ë&& (›ts.
∑ge_num
 >0Ë&& o±s.
p_giví
)

3357 ++
›ts
.
do_vpd
;

3359 i‡(
›ts
.
do_øw
 && o±s.
do_hex
) {

3360 
	`Ârötf
(
°dîr
, "Can't do hexándÑawátÅhe sameÅime\n");

3361 
	`ußge_f‹
(&
›ts
);

3362  
SG_LIB_SYNTAX_ERROR
;

3364 i‡(
›ts
.
do_vpd
 && o±s.
do_cmddt
) {

3365 #ifde‡
SG_SCSI_STRINGS


3366 i‡(
›ts
.
›t_√w
)

3367 
	`Ârötf
(
°dîr
, "Can't use '--cmddt' with VPDÖages\n");

3369 
	`Ârötf
(
°dîr
, "Can't have both '-e'ánd '-c' (or '-cl')\n");

3371 
	`Ârötf
(
°dîr
, "Can't use '--cmddt' with VPDÖages\n");

3373 
	`ußge_f‹
(&
›ts
);

3374  
SG_LIB_SYNTAX_ERROR
;

3376 i‡(((
›ts
.
do_vpd
 || o±s.
do_cmddt
)Ë&& (›ts.
∑ge_num
 < 0))

3377 
›ts
.
∑ge_num
 = 0;

3378 i‡(
›ts
.
num_∑ges
 > 1) {

3379 
	`Ârötf
(
°dîr
, "Can only fetch oneÖage (VPD or Cmd)átáÅime\n");

3380 
	`ußge_f‹
(&
›ts
);

3381  
SG_LIB_SYNTAX_ERROR
;

3383 i‡(
›ts
.
do_des¸ùt‹s
) {

3384 i‡((
›ts
.
ª•_Àn
 > 0) && (opts.resp_len < 60)) {

3385 
	`Ârötf
(
°dîr
, "version descriptorsÇeed INQUIRYÑesponse "

3387  
SG_LIB_SYNTAX_ERROR
;

3389 i‡(
›ts
.
do_vpd
 || o±s.
do_cmddt
) {

3390 
	`Ârötf
(
°dîr
, "version descriptorsÑequire standard INQUIRY\n");

3391  
SG_LIB_SYNTAX_ERROR
;

3394 i‡(
›ts
.
num_∑ges
 && o±s.
do_©a
) {

3395 
	`Ârötf
(
°dîr
, "Can't use '-A' withánÉxplicit decode VPD "

3397  
SG_LIB_SYNTAX_ERROR
;

3400 i‡(0 =
›ts
.
devi˚_«me
) {

3401 
	`Ârötf
(
°dîr
, "No DEVICEárgument given\n");

3402 
	`ußge_f‹
(&
›ts
);

3403  
SG_LIB_SYNTAX_ERROR
;

3405 i‡(
›ts
.
do_øw
) {

3406 i‡(
	`sg_£t_bö¨y_mode
(
STDOUT_FILENO
) < 0) {

3407 
	`≥º‹
("sg_set_binary_mode");

3408  
SG_LIB_FILE_ERROR
;

3412 i‡((
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
›ts
.
devi˚_«me
, 1 ,

3413 
›ts
.
do_vîbo£
)) < 0) {

3414 
	`Ârötf
(
°dîr
, "sg_inq:Érror opening file: %s: %s\n",

3415 
›ts
.
devi˚_«me
, 
	`ß„_°ªº‹
(-
sg_fd
));

3416  
SG_LIB_FILE_ERROR
;

3418 
	`mem£t
(
r•_buff
, 0, (rsp_buff));

3420 #i‡
	`deföed
(
SG_LIB_LINUX
Ë&& deföed(
SG_SCSI_STRINGS
)

3421 i‡(
›ts
.
do_©a
) {

3422 
ªs
 = 
	`åy_©a_idítify
(
sg_fd
, 
›ts
.
do_hex
, o±s.
do_øw
,

3423 
›ts
.
do_vîbo£
);

3424 i‡(0 !
ªs
) {

3425 
	`Ârötf
(
°dîr
, "fetching ATA information failed on %s\n",

3426 
›ts
.
devi˚_«me
);

3427 
ªt
 = 
SG_LIB_CAT_OTHER
;

3429 
ªt
 = 0;

3430 
îr_out
;

3434 i‡((! 
›ts
.
do_cmddt
Ë&& (! o±s.
do_vpd
)) {

3436 
ªt
 = 
	`¥o˚ss_°d_öq
(
sg_fd
, &
›ts
);

3437 i‡(
ªt
)

3438 
îr_out
;

3439 } i‡(
›ts
.
do_cmddt
) {

3440 i‡(
›ts
.
∑ge_num
 < 0)

3441 
›ts
.
∑ge_num
 = 0;

3442 
ªt
 = 
	`¥o˚ss_cmddt
(
sg_fd
, &
›ts
);

3443 i‡(
ªt
)

3444 
îr_out
;

3445 } i‡(
›ts
.
do_vpd
) {

3446 i‡(
›ts
.
do_decode
) {

3447 
ªt
 = 
	`decode_vpd
(
sg_fd
, &
›ts
);

3448 i‡(
ªt
)

3449 
îr_out
;

3451 
ªt
 = 
	`¥o˚ss_vpd
(
sg_fd
, &
›ts
);

3452 i‡(
ªt
)

3453 
îr_out
;

3457 
îr_out
:

3458 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

3459 i‡(
ªs
 < 0) {

3460 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

3461 i‡(0 =
ªt
)

3462  
SG_LIB_FILE_ERROR
;

3464  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

3465 
	}
}

3468 #i‡
deföed
(
SG_LIB_LINUX
Ë&& deföed(
SG_SCSI_STRINGS
)

3475 #i‚de‡
ATA_IDENTIFY_DEVICE


3476 
	#ATA_IDENTIFY_DEVICE
 0xec

	)

3477 
	#ATA_IDENTIFY_PACKET_DEVICE
 0xa1

	)

3479 #i‚de‡
HDIO_DRIVE_CMD


3480 
	#HDIO_DRIVE_CMD
 0x031f

	)

3486 
	s©a_idítify_devi˚
 {

3487 
	mw‹ds000_009
[10];

3488 
	m£rül_no
[20];

3489 
	mw‹ds020_022
[3];

3490 
	mfw_ªv
[8];

3491 
	mmodñ
[40];

3492 
	mw‹ds047_079
[33];

3493 
	mmaj‹_ªv_num
;

3494 
	mmö‹_ªv_num
;

3495 
	mcomm™d_£t_1
;

3496 
	mcomm™d_£t_2
;

3497 
	mcomm™d_£t_exãnsi⁄
;

3498 
	mcfs_íabÀ_1
;

3499 
	mw‹d086
;

3500 
	mcsf_deÁu…
;

3501 
	mw‹ds088_255
[168];

3504 
	#ATA_IDENTIFY_BUFF_SZ
 (
©a_idítify_devi˚
)

	)

3505 
	#HDIO_DRIVE_CMD_OFFSET
 4

	)

3508 
	$©a_comm™d_öãrÁ˚
(
devi˚
, *
d©a
, * 
©≠i_Êag
, 
vîbo£
)

3510 
buff
[
ATA_IDENTIFY_BUFF_SZ
 + 
HDIO_DRIVE_CMD_OFFSET
];

3511 
gë_idít
[256];

3513 i‡(
©≠i_Êag
)

3514 *
©≠i_Êag
 = 0;

3515 
	`mem£t
(
buff
, 0, (buff));

3516 i‡(
	`io˘l
(
devi˚
, 
HDIO_GET_IDENTITY
, &
gë_idít
) < 0) {

3517 i‡(
ENOTTY
 =
î∫o
) {

3518 i‡(
vîbo£
 > 1)

3519 
	`Ârötf
(
°dîr
, "HDIO_GET_IDENTITY failed with ENOTTY, "

3521 
buff
[0] = 
ATA_IDENTIFY_DEVICE
;

3522 
buff
[3] = 1;

3523 i‡(
	`io˘l
(
devi˚
, 
HDIO_DRIVE_CMD
, 
buff
) < 0) {

3524 i‡(
vîbo£
)

3525 
	`Ârötf
(
°dîr
, "HDIO_DRIVE_CMD(ATA_IDENTIFY_DEVICE) "

3527 
	`ß„_°ªº‹
(
î∫o
),Érrno);

3528  
î∫o
;

3530 
	`mem˝y
(
d©a
, 
buff
 + 
HDIO_DRIVE_CMD_OFFSET
, 
ATA_IDENTIFY_BUFF_SZ
);

3533 i‡(
vîbo£
)

3534 
	`Ârötf
(
°dîr
, "HDIO_GET_IDENTITY ioctl failed:\n"

3535 "\t%†[%d]\n", 
	`ß„_°ªº‹
(
î∫o
),Érrno);

3536  
î∫o
;

3538 } i‡(
vîbo£
 > 1)

3539 
	`Ârötf
(
°dîr
, "HDIO_GET_IDENTITY succeeded\n");

3540 i‡(0x2 =((
gë_idít
[0] >> 14) &0x3)) {

3541 i‡(
vîbo£
 > 1)

3542 
	`Ârötf
(
°dîr
, "assume ATAPI device from HDIO_GET_IDENTITY "

3544 
	`mem£t
(
buff
, 0, (buff));

3545 
buff
[0] = 
ATA_IDENTIFY_PACKET_DEVICE
;

3546 
buff
[3] = 1;

3547 i‡(
	`io˘l
(
devi˚
, 
HDIO_DRIVE_CMD
, 
buff
) < 0) {

3548 i‡(
vîbo£
)

3549 
	`Ârötf
(
°dîr
, "HDIO_DRIVE_CMD(ATA_IDENTIFY_PACKET_DEVICE) "

3550 "io˘»Áûed:\n\t%†[%d]\n", 
	`ß„_°ªº‹
(
î∫o
),

3551 
î∫o
);

3552 
buff
[0] = 
ATA_IDENTIFY_DEVICE
;

3553 
buff
[3] = 1;

3554 i‡(
	`io˘l
(
devi˚
, 
HDIO_DRIVE_CMD
, 
buff
) < 0) {

3555 i‡(
vîbo£
)

3556 
	`Ârötf
(
°dîr
, "HDIO_DRIVE_CMD(ATA_IDENTIFY_DEVICE) "

3557 "io˘»Áûed:\n\t%†[%d]\n", 
	`ß„_°ªº‹
(
î∫o
),

3558 
î∫o
);

3559  
î∫o
;

3561 } i‡(
©≠i_Êag
) {

3562 *
©≠i_Êag
 = 1;

3563 i‡(
vîbo£
 > 1)

3564 
	`Ârötf
(
°dîr
, "HDIO_DRIVE_CMD(ATA_IDENTIFY_DEVICE) "

3568 
buff
[0] = 
ATA_IDENTIFY_DEVICE
;

3569 
buff
[3] = 1;

3570 i‡(
	`io˘l
(
devi˚
, 
HDIO_DRIVE_CMD
, 
buff
) < 0) {

3571 i‡(
vîbo£
)

3572 
	`Ârötf
(
°dîr
, "HDIO_DRIVE_CMD(ATA_IDENTIFY_DEVICE) "

3573 "io˘»Áûed:\n\t%†[%d]\n", 
	`ß„_°ªº‹
(
î∫o
),

3574 
î∫o
);

3575  
î∫o
;

3576 } i‡(
vîbo£
 > 1)

3577 
	`Ârötf
(
°dîr
, "HDIO_DRIVE_CMD(ATA_IDENTIFY_DEVICE) succeeded\n");

3580 
	`mem˝y
(
d©a
, 
buff
 + 
HDIO_DRIVE_CMD_OFFSET
, 
ATA_IDENTIFY_BUFF_SZ
);

3582 
	}
}

3586 
	$åy_©a_idítify
(
©a_fd
, 
do_hex
, 
do_øw
, 
vîbo£
)

3588 
©a_idítify_devi˚
 
©a_idít
;

3589 
modñ
[64];

3590 
£rül
[64];

3591 
fúm
[64];

3592 
ªs
, 
©≠i
;

3594 
	`mem£t
(&
©a_idít
, 0, (ata_ident));

3595 
ªs
 = 
	`©a_comm™d_öãrÁ˚
(
©a_fd
, (*)&
©a_idít
, &
©≠i
, 
vîbo£
);

3596 i‡(
ªs
)

3597  
ªs
;

3598 i‡((2 =
do_øw
Ë|| (3 =
do_hex
))

3599 
	`dW‹dHex
((c⁄° *)&
©a_idít
, 256, -2,

3600 
	`sg_is_big_ídün
());

3601 i‡(
do_øw
)

3602 
	`dSåRaw
((c⁄° *)&
©a_idít
, 512);

3604 i‡(
do_hex
) {

3605 i‡(
©≠i
)

3606 
	`¥ötf
("ATA IDENTIFY PACKET DEVICEÑesponse ");

3608 
	`¥ötf
("ATA IDENTIFY DEVICEÑesponse ");

3609 i‡(
do_hex
 > 1) {

3610 
	`¥ötf
("(512 bytes):\n");

3611 
	`dSåHex
((c⁄° *)&
©a_idít
, 512, 0);

3613 
	`¥ötf
("(256 words):\n");

3614 
	`dW‹dHex
((c⁄° *)&
©a_idít
, 256, 0,

3615 
	`sg_is_big_ídün
());

3618 
	`¥ötf
("%s device: model, serialÇumberánd firmwareÑevision:\n",

3619 (
©≠i
 ? "ATAPI" : "ATA"));

3620 
ªs
 = 
	`sg_©a_gë_ch¨s
((c⁄° *)
©a_idít
.
modñ
,

3621 0, 20, 
	`sg_is_big_ídün
(), 
modñ
);

3622 
modñ
[
ªs
] = '\0';

3623 
ªs
 = 
	`sg_©a_gë_ch¨s
((c⁄° *)
©a_idít
.
£rül_no
,

3624 0, 10, 
	`sg_is_big_ídün
(), 
£rül
);

3625 
£rül
[
ªs
] = '\0';

3626 
ªs
 = 
	`sg_©a_gë_ch¨s
((c⁄° *)
©a_idít
.
fw_ªv
,

3627 0, 4, 
	`sg_is_big_ídün
(), 
fúm
);

3628 
fúm
[
ªs
] = '\0';

3629 
	`¥ötf
(" %†%†%s\n", 
modñ
, 
£rül
, 
fúm
);

3630 i‡(
vîbo£
) {

3631 i‡(
©≠i
)

3632 
	`¥ötf
("ATA IDENTIFY PACKET DEVICEÑesponse "

3635 
	`¥ötf
("ATA IDENTIFY DEVICEÑesponse (256 words):\n");

3636 
	`dW‹dHex
((c⁄° *)&
©a_idít
, 256, 0,

3637 
	`sg_is_big_ídün
());

3642 
	}
}

3648 
	ssg_vîsi⁄_des¸ùt‹
 {

3649 
	mvÆue
;

3650 c⁄° * 
	m«me
;

3653 
sg_vîsi⁄_des¸ùt‹
 
sg_vîsi⁄_des¸ùt‹_¨r
[];

3657 
	$föd_vîsi⁄_des¸ùt‹_°r
(
vÆue
)

3659 
k
;

3660 c⁄° 
sg_vîsi⁄_des¸ùt‹
 * 
vdp
;

3662 
k
 = 0; ((
vdp
 = 
sg_vîsi⁄_des¸ùt‹_¨r
 + kË&& vdp->
«me
); ++k) {

3663 i‡(
vÆue
 =
vdp
->value)

3664  
vdp
->
«me
;

3665 i‡(
vÆue
 < 
vdp
->value)

3668  
NULL
;

3669 
	}
}

	@src/sg_inq_data.c

13 
	~<uni°d.h
>

14 
	~<f˙é.h
>

15 
	~<°dio.h
>

16 
	~<°dlib.h
>

18 #ifde‡
HAVE_CONFIG_H


19 
	~"c⁄fig.h
"

24 c⁄° * 
	gsg_™si_vîsi⁄_¨r
[] =

46 
	ssg_vîsi⁄_des¸ùt‹
 {

47 
	mvÆue
;

48 c⁄° * 
	m«me
;

54 #ifde‡
SG_SCSI_STRINGS


55 
sg_vîsi⁄_des¸ùt‹
 
	gsg_vîsi⁄_des¸ùt‹_¨r
[] = {

483 {0xffff, 
NULL
},

486 
sg_vîsi⁄_des¸ùt‹
 
	gsg_vîsi⁄_des¸ùt‹_¨r
[] = {

487 {0xffff, 
NULL
},

	@src/sg_logs.c

12 
	~<uni°d.h
>

13 
	~<f˙é.h
>

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

17 
	~<˘y≥.h
>

18 
	~<gë›t.h
>

19 
	#__STDC_FORMAT_MACROS
 1

	)

20 
	~<öây≥s.h
>

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

25 
	~"sg_lib.h
"

26 
	~"sg_cmds_basic.h
"

28 c⁄° * 
	gvîsi⁄_°r
 = "1.11 20130517";

30 
	#MX_ALLOC_LEN
 (0xfffc)

	)

31 
	#SHORT_RESP_LEN
 128

	)

33 
	#SUPP_PAGES_LPAGE
 0x0

	)

34 
	#BUFF_OVER_UNDER_LPAGE
 0x1

	)

35 
	#WRITE_ERR_LPAGE
 0x2

	)

36 
	#READ_ERR_LPAGE
 0x3

	)

37 
	#READ_REV_ERR_LPAGE
 0x4

	)

38 
	#VERIFY_ERR_LPAGE
 0x5

	)

39 
	#NON_MEDIUM_LPAGE
 0x6

	)

40 
	#LAST_N_ERR_LPAGE
 0x7

	)

41 
	#FORMAT_STATUS_LPAGE
 0x8

	)

42 
	#LAST_N_DEFERRED_LPAGE
 0xb

	)

43 
	#LB_PROV_LPAGE
 0xc

	)

44 
	#TEMPERATURE_LPAGE
 0xd

	)

45 
	#START_STOP_LPAGE
 0xe

	)

46 
	#APP_CLIENT_LPAGE
 0xf

	)

47 
	#SELF_TEST_LPAGE
 0x10

	)

48 
	#SOLID_STATE_MEDIA_LPAGE
 0x11

	)

49 
	#SAT_ATA_RESULTS_LPAGE
 0x16

	)

50 
	#PROTO_SPECIFIC_LPAGE
 0x18

	)

51 
	#STATS_LPAGE
 0x19

	)

52 
	#PCT_LPAGE
 0x1a

	)

53 
	#TAPE_ALERT_LPAGE
 0x2e

	)

54 
	#IE_LPAGE
 0x2f

	)

55 
	#NOT_SPG_SUBPG
 0x0

	)

56 
	#SUPP_SPGS_SUBPG
 0xff

	)

57 
	#LOW_GRP_STATS_SUBPG
 0x1

	)

58 
	#HIGH_GRP_STATS_SUBPG
 0x1f

	)

59 
	#CACHE_STATS_SUBPG
 0x20

	)

61 
	#PCB_STR_LEN
 128

	)

63 
	#LOG_SENSE_PROBE_ALLOC_LEN
 4

	)

65 
	gr•_buff
[
MX_ALLOC_LEN
 + 4];

67 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

68 {"Æl", 
no_¨gumít
, 0, 'a'},

69 {"brõf", 
no_¨gumít
, 0, 'b'},

70 {"c⁄åﬁ", 
ªquúed_¨gumít
, 0, 'c'},

71 {"hñp", 
no_¨gumít
, 0, 'h'},

72 {"hex", 
no_¨gumít
, 0, 'H'},

73 {"li°", 
no_¨gumít
, 0, 'l'},

74 {"maxÀn", 
ªquúed_¨gumít
, 0, 'm'},

75 {"«me", 
no_¨gumít
, 0, 'n'},

76 {"√w", 
no_¨gumít
, 0, 'N'},

77 {"ﬁd", 
no_¨gumít
, 0, 'O'},

78 {"∑ge", 
ªquúed_¨gumít
, 0, 'p'},

79 {"∑ømp", 
ªquúed_¨gumít
, 0, 'P'},

80 {"pcb", 
no_¨gumít
, 0, 'q'},

81 {"µc", 
no_¨gumít
, 0, 'Q'},

82 {"øw", 
no_¨gumít
, 0, 'r'},

83 {"ª£t", 
no_¨gumít
, 0, 'R'},

84 {"•", 
no_¨gumít
, 0, 's'},

85 {"£À˘", 
no_¨gumít
, 0, 'S'},

86 {"ãm≥øtuª", 
no_¨gumít
, 0, 't'},

87 {"å™•‹t", 
no_¨gumít
, 0, 'T'},

88 {"vîbo£", 
no_¨gumít
, 0, 'v'},

89 {"vîsi⁄", 
no_¨gumít
, 0, 'V'},

93 
	s›ts_t
 {

94 
	mdo_Æl
;

95 
	mdo_brõf
;

96 
	mdo_hñp
;

97 
	mdo_hex
;

98 
	mdo_li°
;

99 
	mdo_«me
;

100 
	mdo_pcb
;

101 
	mdo_µc
;

102 
	mdo_øw
;

103 
	mdo_p¸e£t
;

104 
	mdo_£À˘
;

105 
	mdo_•
;

106 
	mdo_ãm≥øtuª
;

107 
	mdo_å™•‹t
;

108 
	mdo_vîbo£
;

109 
	mdo_vîsi⁄
;

110 
	m∑ge_c⁄åﬁ
;

111 
	mmaxÀn
;

112 
	mpg_code
;

113 
	msubpg_code
;

114 
	m∑ømp
;

115 c⁄° * 
	mdevi˚_«me
;

116 
	m›t_√w
;

120 
	$ußge
()

122 
	`¥ötf
("Usage: sg_logs [--all] [--brief] [--control=PC] [--help] [--hex] "

158 
	`¥ötf
(" --ppc|-Q setÅhe Parameter Pointer Control (PPC) bit "

174 
	}
}

177 
	$ußge_ﬁd
()

179 
	`¥ötf
("Usage: sg_logs [-a] [-A] [-b] [-c=PC] [-h] [-H] [-l] [-L] "

207 
	`¥ötf
(" -ppc setÅhe Parameter Pointer Control (PPC) bit "

221 
	}
}

224 
	$ußge_f‹
(c⁄° 
›ts_t
 * 
›t•
)

226 i‡(
›t•
->
›t_√w
)

227 
	`ußge
();

229 
	`ußge_ﬁd
();

230 
	}
}

235 
	$¥o˚ss_˛_√w
(
›ts_t
 * 
›t•
, 
¨gc
, * 
¨gv
[])

237 
c
, 
n
, 
¬
;

238 * 
˝
;

241 
›ti⁄_ödex
 = 0;

243 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "aAbc:hHlLm:nNOp:P:qQrRsStTvV",

244 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

245 i‡(
c
 == -1)

248 
c
) {

250 ++
›t•
->
do_Æl
;

253 
›t•
->
do_Æl
 += 2;

256 ++
›t•
->
do_brõf
;

259 
n
 = 
	`sg_gë_num
(
›èrg
);

260 i‡((
n
 < 0) || (n > 3)) {

261 
	`Ârötf
(
°dîr
, "badárgumentÅo '--control='\n");

262 
	`ußge
();

263  
SG_LIB_SYNTAX_ERROR
;

265 
›t•
->
∑ge_c⁄åﬁ
 = 
n
;

269 ++
›t•
->
do_hñp
;

272 ++
›t•
->
do_hex
;

275 ++
›t•
->
do_li°
;

278 
›t•
->
do_li°
 += 2;

281 
n
 = 
	`sg_gë_num
(
›èrg
);

282 i‡((
n
 < 0) || (1 ==Ç) || (n > 0xffff)) {

283 
	`Ârötf
(
°dîr
, "badárgumentÅo '--maxlen=', from 2Åo "

285 
	`ußge
();

286  
SG_LIB_SYNTAX_ERROR
;

288 
›t•
->
maxÀn
 = 
n
;

291 ++
›t•
->
do_«me
;

296 
›t•
->
›t_√w
 = 0;

299 
˝
 = 
	`°rchr
(
›èrg
, ',');

300 
n
 = 
	`sg_gë_num_nomu…
(
›èrg
);

301 i‡((
n
 < 0) || (n > 63)) {

302 
	`Ârötf
(
°dîr
, "BadárgumentÅo '--page='\n");

303 
	`ußge
();

304  
SG_LIB_SYNTAX_ERROR
;

306 i‡(
˝
) {

307 
¬
 = 
	`sg_gë_num_nomu…
(
˝
 + 1);

308 i‡((
¬
 < 0) || (nn > 255)) {

309 
	`Ârötf
(
°dîr
, "Bad second value inárgumentÅo "

311 
	`ußge
();

312  
SG_LIB_SYNTAX_ERROR
;

315 
¬
 = 0;

316 
›t•
->
pg_code
 = 
n
;

317 
›t•
->
subpg_code
 = 
¬
;

320 
n
 = 
	`sg_gë_num
(
›èrg
);

321 i‡(
n
 < 0) {

322 
	`Ârötf
(
°dîr
, "badárgumentÅo '--paramp='\n");

323 
	`ußge
();

324  
SG_LIB_SYNTAX_ERROR
;

326 
›t•
->
∑ømp
 = 
n
;

329 ++
›t•
->
do_pcb
;

332 ++
›t•
->
do_µc
;

335 ++
›t•
->
do_øw
;

338 ++
›t•
->
do_p¸e£t
;

339 ++
›t•
->
do_£À˘
;

342 ++
›t•
->
do_•
;

345 ++
›t•
->
do_£À˘
;

348 ++
›t•
->
do_ãm≥øtuª
;

351 ++
›t•
->
do_å™•‹t
;

354 ++
›t•
->
do_vîbo£
;

357 ++
›t•
->
do_vîsi⁄
;

360 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê%¯[0x%x]\n", 
c
, c);

361 i‡(
›t•
->
do_hñp
)

363 
	`ußge
();

364  
SG_LIB_SYNTAX_ERROR
;

367 i‡(
›töd
 < 
¨gc
) {

368 i‡(
NULL
 =
›t•
->
devi˚_«me
) {

369 
›t•
->
devi˚_«me
 = 
¨gv
[
›töd
];

370 ++
›töd
;

372 i‡(
›töd
 < 
¨gc
) {

373 ; 
›töd
 < 
¨gc
; ++optind)

374 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

375 
¨gv
[
›töd
]);

376 
	`ußge
();

377  
SG_LIB_SYNTAX_ERROR
;

381 
	}
}

386 
	$¥o˚ss_˛_ﬁd
(
›ts_t
 * 
›t•
, 
¨gc
, * 
¨gv
[])

388 
k
, 
jmp_out
, 
∂í
, 
num
, 
n
;

389 
u
, 
uu
;

390 c⁄° * 
˝
;

392 
k
 = 1; k < 
¨gc
; ++k) {

393 
˝
 = 
¨gv
[
k
];

394 
∂í
 = 
	`°æí
(
˝
);

395 i‡(
∂í
 <= 0)

397 i‡('-' =*
˝
) {

398 --
∂í
, ++
˝
, 
jmp_out
 = 0;Ölen > 0; --plen, ++cp) {

399 *
˝
) {

401 ++
›t•
->
do_Æl
;

404 
›t•
->
do_Æl
 += 2;

407 ++
›t•
->
do_brõf
;

411 ++
›t•
->
do_hex
;

414 ++
›t•
->
do_li°
;

417 
›t•
->
do_li°
 += 2;

420 ++
›t•
->
do_«me
;

423 
›t•
->
›t_√w
 = 1;

428 
›t•
->
do_p¸e£t
 = 1;

429 
›t•
->
do_£À˘
 = 1;

432 ++
›t•
->
do_ãm≥øtuª
;

435 ++
›t•
->
do_å™•‹t
;

438 ++
›t•
->
do_vîbo£
;

441 ++
›t•
->
do_vîsi⁄
;

444 ++
›t•
->
do_hñp
;

447 ++
˝
;

448 
jmp_out
 = 1;

451 
jmp_out
 = 1;

454 i‡(
jmp_out
)

457 i‡(
∂í
 <= 0)

459 i‡(0 =
	`°∫cmp
("c=", 
˝
, 2)) {

460 
num
 = 
	`ssˇnf
(
˝
 + 2, "%x", &
u
);

461 i‡((1 !
num
Ë|| (
u
 > 3)) {

462 
	`¥ötf
("BadÖage controláfter '-c=' option [0..3]\n");

463 
	`ußge_ﬁd
();

464  
SG_LIB_SYNTAX_ERROR
;

466 
›t•
->
∑ge_c⁄åﬁ
 = 
u
;

467 } i‡(0 =
	`°∫cmp
("m=", 
˝
, 2)) {

468 
num
 = 
	`ssˇnf
(
˝
 + 2, "%d", &
n
);

469 i‡((1 !
num
Ë|| (
n
 < 0Ë|| (¿> 
MX_ALLOC_LEN
)) {

470 
	`¥ötf
("Bad maximumÑesponseÜengtháfter '-m=' option\n");

471 
	`ußge_ﬁd
();

472  
SG_LIB_SYNTAX_ERROR
;

474 
›t•
->
maxÀn
 = 
n
;

475 } i‡(0 =
	`°∫cmp
("p=", 
˝
, 2)) {

476 i‡(
NULL
 =
	`°rchr
(
˝
 + 2, ',')) {

477 
num
 = 
	`ssˇnf
(
˝
 + 2, "%x", &
u
);

478 i‡((1 !
num
Ë|| (
u
 > 63)) {

479 
	`Ârötf
(
°dîr
, "BadÖage code valueáfter '-p=' "

481 
	`ußge_ﬁd
();

482  
SG_LIB_SYNTAX_ERROR
;

484 
›t•
->
pg_code
 = 
u
;

485 } i‡(2 =
	`ssˇnf
(
˝
 + 2, "%x,%x", &
u
, &
uu
)) {

486 i‡(
uu
 > 255) {

487 
	`Ârötf
(
°dîr
, "Bad subÖage code valueáfter '-p=' "

489 
	`ußge_ﬁd
();

490  
SG_LIB_SYNTAX_ERROR
;

492 
›t•
->
pg_code
 = 
u
;

493 
›t•
->
subpg_code
 = 
uu
;

495 
	`Ârötf
(
°dîr
, "BadÖage code, subpage code sequence "

497 
	`ußge_ﬁd
();

498  
SG_LIB_SYNTAX_ERROR
;

500 } i‡(0 =
	`°∫cmp
("∑ømp=", 
˝
, 7)) {

501 
num
 = 
	`ssˇnf
(
˝
 + 7, "%x", &
u
);

502 i‡((1 !
num
Ë|| (
u
 > 0xffff)) {

503 
	`¥ötf
("BadÖarameterÖointeráfter '-paramp=' option\n");

504 
	`ußge_ﬁd
();

505  
SG_LIB_SYNTAX_ERROR
;

507 
›t•
->
∑ømp
 = 
u
;

508 } i‡(0 =
	`°∫cmp
("pcb", 
˝
, 3))

509 
›t•
->
do_pcb
 = 1;

510 i‡(0 =
	`°∫cmp
("µc", 
˝
, 3))

511 
›t•
->
do_µc
 = 1;

512 i‡(0 =
	`°∫cmp
("£À˘", 
˝
, 6))

513 
›t•
->
do_£À˘
 = 1;

514 i‡(0 =
	`°∫cmp
("•", 
˝
, 2))

515 
›t•
->
do_•
 = 1;

516 i‡(0 =
	`°∫cmp
("ﬁd", 
˝
, 3))

518 i‡(
jmp_out
) {

519 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄: %s\n", 
˝
);

520 
	`ußge_ﬁd
();

521  
SG_LIB_SYNTAX_ERROR
;

523 } i‡(0 =
›t•
->
devi˚_«me
)

524 
›t•
->
devi˚_«me
 = 
˝
;

526 
	`Ârötf
(
°dîr
, "too manyárguments, got: %s,ÇotÉxpecting: "

527 "%s\n", 
›t•
->
devi˚_«me
, 
˝
);

528 
	`ußge_ﬁd
();

529  
SG_LIB_SYNTAX_ERROR
;

533 
	}
}

542 
	$¥o˚ss_˛
(
›ts_t
 * 
›t•
, 
¨gc
, * 
¨gv
[])

544 
ªs
;

545 * 
˝
;

547 
˝
 = 
	`gëív
("SG3_UTILS_OLD_OPTS");

548 i‡(
˝
) {

549 
›t•
->
›t_√w
 = 0;

550 
ªs
 = 
	`¥o˚ss_˛_ﬁd
(
›t•
, 
¨gc
, 
¨gv
);

551 i‡((0 =
ªs
Ë&& 
›t•
->
›t_√w
)

552 
ªs
 = 
	`¥o˚ss_˛_√w
(
›t•
, 
¨gc
, 
¨gv
);

554 
›t•
->
›t_√w
 = 1;

555 
ªs
 = 
	`¥o˚ss_˛_√w
(
›t•
, 
¨gc
, 
¨gv
);

556 i‡((0 =
ªs
Ë&& (0 =
›t•
->
›t_√w
))

557 
ªs
 = 
	`¥o˚ss_˛_ﬁd
(
›t•
, 
¨gc
, 
¨gv
);

559  
ªs
;

560 
	}
}

563 
	$dSåRaw
(c⁄° * 
°r
, 
Àn
)

565 
k
;

567 
k
 = 0 ; k < 
Àn
; ++k)

568 
	`¥ötf
("%c", 
°r
[
k
]);

569 
	}
}

580 
	$do_logs
(
sg_fd
, * 
ª•
, 
mx_ª•_Àn
,

581 c⁄° 
›ts_t
 * 
›t•
)

583 
a˘uÆ_Àn
, 
ªs
, 
vb
;

585 
	`mem£t
(
ª•
, 0, 
mx_ª•_Àn
);

586 
vb
 = 
›t•
->
do_vîbo£
;

587 i‡(
›t•
->
maxÀn
 > 1)

588 
a˘uÆ_Àn
 = 
mx_ª•_Àn
;

590 i‡((
ªs
 = 
	`sg_Œ_log_£n£
(
sg_fd
, 
›t•
->
do_µc
, o±•->
do_•
,

591 
›t•
->
∑ge_c⁄åﬁ
, o±•->
pg_code
,

592 
›t•
->
subpg_code
, o±•->
∑ømp
,

593 
ª•
, 
LOG_SENSE_PROBE_ALLOC_LEN
,

594 1 , 
vb
))) {

595 
ªs
) {

596 
SG_LIB_CAT_NOT_READY
:

597 
SG_LIB_CAT_INVALID_OP
:

598 
SG_LIB_CAT_ILLEGAL_REQ
:

599 
SG_LIB_CAT_UNIT_ATTENTION
:

600 
SG_LIB_CAT_ABORTED_COMMAND
:

601  
ªs
;

606 
a˘uÆ_Àn
 = (
ª•
[2] << 8) +Ñesp[3] + 4;

607 i‡((0 =
›t•
->
do_øw
Ë&& (
vb
 > 1)) {

608 
	`Ârötf
(
°dîr
, " Log sense (findÜength)Ñesponse:\n");

609 
	`dSåHex
((c⁄° *)
ª•
, 
LOG_SENSE_PROBE_ALLOC_LEN
, 1);

610 
	`Ârötf
(
°dîr
, " hence calculatedÑesponseÜength=%d\n",

611 
a˘uÆ_Àn
);

613 i‡(
›t•
->
pg_code
 !(0x3‡& 
ª•
[0])) {

614 i‡(
vb
)

615 
	`Ârötf
(
°dîr
, "Page code doesÇotáppear in first byte "

617 i‡(
a˘uÆ_Àn
 > 0x40) {

618 
a˘uÆ_Àn
 = 0x40;

619 i‡(
vb
)

620 
	`Ârötf
(
°dîr
, "TrimÑesponseÜengthÅo 64 bytes due "

625 i‡(
a˘uÆ_Àn
 % 2)

626 
a˘uÆ_Àn
 += 1;

627 i‡(
a˘uÆ_Àn
 > 
mx_ª•_Àn
)

628 
a˘uÆ_Àn
 = 
mx_ª•_Àn
;

630 i‡((
ªs
 = 
	`sg_Œ_log_£n£
(
sg_fd
, 
›t•
->
do_µc
, o±•->
do_•
,

631 
›t•
->
∑ge_c⁄åﬁ
, o±•->
pg_code
,

632 
›t•
->
subpg_code
, o±•->
∑ømp
,

633 
ª•
, 
a˘uÆ_Àn
, 1 , 
vb
))) {

634 
ªs
) {

635 
SG_LIB_CAT_NOT_READY
:

636 
SG_LIB_CAT_INVALID_OP
:

637 
SG_LIB_CAT_ILLEGAL_REQ
:

638 
SG_LIB_CAT_UNIT_ATTENTION
:

639 
SG_LIB_CAT_ABORTED_COMMAND
:

640  
ªs
;

645 i‡((0 =
›t•
->
do_øw
Ë&& (
vb
 > 1)) {

646 
	`Ârötf
(
°dîr
, " Log senseÑesponse:\n");

647 
	`dSåHex
((c⁄° *)
ª•
, 
a˘uÆ_Àn
, 1);

650 
	}
}

653 
	$show_∑ge_«me
(
pg_code
, 
subpg_code
,

654 
sg_sim∂e_öquúy_ª•
 * 
öq_d©
)

656 
d⁄e
;

657 
b
[64];

659 
	`mem£t
(
b
, 0, (b));

661 i‡(
NOT_SPG_SUBPG
 =
subpg_code
)

662 
	`¢¥ötf
(
b
, (bË- 1, " 0x%02x ", 
pg_code
);

664 
	`¢¥ötf
(
b
, (bË- 1, " 0x%02x,0x%02x ", 
pg_code
,

665 
subpg_code
);

666 
d⁄e
 = 1;

667 i‡((
NOT_SPG_SUBPG
 =
subpg_code
Ë|| (
SUPP_SPGS_SUBPG
 == subpg_code)) {

668 
pg_code
) {

669 
SUPP_PAGES_LPAGE
: 
	`¥ötf
("%sSuµ‹ãdÜogÖages", 
b
); ;

670 
BUFF_OVER_UNDER_LPAGE
:

671 
	`¥ötf
("%sBuf„∏ovî-run/undî-run", 
b
);

673 
WRITE_ERR_LPAGE
: 
	`¥ötf
("%sEº‹ cou¡î†(wrôe)", 
b
); ;

674 
READ_ERR_LPAGE
: 
	`¥ötf
("%sEº‹ cou¡î†‘ód)", 
b
); ;

675 
READ_REV_ERR_LPAGE
:

676 
	`¥ötf
("%sEº‹ cou¡î†‘ódÑevî£)", 
b
);

678 
VERIFY_ERR_LPAGE
: 
	`¥ötf
("%sEº‹ cou¡î†(vîify)", 
b
); ;

679 
NON_MEDIUM_LPAGE
: 
	`¥ötf
("%sN⁄-mediumÉº‹s", 
b
); ;

680 
LAST_N_ERR_LPAGE
: 
	`¥ötf
("%sLa°ÇÉº‹Évíts", 
b
); ;

681 
LAST_N_DEFERRED_LPAGE
: 
	`¥ötf
("%sLastÇ deferredÉrrors or "

682 "asynchr⁄ou†evíts", 
b
); ;

683 
TEMPERATURE_LPAGE
: 
	`¥ötf
("%sTem≥øtuª", 
b
); ;

684 
START_STOP_LPAGE
: 
	`¥ötf
("%sSèπ-°› cy˛êcou¡î", 
b
); ;

685 
APP_CLIENT_LPAGE
: 
	`¥ötf
("%sAµliˇti⁄ clõ¡", 
b
); ;

686 
SELF_TEST_LPAGE
: 
	`¥ötf
("%sSñf-ã°Ñesu…s", 
b
); ;

687 
PROTO_SPECIFIC_LPAGE
:

688 
	`¥ötf
("%sPrŸocﬁ s≥cifi¯p‹t", 
b
);

690 
STATS_LPAGE
:

691 
	`¥ötf
("%sGíîÆ sèti°ic†™dÖîf‹m™˚", 
b
);

693 
PCT_LPAGE
:

694 
	`¥ötf
("%sPowî c⁄dôi⁄Åønsôi⁄", 
b
);

696 
IE_LPAGE
:

697 
	`¥ötf
("%sInf‹m©i⁄ÆÉx˚±i⁄†(SMART)", 
b
);

700 
d⁄e
 = 0;

703 i‡(
d⁄e
) {

704 i‡(
SUPP_SPGS_SUBPG
 =
subpg_code
)

705 
	`¥ötf
("ánd subpages\n");

707 
	`¥ötf
("\n");

713 i‡(
STATS_LPAGE
 =
pg_code
) {

714 i‡((
subpg_code
 >
LOW_GRP_STATS_SUBPG
) &&

715 (
subpg_code
 <
HIGH_GRP_STATS_SUBPG
)) {

716 
	`¥ötf
("%sGrou∞°©i°ic†™dÖîf‹m™˚ (%d)\n", 
b
, 
subpg_code
);

718 } i‡(
subpg_code
 =
CACHE_STATS_SUBPG
) {

719 
	`¥ötf
("%sCachêmem‹y sèti°ics\n", 
b
);

723 i‡(
subpg_code
 > 0) {

724 
	`¥ötf
("%s??\n", 
b
);

728 
d⁄e
 = 1;

729 
öq_d©
->
≥rùhîÆ_ty≥
) {

730 
PDT_DISK
: 
PDT_WO
: 
PDT_OPTICAL
: 
PDT_RBC
:

733 
pg_code
) {

734 
FORMAT_STATUS_LPAGE
:

735 
	`¥ötf
("%sF‹m© sètu†(sbc-2)\n", 
b
);

737 
LB_PROV_LPAGE
:

738 
	`¥ötf
("%sLogiˇ»blockÖrovisi⁄ög (sbc-3)\n", 
b
);

741 
	`¥ötf
("%sBackground sˇ¿ªsu…†(sbc-3)\n", 
b
);

743 
SOLID_STATE_MEDIA_LPAGE
:

744 
	`¥ötf
("%sSﬁid sèã medü (sbc-3)\n", 
b
);

746 
SAT_ATA_RESULTS_LPAGE
:

747 
	`¥ötf
("%sATAÖass-throughÑesu…†(ßt-2)\n", 
b
);

750 
	`¥ötf
("%sN⁄-vﬁ©ûêˇchê(sbc-2)\n", 
b
);

753 
	`¥ötf
("%sPîf‹m™˚ cou¡î†(Hôachi)\n", 
b
);

756 
	`¥ötf
("%sCachê(Sóg©e), Mis˚Œ™eou†(Hôachi)\n", 
b
);

759 
	`¥ötf
("%sFa˘‹y (Sóg©e/Hôachi)\n", 
b
);

762 
d⁄e
 = 0;

767 
PDT_TAPE
: 
PDT_PRINTER
:

770 
pg_code
) {

772 
	`¥ötf
("%sSequítü»ac˚s†devi˚ (ssc-2)\n", 
b
);

775 
	`¥ötf
("%sDT Devi˚ sètu†(ssc-3)\n", 
b
);

778 
	`¥ötf
("%sT≠êÆîàª•⁄£ (ssc-3)\n", 
b
);

781 
	`¥ötf
("%sReque°edÑecovîy (ssc-3)\n", 
b
);

784 
	`¥ötf
("%sDevi˚ sèti°ic†(ssc-3)\n", 
b
);

787 
	`¥ötf
("%sT≠êdügno°i¯(ssc-3)\n", 
b
);

788 
d⁄e
 = 0;

791 
	`¥ötf
("%sVﬁumê°©i°ic†(ssc-4)\n", 
b
);

792 
d⁄e
 = 0;

795 
	`¥ötf
("%sD©®com¥essi⁄ (ssc-4)\n", 
b
);

798 
	`¥ötf
("%sCuºíà£rvi˚ inf‹m©i⁄ (ssc-3)\n", 
b
);

800 
TAPE_ALERT_LPAGE
:

801 
	`¥ötf
("%sT≠eAÀπ (ssc-2)\n", 
b
);

804 
	`¥ötf
("%sT≠êußgêlog (IBM s≥cific)\n", 
b
);

807 
	`¥ötf
("%sT≠êˇ∑côyÜog (IBM s≥cific)\n", 
b
);

810 
	`¥ötf
("%sD©®com¥essi⁄Üog (IBM s≥cific)\n", 
b
);

813 
d⁄e
 = 0;

818 
PDT_MCHANGER
:

821 
pg_code
) {

823 
	`¥ötf
("%sMedü ch™gî sèti°ic†(smc-3)\n", 
b
);

826 
	`¥ötf
("%sEÀmíà°©i°ic†(smc-3)\n", 
b
);

829 
	`¥ötf
("%sMedü ch™gî dügno°i¯d©®(smc-3)\n", 
b
);

832 
	`¥ötf
("%sT≠eAÀπ (smc-3)\n", 
b
);

835 
d⁄e
 = 0;

840 
PDT_ADC
:

842 
pg_code
) {

844 
	`¥ötf
("%sDT Devi˚ sètu†◊dc)\n", 
b
);

847 
	`¥ötf
("%sT≠êÆîàª•⁄£ (adc)\n", 
b
);

850 
	`¥ötf
("%sReque°edÑecovîy (adc)\n", 
b
);

853 
	`¥ötf
("%sDevi˚ sèti°ic†◊dc)\n", 
b
);

856 
	`¥ötf
("%sSîvi˚ buf„r†öf‹m©i⁄ (adc)\n", 
b
);

857 
d⁄e
 = 0;

860 
	`¥ötf
("%sT≠êdügno°i¯◊dc)\n", 
b
);

861 
d⁄e
 = 0;

864 
d⁄e
 = 0;

870 
d⁄e
 = 0;

873 i‡(
d⁄e
)

875 i‡(
pg_code
 >= 0x30)

876 
	`¥ötf
("%s[unknow¿víd‹ s≥cifi¯∑gêcode]\n", 
b
);

878 
	`¥ötf
("%s??\n", 
b
);

879 
	}
}

882 
	$gë_pcb_°r
(
pcb
, * 
ouç
, 
maxouéí
)

884 
buff
[
PCB_STR_LEN
];

885 
n
;

887 
n
 = 
	`•rötf
(
buff
, "du=%d [ds=%d]Åsd=%dÉtc=%d ", ((
pcb
 & 0x80) ? 1 : 0),

888 ((
pcb
 & 0x40) ? 1 : 0), ((pcb & 0x20) ? 1 : 0),

889 ((
pcb
 & 0x10) ? 1 : 0));

890 i‡(
pcb
 & 0x10)

891 
n
 +
	`•rötf
(
buff
 +Ç, "tmc=%d ", ((
pcb
 & 0xc) >> 2));

893 
n
 +
	`•rötf
(
buff
 +Ç, "f‹m©+lökög=%d [0x%.2x]", 
pcb
 & 3,

894 
pcb
);

896 i‡(
pcb
 & 0x1)

897 
n
 +
	`•rötf
(
buff
 +Ç, "lbö=%d ", ((
pcb
 & 0x2) >> 1));

898 
n
 +
	`•rötf
(
buff
 +Ç, "Õ=%d [0x%.2x]", 
pcb
 & 0x1,Öcb);

900 i‡(
ouç
 && (
n
 < 
maxouéí
)) {

901 
	`mem˝y
(
ouç
, 
buff
, 
n
);

902 
ouç
[
n
] = '\0';

903 } i‡(
ouç
 && (
maxouéí
 > 0))

904 
ouç
[0] = '\0';

905 
	}
}

909 
	$show_buf„r_undî_ovîrun_∑ge
(* 
ª•
, 
Àn
, 
show_pcb
)

911 
k
, 
j
, 
num
, 
∂
, 
cou¡_basis
, 
ˇu£
, 
pcb
;

912 * 
u˝
;

913 * 
xp
;

914 
uöt64_t
 
uŒ
;

915 
pcb_°r
[
PCB_STR_LEN
];

917 
	`¥ötf
("Buffer over-run/under-runÖage\n");

918 
num
 = 
Àn
 - 4;

919 
u˝
 = &
ª•
[0] + 4;

920 
num
 > 3) {

921 
∂
 = 
u˝
[3] + 4;

922 
cou¡_basis
 = (
u˝
[1] >> 5) & 0x7;

923 
ˇu£
 = (
u˝
[1] >> 1) & 0xf;

924 i‡((0 =
cou¡_basis
Ë&& (0 =
ˇu£
))

925 
	`¥ötf
("Count basis+Cause both undefined(0), unsupported??");

927 
	`¥ötf
(" Count basis: ");

928 
cou¡_basis
) {

929 0 : 
	`¥ötf
("undefined"); ;

930 1 : 
	`¥ötf
("per command"); ;

931 2 : 
	`¥ötf
("per failedÑeconnect"); ;

932 3 : 
	`¥ötf
("per unit ofÅime"); ;

933 : 
	`¥ötf
("ª£rved [0x%x]", 
cou¡_basis
); ;

935 
	`¥ötf
(", Cause: ");

936 
ˇu£
) {

937 0 : 
	`¥ötf
("undefined"); ;

938 1 : 
	`¥ötf
("bus busy"); ;

939 2 : 
	`¥ötf
("transferÑateÅoo slow"); ;

940 : 
	`¥ötf
("ª£rved [0x%x]", 
ˇu£
); ;

942 
	`¥ötf
(", Type: ");

943 i‡(
u˝
[1] & 1)

944 
	`¥ötf
("over-run");

946 
	`¥ötf
("under-run");

947 
	`¥ötf
(", count");

948 
k
 = 
∂
 - 4;

949 
xp
 = 
u˝
 + 4;

950 i‡(
k
 > ()(
uŒ
)) {

951 
xp
 +(
k
 - (
uŒ
));

952 
k
 = (
uŒ
);

954 
uŒ
 = 0;

955 
j
 = 0; j < 
k
; ++j) {

956 i‡(
j
 > 0)

957 
uŒ
 <<= 8;

958 
uŒ
 |
xp
[
j
];

960 
	`¥ötf
(" = %" 
PRIu64
 "", 
uŒ
);

962 i‡(
show_pcb
) {

963 
pcb
 = 
u˝
[2];

964 
	`gë_pcb_°r
(
pcb
, 
pcb_°r
, (pcb_str));

965 
	`¥ötf
("\¿ <%s>\n", 
pcb_°r
);

967 
	`¥ötf
("\n");

968 
num
 -
∂
;

969 
u˝
 +
∂
;

971 
	}
}

976 
	$show_îr‹_cou¡î_∑ge
(* 
ª•
, 
Àn
, 
show_pcb
)

978 
k
, 
j
, 
num
, 
∂
, 
pc
, 
pcb
;

979 * 
u˝
;

980 * 
xp
;

981 
uöt64_t
 
uŒ
;

982 
pcb_°r
[
PCB_STR_LEN
];

984 
ª•
[0] & 0x3f) {

985 
WRITE_ERR_LPAGE
:

986 
	`¥ötf
("WriteÉrror counterÖage\n");

988 
READ_ERR_LPAGE
:

989 
	`¥ötf
("ReadÉrror counterÖage\n");

991 
READ_REV_ERR_LPAGE
:

992 
	`¥ötf
("Read ReverseÉrror counterÖage\n");

994 
VERIFY_ERR_LPAGE
:

995 
	`¥ötf
("VerifyÉrror counterÖage\n");

998 
	`¥ötf
("ex≥˘ögÉº‹ cou¡îÖage, gŸÖagê0x%x\n", 
ª•
[0]);

1001 
num
 = 
Àn
 - 4;

1002 
u˝
 = &
ª•
[0] + 4;

1003 
num
 > 3) {

1004 
pc
 = (
u˝
[0] << 8) | ucp[1];

1005 
pcb
 = 
u˝
[2];

1006 
∂
 = 
u˝
[3] + 4;

1007 
pc
) {

1008 0: 
	`¥ötf
(" Errors corrected without substantial delay"); ;

1009 1: 
	`¥ötf
(" Errors corrected withÖossible delays"); ;

1010 2: 
	`¥ötf
(" TotalÑewrites orÑereads"); ;

1011 3: 
	`¥ötf
(" TotalÉrrors corrected"); ;

1012 4: 
	`¥ötf
(" TotalÅimes correctionálgorithmÖrocessed"); ;

1013 5: 
	`¥ötf
(" Total bytesÖrocessed"); ;

1014 6: 
	`¥ötf
(" Total uncorrectedÉrrors"); ;

1015 0x8009: 
	`¥ötf
(" Track followingÉrrors [Hitachi]"); ;

1016 0x8015: 
	`¥ötf
(" PositioningÉrrors [Hitachi]"); ;

1017 : 
	`¥ötf
(" Re£rved o∏víd‹ s≥cifi¯[0x%x]", 
pc
); ;

1019 
k
 = 
∂
 - 4;

1020 
xp
 = 
u˝
 + 4;

1021 i‡(
k
 > ()(
uŒ
)) {

1022 
xp
 +(
k
 - (
uŒ
));

1023 
k
 = (
uŒ
);

1025 
uŒ
 = 0;

1026 
j
 = 0; j < 
k
; ++j) {

1027 i‡(
j
 > 0)

1028 
uŒ
 <<= 8;

1029 
uŒ
 |
xp
[
j
];

1031 
	`¥ötf
(" = %" 
PRIu64
 "", 
uŒ
);

1032 i‡(
show_pcb
) {

1033 
	`gë_pcb_°r
(
pcb
, 
pcb_°r
, (pcb_str));

1034 
	`¥ötf
("\¿ <%s>\n", 
pcb_°r
);

1036 
	`¥ötf
("\n");

1037 
num
 -
∂
;

1038 
u˝
 +
∂
;

1040 
	}
}

1044 
	$show_n⁄_medium_îr‹_∑ge
(* 
ª•
, 
Àn
, 
show_pcb
)

1046 
k
, 
j
, 
num
, 
∂
, 
pc
, 
pcb
;

1047 * 
u˝
;

1048 * 
xp
;

1049 
uöt64_t
 
uŒ
;

1050 
pcb_°r
[
PCB_STR_LEN
];

1052 
	`¥ötf
("Non-mediumÉrrorÖage\n");

1053 
num
 = 
Àn
 - 4;

1054 
u˝
 = &
ª•
[0] + 4;

1055 
num
 > 3) {

1056 
pc
 = (
u˝
[0] << 8) | ucp[1];

1057 
pcb
 = 
u˝
[2];

1058 
∂
 = 
u˝
[3] + 4;

1059 
pc
) {

1061 
	`¥ötf
(" Non-mediumÉrror count"); ;

1063 i‡(
pc
 <= 0x7fff)

1064 
	`¥ötf
(" Re£rved [0x%x]", 
pc
);

1066 
	`¥ötf
(" Víd‹ s≥cifi¯[0x%x]", 
pc
);

1069 
k
 = 
∂
 - 4;

1070 
xp
 = 
u˝
 + 4;

1071 i‡(
k
 > ()(
uŒ
)) {

1072 
xp
 +(
k
 - (
uŒ
));

1073 
k
 = (
uŒ
);

1075 
uŒ
 = 0;

1076 
j
 = 0; j < 
k
; ++j) {

1077 i‡(
j
 > 0)

1078 
uŒ
 <<= 8;

1079 
uŒ
 |
xp
[
j
];

1081 
	`¥ötf
(" = %" 
PRIu64
 "", 
uŒ
);

1082 i‡(
show_pcb
) {

1083 
	`gë_pcb_°r
(
pcb
, 
pcb_°r
, (pcb_str));

1084 
	`¥ötf
("\¿ <%s>\n", 
pcb_°r
);

1086 
	`¥ötf
("\n");

1087 
num
 -
∂
;

1088 
u˝
 +
∂
;

1090 
	}
}

1094 
	$show_powî_c⁄dôi⁄_å™sôi⁄s_∑ge
(* 
ª•
, 
Àn
,

1095 
show_pcb
)

1097 
k
, 
j
, 
num
, 
∂
, 
pc
, 
pcb
;

1098 * 
u˝
;

1099 * 
xp
;

1100 
uöt64_t
 
uŒ
;

1101 
pcb_°r
[
PCB_STR_LEN
];

1103 
	`¥ötf
("Power conditionÅransitionsÖage\n");

1104 
num
 = 
Àn
 - 4;

1105 
u˝
 = &
ª•
[0] + 4;

1106 
num
 > 3) {

1107 
pc
 = (
u˝
[0] << 8) | ucp[1];

1108 
pcb
 = 
u˝
[2];

1109 
∂
 = 
u˝
[3] + 4;

1110 
pc
) {

1112 
	`¥ötf
(" AccumulatedÅransitionsÅoáctive"); ;

1114 
	`¥ötf
(" AccumulatedÅransitionsÅo idle_a"); ;

1116 
	`¥ötf
(" AccumulatedÅransitionsÅo idle_b"); ;

1118 
	`¥ötf
(" AccumulatedÅransitionsÅo idle_c"); ;

1120 
	`¥ötf
(" AccumulatedÅransitionsÅo standby_z"); ;

1122 
	`¥ötf
(" AccumulatedÅransitionsÅo standby_y"); ;

1124 
	`¥ötf
(" Re£rved [0x%x]", 
pc
);

1126 
k
 = 
∂
 - 4;

1127 
xp
 = 
u˝
 + 4;

1128 i‡(
k
 > ()(
uŒ
)) {

1129 
xp
 +(
k
 - (
uŒ
));

1130 
k
 = (
uŒ
);

1132 
uŒ
 = 0;

1133 
j
 = 0; j < 
k
; ++j) {

1134 i‡(
j
 > 0)

1135 
uŒ
 <<= 8;

1136 
uŒ
 |
xp
[
j
];

1138 
	`¥ötf
(" = %" 
PRIu64
 "", 
uŒ
);

1139 i‡(
show_pcb
) {

1140 
	`gë_pcb_°r
(
pcb
, 
pcb_°r
, (pcb_str));

1141 
	`¥ötf
("\¿ <%s>\n", 
pcb_°r
);

1143 
	`¥ötf
("\n");

1144 
num
 -
∂
;

1145 
u˝
 +
∂
;

1147 
	}
}

1151 
	$show_è≥_ußge_log_∑ge
(* 
ª•
, 
Àn
, 
show_pcb
)

1153 
k
, 
num
, 
exåa
, 
pc
, 
pcb
;

1154 
n
;

1155 
uöt64_t
 
uŒ
;

1156 * 
u˝
;

1157 
pcb_°r
[
PCB_STR_LEN
];

1159 
num
 = 
Àn
 - 4;

1160 
u˝
 = &
ª•
[0] + 4;

1161 i‡(
num
 < 4) {

1162 
	`¥ötf
("badly formedÅape usageÜogÖage\n");

1165 
	`¥ötf
("Tape usageÜogÖage\n");

1166 
k
 = 
num
; k > 0; k -
exåa
, 
u˝
 +=Éxtra) {

1167 
pc
 = (
u˝
[0] << 8) + ucp[1];

1168 
pcb
 = 
u˝
[2];

1169 
exåa
 = 
u˝
[3] + 4;

1170 
uŒ
 = 
n
 = 0;

1171 
u˝
[3]) {

1173 
n
 = (
u˝
[4] << 8) | ucp[5];

1176 
n
 = (
u˝
[4] << 24) | (ucp[5] << 16) | (ucp[6] << 8) | ucp[7];

1179 
n
 = 0, 
uŒ
 = 
u˝
[4];Ç < 8; ++n) {

1180 
uŒ
 <<8; uŒ |
u˝
[4 + 
n
];

1184 
pc
) {

1186 i‡(
exåa
 == 8)

1187 
	`¥ötf
(" Thªad cou¡: %u", 
n
);

1190 i‡(
exåa
 == 12)

1191 
	`¥ötf
(" TŸÆ d©®£t†wrôãn: %" 
PRIu64
, 
uŒ
);

1194 i‡(
exåa
 == 8)

1195 
	`¥ötf
(" TŸÆ wrôêªåõs: %u", 
n
);

1198 i‡(
exåa
 == 6)

1199 
	`¥ötf
(" TŸÆ uƒecovîed wrôêîr‹s: %u", 
n
);

1202 i‡(
exåa
 == 6)

1203 
	`¥ötf
(" TŸÆ su•íded wrôes: %u", 
n
);

1206 i‡(
exåa
 == 6)

1207 
	`¥ötf
(" TŸÆ f©Æ su•íded wrôes: %u", 
n
);

1210 i‡(
exåa
 == 12)

1211 
	`¥ötf
(" TŸÆ d©®£t†ªad: %" 
PRIu64
, 
uŒ
);

1214 i‡(
exåa
 == 8)

1215 
	`¥ötf
(" TŸÆÑódÑërõs: %u", 
n
);

1218 i‡(
exåa
 == 6)

1219 
	`¥ötf
(" TŸÆ uƒecovîedÑódÉº‹s: %u", 
n
);

1222 i‡(
exåa
 == 6)

1223 
	`¥ötf
(" TŸÆ su•ídedÑóds: %u", 
n
);

1226 i‡(
exåa
 == 6)

1227 
	`¥ötf
(" TŸÆ f©Æ su•ídedÑóds: %u", 
n
);

1230 
	`¥ötf
(" unknow¿∑ømëî codê0x%x, c⁄ã¡†ö hex:\n", 
pc
);

1231 
	`dSåHex
((c⁄° *)
u˝
, 
exåa
, 1);

1234 i‡(
show_pcb
) {

1235 
	`gë_pcb_°r
(
pcb
, 
pcb_°r
, (pcb_str));

1236 
	`¥ötf
("\¿ <%s>\n", 
pcb_°r
);

1238 
	`¥ötf
("\n");

1240 
	}
}

1244 
	$show_è≥_ˇ∑côy_log_∑ge
(* 
ª•
, 
Àn
, 
show_pcb
)

1246 
k
, 
num
, 
exåa
, 
pc
, 
pcb
;

1247 
n
;

1248 * 
u˝
;

1249 
pcb_°r
[
PCB_STR_LEN
];

1251 
num
 = 
Àn
 - 4;

1252 
u˝
 = &
ª•
[0] + 4;

1253 i‡(
num
 < 4) {

1254 
	`¥ötf
("badly formedÅape capacityÜogÖage\n");

1257 
	`¥ötf
("Tape capacityÜogÖage\n");

1258 
k
 = 
num
; k > 0; k -
exåa
, 
u˝
 +=Éxtra) {

1259 
pc
 = (
u˝
[0] << 8) + ucp[1];

1260 
pcb
 = 
u˝
[2];

1261 
exåa
 = 
u˝
[3] + 4;

1262 i‡(
exåa
 != 8)

1264 
n
 = (
u˝
[4] << 24) | (ucp[5] << 16) | (ucp[6] << 8) | ucp[7];

1265 
pc
) {

1267 
	`¥ötf
(" MaöÖ¨tôi⁄Ñemaöög c≠acôy (ö MiB): %u", 
n
);

1270 
	`¥ötf
(" A…î«ãÖ¨tôi⁄Ñemaöög c≠acôy (ö MiB): %u", 
n
);

1273 
	`¥ötf
(" MaöÖ¨tôi⁄ maximum c≠acôy (ö MiB): %u", 
n
);

1276 
	`¥ötf
(" A…î«ãÖ¨tôi⁄ maximum c≠acôy (ö MiB): %u", 
n
);

1279 
	`¥ötf
(" unknow¿∑ømëî codê0x%x, c⁄ã¡†ö hex:\n", 
pc
);

1280 
	`dSåHex
((c⁄° *)
u˝
, 
exåa
, 1);

1283 i‡(
show_pcb
) {

1284 
	`gë_pcb_°r
(
pcb
, 
pcb_°r
, (pcb_str));

1285 
	`¥ötf
("\¿ <%s>\n", 
pcb_°r
);

1287 
	`¥ötf
("\n");

1289 
	}
}

1293 
	$show_d©a_com¥essi⁄_log_∑ge
(* 
ª•
, 
Àn
, 
show_pcb
)

1295 
k
, 
j
, 
∂
, 
num
, 
exåa
, 
pc
, 
pcb
;

1296 
uöt64_t
 
n
;

1297 * 
u˝
;

1298 
pcb_°r
[
PCB_STR_LEN
];

1300 
num
 = 
Àn
 - 4;

1301 
u˝
 = &
ª•
[0] + 4;

1302 i‡(
num
 < 4) {

1303 
	`¥ötf
("badly formed data compressionÜogÖage\n");

1306 
	`¥ötf
("Data compressionÜogÖage\n");

1307 
k
 = 
num
; k > 0; k -
exåa
, 
u˝
 +=Éxtra) {

1308 
pc
 = (
u˝
[0] << 8) + ucp[1];

1309 
pcb
 = 
u˝
[2];

1310 
∂
 = 
u˝
[3];

1311 
exåa
 = 
∂
 + 4;

1312 i‡((0 =
∂
) || (pl > 8)) {

1313 
	`¥ötf
("badly formed data compressionÜogÖarameter\n");

1314 
	`¥ötf
("Ö¨amëî codê0x%x, c⁄ã¡†ö hex:\n", 
pc
);

1315 
	`dSåHex
((c⁄° *)
u˝
, 
exåa
, 1);

1316 
skù_∑ø
;

1318 
j
 = 0, 
n
 = 0; j < 
∂
; ++j) {

1319 i‡(
j
 > 0)

1320 
n
 <<= 8;

1321 
n
 |
u˝
[4 + 
j
];

1323 
pc
) {

1325 
	`¥ötf
(" Ród com¥essi⁄Ñ©iÿx100: %" 
PRIu64
 , 
n
);

1328 
	`¥ötf
(" Wrôêcom¥essi⁄Ñ©iÿx100: %" 
PRIu64
 , 
n
);

1331 
	`¥ötf
(" Megabyã†å™s„ºedÅÿ£rvî: %" 
PRIu64
 , 
n
);

1334 
	`¥ötf
(" Byã†å™s„ºedÅÿ£rvî: %" 
PRIu64
 , 
n
);

1337 
	`¥ötf
(" Megabyã†ªad fromÅ≠e: %" 
PRIu64
 , 
n
);

1340 
	`¥ötf
(" Byã†ªad fromÅ≠e: %" 
PRIu64
 , 
n
);

1343 
	`¥ötf
(" Megabyã†å™s„ºed from sîvî: %" 
PRIu64
 , 
n
);

1346 
	`¥ötf
(" Byã†å™s„ºed from sîvî: %" 
PRIu64
 , 
n
);

1349 
	`¥ötf
(" Megabyã†wrôã¿tÿè≥: %" 
PRIu64
 , 
n
);

1352 
	`¥ötf
(" Byã†wrôã¿tÿè≥: %" 
PRIu64
 , 
n
);

1355 
	`¥ötf
(" D©®com¥essi⁄É«bÀd: 0x%" 
PRIx64
, 
n
);

1358 
	`¥ötf
(" unknow¿∑ømëî codê0x%x, c⁄ã¡†ö hex:\n", 
pc
);

1359 
	`dSåHex
((c⁄° *)
u˝
, 
exåa
, 1);

1362 
skù_∑ø
:

1363 i‡(
show_pcb
) {

1364 
	`gë_pcb_°r
(
pcb
, 
pcb_°r
, (pcb_str));

1365 
	`¥ötf
("\¿ <%s>\n", 
pcb_°r
);

1367 
	`¥ötf
("\n");

1369 
	}
}

1373 
	$show_œ°_n_îr‹_∑ge
(* 
ª•
, 
Àn
, 
show_pcb
)

1375 
k
, 
num
, 
∂
, 
pc
, 
pcb
;

1376 * 
u˝
;

1377 
pcb_°r
[
PCB_STR_LEN
];

1379 
num
 = 
Àn
 - 4;

1380 
u˝
 = &
ª•
[0] + 4;

1381 i‡(
num
 < 4) {

1382 
	`¥ötf
("NoÉrrorÉventsÜogged\n");

1385 
	`¥ötf
("LastÇÉrrorÉventsÜogÖage\n");

1386 
k
 = 
num
; k > 0; k -
∂
, 
u˝
 +=Öl) {

1387 i‡(
k
 < 3) {

1388 
	`¥ötf
("short LastÇÉrrorÉventsÜogÖage\n");

1391 
∂
 = 
u˝
[3] + 4;

1392 
pc
 = (
u˝
[0] << 8) + ucp[1];

1393 
pcb
 = 
u˝
[2];

1394 
	`¥ötf
(" Eº‹Évíà%d:\n", 
pc
);

1395 i‡(
∂
 > 4) {

1396 i‡((
pcb
 & 0x1) && (pcb & 0x2)) {

1397 
	`¥ötf
(" [binary]:\n");

1398 
	`dSåHex
((c⁄° *)
u˝
 + 4, 
∂
 - 4, 1);

1399 } i‡(
pcb
 & 0x1)

1400 
	`¥ötf
(" %.*s\n", 
∂
 - 4, (c⁄° *)(
u˝
 + 4));

1402 
	`¥ötf
(" [data counter?? (LP bit should be set)]:\n");

1403 
	`dSåHex
((c⁄° *)
u˝
 + 4, 
∂
 - 4, 1);

1406 i‡(
show_pcb
) {

1407 
	`gë_pcb_°r
(
pcb
, 
pcb_°r
, (pcb_str));

1408 
	`¥ötf
(" <%s>\n", 
pcb_°r
);

1411 
	}
}

1415 
	$show_œ°_n_de„ºed_îr‹_∑ge
(* 
ª•
, 
Àn
, 
show_pcb
)

1417 
k
, 
num
, 
∂
, 
pc
, 
pcb
;

1418 * 
u˝
;

1419 
pcb_°r
[
PCB_STR_LEN
];

1421 
num
 = 
Àn
 - 4;

1422 
u˝
 = &
ª•
[0] + 4;

1423 i‡(
num
 < 4) {

1424 
	`¥ötf
("No deferredÉrrorsÜogged\n");

1427 
	`¥ötf
("LastÇ deferredÉrrorsÜogÖage\n");

1428 
k
 = 
num
; k > 0; k -
∂
, 
u˝
 +=Öl) {

1429 i‡(
k
 < 3) {

1430 
	`¥ötf
("short LastÇ deferredÉrrorsÜogÖage\n");

1433 
∂
 = 
u˝
[3] + 4;

1434 
pc
 = (
u˝
[0] << 8) + ucp[1];

1435 
pcb
 = 
u˝
[2];

1436 
	`¥ötf
(" De„ºedÉº‹ %d:\n", 
pc
);

1437 
	`dSåHex
((c⁄° *)
u˝
 + 4, 
∂
 - 4, 1);

1438 i‡(
show_pcb
) {

1439 
	`gë_pcb_°r
(
pcb
, 
pcb_°r
, (pcb_str));

1440 
	`¥ötf
(" <%s>\n", 
pcb_°r
);

1443 
	}
}

1445 c⁄° * 
	g£lf_ã°_code
[] = {

1450 c⁄° * 
	g£lf_ã°_ªsu…
[] = {

1465 
	$show_£lf_ã°_∑ge
(* 
ª•
, 
Àn
, 
show_pcb
)

1467 
k
, 
num
, 
n
, 
ªs
, 
pcb
;

1468 * 
u˝
;

1469 
uöt64_t
 
uŒ
;

1470 
pcb_°r
[
PCB_STR_LEN
];

1472 
num
 = 
Àn
 - 4;

1473 i‡(
num
 < 0x190) {

1474 
	`¥ötf
("short self-testÑesultsÖage [length 0x%xÑatherÅhan "

1475 "0x190 byãs]\n", 
num
);

1478 
	`¥ötf
("Self-testÑesultsÖage\n");

1479 
k
 = 0, 
u˝
 = 
ª•
 + 4; k < 20; ++k, ucp += 20 ) {

1480 
pcb
 = 
u˝
[2];

1481 
n
 = (
u˝
[6] << 8) | ucp[7];

1482 i‡((0 =
n
Ë&& (0 =
u˝
[4]))

1484 
	`¥ötf
(" Parameter code = %d,áccumulatedÖower-on hours = %d\n",

1485 (
u˝
[0] << 8Ë| u˝[1], 
n
);

1486 
	`¥ötf
(" self-test code: %s [%d]\n",

1487 
£lf_ã°_code
[(
u˝
[4] >> 5) & 0x7], (ucp[4] >> 5) & 0x7);

1488 
ªs
 = 
u˝
[4] & 0xf;

1489 
	`¥ötf
(" self-testÑesult: %s [%d]\n",

1490 
£lf_ã°_ªsu…
[
ªs
],Ñes);

1491 i‡(
u˝
[5])

1492 
	`¥ötf
(" sñf-ã°Çumbî = %d\n", ()
u˝
[5]);

1493 
uŒ
 = 
u˝
[8]; ull <<= 8; ull |= ucp[9]; ull <<= 8; ull |= ucp[10];

1494 
uŒ
 <<8; uŒ |
u˝
[11]; ull <<= 8; ull |= ucp[12];

1495 
uŒ
 <<8; uŒ |
u˝
[13]; ull <<= 8; ull |= ucp[14];

1496 
uŒ
 <<8; uŒ |
u˝
[15];

1497 i‡((0xffffffffffffffffULL !
uŒ
Ë&& (
ªs
 > 0) && (Ñes < 0xf))

1498 
	`¥ötf
("áddªs†o‡fú°Éº‹ = 0x%" 
PRIx64
 "\n", 
uŒ
);

1499 i‡(
u˝
[16] & 0xf)

1500 
	`¥ötf
(" sense key = 0x%x,ásc = 0x%x,ásq = 0x%x",

1501 
u˝
[16] & 0xf, ucp[17], ucp[18]);

1502 i‡(
show_pcb
) {

1503 
	`gë_pcb_°r
(
pcb
, 
pcb_°r
, (pcb_str));

1504 
	`¥ötf
("\¿ <%s>\n", 
pcb_°r
);

1506 
	`¥ötf
("\n");

1508 
	}
}

1512 
	$show_ãm≥øtuª_∑ge
(* 
ª•
, 
Àn
, 
show_pcb
, 
hdr
,

1513 
show_unknown
)

1515 
k
, 
num
, 
exåa
, 
pc
, 
pcb
;

1516 * 
u˝
;

1517 
pcb_°r
[
PCB_STR_LEN
];

1519 
num
 = 
Àn
 - 4;

1520 
u˝
 = &
ª•
[0] + 4;

1521 i‡(
num
 < 4) {

1522 
	`¥ötf
("badly formed TemperatureÜogÖage\n");

1525 i‡(
hdr
)

1526 
	`¥ötf
("TemperatureÜogÖage\n");

1527 
k
 = 
num
; k > 0; k -
exåa
, 
u˝
 +=Éxtra) {

1528 i‡(
k
 < 3) {

1529 
	`¥ötf
("short TemperatureÜogÖage\n");

1532 
exåa
 = 
u˝
[3] + 4;

1533 
pc
 = (
u˝
[0] << 8) + ucp[1];

1534 
pcb
 = 
u˝
[2];

1535 i‡(0 =
pc
) {

1536 i‡((
exåa
 > 5Ë&& (
k
 > 5)) {

1537 i‡(
u˝
[5] < 0xff)

1538 
	`¥ötf
(" Cuºíàãm≥øtuª = %d C", 
u˝
[5]);

1540 
	`¥ötf
(" CurrentÅemperature = <notávailable>");

1542 } i‡(1 =
pc
) {

1543 i‡((
exåa
 > 5Ë&& (
k
 > 5)) {

1544 i‡(
u˝
[5] < 0xff)

1545 
	`¥ötf
(" Re„ªn˚Åem≥øtuª = %d C", 
u˝
[5]);

1547 
	`¥ötf
(" ReferenceÅemperature = <notávailable>");

1550 } i‡(
show_unknown
) {

1551 
	`¥ötf
(" unknow¿∑ømëî codê0x%x, c⁄ã¡†ö hex:\n", 
pc
);

1552 
	`dSåHex
((c⁄° *)
u˝
, 
exåa
, 1);

1555 i‡(
show_pcb
) {

1556 
	`gë_pcb_°r
(
pcb
, 
pcb_°r
, (pcb_str));

1557 
	`¥ötf
("\¿ <%s>\n", 
pcb_°r
);

1559 
	`¥ötf
("\n");

1561 
	}
}

1565 
	$show_°¨t_°›_∑ge
(* 
ª•
, 
Àn
, 
show_pcb
, 
vîbo£
)

1567 
k
, 
num
, 
exåa
, 
pc
, 
pcb
;

1568 
n
;

1569 * 
u˝
;

1570 
pcb_°r
[
PCB_STR_LEN
];

1572 
num
 = 
Àn
 - 4;

1573 
u˝
 = &
ª•
[0] + 4;

1574 i‡(
num
 < 4) {

1575 
	`¥ötf
("badly formed Start-stop cycle counterÜogÖage\n");

1578 
	`¥ötf
("Start-stop cycle counterÜogÖage\n");

1579 
k
 = 
num
; k > 0; k -
exåa
, 
u˝
 +=Éxtra) {

1580 i‡(
k
 < 3) {

1581 
	`¥ötf
("short Start-stop cycle counterÜogÖage\n");

1584 
exåa
 = 
u˝
[3] + 4;

1585 
pc
 = (
u˝
[0] << 8) + ucp[1];

1586 
pcb
 = 
u˝
[2];

1587 
pc
) {

1589 i‡(10 =
exåa
)

1590 
	`¥ötf
(" Date of manufacture, year: %.4s, week: %.2s",

1591 &
u˝
[4], &ucp[8]);

1592 i‡(
vîbo£
) {

1593 
	`¥ötf
(" Date of manufactureÖarameterÜength "

1594 "°ønge: %d\n", 
exåa
 - 4);

1595 
	`dSåHex
((c⁄° *)
u˝
, 
exåa
, 1);

1599 i‡(10 =
exåa
)

1600 
	`¥ötf
(" Accounting date, year: %.4s, week: %.2s",

1601 &
u˝
[4], &ucp[8]);

1602 i‡(
vîbo£
) {

1603 
	`¥ötf
(" Accounting dateÖarameterÜength strange: %d\n",

1604 
exåa
 - 4);

1605 
	`dSåHex
((c⁄° *)
u˝
, 
exåa
, 1);

1609 i‡(
exåa
 > 7) {

1610 
n
 = (
u˝
[4] << 24) | (ucp[5] << 16) | (ucp[6] << 8) | ucp[7];

1611 i‡(0xfffffff‡=
n
)

1612 
	`¥ötf
(" Specified cycle count over deviceÜifetime "

1615 
	`¥ötf
(" Specified cycle count over deviceÜifetime "

1616 "%u", 
n
);

1620 i‡(
exåa
 > 7) {

1621 
n
 = (
u˝
[4] << 24) | (ucp[5] << 16) | (ucp[6] << 8) | ucp[7];

1622 i‡(0xfffffff‡=
n
)

1623 
	`¥ötf
(" Accumulated start-stop cycles = -1");

1625 
	`¥ötf
(" Accumuœãd sèπ-°› cy˛e†%u", 
n
);

1629 i‡(
exåa
 > 7) {

1630 
n
 = (
u˝
[4] << 24) | (ucp[5] << 16) | (ucp[6] << 8) | ucp[7];

1631 i‡(0xfffffff‡=
n
)

1632 
	`¥ötf
(" SpecifiedÜoad-unload count over device "

1635 
	`¥ötf
(" SpecifiedÜoad-unload count over device "

1636 "li„timê%u", 
n
);

1640 i‡(
exåa
 > 7) {

1641 
n
 = (
u˝
[4] << 24) | (ucp[5] << 16) | (ucp[6] << 8) | ucp[7];

1642 i‡(0xfffffff‡=
n
)

1643 
	`¥ötf
(" AccumulatedÜoad-unload cycles = -1");

1645 
	`¥ötf
(" AccumuœãdÜﬂd-u∆ﬂd cy˛e†%u", 
n
);

1649 
	`¥ötf
(" unknow¿∑ømëî codê0x%x, c⁄ã¡†ö hex:\n", 
pc
);

1650 
	`dSåHex
((c⁄° *)
u˝
, 
exåa
, 1);

1653 i‡(
show_pcb
) {

1654 
	`gë_pcb_°r
(
pcb
, 
pcb_°r
, (pcb_str));

1655 
	`¥ötf
("\¿ <%s>\n", 
pcb_°r
);

1657 
	`¥ötf
("\n");

1659 
	}
}

1663 
	$show_õ_∑ge
(* 
ª•
, 
Àn
, 
show_pcb
, 
fuŒ
)

1665 
k
, 
num
, 
exåa
, 
pc
, 
pcb
;

1666 * 
u˝
;

1667 
pcb_°r
[
PCB_STR_LEN
];

1668 
b
[256];

1670 
num
 = 
Àn
 - 4;

1671 
u˝
 = &
ª•
[0] + 4;

1672 i‡(
num
 < 4) {

1673 
	`¥ötf
("badly formed Informational ExceptionsÜogÖage\n");

1676 i‡(
fuŒ
)

1677 
	`¥ötf
("Informational ExceptionsÜogÖage\n");

1678 
k
 = 
num
; k > 0; k -
exåa
, 
u˝
 +=Éxtra) {

1679 i‡(
k
 < 3) {

1680 
	`¥ötf
("short Informational ExceptionsÜogÖage\n");

1683 
exåa
 = 
u˝
[3] + 4;

1684 
pc
 = (
u˝
[0] << 8) + ucp[1];

1685 
pcb
 = 
u˝
[2];

1686 i‡(0 =
pc
) {

1687 i‡(
exåa
 > 5) {

1688 i‡(
fuŒ
) {

1689 
	`¥ötf
(" IEás¯0x%x,áscq = 0x%x", 
u˝
[4], ucp[5]);

1690 i‡(
u˝
[4]) {

1691 if(
	`sg_gë_asc_ascq_°r
(
u˝
[4], u˝[5], (
b
), b))

1692 
	`¥ötf
("\¿ [%s]", 
b
);

1695 i‡(
exåa
 > 6) {

1696 i‡(
u˝
[6] < 0xff)

1697 
	`¥ötf
("\¿ Cuºíàãm≥øtuª = %d C", 
u˝
[6]);

1699 
	`¥ötf
("\n CurrentÅemperature = <notávailable>");

1700 i‡(
exåa
 > 7) {

1701 i‡(
u˝
[7] < 0xff)

1702 
	`¥ötf
("\n ThresholdÅemperature = %d C [IBM "

1703 "exãnsi⁄]", 
u˝
[7]);

1705 
	`¥ötf
("\n ThresholdÅemperature = <not "

1710 } i‡(
fuŒ
) {

1711 
	`¥ötf
("Ö¨amëî codê0x%x, c⁄ã¡†ö hex:\n", 
pc
);

1712 
	`dSåHex
((c⁄° *)
u˝
, 
exåa
, 1);

1714 i‡(
show_pcb
) {

1715 
	`gë_pcb_°r
(
pcb
, 
pcb_°r
, (pcb_str));

1716 
	`¥ötf
("\¿ <%s>\n", 
pcb_°r
);

1718 
	`¥ötf
("\n");

1720 
	}
}

1724 
	$show_ßs_phy_evít_öfo
(
≥s
, 
vÆ
, 
thªsh_vÆ
)

1726 
u
;

1728 
≥s
) {

1730 
	`¥ötf
(" NoÉvent\n");

1733 
	`¥ötf
(" InvÆid w‹d cou¡: %u\n", 
vÆ
);

1736 
	`¥ötf
(" Ru¬ög di•¨ôyÉº‹ cou¡: %u\n", 
vÆ
);

1739 
	`¥ötf
(" Los†o‡dw‹d synchr⁄iz©i⁄ cou¡: %u\n", 
vÆ
);

1742 
	`¥ötf
(" PhyÑe£à¥obÀm cou¡: %u\n", 
vÆ
);

1745 
	`¥ötf
(" Eœ°icôy buf„∏ovîÊow cou¡: %u\n", 
vÆ
);

1748 
	`¥ötf
(" Re˚ived ERROR cou¡: %u\n", 
vÆ
);

1751 
	`¥ötf
(" Re˚ivedáddªs†‰amêîr‹ cou¡: %u\n", 
vÆ
);

1754 
	`¥ötf
(" Tønsmôãdáb™d⁄-˛as†OPEN_REJECT cou¡: %u\n", 
vÆ
);

1757 
	`¥ötf
(" Re˚ivedáb™d⁄-˛as†OPEN_REJECT cou¡: %u\n", 
vÆ
);

1760 
	`¥ötf
(" TønsmôãdÑëry-˛as†OPEN_REJECT cou¡: %u\n", 
vÆ
);

1763 
	`¥ötf
(" Re˚ivedÑëry-˛as†OPEN_REJECT cou¡: %u\n", 
vÆ
);

1766 
	`¥ötf
(" Re˚ived AIP (WATING ON PARTIALËcou¡: %u\n", 
vÆ
);

1769 
	`¥ötf
(" Re˚ived AIP (WAITING ON CONNECTIONËcou¡: %u\n", 
vÆ
);

1772 
	`¥ötf
(" Tønsmôãd BREAK cou¡: %u\n", 
vÆ
);

1775 
	`¥ötf
(" Re˚ived BREAK cou¡: %u\n", 
vÆ
);

1778 
	`¥ötf
(" BªakÅimeouàcou¡: %u\n", 
vÆ
);

1781 
	`¥ötf
(" C⁄√˘i⁄ cou¡: %u\n", 
vÆ
);

1784 
	`¥ötf
(" PeakÅransmittedÖathway blocked count: %u\n",

1785 
vÆ
 & 0xff);

1786 
	`¥ötf
(" Peak value detectorÅhreshold: %u\n",

1787 
thªsh_vÆ
 & 0xff);

1790 
u
 = 
vÆ
 & 0xffff;

1791 i‡(
u
 < 0x8000)

1792 
	`¥ötf
(" PeakÅransmittedárbitration waitÅime (us): "

1793 "%u\n", 
u
);

1795 
	`¥ötf
(" PeakÅransmittedárbitration waitÅime (ms): "

1796 "%u\n", 33 + (
u
 - 0x8000));

1797 
u
 = 
thªsh_vÆ
 & 0xffff;

1798 i‡(
u
 < 0x8000)

1799 
	`¥ötf
(" Peak value detectorÅhreshold (us): %u\n",

1800 
u
);

1802 
	`¥ötf
(" Peak value detectorÅhreshold (ms): %u\n",

1803 33 + (
u
 - 0x8000));

1806 
	`¥ötf
(" Pókárbôøti⁄Åimê(us): %u\n", 
vÆ
);

1807 
	`¥ötf
(" Pók vÆuêdëe˘‹Åhªshﬁd: %u\n", 
thªsh_vÆ
);

1810 
	`¥ötf
(" Pók c⁄√˘i⁄Åimê(us): %u\n", 
vÆ
);

1811 
	`¥ötf
(" Pók vÆuêdëe˘‹Åhªshﬁd: %u\n", 
thªsh_vÆ
);

1814 
	`¥ötf
(" Tønsmôãd SSP fømêcou¡: %u\n", 
vÆ
);

1817 
	`¥ötf
(" Re˚ived SSP fømêcou¡: %u\n", 
vÆ
);

1820 
	`¥ötf
(" Tønsmôãd SSP fømêîr‹ cou¡: %u\n", 
vÆ
);

1823 
	`¥ötf
(" Re˚ived SSP fømêîr‹ cou¡: %u\n", 
vÆ
);

1826 
	`¥ötf
(" Tønsmôãd CREDIT_BLOCKED cou¡: %u\n", 
vÆ
);

1829 
	`¥ötf
(" Re˚ived CREDIT_BLOCKED cou¡: %u\n", 
vÆ
);

1832 
	`¥ötf
(" Tønsmôãd SATA fømêcou¡: %u\n", 
vÆ
);

1835 
	`¥ötf
(" Re˚ived SATA fømêcou¡: %u\n", 
vÆ
);

1838 
	`¥ötf
(" SATA flow c⁄åﬁ buf„∏ovîÊow cou¡: %u\n", 
vÆ
);

1841 
	`¥ötf
(" Tønsmôãd SMP fømêcou¡: %u\n", 
vÆ
);

1844 
	`¥ötf
(" Re˚ived SMP fømêcou¡: %u\n", 
vÆ
);

1847 
	`¥ötf
(" Re˚ived SMP fømêîr‹ cou¡: %u\n", 
vÆ
);

1850 
	`¥ötf
(" UnknownÖhyÉvent source: %d, val=%u,Åhresh_val=%u\n",

1851 
≥s
, 
vÆ
, 
thªsh_vÆ
);

1854 
	}
}

1858 
	$show_ßs_p‹t_∑øm
(* 
u˝
, 
∑øm_Àn
,

1859 c⁄° 
›ts_t
 * 
›t•
)

1861 
j
, 
m
, 
n
, 
≈hys
, 
pcb
, 
t
, 
sz
, 
•ld_Àn
;

1862 * 
v˝
;

1863 
uöt64_t
 
uŒ
;

1864 
ui
;

1865 
pcb_°r
[
PCB_STR_LEN
];

1866 
s
[64];

1868 
sz
 = (
s
);

1869 
pcb
 = 
u˝
[2];

1870 
t
 = (
u˝
[0] << 8) | ucp[1];

1871 i‡(
›t•
->
do_«me
)

1872 
	`¥ötf
("ªl_èrgë_p‹t=%d\n", 
t
);

1874 
	`¥ötf
("ªœtivêèrgëÖ‹àid = %d\n", 
t
);

1875 i‡(
›t•
->
do_«me
)

1876 
	`¥ötf
(" gí_code=%d\n", 
u˝
[6]);

1878 
	`¥ötf
(" gíî©i⁄ codê%d\n", 
u˝
[6]);

1879 
≈hys
 = 
u˝
[7];

1880 i‡(
›t•
->
do_«me
)

1881 
	`¥ötf
("Çum_phys=%d\n", 
≈hys
);

1883 
	`¥ötf
("Çumbî o‡phy†%d", 
≈hys
);

1884 i‡((
›t•
->
do_pcb
Ë&& (0 =›t•->
do_«me
)) {

1885 
	`gë_pcb_°r
(
pcb
, 
pcb_°r
, (pcb_str));

1886 
	`¥ötf
("\¿ <%s>\n", 
pcb_°r
);

1888 
	`¥ötf
("\n");

1891 
j
 = 0, 
v˝
 = 
u˝
 + 8; j < (
∑øm_Àn
 - 8);

1892 
v˝
 +
•ld_Àn
, 
j
 += spld_len) {

1893 i‡(
›t•
->
do_«me
)

1894 
	`¥ötf
("Öhy_id=%d\n", 
v˝
[1]);

1896 
	`¥ötf
("Öhy idítifõ∏%d\n", 
v˝
[1]);

1897 
•ld_Àn
 = 
v˝
[3];

1898 i‡(
•ld_Àn
 < 44)

1899 
•ld_Àn
 = 48;

1901 
•ld_Àn
 += 4;

1902 i‡(
›t•
->
do_«me
) {

1903 
t
 = ((0x70 & 
v˝
[4]) >> 4);

1904 
	`¥ötf
("áâ_dev_ty≥=%d\n", 
t
);

1905 
	`¥ötf
("áâ_ù‹t_mask=0x%x\n", 
v˝
[6]);

1906 
	`¥ötf
("áâ_phy_id=%d\n", 
v˝
[24]);

1907 
	`¥ötf
("áâ_ªas⁄=0x%x\n", (
v˝
[4] & 0xf));

1908 
n
 = 0, 
uŒ
 = 
v˝
[16];Ç < 8; ++n) {

1909 
uŒ
 <<8; uŒ |
v˝
[16 + 
n
];

1911 
	`¥ötf
("áâ_ßs_addr=0x%" 
PRIx64
 "\n", 
uŒ
);

1912 
	`¥ötf
("áâ_ç‹t_mask=0x%x\n", 
v˝
[7]);

1913 
ui
 = (
v˝
[32] << 24) | (vcp[33] << 16) | (vcp[34] << 8) | vcp[35];

1914 
	`¥ötf
(" inv_dw‹ds=%u\n", 
ui
);

1915 
ui
 = (
v˝
[40] << 24) | (vcp[41] << 16) | (vcp[42] << 8) | vcp[43];

1916 
	`¥ötf
("Üoss_dw‹d_sync=%u\n", 
ui
);

1917 
	`¥ötf
("Çeg_log_Ã©e=%d\n", 0x‡& 
v˝
[5]);

1918 
ui
 = (
v˝
[44] << 24) | (vcp[45] << 16) | (vcp[46] << 8) | vcp[47];

1919 
	`¥ötf
("Öhy_ª£t_¥obs=%u\n", 
ui
);

1920 
ui
 = (
v˝
[36] << 24) | (vcp[37] << 16) | (vcp[38] << 8) | vcp[39];

1921 
	`¥ötf
("Ñu¬ög_di•¨ôy=%u\n", 
ui
);

1922 
	`¥ötf
("Ñós⁄=0x%x\n", (
v˝
[5] & 0xf0) >> 4);

1923 
n
 = 0, 
uŒ
 = 
v˝
[8];Ç < 8; ++n) {

1924 
uŒ
 <<8; uŒ |
v˝
[8 + 
n
];

1926 
	`¥ötf
(" sas_addr=0x%" 
PRIx64
 "\n", 
uŒ
);

1928 
t
 = ((0x70 & 
v˝
[4]) >> 4);

1931 
t
) {

1932 0: 
	`¢¥ötf
(
s
, 
sz
, "no deviceáttached"); ;

1933 1: 
	`¢¥ötf
(
s
, 
sz
, "end device"); ;

1934 2: 
	`¢¥ötf
(
s
, 
sz
, "expander device"); ;

1935 3: 
	`¢¥ötf
(
s
, 
sz
, "expander device (fanout)"); ;

1936 : 
	`¢¥ötf
(
s
, 
sz
, "ª£rved [%d]", 
t
); ;

1938 
	`¥ötf
("áâached devi˚Åy≥: %s\n", 
s
);

1939 
t
 = 0x‡& 
v˝
[4];

1940 
t
) {

1941 0: 
	`¢¥ötf
(
s
, 
sz
, "unknown"); ;

1942 1: 
	`¢¥ötf
(
s
, 
sz
, "power on"); ;

1943 2: 
	`¢¥ötf
(
s
, 
sz
, "hardÑeset"); ;

1944 3: 
	`¢¥ötf
(
s
, 
sz
, "SMPÖhy control function"); ;

1945 4: 
	`¢¥ötf
(
s
, 
sz
, "loss of dword synchronization"); ;

1946 5: 
	`¢¥ötf
(
s
, 
sz
, "mux mix up"); ;

1947 6: 
	`¢¥ötf
(
s
, 
sz
, "I_TÇexusÜossÅimeout for STP/SATA");

1949 7: 
	`¢¥ötf
(
s
, 
sz
, "breakÅimeoutÅimerÉxpired"); ;

1950 8: 
	`¢¥ötf
(
s
, 
sz
, "phyÅest function stopped"); ;

1951 9: 
	`¢¥ötf
(
s
, 
sz
, "expander deviceÑeduced functionality");

1953 : 
	`¢¥ötf
(
s
, 
sz
, "ª£rved [0x%x]", 
t
); ;

1955 
	`¥ötf
("áâachedÑós⁄: %s\n", 
s
);

1956 
t
 = (
v˝
[5] & 0xf0) >> 4;

1957 
t
) {

1958 0: 
	`¢¥ötf
(
s
, 
sz
, "unknown"); ;

1959 1: 
	`¢¥ötf
(
s
, 
sz
, "power on"); ;

1960 2: 
	`¢¥ötf
(
s
, 
sz
, "hardÑeset"); ;

1961 3: 
	`¢¥ötf
(
s
, 
sz
, "SMPÖhy control function"); ;

1962 4: 
	`¢¥ötf
(
s
, 
sz
, "loss of dword synchronization"); ;

1963 5: 
	`¢¥ötf
(
s
, 
sz
, "mux mix up"); ;

1964 6: 
	`¢¥ötf
(
s
, 
sz
, "I_TÇexusÜossÅimeout for STP/SATA");

1966 7: 
	`¢¥ötf
(
s
, 
sz
, "breakÅimeoutÅimerÉxpired"); ;

1967 8: 
	`¢¥ötf
(
s
, 
sz
, "phyÅest function stopped"); ;

1968 9: 
	`¢¥ötf
(
s
, 
sz
, "expander deviceÑeduced functionality");

1970 : 
	`¢¥ötf
(
s
, 
sz
, "ª£rved [0x%x]", 
t
); ;

1972 
	`¥ötf
("Ñós⁄: %s\n", 
s
);

1973 
t
 = (0x‡& 
v˝
[5]);

1974 
t
) {

1976 
	`¢¥ötf
(
s
, 
sz
, "phyÉnabled; unknownÑeason");

1979 
	`¢¥ötf
(
s
, 
sz
, "phy disabled");

1982 
	`¢¥ötf
(
s
, 
sz
, "phyÉnabled; speedÇegotiation failed");

1985 
	`¢¥ötf
(
s
, 
sz
, "phyÉnabled; SATA spinup hold state");

1988 
	`¢¥ötf
(
s
, 
sz
, "phyÉnabled;Öort selector");

1991 
	`¢¥ötf
(
s
, 
sz
, "phyÉnabled;Ñeset inÖrogress");

1994 
	`¢¥ötf
(
s
, 
sz
, "phyÉnabled; unsupportedÖhyáttached");

1997 
	`¢¥ötf
(
s
, 
sz
, "1.5 Gbps");

2000 
	`¢¥ötf
(
s
, 
sz
, "3 Gbps");

2003 
	`¢¥ötf
(
s
, 
sz
, "6 Gbps");

2006 
	`¢¥ötf
(
s
, 
sz
, "12 Gbps");

2009 
	`¢¥ötf
(
s
, 
sz
, "ª£rved [%d]", 
t
);

2012 
	`¥ötf
("ÇegŸüãdÜogiˇ»lökÑ©e: %s\n", 
s
);

2013 
	`¥ötf
("áttached initiatorÖort: ssp=%d stp=%d smp=%d\n",

2014 !! (
v˝
[6] & 8), !! (vcp[6] & 4), !! (vcp[6] & 2));

2015 
	`¥ötf
("áttachedÅargetÖort: ssp=%d stp=%d smp=%d\n",

2016 !! (
v˝
[7] & 8), !! (vcp[7] & 4), !! (vcp[7] & 2));

2017 
n
 = 0, 
uŒ
 = 
v˝
[8];Ç < 8; ++n) {

2018 
uŒ
 <<8; uŒ |
v˝
[8 + 
n
];

2020 
	`¥ötf
(" SASáddªs†0x%" 
PRIx64
 "\n", 
uŒ
);

2021 
n
 = 0, 
uŒ
 = 
v˝
[16];Ç < 8; ++n) {

2022 
uŒ
 <<8; uŒ |
v˝
[16 + 
n
];

2024 
	`¥ötf
("áâached SASáddªs†0x%" 
PRIx64
 "\n", 
uŒ
);

2025 
	`¥ötf
("áâachedÖhy idítifõ∏%d\n", 
v˝
[24]);

2026 
ui
 = (
v˝
[32] << 24) | (vcp[33] << 16) | (vcp[34] << 8) | vcp[35];

2027 
	`¥ötf
(" InvÆid DWORD cou¡ = %u\n", 
ui
);

2028 
ui
 = (
v˝
[36] << 24) | (vcp[37] << 16) | (vcp[38] << 8) | vcp[39];

2029 
	`¥ötf
(" Ru¬ög di•¨ôyÉº‹ cou¡ = %u\n", 
ui
);

2030 
ui
 = (
v˝
[40] << 24) | (vcp[41] << 16) | (vcp[42] << 8) | vcp[43];

2031 
	`¥ötf
(" Los†o‡DWORD synchr⁄iz©i⁄ = %u\n", 
ui
);

2032 
ui
 = (
v˝
[44] << 24) | (vcp[45] << 16) | (vcp[46] << 8) | vcp[47];

2033 
	`¥ötf
(" PhyÑe£à¥obÀm = %u\n", 
ui
);

2035 i‡(
•ld_Àn
 > 51) {

2036 
num_≥d
, 
≥s
;

2037 * 
x˝
;

2038 
pvdt
;

2040 
num_≥d
 = 
v˝
[51];

2041 i‡(
›t•
->
do_vîbo£
 > 1)

2042 
	`¥ötf
(" <<PhyÉvent descriptors: %d, spld_len: %d, "

2043 "ˇlc_≥d: %d>>\n", 
num_≥d
, 
•ld_Àn
,

2044 (
•ld_Àn
 - 52) / 12);

2045 i‡(
num_≥d
 > 0) {

2046 i‡(
›t•
->
do_«me
) {

2047 
	`¥ötf
("Öhy_evít_desc_num=%d\n", 
num_≥d
);

2050 
	`¥ötf
(" PhyÉvent descriptors:\n");

2052 
x˝
 = 
v˝
 + 52;

2053 
m
 = 0; m < (
num_≥d
 * 12); m +12, 
x˝
 += 12) {

2054 
≥s
 = 
x˝
[3];

2055 
ui
 = (
x˝
[4] << 24) | (xcp[5] << 16) | (xcp[6] << 8) |

2056 
x˝
[7];

2057 
pvdt
 = (
x˝
[8] << 24) | (xcp[9] << 16) | (xcp[10] << 8) |

2058 
x˝
[11];

2059 
	`show_ßs_phy_evít_öfo
(
≥s
, 
ui
, 
pvdt
);

2061 } i‡(
›t•
->
do_vîbo£
)

2062 
	`¥ötf
(" <<NoÖhyÉvent descriptors>>\n");

2064 
	}
}

2068 
	$show_¥Ÿocﬁ_•ecific_∑ge
(* 
ª•
, 
Àn
,

2069 c⁄° 
›ts_t
 * 
›t•
)

2071 
k
, 
num
, 
∑øm_Àn
;

2072 * 
u˝
;

2074 
num
 = 
Àn
 - 4;

2075 i‡(
›t•
->
do_«me
)

2076 
	`¥ötf
("log_∑ge=0x%x\n", 
PROTO_SPECIFIC_LPAGE
);

2077 
k
 = 0, 
u˝
 = 
ª•
 + 4; k < 
num
; ) {

2078 
∑øm_Àn
 = 
u˝
[3] + 4;

2079 i‡(6 !(0x‡& 
u˝
[4]))

2081 i‡((0 =
k
Ë&& (0 =
›t•
->
do_«me
))

2082 
	`¥ötf
("Protocol SpecificÖortÜogÖage for SAS SSP\n");

2083 
	`show_ßs_p‹t_∑øm
(
u˝
, 
∑øm_Àn
, 
›t•
);

2084 
k
 +
∑øm_Àn
;

2085 
u˝
 +
∑øm_Àn
;

2088 
	}
}

2093 
	$show_°©s_≥rf‹m_∑ge
(* 
ª•
, 
Àn
,

2094 c⁄° 
›ts_t
 * 
›t•
)

2096 
k
, 
num
, 
n
, 
∑øm_Àn
, 
∑øm_code
, 
•f
, 
subpg_code
, 
exåa
;

2097 
pcb
, 
«m
;

2098 * 
u˝
;

2099 c⁄° * 
c˝
;

2100 
uöt64_t
 
uŒ
;

2101 
pcb_°r
[
PCB_STR_LEN
];

2103 
«m
 = 
›t•
->
do_«me
;

2104 
num
 = 
Àn
 - 4;

2105 
u˝
 = 
ª•
 + 4;

2106 
•f
 = !!(
ª•
[0] & 0x40);

2107 
subpg_code
 = 
•f
 ? 
ª•
[1] : 0;

2108 i‡(
«m
) {

2109 
	`¥ötf
("log_∑ge=0x%x\n", 
STATS_LPAGE
);

2110 i‡(
subpg_code
 > 0)

2111 
	`¥ötf
("log_sub∑ge=0x%x\n", 
subpg_code
);

2113 i‡(
subpg_code
 > 31)

2115 i‡(0 =
subpg_code
) {

2116 i‡(
num
 < 0x5c)

2118 
k
 = 
num
; k > 0; k -
exåa
, 
u˝
 +=Éxtra) {

2119 i‡(
k
 < 3)

2121 
∑øm_Àn
 = 
u˝
[3];

2122 
exåa
 = 
∑øm_Àn
 + 4;

2123 
∑øm_code
 = (
u˝
[0] << 8) + ucp[1];

2124 
pcb
 = 
u˝
[2];

2125 
∑øm_code
) {

2127 
c˝
 = 
«m
 ? "parameter_code=1" : "StatisticsándÖerformance "

2129 
	`¥ötf
("%s\n", 
c˝
);

2130 
n
 = 0, 
uŒ
 = 
u˝
[4];Ç < 8; ++n) {

2131 
uŒ
 <<8; uŒ |
u˝
[4 + 
n
];

2133 
c˝
 = 
«m
 ? "read_commands=" : "number ofÑead commands = ";

2134 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2135 
n
 = 0, 
uŒ
 = 
u˝
[12];Ç < 8; ++n) {

2136 
uŒ
 <<8; uŒ |
u˝
[12 + 
n
];

2138 
c˝
 = 
«m
 ? "write_commands=" : "number of write commands = ";

2139 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2140 
n
 = 0, 
uŒ
 = 
u˝
[20];Ç < 8; ++n) {

2141 
uŒ
 <<8; uŒ |
u˝
[20 + 
n
];

2143 
c˝
 = 
«m
 ? "lb_received="

2145 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2146 
n
 = 0, 
uŒ
 = 
u˝
[28];Ç < 8; ++n) {

2147 
uŒ
 <<8; uŒ |
u˝
[28 + 
n
];

2149 
c˝
 = 
«m
 ? "lb_transmitted="

2151 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2152 
n
 = 0, 
uŒ
 = 
u˝
[36];Ç < 8; ++n) {

2153 
uŒ
 <<8; uŒ |
u˝
[36 + 
n
];

2155 
c˝
 = 
«m
 ? "read_proc_intervals="

2157 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2158 
n
 = 0, 
uŒ
 = 
u˝
[44];Ç < 8; ++n) {

2159 
uŒ
 <<8; uŒ |
u˝
[44 + 
n
];

2161 
c˝
 = 
«m
 ? "write_proc_intervals="

2163 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2164 
n
 = 0, 
uŒ
 = 
u˝
[52];Ç < 8; ++n) {

2165 
uŒ
 <<8; uŒ |
u˝
[52 + 
n
];

2167 
c˝
 = 
«m
 ? "weight_rw_commands=" : "weightedÇumber of "

2169 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2170 
n
 = 0, 
uŒ
 = 
u˝
[60];Ç < 8; ++n) {

2171 
uŒ
 <<8; uŒ |
u˝
[60 + 
n
];

2173 
c˝
 = 
«m
 ? "weight_rw_processing=" : "weightedÑead command "

2175 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2178 
c˝
 = 
«m
 ? "parameter_code=2" : "IdleÅimeÜogÖarameter";

2179 
	`¥ötf
("%s\n", 
c˝
);

2180 
n
 = 0, 
uŒ
 = 
u˝
[4];Ç < 8; ++n) {

2181 
uŒ
 <<8; uŒ |
u˝
[4 + 
n
];

2183 
c˝
 = 
«m
 ? "idle_time_intervals=" : "idleÅime "

2185 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2188 
c˝
 = 
«m
 ? "parameter_code=3" : "Time intervalÜog "

2190 
	`¥ötf
("%s\n", 
c˝
);

2191 
n
 = 0, 
uŒ
 = 
u˝
[4];Ç < 4; ++n) {

2192 
uŒ
 <<8; uŒ |
u˝
[4 + 
n
];

2194 
c˝
 = 
«m
 ? "time_interval_neg_exp=" : "time interval "

2196 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2197 
n
 = 0, 
uŒ
 = 
u˝
[8];Ç < 4; ++n) {

2198 
uŒ
 <<8; uŒ |
u˝
[8 + 
n
];

2200 
c˝
 = 
«m
 ? "time_interval_int=" : "time interval "

2202 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2205 
c˝
 = 
«m
 ? "parameter_code=4" : "Force unitáccess "

2207 
	`¥ötf
("%s\n", 
c˝
);

2208 
n
 = 0, 
uŒ
 = 
u˝
[4];Ç < 8; ++n) {

2209 
uŒ
 <<8; uŒ |
u˝
[4 + 
n
];

2211 
c˝
 = 
«m
 ? "read_fua_commands=" : "number ofÑead FUA "

2213 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2214 
n
 = 0, 
uŒ
 = 
u˝
[12];Ç < 8; ++n) {

2215 
uŒ
 <<8; uŒ |
u˝
[12 + 
n
];

2217 
c˝
 = 
«m
 ? "write_fua_commands=" : "number of write FUA "

2219 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2220 
n
 = 0, 
uŒ
 = 
u˝
[20];Ç < 8; ++n) {

2221 
uŒ
 <<8; uŒ |
u˝
[20 + 
n
];

2223 
c˝
 = 
«m
 ? "read_fua_nv_commands="

2225 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2226 
n
 = 0, 
uŒ
 = 
u˝
[28];Ç < 8; ++n) {

2227 
uŒ
 <<8; uŒ |
u˝
[28 + 
n
];

2229 
c˝
 = 
«m
 ? "write_fua_nv_commands="

2231 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2232 
n
 = 0, 
uŒ
 = 
u˝
[36];Ç < 8; ++n) {

2233 
uŒ
 <<8; uŒ |
u˝
[36 + 
n
];

2235 
c˝
 = 
«m
 ? "read_fua_proc_intervals="

2237 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2238 
n
 = 0, 
uŒ
 = 
u˝
[44];Ç < 8; ++n) {

2239 
uŒ
 <<8; uŒ |
u˝
[44 + 
n
];

2241 
c˝
 = 
«m
 ? "write_fua_proc_intervals="

2243 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2244 
n
 = 0, 
uŒ
 = 
u˝
[52];Ç < 8; ++n) {

2245 
uŒ
 <<8; uŒ |
u˝
[52 + 
n
];

2247 
c˝
 = 
«m
 ? "read_fua_nv_proc_intervals="

2249 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2250 
n
 = 0, 
uŒ
 = 
u˝
[60];Ç < 8; ++n) {

2251 
uŒ
 <<8; uŒ |
u˝
[60 + 
n
];

2253 
c˝
 = 
«m
 ? "write_fua_nv_proc_intervals="

2255 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2258 
c˝
 = 
«m
 ? "parameter_code=6" : "Time intervalÜog "

2260 
	`¥ötf
("%s\n", 
c˝
);

2261 
n
 = 0, 
uŒ
 = 
u˝
[4];Ç < 4; ++n) {

2262 
uŒ
 <<8; uŒ |
u˝
[4 + 
n
];

2264 
c˝
 = 
«m
 ? "time_interval_neg_exp=" : "time interval "

2266 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2267 
n
 = 0, 
uŒ
 = 
u˝
[8];Ç < 4; ++n) {

2268 
uŒ
 <<8; uŒ |
u˝
[8 + 
n
];

2270 
c˝
 = 
«m
 ? "time_interval_int=" : "time interval "

2272 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2275 i‡(
«m
) {

2276 
	`¥ötf
("∑ømëî_code=%d\n", 
∑øm_code
);

2277 
	`¥ötf
(" unknown=1\n");

2279 
	`Ârötf
(
°dîr
, "show_performance... unknownÖarameter "

2280 "codê%d\n", 
∑øm_code
);

2281 i‡(
›t•
->
do_vîbo£
)

2282 
	`dSåHex
((c⁄° *)
u˝
, 
exåa
, 1);

2285 i‡((
›t•
->
do_pcb
Ë&& (0 =›t•->
do_«me
)) {

2286 
	`gë_pcb_°r
(
pcb
, 
pcb_°r
, (pcb_str));

2287 
	`¥ötf
(" <%s>\n", 
pcb_°r
);

2291 i‡(
num
 < 0x34)

2293 
k
 = 
num
; k > 0; k -
exåa
, 
u˝
 +=Éxtra) {

2294 i‡(
k
 < 3)

2296 
∑øm_Àn
 = 
u˝
[3];

2297 
exåa
 = 
∑øm_Àn
 + 4;

2298 
∑øm_code
 = (
u˝
[0] << 8) + ucp[1];

2299 
pcb
 = 
u˝
[2];

2300 
∑øm_code
) {

2302 i‡(
«m
)

2303 
	`¥ötf
("parameter_code=1\n");

2305 
	`¥ötf
("Group %d StatisticsándÖerformanceÜog "

2306 "∑ømëî\n", 
subpg_code
);

2307 
n
 = 0, 
uŒ
 = 
u˝
[4];Ç < 8; ++n) {

2308 
uŒ
 <<8; uŒ |
u˝
[4 + 
n
];

2310 
c˝
 = 
«m
 ? "gn_read_commands=" : "groupÇÇumber ofÑead "

2312 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2313 
n
 = 0, 
uŒ
 = 
u˝
[12];Ç < 8; ++n) {

2314 
uŒ
 <<8; uŒ |
u˝
[12 + 
n
];

2316 
c˝
 = 
«m
 ? "gn_write_commands=" : "groupÇÇumber of write "

2318 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2319 
n
 = 0, 
uŒ
 = 
u˝
[20];Ç < 8; ++n) {

2320 
uŒ
 <<8; uŒ |
u˝
[20 + 
n
];

2322 
c˝
 = 
«m
 ? "gn_lb_received="

2324 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2325 
n
 = 0, 
uŒ
 = 
u˝
[28];Ç < 8; ++n) {

2326 
uŒ
 <<8; uŒ |
u˝
[28 + 
n
];

2328 
c˝
 = 
«m
 ? "gn_lb_transmitted="

2330 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2331 
n
 = 0, 
uŒ
 = 
u˝
[36];Ç < 8; ++n) {

2332 
uŒ
 <<8; uŒ |
u˝
[36 + 
n
];

2334 
c˝
 = 
«m
 ? "gn_read_proc_intervals="

2336 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2337 
n
 = 0, 
uŒ
 = 
u˝
[44];Ç < 8; ++n) {

2338 
uŒ
 <<8; uŒ |
u˝
[44 + 
n
];

2340 
c˝
 = 
«m
 ? "gn_write_proc_intervals="

2342 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2345 
c˝
 = 
«m
 ? "parameter_code=4" : "GroupÇ force unitáccess "

2347 
	`¥ötf
("%s\n", 
c˝
);

2348 
n
 = 0, 
uŒ
 = 
u˝
[4];Ç < 8; ++n) {

2349 
uŒ
 <<8; uŒ |
u˝
[4 + 
n
];

2351 
c˝
 = 
«m
 ? "gn_read_fua_commands="

2353 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2354 
n
 = 0, 
uŒ
 = 
u˝
[12];Ç < 8; ++n) {

2355 
uŒ
 <<8; uŒ |
u˝
[12 + 
n
];

2357 
c˝
 = 
«m
 ? "gn_write_fua_commands="

2359 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2360 
n
 = 0, 
uŒ
 = 
u˝
[20];Ç < 8; ++n) {

2361 
uŒ
 <<8; uŒ |
u˝
[20 + 
n
];

2363 
c˝
 = 
«m
 ? "gn_read_fua_nv_commands="

2365 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2366 
n
 = 0, 
uŒ
 = 
u˝
[28];Ç < 8; ++n) {

2367 
uŒ
 <<8; uŒ |
u˝
[28 + 
n
];

2369 
c˝
 = 
«m
 ? "gn_write_fua_nv_commands="

2371 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2372 
n
 = 0, 
uŒ
 = 
u˝
[36];Ç < 8; ++n) {

2373 
uŒ
 <<8; uŒ |
u˝
[36 + 
n
];

2375 
c˝
 = 
«m
 ? "gn_read_fua_proc_intervals="

2377 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2378 
n
 = 0, 
uŒ
 = 
u˝
[44];Ç < 8; ++n) {

2379 
uŒ
 <<8; uŒ |
u˝
[44 + 
n
];

2381 
c˝
 = 
«m
 ? "gn_write_fua_proc_intervals=" : "groupÇ write "

2383 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2384 
n
 = 0, 
uŒ
 = 
u˝
[52];Ç < 8; ++n) {

2385 
uŒ
 <<8; uŒ |
u˝
[52 + 
n
];

2387 
c˝
 = 
«m
 ? "gn_read_fua_nv_proc_intervals=" : "groupÇ "

2389 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2390 
n
 = 0, 
uŒ
 = 
u˝
[60];Ç < 8; ++n) {

2391 
uŒ
 <<8; uŒ |
u˝
[60 + 
n
];

2393 
c˝
 = 
«m
 ? "gn_write_fua_nv_proc_intervals=" : "groupÇ "

2395 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2398 i‡(
«m
) {

2399 
	`¥ötf
("∑ømëî_code=%d\n", 
∑øm_code
);

2400 
	`¥ötf
(" unknown=1\n");

2402 
	`Ârötf
(
°dîr
, "show_performance... unknownÖarameter "

2403 "codê%d\n", 
∑øm_code
);

2404 i‡(
›t•
->
do_vîbo£
)

2405 
	`dSåHex
((c⁄° *)
u˝
, 
exåa
, 1);

2408 i‡((
›t•
->
do_pcb
Ë&& (0 =›t•->
do_«me
)) {

2409 
	`gë_pcb_°r
(
pcb
, 
pcb_°r
, (pcb_str));

2410 
	`¥ötf
(" <%s>\n", 
pcb_°r
);

2415 
	}
}

2420 
	$show_ˇche_°©s_∑ge
(* 
ª•
, 
Àn
,

2421 c⁄° 
›ts_t
 * 
›t•
)

2423 
k
, 
num
, 
n
, 
pc
, 
•f
, 
subpg_code
, 
exåa
;

2424 
pcb
, 
«m
;

2425 * 
u˝
;

2426 c⁄° * 
c˝
;

2427 
uöt64_t
 
uŒ
;

2428 
pcb_°r
[
PCB_STR_LEN
];

2430 
«m
 = 
›t•
->
do_«me
;

2431 
num
 = 
Àn
 - 4;

2432 
u˝
 = 
ª•
 + 4;

2433 i‡(
num
 < 4) {

2434 
	`¥ötf
("badly formed Cache memory statisticsÜogÖage\n");

2437 
•f
 = !!(
ª•
[0] & 0x40);

2438 
subpg_code
 = 
•f
 ? 
ª•
[1] : 0;

2439 i‡(
«m
) {

2440 
	`¥ötf
("log_∑ge=0x%x\n", 
STATS_LPAGE
);

2441 i‡(
subpg_code
 > 0)

2442 
	`¥ötf
("log_sub∑ge=0x%x\n", 
subpg_code
);

2444 
	`¥ötf
("Cache memory statisticsÜogÖage\n");

2446 
k
 = 
num
; k > 0; k -
exåa
, 
u˝
 +=Éxtra) {

2447 i‡(
k
 < 3) {

2448 
	`¥ötf
("short Cache memory statisticsÜogÖage\n");

2451 i‡(8 !
u˝
[3]) {

2452 
	`¥ötf
("Cache memory statisticsÜogÖageÖarameterÜengthÇot "

2456 
exåa
 = 
u˝
[3] + 4;

2457 
pc
 = (
u˝
[0] << 8) + ucp[1];

2458 
pcb
 = 
u˝
[2];

2459 
pc
) {

2461 
c˝
 = 
«m
 ? "parameter_code=1" :

2463 
	`¥ötf
("%s\n", 
c˝
);

2464 
n
 = 0, 
uŒ
 = 
u˝
[4];Ç < 8; ++n) {

2465 
uŒ
 <<8; uŒ |
u˝
[4 + 
n
];

2467 
c˝
 = 
«m
 ? "read_cache_memory_hits=" :

2469 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2472 
c˝
 = 
«m
 ? "parameter_code=2" :

2474 
	`¥ötf
("%s\n", 
c˝
);

2475 
n
 = 0, 
uŒ
 = 
u˝
[4];Ç < 8; ++n) {

2476 
uŒ
 <<8; uŒ |
u˝
[4 + 
n
];

2478 
c˝
 = 
«m
 ? "reads_to_cache_memory=" :

2480 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2483 
c˝
 = 
«m
 ? "parameter_code=3" :

2485 
	`¥ötf
("%s\n", 
c˝
);

2486 
n
 = 0, 
uŒ
 = 
u˝
[4];Ç < 8; ++n) {

2487 
uŒ
 <<8; uŒ |
u˝
[4 + 
n
];

2489 
c˝
 = 
«m
 ? "write_cache_memory_hits=" :

2491 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2494 
c˝
 = 
«m
 ? "parameter_code=4" :

2496 
	`¥ötf
("%s\n", 
c˝
);

2497 
n
 = 0, 
uŒ
 = 
u˝
[4];Ç < 8; ++n) {

2498 
uŒ
 <<8; uŒ |
u˝
[4 + 
n
];

2500 
c˝
 = 
«m
 ? "writes_from_cache_memory=" :

2502 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2505 
c˝
 = 
«m
 ? "parameter_code=5" :

2507 
	`¥ötf
("%s\n", 
c˝
);

2508 
n
 = 0, 
uŒ
 = 
u˝
[4];Ç < 8; ++n) {

2509 
uŒ
 <<8; uŒ |
u˝
[4 + 
n
];

2511 
c˝
 = 
«m
 ? "time_from_last_hard_reset=" :

2513 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2516 
c˝
 = 
«m
 ? "parameter_code=6" :

2518 
	`¥ötf
("%s\n", 
c˝
);

2519 
n
 = 0, 
uŒ
 = 
u˝
[4];Ç < 4; ++n) {

2520 
uŒ
 <<8; uŒ |
u˝
[4 + 
n
];

2522 
c˝
 = 
«m
 ? "time_interval_neg_exp=" : "time interval "

2524 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2525 
n
 = 0, 
uŒ
 = 
u˝
[8];Ç < 4; ++n) {

2526 
uŒ
 <<8; uŒ |
u˝
[8 + 
n
];

2528 
c˝
 = 
«m
 ? "time_interval_int=" : "time interval "

2530 
	`¥ötf
(" %s%" 
PRIu64
 "\n", 
c˝
, 
uŒ
);

2533 i‡(
«m
) {

2534 
	`¥ötf
("∑ømëî_code=%d\n", 
pc
);

2535 
	`¥ötf
(" unknown=1\n");

2537 
	`Ârötf
(
°dîr
, "show_performance... unknownÖarameter "

2538 "codê%d\n", 
pc
);

2539 i‡(
›t•
->
do_vîbo£
)

2540 
	`dSåHex
((c⁄° *)
u˝
, 
exåa
, 1);

2543 i‡((
›t•
->
do_pcb
Ë&& (0 =›t•->
do_«me
)) {

2544 
	`gë_pcb_°r
(
pcb
, 
pcb_°r
, (pcb_str));

2545 
	`¥ötf
(" <%s>\n", 
pcb_°r
);

2549 
	}
}

2553 
	$show_f‹m©_°©us_∑ge
(* 
ª•
, 
Àn
, 
show_pcb
)

2555 
k
, 
j
, 
num
, 
∂
, 
pc
, 
pcb
, 
Æl_ff
, 
cou¡î
;

2556 * 
u˝
;

2557 * 
xp
;

2558 
uöt64_t
 
uŒ
;

2559 
pcb_°r
[
PCB_STR_LEN
];

2561 
	`¥ötf
("Format statusÖage (sbc-2) [0x8]\n");

2562 
num
 = 
Àn
 - 4;

2563 
u˝
 = &
ª•
[0] + 4;

2564 
num
 > 3) {

2565 
pc
 = (
u˝
[0] << 8) | ucp[1];

2566 
pcb
 = 
u˝
[2];

2567 
∂
 = 
u˝
[3] + 4;

2568 
cou¡î
 = 1;

2569 
pc
) {

2570 0: 
	`¥ötf
(" Format data out:\n");

2571 
cou¡î
 = 0;

2572 
	`dSåHex
((c⁄° *)
u˝
, 
∂
, 0);

2574 1: 
	`¥ötf
(" Grown defects during certification"); ;

2575 2: 
	`¥ötf
(" Total blocksÑeassigned during format"); ;

2576 3: 
	`¥ötf
(" TotalÇew blocksÑeassigned"); ;

2577 4: 
	`¥ötf
(" Power on minutes since format"); ;

2579 
	`¥ötf
(" Unknow¿F‹m© sètu†codê0x%x\n", 
pc
);

2580 
cou¡î
 = 0;

2581 
	`dSåHex
((c⁄° *)
u˝
, 
∂
, 0);

2584 i‡(
cou¡î
) {

2585 
k
 = 
∂
 - 4;

2586 
xp
 = 
u˝
 + 4;

2587 i‡(
k
 > ()(
uŒ
)) {

2588 
xp
 +(
k
 - (
uŒ
));

2589 
k
 = (
uŒ
);

2591 
uŒ
 = 0;

2592 
Æl_ff
 = 0, 
j
 = 0; j < 
k
; ++j) {

2593 i‡(
j
 > 0)

2594 
uŒ
 <<= 8;

2596 
Æl_ff
 = 1;

2597 
uŒ
 |
xp
[
j
];

2598 i‡(0xf‡!
xp
[
j
])

2599 
Æl_ff
 = 0;

2601 i‡(
Æl_ff
)

2602 
	`¥ötf
(" <notávailable>");

2604 
	`¥ötf
(" = %" 
PRIu64
 "", 
uŒ
);

2605 i‡(
show_pcb
) {

2606 
	`gë_pcb_°r
(
pcb
, 
pcb_°r
, (pcb_str));

2607 
	`¥ötf
("\¿ <%s>\n", 
pcb_°r
);

2609 
	`¥ötf
("\n");

2611 i‡(
show_pcb
) {

2612 
	`gë_pcb_°r
(
pcb
, 
pcb_°r
, (pcb_str));

2613 
	`¥ötf
("\¿ <%s>\n", 
pcb_°r
);

2616 
num
 -
∂
;

2617 
u˝
 +
∂
;

2619 
	}
}

2623 
	$show_n⁄_vﬁ©ûe_ˇche_∑ge
(* 
ª•
, 
Àn
, 
show_pcb
)

2625 
j
, 
num
, 
∂
, 
pc
, 
pcb
;

2626 * 
u˝
;

2627 
pcb_°r
[
PCB_STR_LEN
];

2629 
	`¥ötf
("Non-volatile cacheÖage (sbc-2) [0x17]\n");

2630 
num
 = 
Àn
 - 4;

2631 
u˝
 = &
ª•
[0] + 4;

2632 
num
 > 3) {

2633 
pc
 = (
u˝
[0] << 8) | ucp[1];

2634 
pcb
 = 
u˝
[2];

2635 
∂
 = 
u˝
[3] + 4;

2636 
pc
) {

2638 
	`¥ötf
(" RemainingÇon-volatileÅime: ");

2639 i‡(3 =
u˝
[4]) {

2640 
j
 = (
u˝
[5] << 16) + (ucp[6] << 8) + ucp[7];

2641 
j
) {

2643 
	`¥ötf
("0 (i.e. it isÇow volatile)\n");

2646 
	`¥ötf
("<unknown>\n");

2649 
	`¥ötf
("<indefinite>\n");

2652 
	`¥ötf
("%d möuã†[%d:%d]\n", 
j
, (j / 60), (j % 60));

2656 
	`¥ötf
("<u√x≥˘edÖ¨amëîÜígth=%d>\n", 
u˝
[4]);

2659 
	`¥ötf
(" MaximumÇon-volatileÅime: ");

2660 i‡(3 =
u˝
[4]) {

2661 
j
 = (
u˝
[5] << 16) + (ucp[6] << 8) + ucp[7];

2662 
j
) {

2664 
	`¥ötf
("0 (i.e. it isÇow volatile)\n");

2667 
	`¥ötf
("<reserved>\n");

2670 
	`¥ötf
("<indefinite>\n");

2673 
	`¥ötf
("%d möuã†[%d:%d]\n", 
j
, (j / 60), (j % 60));

2677 
	`¥ötf
("<u√x≥˘edÖ¨amëîÜígth=%d>\n", 
u˝
[4]);

2680 
	`¥ötf
(" Unknow¿F‹m© sètu†codê0x%x\n", 
pc
);

2681 
	`dSåHex
((c⁄° *)
u˝
, 
∂
, 0);

2684 i‡(
show_pcb
) {

2685 
	`gë_pcb_°r
(
pcb
, 
pcb_°r
, (pcb_str));

2686 
	`¥ötf
("\¿ <%s>\n", 
pcb_°r
);

2688 
num
 -
∂
;

2689 
u˝
 +
∂
;

2691 
	}
}

2695 
	$show_lb_¥ovisi⁄ög_∑ge
(* 
ª•
, 
Àn
, 
show_pcb
)

2697 
j
, 
num
, 
∂
, 
pc
, 
pcb
;

2698 * 
u˝
;

2699 c⁄° * 
˝
;

2700 
°r
[
PCB_STR_LEN
];

2702 
	`¥ötf
("Logical blockÖrovisioningÖage (sbc-3) [0xc]\n");

2703 
num
 = 
Àn
 - 4;

2704 
u˝
 = &
ª•
[0] + 4;

2705 
num
 > 3) {

2706 
pc
 = (
u˝
[0] << 8) | ucp[1];

2707 
pcb
 = 
u˝
[2];

2708 
∂
 = 
u˝
[3] + 4;

2709 
pc
) {

2711 
˝
 = " Available LBA mappingÅhreshold";

2714 
˝
 = " Used LBA mappingÅhreshold";

2717 
˝
 = " De-duplicated LBA";

2720 
˝
 = " Compressed LBA";

2723 
˝
 = " TotalÉfficiency LBA";

2726 
˝
 = 
NULL
;

2729 i‡(
˝
) {

2730 
	`¥ötf
(" %†ªsour˚ cou¡:", 
˝
);

2731 i‡((
∂
 < 8Ë|| (
num
 < 8)) {

2732 i‡(
num
 < 8)

2733 
	`Ârötf
(
°dîr
, "\nÅruncated byÑesponseÜength, "

2736 
	`Ârötf
(
°dîr
, "\nÖarameterÜength >= 8Éxpected, "

2737 "gŸ %d\n", 
∂
);

2740 
j
 = (
u˝
[4] << 24) + (ucp[5] << 16) + (ucp[6] << 8) + ucp[7];

2741 
	`¥ötf
(" %d\n", 
j
);

2742 i‡(
∂
 > 8) {

2743 
u˝
[8] & 0x3) {

2744 0: 
˝
 = "notÑeported"; ;

2745 1: 
˝
 = "dedicatedÅoÜu"; ;

2746 2: 
˝
 = "not dedicatedÅoÜu"; ;

2747 3: 
˝
 = "reserved"; ;

2749 
	`¥ötf
(" Sc›e: %s\n", 
˝
);

2751 } i‡((
pc
 >= 0xfff0) && (pc <= 0xffff)) {

2752 
	`¥ötf
(" Víd‹ s≥cifi¯[0x%x]:", 
pc
);

2753 
	`dSåHex
((c⁄° *)
u˝
, ((
∂
 < 
num
) ?Öl :Çum), 0);

2755 
	`¥ötf
(" Re£rved [∑ømëî_code=0x%x]:", 
pc
);

2756 
	`dSåHex
((c⁄° *)
u˝
, ((
∂
 < 
num
) ?Öl :Çum), 0);

2758 i‡(
show_pcb
) {

2759 
	`gë_pcb_°r
(
pcb
, 
°r
, (str));

2760 
	`¥ötf
("\¿ <%s>\n", 
°r
);

2762 
num
 -
∂
;

2763 
u˝
 +
∂
;

2765 
	}
}

2769 
	$show_sﬁid_°©e_medü_∑ge
(* 
ª•
, 
Àn
, 
show_pcb
)

2771 
num
, 
∂
, 
pc
, 
pcb
;

2772 * 
u˝
;

2773 
°r
[
PCB_STR_LEN
];

2775 
	`¥ötf
("Solid state mediaÖage (sbc-3) [0x11]\n");

2776 
num
 = 
Àn
 - 4;

2777 
u˝
 = &
ª•
[0] + 4;

2778 
num
 > 3) {

2779 
pc
 = (
u˝
[0] << 8) | ucp[1];

2780 
pcb
 = 
u˝
[2];

2781 
∂
 = 
u˝
[3] + 4;

2782 i‡(0x1 =
pc
) {

2783 
	`¥ötf
(" Percentage usedÉndurance indicator:");

2784 i‡((
∂
 < 8Ë|| (
num
 < 8)) {

2785 i‡(
num
 < 8)

2786 
	`Ârötf
(
°dîr
, "\nÅruncated byÑesponseÜength, "

2789 
	`Ârötf
(
°dîr
, "\nÖarameterÜength >= 8Éxpected, "

2790 "gŸ %d\n", 
∂
);

2793 
	`¥ötf
(" %d%%\n", 
u˝
[7]);

2795 
	`¥ötf
(" Re£rved [∑ømëî_code=0x%x]:", 
pc
);

2796 
	`dSåHex
((c⁄° *)
u˝
, ((
∂
 < 
num
) ?Öl :Çum), 0);

2798 i‡(
show_pcb
) {

2799 
	`gë_pcb_°r
(
pcb
, 
°r
, (str));

2800 
	`¥ötf
("\¿ <%s>\n", 
°r
);

2802 
num
 -
∂
;

2803 
u˝
 +
∂
;

2805 
	}
}

2809 
	$show_©a_±_ªsu…s_∑ge
(* 
ª•
, 
Àn
, 
show_pcb
)

2811 
num
, 
∂
, 
pc
, 
pcb
;

2812 * 
u˝
;

2813 * 
dp
;

2814 
°r
[
PCB_STR_LEN
];

2816 
	`¥ötf
("ATAÖass-throughÑesultsÖage (sat-2) [0x16]\n");

2817 
num
 = 
Àn
 - 4;

2818 
u˝
 = &
ª•
[0] + 4;

2819 
num
 > 3) {

2820 
pc
 = (
u˝
[0] << 8) | ucp[1];

2821 
pcb
 = 
u˝
[2];

2822 
∂
 = 
u˝
[3] + 4;

2823 i‡((
pc
 < 0xfË&& (
∂
 > 17)) {

2824 
exãnd
, 
£˘‹_cou¡
;

2826 
dp
 = 
u˝
 + 4;

2827 
	`¥ötf
(" Log_ödex=0x%x (∑ømëî_code=0x%x)\n", 
pc
 + 1,Öc);

2828 
exãnd
 = 
dp
[2] & 1;

2829 
£˘‹_cou¡
 = 
dp
[5] + (
exãnd
 ? (dp[4] << 8) : 0);

2830 
	`¥ötf
("Éxãnd=%dÉº‹=0x%x se˘‹_cou¡=0x%x\n", 
exãnd
,

2831 
dp
[3], 
£˘‹_cou¡
);

2832 i‡(
exãnd
)

2833 
	`¥ötf
("Üba=0x%02x%02x%02x%02x%02x%02x\n", 
dp
[10], dp[8],

2834 
dp
[6], dp[11], dp[9], dp[7]);

2836 
	`¥ötf
("Üba=0x%02x%02x%02x\n", 
dp
[11], dp[9], dp[7]);

2837 
	`¥ötf
(" devi˚=0x%x sètus=0x%x\n", 
dp
[12], dp[13]);

2839 
	`¥ötf
(" Re£rved [∑ømëî_code=0x%x]:", 
pc
);

2840 
	`dSåHex
((c⁄° *)
u˝
, ((
∂
 < 
num
) ?Öl :Çum), 0);

2842 i‡(
show_pcb
) {

2843 
	`gë_pcb_°r
(
pcb
, 
°r
, (str));

2844 
	`¥ötf
("\¿ <%s>\n", 
°r
);

2846 
num
 -
∂
;

2847 
u˝
 +
∂
;

2849 
	}
}

2851 c⁄° * 
	gbms_°©us
[] = {

2866 c⁄° * 
	gªassign_°©us
[] = {

2880 
	$show_background_sˇn_ªsu…s_∑ge
(* 
ª•
, 
Àn
, 
show_pcb
,

2881 
vîbo£
)

2883 
j
, 
m
, 
num
, 
∂
, 
pc
, 
pcb
;

2884 * 
u˝
;

2885 
°r
[
PCB_STR_LEN
];

2887 
	`¥ötf
("Background scanÑesultsÖage (sbc-3) [0x15]\n");

2888 
num
 = 
Àn
 - 4;

2889 
u˝
 = &
ª•
[0] + 4;

2890 
num
 > 3) {

2891 
pc
 = (
u˝
[0] << 8) | ucp[1];

2892 
pcb
 = 
u˝
[2];

2893 
∂
 = 
u˝
[3] + 4;

2894 
pc
) {

2896 
	`¥ötf
(" StatusÖarameters:\n");

2897 i‡((
∂
 < 16Ë|| (
num
 < 16)) {

2898 i‡(
num
 < 16)

2899 
	`Ârötf
(
°dîr
, "Åruncated byÑesponseÜength, "

2902 
	`Ârötf
(
°dîr
, "ÖarameterÜength >= 16Éxpected, "

2903 "gŸ %d\n", 
∂
);

2906 
	`¥ötf
(" AccumulatedÖower on minutes: ");

2907 
j
 = (
u˝
[4] << 24) + (ucp[5] << 16) + (ucp[6] << 8) + ucp[7];

2908 
	`¥ötf
("%d [h:m %d:%d]\n", 
j
, (j / 60), (j % 60));

2909 
	`¥ötf
(" Status: ");

2910 
j
 = 
u˝
[9];

2911 i‡(
j
 < ()((
bms_°©us
) / (bms_status[0])))

2912 
	`¥ötf
("%s\n", 
bms_°©us
[
j
]);

2914 
	`¥ötf
("unknow¿[0x%x] background sˇ¿°©u†vÆue\n", 
j
);

2915 
j
 = (
u˝
[10] << 8) + ucp[11];

2916 
	`¥ötf
(" Numbî o‡background sˇn†≥rf‹med: %d\n", 
j
);

2917 
j
 = (
u˝
[12] << 8) + ucp[13];

2918 #ifde‡
SG_LIB_MINGW


2919 
	`¥ötf
(" Background medium scanÖrogress: %g%%\n",

2920 ()(
j
 * 100.0 / 65536.0));

2922 
	`¥ötf
(" Background medium scanÖrogress: %.2f%%\n",

2923 ()(
j
 * 100.0 / 65536.0));

2925 
j
 = (
u˝
[14] << 8) + ucp[15];

2926 i‡(0 =
j
)

2927 
	`¥ötf
(" Number of background medium scansÖerformed: 0 "

2930 
	`¥ötf
(" Number of background medium scansÖerformed: "

2931 "%d\n", 
j
);

2934 i‡(
pc
 > 0x800) {

2935 i‡((
pc
 >= 0x8000) && (pc <= 0xafff))

2936 
	`¥ötf
(" Medium scanÖarameter # %d [0x%x], vendor "

2937 "•ecific\n", 
pc
,Öc);

2939 
	`¥ötf
(" Medium scanÖarameter # %d [0x%x], "

2940 "ª£rved\n", 
pc
,Öc);

2941 
	`dSåHex
((c⁄° *)
u˝
, ((
∂
 < 
num
) ?Öl :Çum), 0);

2944 
	`¥ötf
(" Medium sˇ¿∑ømëî # %d [0x%x]\n", 
pc
,Öc);

2945 i‡((
∂
 < 24Ë|| (
num
 < 24)) {

2946 i‡(
num
 < 24)

2947 
	`Ârötf
(
°dîr
, "Åruncated byÑesponseÜength, "

2950 
	`Ârötf
(
°dîr
, "ÖarameterÜength >= 24Éxpected, "

2951 "gŸ %d\n", 
∂
);

2954 
	`¥ötf
(" Power on minutes whenÉrror detected: ");

2955 
j
 = (
u˝
[4] << 24) + (ucp[5] << 16) + (ucp[6] << 8) + ucp[7];

2956 
	`¥ötf
("%d [%d:%d]\n", 
j
, (j / 60), (j % 60));

2957 
j
 = (
u˝
[8] >> 4) & 0xf;

2958 i‡(
j
 <

2959 ()((
ªassign_°©us
) / (reassign_status[0])))

2960 
	`¥ötf
(" %s\n", 
ªassign_°©us
[
j
]);

2962 
	`¥ötf
(" Róssig¿°©us:Ñe£rved [0x%x]\n", 
j
);

2963 
	`¥ötf
(" sense key: %s [sk,asc,ascq: 0x%x,0x%x,0x%x]\n",

2964 
	`sg_gë_£n£_key_°r
(
u˝
[8] & 0xf, (
°r
), str),

2965 
u˝
[8] & 0xf, ucp[9], ucp[10]);

2966 
	`¥ötf
(" %s\n", 
	`sg_gë_asc_ascq_°r
(
u˝
[9], ucp[10],

2967 (
°r
), str));

2968 i‡(
vîbo£
) {

2969 
	`¥ötf
(" vendor bytes [11 -> 15]: ");

2970 
m
 = 0; m < 5; ++m)

2971 
	`¥ötf
("0x%02x ", 
u˝
[11 + 
m
]);

2972 
	`¥ötf
("\n");

2974 
	`¥ötf
(" LBA (associated with mediumÉrror): 0x");

2975 
m
 = 0; m < 8; ++m)

2976 
	`¥ötf
("%02x", 
u˝
[16 + 
m
]);

2977 
	`¥ötf
("\n");

2980 i‡(
show_pcb
) {

2981 
	`gë_pcb_°r
(
pcb
, 
°r
, (str));

2982 
	`¥ötf
("\¿ <%s>\n", 
°r
);

2984 
num
 -
∂
;

2985 
u˝
 +
∂
;

2987 
	}
}

2991 
	$show_£quítül_ac˚ss_∑ge
(* 
ª•
, 
Àn
, 
show_pcb
,

2992 
vîbo£
)

2994 
k
, 
j
, 
num
, 
∂
, 
pc
, 
pcb
;

2995 * 
u˝
;

2996 * 
xp
;

2997 
uöt64_t
 
uŒ
, 
gbyãs
;

2998 
pcb_°r
[
PCB_STR_LEN
];

3000 
	`¥ötf
("Sequentialáccess deviceÖage (ssc-3)\n");

3001 
num
 = 
Àn
 - 4;

3002 
u˝
 = &
ª•
[0] + 4;

3003 
num
 > 3) {

3004 
pc
 = (
u˝
[0] << 8) | ucp[1];

3005 
pcb
 = 
u˝
[2];

3006 
∂
 = 
u˝
[3] + 4;

3007 
k
 = 
∂
 - 4;

3008 
xp
 = 
u˝
 + 4;

3009 i‡(
k
 > ()(
uŒ
)) {

3010 
xp
 +(
k
 - (
uŒ
));

3011 
k
 = (
uŒ
);

3013 
uŒ
 = 0;

3014 
j
 = 0; j < 
k
; ++j) {

3015 i‡(
j
 > 0)

3016 
uŒ
 <<= 8;

3017 
uŒ
 |
xp
[
j
];

3019 
gbyãs
 = 
uŒ
 / 1000000000;

3020 
pc
) {

3022 
	`¥ötf
(" D©®byã†ª˚ived wôh WRITE comm™ds: %" 
PRIu64


3023 " GB", 
gbyãs
);

3024 i‡(
vîbo£
)

3025 
	`¥ötf
(" [%" 
PRIu64
 " byãs]", 
uŒ
);

3026 
	`¥ötf
("\n");

3029 
	`¥ötf
(" D©®byã†wrôã¿tÿmedü by WRITE comm™ds: %" 
PRIu64


3030 " GB", 
gbyãs
);

3031 i‡(
vîbo£
)

3032 
	`¥ötf
(" [%" 
PRIu64
 " byãs]", 
uŒ
);

3033 
	`¥ötf
("\n");

3036 
	`¥ötf
(" D©®byã†ªad from medü by READ comm™ds: %" 
PRIu64


3037 " GB", 
gbyãs
);

3038 i‡(
vîbo£
)

3039 
	`¥ötf
(" [%" 
PRIu64
 " byãs]", 
uŒ
);

3040 
	`¥ötf
("\n");

3043 
	`¥ötf
(" D©®byã†å™s„ºed by READ comm™ds: %" 
PRIu64


3044 " GB", 
gbyãs
);

3045 i‡(
vîbo£
)

3046 
	`¥ötf
(" [%" 
PRIu64
 " byãs]", 
uŒ
);

3047 
	`¥ötf
("\n");

3050 
	`¥ötf
(" N©ivêˇ∑côy from BOPÅÿEOD: %" 
PRIu64
 " MB\n",

3051 
uŒ
);

3054 
	`¥ötf
(" Native capacity from BOPÅo EW of currentÖartition: "

3055 "%" 
PRIu64
 " MB\n", 
uŒ
);

3058 
	`¥ötf
(" MinimumÇative capacity from EWÅo EOP of current "

3059 "∑πôi⁄: %" 
PRIu64
 " MB\n", 
uŒ
);

3062 
	`¥ötf
(" Native capacity from BOPÅo currentÖosition: %"

3063 
PRIu64
 " MB\n", 
uŒ
);

3066 
	`¥ötf
(" MaximumÇative capacity in device object buffer: %"

3067 
PRIu64
 " MB\n", 
uŒ
);

3070 i‡(
uŒ
 > 0)

3071 
	`¥ötf
(" CleaningáctionÑequired\n");

3073 
	`¥ötf
(" CleaningáctionÇotÑequired (or completed)\n");

3074 i‡(
vîbo£
)

3075 
	`¥ötf
(" cÀ™ög vÆue: %" 
PRIu64
 "\n", 
uŒ
);

3078 i‡(
pc
 >= 0x8000)

3079 
	`¥ötf
(" Víd‹ s≥cifi¯∑ømëî [0x%x] vÆue: %" 
PRIu64


3080 "\n", 
pc
, 
uŒ
);

3082 
	`¥ötf
(" Re£rvedÖ¨amëî [0x%x] vÆue: %" 
PRIu64
 "\n",

3083 
pc
, 
uŒ
);

3086 i‡(
show_pcb
) {

3087 
	`gë_pcb_°r
(
pcb
, 
pcb_°r
, (pcb_str));

3088 
	`¥ötf
("\¿ <%s>\n", 
pcb_°r
);

3090 
	`¥ötf
("\n");

3091 
num
 -
∂
;

3092 
u˝
 +
∂
;

3094 
	}
}

3098 
	$show_devi˚_°©s_∑ge
(* 
ª•
, 
Àn
, 
show_pcb
)

3100 
k
, 
j
, 
num
, 
∂
, 
pc
, 
pcb
;

3101 * 
u˝
;

3102 * 
xp
;

3103 
uöt64_t
 
uŒ
;

3104 
pcb_°r
[
PCB_STR_LEN
];

3106 
	`¥ötf
("Device statisticsÖage (ssc-3ándádc)\n");

3107 
num
 = 
Àn
 - 4;

3108 
u˝
 = &
ª•
[0] + 4;

3109 
num
 > 3) {

3110 
pc
 = (
u˝
[0] << 8) | ucp[1];

3111 
pcb
 = 
u˝
[2];

3112 
∂
 = 
u˝
[3] + 4;

3113 i‡(
pc
 < 0x1000) {

3114 
k
 = 
∂
 - 4;

3115 
xp
 = 
u˝
 + 4;

3116 i‡(
k
 > ()(
uŒ
)) {

3117 
xp
 +(
k
 - (
uŒ
));

3118 
k
 = (
uŒ
);

3120 
uŒ
 = 0;

3121 
j
 = 0; j < 
k
; ++j) {

3122 i‡(
j
 > 0)

3123 
uŒ
 <<= 8;

3124 
uŒ
 |
xp
[
j
];

3126 
pc
) {

3128 
	`¥ötf
(" Li„timêmedüÜﬂds: %" 
PRIu64
 "\n", 
uŒ
);

3131 
	`¥ötf
(" Li„timê˛ónög o≥øti⁄s: %" 
PRIu64
 "\n", 
uŒ
);

3134 
	`¥ötf
(" Li„timêpowî o¿hours: %" 
PRIu64
 "\n", 
uŒ
);

3137 
	`¥ötf
(" Li„timêmedü mŸi⁄ (hódËhours: %" 
PRIu64
 "\n",

3138 
uŒ
);

3141 
	`¥ötf
(" Li„timêmëª†o‡è≥Öro˚s£d: %" 
PRIu64
 "\n",

3142 
uŒ
);

3145 
	`¥ötf
(" Lifetime media motion (head) hours when "

3146 "öcom∑tibÀ medüÜa°Üﬂded: %" 
PRIu64
 "\n", 
uŒ
);

3149 
	`¥ötf
(" LifetimeÖower on hours whenÜastÅemperature "

3150 "c⁄dôi⁄ occuºed: %" 
PRIu64
 "\n", 
uŒ
);

3153 
	`¥ötf
(" LifetimeÖower on hours whenÜastÖower "

3154 "c⁄sum±i⁄ c⁄dôi⁄ occuºed: %" 
PRIu64
 "\n", 
uŒ
);

3157 
	`¥ötf
(" Media motion (head) hours sinceÜast successful "

3158 "˛ónög o≥øti⁄: %" 
PRIu64
 "\n", 
uŒ
);

3161 
	`¥ötf
(" Media motion (head) hours since 2ndÅoÜast "

3162 "suc˚ssfu»˛ónög: %" 
PRIu64
 "\n", 
uŒ
);

3165 
	`¥ötf
(" Media motion (head) hours since 3rdÅoÜast "

3166 "suc˚ssfu»˛ónög: %" 
PRIu64
 "\n", 
uŒ
);

3169 
	`¥ötf
(" LifetimeÖower on hours whenÜast operator "

3171 "eje˘ occuºed: %" 
PRIu64
 "\n", 
uŒ
);

3174 
	`¥ötf
(" Re£rvedÖ¨amëî [0x%x] vÆue: %" 
PRIu64
 "\n",

3175 
pc
, 
uŒ
);

3179 
pc
) {

3181 
	`¥ötf
(" Media motion (head) hours forÉach mediumÅype:\n");

3182 
	`¥ötf
(" <<to be decoded, dump in hex forÇow>>:\n");

3183 
	`dSåHex
((c⁄° *)
u˝
, 
∂
, 0);

3186 
	`¥ötf
(" Re£rvedÖ¨amëî [0x%x], dum∞ö hex:\n", 
pc
);

3187 
	`dSåHex
((c⁄° *)
u˝
, 
∂
, 0);

3191 i‡(
show_pcb
) {

3192 
	`gë_pcb_°r
(
pcb
, 
pcb_°r
, (pcb_str));

3193 
	`¥ötf
("\¿ <%s>\n", 
pcb_°r
);

3195 
	`¥ötf
("\n");

3196 
num
 -
∂
;

3197 
u˝
 +
∂
;

3199 
	}
}

3203 
	$show_medü_°©s_∑ge
(* 
ª•
, 
Àn
, 
show_pcb
)

3205 
k
, 
j
, 
num
, 
∂
, 
pc
, 
pcb
;

3206 * 
u˝
;

3207 * 
xp
;

3208 
uöt64_t
 
uŒ
;

3209 
pcb_°r
[
PCB_STR_LEN
];

3211 
	`¥ötf
("Media statisticsÖage (smc-3)\n");

3212 
num
 = 
Àn
 - 4;

3213 
u˝
 = &
ª•
[0] + 4;

3214 
num
 > 3) {

3215 
pc
 = (
u˝
[0] << 8) | ucp[1];

3216 
pcb
 = 
u˝
[2];

3217 
∂
 = 
u˝
[3] + 4;

3218 
k
 = 
∂
 - 4;

3219 
xp
 = 
u˝
 + 4;

3220 i‡(
k
 > ()(
uŒ
)) {

3221 
xp
 +(
k
 - (
uŒ
));

3222 
k
 = (
uŒ
);

3224 
uŒ
 = 0;

3225 
j
 = 0; j < 
k
; ++j) {

3226 i‡(
j
 > 0)

3227 
uŒ
 <<= 8;

3228 
uŒ
 |
xp
[
j
];

3230 
pc
) {

3232 
	`¥ötf
(" Numbî o‡moves: %" 
PRIu64
 "\n", 
uŒ
);

3235 
	`¥ötf
(" Numbî o‡picks: %" 
PRIu64
 "\n", 
uŒ
);

3238 
	`¥ötf
(" Numbî o‡pickÑërõs: %" 
PRIu64
 "\n", 
uŒ
);

3241 
	`¥ötf
(" Numbî o‡∂a˚s: %" 
PRIu64
 "\n", 
uŒ
);

3244 
	`¥ötf
(" Numbî o‡∂a˚Ñërõs: %" 
PRIu64
 "\n", 
uŒ
);

3247 
	`¥ötf
(" Number of volumeÅagsÑead by volume "

3248 "ègÑódî: %" 
PRIu64
 "\n", 
uŒ
);

3251 
	`¥ötf
(" Number of invalid volumeÅagsÑeturned by "

3252 "vﬁumêègÑódî: %" 
PRIu64
 "\n", 
uŒ
);

3255 
	`¥ötf
(" Numbî o‡libøry do‹ o≥ns: %" 
PRIu64
 "\n", 
uŒ
);

3258 
	`¥ötf
(" Numbî o‡imp‹t/exp‹àdo‹ o≥ns: %" 
PRIu64
 "\n",

3259 
uŒ
);

3262 
	`¥ötf
(" Numbî o‡physiˇ»övít‹y sˇns: %" 
PRIu64
 "\n",

3263 
uŒ
);

3266 
	`¥ötf
(" Number of mediumÅransport unrecoveredÉrrors: "

3267 "%" 
PRIu64
 "\n", 
uŒ
);

3270 
	`¥ötf
(" Number of mediumÅransportÑecoveredÉrrors: "

3271 "%" 
PRIu64
 "\n", 
uŒ
);

3274 
	`¥ötf
(" Number of mediumÅransport XáxisÅranslation "

3275 "uƒecovîedÉº‹s: %" 
PRIu64
 "\n", 
uŒ
);

3278 
	`¥ötf
(" Number of mediumÅransport XáxisÅranslation "

3279 "ªcovîedÉº‹s: %" 
PRIu64
 "\n", 
uŒ
);

3282 
	`¥ötf
(" Number of mediumÅransport YáxisÅranslation "

3283 "uƒecovîedÉº‹s: %" 
PRIu64
 "\n", 
uŒ
);

3286 
	`¥ötf
(" Number of mediumÅransport YáxisÅranslation "

3287 "ªcovîedÉº‹s: %" 
PRIu64
 "\n", 
uŒ
);

3290 
	`¥ötf
(" Number of mediumÅransport ZáxisÅranslation "

3291 "uƒecovîedÉº‹s: %" 
PRIu64
 "\n", 
uŒ
);

3294 
	`¥ötf
(" Number of mediumÅransport ZáxisÅranslation "

3295 "ªcovîedÉº‹s: %" 
PRIu64
 "\n", 
uŒ
);

3298 
	`¥ötf
(" Number of mediumÅransportÑotationalÅranslation "

3299 "uƒecovîedÉº‹s: %" 
PRIu64
 "\n", 
uŒ
);

3302 
	`¥ötf
(" Number of mediumÅransportÑotationalÅranslation "

3303 "ªcovîedÉº‹s: %" 
PRIu64
 "\n", 
uŒ
);

3306 
	`¥ötf
(" Number of mediumÅransport inversionÅranslation "

3307 "uƒecovîedÉº‹s: %" 
PRIu64
 "\n", 
uŒ
);

3310 
	`¥ötf
(" Number of mediumÅransport inversionÅranslation "

3311 "ªcovîedÉº‹s: %" 
PRIu64
 "\n", 
uŒ
);

3314 
	`¥ötf
(" Number of mediumÅransportáuxiliaryÅranslation "

3315 "uƒecovîedÉº‹s: %" 
PRIu64
 "\n", 
uŒ
);

3318 
	`¥ötf
(" Number of mediumÅransportáuxiliaryÅranslation "

3319 "ªcovîedÉº‹s: %" 
PRIu64
 "\n", 
uŒ
);

3322 
	`¥ötf
(" Re£rvedÖ¨amëî [0x%x] vÆue: %" 
PRIu64
 "\n",

3323 
pc
, 
uŒ
);

3326 i‡(
show_pcb
) {

3327 
	`gë_pcb_°r
(
pcb
, 
pcb_°r
, (pcb_str));

3328 
	`¥ötf
("\¿ <%s>\n", 
pcb_°r
);

3330 
	`¥ötf
("\n");

3331 
num
 -
∂
;

3332 
u˝
 +
∂
;

3334 
	}
}

3338 
	$show_ñemít_°©s_∑ge
(* 
ª•
, 
Àn
, 
show_pcb
)

3340 
num
, 
∂
, 
pc
, 
pcb
;

3341 
v
;

3342 * 
u˝
;

3343 
°r
[
PCB_STR_LEN
];

3345 
	`¥ötf
("Element statisticsÖage (smc-3) [0x15]\n");

3346 
num
 = 
Àn
 - 4;

3347 
u˝
 = &
ª•
[0] + 4;

3348 
num
 > 3) {

3349 
pc
 = (
u˝
[0] << 8) | ucp[1];

3350 
pcb
 = 
u˝
[2];

3351 
∂
 = 
u˝
[3] + 4;

3352 
	`¥ötf
(" EÀmíàaddªss: %d\n", 
pc
);

3353 
v
 = (
u˝
[4] << 24) + (ucp[5] << 16) + (ucp[6] << 8) + ucp[7];

3354 
	`¥ötf
(" Numbî o‡∂a˚s: %u\n", 
v
);

3355 
v
 = (
u˝
[8] << 24) + (ucp[9] << 16) + (ucp[10] << 8) + ucp[11];

3356 
	`¥ötf
(" Numbî o‡∂a˚Ñërõs: %u\n", 
v
);

3357 
v
 = (
u˝
[12] << 24) + (ucp[13] << 16) + (ucp[14] << 8) + ucp[15];

3358 
	`¥ötf
(" Numbî o‡picks: %u\n", 
v
);

3359 
v
 = (
u˝
[16] << 24) + (ucp[17] << 16) + (ucp[18] << 8) + ucp[19];

3360 
	`¥ötf
(" Numbî o‡pickÑërõs: %u\n", 
v
);

3361 
v
 = (
u˝
[20] << 24) + (ucp[21] << 16) + (ucp[22] << 8) + ucp[23];

3362 
	`¥ötf
(" Numbî o‡dëîmöed vﬁumêidítifõrs: %u\n", 
v
);

3363 
v
 = (
u˝
[24] << 24) + (ucp[25] << 16) + (ucp[26] << 8) + ucp[27];

3364 
	`¥ötf
(" Numbî o‡uƒódabÀ vﬁumêidítifõrs: %u\n", 
v
);

3365 i‡(
show_pcb
) {

3366 
	`gë_pcb_°r
(
pcb
, 
°r
, (str));

3367 
	`¥ötf
("\¿ <%s>\n", 
°r
);

3369 
num
 -
∂
;

3370 
u˝
 +
∂
;

3372 
	}
}

3376 
	$show_mch™gî_düg_d©a_∑ge
(* 
ª•
, 
Àn
, 
show_pcb
)

3378 
num
, 
∂
, 
pc
, 
pcb
;

3379 
v
;

3380 * 
u˝
;

3381 
°r
[
PCB_STR_LEN
];

3383 
	`¥ötf
("Media changer diagnostics dataÖage (smc-3) [0x16]\n");

3384 
num
 = 
Àn
 - 4;

3385 
u˝
 = &
ª•
[0] + 4;

3386 
num
 > 3) {

3387 
pc
 = (
u˝
[0] << 8) | ucp[1];

3388 
pcb
 = 
u˝
[2];

3389 
∂
 = 
u˝
[3] + 4;

3390 
	`¥ötf
(" P¨amëî code: %d\n", 
pc
);

3391 
	`¥ötf
(" Rïót: %d\n", !!(
u˝
[5] & 0x80));

3392 
	`¥ötf
(" Sí£ key: 0x%x\n", 
u˝
[5] & 0xf);

3393 
	`¥ötf
(" Addôi⁄Æ sí£ code: 0x%x\n", 
u˝
[6]);

3394 
	`¥ötf
(" Addôi⁄Æ sí£ codêquÆifõr: 0x%x\n", 
u˝
[7]);

3395 
v
 = (
u˝
[8] << 24) + (ucp[9] << 16) + (ucp[10] << 8) + ucp[11];

3396 
	`¥ötf
(" Víd‹ s≥cifi¯codêquÆifõr: 0x%x\n", 
v
);

3397 
v
 = (
u˝
[12] << 24) + (ucp[13] << 16) + (ucp[14] << 8) + ucp[15];

3398 
	`¥ötf
(" Produ˘Ñevisi⁄Üevñ: %u\n", 
v
);

3399 
v
 = (
u˝
[16] << 24) + (ucp[17] << 16) + (ucp[18] << 8) + ucp[19];

3400 
	`¥ötf
(" Numbî o‡moves: %u\n", 
v
);

3401 
v
 = (
u˝
[20] << 24) + (ucp[21] << 16) + (ucp[22] << 8) + ucp[23];

3402 
	`¥ötf
(" Numbî o‡pick: %u\n", 
v
);

3403 
v
 = (
u˝
[24] << 24) + (ucp[25] << 16) + (ucp[26] << 8) + ucp[27];

3404 
	`¥ötf
(" Numbî o‡pickÑërõs: %u\n", 
v
);

3405 
v
 = (
u˝
[28] << 24) + (ucp[29] << 16) + (ucp[30] << 8) + ucp[31];

3406 
	`¥ötf
(" Numbî o‡∂a˚s: %u\n", 
v
);

3407 
v
 = (
u˝
[32] << 24) + (ucp[33] << 16) + (ucp[34] << 8) + ucp[35];

3408 
	`¥ötf
(" Numbî o‡∂a˚Ñërõs: %u\n", 
v
);

3409 
v
 = (
u˝
[36] << 24) + (ucp[37] << 16) + (ucp[38] << 8) + ucp[39];

3410 
	`¥ötf
(" Numbî o‡dëîmöed vﬁumêidítifõrs: %u\n", 
v
);

3411 
v
 = (
u˝
[40] << 24) + (ucp[41] << 16) + (ucp[42] << 8) + ucp[43];

3412 
	`¥ötf
(" Numbî o‡uƒódabÀ vﬁumêidítifõrs: %u\n", 
v
);

3413 
	`¥ötf
(" O≥øti⁄ code: 0x%x\n", 
u˝
[44]);

3414 
	`¥ötf
(" Sîvi˚á˘i⁄: 0x%x\n", 
u˝
[45] & 0xf);

3415 
	`¥ötf
(" Medü ch™gîÉº‹Åy≥: 0x%x\n", 
u˝
[46]);

3416 
	`¥ötf
(" MTAV: %d\n", !!(
u˝
[47] & 0x8));

3417 
	`¥ötf
(" IAV: %d\n", !!(
u˝
[47] & 0x4));

3418 
	`¥ötf
(" LSAV: %d\n", !!(
u˝
[47] & 0x2));

3419 
	`¥ötf
(" DAV: %d\n", !!(
u˝
[47] & 0x1));

3420 
v
 = (
u˝
[48] << 8) + ucp[49];

3421 
	`¥ötf
(" MediumÅøn•‹àaddªss: 0x%x\n", 
v
);

3422 
v
 = (
u˝
[50] << 8) + ucp[51];

3423 
	`¥ötf
(" I¡ü»addªss: 0x%x\n", 
v
);

3424 
v
 = (
u˝
[52] << 8) + ucp[53];

3425 
	`¥ötf
(" La° suc˚ssfu»addªss: 0x%x\n", 
v
);

3426 
v
 = (
u˝
[54] << 8) + ucp[55];

3427 
	`¥ötf
(" De°ö©i⁄áddªss: 0x%x\n", 
v
);

3428 i‡(
∂
 > 91) {

3429 
	`¥ötf
(" VolumeÅag information:\n");

3430 
	`dSåHex
((c⁄° *)(
u˝
 + 56), 36, 0);

3432 i‡(
∂
 > 99) {

3433 
	`¥ötf
(" Time°am∞‹igö: 0x%x\n", 
u˝
[92] & 0xf);

3434 
	`¥ötf
(" Timestamp:\n");

3435 
	`dSåHex
((c⁄° *)(
u˝
 + 94), 6, 1);

3437 i‡(
show_pcb
) {

3438 
	`gë_pcb_°r
(
pcb
, 
°r
, (str));

3439 
	`¥ötf
("\¿ <%s>\n", 
°r
);

3441 
num
 -
∂
;

3442 
u˝
 +
∂
;

3444 
	}
}

3446 c⁄° * 
	gè≥_Æît_°rs
[] = {

3512 
	$show_è≥_Æît_ssc_∑ge
(* 
ª•
, 
Àn
, 
show_pcb
,

3513 c⁄° 
›ts_t
 * 
›t•
)

3515 
num
, 
∂
, 
pc
, 
pcb
, 
Êag
;

3516 * 
u˝
;

3517 
°r
[
PCB_STR_LEN
];

3520 
	`¥ötf
("TapeálertÖage (ssc-3) [0x2e]\n");

3521 
num
 = 
Àn
 - 4;

3522 
u˝
 = &
ª•
[0] + 4;

3523 
num
 > 3) {

3524 
pc
 = (
u˝
[0] << 8) | ucp[1];

3525 
pcb
 = 
u˝
[2];

3526 
∂
 = 
u˝
[3] + 4;

3527 
Êag
 = 
u˝
[4] & 1;

3528 i‡(
›t•
->
do_vîbo£
 && (0 =›t•->
do_brõf
Ë&& 
Êag
)

3529 
	`¥ötf
(" >>>> ");

3530 i‡((0 =
›t•
->
do_brõf
Ë|| o±•->
do_vîbo£
 || 
Êag
) {

3531 i‡(
pc
 < ()((
è≥_Æît_°rs
) /

3532 (
è≥_Æît_°rs
[0])))

3533 
	`¥ötf
(" %s: %d\n", 
è≥_Æît_°rs
[
pc
], 
Êag
);

3535 
	`¥ötf
(" Re£rvedÖ¨amëî codê0x%x, fœg: %d\n", 
pc
,

3536 
Êag
);

3538 i‡(
show_pcb
) {

3539 
	`gë_pcb_°r
(
pcb
, 
°r
, (str));

3540 
	`¥ötf
("\¿ <%s>\n", 
°r
);

3542 
num
 -
∂
;

3543 
u˝
 +
∂
;

3545 
	}
}

3549 
	$show_£ag©e_ˇche_∑ge
(* 
ª•
, 
Àn
, 
show_pcb
)

3551 
k
, 
j
, 
num
, 
∂
, 
pc
, 
pcb
;

3552 * 
u˝
;

3553 * 
xp
;

3554 
uöt64_t
 
uŒ
;

3555 
pcb_°r
[
PCB_STR_LEN
];

3557 
	`¥ötf
("Seagate cacheÖage [0x37]\n");

3558 
num
 = 
Àn
 - 4;

3559 
u˝
 = &
ª•
[0] + 4;

3560 
num
 > 3) {

3561 
pc
 = (
u˝
[0] << 8) | ucp[1];

3562 
pcb
 = 
u˝
[2];

3563 
∂
 = 
u˝
[3] + 4;

3564 
pc
) {

3565 0: 
	`¥ötf
(" Blocks sentÅo initiator"); ;

3566 1: 
	`¥ötf
(" BlocksÑeceived from initiator"); ;

3568 
	`¥ötf
(" BlocksÑead from cacheánd sentÅo initiator");

3571 
	`¥ötf
(" Number ofÑeadánd write commands whose size "

3575 
	`¥ötf
(" Number ofÑeadánd write commands whose size "

3577 : 
	`¥ötf
(" Unknow¿Sóg©ê∑ømëî codê0x%x", 
pc
); ;

3579 
k
 = 
∂
 - 4;

3580 
xp
 = 
u˝
 + 4;

3581 i‡(
k
 > ()(
uŒ
)) {

3582 
xp
 +(
k
 - (
uŒ
));

3583 
k
 = (
uŒ
);

3585 
uŒ
 = 0;

3586 
j
 = 0; j < 
k
; ++j) {

3587 i‡(
j
 > 0)

3588 
uŒ
 <<= 8;

3589 
uŒ
 |
xp
[
j
];

3591 
	`¥ötf
(" = %" 
PRIu64
 "", 
uŒ
);

3592 i‡(
show_pcb
) {

3593 
	`gë_pcb_°r
(
pcb
, 
pcb_°r
, (pcb_str));

3594 
	`¥ötf
("\¿ <%s>\n", 
pcb_°r
);

3596 
	`¥ötf
("\n");

3597 
num
 -
∂
;

3598 
u˝
 +
∂
;

3600 
	}
}

3604 
	$show_£ag©e_Á˘‹y_∑ge
(* 
ª•
, 
Àn
, 
show_pcb
)

3606 
k
, 
j
, 
num
, 
∂
, 
pc
, 
pcb
, 
vÆid
;

3607 * 
u˝
;

3608 * 
xp
;

3609 
uöt64_t
 
uŒ
;

3610 
pcb_°r
[
PCB_STR_LEN
];

3612 
	`¥ötf
("Seagate/Hitachi factoryÖage [0x3e]\n");

3613 
num
 = 
Àn
 - 4;

3614 
u˝
 = &
ª•
[0] + 4;

3615 
num
 > 3) {

3616 
pc
 = (
u˝
[0] << 8) | ucp[1];

3617 
pcb
 = 
u˝
[2];

3618 
∂
 = 
u˝
[3] + 4;

3619 
vÆid
 = 1;

3620 
pc
) {

3621 0: 
	`¥ötf
("Çumber of hoursÖowered up"); ;

3622 8: 
	`¥ötf
("Çumber of minutes untilÇext internal SMARTÅest");

3625 
vÆid
 = 0;

3626 
	`¥ötf
(" Unknow¿Sóg©e/Hôachò∑ømëî codê0x%x", 
pc
);

3629 i‡(
vÆid
) {

3630 
k
 = 
∂
 - 4;

3631 
xp
 = 
u˝
 + 4;

3632 i‡(
k
 > ()(
uŒ
)) {

3633 
xp
 +(
k
 - (
uŒ
));

3634 
k
 = (
uŒ
);

3636 
uŒ
 = 0;

3637 
j
 = 0; j < 
k
; ++j) {

3638 i‡(
j
 > 0)

3639 
uŒ
 <<= 8;

3640 
uŒ
 |
xp
[
j
];

3642 i‡(0 =
pc
)

3643 
	`¥ötf
(" = %.2f", (()
uŒ
) / 60.0 );

3645 
	`¥ötf
(" = %" 
PRIu64
 "", 
uŒ
);

3647 i‡(
show_pcb
) {

3648 
	`gë_pcb_°r
(
pcb
, 
pcb_°r
, (pcb_str));

3649 
	`¥ötf
("\¿ <%s>\n", 
pcb_°r
);

3651 
	`¥ötf
("\n");

3652 
num
 -
∂
;

3653 
u˝
 +
∂
;

3655 
	}
}

3658 
	$show_ascii_∑ge
(* 
ª•
, 
Àn
,

3659 
sg_sim∂e_öquúy_ª•
 * 
öq_d©
,

3660 c⁄° 
›ts_t
 * 
›t•
)

3662 
k
, 
num
, 
d⁄e
, 
pg_code
, 
subpg_code
, 
•f
;

3664 i‡(
Àn
 < 0) {

3665 
	`¥ötf
("response has badÜength\n");

3668 
num
 = 
Àn
 - 4;

3669 
d⁄e
 = 1;

3670 
•f
 = !!(
ª•
[0] & 0x40);

3671 
pg_code
 = 
ª•
[0] & 0x3f;

3672 
subpg_code
 = 
•f
 ? 
ª•
[1] : 0;

3674 i‡((
SUPP_PAGES_LPAGE
 !
pg_code
 ) && (
SUPP_SPGS_SUBPG
 =
subpg_code
)) {

3675 
	`¥ötf
("Suµ‹ãd sub∑ge†f‹ÜogÖage=0x%x\n", 
pg_code
);

3676 
k
 = 0; k < 
num
; k += 2)

3677 
	`show_∑ge_«me
(()
ª•
[4 + 
k
], ()resp[4 + k + 1],

3678 
öq_d©
);

3681 
pg_code
) {

3682 
SUPP_PAGES_LPAGE
:

3683 i‡(
•f
) {

3684 
	`¥ötf
("SupportedÜogÖagesánd subpages:\n");

3685 
k
 = 0; k < 
num
; k += 2)

3686 
	`show_∑ge_«me
(()
ª•
[4 + 
k
], ()resp[4 + k + 1],

3687 
öq_d©
);

3689 
	`¥ötf
("SupportedÜogÖages:\n");

3690 
k
 = 0; k < 
num
; ++k)

3691 
	`show_∑ge_«me
(()
ª•
[4 + 
k
], 0, 
öq_d©
);

3694 
BUFF_OVER_UNDER_LPAGE
:

3695 
	`show_buf„r_undî_ovîrun_∑ge
(
ª•
, 
Àn
, 
›t•
->
do_pcb
);

3697 
WRITE_ERR_LPAGE
:

3698 
READ_ERR_LPAGE
:

3699 
READ_REV_ERR_LPAGE
:

3700 
VERIFY_ERR_LPAGE
:

3701 
	`show_îr‹_cou¡î_∑ge
(
ª•
, 
Àn
, 
›t•
->
do_pcb
);

3703 
NON_MEDIUM_LPAGE
:

3704 
	`show_n⁄_medium_îr‹_∑ge
(
ª•
, 
Àn
, 
›t•
->
do_pcb
);

3706 
LAST_N_ERR_LPAGE
:

3707 
	`show_œ°_n_îr‹_∑ge
(
ª•
, 
Àn
, 
›t•
->
do_pcb
);

3709 
FORMAT_STATUS_LPAGE
:

3711 
öq_d©
->
≥rùhîÆ_ty≥
) {

3712 
PDT_DISK
: 
PDT_WO
: 
PDT_OPTICAL
: 
PDT_RBC
:

3714 
	`show_f‹m©_°©us_∑ge
(
ª•
, 
Àn
, 
›t•
->
do_pcb
);

3717 
d⁄e
 = 0;

3722 
LAST_N_DEFERRED_LPAGE
:

3723 
	`show_œ°_n_de„ºed_îr‹_∑ge
(
ª•
, 
Àn
, 
›t•
->
do_pcb
);

3727 
öq_d©
->
≥rùhîÆ_ty≥
) {

3728 
PDT_DISK
:

3729 
	`show_lb_¥ovisi⁄ög_∑ge
(
ª•
, 
Àn
, 
›t•
->
do_pcb
);

3731 
PDT_TAPE
: 
PDT_PRINTER
:

3733 
	`show_£quítül_ac˚ss_∑ge
(
ª•
, 
Àn
, 
›t•
->
do_pcb
,

3734 
›t•
->
do_vîbo£
);

3737 
d⁄e
 = 0;

3742 
TEMPERATURE_LPAGE
:

3743 
	`show_ãm≥øtuª_∑ge
(
ª•
, 
Àn
, 
›t•
->
do_pcb
, 1, 1);

3745 
START_STOP_LPAGE
:

3746 
	`show_°¨t_°›_∑ge
(
ª•
, 
Àn
, 
›t•
->
do_pcb
, o±•->
do_vîbo£
);

3748 
SELF_TEST_LPAGE
:

3749 
	`show_£lf_ã°_∑ge
(
ª•
, 
Àn
, 
›t•
->
do_pcb
);

3751 
SOLID_STATE_MEDIA_LPAGE
:

3752 
	`show_sﬁid_°©e_medü_∑ge
(
ª•
, 
Àn
, 
›t•
->
do_pcb
);

3756 
öq_d©
->
≥rùhîÆ_ty≥
) {

3757 
PDT_TAPE
: 
PDT_ADC
:

3759 
	`show_devi˚_°©s_∑ge
(
ª•
, 
Àn
, 
›t•
->
do_pcb
);

3761 
PDT_MCHANGER
:

3762 
	`show_medü_°©s_∑ge
(
ª•
, 
Àn
, 
›t•
->
do_pcb
);

3765 
d⁄e
 = 0;

3772 
öq_d©
->
≥rùhîÆ_ty≥
) {

3773 
PDT_DISK
: 
PDT_WO
: 
PDT_OPTICAL
: 
PDT_RBC
:

3775 
	`show_background_sˇn_ªsu…s_∑ge
(
ª•
, 
Àn
, 
›t•
->
do_pcb
,

3776 
›t•
->
do_vîbo£
);

3778 
PDT_MCHANGER
:

3779 
	`show_ñemít_°©s_∑ge
(
ª•
, 
Àn
, 
›t•
->
do_pcb
);

3782 
d⁄e
 = 0;

3787 
SAT_ATA_RESULTS_LPAGE
:

3789 
öq_d©
->
≥rùhîÆ_ty≥
) {

3790 
PDT_DISK
: 
PDT_WO
: 
PDT_OPTICAL
: 
PDT_RBC
:

3792 
	`show_©a_±_ªsu…s_∑ge
(
ª•
, 
Àn
, 
›t•
->
do_pcb
);

3794 
PDT_MCHANGER
:

3795 
	`show_mch™gî_düg_d©a_∑ge
(
ª•
, 
Àn
, 
›t•
->
do_pcb
);

3798 
d⁄e
 = 0;

3805 
öq_d©
->
≥rùhîÆ_ty≥
) {

3806 
PDT_DISK
: 
PDT_WO
: 
PDT_OPTICAL
: 
PDT_RBC
:

3808 
	`show_n⁄_vﬁ©ûe_ˇche_∑ge
(
ª•
, 
Àn
, 
›t•
->
do_pcb
);

3811 
d⁄e
 = 0;

3816 
PROTO_SPECIFIC_LPAGE
:

3817 
d⁄e
 = 
	`show_¥Ÿocﬁ_•ecific_∑ge
(
ª•
, 
Àn
, 
›t•
);

3819 
STATS_LPAGE
:

3820 i‡(
subpg_code
 <
HIGH_GRP_STATS_SUBPG
)

3821 
d⁄e
 = 
	`show_°©s_≥rf‹m_∑ge
(
ª•
, 
Àn
, 
›t•
);

3822 i‡(
subpg_code
 =
CACHE_STATS_SUBPG
)

3823 
d⁄e
 = 
	`show_ˇche_°©s_∑ge
(
ª•
, 
Àn
, 
›t•
);

3825 
d⁄e
 = 0;

3827 
PCT_LPAGE
:

3828 
	`show_powî_c⁄dôi⁄_å™sôi⁄s_∑ge
(
ª•
, 
Àn
, 
›t•
->
do_pcb
);

3831 
	`show_d©a_com¥essi⁄_log_∑ge
(
ª•
, 
Àn
, 
›t•
->
do_pcb
);

3833 
TAPE_ALERT_LPAGE
:

3835 
öq_d©
->
≥rùhîÆ_ty≥
) {

3836 
PDT_TAPE
:

3837 
	`show_è≥_Æît_ssc_∑ge
(
ª•
, 
Àn
, 
›t•
->
do_pcb
, optsp);

3840 
d⁄e
 = 0;

3846 
	`show_è≥_ußge_log_∑ge
(
ª•
, 
Àn
, 
›t•
->
do_pcb
);

3849 
	`show_è≥_ˇ∑côy_log_∑ge
(
ª•
, 
Àn
, 
›t•
->
do_pcb
);

3852 
	`show_d©a_com¥essi⁄_log_∑ge
(
ª•
, 
Àn
, 
›t•
->
do_pcb
);

3854 
IE_LPAGE
:

3855 
	`show_õ_∑ge
(
ª•
, 
Àn
, 
›t•
->
do_pcb
, 1);

3859 
öq_d©
->
≥rùhîÆ_ty≥
) {

3860 
PDT_DISK
: 
PDT_WO
: 
PDT_OPTICAL
: 
PDT_RBC
:

3862 
	`show_£ag©e_ˇche_∑ge
(
ª•
, 
Àn
, 
›t•
->
do_pcb
);

3865 
d⁄e
 = 0;

3872 
öq_d©
->
≥rùhîÆ_ty≥
) {

3873 
PDT_DISK
: 
PDT_WO
: 
PDT_OPTICAL
: 
PDT_RBC
:

3875 
	`show_£ag©e_Á˘‹y_∑ge
(
ª•
, 
Àn
, 
›t•
->
do_pcb
);

3878 
d⁄e
 = 0;

3884 
d⁄e
 = 0;

3887 i‡(! 
d⁄e
) {

3888 
	`¥ötf
("Noáscii information forÖage = 0x%x, here is hex:\n",

3889 
ª•
[0] & 0x3f);

3890 i‡(
Àn
 > 128) {

3891 
	`dSåHex
((c⁄° *)
ª•
, 64, 1);

3892 
	`¥ötf
(" ..... [truncatedáfter 64 of %d bytes (use '-H'Åo "

3893 "£êthêª°)]\n", 
Àn
);

3896 
	`dSåHex
((c⁄° *)
ª•
, 
Àn
, 1);

3898 
	}
}

3901 
	$„tchTem≥øtuª
(
sg_fd
, * 
ª•
, 
max_Àn
,

3902 
›ts_t
 * 
›t•
)

3904 
Àn
;

3905 
ªs
 = 0;

3907 
›t•
->
pg_code
 = 
TEMPERATURE_LPAGE
;

3908 
›t•
->
subpg_code
 = 
NOT_SPG_SUBPG
;

3909 
ªs
 = 
	`do_logs
(
sg_fd
, 
ª•
, 
max_Àn
, 
›t•
);

3910 i‡(0 =
ªs
) {

3911 
Àn
 = (
ª•
[2] << 8) +Ñesp[3] + 4;

3912 i‡(
›t•
->
do_øw
)

3913 
	`dSåRaw
((c⁄° *)
ª•
, 
Àn
);

3914 i‡(
›t•
->
do_hex
)

3915 
	`dSåHex
((c⁄° *)
ª•
, 
Àn
, (1 =
›t•
->
do_hex
));

3917 
	`show_ãm≥øtuª_∑ge
(
ª•
, 
Àn
, 
›t•
->
do_pcb
, 0, 0);

3918 }i‡(
SG_LIB_CAT_NOT_READY
 =
ªs
)

3919 
	`Ârötf
(
°dîr
, "DeviceÇotÑeady\n");

3921 
›t•
->
pg_code
 = 
IE_LPAGE
;

3922 
ªs
 = 
	`do_logs
(
sg_fd
, 
ª•
, 
max_Àn
, 
›t•
);

3923 i‡(0 =
ªs
) {

3924 
Àn
 = (
ª•
[2] << 8) +Ñesp[3] + 4;

3925 i‡(
›t•
->
do_øw
)

3926 
	`dSåRaw
((c⁄° *)
ª•
, 
Àn
);

3927 i‡(
›t•
->
do_hex
)

3928 
	`dSåHex
((c⁄° *)
ª•
, 
Àn
, (1 =
›t•
->
do_hex
));

3930 
	`show_õ_∑ge
(
ª•
, 
Àn
, 0, 0);

3932 
	`Ârötf
(
°dîr
, "UnableÅo findÅemperature inÉitherÜogÖage "

3935 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

3936  (
ªs
 >0Ë?Ñe†: 
SG_LIB_CAT_OTHER
;

3937 
	}
}

3941 
	$maö
(
¨gc
, * 
¨gv
[])

3943 
sg_fd
, 
k
, 
pg_Àn
, 
ªs
, 
ª•_Àn
;

3944 
ªt
 = 0;

3945 
sg_sim∂e_öquúy_ª•
 
öq_out
;

3946 
›ts_t
 
›ts
;

3948 
	`mem£t
(&
›ts
, 0, (opts));

3949 
	`mem£t
(
r•_buff
, 0, (rsp_buff));

3951 
›ts
.
∑ge_c⁄åﬁ
 = 1;

3952 
ªs
 = 
	`¥o˚ss_˛
(&
›ts
, 
¨gc
, 
¨gv
);

3953 i‡(
ªs
)

3954  
SG_LIB_SYNTAX_ERROR
;

3955 i‡(
›ts
.
do_hñp
) {

3956 
	`ußge_f‹
(&
›ts
);

3959 i‡(
›ts
.
do_vîsi⁄
) {

3960 
	`Ârötf
(
°dîr
, "Vîsi⁄ såög: %s\n", 
vîsi⁄_°r
);

3964 i‡(
NULL
 =
›ts
.
devi˚_«me
) {

3965 
	`Ârötf
(
°dîr
, "No DEVICEárgument given\n");

3966 
	`ußge_f‹
(&
›ts
);

3967  
SG_LIB_SYNTAX_ERROR
;

3969 i‡(
›ts
.
do_øw
) {

3970 i‡(
	`sg_£t_bö¨y_mode
(
STDOUT_FILENO
) < 0) {

3971 
	`≥º‹
("sg_set_binary_mode");

3972  
SG_LIB_FILE_ERROR
;

3976 i‡((
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
›ts
.
devi˚_«me
, 0 ,

3977 
›ts
.
do_vîbo£
)) < 0) {

3978 i‡((
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
›ts
.
devi˚_«me
, 1 ,

3979 
›ts
.
do_vîbo£
)) < 0) {

3980 
	`Ârötf
(
°dîr
, "error opening file: %s: %s \n",

3981 
›ts
.
devi˚_«me
, 
	`ß„_°ªº‹
(-
sg_fd
));

3982  
SG_LIB_FILE_ERROR
;

3985 i‡(
›ts
.
do_li°
 || o±s.
do_Æl
) {

3986 
›ts
.
pg_code
 = 
SUPP_PAGES_LPAGE
;

3987 i‡((
›ts
.
do_li°
 > 1Ë|| (›ts.
do_Æl
 > 1))

3988 
›ts
.
subpg_code
 = 
SUPP_SPGS_SUBPG
;

3990 i‡(
›ts
.
do_å™•‹t
) {

3991 i‡((
›ts
.
pg_code
 > 0Ë|| (›ts.
subpg_code
 > 0) ||

3992 
›ts
.
do_ãm≥øtuª
) {

3993 
	`Ârötf
(
°dîr
, "'-T' shouldÇot be mixed with options "

3995  
SG_LIB_FILE_ERROR
;

3997 
›ts
.
pg_code
 = 
PROTO_SPECIFIC_LPAGE
;

3999 
pg_Àn
 = 0;

4001 i‡(0 =
›ts
.
do_øw
) {

4002 i‡(
	`sg_sim∂e_öquúy
(
sg_fd
, &
öq_out
, 1, 
›ts
.
do_vîbo£
)) {

4003 
	`Ârötf
(
°dîr
, "%s doesn'tÑespondÅoá SCSI INQUIRY\n",

4004 
›ts
.
devi˚_«me
);

4005 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

4006  
SG_LIB_CAT_OTHER
;

4007 } i‡((0 =
›ts
.
do_hex
Ë&& (0 =›ts.
do_«me
))

4008 
	`¥ötf
(" %.8† %.16† %.4s\n", 
öq_out
.
víd‹
,

4009 
öq_out
.
¥odu˘
, inq_out.
ªvisi⁄
);

4011 
	`mem£t
(&
öq_out
, 0, (inq_out));

4013 i‡(1 =
›ts
.
do_ãm≥øtuª
)

4014  
	`„tchTem≥øtuª
(
sg_fd
, 
r•_buff
, 
SHORT_RESP_LEN
, &
›ts
);

4016 i‡(
›ts
.
do_£À˘
) {

4017 
k
 = 
	`sg_Œ_log_£À˘
(
sg_fd
, !!(
›ts
.
do_p¸e£t
), o±s.
do_•
,

4018 
›ts
.
∑ge_c⁄åﬁ
, o±s.
pg_code
, o±s.
subpg_code
,

4019 
NULL
, 0, 1, 
›ts
.
do_vîbo£
);

4020 i‡(
k
) {

4021 i‡(
SG_LIB_CAT_NOT_READY
 =
k
)

4022 
	`Ârötf
(
°dîr
, "log_select: deviceÇotÑeady\n");

4023 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

4024 
	`Ârötf
(
°dîr
, "log_select: field in cdb illegal\n");

4025 i‡(
SG_LIB_CAT_INVALID_OP
 =
k
)

4026 
	`Ârötf
(
°dîr
, "log_select:Çot supported\n");

4027 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
k
)

4028 
	`Ârötf
(
°dîr
, "log_select: unitáttention\n");

4029 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
k
)

4030 
	`Ârötf
(
°dîr
, "log_select:áborted command\n");

4032 
	`Ârötf
(
°dîr
, "log_select: failed (%d),Åry '-v' for more "

4033 "öf‹m©i⁄\n", 
k
);

4035  (
k
 >0Ë? k : 
SG_LIB_CAT_OTHER
;

4037 
ª•_Àn
 = (
›ts
.
maxÀn
 > 0Ë? o±s.maxÀ¿: 
MX_ALLOC_LEN
;

4038 
ªs
 = 
	`do_logs
(
sg_fd
, 
r•_buff
, 
ª•_Àn
, &
›ts
);

4039 i‡(0 =
ªs
) {

4040 
pg_Àn
 = (
r•_buff
[2] << 8) +Ñsp_buff[3];

4041 i‡((
pg_Àn
 + 4Ë> 
ª•_Àn
) {

4042 
	`¥ötf
("Only fetched %d bytes ofÑesponse (available: %d "

4044 
ª•_Àn
, 
pg_Àn
 + 4);

4045 
pg_Àn
 = 
ª•_Àn
 - 4;

4047 } i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

4048 
	`Ârötf
(
°dîr
, "log_sense:Çot supported\n");

4049 i‡(
SG_LIB_CAT_NOT_READY
 =
ªs
)

4050 
	`Ârötf
(
°dîr
, "log_sense: deviceÇotÑeady\n");

4051 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

4052 
	`Ârötf
(
°dîr
, "log_sense: field in cdb illegal\n");

4053 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
)

4054 
	`Ârötf
(
°dîr
, "log_sense: unitáttention\n");

4055 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

4056 
	`Ârötf
(
°dîr
, "log_sense:áborted command\n");

4057 i‡(0 =
›ts
.
do_Æl
) {

4058 i‡(
›ts
.
do_øw
)

4059 
	`dSåRaw
((c⁄° *)
r•_buff
, 
pg_Àn
 + 4);

4060 i‡(
›ts
.
do_hex
 > 1)

4061 
	`dSåHex
((c⁄° *)
r•_buff
, 
pg_Àn
 + 4, (2 =
›ts
.
do_hex
));

4062 i‡(
pg_Àn
 > 1) {

4063 i‡(
›ts
.
do_hex
) {

4064 i‡(
r•_buff
[0] & 0x40)

4065 
	`¥ötf
("LogÖage code=0x%x,0x%x, DS=%d, SPF=1, "

4066 "∑ge_Àn=0x%x\n", 
r•_buff
[0] & 0x3f,Ñsp_buff[1],

4067 !!(
r•_buff
[0] & 0x80), 
pg_Àn
);

4069 
	`¥ötf
("LogÖage code=0x%x, DS=%d, SPF=0,Öage_len=0x%x\n",

4070 
r•_buff
[0] & 0x3f, !!‘•_buff[0] & 0x80), 
pg_Àn
);

4071 
	`dSåHex
((c⁄° *)
r•_buff
, 
pg_Àn
 + 4, 1);

4074 
	`show_ascii_∑ge
(
r•_buff
, 
pg_Àn
 + 4, &
öq_out
, &
›ts
);

4077 
ªt
 = 
ªs
;

4079 i‡(
›ts
.
do_Æl
 && (
pg_Àn
 > 1)) {

4080 
my_Àn
 = 
pg_Àn
;

4081 
•f
;

4082 
∑º
[1024];

4084 
•f
 = !!(
r•_buff
[0] & 0x40);

4085 i‡(
my_Àn
 > ()(
∑º
)) {

4086 
	`Ârötf
(
°dîr
, "UnexpectedlyÜargeÖage_len=%d,ÅrimÅo %d\n",

4087 
my_Àn
, ()(
∑º
));

4088 
my_Àn
 = (
∑º
);

4090 
	`mem˝y
(
∑º
, 
r•_buff
 + 4, 
my_Àn
);

4091 
k
 = 0; k < 
my_Àn
; ++k) {

4092 i‡(0 =
›ts
.
do_øw
)

4093 
	`¥ötf
("\n");

4094 
›ts
.
pg_code
 = 
∑º
[
k
] & 0x3f;

4095 i‡(
•f
)

4096 
›ts
.
subpg_code
 = 
∑º
[++
k
];

4098 
›ts
.
subpg_code
 = 
NOT_SPG_SUBPG
;

4100 
ªs
 = 
	`do_logs
(
sg_fd
, 
r•_buff
, 
ª•_Àn
, &
›ts
);

4101 i‡(0 =
ªs
) {

4102 
pg_Àn
 = (
r•_buff
[2] << 8) +Ñsp_buff[3];

4103 i‡((
pg_Àn
 + 4Ë> 
ª•_Àn
) {

4104 
	`Ârötf
(
°dîr
, "Only fetched %d bytes ofÑesponse, "

4105 "åunˇã ouçut\n", 
ª•_Àn
);

4106 
pg_Àn
 = 
ª•_Àn
 - 4;

4108 i‡(
›ts
.
do_øw
)

4109 
	`dSåRaw
((c⁄° *)
r•_buff
, 
pg_Àn
 + 4);

4110 i‡(
›ts
.
do_hex
 > 1)

4111 
	`dSåHex
((c⁄° *)
r•_buff
, 
pg_Àn
 + 4,

4112 (2 =
›ts
.
do_hex
));

4113 i‡(
›ts
.
do_hex
) {

4114 i‡(
r•_buff
[0] & 0x40)

4115 
	`¥ötf
("LogÖage code=0x%x,0x%x, DS=%d, SPF=1,Öage_"

4116 "Àn=0x%x\n", 
r•_buff
[0] & 0x3f,Ñsp_buff[1],

4117 !!(
r•_buff
[0] & 0x80), 
pg_Àn
);

4119 
	`¥ötf
("LogÖage code=0x%x, DS=%d, SPF=0,Öage_len="

4120 "0x%x\n", 
r•_buff
[0] & 0x3f,

4121 !!(
r•_buff
[0] & 0x80), 
pg_Àn
);

4122 
	`dSåHex
((c⁄° *)
r•_buff
, 
pg_Àn
 + 4, 1);

4125 
	`show_ascii_∑ge
(
r•_buff
, 
pg_Àn
 + 4, &
öq_out
, &
›ts
);

4126 } i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

4127 
	`Ârötf
(
°dîr
, "log_sense:Öage=0x%x,0x%xÇot supported\n",

4128 
›ts
.
pg_code
, o±s.
subpg_code
);

4129 i‡(
SG_LIB_CAT_NOT_READY
 =
ªs
)

4130 
	`Ârötf
(
°dîr
, "log_sense: deviceÇotÑeady\n");

4131 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

4132 
	`Ârötf
(
°dîr
, "log_sense: field in cdb illegal "

4133 "[∑ge=0x%x,0x%x]\n", 
›ts
.
pg_code
, o±s.
subpg_code
);

4134 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
)

4135 
	`Ârötf
(
°dîr
, "log_sense: unitáttention\n");

4136 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

4137 
	`Ârötf
(
°dîr
, "log_sense:áborted command\n");

4139 
	`Ârötf
(
°dîr
, "log_sense: failed,Åry '-v' for more "

4143 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

4144  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

4145 
	}
}

	@src/sg_luns.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<˘y≥.h
>

14 
	~<gë›t.h
>

15 
	#__STDC_FORMAT_MACROS
 1

	)

16 
	~<öây≥s.h
>

18 #ifde‡
HAVE_CONFIG_H


19 
	~"c⁄fig.h
"

21 
	~"sg_lib.h
"

22 
	~"sg_cmds_basic.h
"

31 c⁄° * 
	gvîsi⁄_°r
 = "1.22 20130528";

33 
	#MAX_RLUNS_BUFF_LEN
 (1024 * 1024)

	)

34 
	#DEF_RLUNS_BUFF_LEN
 (1024 * 8)

	)

38 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

39 {"decode", 
no_¨gumít
, 0, 'd'},

40 {"hñp", 
no_¨gumít
, 0, 'h'},

41 {"hex", 
no_¨gumít
, 0, 'H'},

42 #ifde‡
SG_LIB_LINUX


43 {"löux", 
no_¨gumít
, 0, 'l'},

45 {"maxÀn", 
ªquúed_¨gumít
, 0, 'm'},

46 {"quõt", 
no_¨gumít
, 0, 'q'},

47 {"øw", 
no_¨gumít
, 0, 'r'},

48 {"£À˘", 
ªquúed_¨gumít
, 0, 's'},

49 {"ã°", 
ªquúed_¨gumít
, 0, 't'},

50 {"vîbo£", 
no_¨gumít
, 0, 'v'},

51 {"vîsi⁄", 
no_¨gumít
, 0, 'V'},

56 
	$ußge
()

58 #ifde‡
SG_LIB_LINUX


59 
	`Ârötf
(
°dîr
, "Usage: "

66 
	`Ârötf
(
°dîr
, "Usage: "

73 
	`Ârötf
(
°dîr
,

82 #ifde‡
SG_LIB_LINUX


83 
	`Ârötf
(
°dîr
,

87 
	`Ârötf
(
°dîr
,

106 "REPORT LUNS comm™d.\n", 
DEF_RLUNS_BUFF_LEN
 );

107 
	}
}

113 
	$decode_lun
(c⁄° * 
Àadö
, c⁄° * 
lu≈
, 
do_hex
,

114 
vîbo£
)

116 
k
, 
j
, 
x
, 
a_mëhod
, 
bus_id
, 
èrgë
, 
lun
, 
Àn_Êd
, 
e_a_mëhod
;

117 
√xt_Àvñ
;

118 
nŸ_•ec
[8] = {0xff, 0xff, 0xff, 0xff,

120 
l_Àadö
[128];

121 
b
[256];

122 
uöt64_t
 
uŒ
;

124 i‡(0 =
	`memcmp
(
lu≈
, 
nŸ_•ec
, (not_spec))) {

125 
	`¥ötf
("%sLogiˇ»unôÇŸ s≥cifõd\n", 
Àadö
);

128 
	`mem£t
(
l_Àadö
, 0, (l_leadin));

129 
k
 = 0; k < 4; ++k, 
lu≈
 += 2) {

130 
√xt_Àvñ
 = 0;

131 
	`°∫˝y
(
l_Àadö
, 
Àadö
, (l_leadin) - 3);

132 i‡(
k
 > 0) {

133 
	`¥ötf
("%s>>%†Àvñáddªssög:\n", 
l_Àadö
,

134 ((1 =
k
) ? "Second" : ((2 == k) ? "Third" : "Fourth")));

135 
	`°rˇt
(
l_Àadö
, " ");

137 
a_mëhod
 = (
lu≈
[0] >> 6) & 0x3;

138 
a_mëhod
) {

140 
bus_id
 = 
lu≈
[0] & 0x3f;

141 
	`¢¥ötf
(
b
, (b), "%sPeripheral deviceáddressing: ",

142 
l_Àadö
);

143 i‡((0 =
bus_id
Ë&& (0 =
vîbo£
)) {

144 i‡(
do_hex
)

145 
	`¥ötf
("%¶un=0x%02x\n", 
b
, 
lu≈
[1]);

147 
	`¥ötf
("%¶un=%d\n", 
b
, 
lu≈
[1]);

149 i‡(
do_hex
)

150 
	`¥ötf
("%sbus_id=0x%02x, %s=0x%02x\n", 
b
, 
bus_id
,

151 (
bus_id
 ? "èrgë" : "lun"), 
lu≈
[1]);

153 
	`¥ötf
("%sbus_id=%d, %s=%d\n", 
b
, 
bus_id
,

154 (
bus_id
 ? "èrgë" : "lun"), 
lu≈
[1]);

156 i‡(
bus_id
)

157 
√xt_Àvñ
 = 1;

160 
lun
 = ((
lu≈
[0] & 0x3f) << 8) +Üunp[1];

161 i‡(
do_hex
)

162 
	`¥ötf
("%sFœà•a˚áddªssög:Üun=0x%04x\n", 
l_Àadö
,

163 
lun
);

165 
	`¥ötf
("%sFœà•a˚áddªssög:Üun=%d\n", 
l_Àadö
, 
lun
);

168 
èrgë
 = (
lu≈
[0] & 0x3f);

169 
bus_id
 = (
lu≈
[1] >> 5) & 0x7;

170 
lun
 = 
lu≈
[1] & 0x1f;

171 i‡(
do_hex
)

172 
	`¥ötf
("%sLogical unitáddressing: bus_id=0x%x, "

173 "èrgë=0x%02x,Üun=0x%02x\n", 
l_Àadö
, 
bus_id
,

174 
èrgë
, 
lun
);

176 
	`¥ötf
("%sLogical unitáddressing: bus_id=%d,Åarget=%d, "

177 "lun=%d\n", 
l_Àadö
, 
bus_id
, 
èrgë
, 
lun
);

180 
Àn_Êd
 = (
lu≈
[0] & 0x30) >> 4;

181 
e_a_mëhod
 = 
lu≈
[0] & 0xf;

182 
x
 = 
lu≈
[1];

183 i‡((0 =
Àn_Êd
Ë&& (1 =
e_a_mëhod
)) {

184 
	`¢¥ötf
(
b
, (b), "well knownÜogical unit");

185 
x
) {

187 
	`¥ötf
("%sREPORT LUNS %s\n", 
l_Àadö
, 
b
);

190 
	`¥ötf
("%sACCESS CONTROLS %s\n", 
l_Àadö
, 
b
);

193 
	`¥ötf
("%sTARGET LOG PAGES %s\n", 
l_Àadö
, 
b
);

196 
	`¥ötf
("%sSECURITY PROTOCOL %s\n", 
l_Àadö
, 
b
);

199 i‡(
do_hex
)

200 
	`¥ötf
("%s%†0x%02x\n", 
l_Àadö
, 
b
, 
x
);

202 
	`¥ötf
("%s%†%d\n", 
l_Àadö
, 
b
, 
x
);

205 } i‡((1 =
Àn_Êd
Ë&& (2 =
e_a_mëhod
)) {

206 
x
 = (
lu≈
[1] << 16) + (lunp[2] << 8) +Üunp[3];

207 i‡(
do_hex
)

208 
	`¥ötf
("%sExtended flat spaceáddressing:Üun=0x%06x\n",

209 
l_Àadö
, 
x
);

211 
	`¥ötf
("%sExtended flat spaceáddressing:Üun=%d\n",

212 
l_Àadö
, 
x
);

213 } i‡((2 =
Àn_Êd
Ë&& (2 =
e_a_mëhod
)) {

214 
uŒ
 = 0;

215 
j
 = 0; j < 5; ++j) {

216 i‡(
j
 > 0)

217 
uŒ
 <<= 8;

218 
uŒ
 |
lu≈
[1 + 
j
];

220 i‡(
do_hex
)

221 
	`¥ötf
("%sLongÉxtended flat spaceáddressing: "

222 "lun=010x%" 
PRIx64
 "\n", 
l_Àadö
, 
uŒ
);

224 
	`¥ötf
("%sLongÉxtended flat spaceáddressing: "

225 "lun=%" 
PRIu64
 "\n", 
l_Àadö
, 
uŒ
);

226 } i‡((3 =
Àn_Êd
Ë&& (0x‡=
e_a_mëhod
))

227 
	`¥ötf
("%sLogical unit _not_ specifiedáddressing\n",

228 
l_Àadö
);

230 i‡(
Àn_Êd
 < 2) {

231 i‡(1 =
Àn_Êd
)

232 
x
 = (
lu≈
[1] << 16) + (lunp[2] << 8) +Üunp[3];

233 i‡(
do_hex
)

234 
	`¥ötf
("%sExtendedÜogical unitáddressing: "

236 
l_Àadö
, 
Àn_Êd
, 
e_a_mëhod
, 
x
);

238 
	`¥ötf
("%sExtendedÜogical unitáddressing: "

240 
l_Àadö
, 
Àn_Êd
, 
e_a_mëhod
, 
x
);

242 
uŒ
 = 0;

243 
x
 = (2 =
Àn_Êd
) ? 5 : 7;

244 
j
 = 0; j < 
x
; ++j) {

245 i‡(
j
 > 0)

246 
uŒ
 <<= 8;

247 
uŒ
 |
lu≈
[1 + 
j
];

249 i‡(
do_hex
) {

250 
	`¥ötf
("%sExtendedÜogical unitáddressing: "

251 "Àngth=%d,É.á. mëhod=%d, ", 
l_Àadö
,

252 
Àn_Êd
, 
e_a_mëhod
);

253 i‡(5 =
Àn_Êd
)

254 
	`¥ötf
("vÆue=0x%010" 
PRIx64
 "\n", 
uŒ
);

256 
	`¥ötf
("vÆue=0x%014" 
PRIx64
 "\n", 
uŒ
);

258 
	`¥ötf
("%sExtendedÜogical unitáddressing: "

259 "Àngth=%d,É.á. mëhod=%d, vÆue=%" 
PRIu64


260 "\n", 
l_Àadö
, 
Àn_Êd
, 
e_a_mëhod
, 
uŒ
);

265 
	`¥ötf
("%s<<decode_lun: fau…yÜogic>>\n", 
l_Àadö
);

268 i‡(
√xt_Àvñ
)

270 i‡((2 =
a_mëhod
Ë&& (
k
 < 3Ë&& (
lu≈
[2] ||Üunp[3]))

271 
	`¥ötf
("%s<<unexpected dataátÇextÜevel, continue>>\n",

272 
l_Àadö
);

275 
	}
}

277 #ifde‡
SG_LIB_LINUX


279 
	$löux2t10_lun
(
uöt64_t
 
löux_lun
, 
t10_lun
[])

281 
k
;

282 
u
;

284 
k
 = 0; k < 4; ++k, 
löux_lun
 >>= 16) {

285 
u
 = 
löux_lun
 & 0xffff;

286 
t10_lun
[(2 * 
k
Ë+ 1] = 
u
 & 0xff;

287 
t10_lun
[2 * 
k
] = (
u
 >> 8) & 0xff;

289 
	}
}

291 
uöt64_t


292 
	$t10_2löux_lun
(c⁄° 
t10_lun
[])

294 c⁄° * 
˝
;

295 
uöt64_t
 
ªs
;

297 
ªs
 = (
t10_lun
[6] << 8) +Å10_lun[7];

298 
˝
 = 
t10_lun
 + 4; cp >=Å10_lun; cp -= 2) {

299 
ªs
 <<= 16;

300 
ªs
 +(*
˝
 << 8) + *(cp + 1);

302  
ªs
;

303 
	}
}

309 
uöt64_t


310 
	$t10_2löux_lun64bôBR
(c⁄° 
t10_lun
[])

312 
i
;

313 
uöt64_t
 
lun
;

315 
lun
 = 0;

316 
i
 = 0; i < ()(
lun
); i += 2)

317 
lun
 =Üu¿| (((
t10_lun
[
i
] << 8) |Å10_lun[i + 1]) << (i * 8));

318  
lun
;

319 
	}
}

324 
	$dSåRaw
(c⁄° * 
°r
, 
Àn
)

326 
k
;

328 
k
 = 0 ; k < 
Àn
; ++k)

329 
	`¥ötf
("%c", 
°r
[
k
]);

330 
	}
}

333 
	$maö
(
¨gc
, * 
¨gv
[])

335 
sg_fd
, 
k
, 
m
, 
off
, 
ªs
, 
c
, 
li°_Àn
, 
luns
, 
åunc
;

336 
decode
 = 0;

337 
do_hex
 = 0;

338 #ifde‡
SG_LIB_LINUX


339 
do_löux
 = 0;

341 
maxÀn
 = 0;

342 
do_quõt
 = 0;

343 
do_øw
 = 0;

344 
£À˘_ªp
 = 0;

345 
vîbo£
 = 0;

346 #ifde‡
SG_LIB_LINUX


347 
ã°_löux_ö
 = 0;

348 
ã°_löux_out
 = 0;

349 
ã°_löux_out2
 = 0;

351 
h
;

352 c⁄° * 
ã°_¨g
 = 
NULL
;

353 c⁄° * 
devi˚_«me
 = 
NULL
;

354 c⁄° * 
˝
;

355 
lun_¨r
[8];

356 * 
ªp‹tLunsBuff
 = 
NULL
;

357 
ªt
 = 0;

360 
›ti⁄_ödex
 = 0;

362 #ifde‡
SG_LIB_LINUX


363 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "dhHlm:qrs:t:vV", 
l⁄g_›ti⁄s
,

364 &
›ti⁄_ödex
);

366 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "dhHm:qrs:t:vV", 
l⁄g_›ti⁄s
,

367 &
›ti⁄_ödex
);

369 i‡(
c
 == -1)

372 
c
) {

374 
decode
 = 1;

378 
	`ußge
();

381 ++
do_hex
;

383 #ifde‡
SG_LIB_LINUX


385 ++
do_löux
;

389 
maxÀn
 = 
	`sg_gë_num
(
›èrg
);

390 i‡((
maxÀn
 < 0Ë|| (maxÀ¿> 
MAX_RLUNS_BUFF_LEN
)) {

391 
	`Ârötf
(
°dîr
, "argumentÅo '--maxlen' should be %d or "

392 "Àss\n", 
MAX_RLUNS_BUFF_LEN
);

393  
SG_LIB_SYNTAX_ERROR
;

397 ++
do_quõt
;

400 ++
do_øw
;

403 i‡((1 !
	`ssˇnf
(
›èrg
, "%d", &
£À˘_ªp
)) ||

404 (
£À˘_ªp
 < 0) || (select_rep > 255)) {

405 
	`Ârötf
(
°dîr
, "badárgumentÅo '--select'\n");

406  
SG_LIB_SYNTAX_ERROR
;

410 
ã°_¨g
 = 
›èrg
;

413 ++
vîbo£
;

416 
	`Ârötf
(
°dîr
, "vîsi⁄: %s\n", 
vîsi⁄_°r
);

419 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê0x%x ??\n", 
c
);

420 
	`ußge
();

421  
SG_LIB_SYNTAX_ERROR
;

424 i‡(
›töd
 < 
¨gc
) {

425 i‡(
NULL
 =
devi˚_«me
) {

426 
devi˚_«me
 = 
¨gv
[
›töd
];

427 ++
›töd
;

429 i‡(
›töd
 < 
¨gc
) {

430 ; 
›töd
 < 
¨gc
; ++optind)

431 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

432 
¨gv
[
›töd
]);

433 
	`ußge
();

434  
SG_LIB_SYNTAX_ERROR
;

438 i‡(
ã°_¨g
) {

439 
	`mem£t
(
lun_¨r
, 0, (lun_arr));

440 
˝
 = 
ã°_¨g
;

442 #ifde‡
SG_LIB_LINUX


443 i‡('L' =
	`touµî
(
˝
[0])) {

444 
uöt64_t
 
uŒ
;

446 i‡(1 !
	`ssˇnf
(
˝
 + 1, " %" 
SCNu64
, &
uŒ
)) {

447 
	`Ârötf
(
°dîr
, "UnableÅoÑead Linux style LUN integer "

449  
SG_LIB_SYNTAX_ERROR
;

451 
	`löux2t10_lun
(
uŒ
, 
lun_¨r
);

452 
ã°_löux_ö
 = 1;

457 
m
 = 
	`°æí
(
˝
);

458 #ifde‡
SG_LIB_LINUX


459 i‡('L' =
	`touµî
(
˝
[
m
 - 1]))

460 
ã°_löux_out
 = 1;

461 i‡('W' =
	`touµî
(
˝
[
m
 - 1]))

462 
ã°_löux_out2
 = 1;

464 i‡(('0' =
˝
[0]Ë&& ('X' =
	`touµî
(cp[1])))

465 
˝
 += 2;

466 i‡(
	`°rchr
(
˝
, ' ') || strchr(cp, '\t')) {

467 
k
 = 0; k < 8; ++k, 
˝
 +
m
) {

468 i‡(1 !
	`ssˇnf
(
˝
, " %2x%n", &
h
, &
m
))

470 
lun_¨r
[
k
] = 
h
 & 0xff;

473 
k
 = 0; k < 8; ++k, 
˝
 += 2) {

474 i‡(1 !
	`ssˇnf
(
˝
, "%2x", &
h
))

476 
lun_¨r
[
k
] = 
h
 & 0xff;

479 i‡(0 =
k
) {

480 
	`Ârötf
(
°dîr
, "expectedá hexÇumber, optionallyÖrefixed "

482  
SG_LIB_SYNTAX_ERROR
;

485 #ifde‡
SG_LIB_LINUX


486 i‡(
vîbo£
 || 
ã°_löux_ö
 || 
ã°_löux_out2
)

488 i‡(
vîbo£
)

491 
	`¥ötf
("64 bit LUN in T10Öreferred (hex) format: ");

492 
k
 = 0; k < 8; ++k)

493 
	`¥ötf
(" %02x", 
lun_¨r
[
k
]);

494 
	`¥ötf
("\n");

496 #ifde‡
SG_LIB_LINUX


497 i‡(
ã°_löux_out
) {

498 i‡(
do_hex
 > 1)

499 
	`¥ötf
("Linux 'word flipped' integer LUNÑepresentation: "

500 "0x%016" 
PRIx64
 "\n", 
	`t10_2löux_lun
(
lun_¨r
));

501 i‡(
do_hex
)

502 
	`¥ötf
("Linux 'word flipped' integer LUNÑepresentation: 0x%"

503 
PRIx64
 "\n", 
	`t10_2löux_lun
(
lun_¨r
));

505 
	`¥ötf
("Linux 'word flipped' integer LUNÑepresentation: %"

506 
PRIu64
 "\n", 
	`t10_2löux_lun
(
lun_¨r
));

507 } i‡(
ã°_löux_out2
) {

508 i‡(
do_hex
 > 1)

509 
	`¥ötf
("Linux internal 64 bit LUNÑepresentation: 0x%016"

510 
PRIx64
 "\n", 
	`t10_2löux_lun64bôBR
(
lun_¨r
));

511 i‡(
do_hex
)

512 
	`¥ötf
("Linux internal 64 bit LUNÑepresentation: 0x%"

513 
PRIx64
 "\n", 
	`t10_2löux_lun64bôBR
(
lun_¨r
));

515 
	`¥ötf
("Linux internal 64 bit LUNÑepresentation: %"

516 
PRIu64
 "\n", 
	`t10_2löux_lun64bôBR
(
lun_¨r
));

519 
	`¥ötf
("Decoded LUN:\n");

520 
	`decode_lun
(" ", 
lun_¨r
, 
do_hex
, 
vîbo£
);

523 i‡(
NULL
 =
devi˚_«me
) {

524 
	`Ârötf
(
°dîr
, "missing deviceÇame!\n");

525 
	`ußge
();

526  
SG_LIB_SYNTAX_ERROR
;

529 i‡(
do_øw
) {

530 i‡(
	`sg_£t_bö¨y_mode
(
STDOUT_FILENO
) < 0) {

531 
	`≥º‹
("sg_set_binary_mode");

532  
SG_LIB_FILE_ERROR
;

536 
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 0 , 
vîbo£
);

537 i‡(
sg_fd
 < 0) {

538 
	`Ârötf
(
°dîr
, "›íÉº‹: %s: %s\n", 
devi˚_«me
,

539 
	`ß„_°ªº‹
(-
sg_fd
));

540  
SG_LIB_FILE_ERROR
;

543 i‡(0 =
maxÀn
)

544 
maxÀn
 = 
DEF_RLUNS_BUFF_LEN
;

545 
ªp‹tLunsBuff
 = (*)
	`ˇŒoc
(1, 
maxÀn
);

546 i‡(
NULL
 =
ªp‹tLunsBuff
) {

547 
	`Ârötf
(
°dîr
, "u«bÀÅÿmÆlo¯%d byãs\n", 
maxÀn
);

548  
SG_LIB_CAT_OTHER
;

550 
åunc
 = 0;

552 
ªs
 = 
	`sg_Œ_ªp‹t_luns
(
sg_fd
, 
£À˘_ªp
, 
ªp‹tLunsBuff
, 
maxÀn
, 1,

553 
vîbo£
);

554 
ªt
 = 
ªs
;

555 i‡(0 =
ªs
) {

556 
li°_Àn
 = (
ªp‹tLunsBuff
[0] << 24) + (reportLunsBuff[1] << 16) +

557 (
ªp‹tLunsBuff
[2] << 8) +ÑeportLunsBuff[3];

558 i‡(
do_øw
) {

559 
	`dSåRaw
((c⁄° *)
ªp‹tLunsBuff
, 
li°_Àn
 + 8);

560 
the_íd
;

562 i‡(1 =
do_hex
) {

563 
	`dSåHex
((c⁄° *)
ªp‹tLunsBuff
, 
li°_Àn
 + 8, 1);

564 
the_íd
;

566 
luns
 = (
li°_Àn
 / 8);

567 i‡(0 =
do_quõt
)

568 
	`¥ötf
("LunÜistÜength = %d which imples %dÜunÉntr%s\n",

569 
li°_Àn
, 
luns
, ((1 ==Üuns) ? "y" : "ies"));

570 i‡((
li°_Àn
 + 8Ë> 
maxÀn
) {

571 
luns
 = ((
maxÀn
 - 8) / 8);

572 
åunc
 = 1;

573 
	`Ârötf
(
°dîr
, " <<too manyÜuns for internal buffer, will "

574 "show %dÜun%s>>\n", 
luns
, ((1 ==Üuns) ? "" : "s"));

576 i‡(
vîbo£
 > 1) {

577 
	`Ârötf
(
°dîr
, "\nOutputÑesponse in hex\n");

578 
	`dSåHex
((c⁄° *)
ªp‹tLunsBuff
,

579 (
åunc
 ? 
maxÀn
 : 
li°_Àn
 + 8), 1);

581 
k
 = 0, 
off
 = 8; k < 
luns
; ++k, off += 8) {

582 i‡(0 =
do_quõt
) {

583 i‡(0 =
k
)

584 
	`¥ötf
("Rï‹àlun†[£À˘_ªp‹t=0x%x]:\n", 
£À˘_ªp
);

585 
	`¥ötf
(" ");

587 
m
 = 0; m < 8; ++m)

588 
	`¥ötf
("%02x", 
ªp‹tLunsBuff
[
off
 + 
m
]);

589 #ifde‡
SG_LIB_LINUX


590 i‡(
do_löux
) {

591 
uöt64_t
 
lö_lun
;

593 
lö_lun
 = 
	`t10_2löux_lun
(
ªp‹tLunsBuff
 + 
off
);

594 i‡(
do_hex
 > 1)

595 
	`¥ötf
(" [0x%" 
PRIx64
 "]", 
lö_lun
);

597 
	`¥ötf
(" [%" 
PRIu64
 "]", 
lö_lun
);

600 
	`¥ötf
("\n");

601 i‡(
decode
)

602 
	`decode_lun
(" ", 
ªp‹tLunsBuff
 + 
off
, 
do_hex
,

603 
vîbo£
);

605 } i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

606 
	`Ârötf
(
°dîr
, "Report Luns commandÇot supported (support "

608 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

609 
	`Ârötf
(
°dîr
, "Report Luns,áborted command\n");

610 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

611 
	`Ârötf
(
°dîr
, "Report Luns command has bad field in cdb\n");

613 
	`Ârötf
(
°dîr
, "Report Luns command failed\n");

614 i‡(0 =
vîbo£
)

615 
	`Ârötf
(
°dîr
, "Åry '-v' option for more information\n");

618 
the_íd
:

619 i‡(
ªp‹tLunsBuff
)

620 
	`‰ì
(
ªp‹tLunsBuff
);

621 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

622 i‡(
ªs
 < 0) {

623 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

624 i‡(0 =
ªt
)

625  
SG_LIB_FILE_ERROR
;

627  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

628 
	}
}

	@src/sg_map.c

21 #i‚de‡
_GNU_SOURCE


22 
	#_GNU_SOURCE


	)

25 
	~<uni°d.h
>

26 
	~<f˙é.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<î∫o.h
>

31 
	~<dúít.h
>

32 
	~<libgí.h
>

33 
	~<sys/io˘l.h
>

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

37 #ifde‡
HAVE_CONFIG_H


38 
	~"c⁄fig.h
"

40 
	~"sg_lib.h
"

41 
	~"sg_cmds_basic.h
"

42 
	~"sg_io_löux.h
"

45 c⁄° * 
	gvîsi⁄_°r
 = "1.09 20130507";

47 c⁄° * 
	gdevfs_id
 = "/dev/.devfsd";

49 
	#NUMERIC_SCAN_DEF
 1

	)

51 
	#INQUIRY_RESP_INITIAL_LEN
 36

	)

52 
	#MAX_SG_DEVS
 4096

	)

53 
	#PRESENT_ARRAY_SIZE
 
MAX_SG_DEVS


	)

55 c⁄° * 
	gsysfs_sg_dú
 = "/sys/class/scsi_generic";

56 
	ggí_ödex_¨r
[
PRESENT_ARRAY_SIZE
];

57 
	ghas_sysfs_sg
 = 0;

60 
	smy_m≠_öfo


62 
	ma˘ive
;

63 
	mlö_dev_ty≥
;

64 
	mŸh_dev_num
;

65 
sg_scsi_id
 
	msg_d©
;

66 
	mvíd‹
[8];

67 
	m¥odu˘
[16];

68 
	mªvisi⁄
[4];

69 } 
	tmy_m≠_öfo_t
;

72 
	#MAX_SD_DEVS
 (26 + 26*26 + 26*26*26Ë

	)

74 
	#MAX_SR_DEVS
 128

	)

75 
	#MAX_ST_DEVS
 128

	)

76 
	#MAX_OSST_DEVS
 128

	)

77 
	#MAX_ERRORS
 5

	)

79 
my_m≠_öfo_t
 
	gm≠_¨r
[
MAX_SG_DEVS
];

81 
	#LIN_DEV_TYPE_UNKNOWN
 0

	)

82 
	#LIN_DEV_TYPE_SD
 1

	)

83 
	#LIN_DEV_TYPE_SR
 2

	)

84 
	#LIN_DEV_TYPE_ST
 3

	)

85 
	#LIN_DEV_TYPE_SCD
 4

	)

86 
	#LIN_DEV_TYPE_OSST
 5

	)

89 
	smy_scsi_idlun
 {

91 
	mdev_id
;

92 
	mho°_unique_id
;

93 } 
	tMy_scsi_idlun
;

96 
	#EBUFF_SZ
 256

	)

97 
	gebuff
[
EBUFF_SZ
];

99 
sˇn_dev_ty≥
(c⁄° * 
Àadö
, 
max_dev
, 
do_numîic
,

100 
lö_dev_ty≥
, 
œ°_sg_öd
);

102 
	$ußge
()

104 
	`¥ötf
("Usage: sg_map [-a] [-h] [-i] [-n] [-sd] [-scd or -sr] [-st] "

106 
	`¥ötf
(" where:\n");

107 
	`¥ötf
(" -a doálphabetic scan (ie sga, sgb, sgc)\n");

108 
	`¥ötf
(" -h or -? showÅhis usage messageÅhenÉxit\n");

109 
	`¥ötf
(" -iálso show device INQUIRY strings\n");

110 
	`¥ötf
(" -n doÇumeric scan (i.e. sg0, sg1, sg2) "

112 
	`¥ötf
(" -sd show mappingÅo disks\n");

113 
	`¥ötf
(" -scd show mappingÅo cdroms (look for /dev/scd<n>\n");

114 
	`¥ötf
(" -sr show mappingÅo cdroms (look for /dev/sr<n>\n");

115 
	`¥ötf
(" -st show mappingÅoÅapes (stánd osst devices)\n");

116 
	`¥ötf
(" -VÖrint version stringÅhenÉxit\n");

117 
	`¥ötf
(" -xálso show bus,chan,id,lunándÅype\n\n");

118 
	`¥ötf
("IfÇo '-s*'árguments givenÅhen showáll mappings. This "

121 
	}
}

123 
	$sˇndú_£À˘
(c⁄° 
dúít
 * 
s
)

125 
k
;

127 i‡(1 =
	`ssˇnf
(
s
->
d_«me
, "sg%d", &
k
)) {

128 i‡((
k
 >0Ë&& (k < 
PRESENT_ARRAY_SIZE
)) {

129 
gí_ödex_¨r
[
k
] = 1;

134 
	}
}

136 
	$sysfs_sg_sˇn
(c⁄° * 
dú_«me
)

138 
dúít
 ** 
«mñi°
;

139 
num
, 
k
;

141 
num
 = 
	`sˇndú
(
dú_«me
, &
«mñi°
, 
sˇndú_£À˘
, 
NULL
);

142 i‡(
num
 < 0)

143  -
î∫o
;

144 
k
 = 0; k < 
num
; ++k)

145 
	`‰ì
(
«mñi°
[
k
]);

146 
	`‰ì
(
«mñi°
);

147  
num
;

148 
	}
}

150 
	$make_dev_«me
(* 
‚ame
, c⁄° * 
Àadö
, 
k
,

151 
do_numîic
)

153 
buff
[64];

154 
⁄es
,
ãns
,
hundªds
;

155 
buff_idx
;

157 
	`°r˝y
(
‚ame
, 
Àadö
 ?Üeadin : "/dev/sg");

158 i‡(
do_numîic
) {

159 
	`•rötf
(
buff
, "%d", 
k
);

160 
	`°rˇt
(
‚ame
, 
buff
);

162 i‡(
k
 >= (26 + 26*26 + 26*26*26)) {

163 
	`°rˇt
(
‚ame
, "xxxx");

166 
⁄es
 = 
k
 % 26;

168 i‡((
k
 - 26) >= 0)

169 
ãns
 = ((
k
-26)/26) % 26;

170 
ãns
 = -1;

172 i‡((
k
 - (26 + 26*26)) >= 0)

173 
hundªds
 = ((
k
 - (26 + 26*26))/(26*26)) % 26;

174 
hundªds
 = -1;

176 
buff_idx
 = 0;

177 i‡(
hundªds
 >0Ë
buff
[
buff_idx
++] = 'a' + ()hundreds;

178 i‡(
ãns
 >0Ë
buff
[
buff_idx
++] = 'a' + ()tens;

179 
buff
[
buff_idx
++] = 'a' + ()
⁄es
;

180 
buff
[
buff_idx
] = '\0';

181 
	`°rˇt
(
‚ame
, 
buff
);

183 
	}
}

186 
	$maö
(
¨gc
, * 
¨gv
[])

188 
sg_fd
, 
ªs
, 
k
;

189 
do_numîic
 = 
NUMERIC_SCAN_DEF
;

190 
do_Æl_s
 = 1;

191 
do_sd
 = 0;

192 
do_°
 = 0;

193 
do_os°
 = 0;

194 
do_§
 = 0;

195 
do_scd
 = 0;

196 
do_exåa
 = 0;

197 
do_öquúy
 = 0;

198 
‚ame
[64];

199 
num_îr‹s
 = 0;

200 
num_sûít
 = 0;

201 
óc˚s_îr
 = 0;

202 
œ°_sg_öd
 = -1;

203 
°©
 
a_°©
;

205 
k
 = 1; k < 
¨gc
; ++k) {

206 i‡(0 =
	`°rcmp
("-n", 
¨gv
[
k
]))

207 
do_numîic
 = 1;

208 i‡(0 =
	`°rcmp
("-a", 
¨gv
[
k
]))

209 
do_numîic
 = 0;

210 i‡(0 =
	`°rcmp
("-x", 
¨gv
[
k
]))

211 
do_exåa
 = 1;

212 i‡(0 =
	`°rcmp
("-i", 
¨gv
[
k
]))

213 
do_öquúy
 = 1;

214 i‡(0 =
	`°rcmp
("-sd", 
¨gv
[
k
])) {

215 
do_sd
 = 1;

216 
do_Æl_s
 = 0;

217 } i‡(0 =
	`°rcmp
("-°", 
¨gv
[
k
])) {

218 
do_°
 = 1;

219 
do_os°
 = 1;

220 
do_Æl_s
 = 0;

221 } i‡(0 =
	`°rcmp
("-§", 
¨gv
[
k
])) {

222 
do_§
 = 1;

223 
do_Æl_s
 = 0;

224 } i‡(0 =
	`°rcmp
("-scd", 
¨gv
[
k
])) {

225 
do_scd
 = 1;

226 
do_Æl_s
 = 0;

227 } i‡(0 =
	`°rcmp
("-V", 
¨gv
[
k
])) {

228 
	`Ârötf
(
°dîr
, "Vîsi⁄ såög: %s\n", 
vîsi⁄_°r
);

229 
	`exô
(0);

230 } i‡((0 =
	`°rcmp
("-?", 
¨gv
[
k
])) ||

231 (0 =
	`°∫cmp
("-h", 
¨gv
[
k
], 2))) {

232 
	`¥ötf
(

234 
	`ußge
();

235  
SG_LIB_SYNTAX_ERROR
;

236 } i‡(*
¨gv
[
k
] == '-') {

237 
	`¥ötf
("Unknow¿swôch: %s\n", 
¨gv
[
k
]);

238 
	`ußge
();

239  
SG_LIB_SYNTAX_ERROR
;

240 } i‡(*
¨gv
[
k
] != '-') {

241 
	`¥ötf
("Unknownárgument\n");

242 
	`ußge
();

243  
SG_LIB_SYNTAX_ERROR
;

247 i‡((
	`°©
(
sysfs_sg_dú
, &
a_°©
Ë>0Ë&& (
	`S_ISDIR
◊_°©.
°_mode
)))

248 
has_sysfs_sg
 = 
	`sysfs_sg_sˇn
(
sysfs_sg_dú
);

250 i‡(
	`°©
(
devfs_id
, &
a_°©
) == 0)

251 
	`¥ötf
("# Note:Åhe devfsÖseudo file system isÖresent\n");

253 
k
 = 0, 
ªs
 = 0; (k < 
MAX_SG_DEVS
Ë&& (
num_îr‹s
 < 
MAX_ERRORS
);

254 ++
k
, 
ªs
 = (
sg_fd
 >0Ë? 
	`˛o£
(sg_fd) : 0) {

255 i‡(
ªs
 < 0) {

256 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, "Eº‹ closög %†", 
‚ame
);

257 
	`≥º‹
("sg_map: closeÉrror");

258  
SG_LIB_FILE_ERROR
;

260 i‡(
has_sysfs_sg
) {

261 i‡(0 =
gí_ödex_¨r
[
k
]) {

262 
sg_fd
 = -1;

265 
	`make_dev_«me
(
‚ame
, "/dev/sg", 
k
, 1);

267 
	`make_dev_«me
(
‚ame
, "/dev/sg", 
k
, 
do_numîic
);

269 
sg_fd
 = 
	`›í
(
‚ame
, 
O_RDONLY
 | 
O_NONBLOCK
);

270 i‡(
sg_fd
 < 0) {

271 i‡(
EBUSY
 =
î∫o
) {

272 
m≠_¨r
[
k
].
a˘ive
 = -2;

275 i‡((
ENODEV
 =
î∫o
Ë|| (
ENOENT
 ==Érrno) ||

276 (
ENXIO
 =
î∫o
)) {

277 ++
num_îr‹s
;

278 ++
num_sûít
;

279 
m≠_¨r
[
k
].
a˘ive
 = -1;

283 i‡(
EACCES
 =
î∫o
)

284 
óc˚s_îr
 = 1;

285 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, "Eº‹ o≥nög %†", 
‚ame
);

286 
	`≥º‹
(
ebuff
);

287 ++
num_îr‹s
;

291 
ªs
 = 
	`io˘l
(
sg_fd
, 
SG_GET_SCSI_ID
, &
m≠_¨r
[
k
].
sg_d©
);

292 i‡(
ªs
 < 0) {

293 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

294 "devi˚ %†Áûed o¿sg io˘l, skù", 
‚ame
);

295 
	`≥º‹
(
ebuff
);

296 ++
num_îr‹s
;

299 i‡(
do_öquúy
) {

300 
buff
[
INQUIRY_RESP_INITIAL_LEN
];

302 i‡(0 =
	`sg_Œ_öquúy
(
sg_fd
, 0, 0, 0, 
buff
, (buff),

304 
	`mem˝y
(
m≠_¨r
[
k
].
víd‹
, &
buff
[8], 8);

305 
	`mem˝y
(
m≠_¨r
[
k
].
¥odu˘
, &
buff
[16], 16);

306 
	`mem˝y
(
m≠_¨r
[
k
].
ªvisi⁄
, &
buff
[32], 4);

309 
m≠_¨r
[
k
].
a˘ive
 = 1;

310 
m≠_¨r
[
k
].
Ÿh_dev_num
 = -1;

311 
œ°_sg_öd
 = 
k
;

313 i‡((
num_îr‹s
 >
MAX_ERRORS
Ë&& (
num_sûít
 <Çum_errors)) {

314 
	`¥ötf
("Stopping becauseÅhereáreÅoo manyÉrror\n");

315 i‡(
óc˚s_îr
)

316 
	`¥ötf
("Ñootáccess may beÑequired\n");

317  
SG_LIB_FILE_ERROR
;

319 i‡(
œ°_sg_öd
 < 0) {

320 
	`¥ötf
("Stopping becauseÇo sg devices found\n");

323 i‡(
do_Æl_s
 || 
do_sd
)

324 
	`sˇn_dev_ty≥
("/dev/sd", 
MAX_SD_DEVS
, 0, 
LIN_DEV_TYPE_SD
, 
œ°_sg_öd
);

325 i‡(
do_Æl_s
 || 
do_§
)

326 
	`sˇn_dev_ty≥
("/dev/§", 
MAX_SR_DEVS
, 1, 
LIN_DEV_TYPE_SR
, 
œ°_sg_öd
);

327 i‡(
do_Æl_s
 || 
do_scd
)

328 
	`sˇn_dev_ty≥
("/dev/scd", 
MAX_SR_DEVS
, 1, 
LIN_DEV_TYPE_SCD
,

329 
œ°_sg_öd
);

330 i‡(
do_Æl_s
 || 
do_°
)

331 
	`sˇn_dev_ty≥
("/dev/n°", 
MAX_ST_DEVS
, 1, 
LIN_DEV_TYPE_ST
,

332 
œ°_sg_öd
);

333 i‡(
do_Æl_s
 || 
do_os°
)

334 
	`sˇn_dev_ty≥
("/dev/os°", 
MAX_OSST_DEVS
, 1, 
LIN_DEV_TYPE_OSST
,

335 
œ°_sg_öd
);

337 
k
 = 0; k <
œ°_sg_öd
; ++k) {

338 i‡(
has_sysfs_sg
) {

339 i‡(0 =
gí_ödex_¨r
[
k
]) {

342 
	`make_dev_«me
(
‚ame
, "/dev/sg", 
k
, 1);

344 
	`make_dev_«me
(
‚ame
, "/dev/sg", 
k
, 
do_numîic
);

345 
	`¥ötf
("%s", 
‚ame
);

346 
m≠_¨r
[
k
].
a˘ive
)

349 
	`¥ötf
(
do_exåa
 ? " -2 -2 -2 -2 -2" : " busy");

352 
	`¥ötf
(
do_exåa
 ? " -1 -1 -1 -1 -1" : "ÇotÖresent");

355 
	`¥ötf
(
do_exåa
 ? " -3 -3 -3 -3 -3" : " someÉrror");

358 i‡(
do_exåa
)

359 
	`¥ötf
(" %d %d %d %d %d", 
m≠_¨r
[
k
].
sg_d©
.
ho°_no
,

360 
m≠_¨r
[
k
].
sg_d©
.
ch™√l
, m≠_¨r[k].sg_d©.
scsi_id
,

361 
m≠_¨r
[
k
].
sg_d©
.
lun
, m≠_¨r[k].sg_d©.
scsi_ty≥
);

362 
m≠_¨r
[
k
].
lö_dev_ty≥
)

364 
LIN_DEV_TYPE_SD
:

365 
	`make_dev_«me
(
‚ame
, "/dev/sd" , 
m≠_¨r
[
k
].
Ÿh_dev_num
, 0);

366 
	`¥ötf
(" %s", 
‚ame
);

368 
LIN_DEV_TYPE_ST
:

369 
	`make_dev_«me
(
‚ame
, "/dev/n°" , 
m≠_¨r
[
k
].
Ÿh_dev_num
, 1);

370 
	`¥ötf
(" %s", 
‚ame
);

372 
LIN_DEV_TYPE_OSST
:

373 
	`make_dev_«me
(
‚ame
, "/dev/os°" , 
m≠_¨r
[
k
].
Ÿh_dev_num
, 1);

374 
	`¥ötf
(" %s", 
‚ame
);

376 
LIN_DEV_TYPE_SR
:

377 
	`make_dev_«me
(
‚ame
, "/dev/§" , 
m≠_¨r
[
k
].
Ÿh_dev_num
, 1);

378 
	`¥ötf
(" %s", 
‚ame
);

380 
LIN_DEV_TYPE_SCD
:

381 
	`make_dev_«me
(
‚ame
, "/dev/scd" , 
m≠_¨r
[
k
].
Ÿh_dev_num
, 1);

382 
	`¥ötf
(" %s", 
‚ame
);

387 i‡(
do_öquúy
)

388 
	`¥ötf
(" %.8† %.16† %.4s", 
m≠_¨r
[
k
].
víd‹
,

389 
m≠_¨r
[
k
].
¥odu˘
, m≠_¨r[k].
ªvisi⁄
);

392 
	`¥ötf
(" badÜogic\n");

395 
	`¥ötf
("\n");

398 
	}
}

400 
	$föd_dev_ö_sg_¨r
(
My_scsi_idlun
 * 
my_idlun
, 
ho°_no
,

401 
œ°_sg_öd
)

403 
k
;

404 
sg_scsi_id
 * 
sidp
;

406 
k
 = 0; k <
œ°_sg_öd
; ++k) {

407 
sidp
 = &(
m≠_¨r
[
k
].
sg_d©
);

408 i‡((
ho°_no
 =
sidp
->host_no) &&

409 ((
my_idlun
->
dev_id
 & 0xffË=
sidp
->
scsi_id
) &&

410 (((
my_idlun
->
dev_id
 >> 8Ë& 0xffË=
sidp
->
lun
) &&

411 (((
my_idlun
->
dev_id
 >> 16Ë& 0xffË=
sidp
->
ch™√l
))

412  
k
;

415 
	}
}

417 
	$sˇn_dev_ty≥
(c⁄° * 
Àadö
, 
max_dev
, 
do_numîic
,

418 
lö_dev_ty≥
, 
œ°_sg_öd
)

420 
k
, 
ªs
, 
öd
, 
sg_fd
 = 0;

421 
num_îr‹s
 = 0;

422 
num_sûít
 = 0;

423 
ho°_no
 = -1;

424 
My_scsi_idlun
 
my_idlun
;

425 
‚ame
[64];

427 
k
 = 0, 
ªs
 = 0; (k < 
max_dev
Ë&& (
num_îr‹s
 < 
MAX_ERRORS
);

428 ++
k
, 
ªs
 = (
sg_fd
 >0Ë? 
	`˛o£
(sg_fd) : 0) {

432 i‡(
ªs
 < 0) {

433 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, "Eº‹ closög %†", 
‚ame
);

434 
	`≥º‹
("sg_map: closeÉrror");

435 #i‚de‡
IGN_CLOSE_ERR


438 ++
num_îr‹s
;

439 
sg_fd
 = 0;

443 
	`make_dev_«me
(
‚ame
, 
Àadö
, 
k
, 
do_numîic
);

444 #ifde‡
DEBUG


445 
	`¥ötf
 ("Tryög %s: ", 
‚ame
);

448 
sg_fd
 = 
	`›í
(
‚ame
, 
O_RDONLY
 | 
O_NONBLOCK
);

449 i‡(
sg_fd
 < 0) {

450 #ifde‡
DEBUG


451 
	`¥ötf
 ("ERROR %i\n", 
î∫o
);

453 i‡(
EBUSY
 =
î∫o
) {

454 
	`¥ötf
("Devi˚ %†i†busy\n", 
‚ame
);

455 ++
num_îr‹s
;

456 } i‡((
ENODEV
 =
î∫o
Ë|| (
ENXIO
 ==Érrno)) {

457 ++
num_îr‹s
;

458 ++
num_sûít
;

459 } i‡(
ENOENT
 !
î∫o
) {

460 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, "Eº‹ o≥nög %†", 
‚ame
);

461 
	`≥º‹
(
ebuff
);

462 ++
num_îr‹s
;

467 
ªs
 = 
	`io˘l
(
sg_fd
, 
SCSI_IOCTL_GET_IDLUN
, &
my_idlun
);

468 i‡(
ªs
 < 0) {

469 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

470 "devi˚ %†Áûed o¿scsòio˘l(idlun), skù", 
‚ame
);

471 
	`≥º‹
(
ebuff
);

472 ++
num_îr‹s
;

473 #ifde‡
DEBUG


474 
	`¥ötf
 ("Couldn't get IDLUN!\n");

478 
ªs
 = 
	`io˘l
(
sg_fd
, 
SCSI_IOCTL_GET_BUS_NUMBER
, &
ho°_no
);

479 i‡(
ªs
 < 0) {

480 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

481 "devi˚ %†Áûed o¿scsòio˘l(bus_numbî), skù", 
‚ame
);

482 
	`≥º‹
(
ebuff
);

483 ++
num_îr‹s
;

484 #ifde‡
DEBUG


485 
	`¥ötf
 ("Couldn't get BUS!\n");

489 #ifde‡
DEBUG


490 
	`¥ötf
 ("%i(%xË%ò%ò%ò%i\n", 
ho°_no
, 
my_idlun
.
ho°_unique_id
,

491 (
my_idlun
.
dev_id
>>24)&0xff, (my_idlun.dev_id>>16)&0xff,

492 (
my_idlun
.
dev_id
>>8)&0xff, my_idlun.dev_id&0xff);

494 
öd
 = 
	`föd_dev_ö_sg_¨r
(&
my_idlun
, 
ho°_no
, 
œ°_sg_öd
);

495 i‡(
öd
 >= 0) {

496 
m≠_¨r
[
öd
].
Ÿh_dev_num
 = 
k
;

497 
m≠_¨r
[
öd
].
lö_dev_ty≥
 =Üin_dev_type;

500 
	`¥ötf
("Strange, couldÇot find device %s mappedÅo sg device??\n",

501 
‚ame
);

503 
	}
}

	@src/sg_map26.c

18 #i‚de‡
_GNU_SOURCE


19 
	#_GNU_SOURCE


	)

22 
	~<uni°d.h
>

23 
	~<f˙é.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 
	~<˘y≥.h
>

28 
	~<î∫o.h
>

29 
	~<gë›t.h
>

30 
	~<dúít.h
>

31 
	~<libgí.h
>

32 
	~<sys/io˘l.h
>

33 
	~<sys/ty≥s.h
>

34 
	~<sys/°©.h
>

35 
	~<löux/maj‹.h
>

37 #ifde‡
HAVE_CONFIG_H


38 
	~"c⁄fig.h
"

40 
	~"sg_lib.h
"

42 c⁄° * 
	gvîsi⁄_°r
 = "1.09 20130507";

44 
	#ME
 "sg_m≠26: "

	)

46 
	#NT_NO_MATCH
 0

	)

47 
	#NT_SD
 1

	)

48 
	#NT_SR
 2

	)

49 
	#NT_HD
 3

	)

50 
	#NT_ST
 4

	)

51 
	#NT_OSST
 5

	)

52 
	#NT_SG
 6

	)

53 
	#NT_CH
 7

	)

54 
	#NT_REG
 8

	)

55 
	#NT_DIR
 9

	)

57 
	#NAME_LEN_MAX
 260

	)

58 
	#D_NAME_LEN_MAX
 516

	)

60 #i‚de‡
SCSI_CHANGER_MAJOR


61 
	#SCSI_CHANGER_MAJOR
 86

	)

63 #i‚de‡
OSST_MAJOR


64 
	#OSST_MAJOR
 206

	)

68 
	#FT_OTHER
 0

	)

69 
	#FT_REGULAR
 1

	)

70 
	#FT_BLOCK
 2

	)

71 
	#FT_CHAR
 3

	)

72 
	#FT_DIR
 4

	)

75 #i‚de‡
SCSI_DISK8_MAJOR


76 
	#SCSI_DISK8_MAJOR
 128

	)

77 
	#SCSI_DISK9_MAJOR
 129

	)

78 
	#SCSI_DISK10_MAJOR
 130

	)

79 
	#SCSI_DISK11_MAJOR
 131

	)

80 
	#SCSI_DISK12_MAJOR
 132

	)

81 
	#SCSI_DISK13_MAJOR
 133

	)

82 
	#SCSI_DISK14_MAJOR
 134

	)

83 
	#SCSI_DISK15_MAJOR
 135

	)

87 
	#ST_NBR_MODE_BITS
 2

	)

88 
	#ST_MODE_SHIFT
 (7 - 
ST_NBR_MODE_BITS
)

	)

89 
	#TAPE_NR
(
mö‹
Ë–(((mö‹Ë& ~255Ë>> (
ST_NBR_MODE_BITS
 + 1)) | \

90 ((
mö‹
Ë& ~(-1 << 
ST_MODE_SHIFT
)Ë)

	)

92 c⁄° * 
	gsys_sg_dú
 = "/sys/class/scsi_generic/";

93 c⁄° * 
	gsys_sd_dú
 = "/sys/block/";

94 c⁄° * 
	gsys_§_dú
 = "/sys/block/";

95 c⁄° * 
	gsys_hd_dú
 = "/sys/block/";

96 c⁄° * 
	gsys_°_dú
 = "/sys/class/scsi_tape/";

97 c⁄° * 
	gsys_sch_dú
 = "/sys/class/scsi_changer/";

98 c⁄° * 
	gsys_os°_dú
 = "/sys/class/onstream_tape/";

99 c⁄° * 
	gdef_dev_dú
 = "/dev";

102 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

113 c⁄° * 
	g¡_«mes
[] = {

127 
	$ußge
()

129 
	`Ârötf
(
°dîr
, "Usage: "

162 
	}
}

170 
	gß„_îrbuf
[64] = {'u', 'n', 'k', 'n', 'o', 'w', 'n', ' ',

174 
	$sß„_°ªº‹
(
î∫um
)

176 
size_t
 
Àn
;

177 * 
îr°r
;

179 
îr°r
 = 
	`°ªº‹
(
î∫um
);

180 i‡(
NULL
 =
îr°r
) {

181 
Àn
 = 
	`°æí
(
ß„_îrbuf
);

182 
	`¢¥ötf
(
ß„_îrbuf
 + 
Àn
, (safe_errbuf) -Üen, "%i",

183 
î∫um
);

184 
ß„_îrbuf
[(safe_errbuf) - 1] = '\0';

185  
ß„_îrbuf
;

187  
îr°r
;

188 
	}
}

191 
	$¡_typ_‰om_fûíame
(c⁄° * 
fûíame
, * 
majj
, * 
mön
)

193 
°©
 
°
;

194 
ma
, 
mi
;

196 i‡(
	`°©
(
fûíame
, &
°
) < 0)

197  -
î∫o
;

198 
ma
 = 
	`maj‹
(
°
.
°_rdev
);

199 
mi
 = 
	`mö‹
(
°
.
°_rdev
);

200 i‡(
majj
)

201 *
majj
 = 
ma
;

202 i‡(
mön
)

203 *
mön
 = 
mi
;

204 i‡(
	`S_ISCHR
(
°
.
°_mode
)) {

205 
ma
) {

206 
OSST_MAJOR
:

207  
NT_OSST
;

208 
SCSI_GENERIC_MAJOR
:

209  
NT_SG
;

210 
SCSI_TAPE_MAJOR
:

211  
NT_ST
;

212 
SCSI_CHANGER_MAJOR
:

213  
NT_CH
;

215  
NT_NO_MATCH
;

217 } i‡(
	`S_ISBLK
(
°
.
°_mode
)) {

218 
ma
) {

219 
SCSI_DISK0_MAJOR
: 
SCSI_DISK1_MAJOR
:

220 
SCSI_DISK2_MAJOR
: 
SCSI_DISK3_MAJOR
:

221 
SCSI_DISK4_MAJOR
: 
SCSI_DISK5_MAJOR
:

222 
SCSI_DISK6_MAJOR
: 
SCSI_DISK7_MAJOR
:

223 
SCSI_DISK8_MAJOR
: 
SCSI_DISK9_MAJOR
:

224 
SCSI_DISK10_MAJOR
: 
SCSI_DISK11_MAJOR
:

225 
SCSI_DISK12_MAJOR
: 
SCSI_DISK13_MAJOR
:

226 
SCSI_DISK14_MAJOR
: 
SCSI_DISK15_MAJOR
:

227  
NT_SD
;

228 
SCSI_CDROM_MAJOR
:

229  
NT_SR
;

230 
IDE0_MAJOR
: 
IDE1_MAJOR
:

231 
IDE2_MAJOR
: 
IDE3_MAJOR
:

232 
IDE4_MAJOR
: 
IDE5_MAJOR
:

233 
IDE6_MAJOR
: 
IDE7_MAJOR
:

234 
IDE8_MAJOR
: 
IDE9_MAJOR
:

235  
NT_HD
;

237  
NT_NO_MATCH
;

239 } i‡(
	`S_ISREG
(
°
.
°_mode
))

240  
NT_REG
;

241 i‡(
	`S_ISDIR
(
°
.
°_mode
))

242  
NT_DIR
;

243  
NT_NO_MATCH
;

244 
	}
}

247 
	$¡_typ_‰om_maj‹
(
ma
)

249 
ma
) {

250 
SCSI_DISK0_MAJOR
: 
SCSI_DISK1_MAJOR
:

251 
SCSI_DISK2_MAJOR
: 
SCSI_DISK3_MAJOR
:

252 
SCSI_DISK4_MAJOR
: 
SCSI_DISK5_MAJOR
:

253 
SCSI_DISK6_MAJOR
: 
SCSI_DISK7_MAJOR
:

254 
SCSI_DISK8_MAJOR
: 
SCSI_DISK9_MAJOR
:

255 
SCSI_DISK10_MAJOR
: 
SCSI_DISK11_MAJOR
:

256 
SCSI_DISK12_MAJOR
: 
SCSI_DISK13_MAJOR
:

257 
SCSI_DISK14_MAJOR
: 
SCSI_DISK15_MAJOR
:

258  
NT_SD
;

259 
SCSI_CDROM_MAJOR
:

260  
NT_SR
;

261 
IDE0_MAJOR
: 
IDE1_MAJOR
:

262 
IDE2_MAJOR
: 
IDE3_MAJOR
:

263 
IDE4_MAJOR
: 
IDE5_MAJOR
:

264 
IDE6_MAJOR
: 
IDE7_MAJOR
:

265 
IDE8_MAJOR
: 
IDE9_MAJOR
:

266  
NT_HD
;

267 
OSST_MAJOR
:

268  
NT_OSST
;

269 
SCSI_GENERIC_MAJOR
:

270  
NT_SG
;

271 
SCSI_TAPE_MAJOR
:

272  
NT_ST
;

273 
SCSI_CHANGER_MAJOR
:

274  
NT_CH
;

276  
NT_NO_MATCH
;

278  
NT_NO_MATCH
;

279 
	}
}

282 
	snode_m©ch_ôem
 {

283 c⁄° * 
	mdú_«me
;

284 
	mfûe_ty≥
;

285 
	mmajj
;

286 
	mmön
;

287 
	mfﬁlow_symlök
;

290 
node_m©ch_ôem
 
	gnd_m©ch
;

293 
	$nd_m©ch_sˇndú_£À˘
(c⁄° 
dúít
 * 
s
)

295 
°©
 
°
;

296 
«me
[
D_NAME_LEN_MAX
];

297 
sym k
 = 0;

299 
s
->
d_ty≥
) {

300 
DT_BLK
:

301 i‡(
FT_BLOCK
 !
nd_m©ch
.
fûe_ty≥
)

304 
DT_CHR
:

305 i‡(
FT_CHAR
 !
nd_m©ch
.
fûe_ty≥
)

308 
DT_DIR
:

309  (
FT_DIR
 =
nd_m©ch
.
fûe_ty≥
) ? 1 : 0;

310 
DT_REG
:

311  (
FT_REGULAR
 =
nd_m©ch
.
fûe_ty≥
) ? 1 : 0;

312 
DT_LNK
:

313 i‡(! 
nd_m©ch
.
fﬁlow_symlök
)

315 
sym k
 = 1;

320 i‡((! 
sym k
Ë&& (-1 =
nd_m©ch
.
majj
Ë&& (-1 =nd_m©ch.
mön
))

322 
	`°∫˝y
(
«me
, 
nd_m©ch
.
dú_«me
, 
NAME_LEN_MAX
);

323 
	`°rˇt
(
«me
, "/");

324 
	`°∫ˇt
(
«me
, 
s
->
d_«me
, 
NAME_LEN_MAX
);

325 
	`mem£t
(&
°
, 0, (st));

326 i‡(
	`°©
(
«me
, &
°
) < 0)

328 i‡(
sym k
) {

329 i‡(
	`S_ISCHR
(
°
.
°_mode
)) {

330 i‡(
FT_CHAR
 !
nd_m©ch
.
fûe_ty≥
)

332 } i‡(
	`S_ISBLK
(
°
.
°_mode
)) {

333 i‡(
FT_BLOCK
 !
nd_m©ch
.
fûe_ty≥
)

338  (((-1 =
nd_m©ch
.
majj
) ||

339 (()
	`maj‹
(
°
.
°_rdev
Ë=()
nd_m©ch
.
majj
)) &&

340 ((-1 =
nd_m©ch
.
mön
) ||

341 (()
	`mö‹
(
°
.
°_rdev
Ë=()
nd_m©ch
.
mön
)))

343 
	}
}

346 
	$li°_m©chög_nodes
(c⁄° * 
dú_«me
, 
fûe_ty≥
, 
majj
, 
mön
,

347 
fﬁlow_symlök
, 
vîbo£
)

349 
dúít
 ** 
«mñi°
;

350 
num
, 
k
;

352 
nd_m©ch
.
dú_«me
 = dir_name;

353 
nd_m©ch
.
fûe_ty≥
 = file_type;

354 
nd_m©ch
.
majj
 = majj;

355 
nd_m©ch
.
mön
 = minn;

356 
nd_m©ch
.
fﬁlow_symlök
 = follow_symlink;

357 
num
 = 
	`sˇndú
(
dú_«me
, &
«mñi°
, 
nd_m©ch_sˇndú_£À˘
, 
NULL
);

358 i‡(
num
 < 0) {

359 i‡(
vîbo£
)

360 
	`Ârötf
(
°dîr
, "sˇndú: %†%s\n", 
dú_«me
,

361 
	`sß„_°ªº‹
(
î∫o
));

362  -
î∫o
;

364 
k
 = 0; k < 
num
; ++k) {

365 
	`¥ötf
("%s/%s\n", 
dú_«me
, 
«mñi°
[
k
]->
d_«me
);

366 
	`‰ì
(
«mñi°
[
k
]);

368 
	`‰ì
(
«mñi°
);

369  
num
;

370 
	}
}

372 
	ssg_ôem_t
 {

373 
	m«me
[
NAME_LEN_MAX
];

374 
	m·
;

375 
	m¡
;

376 
	md_ty≥
;

379 
sg_ôem_t
 
	gf‹_fú°
;

382 
	$fú°_sˇndú_£À˘
(c⁄° 
dúít
 * 
s
)

384 i‡(
FT_OTHER
 !
f‹_fú°
.
·
)

386 i‡((
DT_LNK
 !
s
->
d_ty≥
) &&

387 ((
DT_DIR
 !
s
->
d_ty≥
Ë|| ('.' =s->
d_«me
[0])))

389 
	`°∫˝y
(
f‹_fú°
.
«me
, 
s
->
d_«me
, 
NAME_LEN_MAX
);

390 
f‹_fú°
.
·
 = 
FT_CHAR
;

391 
f‹_fú°
.
d_ty≥
 = 
s
->d_type;

393 
	}
}

397 
	$sˇn_f‹_fú°
(c⁄° * 
dú_«me
, 
vîbo£
)

399 
«me
[
NAME_LEN_MAX
];

400 
dúít
 ** 
«mñi°
;

401 
num
, 
k
;

403 
f‹_fú°
.
·
 = 
FT_OTHER
;

404 
num
 = 
	`sˇndú
(
dú_«me
, &
«mñi°
, 
fú°_sˇndú_£À˘
, 
NULL
);

405 i‡(
num
 < 0) {

406 i‡(
vîbo£
 > 0) {

407 
	`¢¥ötf
(
«me
, 
NAME_LEN_MAX
, "sˇndú: %s", 
dú_«me
);

408 
	`≥º‹
(
«me
);

412 
k
 = 0; k < 
num
; ++k)

413 
	`‰ì
(
«mñi°
[
k
]);

414 
	`‰ì
(
«mñi°
);

415  
num
;

416 
	}
}

418 
sg_ôem_t
 
	g‰om_sg
;

421 
	$‰om_sg_sˇndú_£À˘
(c⁄° 
dúít
 * 
s
)

423 
Àn
;

425 i‡(
FT_OTHER
 !
‰om_sg
.
·
)

427 i‡((
DT_LNK
 !
s
->
d_ty≥
) &&

428 ((
DT_DIR
 !
s
->
d_ty≥
Ë|| ('.' =s->
d_«me
[0])))

430 
‰om_sg
.
d_ty≥
 = 
s
->d_type;

431 i‡(0 =
	`°∫cmp
("scsi_ch™gî", 
s
->
d_«me
, 12)) {

432 
	`°∫˝y
(
‰om_sg
.
«me
, 
s
->
d_«me
, 
NAME_LEN_MAX
);

433 
‰om_sg
.
·
 = 
FT_CHAR
;

434 
‰om_sg
.
¡
 = 
NT_CH
;

436 } i‡(0 =
	`°∫cmp
("block", 
s
->
d_«me
, 5)) {

437 
	`°∫˝y
(
‰om_sg
.
«me
, 
s
->
d_«me
, 
NAME_LEN_MAX
);

438 
‰om_sg
.
·
 = 
FT_BLOCK
;

440 } i‡(0 =
	`°rcmp
("è≥", 
s
->
d_«me
)) {

441 
	`°r˝y
(
‰om_sg
.
«me
, 
s
->
d_«me
);

442 
‰om_sg
.
·
 = 
FT_CHAR
;

443 
‰om_sg
.
¡
 = 
NT_ST
;

445 } i‡(0 =
	`°∫cmp
("scsi_è≥:°", 
s
->
d_«me
, 12)) {

446 
Àn
 = 
	`°æí
(
s
->
d_«me
);

447 i‡(
	`isdigô
(
s
->
d_«me
[
Àn
 - 1])) {

449 
	`°r˝y
(
‰om_sg
.
«me
, 
s
->
d_«me
);

450 
‰om_sg
.
·
 = 
FT_CHAR
;

451 
‰om_sg
.
¡
 = 
NT_ST
;

455 } i‡(0 =
	`°∫cmp
("⁄°ªam_è≥:os", 
s
->
d_«me
, 16)) {

456 
	`°r˝y
(
‰om_sg
.
«me
, 
s
->
d_«me
);

457 
‰om_sg
.
·
 = 
FT_CHAR
;

458 
‰om_sg
.
¡
 = 
NT_OSST
;

462 
	}
}

465 
	$‰om_sg_sˇn
(c⁄° * 
dú_«me
, 
vîbo£
)

467 
dúít
 ** 
«mñi°
;

468 
num
, 
k
;

470 
‰om_sg
.
·
 = 
FT_OTHER
;

471 
‰om_sg
.
¡
 = 
NT_NO_MATCH
;

472 
num
 = 
	`sˇndú
(
dú_«me
, &
«mñi°
, 
‰om_sg_sˇndú_£À˘
, 
NULL
);

473 i‡(
num
 < 0) {

474 i‡(
vîbo£
)

475 
	`Ârötf
(
°dîr
, "sˇndú: %†%s\n", 
dú_«me
,

476 
	`sß„_°ªº‹
(
î∫o
));

477  -
î∫o
;

479 i‡(
vîbo£
) {

480 
k
 = 0; k < 
num
; ++k)

481 
	`Ârötf
(
°dîr
, " %s/%s\n", 
dú_«me
,

482 
«mñi°
[
k
]->
d_«me
);

484 
k
 = 0; k < 
num
; ++k)

485 
	`‰ì
(
«mñi°
[
k
]);

486 
	`‰ì
(
«mñi°
);

487  
num
;

488 
	}
}

490 
sg_ôem_t
 
	gto_sg
;

493 
	$to_sg_sˇndú_£À˘
(c⁄° 
dúít
 * 
s
)

495 i‡(
FT_OTHER
 !
to_sg
.
·
)

497 i‡(
DT_LNK
 !
s
->
d_ty≥
)

499 i‡(0 =
	`°∫cmp
("scsi_gíîic", 
s
->
d_«me
, 12)) {

500 
	`°∫˝y
(
to_sg
.
«me
, 
s
->
d_«me
, 
NAME_LEN_MAX
);

501 
to_sg
.
·
 = 
FT_CHAR
;

502 
to_sg
.
¡
 = 
NT_SG
;

506 
	}
}

509 
	$to_sg_sˇn
(c⁄° * 
dú_«me
)

511 
dúít
 ** 
«mñi°
;

512 
num
, 
k
;

514 
to_sg
.
·
 = 
FT_OTHER
;

515 
to_sg
.
¡
 = 
NT_NO_MATCH
;

516 
num
 = 
	`sˇndú
(
dú_«me
, &
«mñi°
, 
to_sg_sˇndú_£À˘
, 
NULL
);

517 i‡(
num
 < 0)

518  -
î∫o
;

519 
k
 = 0; k < 
num
; ++k)

520 
	`‰ì
(
«mñi°
[
k
]);

521 
	`‰ì
(
«mñi°
);

522  
num
;

523 
	}
}

527 
	$if_dúe˘‹y_chdú
(c⁄° * 
dú_«me
, c⁄° * 
ba£_«me
)

529 
buff
[
D_NAME_LEN_MAX
];

530 
°©
 
a_°©
;

532 
	`°r˝y
(
buff
, 
dú_«me
);

533 
	`°rˇt
(
buff
, "/");

534 
	`°rˇt
(
buff
, 
ba£_«me
);

535 i‡(
	`°©
(
buff
, &
a_°©
) < 0)

537 i‡(
	`S_ISDIR
(
a_°©
.
°_mode
)) {

538 i‡(
	`chdú
(
buff
) < 0)

543 
	}
}

547 
	$if_dúe˘‹y_ch2gíîic
(c⁄° * 
dú_«me
)

549 
buff
[
NAME_LEN_MAX
];

550 
°©
 
a_°©
;

551 c⁄° * 
ﬁd_«me
 = "generic";

553 
	`°r˝y
(
buff
, 
dú_«me
);

554 
	`°rˇt
(
buff
, "/");

555 
	`°rˇt
(
buff
, 
ﬁd_«me
);

556 i‡((
	`°©
(
buff
, &
a_°©
Ë>0Ë&& 
	`S_ISDIR
◊_°©.
°_mode
)) {

557 i‡(
	`chdú
(
buff
) < 0)

562 i‡(1 !
	`to_sg_sˇn
(
dú_«me
))

564 
	`°r˝y
(
buff
, 
dú_«me
);

565 
	`°rˇt
(
buff
, "/");

566 
	`°rˇt
(
buff
, 
to_sg
.
«me
);

567 i‡(
	`°©
(
buff
, &
a_°©
) < 0)

569 i‡(
	`S_ISDIR
(
a_°©
.
°_mode
)) {

570 i‡(
	`chdú
(
buff
) < 0)

575 
	}
}

579 
	$gë_vÆue
(c⁄° * 
dú_«me
, c⁄° * 
ba£_«me
, * 
vÆue
,

580 
max_vÆue_Àn
)

582 
buff
[
D_NAME_LEN_MAX
];

583 
FILE
 * 
f
;

584 
Àn
;

586 i‡((
NULL
 =
dú_«me
Ë&& (NULL =
ba£_«me
))

588 i‡(
dú_«me
) {

589 
	`°r˝y
(
buff
, 
dú_«me
);

590 i‡(
ba£_«me
 && (
	`°æí
(base_name) > 0)) {

591 
	`°rˇt
(
buff
, "/");

592 
	`°rˇt
(
buff
, 
ba£_«me
);

595 
	`°r˝y
(
buff
, 
ba£_«me
);

596 i‡(
NULL
 =(
f
 = 
	`f›í
(
buff
, "r"))) {

599 i‡(
NULL
 =
	`fgës
(
vÆue
, 
max_vÆue_Àn
, 
f
)) {

600 
	`f˛o£
(
f
);

603 
Àn
 = 
	`°æí
(
vÆue
);

604 i‡((
Àn
 > 0Ë&& (
vÆue
[len - 1] == '\n'))

605 
vÆue
[
Àn
 - 1] = '\0';

606 
	`f˛o£
(
f
);

608 
	}
}

611 
	$m≠_hd
(c⁄° * 
devi˚_dú
, 
ma
, 
mi
, 
ªsu…
,

612 
fﬁlow_symlök
, 
vîbo£
)

614 
c
, 
num
;

616 i‡(2 =
ªsu…
) {

617 
num
 = 
	`li°_m©chög_nodes
(
devi˚_dú
, 
FT_BLOCK
,

618 
ma
, 
mi
, 
fﬁlow_symlök
,

619 
vîbo£
);

620  (
num
 > 0) ? 0 : 1;

622 
ma
) {

623 
IDE0_MAJOR
: 
c
 = 'a'; ;

624 
IDE1_MAJOR
: 
c
 = 'c'; ;

625 
IDE2_MAJOR
: 
c
 = 'e'; ;

626 
IDE3_MAJOR
: 
c
 = 'g'; ;

627 
IDE4_MAJOR
: 
c
 = 'i'; ;

628 
IDE5_MAJOR
: 
c
 = 'k'; ;

629 
IDE6_MAJOR
: 
c
 = 'm'; ;

630 
IDE7_MAJOR
: 
c
 = 'o'; ;

631 
IDE8_MAJOR
: 
c
 = 'q'; ;

632 
IDE9_MAJOR
: 
c
 = 's'; ;

633 : 
c
 = '?'; ;

635 i‡(
mi
 > 63)

636 ++
c
;

637 
	`¥ötf
("%shd%c\n", 
sys_hd_dú
, 
c
);

639 
	}
}

642 
	$m≠_sd
(c⁄° * 
devi˚_«me
, c⁄° * 
devi˚_dú
, 
ma
, 
mi
,

643 
ªsu…
, 
fﬁlow_symlök
, 
vîbo£
)

645 
ödex
, 
m_mi
, 
m_ma
, 
num
;

646 
vÆue
[
D_NAME_LEN_MAX
];

647 
«me
[
D_NAME_LEN_MAX
];

649 i‡(2 =
ªsu…
) {

650 
num
 = 
	`li°_m©chög_nodes
(
devi˚_dú
, 
FT_BLOCK
, 
ma
, 
mi
,

651 
fﬁlow_symlök
, 
vîbo£
);

652  (
num
 > 0) ? 0 : 1;

654 i‡(
SCSI_DISK0_MAJOR
 =
ma
)

655 
ödex
 = 
mi
 / 16;

656 i‡(
ma
 >
SCSI_DISK8_MAJOR
)

657 
ödex
 = (
mi
 / 16) + 128 +

658 ((
ma
 - 
SCSI_DISK8_MAJOR
) * 16);

660 
ödex
 = (
mi
 / 16) + 16 +

661 ((
ma
 - 
SCSI_DISK1_MAJOR
) * 16);

662 i‡(
ödex
 < 26)

663 
	`¢¥ötf
(
«me
, (name), "%ssd%c",

664 
sys_sd_dú
, 'a' + 
ödex
 % 26);

665 i‡(
ödex
 < (26 + 1) * 26)

666 
	`¢¥ötf
(
«me
, (name), "%ssd%c%c",

667 
sys_sd_dú
,

668 'a' + 
ödex
 / 26 - 1,'a' + index % 26);

670 c⁄° 
m1
 = (
ödex
 / 26 - 1) / 26 - 1;

671 c⁄° 
m2
 = (
ödex
 / 26 - 1) % 26;

672 c⁄° 
m3
 = 
ödex
 % 26;

674 
	`¢¥ötf
(
«me
, (name), "%ssd%c%c%c",

675 
sys_sd_dú
, 'a' + 
m1
, 'a' + 
m2
, 'a' + 
m3
);

677 i‡(3 =
ªsu…
) {

678 
	`¥ötf
("%s\n", 
«me
);

681 i‡(! 
	`gë_vÆue
(
«me
, "dev", 
vÆue
, (value))) {

682 
	`Ârötf
(
°dîr
, "Couldn't find sysfs match for "

683 "devi˚: %s\n", 
devi˚_«me
);

686 i‡(
vîbo£
)

687 
	`Ârötf
(
°dîr
, "sysf†sd dev: %s\n", 
vÆue
);

688 i‡(! 
	`if_dúe˘‹y_chdú
(
«me
, "device")) {

689 
	`Ârötf
(
°dîr
, "sysfsÖroblem with device: %s\n",

690 
devi˚_«me
);

693 i‡(
	`if_dúe˘‹y_ch2gíîic
(".")) {

694 i‡(1 =
ªsu…
) {

695 i‡(
NULL
 =
	`gëcwd
(
vÆue
, (value)))

696 
vÆue
[0] = '\0';

697 
	`¥ötf
("%s\n", 
vÆue
);

700 i‡(! 
	`gë_vÆue
(".", "dev", 
vÆue
, (value))) {

701 
	`Ârötf
(
°dîr
, "Couldn't find sysfs generic"

705 i‡(
vîbo£
)

706 
	`¥ötf
("m©chög dev: %s\n", 
vÆue
);

707 i‡(2 !
	`ssˇnf
(
vÆue
, "%d:%d", &
m_ma
, &
m_mi
)) {

708 
	`Ârötf
(
°dîr
, "Couldn't decode mapped "

712 
num
 = 
	`li°_m©chög_nodes
(
devi˚_dú
, 
FT_CHAR
, 
m_ma
, 
m_mi
,

713 
fﬁlow_symlök
, 
vîbo£
);

714  (
num
 > 0) ? 0 : 1;

716 
	`Ârötf
(
°dîr
, "sd device: %s doesÇot matchány "

717 "SCSI gíîi¯devi˚\n", 
devi˚_«me
);

718 
	`Ârötf
(
°dîr
, "Öerhaps sg module isÇot "

722 
	}
}

725 
	$m≠_§
(c⁄° * 
devi˚_«me
, c⁄° * 
devi˚_dú
, 
ma
, 
mi
,

726 
ªsu…
, 
fﬁlow_symlök
, 
vîbo£
)

728 
m_mi
, 
m_ma
, 
num
;

729 
vÆue
[
D_NAME_LEN_MAX
];

730 
«me
[
D_NAME_LEN_MAX
];

732 i‡(2 =
ªsu…
) {

733 
num
 = 
	`li°_m©chög_nodes
(
devi˚_dú
, 
FT_BLOCK
, 
ma
, 
mi
,

734 
fﬁlow_symlök
, 
vîbo£
);

735  (
num
 > 0) ? 0 : 1;

737 
	`¢¥ötf
(
«me
, “ame), "%s§%d", 
sys_§_dú
, 
mi
);

738 i‡(3 =
ªsu…
) {

739 
	`¥ötf
("%s\n", 
«me
);

742 i‡(! 
	`gë_vÆue
(
«me
, "dev", 
vÆue
, (value))) {

743 
	`Ârötf
(
°dîr
, "Couldn't find sysfs match for "

744 "devi˚: %s\n", 
devi˚_«me
);

747 i‡(
vîbo£
)

748 
	`Ârötf
(
°dîr
, "sysf†§ dev: %s\n", 
vÆue
);

749 i‡(! 
	`if_dúe˘‹y_chdú
(
«me
, "device")) {

750 
	`Ârötf
(
°dîr
, "sysfsÖroblem with device: %s\n",

751 
devi˚_«me
);

754 i‡(
	`if_dúe˘‹y_ch2gíîic
(".")) {

755 i‡(1 =
ªsu…
) {

756 i‡(
NULL
 =
	`gëcwd
(
vÆue
, (value)))

757 
vÆue
[0] = '\0';

758 
	`¥ötf
("%s\n", 
vÆue
);

761 i‡(! 
	`gë_vÆue
(".", "dev", 
vÆue
, (value))) {

762 
	`Ârötf
(
°dîr
, "Couldn't find sysfs generic"

766 i‡(
vîbo£
)

767 
	`¥ötf
("m©chög dev: %s\n", 
vÆue
);

768 i‡(2 !
	`ssˇnf
(
vÆue
, "%d:%d", &
m_ma
, &
m_mi
)) {

769 
	`Ârötf
(
°dîr
, "Couldn't decode mapped "

773 
num
 = 
	`li°_m©chög_nodes
(
devi˚_dú
, 
FT_BLOCK
, 
m_ma
, 
m_mi
,

774 
fﬁlow_symlök
, 
vîbo£
);

775  (
num
 > 0) ? 0 : 1;

777 
	`Ârötf
(
°dîr
, "sr device: %s doesÇot matchány "

778 "SCSI gíîi¯devi˚\n", 
devi˚_«me
);

779 
	`Ârötf
(
°dîr
, "Öerhaps sg module isÇot "

783 
	}
}

786 
	$m≠_°
(c⁄° * 
devi˚_«me
, c⁄° * 
devi˚_dú
, 
ma
, 
mi
,

787 
ªsu…
, 
fﬁlow_symlök
, 
vîbo£
)

789 
m_mi
, 
m_ma
, 
num
;

790 
vÆue
[
D_NAME_LEN_MAX
];

791 
«me
[
D_NAME_LEN_MAX
];

793 i‡(2 =
ªsu…
) {

794 
num
 = 
	`li°_m©chög_nodes
(
devi˚_dú
, 
FT_CHAR
, 
ma
, 
mi
,

795 
fﬁlow_symlök
, 
vîbo£
);

796  (
num
 > 0) ? 0 : 1;

798 
	`¢¥ötf
(
«me
, “ame), "%s°%d", 
sys_°_dú
,

799 
	`TAPE_NR
(
mi
));

800 i‡(3 =
ªsu…
) {

801 
	`¥ötf
("%s\n", 
«me
);

804 i‡(! 
	`gë_vÆue
(
«me
, "dev", 
vÆue
, (value))) {

805 
	`Ârötf
(
°dîr
, "Couldn't find sysfs match for "

806 "devi˚: %s\n", 
devi˚_«me
);

809 i‡(
vîbo£
)

810 
	`Ârötf
(
°dîr
, "sysf†° dev: %s\n", 
vÆue
);

811 i‡(! 
	`if_dúe˘‹y_chdú
(
«me
, "device")) {

812 
	`Ârötf
(
°dîr
, "sysfsÖroblem with device: %s\n",

813 
devi˚_«me
);

816 i‡(
	`if_dúe˘‹y_ch2gíîic
(".")) {

817 i‡(1 =
ªsu…
) {

818 i‡(
NULL
 =
	`gëcwd
(
vÆue
, (value)))

819 
vÆue
[0] = '\0';

820 
	`¥ötf
("%s\n", 
vÆue
);

823 i‡(! 
	`gë_vÆue
(".", "dev", 
vÆue
, (value))) {

824 
	`Ârötf
(
°dîr
, "Couldn't find sysfs generic"

828 i‡(
vîbo£
)

829 
	`¥ötf
("m©chög dev: %s\n", 
vÆue
);

830 i‡(2 !
	`ssˇnf
(
vÆue
, "%d:%d", &
m_ma
, &
m_mi
)) {

831 
	`Ârötf
(
°dîr
, "Couldn't decode mapped "

835 
num
 = 
	`li°_m©chög_nodes
(
devi˚_dú
, 
FT_CHAR
, 
m_ma
, 
m_mi
,

836 
fﬁlow_symlök
, 
vîbo£
);

837  (
num
 > 0) ? 0 : 1;

839 
	`Ârötf
(
°dîr
, "st device: %s doesÇot matchány "

840 "SCSI gíîi¯devi˚\n", 
devi˚_«me
);

841 
	`Ârötf
(
°dîr
, "Öerhaps sg module isÇot "

845 
	}
}

848 
	$m≠_os°
(c⁄° * 
devi˚_«me
, c⁄° * 
devi˚_dú
, 
ma
, 
mi
,

849 
ªsu…
, 
fﬁlow_symlök
, 
vîbo£
)

851 
m_mi
, 
m_ma
, 
num
;

852 
vÆue
[
D_NAME_LEN_MAX
];

853 
«me
[
D_NAME_LEN_MAX
];

855 i‡(2 =
ªsu…
) {

856 
num
 = 
	`li°_m©chög_nodes
(
devi˚_dú
, 
FT_CHAR
, 
ma
, 
mi
,

857 
fﬁlow_symlök
, 
vîbo£
);

858  (
num
 > 0) ? 0 : 1;

860 
	`¢¥ötf
(
«me
, “ame), "%sos°%d", 
sys_os°_dú
,

861 
	`TAPE_NR
(
mi
));

862 i‡(3 =
ªsu…
) {

863 
	`¥ötf
("%s\n", 
«me
);

866 i‡(! 
	`gë_vÆue
(
«me
, "dev", 
vÆue
, (value))) {

867 
	`Ârötf
(
°dîr
, "Couldn't find sysfs match for "

868 "devi˚: %s\n", 
devi˚_«me
);

871 i‡(
vîbo£
)

872 
	`Ârötf
(
°dîr
, "sysf†os° dev: %s\n", 
vÆue
);

873 i‡(! 
	`if_dúe˘‹y_chdú
(
«me
, "device")) {

874 
	`Ârötf
(
°dîr
, "sysfsÖroblem with device: %s\n",

875 
devi˚_«me
);

878 i‡(
	`if_dúe˘‹y_ch2gíîic
(".")) {

879 i‡(1 =
ªsu…
) {

880 i‡(
NULL
 =
	`gëcwd
(
vÆue
, (value)))

881 
vÆue
[0] = '\0';

882 
	`¥ötf
("%s\n", 
vÆue
);

885 i‡(! 
	`gë_vÆue
(".", "dev", 
vÆue
, (value))) {

886 
	`Ârötf
(
°dîr
, "Couldn't find sysfs generic"

890 i‡(
vîbo£
)

891 
	`¥ötf
("m©chög dev: %s\n", 
vÆue
);

892 i‡(2 !
	`ssˇnf
(
vÆue
, "%d:%d", &
m_ma
, &
m_mi
)) {

893 
	`Ârötf
(
°dîr
, "Couldn't decode mapped "

897 
num
 = 
	`li°_m©chög_nodes
(
devi˚_dú
, 
FT_CHAR
, 
m_ma
, 
m_mi
,

898 
fﬁlow_symlök
, 
vîbo£
);

899  (
num
 > 0) ? 0 : 1;

901 
	`Ârötf
(
°dîr
, "osst device: %s doesÇot matchány "

902 "SCSI gíîi¯devi˚\n", 
devi˚_«me
);

903 
	`Ârötf
(
°dîr
, "Öerhaps sg module isÇot "

907 
	}
}

910 
	$m≠_ch
(c⁄° * 
devi˚_«me
, c⁄° * 
devi˚_dú
, 
ma
, 
mi
,

911 
ªsu…
, 
fﬁlow_symlök
, 
vîbo£
)

913 
m_mi
, 
m_ma
, 
num
;

914 
vÆue
[
D_NAME_LEN_MAX
];

915 
«me
[
D_NAME_LEN_MAX
];

917 i‡(2 =
ªsu…
) {

918 
num
 = 
	`li°_m©chög_nodes
(
devi˚_dú
, 
FT_CHAR
, 
ma
, 
mi
,

919 
fﬁlow_symlök
, 
vîbo£
);

920  (
num
 > 0) ? 0 : 1;

922 
	`¢¥ötf
(
«me
, “ame), "%ssch%d", 
sys_sch_dú
, 
mi
);

923 i‡(3 =
ªsu…
) {

924 
	`¥ötf
("%s\n", 
«me
);

927 i‡(! 
	`gë_vÆue
(
«me
, "dev", 
vÆue
, (value))) {

928 
	`Ârötf
(
°dîr
, "Couldn't find sysfs match for "

929 "devi˚: %s\n", 
devi˚_«me
);

932 i‡(
vîbo£
)

933 
	`Ârötf
(
°dîr
, "sysf†sch dev: %s\n", 
vÆue
);

934 i‡(! 
	`if_dúe˘‹y_chdú
(
«me
, "device")) {

935 
	`Ârötf
(
°dîr
, "sysfsÖroblem with device: %s\n",

936 
devi˚_«me
);

939 i‡(
	`if_dúe˘‹y_ch2gíîic
(".")) {

940 i‡(1 =
ªsu…
) {

941 i‡(
NULL
 =
	`gëcwd
(
vÆue
, (value)))

942 
vÆue
[0] = '\0';

943 
	`¥ötf
("%s\n", 
vÆue
);

946 i‡(! 
	`gë_vÆue
(".", "dev", 
vÆue
, (value))) {

947 
	`Ârötf
(
°dîr
, "Couldn't find sysfs generic"

951 i‡(
vîbo£
)

952 
	`¥ötf
("m©chög dev: %s\n", 
vÆue
);

953 i‡(2 !
	`ssˇnf
(
vÆue
, "%d:%d", &
m_ma
, &
m_mi
)) {

954 
	`Ârötf
(
°dîr
, "Couldn't decode mapped "

958 
num
 = 
	`li°_m©chög_nodes
(
devi˚_dú
, 
FT_CHAR
, 
m_ma
, 
m_mi
,

959 
fﬁlow_symlök
, 
vîbo£
);

960  (
num
 > 0) ? 0 : 1;

962 
	`Ârötf
(
°dîr
, "sch device: %s doesÇot matchány "

963 "SCSI gíîi¯devi˚\n", 
devi˚_«me
);

964 
	`Ârötf
(
°dîr
, "Öerhaps sg module isÇot "

968 
	}
}

971 
	$m≠_sg
(c⁄° * 
devi˚_«me
, c⁄° * 
devi˚_dú
, 
ma
, 
mi
,

972 
ªsu…
, 
fﬁlow_symlök
, 
vîbo£
)

974 
m_mi
, 
m_ma
, 
num
;

975 
vÆue
[
D_NAME_LEN_MAX
];

976 
«me
[
D_NAME_LEN_MAX
];

978 i‡(2 =
ªsu…
) {

979 
num
 = 
	`li°_m©chög_nodes
(
devi˚_dú
, 
FT_CHAR
, 
ma
, 
mi
,

980 
fﬁlow_symlök
, 
vîbo£
);

981  (
num
 > 0) ? 0 : 1;

983 
	`¢¥ötf
(
«me
, “ame), "%ssg%d", 
sys_sg_dú
, 
mi
);

984 i‡(3 =
ªsu…
) {

985 
	`¥ötf
("%s\n", 
«me
);

988 i‡(! 
	`gë_vÆue
(
«me
, "dev", 
vÆue
, (value))) {

989 
	`Ârötf
(
°dîr
, "Couldn't find sysfs match for "

990 "devi˚: %s\n", 
devi˚_«me
);

993 i‡(
vîbo£
)

994 
	`Ârötf
(
°dîr
, "sysf†sg dev: %s\n", 
vÆue
);

995 i‡(! 
	`if_dúe˘‹y_chdú
(
«me
, "device")) {

996 
	`Ârötf
(
°dîr
, "sysfsÖroblem with device: %s\n",

997 
devi˚_«me
);

1000 i‡((1 =
	`‰om_sg_sˇn
(".", 
vîbo£
)) &&

1001 (
	`if_dúe˘‹y_chdú
(".", 
‰om_sg
.
«me
))) {

1002 i‡(
DT_DIR
 =
‰om_sg
.
d_ty≥
) {

1003 i‡((1 =
	`sˇn_f‹_fú°
(".", 
vîbo£
)) &&

1004 (
	`if_dúe˘‹y_chdú
(".", 
f‹_fú°
.
«me
))) {

1007 
	`Ârötf
(
°dîr
, "unexpected scan_for_first "

1011 i‡(1 =
ªsu…
) {

1012 i‡(
NULL
 =
	`gëcwd
(
vÆue
, (value)))

1013 
vÆue
[0] = '\0';

1014 
	`¥ötf
("%s\n", 
vÆue
);

1017 i‡(! 
	`gë_vÆue
(".", "dev", 
vÆue
, (value))) {

1018 
	`Ârötf
(
°dîr
, "Couldn't find sysfs block "

1022 i‡(
vîbo£
)

1023 
	`¥ötf
("m©chög dev: %s\n", 
vÆue
);

1024 i‡(2 !
	`ssˇnf
(
vÆue
, "%d:%d", &
m_ma
, &
m_mi
)) {

1025 
	`Ârötf
(
°dîr
, "Couldn't decode mapped "

1029 
num
 = 
	`li°_m©chög_nodes
(
devi˚_dú
, 
‰om_sg
.
·
, 
m_ma
, 
m_mi
,

1030 
fﬁlow_symlök
, 
vîbo£
);

1031  (
num
 > 0) ? 0 : 1;

1033 
	`Ârötf
(
°dîr
, "sg device: %s doesÇot matchány "

1034 "Ÿhî SCSI devi˚\n", 
devi˚_«me
);

1037 
	}
}

1041 
	$maö
(
¨gc
, * 
¨gv
[])

1043 
c
, 
num
, 
â
, 
c⁄t
, 
ªs
;

1044 
do_dev_dú
 = 0;

1045 
giví_is
 = -1;

1046 
ªsu…
 = 0;

1047 
fﬁlow_symlök
 = 0;

1048 
vîbo£
 = 0;

1049 
devi˚_«me
[
D_NAME_LEN_MAX
];

1050 
devi˚_dú
[
D_NAME_LEN_MAX
];

1051 
vÆue
[
D_NAME_LEN_MAX
];

1052 
ªt
 = 1;

1053 
ma
, 
mi
;

1055 
	`mem£t
(
devi˚_«me
, 0, (device_name));

1056 
	`mem£t
(
devi˚_dú
, 0, (device_dir));

1058 
›ti⁄_ödex
 = 0;

1060 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "d:hg:r:svV", 
l⁄g_›ti⁄s
,

1061 &
›ti⁄_ödex
);

1062 i‡(
c
 == -1)

1065 
c
) {

1067 
	`°∫˝y
(
devi˚_dú
, 
›èrg
, (device_dir));

1068 
do_dev_dú
 = 1;

1071 
num
 = 
	`ssˇnf
(
›èrg
, "%d", &
ªs
);

1072 i‡((1 =
num
Ë&& ((0 =
ªs
) || (1 ==Ñes)))

1073 
giví_is
 = 
ªs
;

1075 
	`Ârötf
(
°dîr
, "value for '--given_to=' "

1077  
SG_LIB_SYNTAX_ERROR
;

1082 
	`ußge
();

1085 
num
 = 
	`ssˇnf
(
›èrg
, "%d", &
ªs
);

1086 i‡((1 =
num
Ë&& (
ªs
 >= 0) && (res < 4))

1087 
ªsu…
 = 
ªs
;

1089 
	`Ârötf
(
°dîr
, "value for '--result=' "

1091  
SG_LIB_SYNTAX_ERROR
;

1095 
fﬁlow_symlök
 = 1;

1098 ++
vîbo£
;

1101 
	`Ârötf
(
°dîr
, 
ME
 "vîsi⁄: %s\n", 
vîsi⁄_°r
);

1104 
	`Ârötf
(
°dîr
, "unrecognised option code 0x%x ??\n",

1105 
c
);

1106 
	`ußge
();

1107  
SG_LIB_SYNTAX_ERROR
;

1110 i‡(
›töd
 < 
¨gc
) {

1111 i‡('\0' =
devi˚_«me
[0]) {

1112 
	`°∫˝y
(
devi˚_«me
, 
¨gv
[
›töd
],

1113 (
devi˚_«me
) - 1);

1114 
devi˚_«me
[(device_name) - 1] = '\0';

1115 ++
›töd
;

1117 i‡(
›töd
 < 
¨gc
) {

1118 ; 
›töd
 < 
¨gc
; ++optind)

1119 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: "

1120 "%s\n", 
¨gv
[
›töd
]);

1121 
	`ußge
();

1122  
SG_LIB_SYNTAX_ERROR
;

1126 i‡(0 =
devi˚_«me
[0]) {

1127 
	`Ârötf
(
°dîr
, "missing deviceÇame!\n");

1128 
	`ußge
();

1129  
SG_LIB_SYNTAX_ERROR
;

1132 
ma
 = 0;

1133 
mi
 = 0;

1134 i‡(
do_dev_dú
) {

1135 i‡(
	`if_dúe˘‹y_chdú
(".", 
devi˚_dú
)) {

1136 i‡(
	`gëcwd
(
devi˚_dú
, (device_dir)))

1137 
devi˚_dú
[(device_dir) - 1] = '\0';

1139 
devi˚_dú
[0] = '\0';

1140 i‡(
vîbo£
 > 1)

1141 
	`Ârötf
(
°dîr
, "AbsoluteÖathÅo "

1142 "dev_dú: %s\n", 
devi˚_dú
);

1144 
	`Ârötf
(
°dîr
, "dev_dú: %†övÆid\n", 
devi˚_dú
);

1145  
SG_LIB_FILE_ERROR
;

1148 
	`°r˝y
(
devi˚_dú
, 
devi˚_«me
);

1149 
	`dú«me
(
devi˚_dú
);

1150 i‡(0 =
	`°rcmp
(
devi˚_dú
, 
devi˚_«me
)) {

1151 i‡(
NULL
 =
	`gëcwd
(
devi˚_dú
, (device_dir)))

1152 
devi˚_dú
[0] = '\0';

1155 
ªt
 = 
	`¡_typ_‰om_fûíame
(
devi˚_«me
, &
ma
, &
mi
);

1156 i‡(
ªt
 < 0) {

1157 
	`Ârötf
(
°dîr
, "°© faûed o¿%s: %s\n", 
devi˚_«me
,

1158 
	`sß„_°ªº‹
(-
ªt
));

1159  
SG_LIB_FILE_ERROR
;

1161 i‡(
vîbo£
)

1162 
	`Ârötf
(
°dîr
, " %s: %s device [maj=%d, min=%d]\n",

1163 
devi˚_«me
, 
¡_«mes
[
ªt
], 
ma
, 
mi
);

1164 
ªs
 = 0;

1165 
ªt
) {

1166 
NT_SD
:

1167 
NT_SR
:

1168 
NT_HD
:

1169 i‡(
giví_is
 > 0) {

1170 
	`Ârötf
(
°dîr
, "block special but '--given_is=' "

1172  
SG_LIB_FILE_ERROR
;

1175 
NT_ST
:

1176 
NT_OSST
:

1177 
NT_CH
:

1178 
NT_SG
:

1179 i‡(
giví_is
 > 0) {

1180 
	`Ârötf
(
°dîr
, "character special but '--given_is=' "

1182  
SG_LIB_FILE_ERROR
;

1185 
NT_REG
:

1186 i‡(0 =
giví_is
) {

1187 
	`Ârötf
(
°dîr
, "regular file but '--given_is=' "

1189  
SG_LIB_FILE_ERROR
;

1191 
	`°r˝y
(
devi˚_dú
, 
def_dev_dú
);

1193 
NT_DIR
:

1194 i‡(0 =
giví_is
) {

1195 
	`Ârötf
(
°dîr
, "directory but '--given_is=' "

1197  
SG_LIB_FILE_ERROR
;

1199 
	`°r˝y
(
devi˚_dú
, 
def_dev_dú
);

1205 
â
 = 
NT_NO_MATCH
;

1207 
c⁄t
 = 0;

1208 
ªt
) {

1209 
NT_NO_MATCH
:

1210 
ªs
 = 1;

1212 
NT_SD
:

1213 
ªs
 = 
	`m≠_sd
(
devi˚_«me
, 
devi˚_dú
, 
ma
, 
mi
, 
ªsu…
,

1214 
fﬁlow_symlök
, 
vîbo£
);

1216 
NT_SR
:

1217 
ªs
 = 
	`m≠_§
(
devi˚_«me
, 
devi˚_dú
, 
ma
, 
mi
, 
ªsu…
,

1218 
fﬁlow_symlök
, 
vîbo£
);

1220 
NT_HD
:

1221 i‡(
ªsu…
 < 2) {

1222 
	`Ârötf
(
°dîr
, "a hd device doesÇot map "

1224  
SG_LIB_FILE_ERROR
;

1226 
ªs
 = 
	`m≠_hd
(
devi˚_dú
, 
ma
, 
mi
, 
ªsu…
,

1227 
fﬁlow_symlök
, 
vîbo£
);

1229 
NT_ST
:

1230 
ªs
 = 
	`m≠_°
(
devi˚_«me
, 
devi˚_dú
, 
ma
, 
mi
, 
ªsu…
,

1231 
fﬁlow_symlök
, 
vîbo£
);

1233 
NT_OSST
:

1234 
ªs
 = 
	`m≠_os°
(
devi˚_«me
, 
devi˚_dú
, 
ma
, 
mi
,

1235 
ªsu…
, 
fﬁlow_symlök
, 
vîbo£
);

1237 
NT_CH
:

1238 
ªs
 = 
	`m≠_ch
(
devi˚_«me
, 
devi˚_dú
, 
ma
, 
mi
, 
ªsu…
,

1239 
fﬁlow_symlök
, 
vîbo£
);

1241 
NT_SG
:

1242 
ªs
 = 
	`m≠_sg
(
devi˚_«me
, 
devi˚_dú
, 
ma
, 
mi
, 
ªsu…
,

1243 
fﬁlow_symlök
, 
vîbo£
);

1245 
NT_REG
:

1246 i‡(! 
	`gë_vÆue
(
NULL
, 
devi˚_«me
, 
vÆue
,

1247 (
vÆue
))) {

1248 
	`Ârötf
(
°dîr
, "Couldn't fetch value "

1249 "‰om: %s\n", 
devi˚_«me
);

1250  
SG_LIB_FILE_ERROR
;

1252 i‡(
vîbo£
)

1253 
	`Ârötf
(
°dîr
, "vÆue: %s\n", 
vÆue
);

1254 i‡(2 !
	`ssˇnf
(
vÆue
, "%d:%d", &
ma
, &
mi
)) {

1255 
	`Ârötf
(
°dîr
, "Couldn't decode value\n");

1256  
SG_LIB_FILE_ERROR
;

1258 
â
 = 
	`¡_typ_‰om_maj‹
(
ma
);

1259 
c⁄t
 = 1;

1261 
NT_DIR
:

1262 i‡(! 
	`gë_vÆue
(
devi˚_«me
, "dev", 
vÆue
,

1263 (
vÆue
))) {

1264 
	`Ârötf
(
°dîr
, "Couldn't fetch value from: "

1265 "%s/dev\n", 
devi˚_«me
);

1266  
SG_LIB_FILE_ERROR
;

1268 i‡(
vîbo£
)

1269 
	`Ârötf
(
°dîr
, "vÆue: %s\n", 
vÆue
);

1270 i‡(2 !
	`ssˇnf
(
vÆue
, "%d:%d", &
ma
, &
mi
)) {

1271 
	`Ârötf
(
°dîr
, "Couldn't decode value\n");

1272  
SG_LIB_FILE_ERROR
;

1274 
â
 = 
	`¡_typ_‰om_maj‹
(
ma
);

1275 
c⁄t
 = 1;

1280 
ªt
 = 
â
;

1281 } 
c⁄t
);

1282  
ªs
;

1283 
	}
}

	@src/sg_modes.c

14 
	~<uni°d.h
>

15 
	~<f˙é.h
>

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<°rög.h
>

19 
	~<˘y≥.h
>

20 
	~<gë›t.h
>

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

25 
	~"sg_lib.h
"

26 
	~"sg_cmds_basic.h
"

28 c⁄° * 
	gvîsi⁄_°r
 = "1.41 20130507";

30 
	#DEF_ALLOC_LEN
 (1024 * 4)

	)

31 
	#DEF_6_ALLOC_LEN
 252

	)

32 
	#PG_CODE_ALL
 0x3f

	)

33 
	#PG_CODE_MASK
 0x3f

	)

34 
	#PG_CODE_MAX
 0x3f

	)

35 
	#SPG_CODE_ALL
 0xff

	)

36 
	#PROTO_SPECIFIC_1
 0x18

	)

37 
	#PROTO_SPECIFIC_2
 0x19

	)

39 
	#EBUFF_SZ
 256

	)

42 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

43 {"Æl", 
no_¨gumít
, 0, 'a'},

44 {"c⁄åﬁ", 
ªquúed_¨gumít
, 0, 'c'},

45 {"dbd", 
no_¨gumít
, 0, 'd'},

46 {"dbout", 
no_¨gumít
, 0, 'D'},

47 {"examöe", 
no_¨gumít
, 0, 'e'},

48 {"ÊexibÀ", 
no_¨gumít
, 0, 'f'},

49 {"hñp", 
no_¨gumít
, 0, 'h'},

50 {"hex", 
no_¨gumít
, 0, 'H'},

51 {"li°", 
no_¨gumít
, 0, 'l'},

52 {"ŒbØ", 
no_¨gumít
, 0, 'L'},

53 {"maxÀn", 
ªquúed_¨gumít
, 0, 'm'},

54 {"√w", 
no_¨gumít
, 0, 'N'},

55 {"ﬁd", 
no_¨gumít
, 0, 'O'},

56 {"∑ge", 
ªquúed_¨gumít
, 0, 'p'},

57 {"øw", 
no_¨gumít
, 0, 'r'},

58 {"six", 
no_¨gumít
, 0, '6'},

59 {"vîbo£", 
no_¨gumít
, 0, 'v'},

60 {"vîsi⁄", 
no_¨gumít
, 0, 'V'},

64 
	s›ts_t
 {

65 
	mdo_Æl
;

66 
	mdo_dbd
;

67 
	mdo_dbout
;

68 
	mdo_examöe
;

69 
	mdo_ÊexibÀ
;

70 
	mdo_hñp
;

71 
	mdo_hex
;

72 
	mdo_li°
;

73 
	mdo_ŒbØ
;

74 
	mmaxÀn
;

75 
	mdo_øw
;

76 
	mdo_six
;

77 
	mdo_vîbo£
;

78 
	mdo_vîsi⁄
;

79 
	m∑ge_c⁄åﬁ
;

80 
	mpg_code
;

81 
	msubpg_code
;

82 
	msubpg_code_£t
;

83 c⁄° * 
	mdevi˚_«me
;

84 
	m›t_√w
;

88 
	$ußge
()

90 
	`¥ötf
("Usage: sg_modes [--all] [--control=PC] [--dbd] [--dbout] "

110 
	`¥ötf
(" --help|-hÖrint usage messageÅhenÉxit\n"

137 
	}
}

140 
	$ußge_ﬁd
()

142 
	`¥ötf
("Usage: sg_modes [-a] [-A] [-c=PC] [-d] [-D] [-e] [-f] [-h] "

158 
	`¥ötf
(" -h outputÖageÇumberánd header in hex\n"

176 
	}
}

179 
	$ußge_f‹
(c⁄° 
›ts_t
 * 
›t•
)

181 i‡(
›t•
->
›t_√w
)

182 
	`ußge
();

184 
	`ußge_ﬁd
();

185 
	}
}

190 
	$¥o˚ss_˛_√w
(
›ts_t
 * 
›t•
, 
¨gc
, * 
¨gv
[])

192 
c
, 
n
, 
¬
;

193 * 
˝
;

196 
›ti⁄_ödex
 = 0;

198 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "6aAc:dDefhHlLm:NOp:rRsvV", 
l⁄g_›ti⁄s
,

199 &
›ti⁄_ödex
);

200 i‡(
c
 == -1)

203 
c
) {

205 ++
›t•
->
do_six
;

208 ++
›t•
->
do_Æl
;

211 
›t•
->
do_Æl
 += 2;

214 
n
 = 
	`sg_gë_num
(
›èrg
);

215 i‡((
n
 < 0) || (n > 3)) {

216 
	`Ârötf
(
°dîr
, "badárgumentÅo '--control='\n");

217 
	`ußge
();

218  
SG_LIB_SYNTAX_ERROR
;

220 
›t•
->
∑ge_c⁄åﬁ
 = 
n
;

223 ++
›t•
->
do_dbd
;

226 ++
›t•
->
do_dbout
;

229 ++
›t•
->
do_examöe
;

232 ++
›t•
->
do_ÊexibÀ
;

236 ++
›t•
->
do_hñp
;

239 ++
›t•
->
do_hex
;

242 ++
›t•
->
do_li°
;

245 ++
›t•
->
do_ŒbØ
;

248 
n
 = 
	`sg_gë_num
(
›èrg
);

249 i‡((
n
 < 0) || (n > 65535)) {

250 
	`Ârötf
(
°dîr
, "badárgumentÅo '--maxlen='\n");

251 
	`ußge
();

252  
SG_LIB_SYNTAX_ERROR
;

254 
›t•
->
maxÀn
 = 
n
;

259 
›t•
->
›t_√w
 = 0;

262 
˝
 = 
	`°rchr
(
›èrg
, ',');

263 
n
 = 
	`sg_gë_num_nomu…
(
›èrg
);

264 i‡((
n
 < 0) || (n > 63)) {

265 
	`Ârötf
(
°dîr
, "BadárgumentÅo '--page='\n");

266 
	`ußge
();

267  
SG_LIB_SYNTAX_ERROR
;

269 i‡(
˝
) {

270 
¬
 = 
	`sg_gë_num_nomu…
(
˝
 + 1);

271 i‡((
¬
 < 0) || (nn > 255)) {

272 
	`Ârötf
(
°dîr
, "Bad second value inárgumentÅo "

274 
	`ußge
();

275  
SG_LIB_SYNTAX_ERROR
;

277 
›t•
->
subpg_code
 = 
¬
;

278 
›t•
->
subpg_code_£t
 = 1;

280 
¬
 = 0;

281 
›t•
->
pg_code
 = 
n
;

284 ++
›t•
->
do_øw
;

287 
›t•
->
do_øw
 += 2;

290 ++
›t•
->
do_six
;

293 ++
›t•
->
do_vîbo£
;

296 ++
›t•
->
do_vîsi⁄
;

299 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê%¯[0x%x]\n", 
c
, c);

300 i‡(
›t•
->
do_hñp
)

302 
	`ußge
();

303  
SG_LIB_SYNTAX_ERROR
;

306 i‡(
›töd
 < 
¨gc
) {

307 i‡(
NULL
 =
›t•
->
devi˚_«me
) {

308 
›t•
->
devi˚_«me
 = 
¨gv
[
›töd
];

309 ++
›töd
;

311 i‡(
›töd
 < 
¨gc
) {

312 ; 
›töd
 < 
¨gc
; ++optind)

313 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

314 
¨gv
[
›töd
]);

315 
	`ußge
();

316  
SG_LIB_SYNTAX_ERROR
;

320 
	}
}

325 
	$¥o˚ss_˛_ﬁd
(
›ts_t
 * 
›t•
, 
¨gc
, * 
¨gv
[])

327 
k
, 
jmp_out
, 
∂í
, 
num
, 
n
;

328 
u
, 
uu
;

329 c⁄° * 
˝
;

331 
k
 = 1; k < 
¨gc
; ++k) {

332 
˝
 = 
¨gv
[
k
];

333 
∂í
 = 
	`°æí
(
˝
);

334 i‡(
∂í
 <= 0)

336 i‡('-' =*
˝
) {

337 --
∂í
, ++
˝
, 
jmp_out
 = 0;Ölen > 0; --plen, ++cp) {

338 *
˝
) {

340 ++
›t•
->
do_six
;

343 ++
›t•
->
do_Æl
;

346 
›t•
->
do_Æl
 += 2;

349 ++
›t•
->
do_dbd
;

352 ++
›t•
->
do_dbout
;

355 ++
›t•
->
do_examöe
;

358 ++
›t•
->
do_ÊexibÀ
;

362 
›t•
->
do_hex
 += 2;

365 ++
›t•
->
do_li°
;

368 ++
›t•
->
do_ŒbØ
;

371 
›t•
->
›t_√w
 = 1;

376 
›t•
->
do_øw
 += 2;

379 ++
›t•
->
do_vîbo£
;

382 ++
›t•
->
do_vîsi⁄
;

385 ++
›t•
->
do_hñp
;

388 
jmp_out
 = 1;

391 i‡(
jmp_out
)

394 i‡(
∂í
 <= 0)

396 i‡(0 =
	`°∫cmp
("c=", 
˝
, 2)) {

397 
num
 = 
	`ssˇnf
(
˝
 + 2, "%x", &
u
);

398 i‡((1 !
num
Ë|| (
u
 > 3)) {

399 
	`Ârötf
(
°dîr
, "BadÖage controláfter 'c=' option\n");

400 
	`ußge_ﬁd
();

401  
SG_LIB_SYNTAX_ERROR
;

403 
›t•
->
∑ge_c⁄åﬁ
 = 
u
;

404 } i‡(0 =
	`°∫cmp
("m=", 
˝
, 2)) {

405 
num
 = 
	`ssˇnf
(
˝
 + 2, "%d", &
n
);

406 i‡((1 !
num
Ë|| (
n
 < 0) || (n > 65535)) {

407 
	`Ârötf
(
°dîr
, "Badárgumentáfter 'm=' option\n");

408 
	`ußge_ﬁd
();

409  
SG_LIB_SYNTAX_ERROR
;

411 
›t•
->
maxÀn
 = 
n
;

412 } i‡(0 =
	`°∫cmp
("p=", 
˝
, 2)) {

413 i‡(
NULL
 =
	`°rchr
(
˝
 + 2, ',')) {

414 
num
 = 
	`ssˇnf
(
˝
 + 2, "%x", &
u
);

415 i‡((1 !
num
Ë|| (
u
 > 63)) {

416 
	`Ârötf
(
°dîr
, "BadÖage code valueáfter 'p=' "

418 
	`ußge_ﬁd
();

419  
SG_LIB_SYNTAX_ERROR
;

421 
›t•
->
pg_code
 = 
u
;

422 } i‡(2 =
	`ssˇnf
(
˝
 + 2, "%x,%x", &
u
, &
uu
)) {

423 i‡(
uu
 > 255) {

424 
	`Ârötf
(
°dîr
, "Bad subÖage code valueáfter 'p=' "

426 
	`ußge_ﬁd
();

427  
SG_LIB_SYNTAX_ERROR
;

429 
›t•
->
pg_code
 = 
u
;

430 
›t•
->
subpg_code
 = 
uu
;

431 
›t•
->
subpg_code_£t
 = 1;

433 
	`Ârötf
(
°dîr
, "BadÖage code, subpage code sequence "

435 
	`ußge_ﬁd
();

436  
SG_LIB_SYNTAX_ERROR
;

438 } i‡(0 =
	`°∫cmp
("subp=", 
˝
, 5)) {

439 
num
 = 
	`ssˇnf
(
˝
 + 5, "%x", &
u
);

440 i‡((1 !
num
Ë|| (
u
 > 255)) {

441 
	`Ârötf
(
°dîr
, "Bad subÖage codeáfter 'subp=' "

443 
	`ußge_ﬁd
();

444  
SG_LIB_SYNTAX_ERROR
;

446 
›t•
->
subpg_code
 = 
u
;

447 
›t•
->
subpg_code_£t
 = 1;

448 i‡(-1 =
›t•
->
pg_code
)

449 
›t•
->
pg_code
 = 0;

450 } i‡(0 =
	`°∫cmp
("-ﬁd", 
˝
, 4))

452 i‡(
jmp_out
) {

453 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄: %s\n", 
˝
);

454 
	`ußge_ﬁd
();

455  
SG_LIB_SYNTAX_ERROR
;

457 } i‡(0 =
›t•
->
devi˚_«me
)

458 
›t•
->
devi˚_«me
 = 
˝
;

460 
	`Ârötf
(
°dîr
, "too manyárguments, got: %s,ÇotÉxpecting: "

461 "%s\n", 
›t•
->
devi˚_«me
, 
˝
);

462 
	`ußge_ﬁd
();

463  
SG_LIB_SYNTAX_ERROR
;

467 
	}
}

476 
	$¥o˚ss_˛
(
›ts_t
 * 
›t•
, 
¨gc
, * 
¨gv
[])

478 
ªs
;

479 * 
˝
;

481 
˝
 = 
	`gëív
("SG3_UTILS_OLD_OPTS");

482 i‡(
˝
) {

483 
›t•
->
›t_√w
 = 0;

484 
ªs
 = 
	`¥o˚ss_˛_ﬁd
(
›t•
, 
¨gc
, 
¨gv
);

485 i‡((0 =
ªs
Ë&& 
›t•
->
›t_√w
)

486 
ªs
 = 
	`¥o˚ss_˛_√w
(
›t•
, 
¨gc
, 
¨gv
);

488 
›t•
->
›t_√w
 = 1;

489 
ªs
 = 
	`¥o˚ss_˛_√w
(
›t•
, 
¨gc
, 
¨gv
);

490 i‡((0 =
ªs
Ë&& (0 =
›t•
->
›t_√w
))

491 
ªs
 = 
	`¥o˚ss_˛_ﬁd
(
›t•
, 
¨gc
, 
¨gv
);

493  
ªs
;

494 
	}
}

497 
	$dSåRaw
(c⁄° * 
°r
, 
Àn
)

499 
k
;

501 
k
 = 0 ; k < 
Àn
; ++k)

502 
	`¥ötf
("%c", 
°r
[
k
]);

503 
	}
}

506 
	s∑ge_code_desc
 {

507 
	m∑ge_code
;

508 
	msub∑ge_code
;

509 c⁄° * 
	mdesc
;

512 
∑ge_code_desc
 
	gpc_desc_comm⁄
[] = {

525 {
PG_CODE_ALL
, 0x0, "[yieldsáll supportedÖages]"},

526 {
PG_CODE_ALL
, 
SPG_CODE_ALL
, "[yieldsáll supportedÖagesánd subpages]"},

529 
∑ge_code_desc
 
	gpc_desc_disk
[] = {

548 
∑ge_code_desc
 
	gpc_desc_è≥
[] = {

562 
∑ge_code_desc
 
	gpc_desc_cddvd
[] = {

576 
∑ge_code_desc
 
	gpc_desc_smc
[] = {

583 
∑ge_code_desc
 
	gpc_desc_scc
[] = {

587 
∑ge_code_desc
 
	gpc_desc_£s
[] = {

591 
∑ge_code_desc
 
	gpc_desc_rbc
[] = {

595 
∑ge_code_desc
 
	gpc_desc_adc
[] = {

603 
∑ge_code_desc
 *

604 
	$mode_∑ge_cs_èbÀ
(
scsi_±y≥
, * 
size
)

606 
scsi_±y≥
)

609 *
size
 = (
pc_desc_comm⁄
) / (pc_desc_common[0]);

610  &
pc_desc_comm⁄
[0];

611 
PDT_DISK
:

612 
PDT_WO
:

613 
PDT_OPTICAL
:

614 *
size
 = (
pc_desc_disk
) / (pc_desc_disk[0]);

615  &
pc_desc_disk
[0];

616 
PDT_TAPE
:

617 
PDT_PRINTER
:

618 *
size
 = (
pc_desc_è≥
) / (pc_desc_tape[0]);

619  &
pc_desc_è≥
[0];

620 
PDT_MMC
:

621 *
size
 = (
pc_desc_cddvd
) / (pc_desc_cddvd[0]);

622  &
pc_desc_cddvd
[0];

623 
PDT_MCHANGER
:

624 *
size
 = (
pc_desc_smc
) / (pc_desc_smc[0]);

625  &
pc_desc_smc
[0];

626 
PDT_SAC
:

627 *
size
 = (
pc_desc_scc
) / (pc_desc_scc[0]);

628  &
pc_desc_scc
[0];

629 
PDT_SES
:

630 *
size
 = (
pc_desc_£s
) / (pc_desc_ses[0]);

631  &
pc_desc_£s
[0];

632 
PDT_RBC
:

633 *
size
 = (
pc_desc_rbc
) / (pc_desc_rbc[0]);

634  &
pc_desc_rbc
[0];

635 
PDT_ADC
:

636 *
size
 = (
pc_desc_adc
) / (pc_desc_adc[0]);

637  &
pc_desc_adc
[0];

639 *
size
 = 0;

640  
NULL
;

641 
	}
}

643 
∑ge_code_desc
 
	gpc_desc_t_f˝
[] = {

648 
∑ge_code_desc
 
	gpc_desc_t_•i4
[] = {

657 
∑ge_code_desc
 
	gpc_desc_t_ßs
[] = {

665 
∑ge_code_desc
 
	gpc_desc_t_adc
[] = {

673 
∑ge_code_desc
 *

674 
	$mode_∑ge_å™•_èbÀ
(
t_¥Ÿo
, * 
size
)

676 
t_¥Ÿo
)

678 
TPROTO_FCP
:

679 *
size
 = (
pc_desc_t_f˝
) / (pc_desc_t_fcp[0]);

680  &
pc_desc_t_f˝
[0];

681 
TPROTO_SPI
:

682 *
size
 = (
pc_desc_t_•i4
) / (pc_desc_t_spi4[0]);

683  &
pc_desc_t_•i4
[0];

684 
TPROTO_SAS
:

685 *
size
 = (
pc_desc_t_ßs
) / (pc_desc_t_sas[0]);

686  &
pc_desc_t_ßs
[0];

687 
TPROTO_ADT
:

688 *
size
 = (
pc_desc_t_adc
) / (pc_desc_t_adc[0]);

689  &
pc_desc_t_adc
[0];

691 *
size
 = 0;

692  
NULL
;

693 
	}
}

696 
	$föd_∑ge_code_desc
(
∑ge_num
, 
sub∑ge_num
, 
scsi_±y≥
,

697 
öq_byã6
, 
t_¥Ÿo
)

699 
k
;

700 
num
;

701 c⁄° 
∑ge_code_desc
 * 
pcdp
;

703 i‡(
t_¥Ÿo
 >= 0) {

704 
pcdp
 = 
	`mode_∑ge_å™•_èbÀ
(
t_¥Ÿo
, &
num
);

705 i‡(
pcdp
) {

706 
k
 = 0; k < 
num
; ++k, ++
pcdp
) {

707 i‡((
∑ge_num
 =
pcdp
->
∑ge_code
) &&

708 (
sub∑ge_num
 =
pcdp
->
sub∑ge_code
))

709  
pcdp
->
desc
;

710 i‡(
∑ge_num
 < 
pcdp
->
∑ge_code
)

715 
pcdp
 = 
	`mode_∑ge_cs_èbÀ
(
scsi_±y≥
, &
num
);

716 i‡(
pcdp
) {

717 
k
 = 0; k < 
num
; ++k, ++
pcdp
) {

718 i‡((
∑ge_num
 =
pcdp
->
∑ge_code
) &&

719 (
sub∑ge_num
 =
pcdp
->
sub∑ge_code
))

720  
pcdp
->
desc
;

721 i‡(
∑ge_num
 < 
pcdp
->
∑ge_code
)

725 i‡((0xd !
scsi_±y≥
Ë&& (
öq_byã6
 & 0x40)) {

727 
pcdp
 = 
	`mode_∑ge_cs_èbÀ
(0xd, &
num
);

728 i‡(
pcdp
) {

729 
k
 = 0; k < 
num
; ++k, ++
pcdp
) {

730 i‡((
∑ge_num
 =
pcdp
->
∑ge_code
) &&

731 (
sub∑ge_num
 =
pcdp
->
sub∑ge_code
))

732  
pcdp
->
desc
;

733 i‡(
∑ge_num
 < 
pcdp
->
∑ge_code
)

738 i‡((0x8 !
scsi_±y≥
Ë&& (
öq_byã6
 & 0x8)) {

740 
pcdp
 = 
	`mode_∑ge_cs_èbÀ
(0x8, &
num
);

741 i‡(
pcdp
) {

742 
k
 = 0; k < 
num
; ++k, ++
pcdp
) {

743 i‡((
∑ge_num
 =
pcdp
->
∑ge_code
) &&

744 (
sub∑ge_num
 =
pcdp
->
sub∑ge_code
))

745  
pcdp
->
desc
;

746 i‡(
∑ge_num
 < 
pcdp
->
∑ge_code
)

751 
pcdp
 = 
	`mode_∑ge_cs_èbÀ
(-1, &
num
);

752 
k
 = 0; k < 
num
; ++k, ++
pcdp
) {

753 i‡((
∑ge_num
 =
pcdp
->
∑ge_code
) &&

754 (
sub∑ge_num
 =
pcdp
->
sub∑ge_code
))

755  
pcdp
->
desc
;

756 i‡(
∑ge_num
 < 
pcdp
->
∑ge_code
)

759  
NULL
;

760 
	}
}

763 
	$li°_∑ge_codes
(
scsi_±y≥
, 
öq_byã6
, 
t_¥Ÿo
)

765 
num
, 
num_±y≥
, 
pg
, 
•g
, 
c
, 
d
, 
vÆid_å™•‹t
;

766 c⁄° 
∑ge_code_desc
 * 
dp
;

767 c⁄° 
∑ge_code_desc
 * 
≥_dp
;

768 
b
[64];

770 
vÆid_å™•‹t
 = ((
t_¥Ÿo
 >= 0) && (t_proto <= 0xf)) ? 1 : 0;

771 
	`¥ötf
("Page[,subpage] Name\n");

772 
	`¥ötf
("=====================\n");

773 
dp
 = 
	`mode_∑ge_cs_èbÀ
(-1, &
num
);

774 
≥_dp
 = 
	`mode_∑ge_cs_èbÀ
(
scsi_±y≥
, &
num_±y≥
);

776 
pg
 = 
dp
 ? dp->
∑ge_code
 : 
PG_CODE_ALL
 + 1;

777 
•g
 = 
dp
 ? dp->
sub∑ge_code
 : 
SPG_CODE_ALL
;

778 
c
 = (
pg
 << 8Ë+ 
•g
;

779 
pg
 = 
≥_dp
 ?Öe_dp->
∑ge_code
 : 
PG_CODE_ALL
 + 1;

780 
•g
 = 
≥_dp
 ?Öe_dp->
sub∑ge_code
 : 
SPG_CODE_ALL
;

781 
d
 = (
pg
 << 8Ë+ 
•g
;

782 i‡(
vÆid_å™•‹t
 &&

783 ((
PROTO_SPECIFIC_1
 =
c
Ë|| (
PROTO_SPECIFIC_2
 == c)))

784 
dp
 = (--
num
 <0Ë? 
NULL
 : (dp + 1);

785 i‡(
c
 =
d
) {

786 i‡(
≥_dp
->
sub∑ge_code
)

787 
	`¥ötf
(" 0x%02x,0x%02x * %s\n", 
≥_dp
->
∑ge_code
,

788 
≥_dp
->
sub∑ge_code
,Öe_dp->
desc
);

790 
	`¥ötf
(" 0x%02x * %s\n", 
≥_dp
->
∑ge_code
,

791 
≥_dp
->
desc
);

792 
dp
 = (--
num
 <0Ë? 
NULL
 : (dp + 1);

793 
≥_dp
 = (--
num_±y≥
 <0Ë? 
NULL
 : (pe_dp + 1);

794 } i‡(
c
 < 
d
) {

795 i‡(
dp
->
sub∑ge_code
)

796 
	`¥ötf
(" 0x%02x,0x%02x %s\n", 
dp
->
∑ge_code
,

797 
dp
->
sub∑ge_code
, dp->
desc
);

799 
	`¥ötf
(" 0x%02x %s\n", 
dp
->
∑ge_code
,

800 
dp
->
desc
);

801 
dp
 = (--
num
 <0Ë? 
NULL
 : (dp + 1);

803 i‡(
≥_dp
->
sub∑ge_code
)

804 
	`¥ötf
(" 0x%02x,0x%02x %s\n", 
≥_dp
->
∑ge_code
,

805 
≥_dp
->
sub∑ge_code
,Öe_dp->
desc
);

807 
	`¥ötf
(" 0x%02x %s\n", 
≥_dp
->
∑ge_code
,

808 
≥_dp
->
desc
);

809 
≥_dp
 = (--
num_±y≥
 <0Ë? 
NULL
 : (pe_dp + 1);

811 i‡((
NULL
 =
dp
Ë&& (NULL =
≥_dp
))

814 i‡((0xd !
scsi_±y≥
Ë&& (
öq_byã6
 & 0x40)) {

816 
	`¥ötf
("\n AttachedÉnclosure servicesÖrocessor\n");

817 
dp
 = 
	`mode_∑ge_cs_èbÀ
(0xd, &
num
);

818 
dp
) {

819 i‡(
dp
->
sub∑ge_code
)

820 
	`¥ötf
(" 0x%02x,0x%02x %s\n", 
dp
->
∑ge_code
,

821 
dp
->
sub∑ge_code
, dp->
desc
);

823 
	`¥ötf
(" 0x%02x %s\n", 
dp
->
∑ge_code
,

824 
dp
->
desc
);

825 
dp
 = (--
num
 <0Ë? 
NULL
 : (dp + 1);

828 i‡((0x8 !
scsi_±y≥
Ë&& (
öq_byã6
 & 0x8)) {

830 
	`¥ötf
("\n Attached medium changer device\n");

831 
dp
 = 
	`mode_∑ge_cs_èbÀ
(0x8, &
num
);

832 
dp
) {

833 i‡(
dp
->
sub∑ge_code
)

834 
	`¥ötf
(" 0x%02x,0x%02x %s\n", 
dp
->
∑ge_code
,

835 
dp
->
sub∑ge_code
, dp->
desc
);

837 
	`¥ötf
(" 0x%02x %s\n", 
dp
->
∑ge_code
,

838 
dp
->
desc
);

839 
dp
 = (--
num
 <0Ë? 
NULL
 : (dp + 1);

842 i‡(
vÆid_å™•‹t
) {

843 
	`¥ötf
("\n TransportÖrotocol: %s\n",

844 
	`sg_gë_å™s_¥Ÿo_°r
(
t_¥Ÿo
, (
b
), b));

845 
dp
 = 
	`mode_∑ge_å™•_èbÀ
(
t_¥Ÿo
, &
num
);

846 
dp
) {

847 i‡(
dp
->
sub∑ge_code
)

848 
	`¥ötf
(" 0x%02x,0x%02x %s\n", 
dp
->
∑ge_code
,

849 
dp
->
sub∑ge_code
, dp->
desc
);

851 
	`¥ötf
(" 0x%02x %s\n", 
dp
->
∑ge_code
,

852 
dp
->
desc
);

853 
dp
 = (--
num
 <0Ë? 
NULL
 : (dp + 1);

856 
	}
}

859 
	$examöe_∑ges
(
sg_fd
, 
öq_pdt
, 
öq_byã6
,

860 c⁄° 
›ts_t
 * 
›t•
)

862 
k
, 
ªs
, 
hódî
, 
mª•_Àn
, 
Àn
;

863 
rbuf
[256];

864 c⁄° * 
˝
;

866 
mª•_Àn
 = (
›t•
->
do_øw
 || o±•->
do_hex
Ë? (
rbuf
) : 4;

867 
hódî
 = 0, 
k
 = 0; k < 
PG_CODE_MAX
; ++k) {

868 i‡(
›t•
->
do_six
) {

869 
ªs
 = 
	`sg_Œ_mode_£n£6
(
sg_fd
, 0, 0, 
k
, 0, 
rbuf
, 
mª•_Àn
,

870 1, 
›t•
->
do_vîbo£
);

871 i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
) {

872 
	`Ârötf
(
°dîr
, ">>>>>>Åryágain withoutÅhe '-6' "

874  
ªs
;

875 } i‡(
SG_LIB_CAT_NOT_READY
 =
ªs
) {

876 
	`Ârötf
(
°dîr
, "MODE SENSE (6) failed, deviceÇotÑeady\n");

877  
ªs
;

880 
ªs
 = 
	`sg_Œ_mode_£n£10
(
sg_fd
, 0, 0, 0, 
k
, 0, 
rbuf
, 
mª•_Àn
,

881 1, 
›t•
->
do_vîbo£
);

882 i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
) {

883 
	`Ârötf
(
°dîr
, ">>>>>>Åryágain withá '-6' "

885  
ªs
;

886 } i‡(
SG_LIB_CAT_NOT_READY
 =
ªs
) {

887 
	`Ârötf
(
°dîr
, "MODE SENSE (10) failed, deviceÇotÑeady\n");

888  
ªs
;

891 i‡(0 =
ªs
) {

892 
Àn
 = 
›t•
->
do_six
 ? (
rbuf
[0] + 1) :

893 ((
rbuf
[0] << 8) +Ñbuf[1] + 2);

894 i‡(
Àn
 > 
mª•_Àn
)

895 
Àn
 = 
mª•_Àn
;

896 i‡(
›t•
->
do_øw
) {

897 
	`dSåRaw
((c⁄° *)
rbuf
, 
Àn
);

900 i‡(0 =
hódî
) {

901 
	`¥ötf
("Discovered modeÖages:\n");

902 
hódî
 = 1;

904 
˝
 = 
	`föd_∑ge_code_desc
(
k
, 0, 
öq_pdt
, 
öq_byã6
, -1);

905 i‡(
˝
)

906 
	`¥ötf
(" %s\n", 
˝
);

908 
	`¥ötf
(" [0x%x]\n", 
k
);

909 i‡(
›t•
->
do_hex
)

910 
	`dSåHex
((c⁄° *)
rbuf
, 
Àn
, 1);

913  
ªs
;

914 
	}
}

916 c⁄° * 
	gpg_c⁄åﬁ_°r_¨r
[] = {

925 
	$maö
(
¨gc
, * 
¨gv
[])

927 
sg_fd
, 
k
, 
num
, 
Àn
, 
ªs
, 
md_Àn
, 
bd_Àn
, 
l⁄glba
, 
∑ge_num
, 
•f
;

928 
ebuff
[
EBUFF_SZ
];

929 c⁄° * 
des˝
;

930 * 
r•_buff
 = 
NULL
;

931 
def_r•_buff
[
DEF_ALLOC_LEN
];

932 * 
mÆloc_r•_buff
 = 
NULL
;

933 
r•_buff_size
 = 
DEF_ALLOC_LEN
;

934 
ªt
 = 0;

935 
dísôy_code_off
, 
t_¥Ÿo
, 
öq_pdt
, 
öq_byã6
, 
ª•_mode6
;

936 
num_ua_∑ges
;

937 * 
u˝
;

938 
uc
;

939 
sg_sim∂e_öquúy_ª•
 
öq_out
;

940 
pdt_«me
[64];

941 
›ts_t
 
›ts
;

943 
	`mem£t
(&
›ts
, 0, (opts));

944 
›ts
.
pg_code
 = -1;

945 
ªs
 = 
	`¥o˚ss_˛
(&
›ts
, 
¨gc
, 
¨gv
);

946 i‡(
ªs
)

947  
SG_LIB_SYNTAX_ERROR
;

948 i‡(
›ts
.
do_hñp
) {

949 
	`ußge_f‹
(&
›ts
);

952 i‡(
›ts
.
do_vîsi⁄
) {

953 
	`Ârötf
(
°dîr
, "Vîsi⁄ såög: %s\n", 
vîsi⁄_°r
);

957 i‡(
NULL
 =
›ts
.
devi˚_«me
) {

958 i‡(
›ts
.
do_li°
) {

959 i‡((
›ts
.
pg_code
 < 0Ë|| (›ts.pg_codê> 
PG_CODE_MAX
)) {

960 
	`¥ötf
(" AssumeÖeripheral deviceÅype: disk\n");

961 
	`li°_∑ge_codes
(0, 0, -1);

963 
	`¥ötf
("Öeripheral deviceÅype: %s\n",

964 
	`sg_gë_pdt_°r
(
›ts
.
pg_code
, (
pdt_«me
),

965 
pdt_«me
));

966 i‡(
›ts
.
subpg_code_£t
)

967 
	`li°_∑ge_codes
(
›ts
.
pg_code
, 0, o±s.
subpg_code
);

969 
	`li°_∑ge_codes
(
›ts
.
pg_code
, 0, -1);

973 
	`Ârötf
(
°dîr
, "No DEVICEárgument given\n");

974 
	`ußge_f‹
(&
›ts
);

975  
SG_LIB_SYNTAX_ERROR
;

978 i‡(
›ts
.
do_examöe
 && (›ts.
pg_code
 >= 0)) {

979 
	`Ârötf
(
°dîr
, "can't give '-e'ándáÖageÇumber\n");

980  
SG_LIB_SYNTAX_ERROR
;

983 i‡((
›ts
.
do_six
Ë&& (›ts.
do_ŒbØ
)) {

984 
	`Ârötf
(
°dîr
, "LLBAAÇot defined for MODE SENSE 6,Åry "

986  
SG_LIB_SYNTAX_ERROR
;

988 i‡(
›ts
.
maxÀn
 > 0) {

989 i‡(
›ts
.
do_six
 && (›ts.
maxÀn
 > 255)) {

990 
	`Ârötf
(
°dîr
, "For Mode Sense (6) maxlen cannotÉxceed "

992  
SG_LIB_SYNTAX_ERROR
;

994 i‡(
›ts
.
maxÀn
 > 
DEF_ALLOC_LEN
) {

995 
mÆloc_r•_buff
 = (*)
	`mÆloc
(
›ts
.
maxÀn
);

996 i‡(
NULL
 =
mÆloc_r•_buff
) {

997 
	`Ârötf
(
°dîr
, "UnableÅo malloc maxlen=%d bytes\n",

998 
›ts
.
maxÀn
);

999  
SG_LIB_SYNTAX_ERROR
;

1001 
r•_buff
 = 
mÆloc_r•_buff
;

1003 
r•_buff
 = 
def_r•_buff
;

1004 
r•_buff_size
 = 
›ts
.
maxÀn
;

1006 
r•_buff_size
 = 
›ts
.
do_six
 ? 
DEF_6_ALLOC_LEN
 : 
DEF_ALLOC_LEN
;

1007 
r•_buff
 = 
def_r•_buff
;

1010 i‡(! ((
›ts
.
pg_code
 >0Ë|| o±s.
do_Æl
 || o±s.
do_li°
 ||

1011 
›ts
.
do_examöe
))

1012 
›ts
.
do_Æl
 = 1;

1014 i‡(
›ts
.
do_øw
) {

1015 i‡(
	`sg_£t_bö¨y_mode
(
STDOUT_FILENO
) < 0) {

1016 
	`≥º‹
("sg_set_binary_mode");

1017  
SG_LIB_FILE_ERROR
;

1021 i‡((
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
›ts
.
devi˚_«me
, 1 ,

1022 
›ts
.
do_vîbo£
)) < 0) {

1023 
	`Ârötf
(
°dîr
, "error opening file: %s: %s\n",

1024 
›ts
.
devi˚_«me
, 
	`ß„_°ªº‹
(-
sg_fd
));

1025 i‡(
mÆloc_r•_buff
)

1026 
	`‰ì
(
mÆloc_r•_buff
);

1027  
SG_LIB_FILE_ERROR
;

1030 i‡(
	`sg_sim∂e_öquúy
(
sg_fd
, &
öq_out
, 1, 
›ts
.
do_vîbo£
)) {

1031 
	`Ârötf
(
°dîr
, "%s doesn'tÑespondÅoá SCSI INQUIRY\n",

1032 
›ts
.
devi˚_«me
);

1033 
ªt
 = 
SG_LIB_CAT_OTHER
;

1034 
föish
;

1036 
öq_pdt
 = 
öq_out
.
≥rùhîÆ_ty≥
;

1037 
öq_byã6
 = 
öq_out
.
byã_6
;

1038 i‡(0 =
›ts
.
do_øw
)

1039 
	`¥ötf
(" %.8s %.16s %.4sÖeripheral_type: %s [0x%x]\n",

1040 
öq_out
.
víd‹
, inq_out.
¥odu˘
, inq_out.
ªvisi⁄
,

1041 
	`sg_gë_pdt_°r
(
öq_pdt
, (
pdt_«me
),Ödt_name), inq_pdt);

1042 i‡(
›ts
.
do_li°
) {

1043 i‡(
›ts
.
subpg_code_£t
)

1044 
	`li°_∑ge_codes
(
öq_pdt
, 
öq_byã6
, 
›ts
.
subpg_code
);

1046 
	`li°_∑ge_codes
(
öq_pdt
, 
öq_byã6
, -1);

1047 
föish
;

1049 i‡(
›ts
.
do_examöe
) {

1050 
ªt
 = 
	`examöe_∑ges
(
sg_fd
, 
öq_pdt
, 
öq_byã6
, &
›ts
);

1051 
föish
;

1053 i‡(
PG_CODE_ALL
 =
›ts
.
pg_code
) {

1054 i‡(0 =
›ts
.
do_Æl
)

1055 ++
›ts
.
do_Æl
;

1056 } i‡(
›ts
.
do_Æl
)

1057 
›ts
.
pg_code
 = 
PG_CODE_ALL
;

1058 i‡(
›ts
.
do_Æl
 > 1)

1059 
›ts
.
subpg_code
 = 
SPG_CODE_ALL
;

1061 i‡(
›ts
.
do_øw
 > 1) {

1062 i‡(
›ts
.
do_Æl
) {

1063 i‡(
›ts
.
›t_√w
)

1064 
	`Ârötf
(
°dîr
, "'-R'Ñequiresá specific (sub)page,Çot "

1067 
	`Ârötf
(
°dîr
, "'-r'Ñequiresá specific (sub)page,Çot "

1069 
	`ußge_f‹
(&
›ts
);

1070 
ªt
 = 
SG_LIB_SYNTAX_ERROR
;

1071 
föish
;

1075 
	`mem£t
(
r•_buff
, 0, (rsp_buff));

1076 i‡(
›ts
.
do_six
) {

1077 
ªs
 = 
	`sg_Œ_mode_£n£6
(
sg_fd
, 
›ts
.
do_dbd
, o±s.
∑ge_c⁄åﬁ
,

1078 
›ts
.
pg_code
, o±s.
subpg_code
, 
r•_buff
,

1079 
r•_buff_size
, 1, 
›ts
.
do_vîbo£
);

1080 i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

1081 
	`Ârötf
(
°dîr
, ">>>>>>Åryágain withoutÅhe '-6' "

1084 
ªs
 = 
	`sg_Œ_mode_£n£10
(
sg_fd
, 
›ts
.
do_ŒbØ
, o±s.
do_dbd
,

1085 
›ts
.
∑ge_c⁄åﬁ
, o±s.
pg_code
,

1086 
›ts
.
subpg_code
, 
r•_buff
, 
r•_buff_size
,

1087 1, 
›ts
.
do_vîbo£
);

1088 i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

1089 
	`Ârötf
(
°dîr
, ">>>>>>Åryágain withá '-6' "

1092 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
) {

1093 i‡(
›ts
.
subpg_code
 > 0)

1094 
	`Ârötf
(
°dîr
, "invalid field in cdb (perhaps subpages "

1096 i‡(
›ts
.
∑ge_c⁄åﬁ
 > 0)

1097 
	`Ârötf
(
°dîr
, "invalid field in cdb (perhaps "

1100 
	`Ârötf
(
°dîr
, "invalid field in cdb (perhaps "

1101 "∑gê0x%xÇŸ suµ‹ãd)\n", 
›ts
.
pg_code
);

1102 } i‡(
SG_LIB_CAT_NOT_READY
 =
ªs
)

1103 
	`Ârötf
(
°dîr
, "deviceÇotÑeady\n");

1104 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
)

1105 
	`Ârötf
(
°dîr
, "unitáttention\n");

1106 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

1107 
	`Ârötf
(
°dîr
, "aborted command\n");

1108 
ªt
 = 
ªs
;

1109 i‡(0 =
ªs
) {

1110 
medium_ty≥
, 
•ecific
, 
hódîÀn
;

1112 
ªt
 = 0;

1113 
ª•_mode6
 = 
›ts
.
do_six
;

1114 i‡(
›ts
.
do_ÊexibÀ
) {

1115 
num
 = 
r•_buff
[0];

1116 i‡(
›ts
.
do_six
 && (
num
 < 3))

1117 
ª•_mode6
 = 0;

1118 i‡((0 =
›ts
.
do_six
Ë&& (
num
 > 5)) {

1119 i‡((
num
 > 11Ë&& (0 =“um % 2)Ë&& (0 =
r•_buff
[4]) &&

1120 (0 =
r•_buff
[5]) && (0 ==Ñsp_buff[6])) {

1121 
r•_buff
[1] = 
num
;

1122 
r•_buff
[0] = 0;

1123 
	`Ârötf
(
°dîr
, ">>> msense(10) butÑesp[0]=%dánd "

1124 "nŸ m£n£(6Ëª•⁄£ sÿfixÜígth\n", 
num
);

1126 
ª•_mode6
 = 1;

1129 i‡((! 
›ts
.
do_øw
Ë&& (1 !›ts.
do_hex
)) {

1130 i‡(
ª•_mode6
 =
›ts
.
do_six
)

1131 
	`¥ötf
("ModeÖarameter header from MODE SENSE(%s):\n",

1132 (
›ts
.
do_six
 ? "6" : "10"));

1134 
	`¥ötf
(" >>> ModeÖarameter header from MODE SENSE(%s),\n"

1136 (
›ts
.
do_six
 ? "6" : "10"), (
ª•_mode6
 ? "6" : "10"));

1138 i‡(
ª•_mode6
) {

1139 
hódîÀn
 = 4;

1140 
md_Àn
 = 
r•_buff
[0] + 1;

1141 
bd_Àn
 = 
r•_buff
[3];

1142 
medium_ty≥
 = 
r•_buff
[1];

1143 
•ecific
 = 
r•_buff
[2];

1144 
l⁄glba
 = 0;

1146 
hódîÀn
 = 8;

1147 
md_Àn
 = (
r•_buff
[0] << 8) +Ñsp_buff[1] + 2;

1148 
bd_Àn
 = (
r•_buff
[6] << 8) +Ñsp_buff[7];

1149 
medium_ty≥
 = 
r•_buff
[2];

1150 
•ecific
 = 
r•_buff
[3];

1151 
l⁄glba
 = 
r•_buff
[4] & 1;

1153 i‡((
bd_Àn
 + 
hódîÀn
Ë> 
md_Àn
) {

1154 
	`Ârötf
(
°dîr
, "Invalid block descriptorÜength=%d, ignore\n",

1155 
bd_Àn
);

1156 
bd_Àn
 = 0;

1158 i‡(
›ts
.
do_øw
) {

1159 i‡(1 =
›ts
.
do_øw
)

1160 
	`dSåRaw
((c⁄° *)
r•_buff
, 
md_Àn
);

1162 
u˝
 = 
r•_buff
 + 
bd_Àn
 + 
hódîÀn
;

1163 
md_Àn
 -
bd_Àn
 + 
hódîÀn
;

1164 
•f
 = ((
u˝
[0] & 0x40) ? 1 : 0);

1165 
Àn
 = (
•f
 ? ((
u˝
[2] << 8) + ucp[3] + 4) : (ucp[1] + 2));

1166 
Àn
 = (À¿< 
md_Àn
) ?Üen : md_len;

1167 
k
 = 0; k < 
Àn
; ++k)

1168 
	`¥ötf
("%02x\n", 
u˝
[
k
]);

1170 
föish
;

1172 i‡(1 =
›ts
.
do_hex
) {

1173 
	`dSåHex
((c⁄° *)
r•_buff
, 
md_Àn
, 1);

1174 
föish
;

1175 } i‡(
›ts
.
do_hex
 > 1)

1176 
	`dSåHex
((c⁄° *)
r•_buff
, 
hódîÀn
, 1);

1177 i‡(0 =
öq_pdt
)

1178 
	`¥ötf
(" Mode dataÜength=%d, mediumÅype=0x%.2x, WP=%d,"

1179 " DpoFua=%d,Ü⁄glba=%d\n", 
md_Àn
, 
medium_ty≥
,

1180 !!(
•ecific
 & 0x80), !!(•ecifi¯& 0x10), 
l⁄glba
);

1182 
	`¥ötf
(" Mode dataÜength=%d, mediumÅype=0x%.2x, specific"

1183 "Ö¨am=0x%.2x,Ü⁄glba=%d\n", 
md_Àn
, 
medium_ty≥
,

1184 
•ecific
, 
l⁄glba
);

1185 i‡(
md_Àn
 > 
r•_buff_size
) {

1186 
	`¥ötf
("Only fetched %d bytes ofÑesponse,Åruncate output\n",

1187 
r•_buff_size
);

1188 
md_Àn
 = 
r•_buff_size
;

1189 i‡(
bd_Àn
 + 
hódîÀn
 > 
r•_buff_size
)

1190 
bd_Àn
 = 
r•_buff_size
 - 
hódîÀn
;

1192 i‡(! 
›ts
.
do_dbout
) {

1193 
	`¥ötf
(" Block des¸ùt‹Üígth=%d\n", 
bd_Àn
);

1194 i‡(
bd_Àn
 > 0) {

1195 
Àn
 = 8;

1196 
dísôy_code_off
 = 0;

1197 
num
 = 
bd_Àn
;

1198 i‡(
l⁄glba
) {

1199 
	`¥ötf
(">Üonglba directáccess device block "

1201 
Àn
 = 16;

1202 
dísôy_code_off
 = 8;

1204 i‡(0 =
öq_pdt
) {

1205 
	`¥ötf
("> Directáccess device block descriptors:\n");

1206 
dísôy_code_off
 = 4;

1209 
	`¥ötf
("> General modeÖarameter block descriptors:\n");

1211 
u˝
 = 
r•_buff
 + 
hódîÀn
;

1212 
num
 > 0) {

1213 
	`¥ötf
(" Density code=0x%x\n",

1214 *(
u˝
 + 
dísôy_code_off
));

1215 
	`dSåHex
((c⁄° *)
u˝
, 
Àn
, 1);

1216 
u˝
 +
Àn
;

1217 
num
 -
Àn
;

1219 
	`¥ötf
("\n");

1222 
u˝
 = 
r•_buff
 + 
bd_Àn
 + 
hódîÀn
;

1223 
md_Àn
 -
bd_Àn
 + 
hódîÀn
;

1224 
num_ua_∑ges
 = 0;

1225 
k
 = 0; 
md_Àn
 > 0; ++k) {

1226 i‡((
k
 > 0Ë&& (! 
›ts
.
do_Æl
) &&

1227 (
SPG_CODE_ALL
 !
›ts
.
subpg_code
)) {

1228 
	`Ârötf
(
°dîr
, "UnexpectedlyÑeceivedÉxtra modeÖage "

1232 
uc
 = *
u˝
;

1233 
•f
 = ((
uc
 & 0x40) ? 1 : 0);

1234 
Àn
 = (
•f
 ? ((
u˝
[2] << 8) + ucp[3] + 4) : (ucp[1] + 2));

1235 
∑ge_num
 = 
u˝
[0] & 
PG_CODE_MASK
;

1236 i‡(0x0 =
∑ge_num
) {

1237 ++
num_ua_∑ges
;

1238 if((
num_ua_∑ges
 > 3Ë&& (
md_Àn
 > 0xa00)) {

1239 
	`Ârötf
(
°dîr
, ">>> Seen 3 unitáttentionÖages "

1242 
md_Àn
);

1246 i‡(
›ts
.
do_hex
) {

1247 i‡(
•f
)

1248 
	`¥ötf
(">>Öage_code=0x%x, subpage_code=0x%x,Öage_cont"

1249 "rﬁ=%d\n", 
∑ge_num
, 
u˝
[1], 
›ts
.
∑ge_c⁄åﬁ
);

1251 
	`¥ötf
(">>Öage_code=0x%x,Öage_c⁄åﬁ=%d\n", 
∑ge_num
,

1252 
›ts
.
∑ge_c⁄åﬁ
);

1254 
des˝
 = 
NULL
;

1255 i‡((0x18 =
∑ge_num
) || (0x19 ==Öage_num)) {

1256 
t_¥Ÿo
 = (
•f
 ? 
u˝
[5] : ucp[2]) & 0xf;

1257 
des˝
 = 
	`föd_∑ge_code_desc
(
∑ge_num
, (
•f
 ? 
u˝
[1] : 0),

1258 
öq_pdt
, 
öq_byã6
, 
t_¥Ÿo
);

1260 
des˝
 = 
	`föd_∑ge_code_desc
(
∑ge_num
, (
•f
 ? 
u˝
[1] : 0),

1261 
öq_pdt
, 
öq_byã6
, -1);

1262 i‡(
NULL
 =
des˝
) {

1263 i‡(
•f
)

1264 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, "0x%x, subpage_code: 0x%x",

1265 
∑ge_num
, 
u˝
[1]);

1267 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, "0x%x", 
∑ge_num
);

1269 i‡(
des˝
)

1270 
	`¥ötf
(">> %s,Öage_c⁄åﬁ: %s\n", 
des˝
,

1271 
pg_c⁄åﬁ_°r_¨r
[
›ts
.
∑ge_c⁄åﬁ
]);

1273 
	`¥ötf
(">>Öage_code: %s,Öage_c⁄åﬁ: %s\n", 
ebuff
,

1274 
pg_c⁄åﬁ_°r_¨r
[
›ts
.
∑ge_c⁄åﬁ
]);

1276 
num
 = (
Àn
 > 
md_Àn
) ? md_len :Üen;

1277 i‡((
k
 > 0Ë&& (
num
 > 256)) {

1278 
num
 = 256;

1279 
	`Ârötf
(
°dîr
, ">>>ÖageÜength (%d) > 256 bytes, unlikely "

1280 "åim\¿ Try '-f' o±i⁄\n", 
Àn
);

1282 
	`dSåHex
((c⁄° *)
u˝
, 
num
 , 1);

1283 
u˝
 +
Àn
;

1284 
md_Àn
 -
Àn
;

1288 
föish
:

1289 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

1290 i‡(
mÆloc_r•_buff
)

1291 
	`‰ì
(
mÆloc_r•_buff
);

1292  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

1293 
	}
}

	@src/sg_opcodes.c

13 
	~<uni°d.h
>

14 
	~<f˙é.h
>

15 
	~<°dio.h
>

16 
	~<°dlib.h
>

17 
	~<°rög.h
>

18 
	~<gë›t.h
>

20 #ifde‡
HAVE_CONFIG_H


21 
	~"c⁄fig.h
"

23 
	~"sg_lib.h
"

24 
	~"sg_cmds_basic.h
"

25 
	~"sg_cmds_exåa.h
"

27 
	~"sg_±.h
"

29 c⁄° * 
	gvîsi⁄_°r
 = "0.38 20130507";

32 
	#SENSE_BUFF_LEN
 64

	)

33 
	#DEF_TIMEOUT_SECS
 60

	)

35 
	#SG_MAINTENANCE_IN
 0xa3

	)

36 
	#RSOC_SA
 0xc

	)

37 
	#RSTMF_SA
 0xd

	)

38 
	#RSOC_CMD_LEN
 12

	)

39 
	#RSTMF_CMD_LEN
 12

	)

40 
	#MX_ALLOC_LEN
 8192

	)

42 
	#NAME_BUFF_SZ
 64

	)

45 
	g≥ri_ty≥
 = 0;

47 
do_rsoc
(
sg_fd
, 
r˘d
, 
ªp_›ts
, 
rq_›code
,

48 
rq_£rva˘
, * 
ª•
, 
mx_ª•_Àn
, 
noisy
,

49 
vîbo£
);

50 
do_r°mf
(
sg_fd
, 
ªpd
, * 
ª•
, 
mx_ª•_Àn
,

51 
noisy
, 
vîbo£
);

54 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

73 
	s›ts_t
 {

74 
	mdo_Æpha
;

75 
	mdo_hñp
;

76 
	mdo_hex
;

77 
	mno_öquúy
;

78 
	mdo_›code
;

79 
	mdo_øw
;

80 
	mdo_r˘d
;

81 
	mdo_ªpd
;

82 
	mdo_£rva˘
;

83 
	mdo_vîbo£
;

84 
	mdo_vîsi⁄
;

85 
	mdo_uns‹ãd
;

86 
	mdo_èskm™
;

87 c⁄° * 
	mdevi˚_«me
;

88 
	m›t_√w
;

93 
	$ußge
()

95 
	`Ârötf
(
°dîr
,

130 
	}
}

133 
	$ußge_ﬁd
()

135 
	`Ârötf
(
°dîr
,

157 
	}
}

160 
	$¥o˚ss_˛_√w
(
›ts_t
 * 
›t•
, 
¨gc
, * 
¨gv
[])

162 
c
, 
n
;

163 * 
˝
;

164 
b
[32];

167 
›ti⁄_ödex
 = 0;

169 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "ahHnNo:OqrRs:tuvV", 
l⁄g_›ti⁄s
,

170 &
›ti⁄_ödex
);

171 i‡(
c
 == -1)

174 
c
) {

176 
›t•
->
do_Æpha
 = 1;

180 ++
›t•
->
do_hñp
;

183 ++
›t•
->
do_hex
;

186 ++
›t•
->
no_öquúy
;

191 i‡(
	`°æí
(
›èrg
Ë>((
b
) - 1)) {

192 
	`Ârötf
(
°dîr
, "argumentÅo '--opcode'ÅooÜong\n");

193  
SG_LIB_SYNTAX_ERROR
;

195 
˝
 = 
	`°rchr
(
›èrg
, ',');

196 i‡(
˝
) {

197 
	`mem£t
(
b
, 0, (b));

198 
	`°∫˝y
(
b
, 
›èrg
, 
˝
 - optarg);

199 
n
 = 
	`sg_gë_num
(
b
);

200 i‡((
n
 < 0) || (n > 255)) {

201 
	`Ârötf
(
°dîr
, "bad OPárgumentÅo '--opcode'\n");

202  
SG_LIB_SYNTAX_ERROR
;

204 
›t•
->
do_›code
 = 
n
;

205 
n
 = 
	`sg_gë_num
(
˝
 + 1);

206 i‡((
n
 < 0) || (n > 0xffff)) {

207 
	`Ârötf
(
°dîr
, "bad SAárgumentÅo '--opcode'\n");

208 
	`ußge
();

209  
SG_LIB_SYNTAX_ERROR
;

211 
›t•
->
do_£rva˘
 = 
n
;

213 
n
 = 
	`sg_gë_num
(
›èrg
);

214 i‡((
n
 < 0) || (n > 255)) {

215 
	`Ârötf
(
°dîr
, "badárgumentÅo '--opcode'\n");

216 
	`ußge
();

217  
SG_LIB_SYNTAX_ERROR
;

219 
›t•
->
do_›code
 = 
n
;

223 
›t•
->
›t_√w
 = 0;

226 ++
›t•
->
do_ªpd
;

229 ++
›t•
->
do_øw
;

232 ++
›t•
->
do_r˘d
;

235 
n
 = 
	`sg_gë_num
(
›èrg
);

236 i‡((
n
 < 0) || (n > 0xffff)) {

237 
	`Ârötf
(
°dîr
, "badárgumentÅo '--sa'\n");

238 
	`ußge
();

239  
SG_LIB_SYNTAX_ERROR
;

241 
›t•
->
do_£rva˘
 = 
n
;

244 ++
›t•
->
do_èskm™
;

247 ++
›t•
->
do_uns‹ãd
;

250 ++
›t•
->
do_vîbo£
;

253 ++
›t•
->
do_vîsi⁄
;

256 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê%¯[0x%x]\n", 
c
, c);

257 i‡(
›t•
->
do_hñp
)

259 
	`ußge
();

260  
SG_LIB_SYNTAX_ERROR
;

263 i‡(
›töd
 < 
¨gc
) {

264 i‡(
NULL
 =
›t•
->
devi˚_«me
) {

265 
›t•
->
devi˚_«me
 = 
¨gv
[
›töd
];

266 ++
›töd
;

268 i‡(
›töd
 < 
¨gc
) {

269 ; 
›töd
 < 
¨gc
; ++optind)

270 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

271 
¨gv
[
›töd
]);

272 
	`ußge
();

273  
SG_LIB_SYNTAX_ERROR
;

277 
	}
}

280 
	$¥o˚ss_˛_ﬁd
(
›ts_t
 * 
›t•
, 
¨gc
, * 
¨gv
[])

282 
k
, 
jmp_out
, 
∂í
, 
n
, 
num
;

283 c⁄° * 
˝
;

285 
k
 = 1; k < 
¨gc
; ++k) {

286 
˝
 = 
¨gv
[
k
];

287 
∂í
 = 
	`°æí
(
˝
);

288 i‡(
∂í
 <= 0)

290 i‡('-' =*
˝
) {

291 --
∂í
, ++
˝
, 
jmp_out
 = 0;Ölen > 0; --plen, ++cp) {

292 *
˝
) {

294 ++
›t•
->
do_Æpha
;

297 ++
›t•
->
do_hex
;

300 ++
›t•
->
no_öquúy
;

303 
›t•
->
›t_√w
 = 1;

308 ++
›t•
->
do_ªpd
;

311 ++
›t•
->
do_r˘d
;

314 ++
›t•
->
do_èskm™
;

317 ++
›t•
->
do_uns‹ãd
;

320 ++
›t•
->
do_vîbo£
;

323 ++
›t•
->
do_vîsi⁄
;

327 ++
›t•
->
do_hñp
;

330 
jmp_out
 = 1;

333 i‡(
jmp_out
)

336 i‡(
∂í
 <= 0)

338 i‡(0 =
	`°∫cmp
("o=", 
˝
, 2)) {

339 
num
 = 
	`ssˇnf
(
˝
 + 2, "%x", (*)&
n
);

340 i‡((1 !
num
Ë|| (
n
 > 255)) {

341 
	`Ârötf
(
°dîr
, "BadÇumberáfter 'o=' option\n");

342 
	`ußge_ﬁd
();

343  
SG_LIB_SYNTAX_ERROR
;

345 
›t•
->
do_›code
 = 
n
;

346 } i‡(0 =
	`°∫cmp
("s=", 
˝
, 2)) {

347 
num
 = 
	`ssˇnf
(
˝
 + 2, "%x", (*)&
n
);

348 i‡(1 !
num
) {

349 
	`Ârötf
(
°dîr
, "BadÇumberáfter 's=' option\n");

350 
	`ußge_ﬁd
();

351  
SG_LIB_SYNTAX_ERROR
;

353 
›t•
->
do_£rva˘
 = 
n
;

354 } i‡(0 =
	`°∫cmp
("-ﬁd", 
˝
, 4))

356 i‡(
jmp_out
) {

357 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄: %s\n", 
˝
);

358 
	`ußge_ﬁd
();

359  
SG_LIB_SYNTAX_ERROR
;

361 } i‡(
NULL
 =
›t•
->
devi˚_«me
)

362 
›t•
->
devi˚_«me
 = 
˝
;

364 
	`Ârötf
(
°dîr
, "too manyárguments, got: %s,ÇotÉxpecting: "

365 "%s\n", 
›t•
->
devi˚_«me
, 
˝
);

366 
	`ußge_ﬁd
();

367  
SG_LIB_SYNTAX_ERROR
;

371 
	}
}

374 
	$¥o˚ss_˛
(
›ts_t
 * 
›t•
, 
¨gc
, * 
¨gv
[])

376 
ªs
;

377 * 
˝
;

379 
˝
 = 
	`gëív
("SG3_UTILS_OLD_OPTS");

380 i‡(
˝
) {

381 
›t•
->
›t_√w
 = 0;

382 
ªs
 = 
	`¥o˚ss_˛_ﬁd
(
›t•
, 
¨gc
, 
¨gv
);

383 i‡((0 =
ªs
Ë&& 
›t•
->
›t_√w
)

384 
ªs
 = 
	`¥o˚ss_˛_√w
(
›t•
, 
¨gc
, 
¨gv
);

386 
›t•
->
›t_√w
 = 1;

387 
ªs
 = 
	`¥o˚ss_˛_√w
(
›t•
, 
¨gc
, 
¨gv
);

388 i‡((0 =
ªs
Ë&& (0 =
›t•
->
›t_√w
))

389 
ªs
 = 
	`¥o˚ss_˛_ﬁd
(
›t•
, 
¨gc
, 
¨gv
);

391  
ªs
;

392 
	}
}

395 
	$dSåRaw
(c⁄° * 
°r
, 
Àn
)

397 
k
;

399 
k
 = 0 ; k < 
Àn
; ++k)

400 
	`¥ötf
("%c", 
°r
[
k
]);

401 
	}
}

405 
	$›code_num_com∑ª
(c⁄° * 
À·
, c⁄° * 
right
)

407 c⁄° * 
Œ
 = *(**)
À·
;

408 c⁄° * 
º
 = *(**)
right
;

409 
l_£rv_a˘
 = 0;

410 
r_£rv_a˘
 = 0;

411 
l_›c
, 
r_›c
;

413 i‡(
NULL
 =
Œ
)

415 i‡(
NULL
 =
º
)

417 
l_›c
 = 
Œ
[0];

418 i‡(
Œ
[5] & 1)

419 
l_£rv_a˘
 = ((
Œ
[2] << 8) |Ül[3]);

420 
r_›c
 = 
º
[0];

421 i‡(
º
[5] & 1)

422 
r_£rv_a˘
 = ((
º
[2] << 8) |Ñr[3]);

423 i‡(
l_›c
 < 
r_›c
)

425 i‡(
l_›c
 > 
r_›c
)

427 i‡(
l_£rv_a˘
 < 
r_£rv_a˘
)

429 i‡(
l_£rv_a˘
 > 
r_£rv_a˘
)

432 
	}
}

436 
	$›code_Æpha_com∑ª
(c⁄° * 
À·
, c⁄° * 
right
)

438 c⁄° * 
Œ
 = *(**)
À·
;

439 c⁄° * 
º
 = *(**)
right
;

440 
l_£rv_a˘
 = 0;

441 
r_£rv_a˘
 = 0;

442 
l_«me_buff
[
NAME_BUFF_SZ
];

443 
r_«me_buff
[
NAME_BUFF_SZ
];

444 
l_›c
, 
r_›c
;

446 i‡(
NULL
 =
Œ
)

448 i‡(
NULL
 =
º
)

450 
l_›c
 = 
Œ
[0];

451 i‡(
Œ
[5] & 1)

452 
l_£rv_a˘
 = ((
Œ
[2] << 8) |Ül[3]);

453 
l_«me_buff
[0] = '\0';

454 
	`sg_gë_›code_ß_«me
(
l_›c
, 
l_£rv_a˘
, 
≥ri_ty≥
,

455 
NAME_BUFF_SZ
, 
l_«me_buff
);

456 
r_›c
 = 
º
[0];

457 i‡(
º
[5] & 1)

458 
r_£rv_a˘
 = ((
º
[2] << 8) |Ñr[3]);

459 
r_«me_buff
[0] = '\0';

460 
	`sg_gë_›code_ß_«me
(
r_›c
, 
r_£rv_a˘
, 
≥ri_ty≥
,

461 
NAME_BUFF_SZ
, 
r_«me_buff
);

462  
	`°∫cmp
(
l_«me_buff
, 
r_«me_buff
, 
NAME_BUFF_SZ
);

463 
	}
}

466 
	$li°_Æl_codes
(* 
rsoc_buff
, 
rsoc_Àn
, 
uns‹ãd
,

467 
Æpha
, 
r˘d
)

469 
k
, 
j
, 
cd_Àn
, 
£rv_a˘
, 
Àn
;

470 
to
;

471 * 
u˝
;

472 
«me_buff
[
NAME_BUFF_SZ
];

473 
ß_buff
[8];

474 ** 
s‹t_¨r
 = 
NULL
;

476 
cd_Àn
 = ((
rsoc_buff
[0] << 24) | (rsoc_buff[1] << 16) |

477 (
rsoc_buff
[2] << 8) |Ñsoc_buff[3]);

478 i‡(
cd_Àn
 > (
rsoc_Àn
 - 4)) {

479 
	`¥ötf
("sg_opcodes: command dataÜength=%d,állocation=%d; "

480 "åunˇã\n", 
cd_Àn
, 
rsoc_Àn
 - 4);

481 
cd_Àn
 = ((
rsoc_Àn
 - 4) / 8) * 8;

483 i‡(0 =
cd_Àn
) {

484 
	`¥ötf
("sg_opcodes:Ço commandsÅo display\n");

487 i‡(
r˘d
) {

488 
	`¥ötf
("\nOpcode Service CDB Nominal Recommended Name\n");

489 
	`¥ötf
( "(hex)áction(h) sizeÅimeoutÅimeout(sec) \n");

490 
	`¥ötf
("-----------------------------------------------------------"

493 
	`¥ötf
("\nOpcode Service CDB Name\n");

494 
	`¥ötf
( "(hex)áction(h) size \n");

495 
	`¥ötf
("-----------------------------------------------\n");

498 i‡(! 
uns‹ãd
) {

499 
s‹t_¨r
 = (**)
	`mÆloc
(
cd_Àn
 * (*));

500 i‡(
NULL
 =
s‹t_¨r
) {

501 
	`¥ötf
("sg_opcodes:Ço memoryÅo sort operation codes, "

505 
	`mem£t
(
s‹t_¨r
, 0, 
cd_Àn
 * (*));

506 
u˝
 = 
rsoc_buff
 + 4;

507 
k
 = 0, 
j
 = 0; k < 
cd_Àn
; ++j, k +
Àn
, 
u˝
 +=Üen) {

508 
s‹t_¨r
[
j
] = 
u˝
;

509 
Àn
 = (
u˝
[5] & 0x2) ? 20 : 8;

511 
	`qs‹t
(
s‹t_¨r
, 
j
, (*),

512 (
Æpha
 ? 
›code_Æpha_com∑ª
 : 
›code_num_com∑ª
));

514 
k
 = 0, 
j
 = 0; k < 
cd_Àn
; ++j, k +
Àn
) {

515 
u˝
 = 
uns‹ãd
 ? (
rsoc_buff
 + 4 + 
k
Ë: 
s‹t_¨r
[
j
];

516 
Àn
 = (
u˝
[5] & 0x2) ? 20 : 8;

517 i‡(
u˝
[5] & 1) {

518 
£rv_a˘
 = ((
u˝
[2] << 8) | ucp[3]);

519 
	`sg_gë_›code_ß_«me
(
u˝
[0], 
£rv_a˘
, 
≥ri_ty≥
,

520 
NAME_BUFF_SZ
, 
«me_buff
);

521 
	`¢¥ötf
(
ß_buff
, (ß_buff), "%4x", 
£rv_a˘
);

523 
	`sg_gë_›code_«me
(
u˝
[0], 
≥ri_ty≥
,

524 
NAME_BUFF_SZ
, 
«me_buff
);

525 
	`mem£t
(
ß_buff
, ' ', (sa_buff));

527 i‡(
r˘d
) {

528 i‡(
u˝
[5] & 0x2) {

529 
	`¥ötf
(" %.2x %.4† %3d", 
u˝
[0], 
ß_buff
,

530 ((
u˝
[6] << 8) | ucp[7]));

531 
to
 = (()
u˝
[12] << 24) + (ucp[13] << 16) +

532 (
u˝
[14] << 8) + ucp[15];

533 i‡(0 =
to
)

534 
	`¥ötf
(" -");

536 
	`¥ötf
(" %8u", 
to
);

537 
to
 = (()
u˝
[16] << 24) + (ucp[17] << 16) +

538 (
u˝
[18] << 8) + ucp[19];

539 i‡(0 =
to
)

540 
	`¥ötf
(" -");

542 
	`¥ötf
(" %8u", 
to
);

543 
	`¥ötf
(" %s\n", 
«me_buff
);

545 
	`¥ötf
(" %.2x %.4s %3d "

546 "%s\n", 
u˝
[0], 
ß_buff
, ((ucp[6] << 8) | ucp[7]),

547 
«me_buff
);

549 
	`¥ötf
(" %.2x %.4s %3d %s\n",

550 
u˝
[0], 
ß_buff
, ((u˝[6] << 8Ë| u˝[7]), 
«me_buff
);

552 
	}
}

555 
	$decode_cmd_to_des¸ùt‹
(* 
dp
, 
max_b_Àn
, * 
b
)

557 
Àn
;

558 
to
;

560 i‡((
max_b_Àn
 < 2Ë|| (
NULL
 =
dp
))

562 
b
[
max_b_Àn
 - 1] = '\0';

563 --
max_b_Àn
;

564 
Àn
 = (
dp
[0] << 8) + dp[1];

565 i‡(10 !
Àn
) {

566 
	`¢¥ötf
(
b
, 
max_b_Àn
, "commandÅimeout descriptorÜength %d "

567 "”x≥˘ 10)", 
Àn
);

570 
to
 = (()
dp
[4] << 24) + (dp[5] << 16) + (dp[6] << 8) + dp[7];

571 i‡(0 =
to
)

572 
	`¢¥ötf
(
b
, 
max_b_Àn
, "noÇominalÅimeout, ");

574 
	`¢¥ötf
(
b
, 
max_b_Àn
, "nomöÆÅimeout: %u secs, ", 
to
);

575 
Àn
 = 
	`°æí
(
b
);

576 
max_b_Àn
 -
Àn
;

577 
b
 +
Àn
;

578 
to
 = (()
dp
[8] << 24) + (dp[9] << 16) + (dp[10] << 8) + dp[11];

579 i‡(0 =
to
)

580 
	`¢¥ötf
(
b
, 
max_b_Àn
, "noÑecommendedÅimeout");

582 
	`¢¥ötf
(
b
, 
max_b_Àn
, "ªcommídedÅimeout: %u secs", 
to
);

584 
	}
}

587 
	$li°_⁄e
(* 
rsoc_buff
, 
cd_Àn
, 
ªp_›ts
, 
do_›code
,

588 
do_£rva˘
)

590 
k
;

591 
«me_buff
[
NAME_BUFF_SZ
];

592 * 
u˝
;

593 c⁄° * 
˝
;

594 
v
 = 0;

597 
	`¥ötf
("\¿ Opcode=0x%.2x", 
do_›code
);

598 i‡(
ªp_›ts
 > 1)

599 
	`¥ötf
(" Sîvi˚_a˘i⁄=0x%.4x", 
do_£rva˘
);

600 
	`¥ötf
("\n");

601 
	`sg_gë_›code_ß_«me
(((
do_›code
 > 0) ? do_opcode : 0),

602 ((
do_£rva˘
 > 0) ? do_servact : 0),

603 
≥ri_ty≥
, 
NAME_BUFF_SZ
, 
«me_buff
);

604 
	`¥ötf
(" Comm™d_«me: %s\n", 
«me_buff
);

605 ()(
rsoc_buff
[1] & 7)) {

607 
˝
 = "not currentlyávailable";

610 
˝
 = "NOT supported";

613 
˝
 = "supported [conformingÅo SCSI standard]";

614 
v
 = 1;

617 
˝
 = "supported [iná vendor specific manner]";

618 
v
 = 1;

621 
	`¢¥ötf
(
«me_buff
, 
NAME_BUFF_SZ
, "supportÑeserved [0x%x]",

622 
rsoc_buff
[1] & 7);

623 
˝
 = 
«me_buff
;

626 
	`¥ötf
(" Comm™d %s\n", 
˝
);

627 i‡(
v
) {

628 
	`¥ötf
(" Usage data: ");

629 
u˝
 = 
rsoc_buff
 + 4;

630 
k
 = 0; k < 
cd_Àn
; ++k)

631 
	`¥ötf
("%.2x ", 
u˝
[
k
]);

632 
	`¥ötf
("\n");

634 i‡(0x80 & 
rsoc_buff
[1]) {

635 
u˝
 = 
rsoc_buff
 + 4 + 
cd_Àn
;

636 
	`decode_cmd_to_des¸ùt‹
(
u˝
, 
NAME_BUFF_SZ
, 
«me_buff
);

637 
	`¥ötf
(" %s\n", 
«me_buff
);

639 
	}
}

643 
	$maö
(
¨gc
, * 
¨gv
[])

645 
sg_fd
, 
cd_Àn
, 
ªs
, 
Àn
;

646 
rsoc_buff
[
MX_ALLOC_LEN
];

647 
ªp_›ts
 = 0;

648 c⁄° * 
˝
;

649 
buff
[48];

650 
sg_sim∂e_öquúy_ª•
 
öq_ª•
;

651 c⁄° * 
›_«me
;

652 
›ts_t
 
›ts
;

654 
	`mem£t
(&
›ts
, 0, (opts));

655 
›ts
.
do_›code
 = -1;

656 
›ts
.
do_£rva˘
 = -1;

657 
ªs
 = 
	`¥o˚ss_˛
(&
›ts
, 
¨gc
, 
¨gv
);

658 i‡(
ªs
)

659  
SG_LIB_SYNTAX_ERROR
;

660 i‡(
›ts
.
do_hñp
) {

661 i‡(
›ts
.
›t_√w
)

662 
	`ußge
();

664 
	`ußge_ﬁd
();

667 i‡(
›ts
.
do_vîsi⁄
) {

668 
	`Ârötf
(
°dîr
, "Vîsi⁄ såög: %s\n", 
vîsi⁄_°r
);

672 i‡(
NULL
 =
›ts
.
devi˚_«me
) {

673 
	`Ârötf
(
°dîr
, "No DEVICEárgument given\n");

674 i‡(
›ts
.
›t_√w
)

675 
	`ußge
();

677 
	`ußge_ﬁd
();

678  
SG_LIB_SYNTAX_ERROR
;

680 i‡((-1 !
›ts
.
do_£rva˘
Ë&& (-1 =›ts.
do_›code
)) {

681 
	`Ârötf
(
°dîr
, "When '-s' is chosen, so must '-o' be chosen\n");

682 i‡(
›ts
.
›t_√w
)

683 
	`ußge
();

685 
	`ußge_ﬁd
();

686  
SG_LIB_SYNTAX_ERROR
;

688 i‡(
›ts
.
do_uns‹ãd
 && o±s.
do_Æpha
)

689 
	`Ârötf
(
°dîr
, "warning: unsorted ('-u')ándálpha ('-a') options "

691 i‡(
›ts
.
do_èskm™
 && ((-1 !›ts.
do_›code
Ë|| o±s.
do_Æpha
 ||

692 
›ts
.
do_uns‹ãd
)) {

693 
	`Ârötf
(
°dîr
, "warning:Åask management functions ('-t') chosen "

697 
›_«me
 = 
›ts
.
do_èskm™
 ? "Report supportedÅask management functions" :

700 i‡(
›ts
.
do_›code
 < 0) {

701 i‡((
sg_fd
 = 
	`scsi_±_›í_devi˚
(
›ts
.
devi˚_«me
, 1 ,

702 
›ts
.
do_vîbo£
)) < 0) {

703 
	`Ârötf
(
°dîr
, "sg_opcodes:Érror opening file (ro): %s: %s\n",

704 
›ts
.
devi˚_«me
, 
	`ß„_°ªº‹
(-
sg_fd
));

705  
SG_LIB_FILE_ERROR
;

707 i‡(0 =
	`sg_sim∂e_öquúy
(
sg_fd
, &
öq_ª•
, 1, 
›ts
.
do_vîbo£
)) {

708 
≥ri_ty≥
 = 
öq_ª•
.
≥rùhîÆ_ty≥
;

709 i‡(! (
›ts
.
do_øw
 || o±s.
no_öquúy
)) {

710 
	`¥ötf
(" %.8† %.16† %.4s\n", 
öq_ª•
.
víd‹
,

711 
öq_ª•
.
¥odu˘
, inq_ª•.
ªvisi⁄
);

712 
˝
 = 
	`sg_gë_pdt_°r
(
≥ri_ty≥
, (
buff
), buff);

713 i‡(
	`°æí
(
˝
) > 0)

714 
	`¥ötf
(" PîùhîÆ devi˚Åy≥: %s\n", 
˝
);

716 
	`¥ötf
(" PîùhîÆ devi˚Åy≥: 0x%x\n", 
≥ri_ty≥
);

719 
	`Ârötf
(
°dîr
, "sg_opcodes: %s doesn'tÑespondÅoá SCSI "

720 "INQUIRY\n", 
›ts
.
devi˚_«me
);

721  
SG_LIB_CAT_OTHER
;

723 
ªs
 = 
	`scsi_±_˛o£_devi˚
(
sg_fd
);

724 i‡(
ªs
 < 0) {

725 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

726  
SG_LIB_FILE_ERROR
;

730 i‡((
sg_fd
 = 
	`scsi_±_›í_devi˚
(
›ts
.
devi˚_«me
, 0 ,

731 
›ts
.
do_vîbo£
)) < 0) {

732 
	`Ârötf
(
°dîr
, "sg_opcodes:Érror opening file (rw): %s: %s\n",

733 
›ts
.
devi˚_«me
, 
	`ß„_°ªº‹
(-
sg_fd
));

734  
SG_LIB_FILE_ERROR
;

736 i‡(
›ts
.
do_›code
 >= 0)

737 
ªp_›ts
 = ((
›ts
.
do_£rva˘
 >= 0) ? 2 : 1);

738 
	`mem£t
(
rsoc_buff
, 0, (rsoc_buff));

739 i‡(
›ts
.
do_èskm™
)

740 
ªs
 = 
	`do_r°mf
(
sg_fd
, 
›ts
.
do_ªpd
, 
rsoc_buff
,

741 (
›ts
.
do_ªpd
 ? 16 : 4), 1, o±s.
do_vîbo£
);

743 
ªs
 = 
	`do_rsoc
(
sg_fd
, 
›ts
.
do_r˘d
, 
ªp_›ts
, o±s.
do_›code
,

744 
›ts
.
do_£rva˘
, 
rsoc_buff
, (rsoc_buff), 1,

745 
›ts
.
do_vîbo£
);

746 
ªs
) {

748 
SG_LIB_CAT_RECOVERED
:

750 
SG_LIB_CAT_ABORTED_COMMAND
:

751 
	`Ârötf
(
°dîr
, "%s:áb‹ãd comm™d\n", 
›_«me
);

752 
îr_out
;

753 
SG_LIB_CAT_NOT_READY
:

754 
	`Ârötf
(
°dîr
, "%s: devi˚ÇŸÑódy\n", 
›_«me
);

755 
îr_out
;

756 
SG_LIB_CAT_UNIT_ATTENTION
:

757 
	`Ârötf
(
°dîr
, "%s: unôáâíti⁄\n", 
›_«me
);

758 
îr_out
;

759 
SG_LIB_CAT_INVALID_OP
:

760 
	`Ârötf
(
°dîr
, "%s: o≥øti⁄ÇŸ suµ‹ãd\n", 
›_«me
);

761 
îr_out
;

762 
SG_LIB_CAT_ILLEGAL_REQ
:

763 
	`Ârötf
(
°dîr
, "bad field in cdb (including %sÇot supported)\n",

764 
›_«me
);

765 
îr_out
;

767 
	`Ârötf
(
°dîr
, "%†Áûed\n", 
›_«me
);

768 
îr_out
;

770 i‡(
›ts
.
do_èskm™
) {

771 i‡(
›ts
.
do_øw
) {

772 
	`dSåRaw
((c⁄° *)
rsoc_buff
, (
›ts
.
do_ªpd
 ? 16 : 4));

773 
îr_out
;

775 
	`¥ötf
("\nTask Management Functions supported by device:\n");

776 i‡(
›ts
.
do_hex
) {

777 
	`dSåHex
((c⁄° *)
rsoc_buff
, (
›ts
.
do_ªpd
 ? 16 : 4), 1);

778 
îr_out
;

780 i‡(
rsoc_buff
[0] & 0x80)

781 
	`¥ötf
(" AbortÅask\n");

782 i‡(
rsoc_buff
[0] & 0x40)

783 
	`¥ötf
(" AbortÅask set\n");

784 i‡(
rsoc_buff
[0] & 0x20)

785 
	`¥ötf
(" Clear ACA\n");

786 i‡(
rsoc_buff
[0] & 0x10)

787 
	`¥ötf
(" ClearÅask set\n");

788 i‡(
rsoc_buff
[0] & 0x8)

789 
	`¥ötf
(" Logical unitÑeset\n");

790 i‡(
rsoc_buff
[0] & 0x4)

791 
	`¥ötf
(" QueryÅask\n");

792 i‡(
rsoc_buff
[0] & 0x2)

793 
	`¥ötf
(" TargetÑeset\n");

794 i‡(
rsoc_buff
[0] & 0x1)

795 
	`¥ötf
(" Wakeup\n");

796 i‡(
rsoc_buff
[1] & 0x4)

797 
	`¥ötf
(" QueryásynchronousÉvent\n");

798 i‡(
rsoc_buff
[1] & 0x2)

799 
	`¥ötf
(" QueryÅask set\n");

800 i‡(
rsoc_buff
[1] & 0x1)

801 
	`¥ötf
(" I_TÇexusÑeset\n");

802 i‡(
›ts
.
do_ªpd
) {

803 i‡(
rsoc_buff
[3] < 0xc) {

804 
	`Ârötf
(
°dîr
, "when REPD given, byte 3 ofÑesponse "

806 
ªs
 = 
SG_LIB_CAT_OTHER
;

807 
îr_out
;

809 
	`¥ötf
(" ExtendedÖarameter data:\n");

810 
	`¥ötf
(" TMFTMOV=%d\n", !!(
rsoc_buff
[4] & 0x1));

811 
	`¥ötf
(" ATTS=%d\n", !!(
rsoc_buff
[6] & 0x80));

812 
	`¥ötf
(" ATSTS=%d\n", !!(
rsoc_buff
[6] & 0x40));

813 
	`¥ötf
(" CACATS=%d\n", !!(
rsoc_buff
[6] & 0x20));

814 
	`¥ötf
(" CTSTS=%d\n", !!(
rsoc_buff
[6] & 0x10));

815 
	`¥ötf
(" LURTS=%d\n", !!(
rsoc_buff
[6] & 0x8));

816 
	`¥ötf
(" QTTS=%d\n", !!(
rsoc_buff
[6] & 0x4));

817 
	`¥ötf
(" QAETS=%d\n", !!(
rsoc_buff
[7] & 0x4));

818 
	`¥ötf
(" QTSTS=%d\n", !!(
rsoc_buff
[7] & 0x2));

819 
	`¥ötf
(" ITNRTS=%d\n", !!(
rsoc_buff
[7] & 0x1));

820 
	`¥ötf
("ÅmfÜongÅimeout: %d (100 ms units)\n",

821 (
rsoc_buff
[8] << 24) + (rsoc_buff[9] << 16) +

822 (
rsoc_buff
[10] << 8) +Ñsoc_buff[11]);

823 
	`¥ötf
("Åmf shortÅimeout: %d (100 ms units)\n",

824 (
rsoc_buff
[12] << 24) + (rsoc_buff[13] << 16) +

825 (
rsoc_buff
[14] << 8) +Ñsoc_buff[15]);

827 } i‡(0 =
ªp_›ts
) {

828 
Àn
 = ((
rsoc_buff
[0] << 24) | (rsoc_buff[1] << 16) |

829 (
rsoc_buff
[2] << 8) |Ñsoc_buff[3]) + 4;

830 i‡(
Àn
 > ()(
rsoc_buff
))

831 
Àn
 = (
rsoc_buff
);

832 i‡(
›ts
.
do_øw
) {

833 
	`dSåRaw
((c⁄° *)
rsoc_buff
, 
Àn
);

834 
îr_out
;

836 i‡(
›ts
.
do_hex
) {

837 
	`dSåHex
((c⁄° *)
rsoc_buff
, 
Àn
, 1);

838 
îr_out
;

840 
	`li°_Æl_codes
(
rsoc_buff
, ‘soc_buff), 
›ts
.
do_uns‹ãd
,

841 
›ts
.
do_Æpha
, o±s.
do_r˘d
);

843 
cd_Àn
 = ((
rsoc_buff
[2] << 8) |Ñsoc_buff[3]);

844 
Àn
 = 
cd_Àn
 + 4;

845 i‡(
Àn
 > ()(
rsoc_buff
))

846 
Àn
 = (
rsoc_buff
);

847 i‡(
›ts
.
do_øw
) {

848 
	`dSåRaw
((c⁄° *)
rsoc_buff
, 
Àn
);

849 
îr_out
;

851 i‡(
›ts
.
do_hex
) {

852 
	`dSåHex
((c⁄° *)
rsoc_buff
, 
Àn
, 1);

853 
îr_out
;

855 
	`li°_⁄e
(
rsoc_buff
, 
cd_Àn
, 
ªp_›ts
, 
›ts
.
do_›code
,

856 
›ts
.
do_£rva˘
);

858 
ªs
 = 0;

860 
îr_out
:

861 
	`scsi_±_˛o£_devi˚
(
sg_fd
);

862  
ªs
;

863 
	}
}

866 
	$do_rsoc
(
sg_fd
, 
r˘d
, 
ªp_›ts
, 
rq_›code
, 
rq_£rva˘
,

867 * 
ª•
, 
mx_ª•_Àn
, 
noisy
, 
vîbo£
)

869 
k
, 
ªt
, 
ªs
, 
£n£_ˇt
;

870 
rsocCmdBlk
[
RSOC_CMD_LEN
] = {
SG_MAINTENANCE_IN
, 
RSOC_SA
, 0,

872 
£n£_b
[
SENSE_BUFF_LEN
];

873 
sg_±_ba£
 * 
±vp
;

875 i‡(
r˘d
)

876 
rsocCmdBlk
[2] |= 0x80;

877 i‡(
ªp_›ts
)

878 
rsocCmdBlk
[2] |(
ªp_›ts
 & 0x7);

879 i‡(
rq_›code
 > 0)

880 
rsocCmdBlk
[3] = (
rq_›code
 & 0xff);

881 i‡(
rq_£rva˘
 > 0) {

882 
rsocCmdBlk
[4] = ()((
rq_£rva˘
 >> 8) & 0xff);

883 
rsocCmdBlk
[5] = ()(
rq_£rva˘
 & 0xff);

886 
rsocCmdBlk
[6] = ()((
mx_ª•_Àn
 >> 24) & 0xff);

887 
rsocCmdBlk
[7] = ()((
mx_ª•_Àn
 >> 16) & 0xff);

888 
rsocCmdBlk
[8] = ()((
mx_ª•_Àn
 >> 8) & 0xff);

889 
rsocCmdBlk
[9] = ()(
mx_ª•_Àn
 & 0xff);

891 i‡(
vîbo£
) {

892 
	`Ârötf
(
°dîr
, " Report Supported Operation Codes cmd: ");

893 
k
 = 0; k < 
RSOC_CMD_LEN
; ++k)

894 
	`Ârötf
(
°dîr
, "%02x ", 
rsocCmdBlk
[
k
]);

895 
	`Ârötf
(
°dîr
, "\n");

897 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

898 i‡(
NULL
 =
±vp
) {

899 
	`Ârötf
(
sg_w¨nögs_°rm
, "Report Supported Operation Codes: out "

903 
	`£t_scsi_±_cdb
(
±vp
, 
rsocCmdBlk
, (rsocCmdBlk));

904 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

905 
	`£t_scsi_±_d©a_ö
(
±vp
, (*)
ª•
, 
mx_ª•_Àn
);

906 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_TIMEOUT_SECS
, 
vîbo£
);

907 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "Rï‹àSuµ‹ãd O≥øti⁄ Codes", 
ªs
,

908 
mx_ª•_Àn
, 
£n£_b
, 
noisy
, 
vîbo£
,

909 &
£n£_ˇt
);

910 i‡(-1 =
ªt
)

912 i‡(-2 =
ªt
) {

913 
£n£_ˇt
) {

914 
SG_LIB_CAT_NOT_READY
:

915 
SG_LIB_CAT_UNIT_ATTENTION
:

916 
SG_LIB_CAT_INVALID_OP
:

917 
SG_LIB_CAT_ILLEGAL_REQ
:

918 
SG_LIB_CAT_ABORTED_COMMAND
:

919 
ªt
 = 
£n£_ˇt
;

921 
SG_LIB_CAT_RECOVERED
:

922 
SG_LIB_CAT_NO_SENSE
:

923 
ªt
 = 0;

926 
ªt
 = -1;

930 
ªt
 = 0;

932 
	`de°ru˘_scsi_±_obj
(
±vp
);

933  
ªt
;

934 
	}
}

937 
	$do_r°mf
(
sg_fd
, 
ªpd
, * 
ª•
, 
mx_ª•_Àn
, 
noisy
,

938 
vîbo£
)

940 
k
, 
ªt
, 
ªs
, 
£n£_ˇt
;

941 
r°mfCmdBlk
[
RSTMF_CMD_LEN
] = {
SG_MAINTENANCE_IN
, 
RSTMF_SA
,

943 
£n£_b
[
SENSE_BUFF_LEN
];

944 
sg_±_ba£
 * 
±vp
;

946 i‡(
ªpd
)

947 
r°mfCmdBlk
[2] = 0x80;

948 
r°mfCmdBlk
[6] = ()((
mx_ª•_Àn
 >> 24) & 0xff);

949 
r°mfCmdBlk
[7] = ()((
mx_ª•_Àn
 >> 16) & 0xff);

950 
r°mfCmdBlk
[8] = ()((
mx_ª•_Àn
 >> 8) & 0xff);

951 
r°mfCmdBlk
[9] = ()(
mx_ª•_Àn
 & 0xff);

953 i‡(
vîbo£
) {

954 
	`Ârötf
(
°dîr
, " Report Supported Task Management Functions "

956 
k
 = 0; k < 
RSTMF_CMD_LEN
; ++k)

957 
	`Ârötf
(
°dîr
, "%02x ", 
r°mfCmdBlk
[
k
]);

958 
	`Ârötf
(
°dîr
, "\n");

960 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

961 i‡(
NULL
 =
±vp
) {

962 
	`Ârötf
(
sg_w¨nögs_°rm
, "Report Supported Task Management "

966 
	`£t_scsi_±_cdb
(
±vp
, 
r°mfCmdBlk
, (rstmfCmdBlk));

967 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

968 
	`£t_scsi_±_d©a_ö
(
±vp
, (*)
ª•
, 
mx_ª•_Àn
);

969 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_TIMEOUT_SECS
, 
vîbo£
);

970 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "Report Supported Task management "

971 "fun˘i⁄s", 
ªs
, 
mx_ª•_Àn
, 
£n£_b
, 
noisy
,

972 
vîbo£
, &
£n£_ˇt
);

973 i‡(-1 =
ªt
)

975 i‡(-2 =
ªt
) {

976 
£n£_ˇt
) {

977 
SG_LIB_CAT_NOT_READY
:

978 
SG_LIB_CAT_UNIT_ATTENTION
:

979 
SG_LIB_CAT_INVALID_OP
:

980 
SG_LIB_CAT_ILLEGAL_REQ
:

981 
SG_LIB_CAT_ABORTED_COMMAND
:

982 
ªt
 = 
£n£_ˇt
;

984 
SG_LIB_CAT_RECOVERED
:

985 
SG_LIB_CAT_NO_SENSE
:

986 
ªt
 = 0;

989 
ªt
 = -1;

993 
ªt
 = 0;

995 
	`de°ru˘_scsi_±_obj
(
±vp
);

996  
ªt
;

997 
	}
}

	@src/sg_persist.c

11 
	~<uni°d.h
>

12 
	~<f˙é.h
>

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

16 
	~<˘y≥.h
>

17 
	~<gë›t.h
>

18 
	#__STDC_FORMAT_MACROS
 1

	)

20 
	~<öây≥s.h
>

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

25 
	~"sg_lib.h
"

26 
	~"sg_cmds_basic.h
"

27 
	~"sg_cmds_exåa.h
"

29 c⁄° * 
	gvîsi⁄_°r
 = "0.38 20130507";

32 
	#PRIN_RKEY_SA
 0x0

	)

33 
	#PRIN_RRES_SA
 0x1

	)

34 
	#PRIN_RCAP_SA
 0x2

	)

35 
	#PRIN_RFSTAT_SA
 0x3

	)

36 
	#PROUT_REG_SA
 0x0

	)

37 
	#PROUT_RES_SA
 0x1

	)

38 
	#PROUT_REL_SA
 0x2

	)

39 
	#PROUT_CLEAR_SA
 0x3

	)

40 
	#PROUT_PREE_SA
 0x4

	)

41 
	#PROUT_PREE_AB_SA
 0x5

	)

42 
	#PROUT_REG_IGN_SA
 0x6

	)

43 
	#PROUT_REG_MOVE_SA
 0x7

	)

44 
	#MX_ALLOC_LEN
 8192

	)

45 
	#MX_TIDS
 32

	)

46 
	#MX_TID_LEN
 256

	)

48 
	s›ts_t
 {

49 
	m¥out_ty≥
;

50 
uöt64_t
 
	m∑øm_rk
;

51 
uöt64_t
 
	m∑øm_ßrk
;

52 
	m∑øm_πp
;

53 
	m¥ö
;

54 
	m¥ö_ß
;

55 
	m¥out_ß
;

56 
	m∑øm_Æ…g±
;

57 
	m∑øm_≠çl
;

58 
	m∑øm_uƒeg
;

59 
	möquúy
;

60 
	mhex
;

61 
	må™•‹tid_¨r
[
MX_TIDS
 * 
MX_TID_LEN
];

62 
	mnum_å™•‹tids
;

63 
	mÆloc_Àn
;

64 
	mvîbo£
;

68 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

103 c⁄° * 
	g¥ö_ß_°rs
[] = {

113 c⁄° 
	gnum_¥ö_ß_°rs
 = (
¥ö_ß_°rs
) /

114 (
¥ö_ß_°rs
[0]);

116 c⁄° * 
	g¥out_ß_°rs
[] = {

127 c⁄° 
	gnum_¥out_ß_°rs
 = (
¥out_ß_°rs
) /

128 (
¥out_ß_°rs
[0]);

130 c⁄° * 
	g¥_ty≥_°rs
[] = {

146 
	$ußge
()

148 
	`Ârötf
(
°dîr
,

176 
	`Ârötf
(
°dîr
,

198 
	}
}

205 
	$decode_å™•‹t_id
(c⁄° * 
Àadö
, * 
u˝
, 
Àn
,

206 
num_tids
)

208 
f‹m©_code
, 
¥Ÿo_id
, 
num
, 
j
, 
k
;

209 
uöt64_t
 
uŒ
;

210 
bump
;

212 i‡(
num_tids
 > 0)

213 
Àn
 = 
num_tids
 * 
MX_TID_LEN
;

214 
k
 = 0, 
bump
 = 
MX_TID_LEN
; k < 
Àn
; k +bump, 
u˝
 += bump) {

215 i‡((
Àn
 < 24) || (0 != (len % 4)))

216 
	`¥ötf
("%sTransport Id short orÇot multiple of 4 "

217 "[Àngth=%d]:\n", 
Àadö
, 
Àn
);

219 
	`¥ötf
("%sTøn•‹àId o‡öôüt‹:\n", 
Àadö
);

220 
f‹m©_code
 = ((
u˝
[0] >> 6) & 0x3);

221 
¥Ÿo_id
 = (
u˝
[0] & 0xf);

222 
¥Ÿo_id
) {

223 
TPROTO_FCP
:

224 
	`¥ötf
("%† FCP-2 W‹ld WidêName:\n", 
Àadö
);

225 i‡(0 !
f‹m©_code
)

226 
	`¥ötf
("%† [U√x≥˘ed f‹m© code: %d]\n", 
Àadö
,

227 
f‹m©_code
);

228 
	`dSåHex
((c⁄° *)&
u˝
[8], 8, -1);

230 
TPROTO_SPI
:

231 
	`¥ötf
("%s Parallel SCSI initiator SCSIáddress: 0x%x\n",

232 
Àadö
, ((
u˝
[2] << 8) | ucp[3]));

233 i‡(0 !
f‹m©_code
)

234 
	`¥ötf
("%† [U√x≥˘ed f‹m© code: %d]\n", 
Àadö
,

235 
f‹m©_code
);

236 
	`¥ötf
("%sÑelativeÖortÇumber (of correspondingÅarget): "

237 "0x%x\n", 
Àadö
, ((
u˝
[6] << 8) | ucp[7]));

239 
TPROTO_SSA
:

240 
	`¥ötf
("%† SSA (å™•‹àidÇŸ deföed):\n", 
Àadö
);

241 
	`¥ötf
("%† f‹m© code: %d\n", 
Àadö
, 
f‹m©_code
);

242 
	`dSåHex
((c⁄° *)
u˝
, ((
Àn
 > 24) ? 24 :Üen), -1);

244 
TPROTO_1394
:

245 
	`¥ötf
("%† IEEE 1394 EUI-64Çame:\n", 
Àadö
);

246 i‡(0 !
f‹m©_code
)

247 
	`¥ötf
("%† [U√x≥˘ed f‹m© code: %d]\n", 
Àadö
,

248 
f‹m©_code
);

249 
	`dSåHex
((c⁄° *)&
u˝
[8], 8, -1);

251 
TPROTO_SRP
:

252 
	`¥ötf
("%† RDMA inôüt‹Ö‹àidítifõr:\n", 
Àadö
);

253 i‡(0 !
f‹m©_code
)

254 
	`¥ötf
("%† [U√x≥˘ed f‹m© code: %d]\n", 
Àadö
,

255 
f‹m©_code
);

256 
	`dSåHex
((c⁄° *)&
u˝
[8], 16, -1);

258 
TPROTO_ISCSI
:

259 
	`¥ötf
("%† iSCSI ", 
Àadö
);

260 
num
 = ((
u˝
[2] << 8) | ucp[3]);

261 i‡(0 =
f‹m©_code
)

262 
	`¥ötf
("«me: %.*s\n", 
num
, &
u˝
[4]);

263 i‡(1 =
f‹m©_code
)

264 
	`¥ötf
("«mê™d sessi⁄ id: %.*s\n", 
num
, &
u˝
[4]);

266 
	`¥ötf
(" [U√x≥˘ed f‹m© code: %d]\n", 
f‹m©_code
);

267 
	`dSåHex
((c⁄° *)
u˝
, 
num
 + 4, -1);

270 
TPROTO_SAS
:

271 
uŒ
 = 0;

272 
j
 = 0; j < 8; ++j) {

273 i‡(
j
 > 0)

274 
uŒ
 <<= 8;

275 
uŒ
 |
u˝
[4 + 
j
];

277 
	`¥ötf
("%† SASáddªss: 0x%016" 
PRIx64
 "\n", 
Àadö
, 
uŒ
);

278 i‡(0 !
f‹m©_code
)

279 
	`¥ötf
("%† [U√x≥˘ed f‹m© code: %d]\n", 
Àadö
,

280 
f‹m©_code
);

282 
TPROTO_ADT
:

283 
	`¥ötf
("%† ADT:\n", 
Àadö
);

284 
	`¥ötf
("%† f‹m© code: %d\n", 
Àadö
, 
f‹m©_code
);

285 
	`dSåHex
((c⁄° *)
u˝
, ((
Àn
 > 24) ? 24 :Üen), -1);

287 
TPROTO_ATA
:

288 
	`¥ötf
("%† ATAPI:\n", 
Àadö
);

289 
	`¥ötf
("%† f‹m© code: %d\n", 
Àadö
, 
f‹m©_code
);

290 
	`dSåHex
((c⁄° *)
u˝
, ((
Àn
 > 24) ? 24 :Üen), -1);

292 
TPROTO_UAS
:

293 
	`¥ötf
("%† UAS:\n", 
Àadö
);

294 
	`¥ötf
("%† f‹m© code: %d\n", 
Àadö
, 
f‹m©_code
);

295 
	`dSåHex
((c⁄° *)
u˝
, ((
Àn
 > 24) ? 24 :Üen), -1);

297 
TPROTO_SOP
:

298 
	`¥ötf
("%† SOP ", 
Àadö
);

299 
num
 = ((
u˝
[2] << 8) | ucp[3]);

300 i‡(0 =
f‹m©_code
)

301 
	`¥ötf
("Routög ID: 0x%x\n", 
num
);

303 
	`¥ötf
(" [U√x≥˘ed f‹m© code: %d]\n", 
f‹m©_code
);

304 
	`dSåHex
((c⁄° *)
u˝
, ((
Àn
 > 24) ? 24 :Üen), -1);

307 
TPROTO_NONE
:

308 
	`Ârötf
(
°dîr
, "%† Nÿ•ecifõdÖrŸocﬁ\n", 
Àadö
);

312 
	`Ârötf
(
°dîr
, "%s unknownÖrotocol id=0x%x "

313 "f‹m©_code=%d\n", 
Àadö
, 
¥Ÿo_id
, 
f‹m©_code
);

314 
	`dSåHex
((c⁄° *)
u˝
, ((
Àn
 > 24) ? 24 :Üen), -1);

318 
	}
}

321 
	$¥ö_w‹k
(
sg_fd
, c⁄° 
›ts_t
 * 
›t•
)

323 
k
, 
j
, 
num
, 
ªs
, 
add_Àn
, 
add_desc_Àn
, 
ªl_±_addr
;

324 
¥_gí
;

325 
uöt64_t
 
uŒ
;

326 * 
u˝
;

327 
¥_buff
[
MX_ALLOC_LEN
];

329 
	`mem£t
(
¥_buff
, 0, (pr_buff));

330 
ªs
 = 
	`sg_Œ_≥rsi°ít_ª£rve_ö
(
sg_fd
, 
›t•
->
¥ö_ß
, 
¥_buff
,

331 
›t•
->
Æloc_Àn
, 1, o±•->
vîbo£
);

332 i‡(
ªs
) {

333 i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

334 
	`Ârötf
(
°dîr
, "PR in: commandÇot supported\n");

335 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

336 
	`Ârötf
(
°dîr
, "PR in: bad field in cdb including "

338 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
)

339 
	`Ârötf
(
°dîr
, "PR in: unitáttention\n");

340 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

341 
	`Ârötf
(
°dîr
, "PR in:áborted command\n");

343 
	`Ârötf
(
°dîr
, "PR in: command failed\n");

344  
ªs
;

346 i‡(
PRIN_RCAP_SA
 =
›t•
->
¥ö_ß
) {

347 i‡(8 !
¥_buff
[1]) {

348 
	`Ârötf
(
°dîr
, "UnexpectedÑesponse for PRIN Report "

350  
SG_LIB_CAT_MALFORMED
;

352 i‡(
›t•
->
hex
)

353 
	`dSåHex
((c⁄° *)
¥_buff
, 8, 1);

355 
	`¥ötf
("Report capabilitiesÑesponse:\n");

356 
	`¥ötf
(" Compatible Reservation Handling(CRH): %d\n",

357 !!(
¥_buff
[2] & 0x10));

358 
	`¥ötf
(" Specify Initiator Ports Capable(SIP_C): %d\n",

359 !!(
¥_buff
[2] & 0x8));

360 
	`¥ötf
(" All Target Ports Capable(ATP_C): %d\n",

361 !!(
¥_buff
[2] & 0x4));

362 
	`¥ötf
(" Persist Through Power Loss Capable(PTPL_C): %d\n",

363 !!(
¥_buff
[2] & 0x1));

364 
	`¥ötf
(" Ty≥ Mask VÆid(TMV): %d\n", !!(
¥_buff
[3] & 0x80));

365 
	`¥ötf
(" AŒow Comm™ds: %d\n", (
¥_buff
[3] >> 4) & 0x7);

366 
	`¥ötf
(" Persist Through Power Loss Active(PTPL_A): %d\n",

367 !!(
¥_buff
[3] & 0x1));

368 i‡(
¥_buff
[3] & 0x80) {

369 
	`¥ötf
(" Support indicated in Type mask:\n");

370 
	`¥ötf
(" %s: %d\n", 
¥_ty≥_°rs
[7],

371 !!(
¥_buff
[4] & 0x80));

372 
	`¥ötf
(" %s: %d\n", 
¥_ty≥_°rs
[6],

373 !!(
¥_buff
[4] & 0x40));

374 
	`¥ötf
(" %s: %d\n", 
¥_ty≥_°rs
[5],

375 !!(
¥_buff
[4] & 0x20));

376 
	`¥ötf
(" %s: %d\n", 
¥_ty≥_°rs
[3],

377 !!(
¥_buff
[4] & 0x8));

378 
	`¥ötf
(" %s: %d\n", 
¥_ty≥_°rs
[1],

379 !!(
¥_buff
[4] & 0x2));

380 
	`¥ötf
(" %s: %d\n", 
¥_ty≥_°rs
[8],

381 !!(
¥_buff
[5] & 0x1));

385 
¥_gí
 = ((
¥_buff
[0] << 24) | (pr_buff[1] << 16) |

386 (
¥_buff
[2] << 8) |Ör_buff[3]);

387 
add_Àn
 = ((
¥_buff
[4] << 24) | (pr_buff[5] << 16) |

388 (
¥_buff
[6] << 8) |Ör_buff[7]);

389 i‡(
›t•
->
hex
) {

390 
	`¥ötf
(" PR gíî©i⁄=0x%x, ", 
¥_gí
);

391 i‡(
add_Àn
 <= 0)

392 
	`¥ötf
("Addôi⁄ÆÜígth=%d\n", 
add_Àn
);

393 i‡(
add_Àn
 > (()(
¥_buff
) - 8)) {

394 
	`¥ötf
("AdditionalÜengthÅooÜarge=%d,Åruncate\n",

395 
add_Àn
);

396 
	`dSåHex
((c⁄° *)(
¥_buff
 + 8), (pr_buff) - 8, 1);

398 
	`¥ötf
("Addôi⁄ÆÜígth=%d\n", 
add_Àn
);

399 
	`dSåHex
((c⁄° *)(
¥_buff
 + 8), 
add_Àn
, 1);

401 } i‡(
PRIN_RKEY_SA
 =
›t•
->
¥ö_ß
) {

402 
	`¥ötf
(" PR gíî©i⁄=0x%x, ", 
¥_gí
);

403 
num
 = 
add_Àn
 / 8;

404 i‡(
num
 > 0) {

405 i‡(1 =
num
)

406 
	`¥ötf
("1ÑegisteredÑeservation key follows:\n");

408 
	`¥ötf
("%dÑegi°îedÑe£rv©i⁄ key†fﬁlow:\n", 
num
);

409 
u˝
 = 
¥_buff
 + 8;

410 
k
 = 0; k < 
num
; ++k, 
u˝
 += 8) {

411 
uŒ
 = 0;

412 
j
 = 0; j < 8; ++j) {

413 i‡(
j
 > 0)

414 
uŒ
 <<= 8;

415 
uŒ
 |
u˝
[
j
];

417 
	`¥ötf
(" 0x%" 
PRIx64
 "\n", 
uŒ
);

420 
	`¥ötf
("thereáre NOÑegisteredÑeservation keys\n");

421 } i‡(
PRIN_RRES_SA
 =
›t•
->
¥ö_ß
) {

422 
	`¥ötf
(" PR gíî©i⁄=0x%x, ", 
¥_gí
);

423 
num
 = 
add_Àn
 / 16;

424 i‡(
num
 > 0) {

425 
	`¥ötf
("Reservation follows:\n");

426 
u˝
 = 
¥_buff
 + 8;

427 
uŒ
 = 0;

428 
j
 = 0; j < 8; ++j) {

429 i‡(
j
 > 0)

430 
uŒ
 <<= 8;

431 
uŒ
 |
u˝
[
j
];

433 
	`¥ötf
(" Key=0x%" 
PRIx64
 "\n", 
uŒ
);

434 
j
 = ((
u˝
[13] >> 4) & 0xf);

435 i‡(0 =
j
)

436 
	`¥ötf
(" scope: LU_SCOPE, ");

438 
	`¥ötf
(" sc›e: %d ", 
j
);

439 
j
 = (
u˝
[13] & 0xf);

440 
	`¥ötf
("Åy≥: %s\n", 
¥_ty≥_°rs
[
j
]);

442 
	`¥ötf
("there is NOÑeservation held\n");

443 } i‡(
PRIN_RFSTAT_SA
 =
›t•
->
¥ö_ß
) {

444 
	`¥ötf
(" PR gíî©i⁄=0x%x\n", 
¥_gí
);

445 
u˝
 = 
¥_buff
 + 8;

446 i‡(0 =
add_Àn
) {

447 
	`¥ötf
(" No full status descriptors\n");

448 i‡(
›t•
->
vîbo£
)

449 
	`¥ötf
(" SoÅhereáreÇoÑegistered ITÇexuses\n");

451 
k
 = 0; k < 
add_Àn
; k +
num
, 
u˝
 +=Çum) {

452 
add_desc_Àn
 = ((
u˝
[20] << 24) | (ucp[21] << 16) |

453 (
u˝
[22] << 8) | ucp[23]);

454 
num
 = 24 + 
add_desc_Àn
;

455 
uŒ
 = 0;

456 
j
 = 0; j < 8; ++j) {

457 i‡(
j
 > 0)

458 
uŒ
 <<= 8;

459 
uŒ
 |
u˝
[
j
];

461 
	`¥ötf
(" Key=0x%" 
PRIx64
 "\n", 
uŒ
);

462 i‡(
u˝
[12] & 0x2)

463 
	`¥ötf
(" AllÅargetÖorts bit set\n");

465 
	`¥ötf
(" AllÅargetÖorts bit clear\n");

466 
ªl_±_addr
 = ((
u˝
[18] << 8) | ucp[19]);

467 
	`¥ötf
(" RelativeÖortáddress: 0x%x\n",

468 
ªl_±_addr
);

470 i‡(
u˝
[12] & 0x1) {

471 
	`¥ötf
(" << Reservation holder >>\n");

472 
j
 = ((
u˝
[13] >> 4) & 0xf);

473 i‡(0 =
j
)

474 
	`¥ötf
(" scope: LU_SCOPE, ");

476 
	`¥ötf
(" sc›e: %d ", 
j
);

477 
j
 = (
u˝
[13] & 0xf);

478 
	`¥ötf
("Åy≥: %s\n", 
¥_ty≥_°rs
[
j
]);

480 
	`¥ötf
("ÇotÑeservation holder\n");

481 i‡(
add_desc_Àn
 > 0)

482 
	`decode_å™•‹t_id
(" ", &
u˝
[24], 
add_desc_Àn
, 0);

487 
	}
}

492 
	$com∑˘_å™•‹tid_¨øy
(
›ts_t
 * 
›t•
)

494 
k
, 
off
, 
¥Ÿocﬁ_id
, 
Àn
;

495 
com∑˘_Àn
 = 0;

496 * 
u˝
 = 
›t•
->
å™•‹tid_¨r
;

498 
k
 = 0, 
off
 = 0; ((k < 
›t•
->
num_å™•‹tids
Ë&& (k < 
MX_TIDS
));

499 ++
k
, 
off
 +
MX_TID_LEN
) {

500 
¥Ÿocﬁ_id
 = 
u˝
[
off
] & 0xf;

501 i‡(
TPROTO_ISCSI
 =
¥Ÿocﬁ_id
) {

502 
Àn
 = (
u˝
[
off
 + 2] << 8) + ucp[off + 3] + 4;

503 i‡(
Àn
 < 24)

504 
Àn
 = 24;

505 i‡(
off
 > 
com∑˘_Àn
)

506 
	`memmove
(
u˝
 + 
com∑˘_Àn
, u˝ + 
off
, 
Àn
);

507 
com∑˘_Àn
 +
Àn
;

510 i‡(
off
 > 
com∑˘_Àn
)

511 
	`memmove
(
u˝
 + 
com∑˘_Àn
, u˝ + 
off
, 24);

512 
com∑˘_Àn
 += 24;

515  
com∑˘_Àn
;

516 
	}
}

519 
	$¥out_w‹k
(
sg_fd
, 
›ts_t
 * 
›t•
)

521 
j
, 
Àn
, 
ªs
, 
t_¨r_Àn
;

522 
¥_buff
[
MX_ALLOC_LEN
];

523 
uöt64_t
 
∑øm_rk
;

524 
uöt64_t
 
∑øm_ßrk
;

526 
t_¨r_Àn
 = 
	`com∑˘_å™•‹tid_¨øy
(
›t•
);

527 
∑øm_rk
 = 
›t•
->param_rk;

528 
	`mem£t
(
¥_buff
, 0, (pr_buff));

529 
j
 = 7; j >= 0; --j) {

530 
¥_buff
[
j
] = (
∑øm_rk
 & 0xff);

531 
∑øm_rk
 >>= 8;

533 
∑øm_ßrk
 = 
›t•
->param_sark;

534 
j
 = 7; j >= 0; --j) {

535 
¥_buff
[8 + 
j
] = (
∑øm_ßrk
 & 0xff);

536 
∑øm_ßrk
 >>= 8;

538 i‡(
›t•
->
∑øm_Æ…g±
)

539 
¥_buff
[20] |= 0x4;

540 i‡(
›t•
->
∑øm_≠çl
)

541 
¥_buff
[20] |= 0x1;

542 
Àn
 = 24;

543 i‡(
t_¨r_Àn
 > 0) {

544 
¥_buff
[20] |= 0x8;

545 
	`mem˝y
(&
¥_buff
[28], 
›t•
->
å™•‹tid_¨r
, 
t_¨r_Àn
);

546 
Àn
 +(
t_¨r_Àn
 + 4);

547 
¥_buff
[24] = ()((
t_¨r_Àn
 >> 24) & 0xff);

548 
¥_buff
[25] = ()((
t_¨r_Àn
 >> 16) & 0xff);

549 
¥_buff
[26] = ()((
t_¨r_Àn
 >> 8) & 0xff);

550 
¥_buff
[27] = ()(
t_¨r_Àn
 & 0xff);

552 
ªs
 = 
	`sg_Œ_≥rsi°ít_ª£rve_out
(
sg_fd
, 
›t•
->
¥out_ß
, 0,

553 
›t•
->
¥out_ty≥
, 
¥_buff
, 
Àn
, 1,

554 
›t•
->
vîbo£
);

555 i‡(
ªs
) {

556 i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

557 
	`Ârötf
(
°dîr
, "PR out:, commandÇot supported\n");

558 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

559 
	`Ârötf
(
°dîr
, "PR out: bad field in cdb including "

561 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
)

562 
	`Ârötf
(
°dîr
, "PR out: unitáttention\n");

563 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

564 
	`Ârötf
(
°dîr
, "PR out:áborted command\n");

566 
	`Ârötf
(
°dîr
, "PR out: command failed\n");

567  
ªs
;

568 } i‡(
›t•
->
vîbo£
) {

569 
buff
[64];

571 i‡(
›t•
->
¥out_ß
 < 
num_¥out_ß_°rs
)

572 
	`°∫˝y
(
buff
, 
¥out_ß_°rs
[
›t•
->
¥out_ß
], (buff));

574 
	`¢¥ötf
(
buff
, (buff), "serviceáction=0x%x",

575 
›t•
->
¥out_ß
);

576 
	`Ârötf
(
°dîr
, "PR out: comm™d (%sËsuc˚ssful\n", 
buff
);

579 
	}
}

582 
	$¥out_ªg_move_w‹k
(
sg_fd
, 
›ts_t
 * 
›t•
)

584 
j
, 
Àn
, 
ªs
, 
t_¨r_Àn
;

585 
¥_buff
[
MX_ALLOC_LEN
];

586 
uöt64_t
 
∑øm_rk
;

587 
uöt64_t
 
∑øm_ßrk
;

589 
t_¨r_Àn
 = 
	`com∑˘_å™•‹tid_¨øy
(
›t•
);

590 
∑øm_rk
 = 
›t•
->param_rk;

591 
	`mem£t
(
¥_buff
, 0, (pr_buff));

592 
j
 = 7; j >= 0; --j) {

593 
¥_buff
[
j
] = (
∑øm_rk
 & 0xff);

594 
∑øm_rk
 >>= 8;

596 
∑øm_ßrk
 = 
›t•
->param_sark;

597 
j
 = 7; j >= 0; --j) {

598 
¥_buff
[8 + 
j
] = (
∑øm_ßrk
 & 0xff);

599 
∑øm_ßrk
 >>= 8;

601 i‡(
›t•
->
∑øm_uƒeg
)

602 
¥_buff
[17] |= 0x2;

603 i‡(
›t•
->
∑øm_≠çl
)

604 
¥_buff
[17] |= 0x1;

605 
¥_buff
[18] = ()((
›t•
->
∑øm_πp
 >> 8) & 0xff);

606 
¥_buff
[19] = ()(
›t•
->
∑øm_πp
 & 0xff);

607 
Àn
 = 24;

608 i‡(
t_¨r_Àn
 > 0) {

609 
	`mem˝y
(&
¥_buff
[24], 
›t•
->
å™•‹tid_¨r
, 
t_¨r_Àn
);

610 
Àn
 +
t_¨r_Àn
;

611 
¥_buff
[20] = ()((
t_¨r_Àn
 >> 24) & 0xff);

612 
¥_buff
[21] = ()((
t_¨r_Àn
 >> 16) & 0xff);

613 
¥_buff
[22] = ()((
t_¨r_Àn
 >> 8) & 0xff);

614 
¥_buff
[23] = ()(
t_¨r_Àn
 & 0xff);

616 
ªs
 = 
	`sg_Œ_≥rsi°ít_ª£rve_out
(
sg_fd
, 
PROUT_REG_MOVE_SA
, 0,

617 
›t•
->
¥out_ty≥
, 
¥_buff
, 
Àn
, 1,

618 
›t•
->
vîbo£
);

619 i‡(
ªs
) {

620 i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

621 
	`Ârötf
(
°dîr
, "PR out: commandÇot supported\n");

622 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

623 
	`Ârötf
(
°dîr
, "PR out: bad field in cdb including "

625 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
)

626 
	`Ârötf
(
°dîr
, "PR out: unitáttention\n");

627 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

628 
	`Ârötf
(
°dîr
, "PR out:áborted command\n");

630 
	`Ârötf
(
°dîr
, "PR out: command failed\n");

631  
ªs
;

632 } i‡(
›t•
->
vîbo£
)

633 
	`Ârötf
(
°dîr
, "PR out: 'registeránd move' "

636 
	}
}

641 
	$decode_sym_å™•‹tid
(c⁄° * 
l˝
, * 
tidp
)

643 
k
, 
j
, 
n
, 
b
, 
c
, 
Àn
, 
Æí
;

644 c⁄° * 
e˝
;

645 c⁄° * 
isù
;

647 i‡((0 =
	`memcmp
("ßs,", 
l˝
, 4)) || (0 == memcmp("SAS,",Ücp, 4))) {

648 
l˝
 += 4;

649 
k
 = 
	`°r•n
(
l˝
, "0123456789aAbBcCdDeEfF");

650 i‡(16 !
k
) {

651 
	`Ârötf
(
°dîr
, "badly formed symbolic SAS TransportID: %s\n",

652 
l˝
);

655 
	`mem£t
(
tidp
, 0, 24);

656 
tidp
[0] = 
TPROTO_SAS
;

657 
k
 = 0, 
j
 = 0, 
b
 = 0; k < 16; ++k) {

658 
c
 = 
l˝
[
k
];

659 i‡(
	`isdigô
(
c
))

660 
n
 = 
c
 - 0x30;

661 i‡(
	`isuµî
(
c
))

662 
n
 = 
c
 - 0x37;

664 
n
 = 
c
 - 0x57;

665 i‡(
k
 & 1) {

666 
tidp
[4 + 
j
] = 
b
 | 
n
;

667 ++
j
;

669 
b
 = 
n
 << 4;

672 } i‡((0 =
	`memcmp
("•i,", 
l˝
, 4)) ||

673 (0 =
	`memcmp
("SPI,", 
l˝
, 4))) {

674 
l˝
 += 4;

675 i‡(2 !
	`ssˇnf
(
l˝
, "%d,%d", &
b
, &
c
)) {

676 
	`Ârötf
(
°dîr
, "badly formed symbolic SPI TransportID: %s\n",

677 
l˝
);

680 
tidp
[0] = 
TPROTO_SPI
;

681 
tidp
[2] = (
b
 >> 8) & 0xff;

682 
tidp
[3] = 
b
 & 0xff;

683 
tidp
[6] = (
c
 >> 8) & 0xff;

684 
tidp
[7] = 
c
 & 0xff;

686 } i‡((0 =
	`memcmp
("f˝,", 
l˝
, 4)) ||

687 (0 =
	`memcmp
("FCP,", 
l˝
, 4))) {

688 
l˝
 += 4;

689 
k
 = 
	`°r•n
(
l˝
, "0123456789aAbBcCdDeEfF");

690 i‡(16 !
k
) {

691 
	`Ârötf
(
°dîr
, "badly formed symbolic FCP TransportID: %s\n",

692 
l˝
);

695 
	`mem£t
(
tidp
, 0, 24);

696 
tidp
[0] = 
TPROTO_FCP
;

697 
k
 = 0, 
j
 = 0, 
b
 = 0; k < 16; ++k) {

698 
c
 = 
l˝
[
k
];

699 i‡(
	`isdigô
(
c
))

700 
n
 = 
c
 - 0x30;

701 i‡(
	`isuµî
(
c
))

702 
n
 = 
c
 - 0x37;

704 
n
 = 
c
 - 0x57;

705 i‡(
k
 & 1) {

706 
tidp
[8 + 
j
] = 
b
 | 
n
;

707 ++
j
;

709 
b
 = 
n
 << 4;

712 } i‡((0 =
	`memcmp
("sbp,", 
l˝
, 4)) ||

713 (0 =
	`memcmp
("SBP,", 
l˝
, 4))) {

714 
l˝
 += 4;

715 
k
 = 
	`°r•n
(
l˝
, "0123456789aAbBcCdDeEfF");

716 i‡(16 !
k
) {

717 
	`Ârötf
(
°dîr
, "badly formed symbolic SBP TransportID: %s\n",

718 
l˝
);

721 
	`mem£t
(
tidp
, 0, 24);

722 
tidp
[0] = 
TPROTO_1394
;

723 
k
 = 0, 
j
 = 0, 
b
 = 0; k < 16; ++k) {

724 
c
 = 
l˝
[
k
];

725 i‡(
	`isdigô
(
c
))

726 
n
 = 
c
 - 0x30;

727 i‡(
	`isuµî
(
c
))

728 
n
 = 
c
 - 0x37;

730 
n
 = 
c
 - 0x57;

731 i‡(
k
 & 1) {

732 
tidp
[8 + 
j
] = 
b
 | 
n
;

733 ++
j
;

735 
b
 = 
n
 << 4;

738 } i‡((0 =
	`memcmp
("§p,", 
l˝
, 4)) ||

739 (0 =
	`memcmp
("SRP,", 
l˝
, 4))) {

740 
l˝
 += 4;

741 
k
 = 
	`°r•n
(
l˝
, "0123456789aAbBcCdDeEfF");

742 i‡(16 !
k
) {

743 
	`Ârötf
(
°dîr
, "badly formed symbolic SRP TransportID: %s\n",

744 
l˝
);

747 
	`mem£t
(
tidp
, 0, 24);

748 
tidp
[0] = 
TPROTO_SRP
;

749 
k
 = 0, 
j
 = 0, 
b
 = 0; k < 32; ++k) {

750 
c
 = 
l˝
[
k
];

751 i‡(
	`isdigô
(
c
))

752 
n
 = 
c
 - 0x30;

753 i‡(
	`isuµî
(
c
))

754 
n
 = 
c
 - 0x37;

756 
n
 = 
c
 - 0x57;

757 i‡(
k
 & 1) {

758 
tidp
[8 + 
j
] = 
b
 | 
n
;

759 ++
j
;

761 
b
 = 
n
 << 4;

764 } i‡(0 =
	`memcmp
("iqn.", 
l˝
, 4)) {

765 
e˝
 = 
	`°Ωbrk
(
l˝
, " \t");

766 
isù
 = 
	`°r°r
(
l˝
, ",i,0x");

767 i‡(
e˝
 && (
isù
 >Écp))

768 
isù
 = 
NULL
;

769 
Àn
 = 
e˝
 ? (e˝ - 
l˝
Ë: ()
	`°æí
(lcp);

770 
	`mem£t
(
tidp
, 0, 24);

771 
tidp
[0] = 
TPROTO_ISCSI
 | (
isù
 ? 0x40 : 0x0);

772 
Æí
 = 
Àn
 + 1;

773 i‡(
Æí
 < 20)

774 
Æí
 = 20;

775 i‡(0 !(
Æí
 % 4))

776 
Æí
 = ((alen / 4) + 1) * 4;

777 i‡(
Æí
 > 241) {

778 
	`Ârötf
(
°dîr
, "iSCSIÇamêtoÿl⁄g,áÀn=%d\n", 
Æí
);

781 
tidp
[3] = 
Æí
 & 0xff;

782 
	`mem˝y
(
tidp
 + 4, 
l˝
, 
Àn
);

785 
	`Ârötf
(
°dîr
, "u«bÀÅÿ∑r£ symbﬁi¯Tøn•‹tID: %s\n", 
l˝
);

787 
	}
}

792 
	$decode_fûe_tids
(c⁄° * 
‚p
, 
›ts_t
 * 
›t•
)

794 
FILE
 * 
Â
 = 
°dö
;

795 
ö_Àn
, 
k
, 
j
, 
m
;

796 
h
;

797 c⁄° * 
l˝
;

798 
löe
[512];

799 
off
 = 0;

800 
num
 = 0;

801 * 
tid_¨r
 = 
›t•
->
å™•‹tid_¨r
;

803 i‡(
‚p
) {

804 
Â
 = 
	`f›í
(
‚p
, "r");

805 i‡(
NULL
 =
Â
) {

806 
	`Ârötf
(
°dîr
, "decode_fûe_tids: u«bÀÅÿ›í %s\n", 
‚p
);

810 
j
 = 0, 
off
 = 0; j < 512; ++j) {

811 i‡(
NULL
 =
	`fgës
(
löe
, ÷öe), 
Â
))

813 
ö_Àn
 = 
	`°æí
(
löe
);

814 i‡(
ö_Àn
 > 0) {

815 i‡('\n' =
löe
[
ö_Àn
 - 1]) {

816 --
ö_Àn
;

817 
löe
[
ö_Àn
] = '\0';

820 i‡(0 =
ö_Àn
)

822 
l˝
 = 
löe
;

823 
m
 = 
	`°r•n
(
l˝
, " \t");

824 i‡(
m
 =
ö_Àn
)

826 
l˝
 +
m
;

827 
ö_Àn
 -
m
;

828 i‡('#' =*
l˝
)

830 i‡(
	`decode_sym_å™•‹tid
(
l˝
, 
tid_¨r
 + 
off
))

831 
my_c⁄t_a
;

832 
k
 = 
	`°r•n
(
l˝
, "0123456789aAbBcCdDeEfF ,\t");

833 i‡((
k
 < 
ö_Àn
Ë&& ('#' !
l˝
[k])) {

834 
	`Ârötf
(
°dîr
, "decode_file_tids: syntaxÉrrorát "

835 "löê%d,Öo†%d\n", 
j
 + 1, 
m
 + 
k
 + 1);

836 
bad
;

838 
k
 = 0; k < 1024; ++k) {

839 i‡(1 =
	`ssˇnf
(
l˝
, "%x", &
h
)) {

840 i‡(
h
 > 0xff) {

841 
	`Ârötf
(
°dîr
, "decode_file_tids: hexÇumber "

843 
j
 + 1, ()(
l˝
 - 
löe
 + 1));

844 
bad
;

846 i‡((
off
 + 
k
Ë>()(
›t•
->
å™•‹tid_¨r
)) {

847 
	`Ârötf
(
°dîr
, "decode_file_tids:árrayÜength "

849 
bad
;

851 
tid_¨r
[
off
 + 
k
] = 
h
;

852 
l˝
 = 
	`°Ωbrk
(lcp, " ,\t");

853 i‡(
NULL
 =
l˝
)

855 
l˝
 +
	`°r•n
(lcp, " ,\t");

856 i‡('\0' =*
l˝
)

859 i‡('#' =*
l˝
) {

860 --
k
;

863 
	`Ârötf
(
°dîr
, "decode_file_tids:Érror in "

864 "löê%d,áàpo†%d\n", 
j
 + 1,

865 ()(
l˝
 - 
löe
 + 1));

866 
bad
;

869 
my_c⁄t_a
:

870 
off
 +
MX_TID_LEN
;

871 i‡(
off
 >(
MX_TIDS
 * 
MX_TID_LEN
)) {

872 
	`Ârötf
(
°dîr
, "decode_file_tids:árrayÜengthÉxceeded\n");

873 
bad
;

875 ++
num
;

877 
›t•
->
num_å™•‹tids
 = 
num
;

880 
bad
:

881 i‡(
‚p
)

882 
	`f˛o£
(
Â
);

884 
	}
}

895 
	$buûd_å™•‹tid
(c⁄° * 
öp
, 
›ts_t
 * 
›t•
)

897 
ö_Àn
;

898 
k
 = 0;

899 
h
;

900 c⁄° * 
l˝
;

901 * 
tid_¨r
 = 
›t•
->
å™•‹tid_¨r
;

902 * 
˝
;

903 * 
c2p
;

905 
l˝
 = 
öp
;

906 
ö_Àn
 = 
	`°æí
(
öp
);

907 i‡(0 =
ö_Àn
) {

908 
›t•
->
num_å™•‹tids
 = 0;

910 i‡(('-' =
öp
[0]) ||

911 (0 =
	`memcmp
("fûe=", 
öp
, 5)) ||

912 (0 =
	`memcmp
("FILE=", 
öp
, 5))) {

913 i‡('-' =
öp
[0])

914 
l˝
 = 
NULL
;

916 
l˝
 = 
öp
 + 5;

917  
	`decode_fûe_tids
(
l˝
, 
›t•
);

919 i‡(
	`decode_sym_å™•‹tid
(
l˝
, 
tid_¨r
))

920 
my_c⁄t_b
;

921 
k
 = 
	`°r•n
(
öp
, "0123456789aAbBcCdDeEfF, ");

922 i‡(
ö_Àn
 !
k
) {

923 
	`Ârötf
(
°dîr
, "build_transportid:ÉrrorátÖos %d\n",

924 
k
 + 1);

927 
k
 = 0; k < ()(
›t•
->
å™•‹tid_¨r
); ++k) {

928 i‡(1 =
	`ssˇnf
(
l˝
, "%x", &
h
)) {

929 i‡(
h
 > 0xff) {

930 
	`Ârötf
(
°dîr
, "build_transportid: hexÇumberÜarger "

931 "th™ 0xf‡©Öo†%d\n", ()(
l˝
 - 
öp
 + 1));

934 
tid_¨r
[
k
] = 
h
;

935 
˝
 = (*)
	`°rchr
(
l˝
, ',');

936 
c2p
 = (*)
	`°rchr
(
l˝
, ' ');

937 i‡(
NULL
 =
˝
)

938 
˝
 = 
c2p
;

939 i‡(
NULL
 =
˝
)

941 i‡(
c2p
 && (c2∞< 
˝
))

942 
˝
 = 
c2p
;

943 
l˝
 = 
˝
 + 1;

945 
	`Ârötf
(
°dîr
, "build_transportid:ÉrrorátÖos %d\n",

946 ()(
l˝
 - 
öp
 + 1));

950 
my_c⁄t_b
:

951 
›t•
->
num_å™•‹tids
 = 1;

952 i‡(
k
 >()(
›t•
->
å™•‹tid_¨r
)) {

953 
	`Ârötf
(
°dîr
, "build_transportid:árrayÜengthÉxceeded\n");

958 
	}
}

962 
	$maö
(
¨gc
, * 
¨gv
[])

964 
sg_fd
, 
c
, 
ªs
;

965 c⁄° * 
devi˚_«me
 = 
NULL
;

966 
buff
[48];

967 
num_¥ö_ß
 = 0;

968 
num_¥out_ß
 = 0;

969 
num_¥out_∑øm
 = 0;

970 
w™t_¥ö
 = 0;

971 
w™t_¥out
 = 0;

972 
≥ri_ty≥
 = 0;

973 
ªt
 = 0;

974 
sg_sim∂e_öquúy_ª•
 
öq_ª•
;

975 c⁄° * 
˝
;

976 
›ts_t
 
›ts
;

978 
	`mem£t
(&
›ts
, 0, (opts));

979 
›ts
.
¥ö
 = 1;

980 
›ts
.
¥ö_ß
 = -1;

981 
›ts
.
¥out_ß
 = -1;

982 
›ts
.
öquúy
 = 1;

983 
›ts
.
Æloc_Àn
 = 
MX_ALLOC_LEN
;

985 
›ti⁄_ödex
 = 0;

987 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "AcCd:GHhiIkK:l:LMnoPQrRsS:T:UvVX:YZ",

988 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

989 i‡(
c
 == -1)

992 
c
) {

994 
›ts
.
¥out_ß
 = 
PROUT_PREE_AB_SA
;

995 ++
num_¥out_ß
;

998 
›ts
.
¥ö_ß
 = 
PRIN_RCAP_SA
;

999 ++
num_¥ö_ß
;

1002 
›ts
.
¥out_ß
 = 
PROUT_CLEAR_SA
;

1003 ++
num_¥out_ß
;

1006 
devi˚_«me
 = 
›èrg
;

1009 
›ts
.
¥out_ß
 = 
PROUT_REG_SA
;

1010 ++
num_¥out_ß
;

1013 
	`ußge
();

1016 ++
›ts
.
hex
;

1019 
w™t_¥ö
 = 1;

1022 
›ts
.
¥out_ß
 = 
PROUT_REG_IGN_SA
;

1023 ++
num_¥out_ß
;

1026 
›ts
.
¥ö_ß
 = 
PRIN_RKEY_SA
;

1027 ++
num_¥ö_ß
;

1030 i‡(1 !
	`ssˇnf
(
›èrg
, "%" 
SCNx64
 "", &
›ts
.
∑øm_rk
)) {

1031 
	`Ârötf
(
°dîr
, "badárgumentÅo '--param-rk'\n");

1032  
SG_LIB_SYNTAX_ERROR
;

1034 ++
num_¥out_∑øm
;

1037 i‡(1 !
	`ssˇnf
(
›èrg
, "%x", &
›ts
.
Æloc_Àn
)) {

1038 
	`Ârötf
(
°dîr
, "badárgumentÅo '--alloc-length'\n");

1039  
SG_LIB_SYNTAX_ERROR
;

1040 } i‡(
MX_ALLOC_LEN
 < 
›ts
.
Æloc_Àn
) {

1041 
	`Ârötf
(
°dîr
, "'--alloc-length'árgumentÉxceeds maximum"

1042 " vÆue(%d)\n", 
MX_ALLOC_LEN
);

1043  
SG_LIB_SYNTAX_ERROR
;

1047 
›ts
.
¥out_ß
 = 
PROUT_REL_SA
;

1048 ++
num_¥out_ß
;

1051 
›ts
.
¥out_ß
 = 
PROUT_REG_MOVE_SA
;

1052 ++
num_¥out_ß
;

1055 
›ts
.
öquúy
 = 0;

1058 
w™t_¥out
 = 1;

1061 
›ts
.
¥out_ß
 = 
PROUT_PREE_SA
;

1062 ++
num_¥out_ß
;

1065 i‡(1 !
	`ssˇnf
(
›èrg
, "%x", &
›ts
.
∑øm_πp
)) {

1066 
	`Ârötf
(
°dîr
, "badárgumentÅo '--relative-target-port'\n");

1067  
SG_LIB_SYNTAX_ERROR
;

1069 i‡(
›ts
.
∑øm_πp
 > 0xffff) {

1070 
	`Ârötf
(
°dîr
, "argumentÅo '--relative-target-port' 0Åo "

1072  
SG_LIB_SYNTAX_ERROR
;

1074 ++
num_¥out_∑øm
;

1077 
›ts
.
¥ö_ß
 = 
PRIN_RRES_SA
;

1078 ++
num_¥ö_ß
;

1081 
›ts
.
¥out_ß
 = 
PROUT_RES_SA
;

1082 ++
num_¥out_ß
;

1085 
›ts
.
¥ö_ß
 = 
PRIN_RFSTAT_SA
;

1086 ++
num_¥ö_ß
;

1089 i‡(1 !
	`ssˇnf
(
›èrg
, "%" 
SCNx64
 "", &
›ts
.
∑øm_ßrk
)) {

1090 
	`Ârötf
(
°dîr
, "badárgumentÅo '--param-sark'\n");

1091  
SG_LIB_SYNTAX_ERROR
;

1093 ++
num_¥out_∑øm
;

1096 i‡(1 !
	`ssˇnf
(
›èrg
, "%x", &
›ts
.
¥out_ty≥
)) {

1097 
	`Ârötf
(
°dîr
, "badárgumentÅo '--prout-type'\n");

1098  
SG_LIB_SYNTAX_ERROR
;

1100 ++
num_¥out_∑øm
;

1103 
›ts
.
∑øm_uƒeg
 = 1;

1106 ++
›ts
.
vîbo£
;

1109 
	`Ârötf
(
°dîr
, "vîsi⁄: %s\n", 
vîsi⁄_°r
);

1112 i‡(0 !
	`buûd_å™•‹tid
(
›èrg
, &
›ts
)) {

1113 
	`Ârötf
(
°dîr
, "badárgumentÅo '--transport-id'\n");

1114  
SG_LIB_SYNTAX_ERROR
;

1116 ++
num_¥out_∑øm
;

1119 
›ts
.
∑øm_Æ…g±
 = 1;

1120 ++
num_¥out_∑øm
;

1123 
›ts
.
∑øm_≠çl
 = 1;

1124 ++
num_¥out_∑øm
;

1127 
	`ußge
();

1130 
	`Ârötf
(
°dîr
, "unrecognised switch "

1131 "codê0x%x ??\n", 
c
);

1132 
	`ußge
();

1133  
SG_LIB_SYNTAX_ERROR
;

1136 i‡(
›töd
 < 
¨gc
) {

1137 i‡(
NULL
 =
devi˚_«me
) {

1138 
devi˚_«me
 = 
¨gv
[
›töd
];

1139 ++
›töd
;

1141 i‡(
›töd
 < 
¨gc
) {

1142 ; 
›töd
 < 
¨gc
; ++optind)

1143 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

1144 
¨gv
[
›töd
]);

1145 
	`ußge
();

1146  
SG_LIB_SYNTAX_ERROR
;

1150 i‡(
NULL
 =
devi˚_«me
) {

1151 
	`Ârötf
(
°dîr
, "No deviceÇame given\n");

1152 
	`ußge
();

1153  
SG_LIB_SYNTAX_ERROR
;

1155 i‡((
w™t_¥out
 + 
w™t_¥ö
) > 1) {

1156 
	`Ârötf
(
°dîr
, "choose '--in' _or_ '--out' (not both)\n");

1157 
	`ußge
();

1158  
SG_LIB_SYNTAX_ERROR
;

1159 } i‡(
w™t_¥out
) {

1160 
›ts
.
¥ö
 = 0;

1161 i‡((1 !
num_¥out_ß
Ë|| (0 !
num_¥ö_ß
)) {

1162 
	`Ârötf
(
°dîr
, ">> For Persistent Reserve Out oneánd "

1165  
SG_LIB_SYNTAX_ERROR
;

1168 i‡(
num_¥out_ß
 > 0) {

1169 
	`Ârötf
(
°dîr
, ">> Whená serviceáction for Persistent "

1172  
SG_LIB_SYNTAX_ERROR
;

1174 i‡(0 =
num_¥ö_ß
) {

1175 
	`Ârötf
(
°dîr
, ">> No serviceáction given;ássume Persistent"

1178 
›ts
.
¥ö_ß
 = 0;

1179 ++
num_¥ö_ß
;

1180 } i‡(
num_¥ö_ß
 > 1) {

1181 
	`Ârötf
(
°dîr
, "Too many serviceáctions given; choose "

1183 
	`ußge
();

1184  
SG_LIB_SYNTAX_ERROR
;

1187 i‡((
›ts
.
∑øm_uƒeg
 || o±s.
∑øm_πp
) &&

1188 (
PROUT_REG_MOVE_SA
 !
›ts
.
¥out_ß
)) {

1189 
	`Ârötf
(
°dîr
, "--unreg or --relative-target-port"

1191 
	`ußge
();

1192  
SG_LIB_SYNTAX_ERROR
;

1194 i‡((
PROUT_REG_MOVE_SA
 =
›ts
.
¥out_ß
) &&

1195 (1 !
›ts
.
num_å™•‹tids
)) {

1196 
	`Ârötf
(
°dîr
, "with --register-move one (and only one) "

1198 
	`ußge
();

1199  
SG_LIB_SYNTAX_ERROR
;

1201 i‡(((
PROUT_RES_SA
 =
›ts
.
¥out_ß
) ||

1202 (
PROUT_REL_SA
 =
›ts
.
¥out_ß
) ||

1203 (
PROUT_PREE_SA
 =
›ts
.
¥out_ß
) ||

1204 (
PROUT_PREE_AB_SA
 =
›ts
.
¥out_ß
)) &&

1205 (0 =
›ts
.
¥out_ty≥
)) {

1206 
	`Ârötf
(
°dîr
, "warning>>> --prout-typeÖrobablyÇeedsÅo be "

1209 i‡((
›ts
.
vîbo£
 > 2Ë&& o±s.
num_å™•‹tids
) {

1210 
	`Ârötf
(
°dîr
, "number ofÅranport-ids decoded from "

1211 "comm™dÜöê(‹ stdö): %d\n", 
›ts
.
num_å™•‹tids
);

1212 
	`Ârötf
(
°dîr
, " Decode givenÅransport-ids:\n");

1213 
	`decode_å™•‹t_id
(" ", 
›ts
.
å™•‹tid_¨r
,

1214 0, 
›ts
.
num_å™•‹tids
);

1217 i‡(
›ts
.
öquúy
) {

1218 i‡((
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 1 ,

1219 
›ts
.
vîbo£
)) < 0) {

1220 
	`Ârötf
(
°dîr
, "sg_persist:Érror opening file (ro): %s: %s\n",

1221 
devi˚_«me
, 
	`ß„_°ªº‹
(-
sg_fd
));

1222  
SG_LIB_FILE_ERROR
;

1224 i‡(0 =
	`sg_sim∂e_öquúy
(
sg_fd
, &
öq_ª•
, 1, 
›ts
.
vîbo£
)) {

1225 
	`¥ötf
(" %.8† %.16† %.4s\n", 
öq_ª•
.
víd‹
, inq_ª•.
¥odu˘
,

1226 
öq_ª•
.
ªvisi⁄
);

1227 
≥ri_ty≥
 = 
öq_ª•
.
≥rùhîÆ_ty≥
;

1228 
˝
 = 
	`sg_gë_pdt_°r
(
≥ri_ty≥
, (
buff
), buff);

1229 i‡(
	`°æí
(
˝
) > 0)

1230 
	`¥ötf
(" PîùhîÆ devi˚Åy≥: %s\n", 
˝
);

1232 
	`¥ötf
(" PîùhîÆ devi˚Åy≥: 0x%x\n", 
≥ri_ty≥
);

1234 
	`¥ötf
("sg_persist: %s doesn'tÑespondÅoá SCSI INQUIRY\n",

1235 
devi˚_«me
);

1236  
SG_LIB_CAT_OTHER
;

1238 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

1241 i‡((
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 0 ,

1242 
›ts
.
vîbo£
)) < 0) {

1243 
	`Ârötf
(
°dîr
, "sg_persist:Érror opening file (rw): %s: %s\n",

1244 
devi˚_«me
, 
	`ß„_°ªº‹
(-
sg_fd
));

1245  
SG_LIB_FILE_ERROR
;

1248 i‡(
›ts
.
¥ö
)

1249 
ªt
 = 
	`¥ö_w‹k
(
sg_fd
, &
›ts
);

1250 i‡(
PROUT_REG_MOVE_SA
 =
›ts
.
¥out_ß
)

1251 
ªt
 = 
	`¥out_ªg_move_w‹k
(
sg_fd
, &
›ts
);

1253 
ªt
 = 
	`¥out_w‹k
(
sg_fd
, &
›ts
);

1255 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

1256 i‡(
ªs
 < 0) {

1257 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

1258 i‡(0 =
ªt
)

1259  
SG_LIB_FILE_ERROR
;

1261  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

1262 
	}
}

	@src/sg_prevent.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<gë›t.h
>

15 #ifde‡
HAVE_CONFIG_H


16 
	~"c⁄fig.h
"

18 
	~"sg_lib.h
"

19 
	~"sg_cmds_basic.h
"

27 c⁄° * 
	gvîsi⁄_°r
 = "1.06 20130507";

29 
	#ME
 "sg_¥evít: "

	)

32 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

41 
	$ußge
()

43 
	`Ârötf
(
°dîr
, "Usage: "

60 
	}
}

62 
	$maö
(
¨gc
, * 
¨gv
[])

64 
sg_fd
, 
ªs
, 
c
;

65 
Ælow
 = 0;

66 
¥evít
 = -1;

67 
vîbo£
 = 0;

68 c⁄° * 
devi˚_«me
 = 
NULL
;

69 
ªt
 = 0;

72 
›ti⁄_ödex
 = 0;

74 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "ahp:vV", 
l⁄g_›ti⁄s
,

75 &
›ti⁄_ödex
);

76 i‡(
c
 == -1)

79 
c
) {

81 
Ælow
 = 1;

85 
	`ußge
();

88 
¥evít
 = 
	`sg_gë_num
(
›èrg
);

89 i‡((
¥evít
 < 0) || (prevent > 3)) {

90 
	`Ârötf
(
°dîr
, "badárgumentÅo '--prevent'\n");

91  
SG_LIB_SYNTAX_ERROR
;

95 ++
vîbo£
;

98 
	`Ârötf
(
°dîr
, 
ME
 "vîsi⁄: %s\n", 
vîsi⁄_°r
);

101 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê0x%x ??\n", 
c
);

102 
	`ußge
();

103  
SG_LIB_SYNTAX_ERROR
;

106 i‡(
›töd
 < 
¨gc
) {

107 i‡(
NULL
 =
devi˚_«me
) {

108 
devi˚_«me
 = 
¨gv
[
›töd
];

109 ++
›töd
;

111 i‡(
›töd
 < 
¨gc
) {

112 ; 
›töd
 < 
¨gc
; ++optind)

113 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

114 
¨gv
[
›töd
]);

115 
	`ußge
();

116  
SG_LIB_SYNTAX_ERROR
;

119 i‡(
NULL
 =
devi˚_«me
) {

120 
	`Ârötf
(
°dîr
, "missing deviceÇame!\n");

121 
	`ußge
();

122  
SG_LIB_SYNTAX_ERROR
;

124 i‡(
Ælow
 && (
¥evít
 >= 0)) {

125 
	`Ârötf
(
°dîr
, "can't give both '--allow'ánd '--prevent='\n");

126 
	`ußge
();

127  
SG_LIB_SYNTAX_ERROR
;

129 i‡(
Ælow
)

130 
¥evít
 = 0;

131 i‡(
¥evít
 < 0)

132 
¥evít
 = 1;

134 
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 0 , 
vîbo£
);

135 i‡(
sg_fd
 < 0) {

136 
	`Ârötf
(
°dîr
, 
ME
 "›íÉº‹: %s: %s\n", 
devi˚_«me
,

137 
	`ß„_°ªº‹
(-
sg_fd
));

138  
SG_LIB_FILE_ERROR
;

140 
ªs
 = 
	`sg_Œ_¥evít_Ælow
(
sg_fd
, 
¥evít
, 1, 
vîbo£
);

141 
ªt
 = 
ªs
;

142 i‡(0 =
ªs
)

144 i‡(
SG_LIB_CAT_NOT_READY
 =
ªs
)

145 
	`Ârötf
(
°dîr
, "DeviceÇotÑeady\n");

146 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
)

147 
	`Ârötf
(
°dîr
, "Unitáttention\n");

148 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

149 
	`Ârötf
(
°dîr
, "Aborted command\n");

150 i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

151 
	`Ârötf
(
°dîr
, "Preventállow mediumÑemoval commandÇot "

153 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

154 
	`Ârötf
(
°dîr
, "Preventállow mediumÑemoval, bad field in "

157 
	`Ârötf
(
°dîr
, "Preventállow mediumÑemoval command failed\n");

159 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

160 i‡(
ªs
 < 0) {

161 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

162 i‡(0 =
ªt
)

163  
SG_LIB_FILE_ERROR
;

165  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

166 
	}
}

	@src/sg_raw.c

15 
	~<°dlib.h
>

16 
	~<uni°d.h
>

17 
	~<f˙é.h
>

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<gë›t.h
>

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

25 
	~"sg_lib.h
"

26 
	~"sg_±.h
"

28 
	#SG_RAW_VERSION
 "0.4.5 (2012-03-28)"

	)

30 
	#DEFAULT_TIMEOUT
 20

	)

31 
	#MIN_SCSI_CDBSZ
 6

	)

32 
	#MAX_SCSI_CDBSZ
 256

	)

33 
	#MAX_SCSI_DXLEN
 (64 * 1024)

	)

35 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

36 { "bö¨y", 
no_¨gumít
, 
NULL
, 'b' },

37 { "hñp", 
no_¨gumít
, 
NULL
, 'h' },

38 { "öfûe", 
ªquúed_¨gumít
, 
NULL
, 'i' },

39 { "skù", 
ªquúed_¨gumít
, 
NULL
, 'k' },

40 { "no£n£", 
no_¨gumít
, 
NULL
, 'n' },

41 { "outfûe", 
ªquúed_¨gumít
, 
NULL
, 'o' },

42 { "ªque°", 
ªquúed_¨gumít
, 
NULL
, 'r' },

43 { "ªad⁄ly", 
no_¨gumít
, 
NULL
, 'R' },

44 { "£nd", 
ªquúed_¨gumít
, 
NULL
, 's' },

45 { "timeout", 
ªquúed_¨gumít
, 
NULL
, 't' },

46 { "vîbo£", 
no_¨gumít
, 
NULL
, 'v' },

47 { "vîsi⁄", 
no_¨gumít
, 
NULL
, 'V' },

51 
	s›ts_t
 {

52 *
	mdevi˚_«me
;

53 
	mcdb
[
MAX_SCSI_CDBSZ
];

54 
	mcdb_Àngth
;

55 
	mdo_d©aö
;

56 
	md©aö_Àn
;

57 c⁄° *
	md©aö_fûe
;

58 
	md©aö_bö¨y
;

59 
	mdo_d©aout
;

60 
	md©aout_Àn
;

61 c⁄° *
	md©aout_fûe
;

62 
off_t
 
	md©aout_off£t
;

63 
	mtimeout
;

64 
	mno_£n£
;

65 
	mªad⁄ly
;

66 
	mdo_hñp
;

67 
	mdo_vîbo£
;

68 
	mdo_vîsi⁄
;

72 
	$vîsi⁄
()

74 
	`Ârötf
(
°dîr
,

75 "sg_øw " 
SG_RAW_VERSION
 "\n"

82 
	}
}

85 
	$ußge
()

87 
	`Ârötf
(
°dîr
,

115 
	}
}

118 
	$¥o˚ss_˛
(
›ts_t
 *
›t•
, 
¨gc
, *
¨gv
[])

121 
c
, 
n
;

123 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "bhi:k:no:r:Rs:t:vV", 
l⁄g_›ti⁄s
, 
NULL
);

124 i‡(
c
 == -1)

127 
c
) {

129 
›t•
->
d©aö_bö¨y
 = 1;

133 
›t•
->
do_hñp
 = 1;

136 i‡(
›t•
->
d©aout_fûe
) {

137 
	`Ârötf
(
°dîr
, "Too many '--infile=' options\n");

138  
SG_LIB_SYNTAX_ERROR
;

140 
›t•
->
d©aout_fûe
 = 
›èrg
;

143 
n
 = 
	`sg_gë_num
(
›èrg
);

144 i‡(
n
 < 0) {

145 
	`Ârötf
(
°dîr
, "InvalidárgumentÅo '--skip'\n");

146  
SG_LIB_SYNTAX_ERROR
;

148 
›t•
->
d©aout_off£t
 = 
n
;

151 
›t•
->
no_£n£
 = 1;

154 i‡(
›t•
->
d©aö_fûe
) {

155 
	`Ârötf
(
°dîr
, "Too many '--outfile=' options\n");

156  
SG_LIB_SYNTAX_ERROR
;

158 
›t•
->
d©aö_fûe
 = 
›èrg
;

161 
›t•
->
do_d©aö
 = 1;

162 
n
 = 
	`sg_gë_num
(
›èrg
);

163 i‡(
n
 < 0 ||Ç > 
MAX_SCSI_DXLEN
) {

164 
	`Ârötf
(
°dîr
, "InvalidárgumentÅo '--request'\n");

165  
SG_LIB_SYNTAX_ERROR
;

167 
›t•
->
d©aö_Àn
 = 
n
;

170 ++
›t•
->
ªad⁄ly
;

173 
›t•
->
do_d©aout
 = 1;

174 
n
 = 
	`sg_gë_num
(
›èrg
);

175 i‡(
n
 < 0 ||Ç > 
MAX_SCSI_DXLEN
) {

176 
	`Ârötf
(
°dîr
, "InvalidárgumentÅo '--send'\n");

177  
SG_LIB_SYNTAX_ERROR
;

179 
›t•
->
d©aout_Àn
 = 
n
;

182 
n
 = 
	`sg_gë_num
(
›èrg
);

183 i‡(
n
 < 0) {

184 
	`Ârötf
(
°dîr
, "InvalidárgumentÅo '--timeout'\n");

185  
SG_LIB_SYNTAX_ERROR
;

187 
›t•
->
timeout
 = 
n
;

190 ++
›t•
->
do_vîbo£
;

193 
›t•
->
do_vîsi⁄
 = 1;

196  
SG_LIB_SYNTAX_ERROR
;

200 i‡(
›töd
 >
¨gc
) {

201 
	`Ârötf
(
°dîr
, "No device specified\n");

202  
SG_LIB_SYNTAX_ERROR
;

204 
›t•
->
devi˚_«me
 = 
¨gv
[
›töd
];

205 ++
›töd
;

207 
›töd
 < 
¨gc
) {

208 *
›t
 = 
¨gv
[
›töd
++];

209 *
íd±r
;

210 
cmd
 = 
	`°πﬁ
(
›t
, &
íd±r
, 16);

211 i‡(*
›t
 ='\0' || *
íd±r
 !'\0' || 
cmd
 < 0x00 || cmd > 0xff) {

212 
	`Ârötf
(
°dîr
, "InvÆid comm™d byã '%s'\n", 
›t
);

213  
SG_LIB_SYNTAX_ERROR
;

216 i‡(
›t•
->
cdb_Àngth
 > 
MAX_SCSI_CDBSZ
) {

217 
	`Ârötf
(
°dîr
, "CDBÅoÿl⁄g (max. %d byãs)\n", 
MAX_SCSI_CDBSZ
);

218  
SG_LIB_SYNTAX_ERROR
;

220 
›t•
->
cdb
[›t•->
cdb_Àngth
] = 
cmd
;

221 ++
›t•
->
cdb_Àngth
;

224 i‡(
›t•
->
cdb_Àngth
 < 
MIN_SCSI_CDBSZ
) {

225 
	`Ârötf
(
°dîr
, "CDBÅoÿsh‹à(mö. %d byãs)\n", 
MIN_SCSI_CDBSZ
);

226  
SG_LIB_SYNTAX_ERROR
;

230 
	}
}

234 
	$my_memÆign
(
Àngth
, ** 
wrkBufÂ
)

236 * 
wrkBuff
;

237 
size_t
 
psz
;

239 #ifde‡
SG_LIB_MINGW


240 
psz
 = 
	`gë∑gesize
();

242 
psz
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

244 
wrkBuff
 = (*)
	`ˇŒoc
(
Àngth
 + 
psz
, 1);

245 i‡(
NULL
 =
wrkBuff
) {

246 i‡(
wrkBufÂ
)

247 *
wrkBufÂ
 = 
NULL
;

248  
NULL
;

249 } i‡(
wrkBufÂ
)

250 *
wrkBufÂ
 = 
wrkBuff
;

252  (*)((()
wrkBuff
 + 
psz
 - 1) &

253 (~(
psz
 - 1)));

254 
	}
}

257 
	$skù
(
fd
, 
off_t
 
off£t
)

259 
off_t
 
ªmaö
;

260 
buf„r
[512];

262 i‡(
	`l£ek
(
fd
, 
off£t
, 
SEEK_SET
) >= 0) {

267 
ªmaö
 = 
off£t
;

268 
ªmaö
 > 0) {

269 
ssize_t
 
amou¡
, 
d⁄e
;

270 
amou¡
 = (
ªmaö
 < (
off_t
)(
buf„r
)) ?Ñemain

271 : (
off_t
)(
buf„r
);

272 
d⁄e
 = 
	`ªad
(
fd
, 
buf„r
, 
amou¡
);

273 i‡(
d⁄e
 < 0) {

274 
	`≥º‹
("ErrorÑeading input data");

275  
SG_LIB_FILE_ERROR
;

276 } i‡(
d⁄e
 == 0) {

277 
	`Ârötf
(
°dîr
, "EOF on input file/stream\n");

278  
SG_LIB_FILE_ERROR
;

280 
ªmaö
 -
d⁄e
;

285 
	}
}

288 
	$„tch_d©aout
(
›ts_t
 *
›t•
)

290 *
buf
 = 
NULL
;

291 *
wrkBuf
 = 
NULL
;

292 
fd
, 
Àn
;

293 
ok
 = 0;

295 i‡(
›t•
->
d©aout_fûe
) {

296 
fd
 = 
	`›í
(
›t•
->
d©aout_fûe
, 
O_RDONLY
);

297 i‡(
fd
 < 0) {

298 
	`≥º‹
(
›t•
->
d©aout_fûe
);

299 
baû
;

303 
fd
 = 
STDIN_FILENO
;

305 i‡(
	`sg_£t_bö¨y_mode
(
fd
) < 0) {

306 
	`≥º‹
("sg_set_binary_mode");

307 
baû
;

310 i‡(
›t•
->
d©aout_off£t
 > 0) {

311 i‡(
	`skù
(
fd
, 
›t•
->
d©aout_off£t
) != 0) {

312 
baû
;

316 
buf
 = 
	`my_memÆign
(
›t•
->
d©aout_Àn
, &
wrkBuf
);

317 i‡(
buf
 =
NULL
) {

318 
	`≥º‹
("malloc");

319 
baû
;

322 
Àn
 = 
	`ªad
(
fd
, 
buf
, 
›t•
->
d©aout_Àn
);

323 i‡(
Àn
 < 0) {

324 
	`≥º‹
("FailedÅoÑead input data");

325 
baû
;

326 } i‡(
Àn
 < 
›t•
->
d©aout_Àn
) {

327 
	`Ârötf
(
°dîr
, "EOF on input file/stream\n");

328 
baû
;

331 
ok
 = 1;

333 
baû
:

334 i‡(
fd
 >0 && fd !
STDIN_FILENO
)

335 
	`˛o£
(
fd
);

336 i‡(!
ok
) {

337 i‡(
wrkBuf
)

338 
	`‰ì
(
wrkBuf
);

339  
NULL
;

341  
buf
;

342 
	}
}

345 
	$wrôe_d©aout
(c⁄° *
fûíame
, *
buf
, 
Àn
)

347 
ªt
 = 
SG_LIB_FILE_ERROR
;

348 
fd
;

350 i‡((
fûíame
 =
NULL
) ||

351 ((1 =
	`°æí
(
fûíame
)) && ('-' == filename[0])))

352 
fd
 = 
STDOUT_FILENO
;

354 
fd
 = 
	`¸ót
(
fûíame
, 0666);

355 i‡(
fd
 < 0) {

356 
	`≥º‹
(
fûíame
);

357 
baû
;

360 i‡(
	`sg_£t_bö¨y_mode
(
fd
) < 0) {

361 
	`≥º‹
("sg_set_binary_mode");

362 
baû
;

365 i‡(
	`wrôe
(
fd
, 
buf
, 
Àn
) !=Üen) {

366 
	`≥º‹
(
fûíame
 ? filename : "stdout");

367 
baû
;

370 
ªt
 = 0;

372 
baû
:

373 i‡(
fd
 >0 && fd !
STDOUT_FILENO
)

374 
	`˛o£
(
fd
);

375  
ªt
;

376 
	}
}

379 
	$maö
(
¨gc
, *
¨gv
[])

381 
ªt
 = 0;

382 
ªs_ˇt
, 
°©us
, 
¶í
, 
k
, 
ªt2
;

383 
›ts_t
 
›ts
;

384 
sg_fd
 = -1;

385 
sg_±_ba£
 *
±vp
 = 
NULL
;

386 
£n£_buf„r
[32];

387 * 
dx„r_buf„r_ö
 = 
NULL
;

388 * 
dx„r_buf„r_out
 = 
NULL
;

389 *
wrkBuf
 = 
NULL
;

390 
b
[128];

392 
	`mem£t
(&
›ts
, 0, (opts));

393 
›ts
.
timeout
 = 
DEFAULT_TIMEOUT
;

394 
ªt
 = 
	`¥o˚ss_˛
(&
›ts
, 
¨gc
, 
¨gv
);

395 i‡(
ªt
 != 0) {

396 
	`ußge
();

397 
d⁄e
;

398 } i‡(
›ts
.
do_hñp
) {

399 
	`ußge
();

400 
d⁄e
;

401 } i‡(
›ts
.
do_vîsi⁄
) {

402 
	`vîsi⁄
();

403 
d⁄e
;

406 
sg_fd
 = 
	`scsi_±_›í_devi˚
(
›ts
.
devi˚_«me
, o±s.
ªad⁄ly
,

407 
›ts
.
do_vîbo£
);

408 i‡(
sg_fd
 < 0) {

409 
	`Ârötf
(
°dîr
, "%s: %s\n", 
›ts
.
devi˚_«me
, 
	`ß„_°ªº‹
(-
sg_fd
));

410 
ªt
 = 
SG_LIB_FILE_ERROR
;

411 
d⁄e
;

414 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

415 i‡(
±vp
 =
NULL
) {

416 
	`Ârötf
(
°dîr
, "out of memory\n");

417 
ªt
 = 
SG_LIB_CAT_OTHER
;

418 
d⁄e
;

420 i‡(
›ts
.
do_vîbo£
) {

421 
	`Ârötf
(
°dîr
, " cdbÅo send: ");

422 
k
 = 0; k < 
›ts
.
cdb_Àngth
; ++k)

423 
	`Ârötf
(
°dîr
, "%02x ", 
›ts
.
cdb
[
k
]);

424 
	`Ârötf
(
°dîr
, "\n");

425 i‡(
›ts
.
do_vîbo£
 > 2) {

426 
	`sg_gë_comm™d_«me
(
›ts
.
cdb
, 0, (
b
) - 1, b);

427 
b
[(b) - 1] = '\0';

428 
	`Ârötf
(
°dîr
, " Comm™dÇame: %s\n", 
b
);

431 
	`£t_scsi_±_cdb
(
±vp
, 
›ts
.
cdb
, o±s.
cdb_Àngth
);

432 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_buf„r
, (sense_buffer));

434 i‡(
›ts
.
do_d©aout
) {

435 
dx„r_buf„r_out
 = 
	`„tch_d©aout
(&
›ts
);

436 i‡(
dx„r_buf„r_out
 =
NULL
) {

437 
ªt
 = 
SG_LIB_CAT_OTHER
;

438 
d⁄e
;

440 
	`£t_scsi_±_d©a_out
(
±vp
, 
dx„r_buf„r_out
, 
›ts
.
d©aout_Àn
);

442 i‡(
›ts
.
do_d©aö
) {

443 
dx„r_buf„r_ö
 = 
	`my_memÆign
(
›ts
.
d©aö_Àn
, &
wrkBuf
);

444 i‡(
dx„r_buf„r_ö
 =
NULL
) {

445 
	`≥º‹
("malloc");

446 
ªt
 = 
SG_LIB_CAT_OTHER
;

447 
d⁄e
;

449 
	`£t_scsi_±_d©a_ö
(
±vp
, 
dx„r_buf„r_ö
, 
›ts
.
d©aö_Àn
);

452 
ªt
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
›ts
.
timeout
, o±s.
do_vîbo£
);

453 i‡(
ªt
 > 0) {

454 i‡(
SCSI_PT_DO_BAD_PARAMS
 =
ªt
) {

455 
	`Ârötf
(
°dîr
, "do_scsi_pt: badÖassÅhrough setup\n");

456 
ªt
 = 
SG_LIB_CAT_OTHER
;

457 } i‡(
SCSI_PT_DO_TIMEOUT
 =
ªt
) {

458 
	`Ârötf
(
°dîr
, "do_scsi_pt:Åimeout\n");

459 
ªt
 = 
SG_LIB_CAT_TIMEOUT
;

461 
ªt
 = 
SG_LIB_CAT_OTHER
;

462 
d⁄e
;

463 } i‡(
ªt
 < 0) {

464 
	`Ârötf
(
°dîr
, "do_scsi_±: %s\n", 
	`ß„_°ªº‹
(-
ªt
));

465 
ªt
 = 
SG_LIB_CAT_OTHER
;

466 
d⁄e
;

469 
¶í
 = 0;

470 
ªs_ˇt
 = 
	`gë_scsi_±_ªsu…_ˇãg‹y
(
±vp
);

471 
ªs_ˇt
) {

472 
SCSI_PT_RESULT_GOOD
:

473 
ªt
 = 0;

475 
SCSI_PT_RESULT_SENSE
:

476 
¶í
 = 
	`gë_scsi_±_£n£_Àn
(
±vp
);

477 
ªt
 = 
	`sg_îr_ˇãg‹y_£n£
(
£n£_buf„r
, 
¶í
);

479 
SCSI_PT_RESULT_TRANSPORT_ERR
:

480 
	`gë_scsi_±_å™•‹t_îr_°r
(
±vp
, (
b
), b);

481 
	`Ârötf
(
sg_w¨nögs_°rm
, ">>>Åøn•‹àîr‹: %s\n", 
b
);

482 
ªt
 = 
SG_LIB_CAT_OTHER
;

484 
SCSI_PT_RESULT_OS_ERR
:

485 
	`gë_scsi_±_os_îr_°r
(
±vp
, (
b
), b);

486 
	`Ârötf
(
sg_w¨nögs_°rm
, ">>> o†îr‹: %s\n", 
b
);

487 
ªt
 = 
SG_LIB_CAT_OTHER
;

490 
	`Ârötf
(
sg_w¨nögs_°rm
, ">>> unknownÖassÅhroughÑesult "

491 "ˇãg‹y (%d)\n", 
ªs_ˇt
);

492 
ªt
 = 
SG_LIB_CAT_OTHER
;

496 
°©us
 = 
	`gë_scsi_±_°©us_ª•⁄£
(
±vp
);

497 
	`Ârötf
(
°dîr
, "SCSI Status: ");

498 
	`sg_¥öt_scsi_°©us
(
°©us
);

499 
	`Ârötf
(
°dîr
, "\n\n");

500 i‡((
SAM_STAT_CHECK_CONDITION
 =
°©us
Ë&& (! 
›ts
.
no_£n£
)) {

501 i‡(
SCSI_PT_RESULT_SENSE
 !
ªs_ˇt
)

502 
¶í
 = 
	`gë_scsi_±_£n£_Àn
(
±vp
);

503 i‡(0 =
¶í
)

504 
	`Ârötf
(
°dîr
, ">>> Strange: status is CHECK CONDITION butÇo "

507 
	`Ârötf
(
°dîr
, "Sense Information:\n");

508 
	`sg_¥öt_£n£
(
NULL
, 
£n£_buf„r
, 
¶í
, (
›ts
.
do_vîbo£
 > 0));

509 
	`Ârötf
(
°dîr
, "\n");

513 i‡(
›ts
.
do_d©aö
) {

514 
d©a_Àn
 = 
›ts
.
d©aö_Àn
 - 
	`gë_scsi_±_ªsid
(
±vp
);

515 i‡(
d©a_Àn
 == 0) {

516 
	`Ârötf
(
°dîr
, "No dataÑeceived\n");

518 i‡(
›ts
.
d©aö_fûe
 =
NULL
 && !›ts.
d©aö_bö¨y
) {

519 
	`Ârötf
(
°dîr
, "Re˚ived %d byã†o‡d©a:\n", 
d©a_Àn
);

520 
	`dSåHex
((c⁄° *)
dx„r_buf„r_ö
, 
d©a_Àn
, 0);

522 c⁄° * 
˝
 = "stdout";

524 i‡(
›ts
.
d©aö_fûe
 &&

525 ! ((1 =
	`°æí
(
›ts
.
d©aö_fûe
)) &&

526 ('-' =
›ts
.
d©aö_fûe
[0])))

527 
˝
 = 
›ts
.
d©aö_fûe
;

528 
	`Ârötf
(
°dîr
, "Wrôög %d byã†o‡d©®tÿ%s\n", 
d©a_Àn
,

529 
˝
);

530 
ªt2
 = 
	`wrôe_d©aout
(
›ts
.
d©aö_fûe
, 
dx„r_buf„r_ö
,

531 
d©a_Àn
);

532 i‡(0 !
ªt2
) {

533 i‡(0 =
ªt
)

534 
ªt
 = 
ªt2
;

535 
d⁄e
;

541 
d⁄e
:

542 i‡(
wrkBuf
)

543 
	`‰ì
(
wrkBuf
);

544 i‡(
±vp
)

545 
	`de°ru˘_scsi_±_obj
(
±vp
);

546 i‡(
sg_fd
 >= 0)

547 
	`scsi_±_˛o£_devi˚
(
sg_fd
);

548  
ªt
;

549 
	}
}

	@src/sg_rbuf.c

14 
	#_XOPEN_SOURCE
 500

	)

15 #i‚de‡
_GNU_SOURCE


16 
	#_GNU_SOURCE


	)

19 
	~<uni°d.h
>

20 
	~<f˙é.h
>

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<î∫o.h
>

25 
	~<gë›t.h
>

26 
	#__STDC_FORMAT_MACROS
 1

	)

27 
	~<öây≥s.h
>

28 
	~<sys/io˘l.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<sys/°©.h
>

31 
	~<sys/mm™.h
>

32 
	~<sys/time.h
>

34 #ifde‡
HAVE_CONFIG_H


35 
	~"c⁄fig.h
"

37 
	~"sg_lib.h
"

38 
	~"sg_io_löux.h
"

40 
	#RB_MODE_DESC
 3

	)

41 
	#RB_MODE_DATA
 2

	)

42 
	#RB_DESC_LEN
 4

	)

43 
	#RB_DEF_SIZE
 (200*1024*1024)

	)

44 
	#RB_OPCODE
 0x3C

	)

45 
	#RB_CMD_LEN
 10

	)

49 #i‚de‡
SG_FLAG_MMAP_IO


50 
	#SG_FLAG_MMAP_IO
 4

	)

54 c⁄° * 
	gvîsi⁄_°r
 = "4.89 20130507";

56 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

71 
	s›ts_t
 {

72 
	mdo_buf„r
;

73 
	mdo_dio
;

74 
	mdo_hñp
;

75 
	mdo_mm≠
;

76 
	mdo_quick
;

77 
öt64_t
 
	mdo_size
;

78 
	mdo_time
;

79 
	mdo_vîbo£
;

80 
	mdo_vîsi⁄
;

81 c⁄° * 
	mdevi˚_«me
;

82 
	m›t_√w
;

87 
	$ußge
()

89 
	`Ârötf
(
°dîr
, "Usage: sg_rbuf [--buffer=EACH] [--dio] [--help] "

93 
	`Ârötf
(
°dîr
, " where:\n"

99 
	`Ârötf
(
°dîr
,

107 
	}
}

110 
	$ußge_ﬁd
()

112 
	`¥ötf
("Usage: sg_rbuf [-b=EACH_KIB] [-d] [-m] [-q] [-s=OVERALL_MIB] "

114 
	`¥ötf
(" where:\n");

115 
	`¥ötf
(" -b=EACH_KIBÇum is buffer sizeÅo use (in KiB)\n");

116 
	`¥ötf
(" -dÑequests dio ('-q' overrides it)\n");

117 
	`¥ötf
(" -mÑequests mmap-ed IO (overrides -q, -d)\n");

118 
	`¥ötf
(" -q quick, don't xferÅo user space\n");

119 
	`¥ötf
(" -s=OVERALL_MIBÇum isÅotal sizeÅoÑead (in MiB) "

121 
	`¥ötf
(" maximumÅotal size is 4000 MiB\n");

122 
	`¥ötf
(" -tÅimeÅhe dataÅransfer\n");

123 
	`¥ötf
(" -v increase verbosity (more debug)\n");

124 
	`¥ötf
(" -VÖrint version stringÅhenÉxit\n\n");

125 
	`¥ötf
("Use SCSI READ BUFFER command (data mode, buffer id 0) "

127 
	}
}

130 
	$ußge_f‹
(c⁄° 
›ts_t
 * 
›t•
)

132 i‡(
›t•
->
›t_√w
)

133 
	`ußge
();

135 
	`ußge_ﬁd
();

136 
	}
}

139 
	$¥o˚ss_˛_√w
(
›ts_t
 * 
›t•
, 
¨gc
, * 
¨gv
[])

141 
c
, 
n
;

142 
öt64_t
 
¬
;

145 
›ti⁄_ödex
 = 0;

147 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "b:dhmNOqs:tvV", 
l⁄g_›ti⁄s
,

148 &
›ti⁄_ödex
);

149 i‡(
c
 == -1)

152 
c
) {

154 
n
 = 
	`sg_gë_num
(
›èrg
);

155 i‡(
n
 < 0) {

156 
	`Ârötf
(
°dîr
, "badárgumentÅo '--buffer'\n");

157 
	`ußge_f‹
(
›t•
);

158  
SG_LIB_SYNTAX_ERROR
;

160 
›t•
->
do_buf„r
 = 
n
;

163 ++
›t•
->
do_dio
;

167 ++
›t•
->
do_hñp
;

170 ++
›t•
->
do_mm≠
;

175 
›t•
->
›t_√w
 = 0;

178 ++
›t•
->
do_quick
;

181 
¬
 = 
	`sg_gë_Œnum
(
›èrg
);

182 i‡(
¬
 < 0) {

183 
	`Ârötf
(
°dîr
, "badárgumentÅo '--size'\n");

184 
	`ußge_f‹
(
›t•
);

185  
SG_LIB_SYNTAX_ERROR
;

187 
›t•
->
do_size
 = 
¬
;

190 ++
›t•
->
do_time
;

193 ++
›t•
->
do_vîbo£
;

196 ++
›t•
->
do_vîsi⁄
;

199 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê%¯[0x%x]\n", 
c
, c);

200 i‡(
›t•
->
do_hñp
)

202 
	`ußge_f‹
(
›t•
);

203  
SG_LIB_SYNTAX_ERROR
;

206 i‡(
›töd
 < 
¨gc
) {

207 i‡(
NULL
 =
›t•
->
devi˚_«me
) {

208 
›t•
->
devi˚_«me
 = 
¨gv
[
›töd
];

209 ++
›töd
;

211 i‡(
›töd
 < 
¨gc
) {

212 ; 
›töd
 < 
¨gc
; ++optind)

213 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

214 
¨gv
[
›töd
]);

215 
	`ußge_f‹
(
›t•
);

216  
SG_LIB_SYNTAX_ERROR
;

220 
	}
}

223 
	$¥o˚ss_˛_ﬁd
(
›ts_t
 * 
›t•
, 
¨gc
, * 
¨gv
[])

225 
k
, 
jmp_out
, 
∂í
, 
num
;

226 
öt64_t
 
¬
;

227 c⁄° * 
˝
;

229 
k
 = 1; k < 
¨gc
; ++k) {

230 
˝
 = 
¨gv
[
k
];

231 
∂í
 = 
	`°æí
(
˝
);

232 i‡(
∂í
 <= 0)

234 i‡('-' =*
˝
) {

235 --
∂í
, ++
˝
, 
jmp_out
 = 0;Ölen > 0; --plen, ++cp) {

236 *
˝
) {

238 ++
›t•
->
do_dio
;

242 ++
›t•
->
do_hñp
;

245 ++
›t•
->
do_mm≠
;

248 
›t•
->
›t_√w
 = 1;

253 ++
›t•
->
do_quick
;

256 ++
›t•
->
do_time
;

259 ++
›t•
->
do_vîbo£
;

262 ++
›t•
->
do_vîsi⁄
;

265 
jmp_out
 = 1;

268 i‡(
jmp_out
)

271 i‡(
∂í
 <= 0)

273 i‡(0 =
	`°∫cmp
("b=", 
˝
, 2)) {

274 
num
 = 
	`ssˇnf
(
˝
 + 2, "%d", &
›t•
->
do_buf„r
);

275 i‡((1 !
num
Ë|| (
›t•
->
do_buf„r
 <= 0)) {

276 
	`¥ötf
("Couldn't decodeÇumberáfter 'b=' option\n");

277 
	`ußge_f‹
(
›t•
);

278  
SG_LIB_SYNTAX_ERROR
;

280 
›t•
->
do_buf„r
 *= 1024;

282 i‡(0 =
	`°∫cmp
("s=", 
˝
, 2)) {

283 
¬
 = 
	`sg_gë_Œnum
(
›èrg
);

284 i‡(
¬
 < 0) {

285 
	`¥ötf
("Couldn't decodeÇumberáfter 's=' option\n");

286 
	`ußge_f‹
(
›t•
);

287  
SG_LIB_SYNTAX_ERROR
;

289 
›t•
->
do_size
 = 
¬
;

290 
›t•
->
do_size
 *= 1024 * 1024;

291 } i‡(0 =
	`°∫cmp
("-ﬁd", 
˝
, 4))

293 i‡(
jmp_out
) {

294 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄: %s\n", 
˝
);

295 
	`ußge_f‹
(
›t•
);

296  
SG_LIB_SYNTAX_ERROR
;

298 } i‡(0 =
›t•
->
devi˚_«me
)

299 
›t•
->
devi˚_«me
 = 
˝
;

301 
	`Ârötf
(
°dîr
, "too manyárguments, got: %s,ÇotÉxpecting: "

302 "%s\n", 
›t•
->
devi˚_«me
, 
˝
);

303 
	`ußge_f‹
(
›t•
);

304  
SG_LIB_SYNTAX_ERROR
;

308 
	}
}

311 
	$¥o˚ss_˛
(
›ts_t
 * 
›t•
, 
¨gc
, * 
¨gv
[])

313 
ªs
;

314 * 
˝
;

316 
˝
 = 
	`gëív
("SG3_UTILS_OLD_OPTS");

317 i‡(
˝
) {

318 
›t•
->
›t_√w
 = 0;

319 
ªs
 = 
	`¥o˚ss_˛_ﬁd
(
›t•
, 
¨gc
, 
¨gv
);

320 i‡((0 =
ªs
Ë&& 
›t•
->
›t_√w
)

321 
ªs
 = 
	`¥o˚ss_˛_√w
(
›t•
, 
¨gc
, 
¨gv
);

323 
›t•
->
›t_√w
 = 1;

324 
ªs
 = 
	`¥o˚ss_˛_√w
(
›t•
, 
¨gc
, 
¨gv
);

325 i‡((0 =
ªs
Ë&& (0 =
›t•
->
›t_√w
))

326 
ªs
 = 
	`¥o˚ss_˛_ﬁd
(
›t•
, 
¨gc
, 
¨gv
);

328  
ªs
;

329 
	}
}

333 
	$maö
(
¨gc
, * 
¨gv
[])

335 
sg_fd
, 
ªs
, 
j
;

336 
k
, 
num
;

337 
rbCmdBlk
 [
RB_CMD_LEN
];

338 * 
rbBuff
 = 
NULL
;

339 * 
øwp
 = 
NULL
;

340 
£n£_buf„r
[32];

341 
buf_ˇ∑côy
 = 0;

342 
buf_size
 = 0;

343 
öt64_t
 
tŸÆ_size
 = 
RB_DEF_SIZE
;

344 
size_t
 
psz
 = 
	`gë∑gesize
();

345 
dio_öcom∂ëe
 = 0;

346 
sg_io_hdr
 
io_hdr
;

347 
timevÆ
 
°¨t_tm
, 
íd_tm
;

348 #ifde‡
SG_DEBUG


349 
˛ór
 = 1;

351 
›ts_t
 
›ts
;

353 
	`mem£t
(&
›ts
, 0, (opts));

354 
ªs
 = 
	`¥o˚ss_˛
(&
›ts
, 
¨gc
, 
¨gv
);

355 i‡(
ªs
)

356  
SG_LIB_SYNTAX_ERROR
;

357 i‡(
›ts
.
do_hñp
) {

358 
	`ußge_f‹
(&
›ts
);

361 i‡(
›ts
.
do_vîsi⁄
) {

362 
	`Ârötf
(
°dîr
, "Vîsi⁄ såög: %s\n", 
vîsi⁄_°r
);

366 i‡(
NULL
 =
›ts
.
devi˚_«me
) {

367 
	`Ârötf
(
°dîr
, "No DEVICEárgument given\n");

368 
	`ußge_f‹
(&
›ts
);

369  
SG_LIB_SYNTAX_ERROR
;

372 i‡(
›ts
.
do_buf„r
 > 0)

373 
buf_size
 = 
›ts
.
do_buf„r
;

374 i‡(
›ts
.
do_size
 > 0)

375 
tŸÆ_size
 = 
›ts
.
do_size
;

377 
sg_fd
 = 
	`›í
(
›ts
.
devi˚_«me
, 
O_RDONLY
 | 
O_NONBLOCK
);

378 i‡(
sg_fd
 < 0) {

379 
	`≥º‹
("device openÉrror");

380  
SG_LIB_FILE_ERROR
;

383 i‡(
›ts
.
do_mm≠
) {

384 
›ts
.
do_dio
 = 0;

385 
›ts
.
do_quick
 = 0;

387 i‡(
NULL
 =(
øwp
 = 
	`mÆloc
(512))) {

388 
	`¥ötf
("out of memory (query)\n");

389  
SG_LIB_CAT_OTHER
;

391 
rbBuff
 = (*)
øwp
;

393 
	`mem£t
(
rbCmdBlk
, 0, 
RB_CMD_LEN
);

394 
rbCmdBlk
[0] = 
RB_OPCODE
;

395 
rbCmdBlk
[1] = 
RB_MODE_DESC
;

396 
rbCmdBlk
[8] = 
RB_DESC_LEN
;

397 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr
));

398 
io_hdr
.
öãrÁ˚_id
 = 'S';

399 
io_hdr
.
cmd_Àn
 = (
rbCmdBlk
);

400 
io_hdr
.
mx_sb_Àn
 = (
£n£_buf„r
);

401 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

402 
io_hdr
.
dx„r_Àn
 = 
RB_DESC_LEN
;

403 
io_hdr
.
dx„Ω
 = 
rbBuff
;

404 
io_hdr
.
cmdp
 = 
rbCmdBlk
;

405 
io_hdr
.
sbp
 = 
£n£_buf„r
;

406 
io_hdr
.
timeout
 = 60000;

407 i‡(
›ts
.
do_vîbo£
) {

408 
	`Ârötf
(
°dîr
, " Read buffer cdb: ");

409 
k
 = 0; k < 
RB_CMD_LEN
; ++k)

410 
	`Ârötf
(
°dîr
, "%02x ", 
rbCmdBlk
[
k
]);

411 
	`Ârötf
(
°dîr
, "\n");

415 i‡(
	`io˘l
(
sg_fd
, 
SG_IO
, &
io_hdr
) < 0) {

416 
	`≥º‹
("SG_IO READ BUFFER descriptorÉrror");

417 i‡(
øwp
Ë
	`‰ì
(rawp);

418  
SG_LIB_CAT_OTHER
;

421 i‡(
›ts
.
do_vîbo£
 > 2)

422 
	`Ârötf
(
°dîr
, " duøti⁄=%u ms\n", 
io_hdr
.
duøti⁄
);

424 
ªs
 = 
	`sg_îr_ˇãg‹y3
(&
io_hdr
);

425 
ªs
) {

426 
SG_LIB_CAT_RECOVERED
:

427 
	`sg_chk_n_¥öt3
("READ BUFFER des¸ùt‹, c⁄töuög", &
io_hdr
,

428 
›ts
.
do_vîbo£
 > 1);

430 
SG_LIB_CAT_CLEAN
:

433 
	`sg_chk_n_¥öt3
("READ BUFFER des¸ùt‹Éº‹", &
io_hdr
,

434 
›ts
.
do_vîbo£
 > 1);

435 i‡(
øwp
Ë
	`‰ì
(rawp);

436  (
ªs
 >0Ë?Ñe†: 
SG_LIB_CAT_OTHER
;

439 
buf_ˇ∑côy
 = ((
rbBuff
[1] << 16) | (rbBuff[2] << 8) |ÑbBuff[3]);

440 
	`¥ötf
("READ BUFFERÑeports: buffer capacity=%d, offset boundary=%d\n",

441 
buf_ˇ∑côy
, ()
rbBuff
[0]);

443 i‡(0 =
buf_size
)

444 
buf_size
 = 
buf_ˇ∑côy
;

445 i‡(
buf_size
 > 
buf_ˇ∑côy
) {

446 
	`¥ötf
("Requested buffer size=%dÉxceedsÑeported capacity=%d\n",

447 
buf_size
, 
buf_ˇ∑côy
);

448 i‡(
øwp
Ë
	`‰ì
(rawp);

449  
SG_LIB_CAT_MALFORMED
;

451 i‡(
øwp
) {

452 
	`‰ì
(
øwp
);

453 
øwp
 = 
NULL
;

456 i‡(! 
›ts
.
do_dio
) {

457 
k
 = 
buf_size
;

458 i‡(
›ts
.
do_mm≠
 && (0 !(
k
 % 
psz
)))

459 
k
 = ((k / 
psz
) + 1) *Ösz;

460 
ªs
 = 
	`io˘l
(
sg_fd
, 
SG_SET_RESERVED_SIZE
, &
k
);

461 i‡(
ªs
 < 0)

462 
	`≥º‹
("SG_SET_RESERVED_SIZEÉrror");

465 i‡(
›ts
.
do_mm≠
) {

466 
rbBuff
 = (*)
	`mm≠
(
NULL
, 
buf_size
, 
PROT_READ
, 
MAP_SHARED
,

467 
sg_fd
, 0);

468 i‡(
MAP_FAILED
 =
rbBuff
) {

469 i‡(
ENOMEM
 =
î∫o
) {

470 
	`Ârötf
(
°dîr
, "mmap() out of memory,Åryá smaller "

471 "buf„∏sizêth™ %d byãs\n", 
buf_size
);

472 i‡(
›ts
.
›t_√w
)

473 
	`Ârötf
(
°dîr
, " [with '--buffer=EACH' where EACH "

476 
	`Ârötf
(
°dîr
, " [with '-b=EACH' where EACH is in "

479 
	`≥º‹
("error using mmap()");

480  
SG_LIB_CAT_OTHER
;

484 
øwp
 = (*)
	`mÆloc
(
buf_size
 + (
›ts
.
do_dio
 ? 
psz
 : 0));

485 i‡(
NULL
 =
øwp
) {

486 
	`¥ötf
("out of memory (data)\n");

487  
SG_LIB_CAT_OTHER
;

489 i‡(
›ts
.
do_dio
)

490 
rbBuff
(*)((()
øwp
 + 
psz
 - 1) &

491 (~(
psz
 - 1)));

493 
rbBuff
 = (*)
øwp
;

496 
num
 = 
tŸÆ_size
 / 
buf_size
;

497 i‡(
›ts
.
do_time
) {

498 
°¨t_tm
.
tv_£c
 = 0;

499 
°¨t_tm
.
tv_u£c
 = 0;

500 
	`gëtimeofday
(&
°¨t_tm
, 
NULL
);

503 
k
 = 0; k < 
num
; ++k) {

504 
	`mem£t
(
rbCmdBlk
, 0, 
RB_CMD_LEN
);

505 
rbCmdBlk
[0] = 
RB_OPCODE
;

506 
rbCmdBlk
[1] = 
RB_MODE_DATA
;

507 
rbCmdBlk
[6] = 0xf‡& (
buf_size
 >> 16);

508 
rbCmdBlk
[7] = 0xf‡& (
buf_size
 >> 8);

509 
rbCmdBlk
[8] = 0xf‡& 
buf_size
;

510 #ifde‡
SG_DEBUG


511 
	`mem£t
(
rbBuff
, 0, 
buf_size
);

514 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr
));

515 
io_hdr
.
öãrÁ˚_id
 = 'S';

516 
io_hdr
.
cmd_Àn
 = (
rbCmdBlk
);

517 
io_hdr
.
mx_sb_Àn
 = (
£n£_buf„r
);

518 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

519 
io_hdr
.
dx„r_Àn
 = 
buf_size
;

520 i‡(! 
›ts
.
do_mm≠
)

521 
io_hdr
.
dx„Ω
 = 
rbBuff
;

522 
io_hdr
.
cmdp
 = 
rbCmdBlk
;

523 
io_hdr
.
sbp
 = 
£n£_buf„r
;

524 
io_hdr
.
timeout
 = 20000;

525 
io_hdr
.
∑ck_id
 = 
k
;

526 i‡(
›ts
.
do_mm≠
)

527 
io_hdr
.
Êags
 |
SG_FLAG_MMAP_IO
;

528 i‡(
›ts
.
do_dio
)

529 
io_hdr
.
Êags
 |
SG_FLAG_DIRECT_IO
;

530 i‡(
›ts
.
do_quick
)

531 
io_hdr
.
Êags
 |
SG_FLAG_NO_DXFER
;

532 i‡(
›ts
.
do_vîbo£
 > 1) {

533 
	`Ârötf
(
°dîr
, " Read buffer cdb: ");

534 
j
 = 0; j < 
RB_CMD_LEN
; ++j)

535 
	`Ârötf
(
°dîr
, "%02x ", 
rbCmdBlk
[
j
]);

536 
	`Ârötf
(
°dîr
, "\n");

539 i‡(
	`io˘l
(
sg_fd
, 
SG_IO
, &
io_hdr
) < 0) {

540 i‡(
ENOMEM
 =
î∫o
) {

541 
	`Ârötf
(
°dîr
, "SG_IO data: out of memory,Åryá smaller "

542 "buf„∏sizêth™ %d byãs\n", 
buf_size
);

543 i‡(
›ts
.
›t_√w
)

544 
	`Ârötf
(
°dîr
, " [with '--buffer=EACH' where EACH "

547 
	`Ârötf
(
°dîr
, " [with '-b=EACH' where EACH is in "

550 
	`≥º‹
("SG_IO READ BUFFER dataÉrror");

551 i‡(
øwp
Ë
	`‰ì
(rawp);

552  
SG_LIB_CAT_OTHER
;

555 i‡(
›ts
.
do_vîbo£
 > 2)

556 
	`Ârötf
(
°dîr
, " duration=%u ms\n",

557 
io_hdr
.
duøti⁄
);

559 
ªs
 = 
	`sg_îr_ˇãg‹y3
(&
io_hdr
);

560 
ªs
) {

561 
SG_LIB_CAT_CLEAN
:

563 
SG_LIB_CAT_RECOVERED
:

564 
	`sg_chk_n_¥öt3
("READ BUFFER d©a, c⁄töuög", &
io_hdr
,

565 
›ts
.
do_vîbo£
 > 1);

568 
	`sg_chk_n_¥öt3
("READ BUFFER d©®îr‹", &
io_hdr
,

569 
›ts
.
do_vîbo£
 > 1);

570 i‡(
øwp
Ë
	`‰ì
(rawp);

571  (
ªs
 >0Ë?Ñe†: 
SG_LIB_CAT_OTHER
;

573 i‡(
›ts
.
do_dio
 &&

574 ((
io_hdr
.
öfo
 & 
SG_INFO_DIRECT_IO_MASK
Ë!
SG_INFO_DIRECT_IO
))

575 
dio_öcom∂ëe
 = 1;

577 #ifde‡
SG_DEBUG


578 i‡(
˛ór
) {

579 
j
 = 0; j < 
buf_size
; ++j) {

580 i‡(
rbBuff
[
j
] != 0) {

581 
˛ór
 = 0;

588 i‡((
›ts
.
do_time
Ë&& (
°¨t_tm
.
tv_£c
 || sèπ_tm.
tv_u£c
)) {

589 
timevÆ
 
ªs_tm
;

590 
a
, 
b
;

592 
	`gëtimeofday
(&
íd_tm
, 
NULL
);

593 
ªs_tm
.
tv_£c
 = 
íd_tm
.tv_£¯- 
°¨t_tm
.tv_sec;

594 
ªs_tm
.
tv_u£c
 = 
íd_tm
.tv_u£¯- 
°¨t_tm
.tv_usec;

595 i‡(
ªs_tm
.
tv_u£c
 < 0) {

596 --
ªs_tm
.
tv_£c
;

597 
ªs_tm
.
tv_u£c
 += 1000000;

599 
a
 = 
ªs_tm
.
tv_£c
;

600 
a
 +(0.000001 * 
ªs_tm
.
tv_u£c
);

601 
b
 = ()
buf_size
 * 
num
;

602 
	`¥ötf
("timeÅoÑead data from buffer was %d.%06d secs",

603 ()
ªs_tm
.
tv_£c
, (Ïes_tm.
tv_u£c
);

604 i‡((
a
 > 0.00001Ë&& (
b
 > 511))

605 
	`¥ötf
(", %.2‡MB/£c\n", 
b
 / (
a
 * 1000000.0));

607 
	`¥ötf
("\n");

609 i‡(
dio_öcom∂ëe
)

610 
	`¥ötf
(">> direct IOÑequested butÇot done\n");

611 
	`¥ötf
("Ród %"
PRId64
" MiB (actual: %"PRId64" bytes), buffer size=%d KiB "

612 "(%d byãs)\n", (
tŸÆ_size
 / (1024 * 1024)),

613 (
öt64_t
)
num
 * 
buf_size
, buf_size / 1024, buf_size);

615 i‡(
øwp
Ë
	`‰ì
(rawp);

616 
ªs
 = 
	`˛o£
(
sg_fd
);

617 i‡(
ªs
 < 0) {

618 
	`≥º‹
("closeÉrror");

619  
SG_LIB_FILE_ERROR
;

621 #ifde‡
SG_DEBUG


622 i‡(
˛ór
)

623 
	`¥ötf
("read bufferálways zero\n");

625 
	`¥ötf
("read bufferÇon-zero\n");

627  (
ªs
 >0Ë?Ñe†: 
SG_LIB_CAT_OTHER
;

628 
	}
}

	@src/sg_rdac.c

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<uni°d.h
>

19 
	~<°rög.h
>

21 #ifde‡
HAVE_CONFIG_H


22 
	~"c⁄fig.h
"

24 
	~"sg_lib.h
"

25 
	~"sg_cmds_basic.h
"

28 c⁄° * 
	gvîsi⁄_°r
 = "1.06 20130507";

30 
	gmode6_hdr
[] = {

37 
	gblock_des¸ùt‹
[] = {

44 
	srdac_Àgacy_∑ge
 {

45 
	m∑ge_code
;

46 
	m∑ge_Àngth
;

47 
	mcuºít_£rül
[16];

48 
	mÆã∫©e_£rül
[16];

49 
	mcuºít_mode_msb
;

50 
	mcuºít_mode_lsb
;

51 
	mÆã∫©e_mode_msb
;

52 
	mÆã∫©e_mode_lsb
;

53 
	mquõs˚n˚
;

54 
	m›ti⁄s
;

55 
	mlun_èbÀ
[32];

56 
	mlun_èbÀ_exp
[32];

57 
	mª£rved
;

60 
	gdo_vîbo£
 = 0;

62 
	$dump_mode_∑ge
–*
∑ge
, 
Àn
 )

64 
i
, 
k
;

66 
k
 = 0; k < 
Àn
; k += 16) {

68 
	`¥ötf
("%x:",
k
 / 16);

69 
i
 = 0; i < 16; i++) {

70 
	`¥ötf
(" %02x", 
∑ge
[
k
 + 
i
]);

71 i‡(
k
 + 
i
 >
Àn
) {

72 
	`¥ötf
("\n");

76 
	`¥ötf
("\n");

79 
	}
}

81 
	#MX_ALLOC_LEN
 (1024 * 4)

	)

82 
	#RDAC_CONTROLLER_PAGE
 0x2c

	)

83 
	#RDAC_CONTROLLER_PAGE_LEN
 0x68

	)

84 
	#LEGACY_PAGE
 0x00

	)

85 
	#EXPANDED_LUN_SPACE_PAGE
 0x01

	)

86 
	#RDAC_FAIL_ALL_PATHS
 0x1

	)

87 
	#RDAC_FAIL_SELECTED_PATHS
 0x2

	)

88 
	#RDAC_FORCE_QUIESCENCE
 0x2

	)

89 
	#RDAC_QUIESCENCE_TIME
 10

	)

91 
	$Áû_Æl_∑ths
(
fd
)

93 
Áû_∑ths_pg
[118];

94 
rdac_Àgacy_∑ge
 *
rdac_∑ge
;

95 
ªs
;

97 
	`mem£t
(
Áû_∑ths_pg
, 0, 118);

98 
	`mem˝y
(
Áû_∑ths_pg
, 
mode6_hdr
, 4);

99 
	`mem˝y
(
Áû_∑ths_pg
 + 4, 
block_des¸ùt‹
, 8);

100 
rdac_∑ge
 = (
rdac_Àgacy_∑ge
 *)(
Áû_∑ths_pg
 + 4 + 8);

101 
rdac_∑ge
->
∑ge_code
 = 
RDAC_CONTROLLER_PAGE
 | 0x40;

102 
rdac_∑ge
->
∑ge_Àngth
 = 
RDAC_CONTROLLER_PAGE_LEN
;

103 
rdac_∑ge
->
quõs˚n˚
 = 
RDAC_QUIESCENCE_TIME
;

104 
rdac_∑ge
->
›ti⁄s
 = 
RDAC_FORCE_QUIESCENCE
;

105 
rdac_∑ge
->
cuºít_mode_lsb
 = 
RDAC_FAIL_ALL_PATHS
;

107 
ªs
 = 
	`sg_Œ_mode_£À˘6
(
fd
, 1 , 0 ,

108 
Áû_∑ths_pg
, 118,

109 1, (
do_vîbo£
 ? 2 : 0));

111 
ªs
) {

113 i‡(
do_vîbo£
)

114 
	`Ârötf
(
°dîr
, "failÖaths successful\n");

116 
SG_LIB_CAT_INVALID_OP
:

117 
	`Ârötf
(
°dîr
, "failÖathsÖage failed (Invalid opcode)\n");

119 
SG_LIB_CAT_ILLEGAL_REQ
:

120 
	`Ârötf
(
°dîr
, "failÖathsÖage failed (illegalÑequest)\n");

122 
SG_LIB_CAT_NOT_READY
:

123 
	`Ârötf
(
°dîr
, "failÖathsÖage failed (notÑeady)\n");

125 
SG_LIB_CAT_UNIT_ATTENTION
:

126 
	`Ârötf
(
°dîr
, "failÖathsÖage failed (unitáttention)\n");

128 
SG_LIB_CAT_ABORTED_COMMAND
:

129 
	`Ârötf
(
°dîr
, "failÖathsÖage failed (aborted command)\n");

132 i‡(
do_vîbo£
)

133 
	`Ârötf
(
°dîr
, "failÖaths failed\n");

137  
ªs
;

138 
	}
}

140 
	$Áû_this_∑th
(
fd
, 
lun
)

142 
Áû_∑ths_pg
[118];

143 
rdac_Àgacy_∑ge
 *
rdac_∑ge
;

144 
ªs
;

146 
	`mem£t
(
Áû_∑ths_pg
, 0, 118);

147 
	`mem˝y
(
Áû_∑ths_pg
, 
mode6_hdr
, 4);

148 
	`mem˝y
(
Áû_∑ths_pg
 + 4, 
block_des¸ùt‹
, 8);

149 
rdac_∑ge
 = (
rdac_Àgacy_∑ge
 *)(
Áû_∑ths_pg
 + 4 + 8);

150 
rdac_∑ge
->
∑ge_code
 = 
RDAC_CONTROLLER_PAGE
 | 0x40;

151 
rdac_∑ge
->
∑ge_Àngth
 = 
RDAC_CONTROLLER_PAGE_LEN
;

152 
rdac_∑ge
->
cuºít_mode_lsb
 = 
RDAC_FAIL_SELECTED_PATHS
;

153 
rdac_∑ge
->
quõs˚n˚
 = 
RDAC_QUIESCENCE_TIME
;

154 
rdac_∑ge
->
›ti⁄s
 = 
RDAC_FORCE_QUIESCENCE
;

155 
	`mem£t
(
rdac_∑ge
->
lun_èbÀ
, 0x0, 32);

156 
rdac_∑ge
->
lun_èbÀ
[
lun
] = 0x81;

158 
ªs
 = 
	`sg_Œ_mode_£À˘6
(
fd
, 1 , 0 ,

159 
Áû_∑ths_pg
, 118,

160 1, (
do_vîbo£
 ? 2 : 0));

162 
ªs
) {

164 i‡(
do_vîbo£
)

165 
	`Ârötf
(
°dîr
, "failÖaths successful\n");

167 
SG_LIB_CAT_INVALID_OP
:

168 
	`Ârötf
(
°dîr
, "failÖathsÖage failed (Invalid opcode)\n");

170 
SG_LIB_CAT_NOT_READY
:

171 
	`Ârötf
(
°dîr
, "failÖathsÖage failed (notÑeady)\n");

173 
SG_LIB_CAT_UNIT_ATTENTION
:

174 
	`Ârötf
(
°dîr
, "failÖathsÖage failed (unitáttention)\n");

176 
SG_LIB_CAT_ABORTED_COMMAND
:

177 
	`Ârötf
(
°dîr
, "failÖathsÖage failed (aborted command)\n");

179 
SG_LIB_CAT_ILLEGAL_REQ
:

180 
	`Ârötf
(
°dîr
, "failÜun %dÖage failed (illegalÑequest)\n",

181 
lun
);

184 i‡(
do_vîbo£
)

185 
	`Ârötf
(
°dîr
, "failÖaths failed\n");

189  
ªs
;

190 
	}
}

192 
	$¥öt_rdac_mode
–*
±r
 )

194 
rdac_Àgacy_∑ge
 *
rdac_±r
;

195 
i
, 
k
, 
bd_Àn
;

197 
bd_Àn
 = 
±r
[3];

199 
rdac_±r
 = (
rdac_Àgacy_∑ge
 *)(
±r
 + 4 + 
bd_Àn
);

201 
	`¥ötf
("RDAC LegacyÖage\n");

202 
	`¥ötf
(" Controller serial: %s\n",

203 
rdac_±r
->
cuºít_£rül
);

204 
	`¥ötf
(" Alternate controller serial: %s\n",

205 
rdac_±r
->
Æã∫©e_£rül
);

206 
	`¥ötf
(" RDAC mode (redundantÖrocessor): ");

207 
rdac_±r
->
cuºít_mode_msb
) {

209 
	`¥ötf
("alternate controllerÇotÖresent; ");

212 
	`¥ötf
("alternate controllerÖresent; ");

215 
	`¥ötf
("(Unknown controller status 0x%x); ",

216 
rdac_±r
->
cuºít_mode_msb
);

219 
rdac_±r
->
cuºít_mode_lsb
) {

221 
	`¥ötf
("inactive\n");

224 
	`¥ötf
("active\n");

227 
	`¥ötf
("Dualáctive mode\n");

230 
	`¥ötf
("(Unknown mode 0x%x)\n",

231 
rdac_±r
->
cuºít_mode_lsb
);

234 
	`¥ötf
(" RDAC mode (alternateÖrocessor): ");

235 
rdac_±r
->
Æã∫©e_mode_msb
) {

237 
	`¥ötf
("alternate controllerÇotÖresent; ");

240 
	`¥ötf
("alternate controllerÖresent; ");

243 
	`¥ötf
("active/active mode; ");

246 
	`¥ötf
("(Unknown status 0x%x); ",

247 
rdac_±r
->
Æã∫©e_mode_msb
);

250 
rdac_±r
->
Æã∫©e_mode_lsb
) {

252 
	`¥ötf
("inactive\n");

255 
	`¥ötf
("active\n");

258 
	`¥ötf
("Dualáctive mode\n");

261 
	`¥ötf
("held inÑeset\n");

264 
	`¥ötf
("(Unknown mode 0x%x)\n",

265 
rdac_±r
->
Æã∫©e_mode_lsb
);

267 
	`¥ötf
(" Quõs˚n˚Åimeout: %d\n", 
rdac_±r
->
quõs˚n˚
);

268 
	`¥ötf
(" RDAC o±i⁄ 0x%x\n", 
rdac_±r
->
›ti⁄s
);

269 
	`¥ötf
 (" LUN Table:\n");

270 
k
 = 0; k < 32; k += 8) {

271 
	`¥ötf
(" %x:",
k
 / 8);

272 
i
 = 0; i < 8; i++) {

273 
rdac_±r
->
lun_èbÀ
[
k
 + 
i
]) {

275 
	`¥ötf
(" x");

278 
	`¥ötf
("Ö");

281 
	`¥ötf
("á");

284 
	`¥ötf
(" u");

287 
	`¥ötf
(" ?");

291 
	`¥ötf
("\n");

293 
	}
}

295 
	$ußge
()

297 
	`¥ötf
("Usage: sg_rdac [-a] [-f=LUN] [-v] [-V] DEVICE\n"

308 
	}
}

310 
	$maö
(
¨gc
, * 
¨gv
[])

312 
r•_buff
[
MX_ALLOC_LEN
];

313 **
¨g±r
;

314 * 
fûe_«me
 = 0;

315 
ªs
, 
fd
, 
k
, 
lun
 = -1;

316 
Áû_Æl
 = 0;

317 
Áû_∑th
 = 0;

318 
ªt
 = 0;

320 i‡(
¨gc
 < 2) {

321 
	`ußge
 ();

322  
SG_LIB_SYNTAX_ERROR
;

325 
k
 = 1; k < 
¨gc
; ++k) {

326 
¨g±r
 = 
¨gv
 + 
k
;

327 i‡(!
	`°rcmp
 (*
¨g±r
, "-v"))

328 ++
do_vîbo£
;

329 i‡(!
	`°∫cmp
(*
¨g±r
, "-f=",3)) {

330 ++
Áû_∑th
;

331 
lun
 = 
	`°πoul
(*
¨g±r
 + 3, 
NULL
, 0);

333 i‡(!
	`°rcmp
(*
¨g±r
, "-a")) {

334 ++
Áû_Æl
;

336 i‡(!
	`°rcmp
(*
¨g±r
, "-V")) {

337 
	`Ârötf
(
°dîr
, "sg_rda¯vîsi⁄: %s\n", 
vîsi⁄_°r
);

340 i‡(*
¨gv
[
k
] == '-') {

341 
	`Ârötf
(
°dîr
, "Uƒecognized swôch: %s\n", 
¨gv
[
k
]);

342 
fûe_«me
 = 0;

345 i‡(0 =
fûe_«me
)

346 
fûe_«me
 = 
¨gv
[
k
];

348 
	`Ârötf
(
°dîr
, "too manyárguments\n");

349 
fûe_«me
 = 0;

353 i‡(0 =
fûe_«me
) {

354 
	`ußge
();

355  
SG_LIB_SYNTAX_ERROR
;

358 
fd
 = 
	`sg_cmds_›í_devi˚
(
fûe_«me
, 0 , 
do_vîbo£
);

359 i‡(
fd
 < 0) {

360 
	`Ârötf
(
°dîr
, "›íÉº‹: %s: %s\n", 
fûe_«me
,

361 
	`ß„_°ªº‹
(-
fd
));

362 
	`ußge
();

363  
SG_LIB_FILE_ERROR
;

366 i‡(
Áû_Æl
) {

367 
ªs
 = 
	`Áû_Æl_∑ths
(
fd
);

368 } i‡(
Áû_∑th
) {

369 
ªs
 = 
	`Áû_this_∑th
(
fd
, 
lun
);

371 
ªs
 = 
	`sg_Œ_mode_£n£6
(
fd
, 0, 0,

372 0x2c, 0, 
r•_buff
, 252,

373 1, 
do_vîbo£
);

375 i‡(!
ªs
) {

376 i‡(
do_vîbo£
)

377 
	`dump_mode_∑ge
(
r•_buff
,Ñsp_buff[0]);

378 
	`¥öt_rdac_mode
(
r•_buff
);

381 
ªt
 = 
ªs
;

382 i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

383 
	`Ârötf
(
°dîr
, ">>>>>>Åryágain withoutÅhe '-6' "

385 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

386 
	`Ârötf
(
°dîr
, "invalid field in cdb (perhaps subpages "

388 i‡(
SG_LIB_CAT_NOT_READY
 =
ªs
)

389 
	`Ârötf
(
°dîr
, "mode sense failed, deviceÇotÑeady\n");

390 i‡(
ªs
)

391 
	`Ârötf
(
°dîr
," mode sense failed\n");

393 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
fd
);

394 i‡(
ªs
 < 0) {

395 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

396 i‡(0 =
ªt
)

397  
SG_LIB_FILE_ERROR
;

399  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

400 
	}
}

	@src/sg_read.c

21 
	#_XOPEN_SOURCE
 500

	)

22 #i‚de‡
_GNU_SOURCE


23 
	#_GNU_SOURCE


	)

26 
	~<uni°d.h
>

27 
	~<f˙é.h
>

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

31 
	~<sig«l.h
>

32 
	~<˘y≥.h
>

33 
	~<î∫o.h
>

34 
	#__STDC_FORMAT_MACROS
 1

	)

35 
	~<öây≥s.h
>

36 
	~<sys/io˘l.h
>

37 
	~<sys/ty≥s.h
>

38 
	~<sys/°©.h
>

39 
	~<sys/sysma¸os.h
>

40 
	~<sys/mm™.h
>

41 
	~<sys/time.h
>

42 
	~<löux/maj‹.h
>

44 #ifde‡
HAVE_CONFIG_H


45 
	~"c⁄fig.h
"

47 
	~"sg_lib.h
"

48 
	~"sg_io_löux.h
"

51 c⁄° * 
	gvîsi⁄_°r
 = "1.19 20121211";

53 
	#DEF_BLOCK_SIZE
 512

	)

54 
	#DEF_BLOCKS_PER_TRANSFER
 128

	)

55 
	#DEF_SCSI_CDBSZ
 10

	)

56 
	#MAX_SCSI_CDBSZ
 16

	)

58 
	#ME
 "sg_ªad: "

	)

60 #i‚de‡
SG_FLAG_MMAP_IO


61 
	#SG_FLAG_MMAP_IO
 4

	)

64 
	#SENSE_BUFF_LEN
 64

	)

65 
	#DEF_TIMEOUT
 40000

	)

67 #i‚de‡
RAW_MAJOR


68 
	#RAW_MAJOR
 255

	)

71 
	#FT_OTHER
 1

	)

72 
	#FT_SG
 2

	)

73 
	#FT_RAW
 4

	)

74 
	#FT_BLOCK
 8

	)

75 
	#FT_ERROR
 64

	)

77 
	#MIN_RESERVED_SIZE
 8192

	)

79 
	gsum_of_ªsids
 = 0;

81 
öt64_t
 
	gdd_cou¡
 = -1;

82 
öt64_t
 
	g‹ig_cou¡
 = 0;

83 
öt64_t
 
	gö_fuŒ
 = 0;

84 
	gö_∑πül
 = 0;

86 
	g∑ck_id_cou¡
 = 0;

87 
	gvîbo£
 = 0;

89 c⁄° * 
	g¥oc_Ælow_dio
 = "/proc/scsi/sg/allow_dio";

91 
ö°Æl_h™dÀr
 (
sig_num
, (*
sig_h™dÀr
Ë(
sig
))

93 
siga˘i⁄
 
siga˘
;

95 
	`siga˘i⁄
 (
sig_num
, 
NULL
, &
siga˘
);

96 i‡(
siga˘
.
ß_h™dÀr
 !
SIG_IGN
) {

97 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

98 
	`sigem±y£t
 (&
siga˘
.
ß_mask
);

99 
siga˘
.
ß_Êags
 = 0;

100 
	`siga˘i⁄
 (
sig_num
, &
siga˘
, 
NULL
);

102 
	}
}

104 
	$¥öt_°©s
(
ôîs
, c⁄° * 
°r
)

106 i‡(
‹ig_cou¡
 > 0) {

107 i‡(0 !
dd_cou¡
)

108 
	`Ârötf
(
°dîr
, "Ñemaöög block cou¡=%"
PRId64
"\n", 
dd_cou¡
);

109 
	`Ârötf
(
°dîr
, "%"
PRId64
"+%dÑec‹d†ö", 
ö_fuŒ
 - 
ö_∑πül
,

110 
ö_∑πül
);

111 i‡(
ôîs
 > 0)

112 
	`Ârötf
(
°dîr
, ", %†comm™d†issued: %d\n", (
°r
 ? str : ""),

113 
ôîs
);

115 
	`Ârötf
(
°dîr
, "\n");

116 } i‡(
ôîs
 > 0)

117 
	`Ârötf
(
°dîr
, "%†comm™d†issued: %d\n", (
°r
 ? så : ""), 
ôîs
);

118 
	}
}

120 
	$öãºu±_h™dÀr
(
sig
)

122 
siga˘i⁄
 
siga˘
;

124 
siga˘
.
ß_h™dÀr
 = 
SIG_DFL
;

125 
	`sigem±y£t
 (&
siga˘
.
ß_mask
);

126 
siga˘
.
ß_Êags
 = 0;

127 
	`siga˘i⁄
 (
sig
, &
siga˘
, 
NULL
);

128 
	`Ârötf
(
°dîr
, "Interrupted by signal,");

129 
	`¥öt_°©s
(0, 
NULL
);

130 
	`kûl
 (
	`gëpid
 (), 
sig
);

131 
	}
}

133 
	$sigöfo_h™dÀr
(
sig
)

135 
sig
 = sig;

136 
	`Ârötf
(
°dîr
, "ProgressÑeport, continuing ...\n");

137 
	`¥öt_°©s
(0, 
NULL
);

138 
	}
}

140 
	$dd_fûëy≥
(c⁄° * 
fûíame
)

142 
°©
 
°
;

144 i‡(
	`°©
(
fûíame
, &
°
) < 0)

145  
FT_ERROR
;

146 i‡(
	`S_ISCHR
(
°
.
°_mode
)) {

147 i‡(
RAW_MAJOR
 =
	`maj‹
(
°
.
°_rdev
))

148  
FT_RAW
;

149 i‡(
SCSI_GENERIC_MAJOR
 =
	`maj‹
(
°
.
°_rdev
))

150  
FT_SG
;

151 } i‡(
	`S_ISBLK
(
°
.
°_mode
))

152  
FT_BLOCK
;

153  
FT_OTHER
;

154 
	}
}

156 
	$ußge
()

158 
	`Ârötf
(
°dîr
, "Usage: "

183 
	`Ârötf
(
°dîr
,

202 
	}
}

204 
	$sg_buûd_scsi_cdb
(* 
cdbp
, 
cdb_sz
,

205 
blocks
, 
öt64_t
 
°¨t_block
,

206 
wrôe_åue
, 
fua
, 
dpo
)

208 
rd_›code
[] = {0x8, 0x28, 0xa8, 0x88};

209 
wr_›code
[] = {0xa, 0x2a, 0xaa, 0x8a};

210 
sz_öd
;

212 
	`mem£t
(
cdbp
, 0, 
cdb_sz
);

213 i‡(
dpo
)

214 
cdbp
[1] |= 0x10;

215 i‡(
fua
)

216 
cdbp
[1] |= 0x8;

217 
cdb_sz
) {

219 
sz_öd
 = 0;

220 
cdbp
[0] = ()(
wrôe_åue
 ? 
wr_›code
[
sz_öd
] :

221 
rd_›code
[
sz_öd
]);

222 
cdbp
[1] = ()((
°¨t_block
 >> 16) & 0x1f);

223 
cdbp
[2] = ()((
°¨t_block
 >> 8) & 0xff);

224 
cdbp
[3] = ()(
°¨t_block
 & 0xff);

225 
cdbp
[4] = (256 =
blocks
) ? 0 : ()blocks;

226 i‡(
blocks
 > 256) {

227 
	`Ârötf
(
°dîr
, 
ME
 "for 6 byte commands, maximumÇumber of "

231 i‡((
°¨t_block
 + 
blocks
 - 1) & (~0x1fffff)) {

232 
	`Ârötf
(
°dîr
, 
ME
 "for 6 byte commands, can'táddress blocks"

236 i‡(
dpo
 || 
fua
) {

237 
	`Ârötf
(
°dîr
, 
ME
 "for 6 byte commands,Çeither dpoÇor fua"

243 
sz_öd
 = 1;

244 
cdbp
[0] = ()(
wrôe_åue
 ? 
wr_›code
[
sz_öd
] :

245 
rd_›code
[
sz_öd
]);

246 
cdbp
[2] = ()((
°¨t_block
 >> 24) & 0xff);

247 
cdbp
[3] = ()((
°¨t_block
 >> 16) & 0xff);

248 
cdbp
[4] = ()((
°¨t_block
 >> 8) & 0xff);

249 
cdbp
[5] = ()(
°¨t_block
 & 0xff);

250 
cdbp
[7] = ()((
blocks
 >> 8) & 0xff);

251 
cdbp
[8] = ()(
blocks
 & 0xff);

252 i‡(
blocks
 & (~0xffff)) {

253 
	`Ârötf
(
°dîr
, 
ME
 "for 10 byte commands, maximumÇumber of "

259 
sz_öd
 = 2;

260 
cdbp
[0] = ()(
wrôe_åue
 ? 
wr_›code
[
sz_öd
] :

261 
rd_›code
[
sz_öd
]);

262 
cdbp
[2] = ()((
°¨t_block
 >> 24) & 0xff);

263 
cdbp
[3] = ()((
°¨t_block
 >> 16) & 0xff);

264 
cdbp
[4] = ()((
°¨t_block
 >> 8) & 0xff);

265 
cdbp
[5] = ()(
°¨t_block
 & 0xff);

266 
cdbp
[6] = ()((
blocks
 >> 24) & 0xff);

267 
cdbp
[7] = ()((
blocks
 >> 16) & 0xff);

268 
cdbp
[8] = ()((
blocks
 >> 8) & 0xff);

269 
cdbp
[9] = ()(
blocks
 & 0xff);

272 
sz_öd
 = 3;

273 
cdbp
[0] = ()(
wrôe_åue
 ? 
wr_›code
[
sz_öd
] :

274 
rd_›code
[
sz_öd
]);

275 
cdbp
[2] = ()((
°¨t_block
 >> 56) & 0xff);

276 
cdbp
[3] = ()((
°¨t_block
 >> 48) & 0xff);

277 
cdbp
[4] = ()((
°¨t_block
 >> 40) & 0xff);

278 
cdbp
[5] = ()((
°¨t_block
 >> 32) & 0xff);

279 
cdbp
[6] = ()((
°¨t_block
 >> 24) & 0xff);

280 
cdbp
[7] = ()((
°¨t_block
 >> 16) & 0xff);

281 
cdbp
[8] = ()((
°¨t_block
 >> 8) & 0xff);

282 
cdbp
[9] = ()(
°¨t_block
 & 0xff);

283 
cdbp
[10] = ()((
blocks
 >> 24) & 0xff);

284 
cdbp
[11] = ()((
blocks
 >> 16) & 0xff);

285 
cdbp
[12] = ()((
blocks
 >> 8) & 0xff);

286 
cdbp
[13] = ()(
blocks
 & 0xff);

289 
	`Ârötf
(
°dîr
, 
ME
 "expected cdb size of 6, 10, 12, or 16 but got"

290 " %d\n", 
cdb_sz
);

294 
	}
}

299 
	$sg_bªad
(
sg_fd
, * 
buff
, 
blocks
,

300 
öt64_t
 
‰om_block
, 
bs
, 
cdbsz
,

301 
fua
, 
dpo
, * 
di›
, 
do_mm≠
,

302 
no_dx„r
)

304 
k
;

305 
rdCmd
[
MAX_SCSI_CDBSZ
];

306 
£n£Buff
[
SENSE_BUFF_LEN
];

307 
sg_io_hdr
 
io_hdr
;

309 i‡(
	`sg_buûd_scsi_cdb
(
rdCmd
, 
cdbsz
, 
blocks
, 
‰om_block
, 0, 
fua
, 
dpo
)) {

310 
	`Ârötf
(
°dîr
, 
ME
 "bad cdb buûd, from_block=%"
PRId64
", blocks=%d\n",

311 
‰om_block
, 
blocks
);

314 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr
));

315 
io_hdr
.
öãrÁ˚_id
 = 'S';

316 
io_hdr
.
cmd_Àn
 = 
cdbsz
;

317 
io_hdr
.
cmdp
 = 
rdCmd
;

318 i‡(
blocks
 > 0) {

319 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

320 
io_hdr
.
dx„r_Àn
 = 
bs
 * 
blocks
;

322 i‡(! 
do_mm≠
)

323 
io_hdr
.
dx„Ω
 = 
buff
;

324 i‡(
di›
 && *diop)

325 
io_hdr
.
Êags
 |
SG_FLAG_DIRECT_IO
;

326 i‡(
do_mm≠
)

327 
io_hdr
.
Êags
 |
SG_FLAG_MMAP_IO
;

328 i‡(
no_dx„r
)

329 
io_hdr
.
Êags
 |
SG_FLAG_NO_DXFER
;

331 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_NONE
;

332 
io_hdr
.
mx_sb_Àn
 = 
SENSE_BUFF_LEN
;

333 
io_hdr
.
sbp
 = 
£n£Buff
;

334 
io_hdr
.
timeout
 = 
DEF_TIMEOUT
;

335 
io_hdr
.
∑ck_id
 = 
∑ck_id_cou¡
++;

336 i‡(
vîbo£
 > 1) {

337 
	`Ârötf
(
°dîr
, "Ñead cdb: ");

338 
k
 = 0; k < 
cdbsz
; ++k)

339 
	`Ârötf
(
°dîr
, "%02x ", 
rdCmd
[
k
]);

340 
	`Ârötf
(
°dîr
, "\n");

343 i‡(
	`io˘l
(
sg_fd
, 
SG_IO
, &
io_hdr
) < 0) {

344 i‡(
ENOMEM
 =
î∫o
)

346 
	`≥º‹
("reading (SG_IO) on sg device,Érror");

350 i‡(
vîbo£
 > 2)

351 
	`Ârötf
(
°dîr
, " duøti⁄=%u ms\n", 
io_hdr
.
duøti⁄
);

352 
	`sg_îr_ˇãg‹y3
(&
io_hdr
)) {

353 
SG_LIB_CAT_RECOVERED
:

354 i‡(
vîbo£
 > 1)

355 
	`sg_chk_n_¥öt3
("ªadög, c⁄töue", &
io_hdr
, 1);

357 
SG_LIB_CAT_CLEAN
:

359 
SG_LIB_CAT_UNIT_ATTENTION
:

360 i‡(
vîbo£
)

361 
	`sg_chk_n_¥öt3
("ªadög", &
io_hdr
, 
vîbo£
 - 1);

363 
SG_LIB_CAT_ABORTED_COMMAND
:

364 i‡(
vîbo£
)

365 
	`sg_chk_n_¥öt3
("ªadög", &
io_hdr
, 
vîbo£
 - 1);

367 
SG_LIB_CAT_NOT_READY
:

368 i‡(
vîbo£
)

369 
	`sg_chk_n_¥öt3
("ªadög", &
io_hdr
, 
vîbo£
 - 1);

371 
SG_LIB_CAT_MEDIUM_HARD
:

372 i‡(
vîbo£
)

373 
	`sg_chk_n_¥öt3
("ªadög", &
io_hdr
, 
vîbo£
 - 1);

376 
	`sg_chk_n_¥öt3
("ªadög", &
io_hdr
, 
vîbo£
);

379 i‡(
blocks
 > 0) {

380 i‡(
di›
 && *diop &&

381 ((
io_hdr
.
öfo
 & 
SG_INFO_DIRECT_IO_MASK
Ë!
SG_INFO_DIRECT_IO
))

382 *
di›
 = 0;

383 
sum_of_ªsids
 +
io_hdr
.
ªsid
;

386 
	}
}

388 
	#STR_SZ
 1024

	)

389 
	#INF_SZ
 512

	)

390 
	#EBUFF_SZ
 512

	)

393 
	$maö
(
¨gc
, * 
¨gv
[])

395 
öt64_t
 
skù
 = 0;

396 
bs
 = 0;

397 
b±
 = 
DEF_BLOCKS_PER_TRANSFER
;

398 
°r
[
STR_SZ
];

399 * 
key
;

400 * 
buf
;

401 
öf
[
INF_SZ
];

402 
outf
[
INF_SZ
];

403 
ö_ty≥
 = 
FT_OTHER
;

404 
do_dio
 = 0;

405 
do_odú
 = 0;

406 
do_blk_sgio
 = 0;

407 
do_mm≠
 = 0;

408 
no_dx„r
 = 0;

409 
do_time
 = 0;

410 
fua
 = 0;

411 
dpo
 = 0;

412 
scsi_cdbsz
 = 
DEF_SCSI_CDBSZ
;

413 
dio_öcom∂ëe
 = 0;

414 
cou¡_giví
 = 0;

415 
ªs
, 
k
, 
t
, 
buf_sz
, 
dio_tmp
, 
ôîs
;

416 
öfd
, 
blocks
, 
Êags
, 
blocks_≥r
;

417 * 
wrkBuff
 = 
NULL
;

418 * 
wrkPos
 = 
NULL
;

419 
ebuff
[
EBUFF_SZ
];

420 
timevÆ
 
°¨t_tm
, 
íd_tm
;

421 c⁄° * 
ªad_°r
;

422 
ªt
 = 0;

423 
size_t
 
psz
;

425 
psz
 = 
	`gë∑gesize
();

426 
öf
[0] = '\0';

428 
k
 = 1; k < 
¨gc
; k++) {

429 i‡(
¨gv
[
k
]) {

430 
	`°∫˝y
(
°r
, 
¨gv
[
k
], 
STR_SZ
);

431 
°r
[
STR_SZ
 - 1] = '\0';

434 
key
 = 
°r
, 
buf
 = key; (*buf && (*buf != '=')); )

435 
buf
++;

436 i‡(*
buf
)

437 *
buf
++ = '\0';

438 i‡(0 =
	`°rcmp
(
key
,"blk_sgio"))

439 
do_blk_sgio
 = 
	`sg_gë_num
(
buf
);

440 i‡(0 =
	`°rcmp
(
key
,"bpt")) {

441 
b±
 = 
	`sg_gë_num
(
buf
);

442 i‡(-1 =
b±
) {

443 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'bpt'\n");

444  
SG_LIB_SYNTAX_ERROR
;

446 } i‡(0 =
	`°rcmp
(
key
,"bs")) {

447 
bs
 = 
	`sg_gë_num
(
buf
);

448 i‡(-1 =
bs
) {

449 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'bs'\n");

450  
SG_LIB_SYNTAX_ERROR
;

452 } i‡(0 =
	`°rcmp
(
key
,"cdbsz"))

453 
scsi_cdbsz
 = 
	`sg_gë_num
(
buf
);

454 i‡(0 =
	`°rcmp
(
key
,"count")) {

455 
cou¡_giví
 = 1;

456 i‡('-' =*
buf
) {

457 
dd_cou¡
 = 
	`sg_gë_Œnum
(
buf
 + 1);

458 i‡(-1 =
dd_cou¡
) {

459 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'count'\n");

460  
SG_LIB_SYNTAX_ERROR
;

462 
dd_cou¡
 = - dd_count;

464 
dd_cou¡
 = 
	`sg_gë_Œnum
(
buf
);

465 i‡(-1 =
dd_cou¡
) {

466 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'count'\n");

467  
SG_LIB_SYNTAX_ERROR
;

470 } i‡(0 =
	`°rcmp
(
key
,"dio"))

471 
do_dio
 = 
	`sg_gë_num
(
buf
);

472 i‡(0 =
	`°rcmp
(
key
,"dpo"))

473 
dpo
 = 
	`sg_gë_num
(
buf
);

474 i‡(0 =
	`°rcmp
(
key
,"fua"))

475 
fua
 = 
	`sg_gë_num
(
buf
);

476 i‡(
	`°rcmp
(
key
,"if") == 0)

477 
	`°∫˝y
(
öf
, 
buf
, 
INF_SZ
);

478 i‡(0 =
	`°rcmp
(
key
,"mmap"))

479 
do_mm≠
 = 
	`sg_gë_num
(
buf
);

480 i‡(0 =
	`°rcmp
(
key
,"no_dxfer"))

481 
no_dx„r
 = 
	`sg_gë_num
(
buf
);

482 i‡(0 =
	`°rcmp
(
key
,"odir"))

483 
do_odú
 = 
	`sg_gë_num
(
buf
);

484 i‡(
	`°rcmp
(
key
,"of") == 0)

485 
	`°∫˝y
(
outf
, 
buf
, 
INF_SZ
);

486 i‡(0 =
	`°rcmp
(
key
,"skip")) {

487 
skù
 = 
	`sg_gë_Œnum
(
buf
);

488 i‡(-1 =
skù
) {

489 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'skip'\n");

490  
SG_LIB_SYNTAX_ERROR
;

492 } i‡(0 =
	`°rcmp
(
key
,"time"))

493 
do_time
 = 
	`sg_gë_num
(
buf
);

494 i‡(0 =
	`°∫cmp
(
key
, "verb", 4))

495 
vîbo£
 = 
	`sg_gë_num
(
buf
);

496 i‡(0 =
	`°∫cmp
(
key
, "--help", 6)) {

497 
	`ußge
();

499 } i‡(0 =
	`°∫cmp
(
key
, "--vers", 6)) {

500 
	`Ârötf
(
°dîr
, 
ME
 ": %s\n", 
vîsi⁄_°r
);

503 
	`Ârötf
(
°dîr
, "Uƒecognizedárgumíà'%s'\n", 
key
);

504 
	`ußge
();

505  
SG_LIB_SYNTAX_ERROR
;

508 i‡(
bs
 <= 0) {

509 
bs
 = 
DEF_BLOCK_SIZE
;

510 i‡((
dd_cou¡
 > 0Ë&& (
b±
 > 0))

511 
	`Ârötf
(
°dîr
, "Assume default 'bs' (block size) of %d bytes\n",

512 
bs
);

514 i‡(! 
cou¡_giví
) {

515 
	`Ârötf
(
°dîr
, "'count' must be given\n");

516 
	`ußge
();

517  
SG_LIB_SYNTAX_ERROR
;

519 i‡(
skù
 < 0) {

520 
	`Ârötf
(
°dîr
, "skip cannot beÇegative\n");

521  
SG_LIB_SYNTAX_ERROR
;

523 i‡(
b±
 < 1) {

524 i‡(0 =
b±
) {

525 i‡(
dd_cou¡
 > 0)

526 
dd_cou¡
 = - dd_count;

528 
	`Ârötf
(
°dîr
, "bpt must be greaterÅhan 0\n");

529  
SG_LIB_SYNTAX_ERROR
;

532 i‡(
do_dio
 && 
do_mm≠
) {

533 
	`Ârötf
(
°dîr
, "cannot select both dioánd mmap\n");

534  
SG_LIB_SYNTAX_ERROR
;

536 i‡(
no_dx„r
 && (
do_dio
 || 
do_mm≠
)) {

537 
	`Ârötf
(
°dîr
, "cannot selectÇo_dxfer with dio or mmap\n");

538  
SG_LIB_SYNTAX_ERROR
;

541 
	`ö°Æl_h™dÀr
 (
SIGINT
, 
öãºu±_h™dÀr
);

542 
	`ö°Æl_h™dÀr
 (
SIGQUIT
, 
öãºu±_h™dÀr
);

543 
	`ö°Æl_h™dÀr
 (
SIGPIPE
, 
öãºu±_h™dÀr
);

544 
	`ö°Æl_h™dÀr
 (
SIGUSR1
, 
sigöfo_h™dÀr
);

546 i‡(! 
öf
[0]) {

547 
	`Ârötf
(
°dîr
, "mustÖrovide 'if=<filename>'\n");

548 
	`ußge
();

549  
SG_LIB_SYNTAX_ERROR
;

551 i‡(0 =
	`°rcmp
("-", 
öf
)) {

552 
	`Ârötf
(
°dîr
, "'-' (stdin) invalidás <filename>\n");

553 
	`ußge
();

554  
SG_LIB_SYNTAX_ERROR
;

556 
ö_ty≥
 = 
	`dd_fûëy≥
(
öf
);

557 i‡(
FT_ERROR
 =
ö_ty≥
) {

558 
	`Ârötf
(
°dîr
, "U«bÀÅÿac˚ss: %s\n", 
öf
);

559  
SG_LIB_FILE_ERROR
;

560 } i‡((
FT_BLOCK
 & 
ö_ty≥
Ë&& 
do_blk_sgio
)

561 
ö_ty≥
 |
FT_SG
;

563 i‡(
FT_SG
 & 
ö_ty≥
) {

564 i‡((
dd_cou¡
 < 0Ë&& (6 =
scsi_cdbsz
)) {

565 
	`Ârötf
(
°dîr
, 
ME
 "SCSI READ (6) can't do zero block "

567  
SG_LIB_SYNTAX_ERROR
;

569 
Êags
 = 
O_RDWR
;

570 i‡(
do_odú
)

571 
Êags
 |
O_DIRECT
;

572 i‡((
öfd
 = 
	`›í
(
öf
, 
Êags
)) < 0) {

573 
Êags
 = 
O_RDONLY
;

574 i‡(
do_odú
)

575 
Êags
 |
O_DIRECT
;

576 i‡((
öfd
 = 
	`›í
(
öf
, 
Êags
)) < 0) {

577 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

578 
ME
 "couldÇŸ o≥¿%†f‹ sgÑódög", 
öf
);

579 
	`≥º‹
(
ebuff
);

580  
SG_LIB_FILE_ERROR
;

583 i‡(
vîbo£
)

584 
	`Ârötf
(
°dîr
, "O≥√d %†f‹ SG_IO wôh fœgs=0x%x\n", 
öf
,

585 
Êags
);

586 i‡((
dd_cou¡
 > 0Ë&& (! (
FT_BLOCK
 & 
ö_ty≥
))) {

587 i‡(
vîbo£
 > 2) {

588 i‡(
	`io˘l
(
öfd
, 
SG_GET_RESERVED_SIZE
, &
t
) >= 0)

589 
	`Ârötf
(
°dîr
, " SG_GET_RESERVED_SIZE yõlds: %d\n", 
t
);

591 
t
 = 
bs
 * 
b±
;

592 i‡((
do_mm≠
Ë&& (0 !(
t
 % 
psz
)))

593 
t
 = (— / 
psz
) + 1) *Ösz;

594 
ªs
 = 
	`io˘l
(
öfd
, 
SG_SET_RESERVED_SIZE
, &
t
);

595 i‡(
ªs
 < 0)

596 
	`≥º‹
(
ME
 "SG_SET_RESERVED_SIZEÉrror");

597 
ªs
 = 
	`io˘l
(
öfd
, 
SG_GET_VERSION_NUM
, &
t
);

598 i‡((
ªs
 < 0Ë|| (
t
 < 30000)) {

599 
	`Ârötf
(
°dîr
, 
ME
 "sg driverÖriorÅo 3.x.y\n");

600  
SG_LIB_CAT_OTHER
;

602 i‡(
do_mm≠
 && (
t
 < 30122)) {

603 
	`Ârötf
(
°dîr
, 
ME
 "mmap-ed IOÇeedsá sg driver version "

605  
SG_LIB_CAT_OTHER
;

609 i‡(
do_mm≠
) {

610 
	`Ârötf
(
°dîr
, 
ME
 "mmap-ed IO only support on sg "

612  
SG_LIB_CAT_OTHER
;

614 i‡(
dd_cou¡
 < 0) {

615 
	`Ârötf
(
°dîr
, 
ME
 "negative 'count' only supported with "

617  
SG_LIB_CAT_OTHER
;

619 
Êags
 = 
O_RDONLY
;

620 i‡(
do_odú
)

621 
Êags
 |
O_DIRECT
;

622 i‡((
öfd
 = 
	`›í
(
öf
, 
Êags
)) < 0) {

623 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

624 
ME
 "couldÇŸ o≥¿%†f‹Ñódög", 
öf
);

625 
	`≥º‹
(
ebuff
);

626  
SG_LIB_FILE_ERROR
;

628 i‡(
vîbo£
)

629 
	`Ârötf
(
°dîr
, "Opened %s for UnixÑeads with flags=0x%x\n",

630 
öf
, 
Êags
);

631 i‡(
skù
 > 0) {

632 
off64_t
 
off£t
 = 
skù
;

634 
off£t
 *
bs
;

635 i‡(
	`l£ek64
(
öfd
, 
off£t
, 
SEEK_SET
) < 0) {

636 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

637 
ME
 "couldn'àskùÅÿªquúedÖosôi⁄ o¿%s", 
öf
);

638 
	`≥º‹
(
ebuff
);

639  
SG_LIB_FILE_ERROR
;

644 i‡(0 =
dd_cou¡
)

646 
‹ig_cou¡
 = 
dd_cou¡
;

648 i‡(
dd_cou¡
 > 0) {

649 i‡(
do_dio
 || 
do_odú
 || (
FT_RAW
 & 
ö_ty≥
)) {

650 
wrkBuff
 = (*)
	`mÆloc
(
bs
 * 
b±
 + 
psz
);

651 i‡(0 =
wrkBuff
) {

652 
	`Ârötf
(
°dîr
, "NotÉnough user memory foráligned "

654  
SG_LIB_CAT_OTHER
;

656 
wrkPos
 = (*)((()
wrkBuff
 + 
psz
 - 1) &

657 (~(
psz
 - 1)));

658 } i‡(
do_mm≠
) {

659 
wrkPos
 = (*)
	`mm≠
(
NULL
, 
bs
 * 
b±
,

660 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
öfd
, 0);

661 i‡(
MAP_FAILED
 =
wrkPos
) {

662 
	`≥º‹
(
ME
 "error from mmap()");

663  
SG_LIB_CAT_OTHER
;

666 
wrkBuff
 = (*)
	`mÆloc
(
bs
 * 
b±
);

667 i‡(0 =
wrkBuff
) {

668 
	`Ârötf
(
°dîr
, "NotÉnough user memory\n");

669  
SG_LIB_CAT_OTHER
;

671 
wrkPos
 = 
wrkBuff
;

675 
blocks_≥r
 = 
b±
;

676 
°¨t_tm
.
tv_£c
 = 0;

677 
°¨t_tm
.
tv_u£c
 = 0;

679 i‡(
vîbo£
 && (
dd_cou¡
 < 0))

680 
	`Ârötf
(
°dîr
, "Abouàtÿissuê%"
PRId64
" zero block SCSI READs\n",

681 0 - 
dd_cou¡
);

684 
ôîs
 = 0; 
dd_cou¡
 != 0; ++iters) {

685 i‡((
do_time
 > 0Ë&& (
ôîs
 == (do_time - 1)))

686 
	`gëtimeofday
(&
°¨t_tm
, 
NULL
);

687 i‡(
dd_cou¡
 < 0)

688 
blocks
 = 0;

690 
blocks
 = (
dd_cou¡
 > 
blocks_≥r
) ? blocks_per : dd_count;

691 i‡(
FT_SG
 & 
ö_ty≥
) {

692 
dio_tmp
 = 
do_dio
;

693 
ªs
 = 
	`sg_bªad
(
öfd
, 
wrkPos
, 
blocks
, 
skù
, 
bs
, 
scsi_cdbsz
,

694 
fua
, 
dpo
, &
dio_tmp
, 
do_mm≠
, 
no_dx„r
);

695 i‡(1 =
ªs
) {

696 i‡(
	`io˘l
(
öfd
, 
SG_GET_RESERVED_SIZE
, &
buf_sz
) < 0) {

697 
	`≥º‹
("RESERVED_SIZE ioctls failed");

700 i‡(
buf_sz
 < 
MIN_RESERVED_SIZE
)

701 
buf_sz
 = 
MIN_RESERVED_SIZE
;

702 
blocks_≥r
 = (
buf_sz
 + 
bs
 - 1) / bs;

703 
blocks
 = 
blocks_≥r
;

704 
	`Ârötf
(
°dîr
,

705 "ReducögÑódÅÿ%d block†≥∏lo›\n", 
blocks_≥r
);

706 
ªs
 = 
	`sg_bªad
(
öfd
, 
wrkPos
, 
blocks
, 
skù
, 
bs
, 
scsi_cdbsz
,

707 
fua
, 
dpo
, &
dio_tmp
, 
do_mm≠
, 
no_dx„r
);

708 } i‡(2 =
ªs
) {

709 
	`Ârötf
(
°dîr
,

711 
ªs
 = 
	`sg_bªad
(
öfd
, 
wrkPos
, 
blocks
, 
skù
, 
bs
, 
scsi_cdbsz
,

712 
fua
, 
dpo
, &
dio_tmp
, 
do_mm≠
, 
no_dx„r
);

714 i‡(0 !
ªs
) {

715 
ªs
) {

717 
ªt
 = 
SG_LIB_CAT_MEDIUM_HARD
;

718 
	`Ârötf
(
°dîr
, 
ME
 "SCSI READ medium/hardwareÉrror\n");

721 
ªt
 = 
SG_LIB_CAT_NOT_READY
;

722 
	`Ârötf
(
°dîr
, 
ME
 "deviceÇotÑeady\n");

725 
ªt
 = 
SG_LIB_CAT_UNIT_ATTENTION
;

726 
	`Ârötf
(
°dîr
, 
ME
 "SCSI READ unitáttention\n");

729 
ªt
 = 
SG_LIB_CAT_ABORTED_COMMAND
;

730 
	`Ârötf
(
°dîr
, 
ME
 "SCSI READáborted command\n");

733 
ªt
 = 
SG_LIB_CAT_OTHER
;

734 
	`Ârötf
(
°dîr
, 
ME
 "SCSI READ failed\n");

739 
ö_fuŒ
 +
blocks
;

740 i‡(
do_dio
 && (0 =
dio_tmp
))

741 
dio_öcom∂ëe
++;

744 i‡(
ôîs
 > 0) {

745 
off64_t
 
off£t
 = 
skù
;

747 
off£t
 *
bs
;

748 i‡(
	`l£ek64
(
öfd
, 
off£t
, 
SEEK_SET
) < 0) {

749 
	`≥º‹
(
ME
 "couldÇotÑeset skipÖosition");

753 ((
ªs
 = 
	`ªad
(
öfd
, 
wrkPos
, 
blocks
 * 
bs
)) < 0) &&

754 (
EINTR
 =
î∫o
))

756 i‡(
ªs
 < 0) {

757 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, 
ME
 "ªadög, skù=%"
PRId64
" ", 
skù
);

758 
	`≥º‹
(
ebuff
);

760 } i‡(
ªs
 < 
blocks
 * 
bs
) {

761 
	`Ârötf
(
°dîr
, 
ME
 "shortÑead: wanted/got=%d/%d bytes"

762 ", st›\n", 
blocks
 * 
bs
, 
ªs
);

763 
blocks
 = 
ªs
 / 
bs
;

764 i‡((
ªs
 % 
bs
) > 0) {

765 
blocks
++;

766 
ö_∑πül
++;

768 
dd_cou¡
 -
blocks
;

769 
ö_fuŒ
 +
blocks
;

772 
ö_fuŒ
 +
blocks
;

774 i‡(
dd_cou¡
 > 0)

775 
dd_cou¡
 -
blocks
;

776 i‡(
dd_cou¡
 < 0)

777 ++
dd_cou¡
;

779 
ªad_°r
 = (
FT_SG
 & 
ö_ty≥
) ? "SCSI READ" : "read";

780 i‡(
do_time
 > 0) {

781 
	`gëtimeofday
(&
íd_tm
, 
NULL
);

782 i‡(
°¨t_tm
.
tv_£c
 || sèπ_tm.
tv_u£c
) {

783 
timevÆ
 
ªs_tm
;

784 
a
, 
b
, 
c
;

786 
ªs_tm
.
tv_£c
 = 
íd_tm
.tv_£¯- 
°¨t_tm
.tv_sec;

787 
ªs_tm
.
tv_u£c
 = 
íd_tm
.tv_u£¯- 
°¨t_tm
.tv_usec;

788 i‡(
ªs_tm
.
tv_u£c
 < 0) {

789 --
ªs_tm
.
tv_£c
;

790 
ªs_tm
.
tv_u£c
 += 1000000;

792 
a
 = 
ªs_tm
.
tv_£c
;

793 
a
 +(0.000001 * 
ªs_tm
.
tv_u£c
);

794 i‡(
‹ig_cou¡
 > 0) {

795 
b
 = ()
bs
 * (
‹ig_cou¡
 - 
dd_cou¡
);

796 i‡(
do_time
 > 1)

797 
c
 = 
b
 - (()
bs
 * ((
do_time
 - 1.0Ë* 
b±
));

799 
c
 = 0.0;

801 
b
 = 0.0;

802 
c
 = 0.0;

805 i‡(1 =
do_time
) {

806 
	`Ârötf
(
°dîr
, "Time foráll %s commands was "

807 "%d.%06d secs", 
ªad_°r
, ()
ªs_tm
.
tv_£c
,

808 ()
ªs_tm
.
tv_u£c
);

809 i‡((
‹ig_cou¡
 > 0Ë&& (
a
 > 0.00001Ë&& (
b
 > 511))

810 
	`Ârötf
(
°dîr
, ", %.2‡MB/£c\n", 
b
 / (
a
 * 1000000.0));

812 
	`Ârötf
(
°dîr
, "\n");

813 } i‡(2 =
do_time
) {

814 
	`Ârötf
(
°dîr
, "Time from second %s commandÅoÉnd "

815 "wa†%d.%06d secs", 
ªad_°r
, ()
ªs_tm
.
tv_£c
,

816 ()
ªs_tm
.
tv_u£c
);

817 i‡((
‹ig_cou¡
 > 0Ë&& (
a
 > 0.00001Ë&& (
c
 > 511))

818 
	`Ârötf
(
°dîr
, ", %.2‡MB/£c\n", 
c
 / (
a
 * 1000000.0));

820 
	`Ârötf
(
°dîr
, "\n");

822 
	`Ârötf
(
°dîr
, "Time from start of %s command "

823 "#%dÅÿíd wa†%d.%06d secs", 
ªad_°r
, 
do_time
,

824 ()
ªs_tm
.
tv_£c
, (Ïes_tm.
tv_u£c
);

825 i‡((
‹ig_cou¡
 > 0Ë&& (
a
 > 0.00001Ë&& (
c
 > 511))

826 
	`Ârötf
(
°dîr
, ", %.2‡MB/£c\n", 
c
 / (
a
 * 1000000.0));

828 
	`Ârötf
(
°dîr
, "\n");

830 i‡((
ôîs
 > 0Ë&& (
a
 > 0.00001))

831 
	`Ârötf
(
°dîr
, "AverageÇumber of %s commandsÖer "

832 "£c⁄d wa†%.2f\n", 
ªad_°r
, ()
ôîs
 / 
a
);

836 i‡(
wrkBuff
)

837 
	`‰ì
(
wrkBuff
);

839 
	`˛o£
(
öfd
);

840 
ªs
 = 0;

841 i‡(0 !
dd_cou¡
) {

842 
	`Ârötf
(
°dîr
, "SomeÉrror occurred,");

843 i‡(0 =
ªt
)

844 
ªt
 = 
SG_LIB_CAT_OTHER
;

846 
	`¥öt_°©s
(
ôîs
, 
ªad_°r
);

848 i‡(
dio_öcom∂ëe
) {

849 
fd
;

850 
c
;

852 
	`Ârötf
(
°dîr
, ">> Direct IOÑequested but incomplete %dÅimes\n",

853 
dio_öcom∂ëe
);

854 i‡((
fd
 = 
	`›í
(
¥oc_Ælow_dio
, 
O_RDONLY
)) >= 0) {

855 i‡(1 =
	`ªad
(
fd
, &
c
, 1)) {

856 i‡('0' =
c
)

857 
	`Ârötf
(
°dîr
, ">>> %s setÅo '0' but should be set "

858 "tÿ'1' f‹ dúe˘ IO\n", 
¥oc_Ælow_dio
);

860 
	`˛o£
(
fd
);

863 i‡(
sum_of_ªsids
)

864 
	`Ârötf
(
°dîr
, ">> Non-zero sum ofÑesidual counts=%d\n",

865 
sum_of_ªsids
);

866  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

867 
	}
}

	@src/sg_read_block_limits.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<gë›t.h
>

14 
	#__STDC_FORMAT_MACROS
 1

	)

15 
	~<öây≥s.h
>

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

20 
	~"sg_lib.h
"

21 
	~"sg_cmds_basic.h
"

22 
	~"sg_cmds_exåa.h
"

31 c⁄° * 
	gvîsi⁄_°r
 = "1.02 20130507";

33 
	#MAX_READ_BLOCK_LIMITS_LEN
 6

	)

35 
	gªadBlkLmtBuff
[
MAX_READ_BLOCK_LIMITS_LEN
];

38 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

39 {"hñp", 
no_¨gumít
, 0, 'h'},

40 {"hex", 
no_¨gumít
, 0, 'H'},

41 {"øw", 
no_¨gumít
, 0, 'r'},

42 {"vîbo£", 
no_¨gumít
, 0, 'v'},

43 {"vîsi⁄", 
no_¨gumít
, 0, 'V'},

49 
	$ußge
()

51 
	`Ârötf
(
°dîr
, "Usage: "

64 
	}
}

67 
	$dSåRaw
(c⁄° * 
°r
, 
Àn
)

69 
k
;

71 
k
 = 0 ; k < 
Àn
; ++k)

72 
	`¥ötf
("%c", 
°r
[
k
]);

73 
	}
}

76 
	$maö
(
¨gc
, * 
¨gv
[])

78 
sg_fd
, 
k
, 
m
, 
ªs
, 
c
;

79 
do_hex
 = 0;

80 
do_øw
 = 0;

81 
vîbo£
 = 0;

82 c⁄° * 
devi˚_«me
 = 
NULL
;

83 
ªt
 = 0;

84 
uöt32_t
 
max_block_size
;

85 
uöt16_t
 
mö_block_size
;

88 
›ti⁄_ödex
 = 0;

90 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hHrvV", 
l⁄g_›ti⁄s
,

91 &
›ti⁄_ödex
);

92 i‡(
c
 == -1)

95 
c
) {

98 
	`ußge
();

101 ++
do_hex
;

104 ++
do_øw
;

107 ++
vîbo£
;

110 
	`Ârötf
(
°dîr
, "vîsi⁄: %s\n", 
vîsi⁄_°r
);

113 
	`Ârötf
(
°dîr
, "övÆid o±i⁄ -%¯??\n", 
c
);

114 
	`ußge
();

115  
SG_LIB_SYNTAX_ERROR
;

118 i‡(
›töd
 < 
¨gc
) {

119 i‡(
NULL
 =
devi˚_«me
) {

120 
devi˚_«me
 = 
¨gv
[
›töd
];

121 ++
›töd
;

123 i‡(
›töd
 < 
¨gc
) {

124 ; 
›töd
 < 
¨gc
; ++optind)

125 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

126 
¨gv
[
›töd
]);

127 
	`ußge
();

128  
SG_LIB_SYNTAX_ERROR
;

132 i‡(
NULL
 =
devi˚_«me
) {

133 
	`Ârötf
(
°dîr
, "missing deviceÇame!\n");

134 
	`ußge
();

135  
SG_LIB_SYNTAX_ERROR
;

138 
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 0 , 
vîbo£
);

139 i‡(
sg_fd
 < 0) {

140 
	`Ârötf
(
°dîr
, "›íÉº‹: %s: %s\n", 
devi˚_«me
,

141 
	`ß„_°ªº‹
(-
sg_fd
));

142  
SG_LIB_FILE_ERROR
;

145 
	`mem£t
(
ªadBlkLmtBuff
, 0x0, 6);

146 
ªs
 = 
	`sg_Œ_ªad_block_limôs
(
sg_fd
, 
ªadBlkLmtBuff
, 6, 1,

147 
vîbo£
);

148 
ªt
 = 
ªs
;

149 i‡(0 =
ªs
) {

150 i‡(
do_hex
) {

151 
	`dSåHex
((c⁄° *)
ªadBlkLmtBuff
, (readBlkLmtBuff), 1);

152 
the_íd
;

153 } i‡(
do_øw
) {

154 
	`dSåRaw
((c⁄° *)
ªadBlkLmtBuff
, (readBlkLmtBuff));

155 
the_íd
;

158 
max_block_size
 = (
ªadBlkLmtBuff
[0] << 24) +

159 (
ªadBlkLmtBuff
[1] << 16) +

160 (
ªadBlkLmtBuff
[2] << 8) +ÑeadBlkLmtBuff[3];

161 
mö_block_size
 = (
ªadBlkLmtBuff
[4] << 8) +ÑeadBlkLmtBuff[5];

162 
k
 = 
mö_block_size
 / 1024;

163 
	`Ârötf
(
°dîr
, "Read Block LimitsÑesults:\n");

164 
	`Ârötf
(
°dîr
, "\tMinimum block size: %u byte(s)",

165 ()
mö_block_size
);

166 i‡(
k
 != 0)

167 
	`Ârötf
(
°dîr
, ", %d KB", 
k
);

168 
	`Ârötf
(
°dîr
, "\n");

169 
k
 = 
max_block_size
 / 1024;

170 
m
 = 
max_block_size
 / 1048576;

171 
	`Ârötf
(
°dîr
, "\tMaximum block size: %u byte(s)",

172 ()
max_block_size
);

173 i‡(
k
 != 0)

174 
	`Ârötf
(
°dîr
, ", %d KB", 
k
);

175 i‡(
m
 != 0)

176 
	`Ârötf
(
°dîr
, ", %d MB", 
m
);

177 
	`Ârötf
(
°dîr
, "\n");

178 } i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

179 
	`Ârötf
(
°dîr
, "Read blockÜimitsÇot supported\n");

180 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

181 
	`Ârötf
(
°dîr
, "Read blockÜimits,áborted command\n");

182 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

183 
	`Ârötf
(
°dîr
, "Read blockÜimits command has bad field in cdb\n");

185 
	`Ârötf
(
°dîr
, "Read blockÜimits command failed\n");

186 i‡(0 =
vîbo£
)

187 
	`Ârötf
(
°dîr
, "Åry '-v' option for more information\n");

190 
the_íd
:

191 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

192 i‡(
ªs
 < 0) {

193 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

194 i‡(0 =
ªt
)

195  
SG_LIB_FILE_ERROR
;

197  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

198 
	}
}

	@src/sg_read_buffer.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<˘y≥.h
>

13 
	~<°rög.h
>

14 
	~<gë›t.h
>

16 #ifde‡
HAVE_CONFIG_H


17 
	~"c⁄fig.h
"

19 
	~"sg_lib.h
"

20 
	~"sg_cmds_basic.h
"

21 
	~"sg_cmds_exåa.h
"

22 
	~"sg_±.h
"

28 c⁄° * 
	gvîsi⁄_°r
 = "1.09 20130507";

31 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

46 
	$ußge
()

48 
	`Ârötf
(
°dîr
, "Usage: "

69 
	}
}

71 
	#MODE_HEADER_DATA
 0

	)

72 
	#MODE_VENDOR
 1

	)

73 
	#MODE_DATA
 2

	)

74 
	#MODE_DESCRIPTOR
 3

	)

75 
	#MODE_ECHO_BUFFER
 0x0A

	)

76 
	#MODE_ECHO_BDESC
 0x0B

	)

77 
	#MODE_EN_EX_ECHO
 0x1A

	)

78 
	#MODE_ERR_HISTORY
 0x1C

	)

80 
	smode_s
 {

81 c⁄° *
	mmode_°rög
;

82 
	mmode
;

83 c⁄° *
	mcommít
;

84 } 
	gmodes
[] = {

85 { "hd", 
MODE_HEADER_DATA
, "combined headeránd data"},

86 { "víd‹", 
MODE_VENDOR
, "vendor specific"},

87 { "d©a", 
MODE_DATA
, "data"},

88 { "desc", 
MODE_DESCRIPTOR
, "descriptor"},

89 { "echo", 
MODE_ECHO_BUFFER
, "read data fromÉcho buffer "

91 { "echo_desc", 
MODE_ECHO_BDESC
, "echo buffer descriptor (spc-2)"},

92 { "í_ex", 
MODE_EN_EX_ECHO
,

94 { "îr_hi°", 
MODE_ERR_HISTORY
, "error history (spc-4)"},

97 
	#NUM_MODES
 (()((
modes
)/(modes[0])))

	)

100 
	$¥öt_modes
()

102 
k
;

104 
	`Ârötf
(
°dîr
, "The modesÖarameterárgument can beÇumeric "

106 
k
 = 0; k < 
NUM_MODES
; k++) {

107 
	`Ârötf
(
°dîr
, " %2d (0x%02xË %-16s%s\n", 
modes
[
k
].
mode
,

108 
modes
[
k
].
mode
, modes[k].
mode_°rög
, modes[k].
commít
);

110 
	}
}

113 
	$dSåRaw
(c⁄° * 
°r
, 
Àn
)

115 
k
;

117 
k
 = 0 ; k < 
Àn
; ++k)

118 
	`¥ötf
("%c", 
°r
[
k
]);

119 
	}
}

122 
	$maö
(
¨gc
, * 
¨gv
[])

124 
sg_fd
, 
ªs
, 
c
, 
Àn
, 
k
;

125 
do_hñp
 = 0;

126 
do_hex
 = 0;

127 
rb_id
 = 0;

128 
rb_Àn
 = 4;

129 
rb_mode
 = 0;

130 
rb_off£t
 = 0;

131 
do_øw
 = 0;

132 
vîbo£
 = 0;

133 c⁄° * 
devi˚_«me
 = 
NULL
;

134 * 
ª•
;

135 
ªt
 = 0;

138 
›ti⁄_ödex
 = 0;

140 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hHi:l:m:o:rvV", 
l⁄g_›ti⁄s
,

141 &
›ti⁄_ödex
);

142 i‡(
c
 == -1)

145 
c
) {

148 ++
do_hñp
;

151 ++
do_hex
;

154 
rb_id
 = 
	`sg_gë_num
(
›èrg
);

155 i‡((
rb_id
 < 0) || (rb_id > 255)) {

156 
	`Ârötf
(
°dîr
, "argumentÅo '--id' should be inÅheÑange "

158  
SG_LIB_SYNTAX_ERROR
;

162 
rb_Àn
 = 
	`sg_gë_num
(
›èrg
);

163 i‡(
rb_Àn
 < 0) {

164 
	`Ârötf
(
°dîr
, "badárgumentÅo '--length'\n");

165  
SG_LIB_SYNTAX_ERROR
;

169 i‡(
	`isdigô
(*
›èrg
)) {

170 
rb_mode
 = 
	`sg_gë_num
(
›èrg
);

171 i‡((
rb_mode
 < 0) || (rb_mode > 31)) {

172 
	`Ârötf
(
°dîr
, "argumentÅo '--mode' should be inÅhe "

174  
SG_LIB_SYNTAX_ERROR
;

177 
Àn
 = 
	`°æí
(
›èrg
);

178 
k
 = 0; k < 
NUM_MODES
; ++k) {

179 i‡(0 =
	`°∫cmp
(
modes
[
k
].
mode_°rög
, 
›èrg
, 
Àn
)) {

180 
rb_mode
 = 
modes
[
k
].
mode
;

184 i‡(
NUM_MODES
 =
k
) {

185 
	`¥öt_modes
();

186  
SG_LIB_SYNTAX_ERROR
;

191 
rb_off£t
 = 
	`sg_gë_num
(
›èrg
);

192 i‡(
rb_off£t
 < 0) {

193 
	`Ârötf
(
°dîr
, "badárgumentÅo '--offset'\n");

194  
SG_LIB_SYNTAX_ERROR
;

198 ++
do_øw
;

201 ++
vîbo£
;

204 
	`Ârötf
(
°dîr
, "vîsi⁄: %s\n", 
vîsi⁄_°r
);

207 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê0x%x ??\n", 
c
);

208 
	`ußge
();

209  
SG_LIB_SYNTAX_ERROR
;

212 i‡(
do_hñp
) {

213 i‡(
do_hñp
 > 1) {

214 
	`ußge
();

215 
	`Ârötf
(
°dîr
, "\n");

216 
	`¥öt_modes
();

218 
	`ußge
();

221 i‡(
›töd
 < 
¨gc
) {

222 i‡(
NULL
 =
devi˚_«me
) {

223 
devi˚_«me
 = 
¨gv
[
›töd
];

224 ++
›töd
;

226 i‡(
›töd
 < 
¨gc
) {

227 ; 
›töd
 < 
¨gc
; ++optind)

228 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

229 
¨gv
[
›töd
]);

230 
	`ußge
();

231  
SG_LIB_SYNTAX_ERROR
;

235 i‡(
NULL
 =
devi˚_«me
) {

236 
	`Ârötf
(
°dîr
, "missing deviceÇame!\n");

237 
	`ußge
();

238  
SG_LIB_SYNTAX_ERROR
;

241 i‡(
rb_Àn
 > 0) {

242 
ª•
 = (*)
	`mÆloc
(
rb_Àn
);

243 i‡(
NULL
 =
ª•
) {

244 
	`Ârötf
(
°dîr
, "unableÅoállocate %d bytes onÅhe heap\n",

245 
rb_Àn
);

246  
SG_LIB_CAT_OTHER
;

248 
	`mem£t
(
ª•
, 0, 
rb_Àn
);

250 
ª•
 = 
NULL
;

252 i‡(
do_øw
) {

253 i‡(
	`sg_£t_bö¨y_mode
(
STDOUT_FILENO
) < 0) {

254 
	`≥º‹
("sg_set_binary_mode");

255  
SG_LIB_FILE_ERROR
;

259 #ifde‡
SG_LIB_WIN32


260 #ifde‡
SG_LIB_WIN32_DIRECT


261 i‡(
vîbo£
 > 4)

262 
	`Ârötf
(
°dîr
, "Initial win32 SPT interface state: %s\n",

263 
	`scsi_±_wö32_•t_°©e
() ? "direct" : "indirect");

264 
	`scsi_±_wö32_dúe˘
(
SG_LIB_WIN32_DIRECT
 );

268 
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 0 , 
vîbo£
);

269 i‡(
sg_fd
 < 0) {

270 
	`Ârötf
(
°dîr
, "›íÉº‹: %s: %s\n", 
devi˚_«me
,

271 
	`ß„_°ªº‹
(-
sg_fd
));

272  
SG_LIB_FILE_ERROR
;

275 
ªs
 = 
	`sg_Œ_ªad_buf„r
(
sg_fd
, 
rb_mode
, 
rb_id
, 
rb_off£t
, 
ª•
,

276 
rb_Àn
, 1, 
vîbo£
);

277 i‡(0 !
ªs
) {

278 
ªt
 = 
ªs
;

279 
ªs
) {

280 
SG_LIB_CAT_NOT_READY
:

281 
	`Ârötf
(
°dîr
, "Read buffer failed, deviceÇotÑeady\n");

283 
SG_LIB_CAT_UNIT_ATTENTION
:

284 
	`Ârötf
(
°dîr
, "Read bufferÇot done, unitáttention\n");

286 
SG_LIB_CAT_ABORTED_COMMAND
:

287 
	`Ârötf
(
°dîr
, "Read buffer,áborted command\n");

289 
SG_LIB_CAT_INVALID_OP
:

290 
	`Ârötf
(
°dîr
, "Read buffer commandÇot supported\n");

292 
SG_LIB_CAT_ILLEGAL_REQ
:

293 
	`Ârötf
(
°dîr
, "bad field in Read buffer cdb\n");

296 
	`Ârötf
(
°dîr
, "Ród buf„∏ÁûedÑes=%d\n", 
ªs
);

299 } i‡(
rb_Àn
 > 0) {

300 i‡(
do_øw
)

301 
	`dSåRaw
((c⁄° *)
ª•
, 
rb_Àn
);

302 i‡(
do_hex
 || (
rb_Àn
 < 4))

303 
	`dSåHex
((c⁄° *)
ª•
, 
rb_Àn
, ((
do_hex
 > 1) ? 0 : 1));

305 
rb_mode
) {

306 
MODE_DESCRIPTOR
:

307 
k
 = (
ª•
[1] << 16) | (resp[2] << 8) |Ñesp[3];

308 
	`¥ötf
("OFFSET BOUNDARY: %d, Buffer offsetálignment: "

309 "%d-byã\n", 
ª•
[0], (1 <<Ñesp[0]));

310 
	`¥ötf
("BUFFER CAPACITY: %d (0x%x)\n", 
k
, k);

312 
MODE_ECHO_BDESC
:

313 
k
 = ((
ª•
[2] & 0x1F) << 8) |Ñesp[3];

315 
	`¥ötf
("EBOS:%d\n", 
ª•
[0] & 1 ? 1 : 0);

316 
	`¥ötf
("Echÿbuf„∏ˇ∑côy: %d (0x%x)\n", 
k
, k);

319 
	`dSåHex
((c⁄° *)
ª•
, 
rb_Àn
, (
vîbo£
 > 1 ? 0 : 1));

325 i‡(
ª•
)

326 
	`‰ì
(
ª•
);

327 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

328 i‡(
ªs
 < 0) {

329 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

330 i‡(0 =
ªt
)

331  
SG_LIB_FILE_ERROR
;

333  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

334 
	}
}

	@src/sg_read_long.c

15 
	~<uni°d.h
>

16 
	~<f˙é.h
>

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<°rög.h
>

20 
	~<gë›t.h
>

21 
	~<î∫o.h
>

22 
	#__STDC_FORMAT_MACROS
 1

	)

23 
	~<öây≥s.h
>

25 #ifde‡
HAVE_CONFIG_H


26 
	~"c⁄fig.h
"

28 
	~"sg_lib.h
"

29 
	~"sg_cmds_basic.h
"

30 
	~"sg_cmds_exåa.h
"

32 c⁄° * 
	gvîsi⁄_°r
 = "1.18 20130507";

34 
	#MAX_XFER_LEN
 10000

	)

36 
	#ME
 "sg_ªad_l⁄g: "

	)

38 
	#EBUFF_SZ
 256

	)

41 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

56 
	$ußge
()

58 
	`Ârötf
(
°dîr
, "Usage: "

84 
	}
}

88 
	$¥o˚ss_ªad_l⁄g
(
sg_fd
, 
do_16
, 
pblock
, 
c‹ª˘
,

89 
uöt64_t
 
Œba
, * 
d©a_out
, 
x„r_Àn
, 
vîbo£
)

91 
off£t
, 
ªs
;

92 c⁄° * 
ãn_‹
;

94 i‡(
do_16
)

95 
ªs
 = 
	`sg_Œ_ªad_l⁄g16
(
sg_fd
, 
pblock
, 
c‹ª˘
, 
Œba
, 
d©a_out
,

96 
x„r_Àn
, &
off£t
, 1, 
vîbo£
);

98 
ªs
 = 
	`sg_Œ_ªad_l⁄g10
(
sg_fd
, 
pblock
, 
c‹ª˘
, ()
Œba
,

99 
d©a_out
, 
x„r_Àn
, &
off£t
, 1, 
vîbo£
);

100 
ãn_‹
 = 
do_16
 ? "16" : "10";

101 
ªs
) {

104 
SG_LIB_CAT_NOT_READY
:

105 
	`Ârötf
(
°dîr
, " SCSI READ LONG (%s) failed, deviceÇotÑeady\n",

106 
ãn_‹
);

108 
SG_LIB_CAT_UNIT_ATTENTION
:

109 
	`Ârötf
(
°dîr
, " SCSI READ LONG (%s) failed, unitáttention\n",

110 
ãn_‹
);

112 
SG_LIB_CAT_ABORTED_COMMAND
:

113 
	`Ârötf
(
°dîr
, " SCSI READ LONG (%s) failed,áborted command\n",

114 
ãn_‹
);

116 
SG_LIB_CAT_INVALID_OP
:

117 
	`Ârötf
(
°dîr
, " SCSI READ LONG (%s) commandÇot supported\n",

118 
ãn_‹
);

120 
SG_LIB_CAT_ILLEGAL_REQ
:

121 
	`Ârötf
(
°dîr
, " SCSI READ LONG (%s) command, bad field in cdb\n",

122 
ãn_‹
);

124 
SG_LIB_CAT_ILLEGAL_REQ_WITH_INFO
:

125 
	`Ârötf
(
°dîr
, "<<< device indicates 'xfer_len' should be %d "

126 ">>>\n", 
x„r_Àn
 - 
off£t
);

129 
	`Ârötf
(
°dîr
, " SCSI READ LONG (%sËcomm™dÉº‹\n", 
ãn_‹
);

132  
ªs
;

133 
	}
}

137 
	$maö
(
¨gc
, * 
¨gv
[])

139 
sg_fd
, 
outfd
, 
ªs
, 
c
;

140 * 
ªadL⁄gBuff
 = 
NULL
;

141 * 
øwp
 = 
NULL
;

142 
c‹ª˘
 = 0;

143 
x„r_Àn
 = 520;

144 
do_16
 = 0;

145 
pblock
 = 0;

146 
uöt64_t
 
Œba
 = 0;

147 
ªad⁄ly
 = 0;

148 
vîbo£
 = 0;

149 
öt64_t
 
Œ
;

150 
gŸ_°dout
;

151 c⁄° * 
devi˚_«me
 = 
NULL
;

152 
out_‚ame
[256];

153 
ebuff
[
EBUFF_SZ
];

154 
ªt
 = 0;

156 
	`mem£t
(
out_‚ame
, 0,  out_fname);

158 
›ti⁄_ödex
 = 0;

160 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "chl:o:¥SvVx:", 
l⁄g_›ti⁄s
,

161 &
›ti⁄_ödex
);

162 i‡(
c
 == -1)

165 
c
) {

167 
c‹ª˘
 = 1;

171 
	`ußge
();

174 
Œ
 = 
	`sg_gë_Œnum
(
›èrg
);

175 i‡(-1 =
Œ
) {

176 
	`Ârötf
(
°dîr
, "badárgumentÅo '--lba'\n");

177  
SG_LIB_SYNTAX_ERROR
;

179 
Œba
 = (
uöt64_t
)
Œ
;

182 
	`°∫˝y
(
out_‚ame
, 
›èrg
, (out_fname) - 1);

185 
pblock
 = 1;

188 ++
ªad⁄ly
;

191 
do_16
 = 1;

194 ++
vîbo£
;

197 
	`Ârötf
(
°dîr
, 
ME
 "vîsi⁄: %s\n", 
vîsi⁄_°r
);

200 
x„r_Àn
 = 
	`sg_gë_num
(
›èrg
);

201 i‡(-1 =
x„r_Àn
) {

202 
	`Ârötf
(
°dîr
, "badárgumentÅo '--xfer_len'\n");

203  
SG_LIB_SYNTAX_ERROR
;

207 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê0x%x ??\n", 
c
);

208 
	`ußge
();

209  
SG_LIB_SYNTAX_ERROR
;

212 i‡(
›töd
 < 
¨gc
) {

213 i‡(
NULL
 =
devi˚_«me
) {

214 
devi˚_«me
 = 
¨gv
[
›töd
];

215 ++
›töd
;

217 i‡(
›töd
 < 
¨gc
) {

218 ; 
›töd
 < 
¨gc
; ++optind)

219 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

220 
¨gv
[
›töd
]);

221 
	`ußge
();

222  
SG_LIB_SYNTAX_ERROR
;

226 i‡(
NULL
 =
devi˚_«me
) {

227 
	`Ârötf
(
°dîr
, "missing deviceÇame!\n");

228 
	`ußge
();

229  
SG_LIB_SYNTAX_ERROR
;

231 i‡(
x„r_Àn
 >
MAX_XFER_LEN
){

232 
	`Ârötf
(
°dîr
, "xfer_len (%d) is out ofÑange ( < %d)\n",

233 
x„r_Àn
, 
MAX_XFER_LEN
);

234 
	`ußge
();

235  
SG_LIB_SYNTAX_ERROR
;

237 
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 
ªad⁄ly
, 
vîbo£
);

238 i‡(
sg_fd
 < 0) {

239 
	`Ârötf
(
°dîr
, 
ME
 "›íÉº‹: %s: %s\n", 
devi˚_«me
,

240 
	`ß„_°ªº‹
(-
sg_fd
));

241  
SG_LIB_FILE_ERROR
;

244 i‡(
NULL
 =(
øwp
 = 
	`mÆloc
(
MAX_XFER_LEN
))) {

245 
	`Ârötf
(
°dîr
, 
ME
 "out of memory\n");

246 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

247  
SG_LIB_SYNTAX_ERROR
;

249 
ªadL⁄gBuff
 = (*)
øwp
;

250 
	`mem£t
(
øwp
, 0x0, 
MAX_XFER_LEN
);

252 
	`Ârötf
(
°dîr
, 
ME
 "issueÑeadÜong (%s)Åo device %s\n xfer_len=%d "

253 "(0x%x),Üba=%" 
PRIu64
 " (0x%" 
PRIx64
 "), correct=%d\n",

254 (
do_16
 ? "16" : "10"), 
devi˚_«me
, 
x„r_Àn
, x„r_Àn, 
Œba
,

255 
Œba
, 
c‹ª˘
);

257 i‡((
ªt
 = 
	`¥o˚ss_ªad_l⁄g
(
sg_fd
, 
do_16
, 
pblock
, 
c‹ª˘
, 
Œba
,

258 
ªadL⁄gBuff
, 
x„r_Àn
, 
vîbo£
)))

259 
îr_out
;

261 i‡('\0' =
out_‚ame
[0])

262 
	`dSåHex
((c⁄° *)
øwp
, 
x„r_Àn
, 0);

264 
gŸ_°dout
 = (0 =
	`°rcmp
(
out_‚ame
, "-")) ? 1 : 0;

265 i‡(
gŸ_°dout
)

266 
outfd
 = 
STDOUT_FILENO
;

268 i‡((
outfd
 = 
	`›í
(
out_‚ame
, 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
,

270 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

271 
ME
 "couldÇŸ o≥¿%†f‹ wrôög", 
out_‚ame
);

272 
	`≥º‹
(
ebuff
);

273 
îr_out
;

276 i‡(
	`sg_£t_bö¨y_mode
(
outfd
) < 0) {

277 
	`≥º‹
("sg_set_binary_mode");

278 
îr_out
;

280 
ªs
 = 
	`wrôe
(
outfd
, 
ªadL⁄gBuff
, 
x„r_Àn
);

281 i‡(
ªs
 < 0) {

282 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, 
ME
 "couldn'àwrôêtÿ%s", 
out_‚ame
);

283 
	`≥º‹
(
ebuff
);

284 
îr_out
;

286 i‡(! 
gŸ_°dout
)

287 
	`˛o£
(
outfd
);

290 
îr_out
:

291 i‡(
øwp
Ë
	`‰ì
(rawp);

292 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

293 i‡(
ªs
 < 0) {

294 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

295 i‡(0 =
ªt
)

296  
SG_LIB_FILE_ERROR
;

298  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

299 
	}
}

	@src/sg_readcap.c

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<uni°d.h
>

19 
	~<°rög.h
>

20 
	~<f˙é.h
>

21 
	~<gë›t.h
>

22 
	#__STDC_FORMAT_MACROS
 1

	)

23 
	~<öây≥s.h
>

25 #ifde‡
HAVE_CONFIG_H


26 
	~"c⁄fig.h
"

28 
	~"sg_lib.h
"

29 
	~"sg_cmds_basic.h
"

32 c⁄° * 
	gvîsi⁄_°r
 = "3.88 20130507";

34 
	#ME
 "sg_ªadˇp: "

	)

36 
	#RCAP_REPLY_LEN
 8

	)

37 
	#RCAP16_REPLY_LEN
 32

	)

39 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

55 
	s›ts_t
 {

56 
	mdo_brõf
;

57 
	mdo_hñp
;

58 
	mdo_hex
;

59 
	mdo_lba
;

60 
	mdo_l⁄g
;

61 
	mdo_pmi
;

62 
	mdo_øw
;

63 
	mdo_vîbo£
;

64 
	mdo_vîsi⁄
;

65 
uöt64_t
 
	mŒba
;

66 c⁄° * 
	mdevi˚_«me
;

67 
	m›t_√w
;

70 
	$ußge
()

72 
	`Ârötf
(
°dîr
, "Usage: sg_readcap [--brief] [--help] [--hex] "

97 
	}
}

99 
	$ußge_ﬁd
()

101 
	`Ârötf
(
°dîr
, "Usage: sg_readcap [-16] [-b] [-h] [-H] [-lba=LBA] "

122 
	}
}

124 
	$ußge_f‹
(c⁄° 
›ts_t
 * 
›t•
)

126 i‡(
›t•
->
›t_√w
)

127 
	`ußge
();

129 
	`ußge_ﬁd
();

130 
	}
}

132 
	$¥o˚ss_˛_√w
(
›ts_t
 * 
›t•
, 
¨gc
, * 
¨gv
[])

134 
c
;

135 
a_⁄e
 = 0;

136 
öt64_t
 
¬
;

139 
›ti⁄_ödex
 = 0;

141 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "16bhHlL:NO¥vV", 
l⁄g_›ti⁄s
,

142 &
›ti⁄_ödex
);

143 i‡(
c
 == -1)

146 
c
) {

148 ++
a_⁄e
;

151 i‡(
a_⁄e
)

152 ++
›t•
->
do_l⁄g
;

155 ++
›t•
->
do_brõf
;

159 ++
›t•
->
do_hñp
;

162 ++
›t•
->
do_hex
;

165 ++
›t•
->
do_l⁄g
;

168 
¬
 = 
	`sg_gë_Œnum
(
›èrg
);

169 i‡(-1 =
¬
) {

170 
	`Ârötf
(
°dîr
, "badárgumentÅo '--lba='\n");

171 
	`ußge
();

172  
SG_LIB_SYNTAX_ERROR
;

174 
›t•
->
Œba
 = 
¬
;

176 i‡(
›t•
->
Œba
 > 0xfffffffeULL)

177 ++
›t•
->
do_l⁄g
;

178 ++
›t•
->
do_lba
;

183 
›t•
->
›t_√w
 = 0;

186 ++
›t•
->
do_pmi
;

189 ++
›t•
->
do_øw
;

192 ++
›t•
->
do_vîbo£
;

195 ++
›t•
->
do_vîsi⁄
;

198 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê%¯[0x%x]\n", 
c
, c);

199 i‡(
›t•
->
do_hñp
)

201 
	`ußge
();

202  
SG_LIB_SYNTAX_ERROR
;

205 i‡(
›töd
 < 
¨gc
) {

206 i‡(
NULL
 =
›t•
->
devi˚_«me
) {

207 
›t•
->
devi˚_«me
 = 
¨gv
[
›töd
];

208 ++
›töd
;

210 i‡(
›töd
 < 
¨gc
) {

211 ; 
›töd
 < 
¨gc
; ++optind)

212 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

213 
¨gv
[
›töd
]);

214 
	`ußge
();

215  
SG_LIB_SYNTAX_ERROR
;

219 
	}
}

221 
	$¥o˚ss_˛_ﬁd
(
›ts_t
 * 
›t•
, 
¨gc
, * 
¨gv
[])

223 
k
, 
jmp_out
, 
∂í
, 
num
;

224 c⁄° * 
˝
;

225 
uöt64_t
 
uu
;

227 
k
 = 1; k < 
¨gc
; ++k) {

228 
˝
 = 
¨gv
[
k
];

229 
∂í
 = 
	`°æí
(
˝
);

230 i‡(
∂í
 <= 0)

232 i‡('-' =*
˝
) {

233 --
∂í
, ++
˝
, 
jmp_out
 = 0;Ölen > 0; --plen, ++cp) {

234 *
˝
) {

236 i‡('6' =*(
˝
 + 1)) {

237 ++
›t•
->
do_l⁄g
;

238 ++
˝
;

239 --
∂í
;

241 
jmp_out
 = 1;

244 ++
›t•
->
do_brõf
;

248 ++
›t•
->
do_hñp
;

251 ++
›t•
->
do_hex
;

254 
›t•
->
›t_√w
 = 1;

259 i‡(0 =
	`°∫cmp
("pmi", 
˝
, 3)) {

260 ++
›t•
->
do_pmi
;

261 
˝
 += 2;

262 
∂í
 -= 2;

264 
jmp_out
 = 1;

267 ++
›t•
->
do_øw
;

270 ++
›t•
->
do_vîbo£
;

273 ++
›t•
->
do_vîsi⁄
;

276 
jmp_out
 = 1;

279 i‡(
jmp_out
)

282 i‡(
∂í
 <= 0)

284 i‡(0 =
	`°∫cmp
("lba=", 
˝
, 4)) {

285 
num
 = 
	`ssˇnf
(
˝
 + 4, "%" 
SCNx64
 "", &
uu
);

286 i‡(1 !
num
) {

287 
	`¥ötf
("Bad valueáfter 'lba=' option\n");

288 
	`ußge
();

289  
SG_LIB_SYNTAX_ERROR
;

292 i‡(
uu
 > 0xfffffffeULL)

293 ++
›t•
->
do_l⁄g
;

294 
›t•
->
Œba
 = 
uu
;

295 ++
›t•
->
do_lba
;

296 } i‡(0 =
	`°∫cmp
("-ﬁd", 
˝
, 4))

298 i‡(
jmp_out
) {

299 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄: %s\n", 
˝
);

300 
	`ußge
();

301  
SG_LIB_SYNTAX_ERROR
;

303 } i‡(0 =
›t•
->
devi˚_«me
)

304 
›t•
->
devi˚_«me
 = 
˝
;

306 
	`Ârötf
(
°dîr
, "too manyárguments, got: %s,ÇotÉxpecting: "

307 "%s\n", 
›t•
->
devi˚_«me
, 
˝
);

308 
	`ußge
();

309  
SG_LIB_SYNTAX_ERROR
;

313 
	}
}

315 
	$¥o˚ss_˛
(
›ts_t
 * 
›t•
, 
¨gc
, * 
¨gv
[])

317 
ªs
;

318 * 
˝
;

320 
˝
 = 
	`gëív
("SG3_UTILS_OLD_OPTS");

321 i‡(
˝
) {

322 
›t•
->
›t_√w
 = 0;

323 
ªs
 = 
	`¥o˚ss_˛_ﬁd
(
›t•
, 
¨gc
, 
¨gv
);

324 i‡((0 =
ªs
Ë&& 
›t•
->
›t_√w
)

325 
ªs
 = 
	`¥o˚ss_˛_√w
(
›t•
, 
¨gc
, 
¨gv
);

327 
›t•
->
›t_√w
 = 1;

328 
ªs
 = 
	`¥o˚ss_˛_√w
(
›t•
, 
¨gc
, 
¨gv
);

329 i‡((0 =
ªs
Ë&& (0 =
›t•
->
›t_√w
))

330 
ªs
 = 
	`¥o˚ss_˛_ﬁd
(
›t•
, 
¨gc
, 
¨gv
);

332  
ªs
;

333 
	}
}

335 
	$dSåRaw
(c⁄° * 
°r
, 
Àn
)

337 
k
;

339 
k
 = 0 ; k < 
Àn
; ++k)

340 
	`¥ötf
("%c", 
°r
[
k
]);

341 
	}
}

343 
	$maö
(
¨gc
, * 
¨gv
[])

345 
sg_fd
, 
k
, 
ªs
, 
¥Ÿ_í
, 
p_ty≥
;

346 
uöt64_t
 
Œa°_blk_addr
;

347 
ªt
 = 0;

348 
œ°_blk_addr
, 
block_size
;

349 
ª•_buff
[
RCAP16_REPLY_LEN
];

350 
›ts_t
 
›ts
;

352 
	`mem£t
(&
›ts
, 0, (opts));

353 
ªs
 = 
	`¥o˚ss_˛
(&
›ts
, 
¨gc
, 
¨gv
);

354 i‡(
ªs
)

355  
SG_LIB_SYNTAX_ERROR
;

356 i‡(
›ts
.
do_hñp
) {

357 
	`ußge_f‹
(&
›ts
);

360 i‡(
›ts
.
do_vîsi⁄
) {

361 
	`Ârötf
(
°dîr
, "Vîsi⁄ såög: %s\n", 
vîsi⁄_°r
);

365 i‡(
NULL
 =
›ts
.
devi˚_«me
) {

366 
	`Ârötf
(
°dîr
, "No DEVICEárgument given\n");

367 
	`ußge_f‹
(&
›ts
);

368  
SG_LIB_SYNTAX_ERROR
;

370 i‡(
›ts
.
do_øw
) {

371 i‡(
	`sg_£t_bö¨y_mode
(
STDOUT_FILENO
) < 0) {

372 
	`≥º‹
("sg_set_binary_mode");

373  
SG_LIB_FILE_ERROR
;

377 
	`mem£t
(
ª•_buff
, 0, (resp_buff));

379 i‡((0 =
›ts
.
do_pmi
Ë&& (›ts.
Œba
 > 0)) {

380 
	`Ârötf
(
°dîr
, 
ME
 "lba can only beÇon-zero when '--pmi' is set\n");

381 
	`ußge_f‹
(&
›ts
);

382  
SG_LIB_SYNTAX_ERROR
;

384 i‡((
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
›ts
.
devi˚_«me
,

385 (
›ts
.
do_l⁄g
 ? 0 : 1), o±s.
do_vîbo£
)) < 0) {

386 
	`Ârötf
(
°dîr
, 
ME
 "îr‹ o≥nög fûe: %s: %s\n", 
›ts
.
devi˚_«me
,

387 
	`ß„_°ªº‹
(-
sg_fd
));

388  
SG_LIB_FILE_ERROR
;

391 i‡(! 
›ts
.
do_l⁄g
) {

392 
ªs
 = 
	`sg_Œ_ªadˇp_10
(
sg_fd
, 
›ts
.
do_pmi
, ()›ts.
Œba
,

393 
ª•_buff
, 
RCAP_REPLY_LEN
, 1, 
›ts
.
do_vîbo£
);

394 
ªt
 = 
ªs
;

395 i‡(0 =
ªs
) {

396 i‡(
›ts
.
do_hex
 || o±s.
do_øw
) {

397 i‡(
›ts
.
do_øw
)

398 
	`dSåRaw
((c⁄° *)
ª•_buff
, 
RCAP_REPLY_LEN
);

400 
	`dSåHex
((c⁄° *)
ª•_buff
, 
RCAP_REPLY_LEN
, 1);

401 
good
;

403 
œ°_blk_addr
 = ((
ª•_buff
[0] << 24) | (resp_buff[1] << 16) |

404 (
ª•_buff
[2] << 8) |Ñesp_buff[3]);

405 i‡(0xfffffff‡!
œ°_blk_addr
) {

406 
block_size
 = ((
ª•_buff
[4] << 24) | (resp_buff[5] << 16) |

407 (
ª•_buff
[6] << 8) |Ñesp_buff[7]);

408 i‡(
›ts
.
do_brõf
) {

409 
	`¥ötf
("0x%x 0x%x\n", 
œ°_blk_addr
 + 1, 
block_size
);

410 
good
;

412 
	`¥ötf
("Read CapacityÑesults:\n");

413 i‡(
›ts
.
do_pmi
)

414 
	`¥ötf
(" PMI mode: givíÜba=0x%" 
PRIx64
 ",ÜastÜba "

415 "bef‹êdñay=0x%x\n", 
›ts
.
Œba
, 
œ°_blk_addr
);

417 
	`¥ötf
(" LastÜogical blockáddress=%u (0x%x), Number "

418 "o‡blocks=%u\n", 
œ°_blk_addr
,Üast_blk_addr,

419 
œ°_blk_addr
 + 1);

420 
	`¥ötf
(" Logiˇ»blockÜígth=%u byãs\n", 
block_size
);

421 i‡(! 
›ts
.
do_pmi
) {

422 
uöt64_t
 
tŸÆ_sz
 = 
œ°_blk_addr
 + 1;

423 
sz_mb
, 
sz_gb
;

425 
tŸÆ_sz
 *
block_size
;

426 
sz_mb
 = (()(
œ°_blk_addr
 + 1Ë* 
block_size
) /

428 
sz_gb
 = (()(
œ°_blk_addr
 + 1Ë* 
block_size
) /

430 
	`¥ötf
("Hence:\n");

431 #ifde‡
SG_LIB_MINGW


432 
	`¥ötf
(" Devi˚ size: %" 
PRIu64
 " bytes, %g MiB, %g "

433 "GB\n", 
tŸÆ_sz
, 
sz_mb
, 
sz_gb
);

435 
	`¥ötf
(" Devi˚ size: %" 
PRIu64
 " bytes, %.1f MiB, "

436 "%.2‡GB\n", 
tŸÆ_sz
, 
sz_mb
, 
sz_gb
);

439 
good
;

441 
	`¥ötf
("READ CAPACITY (10) indicates device capacityÅoo "

443 
›ts
.
do_l⁄g
 = 1;

445 } i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
) {

446 
›ts
.
do_l⁄g
 = 1;

447 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

448 i‡((
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
›ts
.
devi˚_«me
, 0 ,

449 
›ts
.
do_vîbo£
))

451 
	`Ârötf
(
°dîr
, 
ME
 "errorÑe-opening file: %s (rw): %s\n",

452 
›ts
.
devi˚_«me
, 
	`ß„_°ªº‹
(-
sg_fd
));

453  
SG_LIB_FILE_ERROR
;

455 i‡(
›ts
.
do_vîbo£
)

456 
	`Ârötf
(
°dîr
, "READ CAPACITY (10)Çot supported,Årying "

458 } i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

459 
	`Ârötf
(
°dîr
, "bad field in READ CAPACITY (10) cdb\n");

460 i‡(
SG_LIB_CAT_NOT_READY
 =
ªs
)

461 
	`Ârötf
(
°dîr
, "READ CAPACITY (10) failed, deviceÇotÑeady\n");

462 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

463 
	`Ârötf
(
°dîr
, "READ CAPACITY (10) failed,áborted command\n");

464 i‡(! 
›ts
.
do_vîbo£
)

465 
	`Ârötf
(
°dîr
, "READ CAPACITY (10) failed [res=%d],Åry "

466 "wôh '-v'\n", 
ªs
);

468 i‡(
›ts
.
do_l⁄g
) {

469 
ªs
 = 
	`sg_Œ_ªadˇp_16
(
sg_fd
, 
›ts
.
do_pmi
, o±s.
Œba
, 
ª•_buff
,

470 
RCAP16_REPLY_LEN
, 1, 
›ts
.
do_vîbo£
);

471 
ªt
 = 
ªs
;

472 i‡(0 =
ªs
) {

473 i‡(
›ts
.
do_hex
 || o±s.
do_øw
) {

474 i‡(
›ts
.
do_øw
)

475 
	`dSåRaw
((c⁄° *)
ª•_buff
, 
RCAP16_REPLY_LEN
);

477 
	`dSåHex
((c⁄° *)
ª•_buff
, 
RCAP16_REPLY_LEN
, 1);

478 
good
;

480 
k
 = 0, 
Œa°_blk_addr
 = 0; k < 8; ++k) {

481 
Œa°_blk_addr
 <<= 8;

482 
Œa°_blk_addr
 |
ª•_buff
[
k
];

484 
block_size
 = ((
ª•_buff
[8] << 24) | (resp_buff[9] << 16) |

485 (
ª•_buff
[10] << 8) |Ñesp_buff[11]);

486 i‡(
›ts
.
do_brõf
) {

487 
	`¥ötf
("0x%" 
PRIx64
 " 0x%x\n", 
Œa°_blk_addr
 + 1, 
block_size
);

488 
good
;

490 
¥Ÿ_í
 = !!(
ª•_buff
[12] & 0x1);

491 
p_ty≥
 = ((
ª•_buff
[12] >> 1) & 0x7);

492 
	`¥ötf
("Read CapacityÑesults:\n");

493 
	`¥ötf
(" Protection:Örot_en=%d,Ö_type=%d,Ö_i_exponent=%d",

494 
¥Ÿ_í
, 
p_ty≥
, ((
ª•_buff
[13] >> 4) & 0xf));

495 i‡(
¥Ÿ_í
)

496 
	`¥ötf
(" [ty≥ %dÖrŸe˘i⁄]\n", 
p_ty≥
 + 1);

498 
	`¥ötf
("\n");

499 
	`¥ötf
(" Logical blockÖrovisioning:Übpme=%d,Übprz=%d\n",

500 !!(
ª•_buff
[14] & 0x80), !!(resp_buff[14] & 0x40));

501 i‡(
›ts
.
do_pmi
)

502 
	`¥ötf
(" PMI mode: givíÜba=0x%" 
PRIx64
 ",ÜastÜba "

503 "bef‹êdñay=0x%" 
PRIx64
 "\n", 
›ts
.
Œba
,

504 
Œa°_blk_addr
);

506 
	`¥ötf
(" La°Üogiˇ»blockáddªss=%" 
PRIu64
 " (0x%"

507 
PRIx64
 "), Numbî o‡logiˇ»blocks=%" 
PRIu64
 "\n",

508 
Œa°_blk_addr
,Ülast_blk_addr,Ülast_blk_addr + 1);

509 
	`¥ötf
(" Logiˇ»blockÜígth=%u byãs\n", 
block_size
);

510 
	`¥ötf
(" Logical blocksÖerÖhysical blockÉxponent=%d\n",

511 
ª•_buff
[13] & 0xf);

512 
	`¥ötf
(" LowestálignedÜogical blockáddress=%d\n",

513 ((
ª•_buff
[14] & 0x3f) << 8) +Ñesp_buff[15]);

514 i‡(! 
›ts
.
do_pmi
) {

515 
uöt64_t
 
tŸÆ_sz
 = 
Œa°_blk_addr
 + 1;

516 
sz_mb
, 
sz_gb
;

518 
tŸÆ_sz
 *
block_size
;

519 
sz_mb
 = (()(
Œa°_blk_addr
 + 1Ë* 
block_size
) /

521 
sz_gb
 = (()(
Œa°_blk_addr
 + 1Ë* 
block_size
) /

523 
	`¥ötf
("Hence:\n");

524 #ifde‡
SG_LIB_MINGW


525 
	`¥ötf
(" Devi˚ size: %" 
PRIu64
 " bytes, %g MiB, %g GB\n",

526 
tŸÆ_sz
, 
sz_mb
, 
sz_gb
);

528 
	`¥ötf
(" Devi˚ size: %" 
PRIu64
 " bytes, %.1f MiB, %.2f "

529 "GB\n", 
tŸÆ_sz
, 
sz_mb
, 
sz_gb
);

532 
good
;

534 i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

535 
	`Ârötf
(
°dîr
, "READ CAPACITY (16)Çot supported\n");

536 i‡(
SG_LIB_CAT_NOT_READY
 =
ªs
)

537 
	`Ârötf
(
°dîr
, "READ CAPACITY (16) failed, deviceÇotÑeady\n");

538 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

539 
	`Ârötf
(
°dîr
, "READ CAPACITY (16) failed,áborted command\n");

540 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

541 
	`Ârötf
(
°dîr
, "bad field in READ CAPACITY (16) cdb "

543 i‡(! 
›ts
.
do_vîbo£
)

544 
	`Ârötf
(
°dîr
, "READ CAPACITY (16) failed [res=%d],Åry "

545 "wôh '-v'\n", 
ªs
);

547 i‡(
›ts
.
do_brõf
)

548 
	`¥ötf
("0x0 0x0\n");

550 
good
:

551 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

552 i‡(
ªs
 < 0) {

553 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

554 i‡(0 =
ªt
)

555  
SG_LIB_FILE_ERROR
;

557  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

558 
	}
}

	@src/sg_reassign.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<˘y≥.h
>

14 
	~<gë›t.h
>

15 
	~<limôs.h
>

16 
	#__STDC_FORMAT_MACROS
 1

	)

17 
	~<öây≥s.h
>

19 #ifde‡
HAVE_CONFIG_H


20 
	~"c⁄fig.h
"

22 
	~"sg_lib.h
"

23 
	~"sg_cmds_basic.h
"

24 
	~"sg_cmds_exåa.h
"

35 c⁄° * 
	gvîsi⁄_°r
 = "1.12 20130507";

37 
	#DEF_DEFECT_LIST_FORMAT
 4

	)

39 
	#MAX_NUM_ADDR
 1024

	)

42 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

57 
	$ußge
()

59 
	`Ârötf
(
°dîr
, "Usage: "

94 
	}
}

98 
öt64_t


99 
	$gë_Œnum
(c⁄° * 
buf
)

101 
ªs
, 
Àn
;

102 
öt64_t
 
num
;

103 
uöt64_t
 
unum
;

105 i‡((
NULL
 =
buf
) || ('\0' == buf[0]))

107 
Àn
 = 
	`°r•n
(
buf
, "0123456789aAbBcCdDeEfFhHxX");

108 i‡(0 =
Àn
)

110 i‡(('0' =
buf
[0]) && (('x' == buf[1]) || ('X' == buf[1]))) {

111 
ªs
 = 
	`ssˇnf
(
buf
 + 2, "%" 
SCNx64
 "", &
unum
);

112 
num
 = 
unum
;

113 } i‡('H' =
	`touµî
(
buf
[
Àn
 - 1])) {

114 
ªs
 = 
	`ssˇnf
(
buf
, "%" 
SCNx64
 "", &
unum
);

115 
num
 = 
unum
;

117 
ªs
 = 
	`ssˇnf
(
buf
, "%" 
SCNd64
 "", &
num
);

118 i‡(1 =
ªs
)

119  
num
;

122 
	}
}

130 
	$buûd_lba_¨r
(c⁄° * 
öp
, 
uöt64_t
 * 
lba_¨r
,

131 * 
lba_¨r_Àn
, 
max_¨r_Àn
)

133 
ö_Àn
, 
k
, 
j
, 
m
;

134 c⁄° * 
l˝
;

135 
öt64_t
 
Œ
;

136 * 
˝
;

137 * 
c2p
;

139 i‡((
NULL
 =
öp
Ë|| (NULL =
lba_¨r
) ||

140 (
NULL
 =
lba_¨r_Àn
))

142 
l˝
 = 
öp
;

143 
ö_Àn
 = 
	`°æí
(
öp
);

144 i‡(0 =
ö_Àn
)

145 *
lba_¨r_Àn
 = 0;

146 i‡('-' =
öp
[0]) {

147 
löe
[512];

148 
off
 = 0;

150 
j
 = 0; j < 512; ++j) {

151 i‡(
NULL
 =
	`fgës
(
löe
, ÷öe), 
°dö
))

153 
ö_Àn
 = 
	`°æí
(
löe
);

154 i‡(
ö_Àn
 > 0) {

155 i‡('\n' =
löe
[
ö_Àn
 - 1]) {

156 --
ö_Àn
;

157 
löe
[
ö_Àn
] = '\0';

160 i‡(0 =
ö_Àn
)

162 
l˝
 = 
löe
;

163 
m
 = 
	`°r•n
(
l˝
, " \t");

164 i‡(
m
 =
ö_Àn
)

166 
l˝
 +
m
;

167 
ö_Àn
 -
m
;

168 i‡('#' =*
l˝
)

170 
k
 = 
	`°r•n
(
l˝
, "0123456789aAbBcCdDeEfFhHxX ,\t");

171 i‡((
k
 < 
ö_Àn
Ë&& ('#' !
l˝
[k])) {

172 
	`Ârötf
(
°dîr
, "build_lba_arr: syntaxÉrrorát "

173 "löê%d,Öo†%d\n", 
j
 + 1, 
m
 + 
k
 + 1);

176 
k
 = 0; k < 1024; ++k) {

177 
Œ
 = 
	`gë_Œnum
(
l˝
);

178 i‡(-1 !
Œ
) {

179 i‡((
off
 + 
k
Ë>
max_¨r_Àn
) {

180 
	`Ârötf
(
°dîr
, "build_lba_arr:árrayÜength "

184 
lba_¨r
[
off
 + 
k
] = (
uöt64_t
)
Œ
;

185 
l˝
 = 
	`°Ωbrk
(lcp, " ,\t");

186 i‡(
NULL
 =
l˝
)

188 
l˝
 +
	`°r•n
(lcp, " ,\t");

189 i‡('\0' =*
l˝
)

192 i‡('#' =*
l˝
) {

193 --
k
;

196 
	`Ârötf
(
°dîr
, "build_lba_arr:Érror in "

197 "löê%d,áàpo†%d\n", 
j
 + 1,

198 ()(
l˝
 - 
löe
 + 1));

202 
off
 +(
k
 + 1);

204 *
lba_¨r_Àn
 = 
off
;

206 
k
 = 
	`°r•n
(
öp
, "0123456789aAbBcCdDeEfFhHxX, ");

207 i‡(
ö_Àn
 !
k
) {

208 
	`Ârötf
(
°dîr
, "buûd_lba_¨r:Éº‹áàpo†%d\n", 
k
 + 1);

211 
k
 = 0; k < 
max_¨r_Àn
; ++k) {

212 
Œ
 = 
	`gë_Œnum
(
l˝
);

213 i‡(-1 !
Œ
) {

214 
lba_¨r
[
k
] = (
uöt64_t
)
Œ
;

215 
˝
 = (*)
	`°rchr
(
l˝
, ',');

216 
c2p
 = (*)
	`°rchr
(
l˝
, ' ');

217 i‡(
NULL
 =
˝
)

218 
˝
 = 
c2p
;

219 i‡(
NULL
 =
˝
)

221 i‡(
c2p
 && (c2∞< 
˝
))

222 
˝
 = 
c2p
;

223 
l˝
 = 
˝
 + 1;

225 
	`Ârötf
(
°dîr
, "build_lba_arr:ÉrrorátÖos %d\n",

226 ()(
l˝
 - 
öp
 + 1));

230 *
lba_¨r_Àn
 = 
k
 + 1;

231 i‡(
k
 =
max_¨r_Àn
) {

232 
	`Ârötf
(
°dîr
, "build_lba_arr:árrayÜengthÉxceeded\n");

237 
	}
}

241 
	$maö
(
¨gc
, * 
¨gv
[])

243 
sg_fd
, 
ªs
, 
c
, 
num
, 
k
, 
j
;

244 
dummy
 = 0;

245 
gŸ_addr
 = 0;

246 
eight
 = -1;

247 
addr_¨r_Àn
 = 0;

248 
grown
 = 0;

249 
do_hex
 = 0;

250 
l⁄gli°
 = 0;

251 
¥im¨y
 = 0;

252 
vîbo£
 = 0;

253 c⁄° * 
devi˚_«me
 = 
NULL
;

254 
uöt64_t
 
addr_¨r
[
MAX_NUM_ADDR
];

255 
∑øm_¨r
[4 + (
MAX_NUM_ADDR
 * 8)];

256 
∑øm_Àn
 = 4;

257 
ªt
 = 0;

260 
›ti⁄_ödex
 = 0;

262 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "a:de:ghHl:pvV", 
l⁄g_›ti⁄s
,

263 &
›ti⁄_ödex
);

264 i‡(
c
 == -1)

267 
c
) {

269 
	`mem£t
(
addr_¨r
, 0, (addr_arr));

270 i‡(0 !
	`buûd_lba_¨r
(
›èrg
, 
addr_¨r
, &
addr_¨r_Àn
,

271 
MAX_NUM_ADDR
)) {

272 
	`Ârötf
(
°dîr
, "badárgumentÅo '--address'\n");

273  
SG_LIB_SYNTAX_ERROR
;

275 
gŸ_addr
 = 1;

278 
dummy
 = 1;

281 
num
 = 
	`ssˇnf
(
›èrg
, "%d", &
ªs
);

282 i‡((1 =
num
Ë&& ((0 =
ªs
) || (1 ==Ñes)))

283 
eight
 = 
ªs
;

285 
	`Ârötf
(
°dîr
, "value for '--eight=' must be 0 or 1\n");

286  
SG_LIB_SYNTAX_ERROR
;

290 
grown
 = 1;

294 
	`ußge
();

297 ++
do_hex
;

300 
num
 = 
	`ssˇnf
(
›èrg
, "%d", &
ªs
);

301 i‡((1 =
num
Ë&& ((0 =
ªs
) || (1 ==Ñes)))

302 
l⁄gli°
 = 
ªs
;

304 
	`Ârötf
(
°dîr
, "value for '--longlist=' must be 0 or 1\n");

305  
SG_LIB_SYNTAX_ERROR
;

309 
¥im¨y
 = 1;

312 ++
vîbo£
;

315 
	`Ârötf
(
°dîr
, "vîsi⁄: %s\n", 
vîsi⁄_°r
);

318 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê0x%x ??\n", 
c
);

319 
	`ußge
();

320  
SG_LIB_SYNTAX_ERROR
;

323 i‡(
›töd
 < 
¨gc
) {

324 i‡(
NULL
 =
devi˚_«me
) {

325 
devi˚_«me
 = 
¨gv
[
›töd
];

326 ++
›töd
;

328 i‡(
›töd
 < 
¨gc
) {

329 ; 
›töd
 < 
¨gc
; ++optind)

330 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

331 
¨gv
[
›töd
]);

332 
	`ußge
();

333  
SG_LIB_SYNTAX_ERROR
;

336 i‡(
NULL
 =
devi˚_«me
) {

337 
	`Ârötf
(
°dîr
, "missing deviceÇame!\n");

338 
	`ußge
();

339  
SG_LIB_SYNTAX_ERROR
;

341 i‡(
grown
 || 
¥im¨y
) {

342 i‡(
gŸ_addr
) {

343 
	`Ârötf
(
°dîr
, "can't have '--address=' with '--grown' or "

345 
	`ußge
();

346  
SG_LIB_SYNTAX_ERROR
;

348 } i‡((0 =
gŸ_addr
Ë|| (
addr_¨r_Àn
 < 1)) {

349 
	`Ârötf
(
°dîr
, "needátÜeast oneáddress (see '--address=')\n");

350 
	`ußge
();

351  
SG_LIB_SYNTAX_ERROR
;

353 i‡(
gŸ_addr
) {

354 
k
 = 0; k < 
addr_¨r_Àn
; ++k) {

355 i‡(
addr_¨r
[
k
] >
ULONG_MAX
) {

356 i‡(
eight
 < 0) {

357 
eight
 = 1;

359 } i‡(0 =
eight
) {

360 
	`Ârötf
(
°dîr
, "addressÇumber %dÉxceeds 32 bits so "

361 "'--eight=0' invÆid\n", 
k
 + 1);

362  
SG_LIB_SYNTAX_ERROR
;

366 i‡(
eight
 < 0)

367 
eight
 = 0;

369 
k
 = 4;

370 
j
 = 0; j < 
addr_¨r_Àn
; ++j) {

371 i‡(
eight
) {

372 
∑øm_¨r
[
k
++] = (
addr_¨r
[
j
] >> 56) & 0xff;

373 
∑øm_¨r
[
k
++] = (
addr_¨r
[
j
] >> 48) & 0xff;

374 
∑øm_¨r
[
k
++] = (
addr_¨r
[
j
] >> 40) & 0xff;

375 
∑øm_¨r
[
k
++] = (
addr_¨r
[
j
] >> 32) & 0xff;

377 
∑øm_¨r
[
k
++] = (
addr_¨r
[
j
] >> 24) & 0xff;

378 
∑øm_¨r
[
k
++] = (
addr_¨r
[
j
] >> 16) & 0xff;

379 
∑øm_¨r
[
k
++] = (
addr_¨r
[
j
] >> 8) & 0xff;

380 
∑øm_¨r
[
k
++] = 
addr_¨r
[
j
] & 0xff;

382 
∑øm_Àn
 = 
k
;

383 
k
 -= 4;

384 i‡(
l⁄gli°
) {

385 
∑øm_¨r
[0] = (
k
 >> 24) & 0xff;

386 
∑øm_¨r
[1] = (
k
 >> 16) & 0xff;

388 
∑øm_¨r
[2] = (
k
 >> 8) & 0xff;

389 
∑øm_¨r
[3] = 
k
 & 0xff;

392 
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 0 , 
vîbo£
);

393 i‡(
sg_fd
 < 0) {

394 
	`Ârötf
(
°dîr
, "›íÉº‹: %s: %s\n", 
devi˚_«me
,

395 
	`ß„_°ªº‹
(-
sg_fd
));

396  
SG_LIB_FILE_ERROR
;

399 i‡(
gŸ_addr
) {

400 i‡(
dummy
) {

401 
	`Ârötf
(
°dîr
, ">>> dummy: REASSIGN BLOCKSÇotÉxecuted\n");

402 i‡(
vîbo£
) {

403 
	`Ârötf
(
°dîr
, " Would haveÑeassignedÅhese blocks:\n");

404 
j
 = 0; j < 
addr_¨r_Àn
; ++j)

405 
	`¥ötf
(" 0x%" 
PRIx64
 "\n", 
addr_¨r
[
j
]);

409 
ªs
 = 
	`sg_Œ_ªassign_blocks
(
sg_fd
, 
eight
, 
l⁄gli°
, 
∑øm_¨r
,

410 
∑øm_Àn
, 1, 
vîbo£
);

411 
ªt
 = 
ªs
;

412 i‡(
SG_LIB_CAT_NOT_READY
 =
ªs
) {

413 
	`Ârötf
(
°dîr
, "REASSIGN BLOCKS failed, deviceÇotÑeady\n");

414 
îr_out
;

415 } i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
) {

416 
	`Ârötf
(
°dîr
, "REASSIGN BLOCKS, unitáttention\n");

417 
îr_out
;

418 } i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
) {

419 
	`Ârötf
(
°dîr
, "REASSIGN BLOCKS,áborted command\n");

420 
îr_out
;

421 } i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
) {

422 
	`Ârötf
(
°dîr
, "REASSIGN BLOCKSÇot supported\n");

423 
îr_out
;

424 } i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
) {

425 
	`Ârötf
(
°dîr
, "bad field in REASSIGN BLOCKS cdb\n");

426 
îr_out
;

427 } i‡(0 !
ªs
) {

428 
	`Ârötf
(
°dîr
, "REASSIGN BLOCKS failed\n");

429 
îr_out
;

432 
dl_f‹m©
 = 
DEF_DEFECT_LIST_FORMAT
;

433 
div
 = 0;

434 
dl_Àn
, 
gŸ_grown
, 
gŸ_¥im¨y
;

435 c⁄° * 
l°p
;

437 
∑øm_Àn
 = 4;

438 
	`mem£t
(
∑øm_¨r
, 0, 
∑øm_Àn
);

439 
ªs
 = 
	`sg_Œ_ªad_de„˘10
(
sg_fd
, 
¥im¨y
, 
grown
, 
dl_f‹m©
,

440 
∑øm_¨r
, 
∑øm_Àn
, 0, 
vîbo£
);

441 
ªt
 = 
ªs
;

442 i‡(
SG_LIB_CAT_NOT_READY
 =
ªs
) {

443 
	`Ârötf
(
°dîr
, "READ DEFECT DATA (10) failed, deviceÇot "

445 
îr_out
;

446 } i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
) {

447 
	`Ârötf
(
°dîr
, "READ DEFECT DATA (10)Çot supported\n");

448 
îr_out
;

449 } i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
) {

450 
	`Ârötf
(
°dîr
, "bad field in READ DEFECT DATA (10) cdb\n");

451 
îr_out
;

452 } i‡(0 !
ªs
) {

453 
	`Ârötf
(
°dîr
, "READ DEFECT DATA (10) failed\n");

454 
îr_out
;

456 i‡(
do_hex
) {

457 
	`dSåHex
((c⁄° *)
∑øm_¨r
, 
∑øm_Àn
, 1);

458 
îr_out
;

460 
l°p
 = "";

461 
gŸ_grown
 = !!(
∑øm_¨r
[1] & 0x8);

462 
gŸ_¥im¨y
 = !!(
∑øm_¨r
[1] & 0x10);

463 i‡(
gŸ_grown
 && 
gŸ_¥im¨y
)

464 
l°p
 = "grownándÖrimary defectÜists";

465 i‡(
gŸ_grown
)

466 
l°p
 = "grown defectÜist";

467 i‡(
gŸ_¥im¨y
)

468 
l°p
 = "primary defectÜist";

470 
	`Ârötf
(
°dîr
, "didn't get grown orÖrimaryÜist inÑesponse\n");

471 
îr_out
;

473 i‡(
vîbo£
)

474 
	`Ârötf
(
°dîr
, "asked for defectÜist format %d, got %d\n",

475 
dl_f‹m©
, (
∑øm_¨r
[1] & 0x7));

476 
dl_f‹m©
 = (
∑øm_¨r
[1] & 0x7);

477 
dl_f‹m©
) {

479 
div
 = 4;

484 
div
 = 8;

487 
	`Ârötf
(
°dîr
, "de„˘Üi° f‹m© %d unknown\n", 
dl_f‹m©
);

490 
dl_Àn
 = (
∑øm_¨r
[2] << 8) +Öaram_arr[3];

491 i‡(0 =
dl_Àn
)

492 
	`¥ötf
(">> EÀmít†ö %s: 0\n", 
l°p
);

494 i‡(0 =
div
)

495 
	`¥ötf
(">> %sÜength=%d bytes [unknownÇumber ofÉlements]\n",

496 
l°p
, 
dl_Àn
);

498 
	`¥ötf
(">> EÀmít†ö %s: %d\n", 
l°p
,

499 
dl_Àn
 / 
div
);

503 
îr_out
:

504 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

505 i‡(
ªs
 < 0) {

506 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

507 i‡(0 =
ªt
)

508  
SG_LIB_FILE_ERROR
;

510  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

511 
	}
}

	@src/sg_referrals.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<gë›t.h
>

14 
	#__STDC_FORMAT_MACROS
 1

	)

15 
	~<öây≥s.h
>

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

20 
	~"sg_lib.h
"

21 
	~"sg_cmds_basic.h
"

22 
	~"sg_cmds_exåa.h
"

32 c⁄° * 
	gvîsi⁄_°r
 = "1.03 20130507";

34 
	#MAX_REFER_BUFF_LEN
 (1024 * 1024)

	)

35 
	#DEF_REFER_BUFF_LEN
 256

	)

37 
	#TPGS_STATE_OPTIMIZED
 0x0

	)

38 
	#TPGS_STATE_NONOPTIMIZED
 0x1

	)

39 
	#TPGS_STATE_STANDBY
 0x2

	)

40 
	#TPGS_STATE_UNAVAILABLE
 0x3

	)

41 
	#TPGS_STATE_LB_DEPENDENT
 0x4

	)

42 
	#TPGS_STATE_OFFLINE
 0xê

	)

43 
	#TPGS_STATE_TRANSITIONING
 0xf

	)

45 
	gª„ºÆBuff
[
DEF_REFER_BUFF_LEN
];

46 * 
	gª„ºÆBufÂ
 = 
ª„ºÆBuff
;

48 c⁄° *
	$decode_çgs_°©e
(c⁄° 
°
)

50 
°
) {

51 
TPGS_STATE_OPTIMIZED
:

54 
TPGS_STATE_NONOPTIMIZED
:

57 
TPGS_STATE_STANDBY
:

60 
TPGS_STATE_UNAVAILABLE
:

63 
TPGS_STATE_LB_DEPENDENT
:

66 
TPGS_STATE_OFFLINE
:

69 
TPGS_STATE_TRANSITIONING
:

76 
	}
}

78 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

79 {"hñp", 
no_¨gumít
, 0, 'h'},

80 {"hex", 
no_¨gumít
, 0, 'H'},

81 {"lba", 
ªquúed_¨gumít
, 0, 'l'},

82 {"maxÀn", 
ªquúed_¨gumít
, 0, 'm'},

83 {"⁄e-£gmít", 
no_¨gumít
, 0, 's'},

84 {"øw", 
no_¨gumít
, 0, 'r'},

85 {"vîbo£", 
no_¨gumít
, 0, 'v'},

86 {"vîsi⁄", 
no_¨gumít
, 0, 'V'},

91 
	$ußge
()

93 
	`Ârötf
(
°dîr
, "Usage: "

106 
DEF_REFER_BUFF_LEN
 );

107 
	`Ârötf
(
°dîr
,

115 
	}
}

118 
	$dSåRaw
(c⁄° * 
°r
, 
Àn
)

120 
k
;

122 
k
 = 0 ; k < 
Àn
; ++k)

123 
	`¥ötf
("%c", 
°r
[
k
]);

124 
	}
}

131 
	$decode_ª„ºÆ_desc
(c⁄° * 
u˝
, 
byãs
)

133 
j
, 
n
;

134 
uöt64_t
 
fú°
, 
œ°
;

136 i‡(
NULL
 =
u˝
)

139 i‡(
byãs
 < 20)

142 
fú°
 = ((
uöt64_t
)
u˝
[4] << 56) | ((uint64_t)ucp[5] << 48) |

143 ((
uöt64_t
)
u˝
[6] << 40) | ((uint64_t)ucp[7] << 32) |

144 ((
uöt64_t
)
u˝
[8] << 24) | ((uint64_t)ucp[9] << 16) |

145 ((
uöt64_t
)
u˝
[10] << 8) | (uint64_t)ucp[11];

146 
œ°
 = ((
uöt64_t
)
u˝
[12] << 56) | ((uint64_t)ucp[13] << 48) |

147 ((
uöt64_t
)
u˝
[14] << 40) | ((uint64_t)ucp[15] << 32) |

148 ((
uöt64_t
)
u˝
[16] << 24) | ((uint64_t)ucp[17] << 16) |

149 ((
uöt64_t
)
u˝
[18] << 8) | (uint64_t)ucp[19];

151 
	`¥ötf
("Å¨gëÖ‹àdes¸ùt‹s: %d\n", 
u˝
[3]);

152 
	`¥ötf
(" u£∏d©®£gmít: fú°Üb®%" 
PRIu64
 ",ÜastÜba %"

153 
PRIu64
 "\n", 
fú°
, 
œ°
);

154 
n
 = 20;

155 
byãs
 -
n
;

156 
j
 = 0; j < 
u˝
[3]; j++) {

157 i‡(
byãs
 < 4)

159 
	`¥ötf
("Å¨gëÖ‹àdes¸ùt‹ %d:\n", 
j
);

160 
	`¥ötf
("Öort group %x state (%s)\n",

161 (
u˝
[
n
+2] << 8Ë| (u˝[n+3]), 
	`decode_çgs_°©e
(ucp[n] & 0xf));

162 
n
 += 4;

163 
byãs
 -= 4;

165  
n
;

166 
	}
}

170 
	$maö
(
¨gc
, * 
¨gv
[])

172 
sg_fd
, 
k
, 
ªs
, 
c
, 
æí
;

173 
do_hex
 = 0;

174 
do_⁄e_£gmít
 = 0;

175 
öt64_t
 
Œ
;

176 
uöt64_t
 
lba
 = 0;

177 
maxÀn
 = 
DEF_REFER_BUFF_LEN
;

178 
do_øw
 = 0;

179 
vîbo£
 = 0;

180 
desc
 = 0;

181 c⁄° * 
devi˚_«me
 = 
NULL
;

182 c⁄° * 
u˝
;

183 
ªt
 = 0;

186 
›ti⁄_ödex
 = 0;

188 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hHl:m:rsvV", 
l⁄g_›ti⁄s
,

189 &
›ti⁄_ödex
);

190 i‡(
c
 == -1)

193 
c
) {

196 
	`ußge
();

199 ++
do_hex
;

202 
Œ
 = 
	`sg_gë_Œnum
(
›èrg
);

203 i‡(-1 =
Œ
) {

204 
	`Ârötf
(
°dîr
, "badárgumentÅo '--lba'\n");

205  
SG_LIB_SYNTAX_ERROR
;

207 
lba
 = (
uöt64_t
)
Œ
;

210 
maxÀn
 = 
	`sg_gë_num
(
›èrg
);

211 i‡((
maxÀn
 < 0Ë|| (maxÀ¿> 
MAX_REFER_BUFF_LEN
)) {

212 
	`Ârötf
(
°dîr
, "argumentÅo '--maxlen' should be %d or "

213 "Àss\n", 
MAX_REFER_BUFF_LEN
);

214  
SG_LIB_SYNTAX_ERROR
;

218 ++
do_⁄e_£gmít
;

221 ++
do_øw
;

224 ++
vîbo£
;

227 
	`Ârötf
(
°dîr
, "vîsi⁄: %s\n", 
vîsi⁄_°r
);

230 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê0x%x ??\n", 
c
);

231 
	`ußge
();

232  
SG_LIB_SYNTAX_ERROR
;

235 i‡(
›töd
 < 
¨gc
) {

236 i‡(
NULL
 =
devi˚_«me
) {

237 
devi˚_«me
 = 
¨gv
[
›töd
];

238 ++
›töd
;

240 i‡(
›töd
 < 
¨gc
) {

241 ; 
›töd
 < 
¨gc
; ++optind)

242 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

243 
¨gv
[
›töd
]);

244 
	`ußge
();

245  
SG_LIB_SYNTAX_ERROR
;

249 i‡(
NULL
 =
devi˚_«me
) {

250 
	`Ârötf
(
°dîr
, "No DEVICEárgument given\n");

251 
	`ußge
();

252  
SG_LIB_SYNTAX_ERROR
;

254 i‡(
maxÀn
 > 
DEF_REFER_BUFF_LEN
) {

255 
ª„ºÆBufÂ
 = (*)
	`ˇŒoc
(
maxÀn
, 1);

256 i‡(
NULL
 =
ª„ºÆBufÂ
) {

257 
	`Ârötf
(
°dîr
, "u«bÀÅÿÆloˇã %d byã†⁄ hóp\n", 
maxÀn
);

258  
SG_LIB_SYNTAX_ERROR
;

261 i‡(
do_øw
) {

262 i‡(
	`sg_£t_bö¨y_mode
(
STDOUT_FILENO
) < 0) {

263 
	`≥º‹
("sg_set_binary_mode");

264 
ªt
 = 
SG_LIB_FILE_ERROR
;

265 
‰ì_buff
;

269 
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 0 , 
vîbo£
);

270 i‡(
sg_fd
 < 0) {

271 
	`Ârötf
(
°dîr
, "›íÉº‹: %s: %s\n", 
devi˚_«me
,

272 
	`ß„_°ªº‹
(-
sg_fd
));

273 
ªt
 = 
SG_LIB_FILE_ERROR
;

274 
‰ì_buff
;

277 
ªs
 = 
	`sg_Œ_ªp‹t_ª„ºÆs
(
sg_fd
, 
lba
, 
do_⁄e_£gmít
, 
ª„ºÆBufÂ
,

278 
maxÀn
, 1, 
vîbo£
);

279 
ªt
 = 
ªs
;

280 i‡(0 =
ªs
) {

281 i‡(
maxÀn
 >= 4)

289 
æí
 = (
ª„ºÆBufÂ
[0] << 24) + (referralBuffp[1] << 16) +

290 (
ª„ºÆBufÂ
[2] << 8) +ÑeferralBuffp[3] + 4;

292 
æí
 = 
maxÀn
;

293 
k
 = (
æí
 > 
maxÀn
) ? maxlen :Ñlen;

294 i‡(
do_øw
) {

295 
	`dSåRaw
((c⁄° *)
ª„ºÆBufÂ
, 
k
);

296 
the_íd
;

298 i‡(
do_hex
) {

299 
	`dSåHex
((c⁄° *)
ª„ºÆBufÂ
, 
k
, 1);

300 
the_íd
;

302 i‡(
maxÀn
 < 4) {

303 i‡(
vîbo£
)

304 
	`Ârötf
(
°dîr
, "Exiting becauseállocationÜength (maxlen) "

306 
the_íd
;

308 i‡((
vîbo£
 > 1Ë|| (vîbo£ && (
æí
 > 
maxÀn
))) {

309 
	`Ârötf
(
°dîr
, "ª•⁄£Üígth %d byãs\n", 
æí
);

310 i‡(
æí
 > 
maxÀn
)

311 
	`Ârötf
(
°dîr
, " ... which is greaterÅhan maxlen "

312 "◊Œoˇti⁄Üígth %d),Årunˇti⁄\n", 
maxÀn
);

314 i‡(
æí
 > 
maxÀn
)

315 
æí
 = 
maxÀn
;

317 
u˝
 = 
ª„ºÆBufÂ
 + 4;

318 
k
 = 0;

319 
	`¥ötf
("ReportÑeferrals:\n");

320 
k
 < 
æí
 - 4) {

321 
	`¥ötf
(" des¸ùt‹ %d:\n", 
desc
);

322 
ªs
 = 
	`decode_ª„ºÆ_desc
(
u˝
 + 
k
, 
æí
 - 4 - k);

323 i‡(
ªs
 < 0) {

324 
	`Ârötf
(
°dîr
, "bad user data segmentÑeferral descriptor\n");

325 
k
 = 
æí
 - 4;

328 
k
 +
ªs
;

329 
desc
++;

331 } i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

332 
	`Ârötf
(
°dîr
, "Report Referrals commandÇot supported\n");

333 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

334 
	`Ârötf
(
°dîr
, "Report Referrals,áborted command\n");

335 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

336 
	`Ârötf
(
°dîr
, "Report Referrals command has bad field in cdb\n");

338 
	`Ârötf
(
°dîr
, "Report Referrals command failed\n");

339 i‡(0 =
vîbo£
)

340 
	`Ârötf
(
°dîr
, "Åry '-v' option for more information\n");

343 
the_íd
:

344 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

345 i‡(
ªs
 < 0) {

346 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

347 i‡(0 =
ªt
)

348 
ªt
 = 
SG_LIB_FILE_ERROR
;

350 
‰ì_buff
:

351 i‡(
ª„ºÆBufÂ
 && (ª„ºÆBufÂ !
ª„ºÆBuff
))

352 
	`‰ì
(
ª„ºÆBufÂ
);

353  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

354 
	}
}

	@src/sg_requests.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<gë›t.h
>

14 
	~<sys/time.h
>

16 #ifde‡
HAVE_CONFIG_H


17 
	~"c⁄fig.h
"

19 
	~"sg_lib.h
"

20 
	~"sg_cmds_basic.h
"

28 c⁄° * 
	gvîsi⁄_°r
 = "1.23 20130530";

30 
	#MAX_REQS_RESP_LEN
 255

	)

31 
	#DEF_REQS_RESP_LEN
 252

	)

34 #i‡
deföed
(
MSC_VER
Ë|| deföed(
__MINGW32__
)

35 
	#HAVE_MS_SLEEP


	)

37 #ifde‡
HAVE_MS_SLEEP


38 
	~<wödows.h
>

39 
	#¶ìp_f‹
(
£c⁄ds
Ë
	`SÀï
–(£c⁄dsË* 1000)

	)

41 
	#¶ìp_f‹
(
£c⁄ds
Ë
	`¶ìp
(£c⁄ds)

	)

44 
	#ME
 "sg_ªque°s: "

	)

47 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

48 {"desc", 
no_¨gumít
, 0, 'd'},

49 {"hñp", 
no_¨gumít
, 0, 'h'},

50 {"hex", 
no_¨gumít
, 0, 'H'},

51 {"maxÀn", 
ªquúed_¨gumít
, 0, 'm'},

52 {"num", 
ªquúed_¨gumít
, 0, 'n'},

53 {"¥ogªss", 
no_¨gumít
, 0, 'p'},

54 {"øw", 
no_¨gumít
, 0, 'r'},

55 {"°©us", 
no_¨gumít
, 0, 's'},

56 {"time", 
no_¨gumít
, 0, 't'},

57 {"vîbo£", 
no_¨gumít
, 0, 'v'},

58 {"vîsi⁄", 
no_¨gumít
, 0, 'V'},

63 
	$ußge
()

65 
	`Ârötf
(
°dîr
, "Usage: "

94 
	}
}

97 
	$dSåRaw
(c⁄° * 
°r
, 
Àn
)

99 
k
;

101 
k
 = 0 ; k < 
Àn
; ++k)

102 
	`¥ötf
("%c", 
°r
[
k
]);

103 
	}
}

106 
	$maö
(
¨gc
, * 
¨gv
[])

108 
sg_fd
, 
ªs
, 
c
, 
ª•_Àn
, 
k
, 
¥ogªss
;

109 
ªque°Sí£Buff
[
MAX_REQS_RESP_LEN
 + 1];

110 
desc
 = 0;

111 
num_rs
 = 1;

112 
do_hex
 = 0;

113 
maxÀn
 = 0;

114 
do_¥ogªss
 = 0;

115 
do_øw
 = 0;

116 
do_°©us
 = 0;

117 
do_time
 = 0;

118 
vîbo£
 = 0;

119 c⁄° * 
devi˚_«me
 = 
NULL
;

120 
ªt
 = 0;

121 #i‚de‡
SG_LIB_MINGW


122 
timevÆ
 
°¨t_tm
, 
íd_tm
;

126 
›ti⁄_ödex
 = 0;

128 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "dhHm:n:¥°vV", 
l⁄g_›ti⁄s
,

129 &
›ti⁄_ödex
);

130 i‡(
c
 == -1)

133 
c
) {

135 
desc
 = 1;

139 
	`ußge
();

142 ++
do_hex
;

145 
maxÀn
 = 
	`sg_gë_num
(
›èrg
);

146 i‡((
maxÀn
 < 0Ë|| (maxÀ¿> 
MAX_REQS_RESP_LEN
)) {

147 
	`Ârötf
(
°dîr
, "argumentÅo '--maxlen' should be %d or "

148 "Àss\n", 
MAX_REQS_RESP_LEN
);

149  
SG_LIB_SYNTAX_ERROR
;

153 
num_rs
 = 
	`sg_gë_num
(
›èrg
);

154 i‡(
num_rs
 < 1) {

155 
	`Ârötf
(
°dîr
, "badárgumentÅo '--num'\n");

156  
SG_LIB_SYNTAX_ERROR
;

160 ++
do_¥ogªss
;

163 ++
do_øw
;

166 
do_°©us
 = 1;

169 
do_time
 = 1;

172 ++
vîbo£
;

175 
	`Ârötf
(
°dîr
, 
ME
 "vîsi⁄: %s\n", 
vîsi⁄_°r
);

178 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê0x%x ??\n", 
c
);

179 
	`ußge
();

180  
SG_LIB_SYNTAX_ERROR
;

183 i‡(
›töd
 < 
¨gc
) {

184 i‡(
NULL
 =
devi˚_«me
) {

185 
devi˚_«me
 = 
¨gv
[
›töd
];

186 ++
›töd
;

188 i‡(
›töd
 < 
¨gc
) {

189 ; 
›töd
 < 
¨gc
; ++optind)

190 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

191 
¨gv
[
›töd
]);

192 
	`ußge
();

193  
SG_LIB_SYNTAX_ERROR
;

197 i‡(0 =
maxÀn
)

198 
maxÀn
 = 
DEF_REQS_RESP_LEN
;

199 i‡(
NULL
 =
devi˚_«me
) {

200 
	`Ârötf
(
°dîr
, "missing deviceÇame!\n");

201 
	`ußge
();

202  
SG_LIB_SYNTAX_ERROR
;

204 i‡(
do_øw
) {

205 i‡(
	`sg_£t_bö¨y_mode
(
STDOUT_FILENO
) < 0) {

206 
	`≥º‹
("sg_set_binary_mode");

207  
SG_LIB_FILE_ERROR
;

211 
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 1 , 
vîbo£
);

212 i‡(
sg_fd
 < 0) {

213 
	`Ârötf
(
°dîr
, 
ME
 "›íÉº‹: %s: %s\n", 
devi˚_«me
,

214 
	`ß„_°ªº‹
(-
sg_fd
));

215  
SG_LIB_FILE_ERROR
;

217 i‡(
do_¥ogªss
) {

218 
k
 = 0; k < 
num_rs
; ++k) {

219 i‡(
k
 > 0)

220 
	`¶ìp_f‹
(30);

221 
	`mem£t
(
ªque°Sí£Buff
, 0x0, (requestSenseBuff));

222 
ªs
 = 
	`sg_Œ_ªque°_£n£
(
sg_fd
, 
desc
, 
ªque°Sí£Buff
, 
maxÀn
,

223 1, 
vîbo£
);

224 i‡(
ªs
) {

225 
ªt
 = 
ªs
;

226 i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

227 
	`Ârötf
(
°dîr
, "Request Sense commandÇot supported\n");

228 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

229 
	`Ârötf
(
°dîr
, "bad field in Request Sense cdb\n");

230 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

231 
	`Ârötf
(
°dîr
, "Request Sense,áborted command\n");

233 
	`Ârötf
(
°dîr
, "Request Sense command unexpectedly "

235 i‡(0 =
vîbo£
)

236 
	`Ârötf
(
°dîr
, "ÅryÅhe '-v' option for "

242 
ª•_Àn
 = 
ªque°Sí£Buff
[7] + 8;

243 i‡(
vîbo£
 > 1) {

244 
	`Ârötf
(
°dîr
, "Parameter data in hex\n");

245 
	`dSåHex
((c⁄° *)
ªque°Sí£Buff
, 
ª•_Àn
, 1);

247 
¥ogªss
 = -1;

248 
	`sg_gë_£n£_¥ogªss_Êd
(
ªque°Sí£Buff
, 
ª•_Àn
,

249 &
¥ogªss
);

250 i‡(
¥ogªss
 < 0) {

251 
ªt
 = 
ªs
;

252 i‡(
vîbo£
 > 1)

253 
	`Ârötf
(
°dîr
, "NoÖrogress indication found, "

254 "ôî©i⁄ %d\n", 
k
 + 1);

258 
	`¥ötf
("Progress indication: %d.%02d%% done\n",

259 (
¥ogªss
 * 100) / 65536,

260 ((
¥ogªss
 * 100) % 65536) / 656);

262 
föish
;

265 #i‚de‡
SG_LIB_MINGW


266 i‡(
do_time
) {

267 
°¨t_tm
.
tv_£c
 = 0;

268 
°¨t_tm
.
tv_u£c
 = 0;

269 
	`gëtimeofday
(&
°¨t_tm
, 
NULL
);

273 
ªque°Sí£Buff
[0] = '\0';

274 
ªque°Sí£Buff
[7] = '\0';

275 
k
 = 0; k < 
num_rs
; ++k) {

276 
	`mem£t
(
ªque°Sí£Buff
, 0x0, (requestSenseBuff));

277 
ªs
 = 
	`sg_Œ_ªque°_£n£
(
sg_fd
, 
desc
, 
ªque°Sí£Buff
, 
maxÀn
,

278 1, 
vîbo£
);

279 
ªt
 = 
ªs
;

280 i‡(0 =
ªs
) {

281 
ª•_Àn
 = 
ªque°Sí£Buff
[7] + 8;

282 i‡(
do_øw
)

283 
	`dSåRaw
((c⁄° *)
ªque°Sí£Buff
, 
ª•_Àn
);

284 i‡(
do_hex
)

285 
	`dSåHex
((c⁄° *)
ªque°Sí£Buff
, 
ª•_Àn
, 1);

286 i‡(1 =
num_rs
) {

287 
	`Ârötf
(
°dîr
, "DecodeÖarameter dataás sense data:\n");

288 
	`sg_¥öt_£n£
(
NULL
, 
ªque°Sí£Buff
, 
ª•_Àn
, 0);

289 i‡(
vîbo£
 > 1) {

290 
	`Ârötf
(
°dîr
, "\nParameter data in hex\n");

291 
	`dSåHex
((c⁄° *)
ªque°Sí£Buff
, 
ª•_Àn
, 1);

295 } i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

296 
	`Ârötf
(
°dîr
, "Request Sense commandÇot supported\n");

297 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

298 
	`Ârötf
(
°dîr
, "bad field in Request Sense cdb\n");

299 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

300 
	`Ârötf
(
°dîr
, "Request Sense,áborted command\n");

302 
	`Ârötf
(
°dîr
, "Request Sense command unexpectedly failed\n");

303 i‡(0 =
vîbo£
)

304 
	`Ârötf
(
°dîr
, "ÅryÅhe '-v' option for "

309 i‡((0 =
ªt
Ë&& 
do_°©us
) {

310 
ª•_Àn
 = 
ªque°Sí£Buff
[7] + 8;

311 
ªt
 = 
	`sg_îr_ˇãg‹y_£n£
(
ªque°Sí£Buff
, 
ª•_Àn
);

312 i‡(
SG_LIB_CAT_NO_SENSE
 =
ªt
) {

313 
sg_scsi_£n£_hdr
 
ssh
;

315 i‡(
	`sg_scsi_n‹mÆize_£n£
(
ªque°Sí£Buff
, 
ª•_Àn
, &
ssh
)) {

316 i‡((0 =
ssh
.
asc
Ë&& (0 =ssh.
ascq
))

317 
ªt
 = 0;

321 #i‚de‡
SG_LIB_MINGW


322 i‡((
do_time
Ë&& (
°¨t_tm
.
tv_£c
 || sèπ_tm.
tv_u£c
)) {

323 
timevÆ
 
ªs_tm
;

324 
a
, 
b
;

326 
	`gëtimeofday
(&
íd_tm
, 
NULL
);

327 
ªs_tm
.
tv_£c
 = 
íd_tm
.tv_£¯- 
°¨t_tm
.tv_sec;

328 
ªs_tm
.
tv_u£c
 = 
íd_tm
.tv_u£¯- 
°¨t_tm
.tv_usec;

329 i‡(
ªs_tm
.
tv_u£c
 < 0) {

330 --
ªs_tm
.
tv_£c
;

331 
ªs_tm
.
tv_u£c
 += 1000000;

333 
a
 = 
ªs_tm
.
tv_£c
;

334 
a
 +(0.000001 * 
ªs_tm
.
tv_u£c
);

335 
b
 = ()
num_rs
;

336 
	`¥ötf
("timeÅoÖerform commands was %d.%06d secs",

337 ()
ªs_tm
.
tv_£c
, (Ïes_tm.
tv_u£c
);

338 i‡(
a
 > 0.00001)

339 
	`¥ötf
("; %.2‡›î©i⁄s/£c\n", 
b
 / 
a
);

341 
	`¥ötf
("\n");

345 
föish
:

346 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

347 i‡(
ªs
 < 0) {

348 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

349 i‡(0 =
ªt
)

350  
SG_LIB_FILE_ERROR
;

352  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

353 
	}
}

	@src/sg_reset.c

12 
	~<uni°d.h
>

13 
	~<f˙é.h
>

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

17 
	~<î∫o.h
>

18 
	~<sys/io˘l.h
>

19 
	~<sys/ty≥s.h
>

20 
	~<sys/°©.h
>

21 
	~<gë›t.h
>

23 #ifde‡
HAVE_CONFIG_H


24 
	~"c⁄fig.h
"

26 
	~"sg_io_löux.h
"

29 
	#ME
 "sg_ª£t: "

	)

31 c⁄° * 
	gvîsi⁄_°r
 = "0.58 20130507";

33 #i‚de‡
SG_SCSI_RESET


34 
	#SG_SCSI_RESET
 0x2284

	)

37 #i‚de‡
SG_SCSI_RESET_NOTHING


38 
	#SG_SCSI_RESET_NOTHING
 0

	)

39 
	#SG_SCSI_RESET_DEVICE
 1

	)

40 
	#SG_SCSI_RESET_BUS
 2

	)

41 
	#SG_SCSI_RESET_HOST
 3

	)

44 #i‚de‡
SG_SCSI_RESET_TARGET


45 
	#SG_SCSI_RESET_TARGET
 4

	)

48 #i‚de‡
SG_SCSI_RESET_NO_ESCALATE


49 
	#SG_SCSI_RESET_NO_ESCALATE
 0x100

	)

52 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

53 {"bus", 
no_¨gumít
, 0, 'b'},

54 {"devi˚", 
no_¨gumít
, 0, 'd'},

55 {"hñp", 
no_¨gumít
, 0, 'z'},

56 {"ho°", 
no_¨gumít
, 0, 'H'},

57 {"no-esc", 
no_¨gumít
, 0, 'N'},

58 {"no-esˇœã", 
no_¨gumít
, 0, 'N'},

59 {"èrgë", 
no_¨gumít
, 0, 't'},

60 {"vîbo£", 
no_¨gumít
, 0, 'v'},

61 {"vîsi⁄", 
no_¨gumít
, 0, 'V'},

67 
	$ußge
(
com∑t_mode
)

69 
	`Ârötf
(
°dîr
, "Usage: "

77 i‡(
com∑t_mode
) {

78 
	`Ârötf
(
°dîr
,

82 
	`Ârötf
(
°dîr
,

86 
	`Ârötf
(
°dîr
,

103 
	}
}

106 
	$maö
(
¨gc
, * 
¨gv
[])

108 
c
, 
sg_fd
, 
ªs
, 
k
;

109 
do_devi˚_ª£t
 = 0;

110 
do_bus_ª£t
 = 0;

111 
do_ho°_ª£t
 = 0;

112 
no_esˇœã
 = 0;

113 
do_èrgë_ª£t
 = 0;

114 
vîbo£
 = 0;

115 * 
devi˚_«me
 = 
NULL
;

116 * 
˝
 = 
NULL
;

118 
˝
 = 
	`gëív
("SG3_UTILS_OLD_OPTS");

119 i‡(
NULL
 =
˝
)

120 
˝
 = 
	`gëív
("SG_RESET_OLD_OPTS");

123 
›ti⁄_ödex
 = 0;

125 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "bdhHNtvVz", 
l⁄g_›ti⁄s
,

126 &
›ti⁄_ödex
);

127 i‡(
c
 == -1)

130 
c
) {

132 ++
do_bus_ª£t
;

135 ++
do_devi˚_ª£t
;

138 i‡(
˝
) {

139 ++
do_ho°_ª£t
;

142 
	`ußge
(!!
˝
);

146 ++
do_ho°_ª£t
;

149 ++
no_esˇœã
;

152 ++
do_èrgë_ª£t
;

156 ++
vîbo£
;

159 
	`Ârötf
(
°dîr
, 
ME
 "vîsi⁄: %s\n", 
vîsi⁄_°r
);

162 
	`ußge
(!!
˝
);

165 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê0x%x ??\n", 
c
);

166 
	`ußge
(!!
˝
);

167  
SG_LIB_SYNTAX_ERROR
;

171 i‡(
›töd
 < 
¨gc
) {

172 i‡(
NULL
 =
devi˚_«me
) {

173 
devi˚_«me
 = 
¨gv
[
›töd
];

174 ++
›töd
;

176 i‡(
›töd
 < 
¨gc
) {

177 ; 
›töd
 < 
¨gc
; ++optind)

178 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

179 
¨gv
[
›töd
]);

180 
	`ußge
(!!
˝
);

181  
SG_LIB_SYNTAX_ERROR
;

184 i‡(
NULL
 =
devi˚_«me
) {

185 
	`Ârötf
(
°dîr
, "Missing DEVICEÇame. Use '--help'Åo see usage.\n");

186  
SG_LIB_SYNTAX_ERROR
;

189 i‡(
˝
 && (0 =
vîbo£
))

190 ++
vîbo£
;

192 i‡((!!
do_devi˚_ª£t
 + !!
do_èrgë_ª£t
 + !!
do_bus_ª£t
 +

193 !!
do_ho°_ª£t
) > 1) {

194 
	`Ârötf
(
°dîr
, "Can onlyÑequest oneÅype ofÑesetÖer "

199 
sg_fd
 = 
	`›í
(
devi˚_«me
, 
O_RDWR
 | 
O_NONBLOCK
);

200 i‡(
sg_fd
 < 0) {

201 
	`Ârötf
(
°dîr
, 
ME
 "›íÉº‹: %s: ", 
devi˚_«me
);

202 
	`≥º‹
("");

206 
k
 = 
SG_SCSI_RESET_NOTHING
;

207 i‡(
do_devi˚_ª£t
) {

208 i‡(
vîbo£
)

209 
	`¥ötf
(
ME
 "starting deviceÑeset\n");

210 
k
 = 
SG_SCSI_RESET_DEVICE
;

212 i‡(
do_èrgë_ª£t
) {

213 i‡(
vîbo£
)

214 
	`¥ötf
(
ME
 "startingÅargetÑeset\n");

215 
k
 = 
SG_SCSI_RESET_TARGET
;

217 i‡(
do_bus_ª£t
) {

218 i‡(
vîbo£
)

219 
	`¥ötf
(
ME
 "starting busÑeset\n");

220 
k
 = 
SG_SCSI_RESET_BUS
;

222 i‡(
do_ho°_ª£t
) {

223 i‡(
vîbo£
)

224 
	`¥ötf
(
ME
 "starting hostÑeset\n");

225 
k
 = 
SG_SCSI_RESET_HOST
;

227 i‡(
no_esˇœã
)

228 
k
 +
SG_SCSI_RESET_NO_ESCALATE
;

230 
ªs
 = 
	`io˘l
(
sg_fd
, 
SG_SCSI_RESET
, &
k
);

231 i‡(
ªs
 < 0) {

232 i‡(
EBUSY
 =
î∫o
)

233 
	`Ârötf
(
°dîr
, 
ME
 "BUSY, may beÑesettingÇow\n");

234 i‡(
EIO
 =
î∫o
)

235 
	`Ârötf
(
°dîr
, 
ME
 "reset (for value=0x%x) mayÇot be "

236 "avaûabÀ\n", 
k
);

237 i‡(
EACCES
 =
î∫o
)

238 
	`Ârötf
(
°dîr
, 
ME
 "resetÑequires CAP_SYS_ADMIN (root) "

240 i‡(
EINVAL
 =
î∫o
)

241 
	`Ârötf
(
°dîr
, 
ME
 "SG_SCSI_RESETÇot supported (for "

242 "vÆue=0x%x)\n", 
k
);

244 
	`≥º‹
(
ME
 "SG_SCSI_RESET failed");

245 
	`˛o£
(
sg_fd
);

249 i‡(
no_esˇœã
)

250 
k
 -
SG_SCSI_RESET_NO_ESCALATE
;

251 i‡(
vîbo£
) {

252 i‡(
SG_SCSI_RESET_NOTHING
 =
k
)

253 
	`¥ötf
(
ME
 "didÇothing, device isÇormal mode\n");

254 i‡(
SG_SCSI_RESET_DEVICE
 =
k
)

255 
	`¥ötf
(
ME
 "com∂ëed devi˚ %§e£t\n", (
no_esˇœã
 ?

257 i‡(
SG_SCSI_RESET_TARGET
 =
k
)

258 
	`¥ötf
(
ME
 "com∂ëedÅ¨gë %§e£t\n", (
no_esˇœã
 ?

260 i‡(
SG_SCSI_RESET_BUS
 =
k
)

261 
	`¥ötf
(
ME
 "com∂ëed bu†%§e£t\n", (
no_esˇœã
 ?

263 i‡(
SG_SCSI_RESET_HOST
 =
k
)

264 
	`¥ötf
(
ME
 "completed hostÑeset\n");

267 i‡(
	`˛o£
(
sg_fd
) < 0) {

268 
	`≥º‹
(
ME
 "closeÉrror");

272 
	}
}

	@src/sg_rmsn.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<gë›t.h
>

15 #ifde‡
HAVE_CONFIG_H


16 
	~"c⁄fig.h
"

18 
	~"sg_lib.h
"

19 
	~"sg_cmds_basic.h
"

20 
	~"sg_cmds_exåa.h
"

29 c⁄° * 
	gvîsi⁄_°r
 = "1.09 20130507";

31 
	#SERIAL_NUM_SANITY_LEN
 (16 * 1024)

	)

34 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

43 
	$ußge
()

45 
	`Ârötf
(
°dîr
, "Usage: "

58 
	}
}

60 
	$maö
(
¨gc
, * 
¨gv
[])

62 
sg_fd
, 
ªs
, 
c
, 
¢_Àn
, 
n
;

63 
rm¢_buff
[4];

64 * 
u˝
 = 
NULL
;

65 
øw
 = 0;

66 
ªad⁄ly
 = 0;

67 
vîbo£
 = 0;

68 c⁄° * 
devi˚_«me
 = 
NULL
;

69 
ªt
 = 0;

72 
›ti⁄_ödex
 = 0;

74 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hrRvV", 
l⁄g_›ti⁄s
,

75 &
›ti⁄_ödex
);

76 i‡(
c
 == -1)

79 
c
) {

82 
	`ußge
();

85 ++
øw
;

88 ++
ªad⁄ly
;

91 ++
vîbo£
;

94 
	`Ârötf
(
°dîr
, "vîsi⁄: %s\n", 
vîsi⁄_°r
);

97 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê0x%x ??\n", 
c
);

98 
	`ußge
();

99  
SG_LIB_SYNTAX_ERROR
;

102 i‡(
›töd
 < 
¨gc
) {

103 i‡(
NULL
 =
devi˚_«me
) {

104 
devi˚_«me
 = 
¨gv
[
›töd
];

105 ++
›töd
;

107 i‡(
›töd
 < 
¨gc
) {

108 ; 
›töd
 < 
¨gc
; ++optind)

109 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

110 
¨gv
[
›töd
]);

111 
	`ußge
();

112  
SG_LIB_SYNTAX_ERROR
;

116 i‡(
NULL
 =
devi˚_«me
) {

117 
	`Ârötf
(
°dîr
, "missing deviceÇame!\n");

118 
	`ußge
();

119  
SG_LIB_SYNTAX_ERROR
;

121 i‡(
øw
) {

122 i‡(
	`sg_£t_bö¨y_mode
(
STDOUT_FILENO
) < 0) {

123 
	`≥º‹
("sg_set_binary_mode");

124  
SG_LIB_FILE_ERROR
;

128 
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 
ªad⁄ly
, 
vîbo£
);

129 i‡(
sg_fd
 < 0) {

130 
	`Ârötf
(
°dîr
, "›íÉº‹: %s: %s\n", 
devi˚_«me
,

131 
	`ß„_°ªº‹
(-
sg_fd
));

132  
SG_LIB_FILE_ERROR
;

135 
	`mem£t
(
rm¢_buff
, 0x0, (rmsn_buff));

137 
ªs
 = 
	`sg_Œ_ªad_medü_£rül_num
(
sg_fd
, 
rm¢_buff
, (rmsn_buff),

138 1, 
vîbo£
);

139 
ªt
 = 
ªs
;

140 i‡(0 =
ªs
) {

141 
¢_Àn
 = (
rm¢_buff
[0] << 24) + (rmsn_buff[1] << 16) +

142 (
rm¢_buff
[2] << 8) +Ñmsn_buff[3];

143 i‡(! 
øw
)

144 
	`¥ötf
("Rï‹ãd sîü»numbîÜígth = %d\n", 
¢_Àn
);

145 i‡(0 =
¢_Àn
) {

146 
	`Ârötf
(
°dîr
, " This impliesÅhe media hasÇo serial "

148 
îr_out
;

150 i‡(
¢_Àn
 > 
SERIAL_NUM_SANITY_LEN
) {

151 
	`Ârötf
(
°dîr
, " ThatÜength (%d) seemsÅooÜong forá "

152 "£rü»numbî\n", 
¢_Àn
);

153 
îr_out
;

155 
¢_Àn
 += 4;

156 
u˝
 = (*)
	`mÆloc
(
¢_Àn
);

157 i‡(
NULL
 =
u˝
) {

158 
	`Ârötf
(
°dîr
, " Out of memory (ram)\n");

159 
îr_out
;

161 
ªs
 = 
	`sg_Œ_ªad_medü_£rül_num
(
sg_fd
, 
u˝
, 
¢_Àn
, 1, 
vîbo£
);

162 i‡(0 =
ªs
) {

163 
¢_Àn
 = (
u˝
[0] << 24) + (ucp[1] << 16) + (ucp[2] << 8) +

164 
u˝
[3];

165 i‡(
øw
) {

166 i‡(
¢_Àn
 > 0) {

167 
n
 = 
	`fwrôe
(
u˝
 + 4, 1, 
¢_Àn
, 
°dout
);

168 
n
 =Ç;

171 
	`¥ötf
("SerialÇumber:\n");

172 i‡(
¢_Àn
 > 0)

173 
	`dSåHex
((c⁄° *)
u˝
 + 4, 
¢_Àn
, 0);

177 i‡(0 !
ªs
) {

178 i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

179 
	`Ârötf
(
°dîr
, "Read Media Serial Number commandÇot "

181 i‡(
SG_LIB_CAT_NOT_READY
 =
ªs
)

182 
	`Ârötf
(
°dîr
, "Read Media Serial Number failed, deviceÇot "

184 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
)

185 
	`Ârötf
(
°dîr
, "Read Media Serial Number failed, unit "

187 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

188 
	`Ârötf
(
°dîr
, "Read Media Serial Number failed,áborted "

190 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

191 
	`Ârötf
(
°dîr
, "bad field in Read Media Serial Number cdb "

194 
	`Ârötf
(
°dîr
, "Read Media Serial Number failed\n");

195 i‡(0 =
vîbo£
)

196 
	`Ârötf
(
°dîr
, "Åry '-v' for more information\n");

200 
îr_out
:

201 i‡(
u˝
)

202 
	`‰ì
(
u˝
);

203 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

204 i‡(
ªs
 < 0) {

205 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

206 i‡(0 =
ªt
)

207  
SG_LIB_FILE_ERROR
;

209  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

210 
	}
}

	@src/sg_rtpg.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<gë›t.h
>

15 #ifde‡
HAVE_CONFIG_H


16 
	~"c⁄fig.h
"

18 
	~"sg_lib.h
"

19 
	~"sg_cmds_basic.h
"

20 
	~"sg_cmds_exåa.h
"

29 c⁄° * 
	gvîsi⁄_°r
 = "1.17 20130507";

31 
	#REPORT_TGT_GRP_BUFF_LEN
 1024

	)

33 
	#TPGS_STATE_OPTIMIZED
 0x0

	)

34 
	#TPGS_STATE_NONOPTIMIZED
 0x1

	)

35 
	#TPGS_STATE_STANDBY
 0x2

	)

36 
	#TPGS_STATE_UNAVAILABLE
 0x3

	)

37 
	#TPGS_STATE_LB_DEPENDENT
 0x4

	)

38 
	#TPGS_STATE_OFFLINE
 0xê

	)

39 
	#TPGS_STATE_TRANSITIONING
 0xf

	)

41 
	#STATUS_CODE_NOSTATUS
 0x0

	)

42 
	#STATUS_CODE_CHANGED_BY_SET
 0x1

	)

43 
	#STATUS_CODE_CHANGED_BY_IMPLICIT
 0x2

	)

45 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

56 
	$ußge
()

58 
	`Ârötf
(
°dîr
, "Usage: "

73 
	}
}

75 
	$dSåRaw
(c⁄° * 
°r
, 
Àn
)

77 
k
;

79 
k
 = 0 ; k < 
Àn
; ++k)

80 
	`¥ötf
("%c", 
°r
[
k
]);

81 
	}
}

83 
	$decode_°©us
(c⁄° 
°
)

85 
°
) {

86 
STATUS_CODE_NOSTATUS
:

87 
	`¥ötf
(" (no statusávailable)");

89 
STATUS_CODE_CHANGED_BY_SET
:

90 
	`¥ötf
(" (targetÖortásym. state changed by SET TARGET PORT "

93 
STATUS_CODE_CHANGED_BY_IMPLICIT
:

94 
	`¥ötf
(" (targetÖortásym. state changed by implicitÜu "

98 
	`¥ötf
(" (unknown status code)");

101 
	}
}

103 
	$decode_çgs_°©e
(c⁄° 
°
)

105 
°
) {

106 
TPGS_STATE_OPTIMIZED
:

107 
	`¥ötf
(" (active/optimized)");

109 
TPGS_STATE_NONOPTIMIZED
:

110 
	`¥ötf
(" (active/non optimized)");

112 
TPGS_STATE_STANDBY
:

113 
	`¥ötf
(" (standby)");

115 
TPGS_STATE_UNAVAILABLE
:

116 
	`¥ötf
(" (unavailable)");

118 
TPGS_STATE_LB_DEPENDENT
:

119 
	`¥ötf
(" (logical block dependent)");

121 
TPGS_STATE_OFFLINE
:

122 
	`¥ötf
(" (offline)");

124 
TPGS_STATE_TRANSITIONING
:

125 
	`¥ötf
(" (transitioning between states)");

128 
	`¥ötf
(" (unknown)");

131 
	}
}

133 
	$maö
(
¨gc
, * 
¨gv
[])

135 
sg_fd
, 
k
, 
j
, 
off
, 
ªs
, 
c
, 
ªp‹t_Àn
, 
tgt_p‹t_cou¡
;

136 
ªp‹tTgtGΩBuff
[
REPORT_TGT_GRP_BUFF_LEN
];

137 * 
u˝
;

138 
decode
 = 0;

139 
hex
 = 0;

140 
øw
 = 0;

141 
vîbo£
 = 0;

142 
exãnded
 = 0;

143 c⁄° * 
devi˚_«me
 = 
NULL
;

144 
ªt
 = 0;

147 
›ti⁄_ödex
 = 0;

149 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "dehHrvV", 
l⁄g_›ti⁄s
,

150 &
›ti⁄_ödex
);

151 i‡(
c
 == -1)

154 
c
) {

156 
decode
 = 1;

159 
exãnded
 = 1;

163 
	`ußge
();

166 
hex
 = 1;

169 
øw
 = 1;

172 ++
vîbo£
;

175 
	`Ârötf
(
°dîr
, "Vîsi⁄: %s\n", 
vîsi⁄_°r
);

178 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê0x%x ??\n", 
c
);

179 
	`ußge
();

180  
SG_LIB_SYNTAX_ERROR
;

183 i‡(
›töd
 < 
¨gc
) {

184 i‡(
NULL
 =
devi˚_«me
) {

185 
devi˚_«me
 = 
¨gv
[
›töd
];

186 ++
›töd
;

188 i‡(
›töd
 < 
¨gc
) {

189 ; 
›töd
 < 
¨gc
; ++optind)

190 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

191 
¨gv
[
›töd
]);

192 
	`ußge
();

193  
SG_LIB_SYNTAX_ERROR
;

197 i‡(
NULL
 =
devi˚_«me
) {

198 
	`Ârötf
(
°dîr
, "missing deviceÇame!\n");

199 
	`ußge
();

200  
SG_LIB_SYNTAX_ERROR
;

202 i‡(
øw
) {

203 i‡(
	`sg_£t_bö¨y_mode
(
STDOUT_FILENO
) < 0) {

204 
	`≥º‹
("sg_set_binary_mode");

205  
SG_LIB_FILE_ERROR
;

209 
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 0 , 
vîbo£
);

210 i‡(
sg_fd
 < 0) {

211 
	`Ârötf
(
°dîr
, "›íÉº‹: %s: %s\n", 
devi˚_«me
,

212 
	`ß„_°ªº‹
(-
sg_fd
));

213  
SG_LIB_FILE_ERROR
;

216 
	`mem£t
(
ªp‹tTgtGΩBuff
, 0x0, (reportTgtGrpBuff));

219 
ªs
 = 
	`sg_Œ_ªp‹t_tgt_¥t_gΩ2
(
sg_fd
, 
ªp‹tTgtGΩBuff
,

220 (
ªp‹tTgtGΩBuff
),

221 
exãnded
, 1, 
vîbo£
);

222 
ªt
 = 
ªs
;

223 i‡(0 =
ªs
) {

224 
ªp‹t_Àn
 = (
ªp‹tTgtGΩBuff
[0] << 24) +

225 (
ªp‹tTgtGΩBuff
[1] << 16) +

226 (
ªp‹tTgtGΩBuff
[2] << 8) +

227 
ªp‹tTgtGΩBuff
[3] + 4;

228 i‡(
ªp‹t_Àn
 > ()(
ªp‹tTgtGΩBuff
)) {

230 
	`Ârötf
(
°dîr
, " <<reportÅooÜong for internal buffer,"

232 
ªp‹t_Àn
 = ()(
ªp‹tTgtGΩBuff
);

234 i‡(
øw
) {

235 
	`dSåRaw
((c⁄° *)
ªp‹tTgtGΩBuff
, 
ªp‹t_Àn
);

236 
îr_out
;

238 i‡(
vîbo£
)

239 
	`¥ötf
("Rï‹àli°Üígth = %d\n", 
ªp‹t_Àn
);

240 i‡(
hex
) {

241 i‡(
vîbo£
)

242 
	`Ârötf
(
°dîr
, "\nOutputÑesponse in hex:\n");

243 
	`dSåHex
((c⁄° *)
ªp‹tTgtGΩBuff
, 
ªp‹t_Àn
, 1);

244 
îr_out
;

246 
	`¥ötf
("ReportÅargetÖort groups:\n");

247 
u˝
 = 
ªp‹tTgtGΩBuff
 + 4;

248 i‡(
exãnded
) {

249 i‡(0x10 !(
u˝
[0] & 0x70)) {

250 
	`Ârötf
(
°dîr
, " <<invalidÉxtended header format\n");

251 
îr_out
;

253 
	`¥ötf
(" Im∂icôÅønsôi⁄Åime: %d\n", 
u˝
[1]);

254 
u˝
 += 4;;

256 
k
 = 4; k < 
ªp‹t_Àn
; k +
off
, 
u˝
 += off) {

258 
	`¥ötf
("ÅargetÖort group id : 0x%x , Pref=%d\n",

259 (
u˝
[2] << 8) + ucp[3], !!(ucp[0] & 0x80));

260 
	`¥ötf
("ÅargetÖort groupásymmetricáccess state : ");

261 
	`¥ötf
("0x%02x", 
u˝
[0] & 0x0f);

262 i‡(
decode
)

263 
	`decode_çgs_°©e
(
u˝
[0] & 0x0f);

264 
	`¥ötf
("\n");

266 
	`¥ötf
(" T_SUP : %d, ", !!(
u˝
[1] & 0x80));

267 
	`¥ötf
("O_SUP : %d, ", !!(
u˝
[1] & 0x40));

268 
	`¥ötf
("LBD_SUP : %d, ", !!(
u˝
[1] & 0x10));

269 
	`¥ötf
("U_SUP : %d, ", !!(
u˝
[1] & 0x08));

270 
	`¥ötf
("S_SUP : %d, ", !!(
u˝
[1] & 0x04));

271 
	`¥ötf
("AN_SUP : %d, ", !!(
u˝
[1] & 0x02));

272 
	`¥ötf
("AO_SUP : %d\n", !!(
u˝
[1] & 0x01));

274 
	`¥ötf
(" status code : ");

275 
	`¥ötf
("0x%02x", 
u˝
[5]);

276 i‡(
decode
)

277 
	`decode_°©us
(
u˝
[5]);

278 
	`¥ötf
("\n");

280 
	`¥ötf
(" vendor unique status : ");

281 
	`¥ötf
("0x%02x\n", 
u˝
[6]);

283 
	`¥ötf
("ÅargetÖort count : ");

284 
tgt_p‹t_cou¡
 = 
u˝
[7];

285 
	`¥ötf
("%02x\n", 
tgt_p‹t_cou¡
);

287 
j
 = 0; j < 
tgt_p‹t_cou¡
 * 4; j += 4) {

288 i‡(0 =
j
)

289 
	`¥ötf
(" RelativeÅargetÖort ids:\n");

290 
	`¥ötf
(" 0x%02x\n",

291 (
u˝
[8 + 
j
 + 2] << 8) + ucp[8 + j + 3]);

293 
off
 = 8 + 
j
;

295 } i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

296 
	`Ârötf
(
°dîr
, "Report Target Port Groups commandÇot supported\n");

297 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

298 
	`Ârötf
(
°dîr
, "bad field in Report Target Port Groups cdb "

300 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
)

301 
	`Ârötf
(
°dîr
, "Report Target Port Groups, unitáttention\n");

302 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

303 
	`Ârötf
(
°dîr
, "Report Target Port Groups,áborted command\n");

305 
	`Ârötf
(
°dîr
, "Report Target Port Groups command failed\n");

306 i‡(0 =
vîbo£
)

307 
	`Ârötf
(
°dîr
, "Åry '-v' for more information\n");

310 
îr_out
:

311 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

312 i‡(
ªs
 < 0) {

313 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

314 i‡(0 =
ªt
)

315  
SG_LIB_FILE_ERROR
;

317  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

318 
	}
}

	@src/sg_safte.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<˘y≥.h
>

14 
	~<gë›t.h
>

16 #ifde‡
HAVE_CONFIG_H


17 
	~"c⁄fig.h
"

19 
	~"sg_lib.h
"

20 
	~"sg_cmds_basic.h
"

21 
	~"sg_cmds_exåa.h
"

29 c⁄° * 
	gvîsi⁄_°r
 = "0.24 20130507";

32 
	#SENSE_BUFF_LEN
 64

	)

33 
	#DEF_TIMEOUT
 60000

	)

34 
	#EBUFF_SZ
 256

	)

36 
	#RB_MODE_DESC
 3

	)

37 
	#RWB_MODE_DATA
 2

	)

38 
	#RWB_MODE_VENDOR
 1

	)

39 
	#RB_DESC_LEN
 4

	)

41 
	#SAFTE_CFG_FLAG_DOORLOCK
 1

	)

42 
	#SAFTE_CFG_FLAG_ALARM
 2

	)

43 
	#SAFTE_CFG_FLAG_CELSIUS
 3

	)

45 
	sß·e_cfg_t
 {

46 
	mÁns
;

47 
	mpsuµlõs
;

48 
	m¶Ÿs
;

49 
	mãmps
;

50 
	mthîmo°©s
;

51 
	mvíd‹_•ecific
;

52 
	mÊags
;

55 
ß·e_cfg_t
 
	gß·e_cfg
;

57 
	gbuf_ˇ∑côy
 = 64;

60 
	$dSåRaw
(c⁄° * 
°r
, 
Àn
)

62 
k
;

64 
k
 = 0 ; k < 
Àn
; ++k)

65 
	`¥ötf
("%c", 
°r
[
k
]);

66 
	}
}

70 
	$ªad_ß·e_c⁄figuøti⁄
(
sg_fd
, *
rb_buff
,

71 
rb_Àn
, 
vîbo£
)

73 
ªs
;

75 i‡(
rb_Àn
 < 
buf_ˇ∑côy
) {

76 
	`Ârötf
(
°dîr
,"SCSI BUFFER sizeÅoo small (%d/%d bytes)\n",

77 
rb_Àn
, 
buf_ˇ∑côy
);

78  
SG_LIB_CAT_ILLEGAL_REQ
;

81 i‡(
vîbo£
 > 1)

82 
	`Ârötf
(
°dîr
, "Use READ BUFFER,mode=vendor_specific,buff_id=0 "

84 
ªs
 = 
	`sg_Œ_ªad_buf„r
(
sg_fd
, 
RWB_MODE_VENDOR
, 0, 0,

85 
rb_buff
, 
rb_Àn
, 1, 
vîbo£
);

86 i‡(
ªs
 &&Ñe†!
SG_LIB_CAT_RECOVERED
)

87  
ªs
;

89 
ß·e_cfg
.
Áns
 = 
rb_buff
[0];

90 
ß·e_cfg
.
psuµlõs
 = 
rb_buff
[1];

91 
ß·e_cfg
.
¶Ÿs
 = 
rb_buff
[2];

92 
ß·e_cfg
.
ãmps
 = 
rb_buff
[4];

93 i‡(
rb_buff
[3])

94 
ß·e_cfg
.
Êags
 |
SAFTE_CFG_FLAG_DOORLOCK
;

95 i‡(
rb_buff
[5])

96 
ß·e_cfg
.
Êags
 |
SAFTE_CFG_FLAG_ALARM
;

97 i‡(
rb_buff
[6] & 0x80)

98 
ß·e_cfg
.
Êags
 |
SAFTE_CFG_FLAG_CELSIUS
;

100 
ß·e_cfg
.
thîmo°©s
 = 
rb_buff
[6] & 0x0f;

101 
ß·e_cfg
.
víd‹_•ecific
 = 
rb_buff
[63];

104 
	}
}

107 
	$¥öt_ß·e_c⁄figuøti⁄
()

109 
	`¥ötf
("Enclosure Configuration:\n");

110 
	`¥ötf
("\tNumbî o‡F™s: %d\n", 
ß·e_cfg
.
Áns
);

111 
	`¥ötf
("\tNumbî o‡Powî Suµlõs: %d\n", 
ß·e_cfg
.
psuµlõs
);

112 
	`¥ötf
("\tNumbî o‡Devi˚ SlŸs: %d\n", 
ß·e_cfg
.
¶Ÿs
);

113 
	`¥ötf
("\tNumbî o‡Tem≥øtuª Sís‹s: %d\n", 
ß·e_cfg
.
ãmps
);

114 
	`¥ötf
("\tNumbî o‡Thîmo°©s: %d\n", 
ß·e_cfg
.
thîmo°©s
);

115 
	`¥ötf
("\tVíd‹ uniquêbyãs: %d\n", 
ß·e_cfg
.
víd‹_•ecific
);

118 
	}
}

122 
	$do_ß·e_í˛_°©us
(
sg_fd
, 
do_hex
, 
do_øw
, 
vîbo£
)

124 
ªs
, 
i
, 
off£t
;

125 
rb_Àn
;

126 *
rb_buff
;

128 
rb_Àn
 = 
ß·e_cfg
.
Áns
 + sa·e_cfg.
psuµlõs
 + sa·e_cfg.
¶Ÿs
 +

129 
ß·e_cfg
.
ãmps
 + 5 + sa·e_cfg.
víd‹_•ecific
;

130 
rb_buff
 = (*)
	`mÆloc
(
rb_Àn
);

133 i‡(
vîbo£
 > 1)

134 
	`Ârötf
(
°dîr
, "Use READ BUFFER,mode=vendor_specific,buff_id=1 "

136 
ªs
 = 
	`sg_Œ_ªad_buf„r
(
sg_fd
, 
RWB_MODE_VENDOR
, 1, 0,

137 
rb_buff
, 
rb_Àn
, 0, 
vîbo£
);

138 i‡(
ªs
 &&Ñe†!
SG_LIB_CAT_RECOVERED
)

139  
ªs
;

141 i‡(
do_øw
 > 1) {

142 
	`dSåRaw
((c⁄° *)
rb_buff
, 
buf_ˇ∑côy
);

145 i‡(
do_hex
 > 1) {

146 
	`dSåHex
((c⁄° *)
rb_buff
, 
buf_ˇ∑côy
, 1);

149 
	`¥ötf
("Enclosure Status:\n");

150 
off£t
 = 0;

151 
i
 = 0; i < 
ß·e_cfg
.
Áns
; i++) {

152 
	`¥ötf
("\tF™ %d sètus: ", 
i
);

153 
rb_buff
[
i
]) {

155 
	`¥ötf
("operational\n");

158 
	`¥ötf
("malfunctioning\n");

161 
	`¥ötf
("not installed\n");

164 
	`¥ötf
("notÑeportable\n");

167 
	`¥ötf
("unknown\n");

172 
off£t
 +
ß·e_cfg
.
Áns
;

173 
i
 = 0; i < 
ß·e_cfg
.
psuµlõs
; i++) {

174 
	`¥ötf
("\tPowî suµly %d sètus: ", 
i
);

175 
rb_buff
[
i
 + 
off£t
]) {

177 
	`¥ötf
("operational / on\n");

180 
	`¥ötf
("operational / off\n");

183 
	`¥ötf
("malfunctioning / on\n");

186 
	`¥ötf
("malfunctioning / off\n");

189 
	`¥ötf
("notÖresent\n");

192 
	`¥ötf
("present\n");

195 
	`¥ötf
("notÑeportable\n");

198 
	`¥ötf
("unknown\n");

203 
off£t
 +
ß·e_cfg
.
psuµlõs
;

204 
i
 = 0; i < 
ß·e_cfg
.
¶Ÿs
; i++) {

205 
	`¥ötf
("\tDevi˚ SlŸ %d: SCSI ID %d\n", 
i
, 
rb_buff
[ò+ 
off£t
]);

208 
off£t
 +
ß·e_cfg
.
¶Ÿs
;

209 i‡(
ß·e_cfg
.
Êags
 & 
SAFTE_CFG_FLAG_DOORLOCK
) {

210 
rb_buff
[
off£t
]) {

212 
	`¥ötf
("\tDoorÜock status:Üocked\n");

215 
	`¥ötf
("\tDoorÜock status: unlocked\n");

218 
	`¥ötf
("\tDoorÜock status:ÇotÑeportable\n");

222 
	`¥ötf
("\tDoorÜock status:Çot installed\n");

225 
off£t
++;

226 i‡(!(
ß·e_cfg
.
Êags
 & 
SAFTE_CFG_FLAG_ALARM
)) {

227 
	`¥ötf
("\tSpeaker status:Çot installed\n");

229 
rb_buff
[
off£t
]) {

231 
	`¥ötf
("\tSpeaker status: off\n");

234 
	`¥ötf
("\tSpeaker status: on\n");

239 
off£t
++;

240 
i
 = 0; i < 
ß·e_cfg
.
ãmps
; i++) {

241 
ãmp
 = 0;

243 i‡(!(
ß·e_cfg
.
Êags
 & 
SAFTE_CFG_FLAG_CELSIUS
))

244 
ãmp
 -= 10;

246 
	`¥ötf
("\tTem≥øtuª sís‹ %d: %d deg %c\n", 
i
, 
rb_buff
[ò+ 
off£t
],

247 
ß·e_cfg
.
Êags
 & 
SAFTE_CFG_FLAG_CELSIUS
?'C':'F');

250 
off£t
 +
ß·e_cfg
.
ãmps
;

251 i‡(
ß·e_cfg
.
thîmo°©s
) {

252 i‡(
rb_buff
[
off£t
] & 0x80) {

253 
	`¥ötf
("\tEnclosure Temperatureálert status:ábnormal\n");

255 
	`¥ötf
("\tEnclosure Temperatureálert status:Çormal\n");

259 
	}
}

263 
	$do_ß·e_ußge_°©i°ics
(
sg_fd
, 
do_hex
, 
do_øw
, 
vîbo£
)

265 
ªs
;

266 
rb_Àn
;

267 *
rb_buff
;

268 
möuãs
;

270 
rb_Àn
 = 16 + 
ß·e_cfg
.
víd‹_•ecific
;

271 
rb_buff
 = (*)
	`mÆloc
(
rb_Àn
);

273 i‡(
vîbo£
 > 1)

274 
	`Ârötf
(
°dîr
, "Use READ BUFFER,mode=vendor_specific,buff_id=2 "

276 
ªs
 = 
	`sg_Œ_ªad_buf„r
(
sg_fd
, 
RWB_MODE_VENDOR
, 2, 0,

277 
rb_buff
, 
rb_Àn
, 0, 
vîbo£
);

278 i‡(
ªs
) {

279 i‡(
ªs
 =
SG_LIB_CAT_ILLEGAL_REQ
) {

280 
	`¥ötf
("Usage Statistics:\n\tNot implemented\n");

283 i‡(
ªs
 !
SG_LIB_CAT_RECOVERED
) {

284 
	`‰ì
(
rb_buff
);

285  
ªs
;

289 i‡(
do_øw
 > 1) {

290 
	`dSåRaw
((c⁄° *)
rb_buff
, 
buf_ˇ∑côy
);

293 i‡(
do_hex
 > 1) {

294 
	`dSåHex
((c⁄° *)
rb_buff
, 
buf_ˇ∑côy
, 1);

297 
	`¥ötf
("Usage Statistics:\n");

298 
möuãs
 = (
rb_buff
[0] << 24) + (rb_buff[1] << 16) +

299 (
rb_buff
[2] << 8) +Ñb_buff[3];

300 
	`¥ötf
("\tPowî o¿Möuãs: %u\n", 
möuãs
);

301 
möuãs
 = (
rb_buff
[4] << 24) + (rb_buff[5] << 16) +

302 (
rb_buff
[6] << 8) +Ñb_buff[7];

303 
	`¥ötf
("\tPowî o¿Cy˛es: %u\n", 
möuãs
);

305 
	`‰ì
(
rb_buff
);

307 
	}
}

311 
	$do_ß·e_¶Ÿ_ö£πi⁄s
(
sg_fd
, 
do_hex
, 
do_øw
, 
vîbo£
)

313 
ªs
, 
i
;

314 
rb_Àn
;

315 *
rb_buff
, 
¶Ÿ_°©us
;

317 
rb_Àn
 = 
ß·e_cfg
.
¶Ÿs
 * 2;

318 
rb_buff
 = (*)
	`mÆloc
(
rb_Àn
);

320 i‡(
vîbo£
 > 1)

321 
	`Ârötf
(
°dîr
, "Use READ BUFFER,mode=vendor_specific,buff_id=3 "

323 
ªs
 = 
	`sg_Œ_ªad_buf„r
(
sg_fd
, 
RWB_MODE_VENDOR
, 3, 0,

324 
rb_buff
, 
rb_Àn
, 0, 
vîbo£
);

325 i‡(
ªs
 ) {

326 i‡(
ªs
 =
SG_LIB_CAT_ILLEGAL_REQ
) {

327 
	`¥ötf
("Slot insertions:\n\tNot implemented\n");

330 i‡(
ªs
 !
SG_LIB_CAT_RECOVERED
) {

331 
	`‰ì
(
rb_buff
);

332  
ªs
;

336 i‡(
do_øw
 > 1) {

337 
	`dSåRaw
((c⁄° *)
rb_buff
, 
buf_ˇ∑côy
);

340 i‡(
do_hex
 > 1) {

341 
	`dSåHex
((c⁄° *)
rb_buff
, 
buf_ˇ∑côy
, 1);

344 
	`¥ötf
("Slot insertions:\n");

345 
i
 = 0; i < 
ß·e_cfg
.
¶Ÿs
; i++) {

346 
¶Ÿ_°©us
 = (
rb_buff
[
i
 * 2] << 8) +Ñb_buff[i * 2];

347 
	`¥ötf
("\tSlŸ %d: %d in£πi⁄s", 
i
, 
¶Ÿ_°©us
);

349 
	`‰ì
(
rb_buff
);

351 
	}
}

355 
	$do_ß·e_¶Ÿ_°©us
(
sg_fd
, 
do_hex
, 
do_øw
, 
vîbo£
)

357 
ªs
, 
i
;

358 
rb_Àn
;

359 *
rb_buff
, 
¶Ÿ_°©us
;

361 
rb_Àn
 = 
ß·e_cfg
.
¶Ÿs
 * 4;

362 
rb_buff
 = (*)
	`mÆloc
(
rb_Àn
);

364 i‡(
vîbo£
 > 1)

365 
	`Ârötf
(
°dîr
, "Use READ BUFFER,mode=vendor_specific,buff_id=4 "

367 
ªs
 = 
	`sg_Œ_ªad_buf„r
(
sg_fd
, 
RWB_MODE_VENDOR
, 4, 0,

368 
rb_buff
, 
rb_Àn
, 0, 
vîbo£
);

369 i‡(
ªs
 &&Ñe†!
SG_LIB_CAT_RECOVERED
) {

370 
	`‰ì
(
rb_buff
);

371  
ªs
;

374 i‡(
do_øw
 > 1) {

375 
	`dSåRaw
((c⁄° *)
rb_buff
, 
buf_ˇ∑côy
);

378 i‡(
do_hex
 > 1) {

379 
	`dSåHex
((c⁄° *)
rb_buff
, 
buf_ˇ∑côy
, 1);

382 
	`¥ötf
("Slot status:\n");

383 
i
 = 0; i < 
ß·e_cfg
.
¶Ÿs
; i++) {

384 
¶Ÿ_°©us
 = 
rb_buff
[
i
 * 4 + 3];

385 
	`¥ötf
("\tSlŸ %d: ", 
i
);

386 i‡(
¶Ÿ_°©us
 & 0x7) {

387 i‡(
¶Ÿ_°©us
 & 0x1)

388 
	`¥ötf
("inserted ");

389 i‡(
¶Ÿ_°©us
 & 0x2)

390 
	`¥ötf
("ready ");

391 i‡(
¶Ÿ_°©us
 & 0x4)

392 
	`¥ötf
("activated ");

393 
	`¥ötf
("\n");

395 
	`¥ötf
("empty\n");

398 
	`‰ì
(
rb_buff
);

400 
	}
}

404 
	$do_ß·e_globÆ_Êags
(
sg_fd
, 
do_hex
, 
do_øw
, 
vîbo£
)

406 
ªs
;

407 
rb_Àn
;

408 *
rb_buff
;

410 
rb_Àn
 = 16;

411 
rb_buff
 = (*)
	`mÆloc
(
rb_Àn
);

413 i‡(
vîbo£
 > 1)

414 
	`Ârötf
(
°dîr
, "Use READ BUFFER,mode=vendor_specific,buff_id=5 "

416 
ªs
 = 
	`sg_Œ_ªad_buf„r
(
sg_fd
, 
RWB_MODE_VENDOR
, 5, 0,

417 
rb_buff
, 
rb_Àn
, 0, 
vîbo£
);

418 i‡(
ªs
 ) {

419 i‡(
ªs
 =
SG_LIB_CAT_ILLEGAL_REQ
) {

420 
	`¥ötf
("Global Flags:\n\tNot implemented\n");

423 i‡(
ªs
 !
SG_LIB_CAT_RECOVERED
) {

424 
	`‰ì
(
rb_buff
);

425  
ªs
;

429 i‡(
do_øw
 > 1) {

430 
	`dSåRaw
((c⁄° *)
rb_buff
, 
buf_ˇ∑côy
);

433 i‡(
do_hex
 > 1) {

434 
	`dSåHex
((c⁄° *)
rb_buff
, 
buf_ˇ∑côy
, 1);

437 
	`¥ötf
("Global Flags:\n");

438 
	`¥ötf
("\tAudible Alarm Control: %s\n",

439 
rb_buff
[0] & 0x1?"on":"off");

440 
	`¥ötf
("\tGlobal Failure Indicator: %s\n",

441 
rb_buff
[0] & 0x2?"on":"off");

442 
	`¥ötf
("\tGlobal Warning Indicator: %s\n",

443 
rb_buff
[0] & 0x4?"on":"off");

444 
	`¥ötf
("\tEnclosure Power: %s\n",

445 
rb_buff
[0] & 0x8?"on":"off");

446 
	`¥ötf
("\tCooling Failure: %s\n",

447 
rb_buff
[0] & 0x10?"yes":"no");

448 
	`¥ötf
("\tPower Failure: %s\n",

449 
rb_buff
[0] & 0x20?"yes":"no");

450 
	`¥ötf
("\tDrive Failure: %s\n",

451 
rb_buff
[0] & 0x40?"yes":"no");

452 
	`¥ötf
("\tDrive Warning: %s\n",

453 
rb_buff
[0] & 0x80?"yes":"no");

454 
	`¥ötf
("\tArray Failure: %s\n",

455 
rb_buff
[1] & 0x1?"yes":"no");

456 
	`¥ötf
("\tArray Warning: %s\n",

457 
rb_buff
[0] & 0x2?"yes":"no");

458 
	`¥ötf
("\tEnclosure Lock: %s\n",

459 
rb_buff
[0] & 0x4?"on":"off");

460 
	`¥ötf
("\tEnclosure Identify: %s\n",

461 
rb_buff
[0] & 0x8?"on":"off");

463 
	`‰ì
(
rb_buff
);

465 
	}
}

468 
	$ußge
()

470 
	`Ârötf
(
°dîr
,

491 
	}
}

493 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

509 
	$maö
(
¨gc
, * 
¨gv
[])

511 
sg_fd
, 
c
, 
ªt
, 
≥ri_ty≥
, 
no_hex_øw
;

512 
ªs
 = 
SG_LIB_CAT_OTHER
;

513 c⁄° * 
devi˚_«me
 = 
NULL
;

514 
ebuff
[
EBUFF_SZ
];

515 *
rb_buff
;

516 
do_c⁄fig
 = 0;

517 
do_°©us
 = 0;

518 
do_¶Ÿs
 = 0;

519 
do_Êags
 = 0;

520 
do_ußge
 = 0;

521 
do_hex
 = 0;

522 
do_øw
 = 0;

523 
vîbo£
 = 0;

524 
do_ö£πi⁄s
 = 0;

525 c⁄° * 
˝
;

526 
buff
[48];

527 
sg_sim∂e_öquúy_ª•
 
öq_ª•
;

528 c⁄° 
›_«me
[] = "READ BUFFER";

531 
›ti⁄_ödex
 = 0;

533 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "cdfhHúsuvV?", 
l⁄g_›ti⁄s
,

534 &
›ti⁄_ödex
);

536 i‡(
c
 == -1)

539 
c
) {

541 
do_c⁄fig
 = 1;

544 
do_¶Ÿs
 = 1;

547 
do_Êags
 = 1;

551 
	`ußge
();

554 ++
do_hex
;

557 
do_ö£πi⁄s
 = 1;

560 ++
do_øw
;

563 
do_°©us
 = 1;

566 
do_ußge
 = 1;

569 ++
vîbo£
;

572 
	`Ârötf
(
°dîr
, "Vîsi⁄ såög: %s\n", 
vîsi⁄_°r
);

573 
	`exô
(0);

575 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê0x%x ??\n", 
c
);

576 
	`ußge
();

577  
SG_LIB_SYNTAX_ERROR
;

580 i‡(
›töd
 < 
¨gc
) {

581 i‡(
NULL
 =
devi˚_«me
) {

582 
devi˚_«me
 = 
¨gv
[
›töd
];

583 ++
›töd
;

585 i‡(
›töd
 < 
¨gc
) {

586 ; 
›töd
 < 
¨gc
; ++optind)

587 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

588 
¨gv
[
›töd
]);

589 
	`ußge
();

590  
SG_LIB_SYNTAX_ERROR
;

594 i‡(
NULL
 =
devi˚_«me
) {

595 
	`Ârötf
(
°dîr
, "missing deviceÇame!\n");

596 
	`ußge
();

597  
SG_LIB_SYNTAX_ERROR
;

599 i‡(
do_øw
) {

600 i‡(
	`sg_£t_bö¨y_mode
(
STDOUT_FILENO
) < 0) {

601 
	`≥º‹
("sg_set_binary_mode");

602  
SG_LIB_FILE_ERROR
;

606 i‡((
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 0 , 
vîbo£
)) < 0) {

607 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, "sg_safte:Érror opening file: %s (rw)",

608 
devi˚_«me
);

609 
	`≥º‹
(
ebuff
);

610  
SG_LIB_FILE_ERROR
;

612 
no_hex_øw
 = ((0 =
do_hex
Ë&& (0 =
do_øw
));

614 i‡(
no_hex_øw
) {

615 i‡(0 =
	`sg_sim∂e_öquúy
(
sg_fd
, &
öq_ª•
, 1, 
vîbo£
)) {

616 
	`¥ötf
(" %.8† %.16† %.4s\n", 
öq_ª•
.
víd‹
,

617 
öq_ª•
.
¥odu˘
, inq_ª•.
ªvisi⁄
);

618 
≥ri_ty≥
 = 
öq_ª•
.
≥rùhîÆ_ty≥
;

619 
˝
 = 
	`sg_gë_pdt_°r
(
≥ri_ty≥
, (
buff
), buff);

620 i‡(
	`°æí
(
˝
) > 0)

621 
	`¥ötf
(" PîùhîÆ devi˚Åy≥: %s\n", 
˝
);

623 
	`¥ötf
(" PîùhîÆ devi˚Åy≥: 0x%x\n", 
≥ri_ty≥
);

625 
	`Ârötf
(
°dîr
, "sg_safte: %s doesn'tÑespondÅoá SCSI "

626 "INQUIRY\n", 
devi˚_«me
);

627  
SG_LIB_CAT_OTHER
;

631 
rb_buff
 = (*)
	`mÆloc
(
buf_ˇ∑côy
);

632 i‡(!
rb_buff
)

633 
îr_out
;

635 
	`mem£t
(
rb_buff
, 0, 
buf_ˇ∑côy
);

637 
ªs
 = 
	`ªad_ß·e_c⁄figuøti⁄
(
sg_fd
, 
rb_buff
, 
buf_ˇ∑côy
, 
vîbo£
);

638 
ªs
) {

640 
SG_LIB_CAT_RECOVERED
:

643 
îr_out
;

645 i‡(1 =
do_øw
) {

646 
	`dSåRaw
((c⁄° *)
rb_buff
, 
buf_ˇ∑côy
);

647 
ªs
 = 0;

648 
föish
;

650 i‡(1 =
do_hex
) {

651 
	`dSåHex
((c⁄° *)
rb_buff
, 
buf_ˇ∑côy
, 1);

652 
ªs
 = 0;

653 
föish
;

656 i‡(
do_c⁄fig
 && 
no_hex_øw
)

657 
	`¥öt_ß·e_c⁄figuøti⁄
();

659 i‡(
do_°©us
) {

660 
ªs
 = 
	`do_ß·e_í˛_°©us
(
sg_fd
, 
do_hex
, 
do_øw
, 
vîbo£
);

661 
ªs
) {

663 
SG_LIB_CAT_RECOVERED
:

666 
îr_out
;

670 i‡(
do_ußge
) {

671 
ªs
 = 
	`do_ß·e_ußge_°©i°ics
(
sg_fd
, 
do_hex
, 
do_øw
, 
vîbo£
);

672 
ªs
) {

674 
SG_LIB_CAT_RECOVERED
:

677 
îr_out
;

681 i‡(
do_ö£πi⁄s
) {

682 
ªs
 = 
	`do_ß·e_¶Ÿ_ö£πi⁄s
(
sg_fd
, 
do_hex
, 
do_øw
, 
vîbo£
);

683 
ªs
) {

685 
SG_LIB_CAT_RECOVERED
:

688 
îr_out
;

692 i‡(
do_¶Ÿs
) {

693 
ªs
 = 
	`do_ß·e_¶Ÿ_°©us
(
sg_fd
, 
do_hex
, 
do_øw
, 
vîbo£
);

694 
ªs
) {

696 
SG_LIB_CAT_RECOVERED
:

699 
îr_out
;

703 i‡(
do_Êags
) {

704 
ªs
 = 
	`do_ß·e_globÆ_Êags
(
sg_fd
, 
do_hex
, 
do_øw
, 
vîbo£
);

705 
ªs
) {

707 
SG_LIB_CAT_RECOVERED
:

710 
îr_out
;

713 
föish
:

714 
ªs
 = 0;

716 
îr_out
:

717 
ªs
) {

719 
SG_LIB_CAT_RECOVERED
:

721 
SG_LIB_CAT_ABORTED_COMMAND
:

722 
	`Ârötf
(
°dîr
, "%s:áb‹ãd comm™d\n", 
›_«me
);

724 
SG_LIB_CAT_NOT_READY
:

725 
	`Ârötf
(
°dîr
, "%s: devi˚ÇŸÑódy\n", 
›_«me
);

727 
SG_LIB_CAT_UNIT_ATTENTION
:

728 
	`Ârötf
(
°dîr
, "%s: unôáâíti⁄\n", 
›_«me
);

730 
SG_LIB_CAT_INVALID_OP
:

731 
	`Ârötf
(
°dîr
, "%s: o≥øti⁄ÇŸ suµ‹ãd\n", 
›_«me
);

733 
SG_LIB_CAT_ILLEGAL_REQ
:

734 
	`Ârötf
(
°dîr
, "%s: bad fõld i¿cdb\n", 
›_«me
);

737 
	`Ârötf
(
°dîr
, "%†Áûed\n", 
›_«me
);

740 
ªt
 = 
ªs
;

741 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

742 i‡(
ªs
 < 0) {

743 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

744 i‡(0 =
ªt
)

745  
SG_LIB_FILE_ERROR
;

747  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

748 
	}
}

	@src/sg_sanitize.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<î∫o.h
>

14 
	~<limôs.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<sys/°©.h
>

17 
	~<gë›t.h
>

18 
	#__STDC_FORMAT_MACROS
 1

	)

19 
	~<öây≥s.h
>

21 #ifde‡
HAVE_CONFIG_H


22 
	~"c⁄fig.h
"

24 
	~"sg_lib.h
"

25 
	~"sg_±.h
"

26 
	~"sg_cmds_basic.h
"

27 
	~"sg_cmds_exåa.h
"

29 c⁄° * 
	gvîsi⁄_°r
 = "0.91 20130507";

32 #i‡
deföed
(
MSC_VER
Ë|| deföed(
__MINGW32__
)

33 
	#HAVE_MS_SLEEP


	)

35 #ifde‡
HAVE_MS_SLEEP


36 
	~<wödows.h
>

37 
	#¶ìp_f‹
(
£c⁄ds
Ë
	`SÀï
–(£c⁄dsË* 1000)

	)

39 
	#¶ìp_f‹
(
£c⁄ds
Ë
	`¶ìp
(£c⁄ds)

	)

43 
	#ME
 "sg_ßnôize: "

	)

45 
	#SANITIZE_OP
 0x48

	)

46 
	#SANITIZE_OP_LEN
 10

	)

47 
	#DEF_REQS_RESP_LEN
 252

	)

48 
	#SENSE_BUFF_LEN
 64

	)

49 
	#MAX_XFER_LEN
 65535

	)

50 
	#EBUFF_SZ
 256

	)

52 
	#SHORT_TIMEOUT
 20

	)

53 
	#LONG_TIMEOUT
 (15 * 3600Ë

	)

55 
	#POLL_DURATION_SECS
 60

	)

58 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

59 {"au£", 
no_¨gumít
, 0, 'A'},

60 {"block", 
no_¨gumít
, 0, 'B'},

61 {"cou¡", 
ªquúed_¨gumít
, 0, 'c'},

62 {"¸y±o", 
no_¨gumít
, 0, 'C'},

63 {"óæy", 
no_¨gumít
, 0, 'e'},

64 {"Áû", 
no_¨gumít
, 0, 'F'},

65 {"hñp", 
no_¨gumít
, 0, 'h'},

66 {"övît", 
no_¨gumít
, 0, 'I'},

67 {"ùl", 
ªquúed_¨gumít
, 0, 'i'},

68 {"ovîwrôe", 
no_¨gumít
, 0, 'O'},

69 {"∑âîn", 
ªquúed_¨gumít
, 0, 'p'},

70 {"quick", 
no_¨gumít
, 0, 'Q'},

71 {"ã°", 
ªquúed_¨gumít
, 0, 'T'},

72 {"vîbo£", 
no_¨gumít
, 0, 'v'},

73 {"vîsi⁄", 
no_¨gumít
, 0, 'V'},

74 {"waô", 
no_¨gumít
, 0, 'w'},

78 
	s›ts_t
 {

79 
	mau£
;

80 
	mblock
;

81 
	mcou¡
;

82 
	m¸y±o
;

83 
	móæy
;

84 
	mÁû
;

85 
	mövît
;

86 
	mùl
;

87 
	movîwrôe
;

88 
	mã°
;

89 
	mquick
;

90 
	mvîbo£
;

91 
	mwaô
;

92 c⁄° * 
	m∑âîn_‚
;

98 
	$ußge
()

100 
	`Ârötf
(
°dîr
, "Usage: "

144 
	}
}

148 
	$do_ßnôize
(
sg_fd
, c⁄° 
›ts_t
 * 
›
, c⁄° * 
∑øm_l°p
,

149 
∑øm_l°_Àn
)

151 
k
, 
ªt
, 
ªs
, 
£n£_ˇt
, 
immed
;

152 
ßnCmdBlk
[
SANITIZE_OP_LEN
];

153 
£n£_b
[
SENSE_BUFF_LEN
];

154 
sg_±_ba£
 * 
±vp
;

156 i‡(
›
->
óæy
 || op->
waô
)

157 
immed
 = 
›
->
óæy
 ? 1 : 0;

159 
immed
 = 1;

160 
	`mem£t
(
ßnCmdBlk
, 0, (sanCmdBlk));

161 
ßnCmdBlk
[0] = 
SANITIZE_OP
;

162 i‡(
›
->
ovîwrôe
)

163 
ßnCmdBlk
[1] = 1;

164 i‡(
›
->
block
)

165 
ßnCmdBlk
[1] = 2;

166 i‡(
›
->
¸y±o
)

167 
ßnCmdBlk
[1] = 3;

168 i‡(
›
->
Áû
)

169 
ßnCmdBlk
[1] = 0x1f;

171  
SG_LIB_SYNTAX_ERROR
;

172 i‡(
immed
)

173 
ßnCmdBlk
[1] |= 0x80;

174 i‡(
›
->
au£
)

175 
ßnCmdBlk
[1] |= 0x20;

176 
ßnCmdBlk
[7] = ((
∑øm_l°_Àn
 >> 8) & 0xff);

177 
ßnCmdBlk
[8] = (
∑øm_l°_Àn
 & 0xff);

179 i‡(
›
->
vîbo£
 > 1) {

180 
	`Ârötf
(
°dîr
, " Sanitize cmd: ");

181 
k
 = 0; k < 
SANITIZE_OP_LEN
; ++k)

182 
	`Ârötf
(
°dîr
, "%02x ", 
ßnCmdBlk
[
k
]);

183 
	`Ârötf
(
°dîr
, "\n");

185 i‡((
›
->
vîbo£
 > 2Ë&& (
∑øm_l°_Àn
 > 0)) {

186 
	`Ârötf
(
°dîr
, " ParameterÜist contents:\n");

187 
	`dSåHex
((c⁄° *)
∑øm_l°p
, 
∑øm_l°_Àn
, 1);

189 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

190 i‡(
NULL
 =
±vp
) {

191 
	`Ârötf
(
sg_w¨nögs_°rm
, "Sanitize: out of memory\n");

194 
	`£t_scsi_±_cdb
(
±vp
, 
ßnCmdBlk
, (sanCmdBlk));

195 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

196 
	`£t_scsi_±_d©a_out
(
±vp
, (*)
∑øm_l°p
, 
∑øm_l°_Àn
);

197 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, (
immed
 ? 
SHORT_TIMEOUT
 : 
LONG_TIMEOUT
),

198 
›
->
vîbo£
);

199 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "S™ôize", 
ªs
, 0, 
£n£_b
,

200 1 , 
›
->
vîbo£
, &
£n£_ˇt
);

201 i‡(-1 =
ªt
)

203 i‡(-2 =
ªt
) {

204 
£n£_ˇt
) {

205 
SG_LIB_CAT_NOT_READY
:

206 
SG_LIB_CAT_UNIT_ATTENTION
:

207 
SG_LIB_CAT_INVALID_OP
:

208 
SG_LIB_CAT_ILLEGAL_REQ
:

209 
SG_LIB_CAT_ABORTED_COMMAND
:

210 
ªt
 = 
£n£_ˇt
;

212 
SG_LIB_CAT_RECOVERED
:

213 
SG_LIB_CAT_NO_SENSE
:

214 
ªt
 = 0;

216 
SG_LIB_CAT_MEDIUM_HARD
:

218 
vÆid
, 
¶í
;

219 
uöt64_t
 
uŒ
 = 0;

221 
¶í
 = 
	`gë_scsi_±_£n£_Àn
(
±vp
);

222 
vÆid
 = 
	`sg_gë_£n£_öfo_Êd
(
£n£_b
, 
¶í
, &
uŒ
);

223 i‡(
vÆid
)

224 
	`Ârötf
(
°dîr
, "Medium or hardwareÉrror startingát "

225 "lba=%"
PRIu64
" [0x%"
PRIx64
"]\n", 
uŒ
, ull);

227 
ªt
 = 
£n£_ˇt
;

230 
ªt
 = -1;

234 
ªt
 = 0;

236 
	`de°ru˘_scsi_±_obj
(
±vp
);

237  
ªt
;

238 
	}
}

242 
	$maö
(
¨gc
, * 
¨gv
[])

244 
sg_fd
, 
k
, 
ªs
, 
c
, 
öfd
, 
¥ogªss
, 
vb
, 
n
, 
desc
, 
ª•_Àn
;

245 
gŸ_°dö
 = 0;

246 
∑øm_l°_Àn
 = 0;

247 c⁄° * 
devi˚_«me
 = 
NULL
;

248 
ebuff
[
EBUFF_SZ
];

249 
pdt_«me
[32];

250 
ªque°Sí£Buff
[
DEF_REQS_RESP_LEN
];

251 * 
wBuff
 = 
NULL
;

252 
ªt
 = -1;

253 
›ts_t
 
›ts
;

254 
°©
 
a_°©
;

255 
sg_sim∂e_öquúy_ª•
 
öq_out
;

257 
	`mem£t
(&
›ts
, 0, (opts));

258 
›ts
.
cou¡
 = 1;

260 
›ti⁄_ödex
 = 0;

262 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "ABc:CeFhi:IOp:QT:vVw", 
l⁄g_›ti⁄s
,

263 &
›ti⁄_ödex
);

264 i‡(
c
 == -1)

267 
c
) {

269 ++
›ts
.
au£
;

272 ++
›ts
.
block
;

275 
›ts
.
cou¡
 = 
	`sg_gë_num
(
›èrg
);

276 i‡((
›ts
.
cou¡
 < 1) || (opts.count > 31)) {

277 
	`Ârötf
(
°dîr
, "badárgumentÅo '--count',Éxpect 1Åo "

279  
SG_LIB_SYNTAX_ERROR
;

283 ++
›ts
.
¸y±o
;

286 ++
›ts
.
óæy
;

289 ++
›ts
.
Áû
;

293 
	`ußge
();

296 
›ts
.
ùl
 = 
	`sg_gë_num
(
›èrg
);

297 i‡((
›ts
.
ùl
 < 1) || (opts.ipl > 65535)) {

298 
	`Ârötf
(
°dîr
, "badárgumentÅo '--ipl',Éxpect 1Åo "

300  
SG_LIB_SYNTAX_ERROR
;

304 ++
›ts
.
övît
;

307 ++
›ts
.
ovîwrôe
;

310 
›ts
.
∑âîn_‚
 = 
›èrg
;

313 ++
›ts
.
quick
;

316 
›ts
.
ã°
 = 
	`sg_gë_num
(
›èrg
);

317 i‡((
›ts
.
ã°
 < 0) || (opts.test > 3)) {

318 
	`Ârötf
(
°dîr
, "badárgumentÅo '--test',Éxpect 0Åo 3\n");

319  
SG_LIB_SYNTAX_ERROR
;

323 ++
›ts
.
vîbo£
;

326 
	`Ârötf
(
°dîr
, 
ME
 "vîsi⁄: %s\n", 
vîsi⁄_°r
);

329 ++
›ts
.
waô
;

332 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê0x%x ??\n", 
c
);

333 
	`ußge
();

334  
SG_LIB_SYNTAX_ERROR
;

337 i‡(
›töd
 < 
¨gc
) {

338 i‡(
NULL
 =
devi˚_«me
) {

339 
devi˚_«me
 = 
¨gv
[
›töd
];

340 ++
›töd
;

342 i‡(
›töd
 < 
¨gc
) {

343 ; 
›töd
 < 
¨gc
; ++optind)

344 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

345 
¨gv
[
›töd
]);

346 
	`ußge
();

347  
SG_LIB_SYNTAX_ERROR
;

350 i‡(
NULL
 =
devi˚_«me
) {

351 
	`Ârötf
(
°dîr
, "missing deviceÇame!\n");

352 
	`ußge
();

353  
SG_LIB_SYNTAX_ERROR
;

355 
vb
 = 
›ts
.
vîbo£
;

356 
n
 = !!
›ts
.
block
 + !!›ts.
¸y±o
 + !!›ts.
Áû
 + !!›ts.
ovîwrôe
;

357 i‡(1 !
n
) {

358 
	`Ârötf
(
°dîr
, "oneánd only one of '--block', '--crypto', "

360  
SG_LIB_SYNTAX_ERROR
;

362 i‡(
›ts
.
ovîwrôe
) {

363 i‡(
NULL
 =
›ts
.
∑âîn_‚
) {

364 
	`Ârötf
(
°dîr
, "'--overwrite'Ñequires '--pattern=PF' "

366  
SG_LIB_SYNTAX_ERROR
;

368 
gŸ_°dö
 = (0 =
	`°rcmp
(
›ts
.
∑âîn_‚
, "-")) ? 1 : 0;

369 i‡(! 
gŸ_°dö
) {

370 
	`mem£t
(&
a_°©
, 0, (a_stat));

371 i‡(
	`°©
(
›ts
.
∑âîn_‚
, &
a_°©
) < 0) {

372 
	`Ârötf
(
°dîr
, "pattern file: unableÅo stat(%s): %s\n",

373 
›ts
.
∑âîn_‚
, 
	`ß„_°ªº‹
(
î∫o
));

374  
SG_LIB_FILE_ERROR
;

376 i‡(
›ts
.
ùl
 <= 0) {

377 
›ts
.
ùl
 = ()
a_°©
.
°_size
;

378 i‡(
›ts
.
ùl
 > 
MAX_XFER_LEN
) {

379 
	`Ârötf
(
°dîr
, "pattern fileÜengthÉxceeds 65535 "

381  
SG_LIB_FILE_ERROR
;

385 i‡(
›ts
.
ùl
 < 1) {

386 
	`Ârötf
(
°dîr
, "'--overwrite'Ñequires '--ipl=LEN' "

388  
SG_LIB_SYNTAX_ERROR
;

393 
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 0 , 
vb
);

394 i‡(
sg_fd
 < 0) {

395 
	`Ârötf
(
°dîr
, 
ME
 "›íÉº‹: %s: %s\n", 
devi˚_«me
,

396 
	`ß„_°ªº‹
(-
sg_fd
));

397  
SG_LIB_FILE_ERROR
;

400 i‡(
	`sg_sim∂e_öquúy
(
sg_fd
, &
öq_out
, 1, 
vb
)) {

401 
	`Ârötf
(
°dîr
, "%s doesn'tÑespondÅoá SCSI INQUIRY\n",

402 
devi˚_«me
);

403 
ªt
 = 
SG_LIB_CAT_OTHER
;

404 
îr_out
;

406 
	`¥ötf
(" %.8s %.16s %.4sÖeripheral_type: %s [0x%x]\n",

407 
öq_out
.
víd‹
, inq_out.
¥odu˘
, inq_out.
ªvisi⁄
,

408 
	`sg_gë_pdt_°r
(
öq_out
.
≥rùhîÆ_ty≥
, (
pdt_«me
),

409 
pdt_«me
),

410 
öq_out
.
≥rùhîÆ_ty≥
);

413 i‡(
›ts
.
ovîwrôe
) {

414 
∑øm_l°_Àn
 = 
›ts
.
ùl
 + 4;

415 
wBuff
 = (*)
	`ˇŒoc
(
›ts
.
ùl
 + 4, 1);

416 i‡(
NULL
 =
wBuff
) {

417 
	`Ârötf
(
°dîr
, "unableÅoállocate %d bytes of memory with "

418 "ˇŒoc()\n", 
›ts
.
ùl
 + 4);

419 
ªt
 = 
SG_LIB_SYNTAX_ERROR
;

420 
îr_out
;

422 i‡(
gŸ_°dö
) {

423 
öfd
 = 
STDIN_FILENO
;

424 i‡(
	`sg_£t_bö¨y_mode
(
STDIN_FILENO
) < 0)

425 
	`≥º‹
("sg_set_binary_mode");

427 i‡((
öfd
 = 
	`›í
(
›ts
.
∑âîn_‚
, 
O_RDONLY
)) < 0) {

428 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

429 
ME
 "couldÇŸ o≥¿%†f‹Ñódög", 
›ts
.
∑âîn_‚
);

430 
	`≥º‹
(
ebuff
);

431 
ªt
 = 
SG_LIB_FILE_ERROR
;

432 
îr_out
;

433 } i‡(
	`sg_£t_bö¨y_mode
(
öfd
) < 0)

434 
	`≥º‹
("sg_set_binary_mode");

436 
ªs
 = 
	`ªad
(
öfd
, 
wBuff
 + 4, 
›ts
.
ùl
);

437 i‡(
ªs
 < 0) {

438 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, 
ME
 "couldn'tÑead from %s",

439 
›ts
.
∑âîn_‚
);

440 
	`≥º‹
(
ebuff
);

441 i‡(! 
gŸ_°dö
)

442 
	`˛o£
(
öfd
);

443 
ªt
 = 
SG_LIB_FILE_ERROR
;

444 
îr_out
;

446 i‡(
ªs
 < 
›ts
.
ùl
) {

447 
	`Ârötf
(
°dîr
, "triedÅoÑead %d bytes from %s, got %d "

448 "byãs\n", 
›ts
.
ùl
, o±s.
∑âîn_‚
, 
ªs
);

449 
	`Ârötf
(
°dîr
, " soÖad with 0x0 bytesánd continue\n");

451 i‡(! 
gŸ_°dö
)

452 
	`˛o£
(
öfd
);

454 
wBuff
[0] = 
›ts
.
cou¡
 & 0x1f;;

455 i‡(
›ts
.
ã°
)

456 
wBuff
[0] |((
›ts
.
ã°
 & 0x3) << 5);

457 i‡(
›ts
.
övît
)

458 
wBuff
[0] |= 0x80;

459 
wBuff
[2] = ((
›ts
.
ùl
 >> 8) & 0xff);

460 
wBuff
[3] = (
›ts
.
ùl
 & 0xff);

463 i‡(0 =
›ts
.
quick
) {

464 
	`¥ötf
("\nA SANITIZE will commence in 15 seconds\n");

465 
	`¥ötf
(" ALL d©®⁄ %†wû»bêDESTROYED\n", 
devi˚_«me
);

466 
	`¥ötf
(" Press control-CÅoábort\n");

467 
	`¶ìp_f‹
(5);

468 
	`¥ötf
("\nA SANITIZE will commence in 10 seconds\n");

469 
	`¥ötf
(" ALL d©®⁄ %†wû»bêDESTROYED\n", 
devi˚_«me
);

470 
	`¥ötf
(" Press control-CÅoábort\n");

471 
	`¶ìp_f‹
(5);

472 
	`¥ötf
("\nA SANITIZE will commence in 5 seconds\n");

473 
	`¥ötf
(" ALL d©®⁄ %†wû»bêDESTROYED\n", 
devi˚_«me
);

474 
	`¥ötf
(" Press control-CÅoábort\n");

475 
	`¶ìp_f‹
(5);

478 
ªt
 = 
	`do_ßnôize
(
sg_fd
, &
›ts
, 
wBuff
, 
∑øm_l°_Àn
);

479 i‡(
ªt
) {

480 
ªt
) {

481 
SG_LIB_CAT_NOT_READY
:

482 
	`Ârötf
(
°dîr
, "Sanitize failed, deviceÇotÑeady\n");

484 
SG_LIB_CAT_UNIT_ATTENTION
:

485 
	`Ârötf
(
°dîr
, "Sanitize, unitáttention\n");

487 
SG_LIB_CAT_ABORTED_COMMAND
:

488 
	`Ârötf
(
°dîr
, "Sanitize,áborted command\n");

490 
SG_LIB_CAT_INVALID_OP
:

491 
	`Ârötf
(
°dîr
, "Sanitize commandÇot supported\n");

493 
SG_LIB_CAT_ILLEGAL_REQ
:

494 
	`Ârötf
(
°dîr
, "bad field in Sanitize cdb, option "

497 
SG_LIB_CAT_MEDIUM_HARD
:

498 
	`Ârötf
(
°dîr
, "Sanitize commandÑeported medium or "

502 
	`Ârötf
(
°dîr
, "Sanitize command failed\n");

507 i‡((0 =
ªt
Ë&& (0 =
›ts
.
óæy
Ë&& (0 =›ts.
waô
)) {

508 
k
 = 0, 
desc
 = 1 ;; ++k) {

509 
	`¶ìp_f‹
(
POLL_DURATION_SECS
);

510 
	`mem£t
(
ªque°Sí£Buff
, 0x0, (requestSenseBuff));

511 
ªs
 = 
	`sg_Œ_ªque°_£n£
(
sg_fd
, 
desc
, 
ªque°Sí£Buff
,

512 (
ªque°Sí£Buff
), 1, 
vb
);

513 i‡(
ªs
) {

514 
ªt
 = 
ªs
;

515 i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

516 
	`Ârötf
(
°dîr
, "Request Sense commandÇot supported\n");

517 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
) {

518 
	`Ârötf
(
°dîr
, "bad field in Request Sense cdb\n");

519 i‡(1 =
desc
) {

520 
	`Ârötf
(
°dîr
, "DescriptorÅype sense mayÇot be "

522 
desc
 = 0;

526 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

527 
	`Ârötf
(
°dîr
, "Request Sense,áborted command\n");

529 
	`Ârötf
(
°dîr
, "Request Sense command unexpectedly "

531 i‡(0 =
vb
)

532 
	`Ârötf
(
°dîr
, "ÅryÅhe '-v' option for "

538 
ª•_Àn
 = 
ªque°Sí£Buff
[7] + 8;

539 i‡(
vb
 > 2) {

540 
	`Ârötf
(
°dîr
, "Parameter data in hex\n");

541 
	`dSåHex
((c⁄° *)
ªque°Sí£Buff
, 
ª•_Àn
, 1);

543 
¥ogªss
 = -1;

544 
	`sg_gë_£n£_¥ogªss_Êd
(
ªque°Sí£Buff
, 
ª•_Àn
,

545 &
¥ogªss
);

546 i‡(
¥ogªss
 < 0) {

547 
ªt
 = 
ªs
;

548 i‡(
vb
 > 1)

549 
	`Ârötf
(
°dîr
, "NoÖrogress indication found, "

550 "ôî©i⁄ %d\n", 
k
 + 1);

554 
	`¥ötf
("Progress indication: %d%% done\n",

555 (
¥ogªss
 * 100) / 65536);

559 
îr_out
:

560 i‡(
wBuff
)

561 
	`‰ì
(
wBuff
);

562 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

563 i‡(
ªs
 < 0) {

564 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

565 i‡(0 =
ªt
)

566  
SG_LIB_FILE_ERROR
;

568  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

569 
	}
}

	@src/sg_sat_identify.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<gë›t.h
>

14 
	#__STDC_FORMAT_MACROS
 1

	)

15 
	~<öây≥s.h
>

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

20 
	~"sg_lib.h
"

21 
	~"sg_cmds_basic.h
"

22 
	~"sg_cmds_exåa.h
"

33 
	#SAT_ATA_PASS_THROUGH16
 0x85

	)

34 
	#SAT_ATA_PASS_THROUGH16_LEN
 16

	)

35 
	#SAT_ATA_PASS_THROUGH12
 0xa1

	)

36 
	#SAT_ATA_PASS_THROUGH12_LEN
 12

	)

37 
	#SAT_ATA_RETURN_DESC
 9

	)

38 
	#ASCQ_ATA_PT_INFO_AVAILABLE
 0x1d

	)

40 
	#ATA_IDENTIFY_DEVICE
 0xec

	)

41 
	#ATA_IDENTIFY_PACKET_DEVICE
 0xa1

	)

42 
	#ID_RESPONSE_LEN
 512

	)

44 
	#DEF_TIMEOUT
 20

	)

46 
	#EBUFF_SZ
 256

	)

48 c⁄° * 
	gvîsi⁄_°r
 = "1.09 20130507";

50 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

51 {"ck_c⁄d", 
no_¨gumít
, 0, 'c'},

52 {"exãnd", 
no_¨gumít
, 0, 'e'},

53 {"hñp", 
no_¨gumít
, 0, 'h'},

54 {"hex", 
no_¨gumít
, 0, 'H'},

55 {"Àn", 
ªquúed_¨gumít
, 0, 'l'},

56 {"idít", 
no_¨gumít
, 0, 'i'},

57 {"∑ckë", 
no_¨gumít
, 0, 'p'},

58 {"øw", 
no_¨gumít
, 0, 'r'},

59 {"vîbo£", 
no_¨gumít
, 0, 'v'},

60 {"vîsi⁄", 
no_¨gumít
, 0, 'V'},

64 
	$ußge
()

66 
	`Ârötf
(
°dîr
, "Usage: "

89 
	}
}

91 
	$dSåRaw
(c⁄° * 
°r
, 
Àn
)

93 
k
;

95 
k
 = 0 ; k < 
Àn
; ++k)

96 
	`¥ötf
("%c", 
°r
[
k
]);

97 
	}
}

99 
	$do_idítify_dev
(
sg_fd
, 
do_∑ckë
, 
cdb_Àn
,

100 
ck_c⁄d
, 
exãnd
, 
do_ödít
,

101 
do_hex
, 
do_øw
, 
vîbo£
)

103 
ok
, 
j
, 
ªs
, 
ªt
;

104 
¥Ÿocﬁ
 = 4;

105 
t_dú
 = 1;

106 
byã_block
 = 1;

107 
t_Àngth
 = 2;

108 
ªsid
 = 0;

109 
gŸ_¨d
 = 0;

110 
gŸ_fix£n£
 = 0;

111 
sb_sz
;

112 
sg_scsi_£n£_hdr
 
ssh
;

113 
öBuff
[
ID_RESPONSE_LEN
];

114 
£n£_buf„r
[64];

115 
©a_ªtu∫_desc
[16];

116 
≠tCmdBlk
[
SAT_ATA_PASS_THROUGH16_LEN
] =

117 {
SAT_ATA_PASS_THROUGH16
, 0, 0, 0, 0, 0, 0, 0,

119 
≠t12CmdBlk
[
SAT_ATA_PASS_THROUGH12_LEN
] =

120 {
SAT_ATA_PASS_THROUGH12
, 0, 0, 0, 0, 0, 0, 0,

122 c⁄° * 
u•
;

123 
uöt64_t
 
uŒ
;

125 
sb_sz
 = (
£n£_buf„r
);

126 
	`mem£t
(
£n£_buf„r
, 0, 
sb_sz
);

127 
	`mem£t
(
©a_ªtu∫_desc
, 0, (ata_return_desc));

128 
ok
 = 0;

129 i‡(
SAT_ATA_PASS_THROUGH16_LEN
 =
cdb_Àn
) {

131 
≠tCmdBlk
[6] = 1;

132 
≠tCmdBlk
[14] = (
do_∑ckë
 ? 
ATA_IDENTIFY_PACKET_DEVICE
 :

133 
ATA_IDENTIFY_DEVICE
);

134 
≠tCmdBlk
[1] = (
¥Ÿocﬁ
 << 1Ë| 
exãnd
;

135 
≠tCmdBlk
[2] = (
ck_c⁄d
 << 5Ë| (
t_dú
 << 3) |

136 (
byã_block
 << 2Ë| 
t_Àngth
;

137 
ªs
 = 
	`sg_Œ_©a_±
(
sg_fd
, 
≠tCmdBlk
, 
cdb_Àn
, 
DEF_TIMEOUT
, 
öBuff
,

138 
NULL
 , 
ID_RESPONSE_LEN
, 
£n£_buf„r
,

139 
sb_sz
, 
©a_ªtu∫_desc
,

140 (
©a_ªtu∫_desc
), &
ªsid
, 
vîbo£
);

143 
≠t12CmdBlk
[4] = 1;

144 
≠t12CmdBlk
[9] = (
do_∑ckë
 ? 
ATA_IDENTIFY_PACKET_DEVICE
 :

145 
ATA_IDENTIFY_DEVICE
);

146 
≠t12CmdBlk
[1] = (
¥Ÿocﬁ
 << 1);

147 
≠t12CmdBlk
[2] = (
ck_c⁄d
 << 5Ë| (
t_dú
 << 3) |

148 (
byã_block
 << 2Ë| 
t_Àngth
;

149 
ªs
 = 
	`sg_Œ_©a_±
(
sg_fd
, 
≠t12CmdBlk
, 
cdb_Àn
, 
DEF_TIMEOUT
, 
öBuff
,

150 
NULL
 , 
ID_RESPONSE_LEN
, 
£n£_buf„r
,

151 
sb_sz
, 
©a_ªtu∫_desc
,

152 (
©a_ªtu∫_desc
), &
ªsid
, 
vîbo£
);

154 i‡(0 =
ªs
) {

155 
ok
 = 1;

156 i‡(
vîbo£
 > 2)

157 
	`Ârötf
(
°dîr
, "command completed with SCSI GOOD status\n");

158 } i‡((
ªs
 > 0Ë&& (ª†& 
SAM_STAT_CHECK_CONDITION
)) {

159 i‡(
vîbo£
 > 1)

160 
	`sg_¥öt_£n£
("ATAÖas†through", 
£n£_buf„r
, 
sb_sz
,

161 ((
vîbo£
 > 2) ? 1 : 0));

162 i‡(
	`sg_scsi_n‹mÆize_£n£
(
£n£_buf„r
, 
sb_sz
, &
ssh
)) {

163 
ssh
.
£n£_key
) {

164 
SPC_SK_ILLEGAL_REQUEST
:

165 i‡((0x20 =
ssh
.
asc
Ë&& (0x0 =ssh.
ascq
)) {

166 
ªt
 = 
SG_LIB_CAT_INVALID_OP
;

167 i‡(
vîbo£
 < 2)

168 
	`Ârötf
(
°dîr
, "ATA PASS-THROUGH (%d)Çot "

169 "suµ‹ãd\n", 
cdb_Àn
);

171 
ªt
 = 
SG_LIB_CAT_ILLEGAL_REQ
;

172 i‡(
vîbo£
 < 2)

173 
	`Ârötf
(
°dîr
, "ATA PASS-THROUGH (%d), bad "

174 "fõld i¿cdb\n", 
cdb_Àn
);

176  
ªt
;

177 
SPC_SK_NO_SENSE
:

178 
SPC_SK_RECOVERED_ERROR
:

179 i‡((0x0 =
ssh
.
asc
) &&

180 (
ASCQ_ATA_PT_INFO_AVAILABLE
 =
ssh
.
ascq
)) {

181 i‡(0x72 =
ssh
.
ª•⁄£_code
) {

182 i‡(
SAT_ATA_RETURN_DESC
 !
©a_ªtu∫_desc
[0]) {

183 i‡(
vîbo£
)

184 
	`Ârötf
(
°dîr
, "didÇot find ATA Return "

186  
SG_LIB_CAT_RECOVERED
;

188 
gŸ_¨d
 = 1;

190 } i‡(0x70 =
ssh
.
ª•⁄£_code
) {

191 
gŸ_fix£n£
 = 1;

194 i‡(
vîbo£
 < 2)

195 
	`Ârötf
(
°dîr
, "ATA PASS-THROUGH (%d), "

197 
ssh
.
ª•⁄£_code
, 
cdb_Àn
);

198  
SG_LIB_CAT_RECOVERED
;

200 } i‡(
SPC_SK_RECOVERED_ERROR
 =
ssh
.
£n£_key
)

201  
SG_LIB_CAT_RECOVERED
;

203 i‡((0x0 =
ssh
.
asc
Ë&& (0x0 =ssh.
ascq
))

205  
SG_LIB_CAT_SENSE
;

207 
SPC_SK_UNIT_ATTENTION
:

208 i‡(
vîbo£
 < 2)

209 
	`Ârötf
(
°dîr
, "ATA PASS-THROUGH (%d), Unit Attention "

210 "dëe˘ed\n", 
cdb_Àn
);

211  
SG_LIB_CAT_UNIT_ATTENTION
;

212 
SPC_SK_NOT_READY
:

213 i‡(
vîbo£
 < 2)

214 
	`Ârötf
(
°dîr
, "ATA PASS-THROUGH (%d), deviceÇot "

215 "ªady\n", 
cdb_Àn
);

216  
SG_LIB_CAT_NOT_READY
;

217 
SPC_SK_MEDIUM_ERROR
:

218 
SPC_SK_HARDWARE_ERROR
:

219 i‡(
vîbo£
 < 2)

220 
	`Ârötf
(
°dîr
, "ATA PASS-THROUGH (%d), medium or "

221 "h¨dw¨êîr‹\n", 
cdb_Àn
);

222  
SG_LIB_CAT_MEDIUM_HARD
;

223 
SPC_SK_ABORTED_COMMAND
:

224 
	`Ârötf
(
°dîr
, "Aborted command:Åryágain with%s '-p' "

225 "›ti⁄\n", (
do_∑ckë
 ? "out" : ""));

226  
SG_LIB_CAT_ABORTED_COMMAND
;

228 i‡(
vîbo£
 < 2)

229 
	`Ârötf
(
°dîr
, "ATA PASS-THROUGH (%d), some sense "

230 "d©a, u£ '-v' f‹ m‹êöf‹m©i⁄\n", 
cdb_Àn
);

231  
SG_LIB_CAT_SENSE
;

234 
	`Ârötf
(
°dîr
, "CHECK CONDITION withoutÑesponse code ??\n");

235  
SG_LIB_CAT_SENSE
;

237 i‡(0x72 !(
£n£_buf„r
[0] & 0x7f)) {

238 
	`Ârötf
(
°dîr
, "expected descriptor sense format,Ñesponse "

239 "code=0x%x\n", 
£n£_buf„r
[0]);

240  
SG_LIB_CAT_MALFORMED
;

242 } i‡(
ªs
 > 0) {

243 
	`Ârötf
(
°dîr
, "U√x≥˘ed SCSI sètus=0x%x\n", 
ªs
);

244  
SG_LIB_CAT_MALFORMED
;

246 
	`Ârötf
(
°dîr
, "ATAÖas†through (%dËÁûed\n", 
cdb_Àn
);

247 i‡(
vîbo£
 < 2)

248 
	`Ârötf
(
°dîr
, "Åryádding '-v' for more information\n");

252 i‡((
SAT_ATA_RETURN_DESC
 =
©a_ªtu∫_desc
[0]Ë&& (0 =
gŸ_¨d
))

253 
	`Ârötf
(
°dîr
, "SeemÅo have got ATA Result Descriptor but "

255 i‡(
gŸ_¨d
) {

256 i‡(
©a_ªtu∫_desc
[3] & 0x4) {

257 
	`Ârötf
(
°dîr
, "error indication inÑeturned FIS:áborted "

259 
	`Ârötf
(
°dîr
, "Åryágain with%s '-p' option\n",

260 (
do_∑ckë
 ? "out" : ""));

261  
SG_LIB_CAT_ABORTED_COMMAND
;

263 
ok
 = 1;

265 i‡(
gŸ_fix£n£
) {

266 i‡(0x4 & 
£n£_buf„r
[3]) {

267 
	`Ârötf
(
°dîr
, "error indication inÑeturned FIS:áborted "

269 
	`Ârötf
(
°dîr
, "Åryágain with%s '-p' option\n",

270 (
do_∑ckë
 ? "out" : ""));

271  
SG_LIB_CAT_ABORTED_COMMAND
;

273 
ok
 = 1;

276 i‡(
ok
) {

277 i‡(
do_øw
)

278 
	`dSåRaw
((c⁄° *)
öBuff
, 512);

279 i‡(0 =
do_hex
) {

280 i‡(
do_ödít
) {

281 
u•
 = (c⁄° *)
öBuff
;

282 
uŒ
 = 0;

283 
j
 = 0; j < 4; ++j) {

284 i‡(
j
 > 0)

285 
uŒ
 <<= 16;

286 
uŒ
 |
u•
[108 + 
j
];

288 
	`¥ötf
("0x%016" 
PRIx64
 "\n", 
uŒ
);

290 
	`¥ötf
("Response for IDENTIFY %sDEVICE ATA command:\n",

291 (
do_∑ckë
 ? "PACKET " : ""));

292 
	`dW‹dHex
((c⁄° *)
öBuff
, 256, 0,

293 
	`sg_is_big_ídün
());

295 } i‡(1 =
do_hex
)

296 
	`dSåHex
((c⁄° *)
öBuff
, 512, 0);

297 i‡(2 =
do_hex
)

298 
	`dW‹dHex
((c⁄° *)
öBuff
, 256, 0,

299 
	`sg_is_big_ídün
());

301 
	`dW‹dHex
((c⁄° *)
öBuff
, 256, -2,

302 
	`sg_is_big_ídün
());

305 
	}
}

307 
	$maö
(
¨gc
, * 
¨gv
[])

309 
sg_fd
, 
c
, 
ªs
;

310 c⁄° * 
devi˚_«me
 = 
NULL
;

311 
cdb_Àn
 = 
SAT_ATA_PASS_THROUGH16_LEN
;

312 
do_∑ckë
 = 0;

313 
do_hex
 = 0;

314 
do_ödít
 = 0;

315 
do_øw
 = 0;

316 
vîbo£
 = 0;

317 
ck_c⁄d
 = 0;

318 
exãnd
 = 0;

319 
ªt
 = 0;

322 
›ti⁄_ödex
 = 0;

324 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "˚hHû:¥vV", 
l⁄g_›ti⁄s
,

325 &
›ti⁄_ödex
);

326 i‡(
c
 == -1)

329 
c
) {

331 ++
ck_c⁄d
;

334 ++
exãnd
;

338 
	`ußge
();

341 ++
do_hex
;

344 ++
do_ödít
;

347 
cdb_Àn
 = 
	`sg_gë_num
(
›èrg
);

348 i‡(! ((
cdb_Àn
 == 12) || (cdb_len == 16))) {

349 
	`Ârötf
(
°dîr
, "argumentÅo '--len' should be 12 or 16\n");

350  
SG_LIB_SYNTAX_ERROR
;

354 ++
do_∑ckë
;

357 ++
do_øw
;

360 ++
vîbo£
;

363 
	`Ârötf
(
°dîr
, "vîsi⁄: %s\n", 
vîsi⁄_°r
);

366 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê0x%x ??\n", 
c
);

367 
	`ußge
();

368  
SG_LIB_SYNTAX_ERROR
;

371 i‡(
›töd
 < 
¨gc
) {

372 i‡(
NULL
 =
devi˚_«me
) {

373 
devi˚_«me
 = 
¨gv
[
›töd
];

374 ++
›töd
;

376 i‡(
›töd
 < 
¨gc
) {

377 ; 
›töd
 < 
¨gc
; ++optind)

378 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

379 
¨gv
[
›töd
]);

380 
	`ußge
();

381  
SG_LIB_SYNTAX_ERROR
;

385 i‡(
NULL
 =
devi˚_«me
) {

386 
	`Ârötf
(
°dîr
, "missing deviceÇame!\n");

387 
	`ußge
();

390 i‡(
do_øw
) {

391 i‡(
	`sg_£t_bö¨y_mode
(
STDOUT_FILENO
) < 0) {

392 
	`≥º‹
("sg_set_binary_mode");

393  
SG_LIB_FILE_ERROR
;

397 i‡((
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 0 ,

398 
vîbo£
)) < 0) {

399 
	`Ârötf
(
°dîr
, "error opening file: %s: %s\n",

400 
devi˚_«me
, 
	`ß„_°ªº‹
(-
sg_fd
));

401  
SG_LIB_FILE_ERROR
;

404 
ªt
 = 
	`do_idítify_dev
(
sg_fd
, 
do_∑ckë
, 
cdb_Àn
, 
ck_c⁄d
, 
exãnd
,

405 
do_ödít
, 
do_hex
, 
do_øw
, 
vîbo£
);

407 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

408 i‡(
ªs
 < 0) {

409 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

410 i‡(0 =
ªt
)

411  
SG_LIB_FILE_ERROR
;

413  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

414 
	}
}

	@src/sg_sat_phy_event.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<gë›t.h
>

14 
	#__STDC_FORMAT_MACROS
 1

	)

15 
	~<öây≥s.h
>

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

20 
	~"sg_lib.h
"

21 
	~"sg_cmds_basic.h
"

22 
	~"sg_cmds_exåa.h
"

24 c⁄° * 
	gvîsi⁄_°r
 = "1.03 20130507";

44 
	#SAT_ATA_PASS_THROUGH16
 0x85

	)

45 
	#SAT_ATA_PASS_THROUGH16_LEN
 16

	)

46 
	#SAT_ATA_PASS_THROUGH12
 0xa1

	)

47 
	#SAT_ATA_PASS_THROUGH12_LEN
 12

	)

48 
	#SAT_ATA_RETURN_DESC
 9

	)

49 
	#ASCQ_ATA_PT_INFO_AVAILABLE
 0x1d

	)

51 
	#ATA_READ_LOG_EXT
 0x2f

	)

52 
	#SATA_PHY_EVENT_LPAGE
 0x11

	)

53 
	#READ_LOG_EXT_RESPONSE_LEN
 512

	)

55 
	#DEF_TIMEOUT
 20

	)

57 
	#EBUFF_SZ
 256

	)

59 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

60 {"ck_c⁄d", 
no_¨gumít
, 0, 'c'},

61 {"exãnd", 
no_¨gumít
, 0, 'e'},

62 {"hex", 
no_¨gumít
, 0, 'H'},

63 {"ign‹e", 
no_¨gumít
, 0, 'i'},

64 {"Àn", 
no_¨gumít
, 0, 'l'},

65 {"øw", 
no_¨gumít
, 0, 'r'},

66 {"ª£t", 
no_¨gumít
, 0, 'R'},

67 {"vîbo£", 
no_¨gumít
, 0, 'v'},

68 {"vîsi⁄", 
no_¨gumít
, 0, 'V'},

72 
	sphy_evít_t
 {

73 
	mid
;

74 c⁄° * 
	mdesc
;

77 
phy_evít_t
 
	gphy_evít_¨r
[] = {

97 {0x0, 
NULL
},

101 
	$ußge
()

103 
	`Ârötf
(
°dîr
, "Usage: "

125 
	}
}

128 
	$föd_phy_desc
(
id
)

130 c⁄° 
phy_evít_t
 * 
≥p
;

132 
≥p
 = 
phy_evít_¨r
;Öï->
desc
; ++pep) {

133 i‡((
id
 & 0xfffË=
≥p
->id)

134  
≥p
->
desc
;

136  
NULL
;

137 
	}
}

140 
	$dSåRaw
(c⁄° * 
°r
, 
Àn
)

142 
k
;

144 
k
 = 0 ; k < 
Àn
; ++k)

145 
	`¥ötf
("%c", 
°r
[
k
]);

146 
	}
}

151 
	$do_ªad_log_ext
(
sg_fd
, 
log_addr
, 
∑ge_ö_log
, 
„©uª
,

152 
blk_cou¡
, * 
ª•
, 
mx_ª•_Àn
, 
cdb_Àn
,

153 
ck_c⁄d
, 
exãnd
, 
do_hex
, 
do_øw
, 
vîbo£
)

155 
ok
, 
ªs
, 
ªt
;

156 
¥Ÿocﬁ
 = 4;

157 
t_dú
 = 1;

158 
byã_block
 = 1;

159 
t_Àngth
 = 2;

160 
ªsid
 = 0;

161 
gŸ_¨d
 = 0;

162 
sb_sz
;

163 
sg_scsi_£n£_hdr
 
ssh
;

164 
£n£_buf„r
[64];

165 
©a_ªtu∫_desc
[16];

166 
≠tCmdBlk
[
SAT_ATA_PASS_THROUGH16_LEN
] =

167 {
SAT_ATA_PASS_THROUGH16
, 0, 0, 0, 0, 0, 0, 0,

169 
≠t12CmdBlk
[
SAT_ATA_PASS_THROUGH12_LEN
] =

170 {
SAT_ATA_PASS_THROUGH12
, 0, 0, 0, 0, 0, 0, 0,

173 
sb_sz
 = (
£n£_buf„r
);

174 
	`mem£t
(
£n£_buf„r
, 0, 
sb_sz
);

175 
	`mem£t
(
©a_ªtu∫_desc
, 0, (ata_return_desc));

176 
ok
 = 0;

177 i‡(
SAT_ATA_PASS_THROUGH16_LEN
 =
cdb_Àn
) {

179 
≠tCmdBlk
[3] = (
„©uª
 >> 8) & 0xff;

180 
≠tCmdBlk
[4] = 
„©uª
 & 0xff;

181 
≠tCmdBlk
[5] = (
blk_cou¡
 >> 8) & 0xff;

182 
≠tCmdBlk
[6] = 
blk_cou¡
 & 0xff;

183 
≠tCmdBlk
[8] = 
log_addr
 & 0xff;

184 
≠tCmdBlk
[9] = (
∑ge_ö_log
 >> 8) & 0xff;

186 
≠tCmdBlk
[10] = 
∑ge_ö_log
 & 0xff;

187 
≠tCmdBlk
[14] = 
ATA_READ_LOG_EXT
;

188 
≠tCmdBlk
[1] = (
¥Ÿocﬁ
 << 1Ë| 
exãnd
;

189 
≠tCmdBlk
[2] = (
ck_c⁄d
 << 5Ë| (
t_dú
 << 3) |

190 (
byã_block
 << 2Ë| 
t_Àngth
;

191 
ªs
 = 
	`sg_Œ_©a_±
(
sg_fd
, 
≠tCmdBlk
, 
cdb_Àn
, 
DEF_TIMEOUT
, 
ª•
,

192 
NULL
 , 
mx_ª•_Àn
, 
£n£_buf„r
,

193 
sb_sz
, 
©a_ªtu∫_desc
,

194 (
©a_ªtu∫_desc
), &
ªsid
, 
vîbo£
);

197 
≠t12CmdBlk
[3] = 
„©uª
 & 0xff;

198 
≠t12CmdBlk
[4] = 
blk_cou¡
 & 0xff;

199 
≠t12CmdBlk
[5] = 
log_addr
 & 0xff;

200 
≠t12CmdBlk
[6] = 
∑ge_ö_log
 & 0xff;

201 
≠t12CmdBlk
[9] = 
ATA_READ_LOG_EXT
;

202 
≠t12CmdBlk
[1] = (
¥Ÿocﬁ
 << 1);

203 
≠t12CmdBlk
[2] = (
ck_c⁄d
 << 5Ë| (
t_dú
 << 3) |

204 (
byã_block
 << 2Ë| 
t_Àngth
;

205 
ªs
 = 
	`sg_Œ_©a_±
(
sg_fd
, 
≠t12CmdBlk
, 
cdb_Àn
, 
DEF_TIMEOUT
, 
ª•
,

206 
NULL
 , 
mx_ª•_Àn
, 
£n£_buf„r
,

207 
sb_sz
, 
©a_ªtu∫_desc
,

208 (
©a_ªtu∫_desc
), &
ªsid
, 
vîbo£
);

210 i‡(0 =
ªs
) {

211 
ok
 = 1;

212 i‡(
vîbo£
 > 2)

213 
	`Ârötf
(
°dîr
, "command completed with SCSI GOOD status\n");

214 } i‡((
ªs
 > 0Ë&& (ª†& 
SAM_STAT_CHECK_CONDITION
)) {

215 i‡(
vîbo£
 > 1)

216 
	`sg_¥öt_£n£
("ATAÖas†through", 
£n£_buf„r
, 
sb_sz
,

217 ((
vîbo£
 > 2) ? 1 : 0));

218 i‡(
	`sg_scsi_n‹mÆize_£n£
(
£n£_buf„r
, 
sb_sz
, &
ssh
)) {

219 
ssh
.
£n£_key
) {

220 
SPC_SK_ILLEGAL_REQUEST
:

221 i‡((0x20 =
ssh
.
asc
Ë&& (0x0 =ssh.
ascq
)) {

222 
ªt
 = 
SG_LIB_CAT_INVALID_OP
;

223 i‡(
vîbo£
 < 2)

224 
	`Ârötf
(
°dîr
, "ATA PASS-THROUGH (%d)Çot "

225 "suµ‹ãd\n", 
cdb_Àn
);

227 
ªt
 = 
SG_LIB_CAT_ILLEGAL_REQ
;

228 i‡(
vîbo£
 < 2)

229 
	`Ârötf
(
°dîr
, "ATA PASS-THROUGH (%d), bad "

230 "fõld i¿cdb\n", 
cdb_Àn
);

232  
ªt
;

233 
SPC_SK_NO_SENSE
:

234 
SPC_SK_RECOVERED_ERROR
:

235 i‡((0x0 =
ssh
.
asc
) &&

236 (
ASCQ_ATA_PT_INFO_AVAILABLE
 =
ssh
.
ascq
)) {

237 i‡(
SAT_ATA_RETURN_DESC
 !
©a_ªtu∫_desc
[0]) {

238 i‡(
vîbo£
)

239 
	`Ârötf
(
°dîr
, "didÇot find ATA Return "

241  
SG_LIB_CAT_RECOVERED
;

243 
gŸ_¨d
 = 1;

245 } i‡(
SPC_SK_RECOVERED_ERROR
 =
ssh
.
£n£_key
)

246  
SG_LIB_CAT_RECOVERED
;

248 i‡((0x0 =
ssh
.
asc
Ë&& (0x0 =ssh.
ascq
))

250  
SG_LIB_CAT_SENSE
;

252 
SPC_SK_UNIT_ATTENTION
:

253 i‡(
vîbo£
 < 2)

254 
	`Ârötf
(
°dîr
, "ATA PASS-THROUGH (%d), Unit Attention "

255 "dëe˘ed\n", 
cdb_Àn
);

256  
SG_LIB_CAT_UNIT_ATTENTION
;

257 
SPC_SK_NOT_READY
:

258 i‡(
vîbo£
 < 2)

259 
	`Ârötf
(
°dîr
, "ATA PASS-THROUGH (%d), deviceÇot "

260 "ªady\n", 
cdb_Àn
);

261  
SG_LIB_CAT_NOT_READY
;

262 
SPC_SK_MEDIUM_ERROR
:

263 
SPC_SK_HARDWARE_ERROR
:

264 i‡(
vîbo£
 < 2)

265 
	`Ârötf
(
°dîr
, "ATA PASS-THROUGH (%d), medium or "

266 "h¨dw¨êîr‹\n", 
cdb_Àn
);

267  
SG_LIB_CAT_MEDIUM_HARD
;

268 
SPC_SK_ABORTED_COMMAND
:

269 
	`Ârötf
(
°dîr
, "Aborted command\n");

270  
SG_LIB_CAT_ABORTED_COMMAND
;

272 i‡(
vîbo£
 < 2)

273 
	`Ârötf
(
°dîr
, "ATA PASS-THROUGH (%d), some sense "

274 "d©a, u£ '-v' f‹ m‹êöf‹m©i⁄\n", 
cdb_Àn
);

275  
SG_LIB_CAT_SENSE
;

278 
	`Ârötf
(
°dîr
, "CHECK CONDITION withoutÑesponse code ??\n");

279  
SG_LIB_CAT_SENSE
;

281 i‡(0x72 !(
£n£_buf„r
[0] & 0x7f)) {

282 
	`Ârötf
(
°dîr
, "expected descriptor sense format,Ñesponse "

283 "code=0x%x\n", 
£n£_buf„r
[0]);

284  
SG_LIB_CAT_MALFORMED
;

286 } i‡(
ªs
 > 0) {

287 
	`Ârötf
(
°dîr
, "U√x≥˘ed SCSI sètus=0x%x\n", 
ªs
);

288  
SG_LIB_CAT_MALFORMED
;

290 
	`Ârötf
(
°dîr
, "ATAÖas†through (%dËÁûed\n", 
cdb_Àn
);

291 i‡(
vîbo£
 < 2)

292 
	`Ârötf
(
°dîr
, "Åryádding '-v' for more information\n");

296 i‡((
SAT_ATA_RETURN_DESC
 =
©a_ªtu∫_desc
[0]Ë&& (0 =
gŸ_¨d
))

297 
	`Ârötf
(
°dîr
, "SeemÅo have got ATA Result Descriptor but "

299 i‡(
gŸ_¨d
) {

300 i‡(
©a_ªtu∫_desc
[3] & 0x4) {

301 
	`Ârötf
(
°dîr
, "error indication inÑeturned FIS:áborted "

303  
SG_LIB_CAT_ABORTED_COMMAND
;

305 
ok
 = 1;

308 i‡(
ok
) {

309 i‡(
do_øw
)

310 
	`dSåRaw
((c⁄° *)
ª•
, 
mx_ª•_Àn
);

311 i‡(1 =
do_hex
)

312 
	`dSåHex
((c⁄° *)
ª•
, 
mx_ª•_Àn
, 0);

313 i‡(
do_hex
 > 1)

314 
	`dW‹dHex
((c⁄° *)
ª•
, 
mx_ª•_Àn
 / 2, 0,

315 
	`sg_is_big_ídün
());

318 
	}
}

321 
	$maö
(
¨gc
, * 
¨gv
[])

323 
sg_fd
, 
c
, 
k
, 
j
, 
ªs
, 
id
, 
Àn
, 
víd‹
;

324 * 
devi˚_«me
 = 0;

325 
ebuff
[
EBUFF_SZ
];

326 
öBuff
[
READ_LOG_EXT_RESPONSE_LEN
];

327 
cdb_Àn
 = 16;

328 
hex
 = 0;

329 
ign‹e
 = 0;

330 
øw
 = 0;

331 
ª£t
 = 0;

332 
vîbo£
 = 0;

333 
ck_c⁄d
 = 0;

334 
exãnd
 = 0;

335 
ªt
 = 0;

336 
uöt64_t
 
uŒ
;

337 c⁄° * 
˝
;

339 
	`mem£t
(
öBuff
, 0, (inBuff));

341 
›ti⁄_ödex
 = 0;

343 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "cehHil:rRvV",

344 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

345 i‡(
c
 == -1)

348 
c
) {

350 ++
ck_c⁄d
;

353 ++
exãnd
;

357 
	`ußge
();

358 
	`exô
(0);

360 ++
hex
;

363 ++
ign‹e
;

366 
cdb_Àn
 = 
	`sg_gë_num
(
›èrg
);

367 i‡(! ((
cdb_Àn
 == 12) || (cdb_len == 16))) {

368 
	`Ârötf
(
°dîr
, "argumentÅo '--len' should be 12 or 16\n");

369  
SG_LIB_SYNTAX_ERROR
;

373 ++
øw
;

376 ++
ª£t
;

379 ++
vîbo£
;

382 
	`Ârötf
(
°dîr
, "vîsi⁄: %s\n", 
vîsi⁄_°r
);

383 
	`exô
(0);

385 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê%¯[0x%x]\n", 
c
, c);

386 
	`ußge
();

387  
SG_LIB_SYNTAX_ERROR
;

390 i‡(
›töd
 < 
¨gc
) {

391 i‡(
NULL
 =
devi˚_«me
) {

392 
devi˚_«me
 = 
¨gv
[
›töd
];

393 ++
›töd
;

395 i‡(
›töd
 < 
¨gc
) {

396 ; 
›töd
 < 
¨gc
; ++optind)

397 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

398 
¨gv
[
›töd
]);

399 
	`ußge
();

400  
SG_LIB_SYNTAX_ERROR
;

403 i‡(0 =
devi˚_«me
) {

404 
	`Ârötf
(
°dîr
, "no DEVICEÇame detected\n");

405 
	`ußge
();

406  
SG_LIB_SYNTAX_ERROR
;

408 i‡(
øw
) {

409 i‡(
	`sg_£t_bö¨y_mode
(
STDOUT_FILENO
) < 0) {

410 
	`≥º‹
("sg_set_binary_mode");

411  
SG_LIB_FILE_ERROR
;

415 i‡((
sg_fd
 = 
	`›í
(
devi˚_«me
, 
O_RDWR
)) < 0) {

416 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

417 "sg_ßt_phy_evít:Éº‹ o≥nög fûe: %s", 
devi˚_«me
);

418 
	`≥º‹
(
ebuff
);

419  
SG_LIB_FILE_ERROR
;

421 
ªt
 = 
	`do_ªad_log_ext
(
sg_fd
, 
SATA_PHY_EVENT_LPAGE
, 0 ,

422 (
ª£t
 ? 1 : 0) ,

423 1 , 
öBuff
,

424 
READ_LOG_EXT_RESPONSE_LEN
, 
cdb_Àn
, 
ck_c⁄d
,

425 
exãnd
, 
hex
, 
øw
, 
vîbo£
);

427 i‡((0 =
ªt
Ë&& (0 =
hex
Ë&& (0 =
øw
)) {

428 
	`¥ötf
("SATAÖhyÉvent counters:\n");

429 
k
 = 4; k < 512; k +(
Àn
 + 2)) {

430 
id
 = (
öBuff
[
k
 + 1] << 8) + inBuff[k];

431 i‡(0 =
id
)

433 
Àn
 = ((
id
 >> 12) & 0x7) * 2;

434 
víd‹
 = !!(
id
 & 0x8000);

435 
id
 = id & 0xfff;

436 
uŒ
 = 0;

437 
j
 = 
Àn
 - 1; j >= 0; --j) {

438 i‡(
j
 < (
Àn
 - 1))

439 
uŒ
 <<= 8;

440 
uŒ
 |
öBuff
[
k
 + 2 + 
j
];

442 
˝
 = 
NULL
;

443 i‡((0 =
víd‹
Ë&& (0 =
ign‹e
))

444 
˝
 = 
	`föd_phy_desc
(
id
);

445 i‡(
˝
)

446 
	`¥ötf
(" %s: %" 
PRIu64
 "\n", 
˝
, 
uŒ
);

448 
	`¥ötf
(" id=0x%x, vendor=%d, data_len=%d, "

449 "vÆ=%" 
PRIu64
 "\n", 
id
, 
víd‹
, 
Àn
, 
uŒ
);

453 
ªs
 = 
	`˛o£
(
sg_fd
);

454 i‡(
ªs
 < 0) {

455 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

456 i‡(0 =
ªt
)

457  
SG_LIB_FILE_ERROR
;

459  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

460 
	}
}

	@src/sg_sat_set_features.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<î∫o.h
>

14 
	~<gë›t.h
>

16 #ifde‡
HAVE_CONFIG_H


17 
	~"c⁄fig.h
"

19 
	~"sg_lib.h
"

20 
	~"sg_cmds_basic.h
"

21 
	~"sg_cmds_exåa.h
"

38 
	#SAT_ATA_PASS_THROUGH16
 0x85

	)

39 
	#SAT_ATA_PASS_THROUGH16_LEN
 16

	)

40 
	#SAT_ATA_PASS_THROUGH12
 0xa1

	)

41 
	#SAT_ATA_PASS_THROUGH12_LEN
 12

	)

42 
	#SAT_ATA_RETURN_DESC
 9

	)

43 
	#ASCQ_ATA_PT_INFO_AVAILABLE
 0x1d

	)

45 
	#ATA_SET_FEATURES
 0xef

	)

47 
	#DEF_TIMEOUT
 20

	)

49 c⁄° * 
	gvîsi⁄_°r
 = "1.06 20130507";

51 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

52 {"cou¡", 
ªquúed_¨gumít
, 0, 'c'},

53 {"ck_c⁄d", 
no_¨gumít
, 0, 'C'},

54 {"„©uª", 
ªquúed_¨gumít
, 0, 'f'},

55 {"hñp", 
no_¨gumít
, 0, 'h'},

56 {"Àn", 
ªquúed_¨gumít
, 0, 'l'},

57 {"lba", 
ªquúed_¨gumít
, 0, 'L'},

58 {"vîbo£", 
no_¨gumít
, 0, 'v'},

59 {"vîsi⁄", 
no_¨gumít
, 0, 'V'},

64 
	$ußge
()

66 
	`Ârötf
(
°dîr
, "Usage: "

95 
	}
}

97 
	$do_£t_„©uªs
(
sg_fd
, 
„©uª
, 
cou¡
,

98 
lba
, 
cdb_Àn
, 
ck_c⁄d
,

99 
vîbo£
)

101 
ªs
, 
ªt
;

102 
exãnd
 = 0;

103 
¥Ÿocﬁ
 = 3;

104 
t_dú
 = 1;

105 
byã_block
 = 1;

106 
t_Àngth
 = 0;

107 
ªsid
 = 0;

108 
gŸ_¨d
 = 0;

109 
sb_sz
;

110 
sg_scsi_£n£_hdr
 
ssh
;

111 
£n£_buf„r
[64];

112 
©a_ªtu∫_desc
[16];

113 
≠tCmdBlk
[
SAT_ATA_PASS_THROUGH16_LEN
] =

114 {
SAT_ATA_PASS_THROUGH16
, 0, 0, 0, 0, 0, 0, 0,

116 
≠t12CmdBlk
[
SAT_ATA_PASS_THROUGH12_LEN
] =

117 {
SAT_ATA_PASS_THROUGH12
, 0, 0, 0, 0, 0, 0, 0,

120 
sb_sz
 = (
£n£_buf„r
);

121 
	`mem£t
(
£n£_buf„r
, 0, 
sb_sz
);

122 
	`mem£t
(
©a_ªtu∫_desc
, 0, (ata_return_desc));

123 i‡(16 =
cdb_Àn
) {

125 
≠tCmdBlk
[14] = 
ATA_SET_FEATURES
;

126 
≠tCmdBlk
[4] = 
„©uª
;

127 
≠tCmdBlk
[6] = 
cou¡
;

128 
≠tCmdBlk
[8] = 
lba
 & 0xff;

129 
≠tCmdBlk
[10] = (
lba
 >> 8) & 0xff;

130 
≠tCmdBlk
[12] = (
lba
 >> 16) & 0xff;

131 
≠tCmdBlk
[7] = (
lba
 >> 24) & 0xff;

132 
≠tCmdBlk
[1] = (
¥Ÿocﬁ
 << 1Ë| 
exãnd
;

133 
≠tCmdBlk
[2] = (
ck_c⁄d
 << 5Ë| (
t_dú
 << 3) |

134 (
byã_block
 << 2Ë| 
t_Àngth
;

135 
ªs
 = 
	`sg_Œ_©a_±
(
sg_fd
, 
≠tCmdBlk
, 
cdb_Àn
, 
DEF_TIMEOUT
, 
NULL
,

136 
NULL
 , 0, 
£n£_buf„r
,

137 
sb_sz
, 
©a_ªtu∫_desc
,

138 (
©a_ªtu∫_desc
), &
ªsid
, 
vîbo£
);

141 
≠t12CmdBlk
[9] = 
ATA_SET_FEATURES
;

142 
≠t12CmdBlk
[3] = 
„©uª
;

143 
≠t12CmdBlk
[4] = 
cou¡
;

144 
≠t12CmdBlk
[5] = 
lba
 & 0xff;

145 
≠t12CmdBlk
[6] = (
lba
 >> 8) & 0xff;

146 
≠t12CmdBlk
[7] = (
lba
 >> 16) & 0xff;

147 
≠t12CmdBlk
[1] = (
¥Ÿocﬁ
 << 1);

148 
≠t12CmdBlk
[2] = (
ck_c⁄d
 << 5Ë| (
t_dú
 << 3) |

149 (
byã_block
 << 2Ë| 
t_Àngth
;

150 
ªs
 = 
	`sg_Œ_©a_±
(
sg_fd
, 
≠t12CmdBlk
, 
cdb_Àn
, 
DEF_TIMEOUT
, 
NULL
,

151 
NULL
 , 0, 
£n£_buf„r
,

152 
sb_sz
, 
©a_ªtu∫_desc
,

153 (
©a_ªtu∫_desc
), &
ªsid
, 
vîbo£
);

155 i‡(0 =
ªs
) {

156 i‡(
vîbo£
 > 2)

157 
	`Ârötf
(
°dîr
, "command completed with SCSI GOOD status\n");

158 } i‡((
ªs
 > 0Ë&& (ª†& 
SAM_STAT_CHECK_CONDITION
)) {

159 i‡(
vîbo£
 > 1)

160 
	`sg_¥öt_£n£
("ATAÖas†through", 
£n£_buf„r
, 
sb_sz
,

161 ((
vîbo£
 > 2) ? 1 : 0));

162 i‡(
	`sg_scsi_n‹mÆize_£n£
(
£n£_buf„r
, 
sb_sz
, &
ssh
)) {

163 
ssh
.
£n£_key
) {

164 
SPC_SK_ILLEGAL_REQUEST
:

165 i‡((0x20 =
ssh
.
asc
Ë&& (0x0 =ssh.
ascq
)) {

166 
ªt
 = 
SG_LIB_CAT_INVALID_OP
;

167 i‡(
vîbo£
 < 2)

168 
	`Ârötf
(
°dîr
, "ATA PASS-THROUGH (%d)Çot "

169 "suµ‹ãd\n", 
cdb_Àn
);

171 
ªt
 = 
SG_LIB_CAT_ILLEGAL_REQ
;

172 i‡(
vîbo£
 < 2)

173 
	`Ârötf
(
°dîr
, "ATA PASS-THROUGH (%d), bad "

174 "fõld i¿cdb\n", 
cdb_Àn
);

176  
ªt
;

177 
SPC_SK_NO_SENSE
:

178 
SPC_SK_RECOVERED_ERROR
:

179 i‡((0x0 =
ssh
.
asc
) &&

180 (
ASCQ_ATA_PT_INFO_AVAILABLE
 =
ssh
.
ascq
)) {

181 i‡(
SAT_ATA_RETURN_DESC
 !
©a_ªtu∫_desc
[0]) {

182 i‡(
vîbo£
)

183 
	`Ârötf
(
°dîr
, "didÇot find ATA Return "

185  
SG_LIB_CAT_RECOVERED
;

187 
gŸ_¨d
 = 1;

189 } i‡(
SPC_SK_RECOVERED_ERROR
 =
ssh
.
£n£_key
)

190  
SG_LIB_CAT_RECOVERED
;

192 i‡((0x0 =
ssh
.
asc
Ë&& (0x0 =ssh.
ascq
))

194  
SG_LIB_CAT_SENSE
;

196 
SPC_SK_UNIT_ATTENTION
:

197 i‡(
vîbo£
 < 2)

198 
	`Ârötf
(
°dîr
, "ATA PASS-THROUGH (%d), Unit Attention "

199 "dëe˘ed\n", 
cdb_Àn
);

200  
SG_LIB_CAT_UNIT_ATTENTION
;

201 
SPC_SK_NOT_READY
:

202 i‡(
vîbo£
 < 2)

203 
	`Ârötf
(
°dîr
, "ATA PASS-THROUGH (%d), deviceÇot "

204 "ªady\n", 
cdb_Àn
);

205  
SG_LIB_CAT_NOT_READY
;

206 
SPC_SK_MEDIUM_ERROR
:

207 
SPC_SK_HARDWARE_ERROR
:

208 i‡(
vîbo£
 < 2)

209 
	`Ârötf
(
°dîr
, "ATA PASS-THROUGH (%d), medium or "

210 "h¨dw¨êîr‹\n", 
cdb_Àn
);

211  
SG_LIB_CAT_MEDIUM_HARD
;

212 
SPC_SK_ABORTED_COMMAND
:

213 
	`Ârötf
(
°dîr
, "Aborted command\n");

214  
SG_LIB_CAT_ABORTED_COMMAND
;

216 i‡(
vîbo£
 < 2)

217 
	`Ârötf
(
°dîr
, "ATA PASS-THROUGH (%d), some sense "

218 "d©a, u£ '-v' f‹ m‹êöf‹m©i⁄\n", 
cdb_Àn
);

219  
SG_LIB_CAT_SENSE
;

222 
	`Ârötf
(
°dîr
, "CHECK CONDITION withoutÑesponse code ??\n");

223  
SG_LIB_CAT_SENSE
;

225 i‡(0x72 !(
£n£_buf„r
[0] & 0x7f)) {

226 
	`Ârötf
(
°dîr
, "expected descriptor sense format,Ñesponse "

227 "code=0x%x\n", 
£n£_buf„r
[0]);

228  
SG_LIB_CAT_MALFORMED
;

230 } i‡(
ªs
 > 0) {

231 
	`Ârötf
(
°dîr
, "U√x≥˘ed SCSI sètus=0x%x\n", 
ªs
);

232  
SG_LIB_CAT_MALFORMED
;

234 
	`Ârötf
(
°dîr
, "ATAÖas†through (%dËÁûed\n", 
cdb_Àn
);

235 i‡(
vîbo£
 < 2)

236 
	`Ârötf
(
°dîr
, "Åryádding '-v' for more information\n");

240 i‡((
SAT_ATA_RETURN_DESC
 =
©a_ªtu∫_desc
[0]Ë&& (0 =
gŸ_¨d
))

241 
	`Ârötf
(
°dîr
, "SeemÅo have got ATA Result Descriptor but "

243 i‡(
gŸ_¨d
) {

244 i‡(
©a_ªtu∫_desc
[3] & 0x4) {

245 
	`Ârötf
(
°dîr
, "error indication inÑeturned FIS:áborted "

247  
SG_LIB_CAT_ABORTED_COMMAND
;

251 
	}
}

254 
	$maö
(
¨gc
, * 
¨gv
[])

256 
sg_fd
, 
c
, 
k
, 
ªt
, 
ªs
;

257 c⁄° * 
devi˚_«me
 = 
NULL
;

258 
cou¡
 = 0;

259 
„©uª
 = 0;

260 
lba
 = 0;

261 
vîbo£
 = 0;

262 
ck_c⁄d
 = 0;

263 
cdb_Àn
 = 
SAT_ATA_PASS_THROUGH16_LEN
;

266 
›ti⁄_ödex
 = 0;

268 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "c:Cf:hl:L:vV", 
l⁄g_›ti⁄s
,

269 &
›ti⁄_ödex
);

270 i‡(
c
 == -1)

273 
c
) {

275 
cou¡
 = 
	`sg_gë_num
(
›èrg
);

276 i‡((
cou¡
 < 0) || (count > 255)) {

277 
	`Ârötf
(
°dîr
, "badárgument for '--count'\n");

278  
SG_LIB_SYNTAX_ERROR
;

282 
ck_c⁄d
 = 1;

285 
„©uª
 = 
	`sg_gë_num
(
›èrg
);

286 i‡((
„©uª
 < 0) || (feature > 255)) {

287 
	`Ârötf
(
°dîr
, "badárgument for '--feature'\n");

288  
SG_LIB_SYNTAX_ERROR
;

293 
	`ußge
();

296 
cdb_Àn
 = 
	`sg_gë_num
(
›èrg
);

297 i‡(! ((
cdb_Àn
 == 12) || (cdb_len == 16))) {

298 
	`Ârötf
(
°dîr
, "argumentÅo '--len' should be 12 or 16\n");

299  
SG_LIB_SYNTAX_ERROR
;

303 
k
 = 
	`sg_gë_num
(
›èrg
);

304 i‡(-1 =
k
) {

305 
	`Ârötf
(
°dîr
, "badárgument for '--lba'\n");

306  
SG_LIB_SYNTAX_ERROR
;

308 
lba
 = ()
k
;

311 ++
vîbo£
;

314 
	`Ârötf
(
°dîr
, "vîsi⁄: %s\n", 
vîsi⁄_°r
);

317 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê0x%x ??\n", 
c
);

318 
	`ußge
();

319  
SG_LIB_SYNTAX_ERROR
;

322 i‡(
›töd
 < 
¨gc
) {

323 i‡(
NULL
 =
devi˚_«me
) {

324 
devi˚_«me
 = 
¨gv
[
›töd
];

325 ++
›töd
;

327 i‡(
›töd
 < 
¨gc
) {

328 ; 
›töd
 < 
¨gc
; ++optind)

329 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

330 
¨gv
[
›töd
]);

331 
	`ußge
();

332  
SG_LIB_SYNTAX_ERROR
;

336 i‡(
NULL
 =
devi˚_«me
) {

337 
	`Ârötf
(
°dîr
, "missing deviceÇame!\n");

338 
	`ußge
();

342 i‡((
lba
 > 0xffffffË&& (12 =
cdb_Àn
)) {

343 
cdb_Àn
 = 16;

344 i‡(
vîbo£
)

345 
	`Ârötf
(
°dîr
, "SinceÜba > 0xffffff, forcing cdbÜengthÅo "

349 i‡((
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 0 ,

350 
vîbo£
)) < 0) {

351 
	`Ârötf
(
°dîr
, "error opening file: %s: %s\n",

352 
devi˚_«me
, 
	`ß„_°ªº‹
(-
sg_fd
));

353  
SG_LIB_FILE_ERROR
;

356 
ªt
 = 
	`do_£t_„©uªs
(
sg_fd
, 
„©uª
, 
cou¡
, 
lba
, 
cdb_Àn
, 
ck_c⁄d
,

357 
vîbo£
);

359 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

360 i‡(
ªs
 < 0) {

361 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

362 i‡(0 =
ªt
)

363  
SG_LIB_FILE_ERROR
;

365  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

366 
	}
}

	@src/sg_scan.c

26 #ifde‡
HAVE_CONFIG_H


27 
	~"c⁄fig.h
"

31 #i‚de‡
_GNU_SOURCE


32 
	#_GNU_SOURCE


	)

35 
	~<uni°d.h
>

36 
	~<f˙é.h
>

37 
	~<°dio.h
>

38 
	~<°dlib.h
>

39 
	~<°rög.h
>

40 
	~<˘y≥.h
>

41 
	~<î∫o.h
>

42 
	~<dúít.h
>

43 
	~<libgí.h
>

44 
	~<sys/io˘l.h
>

45 
	~<sys/ty≥s.h
>

46 
	~<sys/°©.h
>

47 
	~<scsi/scsi_io˘l.h
>

49 
	~"sg_lib.h
"

50 
	~"sg_io_löux.h
"

53 c⁄° * 
	gvîsi⁄_°r
 = "4.10 20130507";

55 
	#ME
 "sg_sˇn: "

	)

57 
	#NUMERIC_SCAN_DEF
 1

	)

59 
	#INQ_REPLY_LEN
 36

	)

60 
	#INQ_CMD_LEN
 6

	)

61 
	#MAX_ERRORS
 4

	)

63 
	#EBUFF_SZ
 256

	)

64 
	#FNAME_SZ
 64

	)

65 
	#PRESENT_ARRAY_SIZE
 8192

	)

67 c⁄° * 
	gsysfs_sg_dú
 = "/sys/class/scsi_generic";

68 * 
	ggí_ödex_¨r
;

70 
	smy_scsi_idlun
 {

72 
	mdev_id
;

73 
	mho°_unique_id
;

74 } 
	tMy_scsi_idlun
;

76 
	smy_sg_scsi_id
 {

77 
	mho°_no
;

78 
	mch™√l
;

79 
	mscsi_id
;

80 
	mlun
;

81 
	mscsi_ty≥
;

82 
	mh_cmd_≥r_lun
;

83 
	md_queue_dïth
;

84 
	munu£d1
;

85 
	munu£d2
;

86 } 
	tMy_sg_scsi_id
;

88 
sg3_öq
(
sg_fd
, * 
öqBuff
, 
do_exåa
);

89 
scsi_öq
(
sg_fd
, * 
öqBuff
);

90 
åy_©a_idítôy
(c⁄° * 
fûe_«mï
, 
©a_fd
, 
do_öq
);

92 
	göqCmdBlk
[
INQ_CMD_LEN
] =

93 {0x12, 0, 0, 0, 
INQ_REPLY_LEN
, 0};

96 
	$ußge
()

98 
	`¥ötf
("Usage: sg_scan [-a] [-i] [-n] [-v] [-V] [-w] [-x] "

100 
	`¥ötf
(" where:\n");

101 
	`¥ötf
(" -a doálpha scan (ie sga, sgb, sgc)\n");

102 
	`¥ötf
(" -i do SCSI INQUIRY, outputÑesults\n");

103 
	`¥ötf
(" -n doÇumeric scan (ie sg0, sg1...) [default]\n");

104 
	`¥ötf
(" -v increase verbosity\n");

105 
	`¥ötf
(" -V output version stringÅhenÉxit\n");

106 
	`¥ötf
(" -w force open withÑead/write flag\n");

107 
	`¥ötf
(" -xÉxtra information outputábout queuing\n");

108 
	`¥ötf
(" DEVICEÇame of device\n");

109 
	}
}

111 
	$sˇndú_£À˘
(c⁄° 
dúít
 * 
s
)

113 
k
;

115 i‡(1 =
	`ssˇnf
(
s
->
d_«me
, "sg%d", &
k
)) {

116 i‡((
k
 >0Ë&& (k < 
PRESENT_ARRAY_SIZE
)) {

117 
gí_ödex_¨r
[
k
] = 1;

122 
	}
}

124 
	$sysfs_sg_sˇn
(c⁄° * 
dú_«me
)

126 
dúít
 ** 
«mñi°
;

127 
num
, 
k
;

129 
num
 = 
	`sˇndú
(
dú_«me
, &
«mñi°
, 
sˇndú_£À˘
, 
NULL
);

130 i‡(
num
 < 0)

131  -
î∫o
;

132 
k
 = 0; k < 
num
; ++k)

133 
	`‰ì
(
«mñi°
[
k
]);

134 
	`‰ì
(
«mñi°
);

135  
num
;

136 
	}
}

138 
	$make_dev_«me
(* 
‚ame
, 
k
, 
do_numîic
)

140 
buff
[
FNAME_SZ
];

141 
big
,
lôée
;

143 
	`°r˝y
(
‚ame
, "/dev/sg");

144 i‡(
do_numîic
) {

145 
	`¢¥ötf
(
buff
, (buff), "%d", 
k
);

146 
	`°rˇt
(
‚ame
, 
buff
);

149 i‡(
k
 < 26) {

150 
buff
[0] = 'a' + ()
k
;

151 
buff
[1] = '\0';

152 
	`°rˇt
(
‚ame
, 
buff
);

154 i‡(
k
 <= 255) {

155 
big
 = 
k
/26;

156 
lôée
 = 
k
 - (26 * 
big
);

157 
big
 = big - 1;

159 
buff
[0] = 'a' + ()
big
;

160 
buff
[1] = 'a' + ()
lôée
;

161 
buff
[2] = '\0';

162 
	`°rˇt
(
‚ame
, 
buff
);

165 
	`°rˇt
(
‚ame
, "xxxx");

167 
	}
}

170 
	$maö
(
¨gc
, * 
¨gv
[])

172 
sg_fd
, 
ªs
, 
k
, 
j
, 
f
, 
∂í
, 
jmp_out
;

173 
öqBuff
[
INQ_REPLY_LEN
];

174 
do_numîic
 = 
NUMERIC_SCAN_DEF
;

175 
do_öquúy
 = 0;

176 
do_exåa
 = 0;

177 
vîbo£
 = 0;

178 
wrôóbÀ
 = 0;

179 
num_îr‹s
 = 0;

180 
num_sûít
 = 0;

181 
sg_vî3
 = -1;

182 
óc˚s_îr
 = 0;

183 
‚ame
[
FNAME_SZ
];

184 * 
fûe_«mï
;

185 
ebuff
[
EBUFF_SZ
];

186 
My_scsi_idlun
 
my_idlun
;

187 
ho°_no
;

188 
Êags
;

189 
emul
 = -1;

190 
has_fûe_¨gs
 = 0;

191 
has_sysfs_sg
 = 0;

192 c⁄° 
max_fûe_¨gs
 = 
PRESENT_ARRAY_SIZE
;

193 c⁄° * 
˝
;

194 
°©
 
a_°©
;

196 i‡(
NULL
 =(
gí_ödex_¨r
 =

197 (*)
	`ˇŒoc
(
max_fûe_¨gs
 + 1, ()))) {

198 
	`¥ötf
(
ME
 "Out of memory\n");

199  
SG_LIB_CAT_OTHER
;

202 
k
 = 1, 
j
 = 0; k < 
¨gc
; ++k) {

203 
˝
 = 
¨gv
[
k
];

204 
∂í
 = 
	`°æí
(
˝
);

205 i‡(
∂í
 <= 0)

207 i‡('-' =*
˝
) {

208 --
∂í
, ++
˝
, 
jmp_out
 = 0;Ölen > 0; --plen, ++cp) {

209 *
˝
) {

211 
do_numîic
 = 0;

215 
	`¥ötf
("Scan sg deviceÇamesánd optionally doán "

217 
	`ußge
();

220 
do_öquúy
 = 1;

223 
do_numîic
 = 1;

226 ++
vîbo£
;

229 
	`Ârötf
(
°dîr
, "Vîsi⁄ såög: %s\n", 
vîsi⁄_°r
);

230 
	`exô
(0);

232 
wrôóbÀ
 = 1;

235 
do_exåa
 = 1;

238 
jmp_out
 = 1;

241 i‡(
jmp_out
)

244 i‡(
∂í
 <= 0)

246 i‡(
jmp_out
) {

247 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄: %s\n", 
˝
);

248 
	`ußge
();

249  
SG_LIB_SYNTAX_ERROR
;

252 i‡(
j
 < 
max_fûe_¨gs
) {

253 
has_fûe_¨gs
 = 1;

254 
gí_ödex_¨r
[
j
++] = 
k
;

256 
	`¥ötf
("Too many commandÜineárguments\n");

257  
SG_LIB_SYNTAX_ERROR
;

262 i‡((! 
has_fûe_¨gs
Ë&& (
	`°©
(
sysfs_sg_dú
, &
a_°©
) >= 0) &&

263 (
	`S_ISDIR
(
a_°©
.
°_mode
)))

264 
has_sysfs_sg
 = 
	`sysfs_sg_sˇn
(
sysfs_sg_dú
);

266 
Êags
 = 
O_NONBLOCK
 | (
wrôóbÀ
 ? 
O_RDWR
 : 
O_RDONLY
);

268 
k
 = 0, 
ªs
 = 0, 
j
 = 0, 
sg_fd
 = -1;

269 (
k
 < 
max_fûe_¨gs
Ë&& (
has_fûe_¨gs
 || (
num_îr‹s
 < 
MAX_ERRORS
));

270 ++
k
, 
ªs
 = ((
sg_fd
 >0Ë? 
	`˛o£
(sg_fd) : 0)) {

271 i‡(
ªs
 < 0) {

272 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, 
ME
 "Eº‹ closög %†", 
‚ame
);

273 
	`≥º‹
(
ebuff
);

274  
SG_LIB_FILE_ERROR
;

276 i‡(
has_fûe_¨gs
) {

277 i‡(
gí_ödex_¨r
[
j
])

278 
fûe_«mï
 = 
¨gv
[
gí_ödex_¨r
[
j
++]];

281 } i‡(
has_sysfs_sg
) {

282 i‡(0 =
gí_ödex_¨r
[
k
]) {

283 
sg_fd
 = -1;

286 
	`make_dev_«me
(
‚ame
, 
k
, 1);

287 
fûe_«mï
 = 
‚ame
;

289 
	`make_dev_«me
(
‚ame
, 
k
, 
do_numîic
);

290 
fûe_«mï
 = 
‚ame
;

293 
sg_fd
 = 
	`›í
(
fûe_«mï
, 
Êags
);

294 i‡(
sg_fd
 < 0) {

295 i‡(
EBUSY
 =
î∫o
) {

296 
	`¥ötf
("%s: device busy (O_EXCLÜock), skipping\n",

297 
fûe_«mï
);

300 i‡((
ENODEV
 =
î∫o
Ë|| (
ENOENT
 ==Érrno) ||

301 (
ENXIO
 =
î∫o
)) {

302 i‡(
vîbo£
)

303 
	`Ârötf
(
°dîr
, "UnableÅo open: %s,Érrno=%d\n",

304 
fûe_«mï
, 
î∫o
);

305 ++
num_îr‹s
;

306 ++
num_sûít
;

310 i‡(
EACCES
 =
î∫o
)

311 
óc˚s_îr
 = 1;

312 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, 
ME
 "Eº‹ o≥nög %†", 
fûe_«mï
);

313 
	`≥º‹
(
ebuff
);

314 ++
num_îr‹s
;

318 
ªs
 = 
	`io˘l
(
sg_fd
, 
SCSI_IOCTL_GET_IDLUN
, &
my_idlun
);

319 i‡(
ªs
 < 0) {

320 
ªs
 = 
	`åy_©a_idítôy
(
fûe_«mï
, 
sg_fd
, 
do_öquúy
);

321 i‡(
ªs
 == 0)

323 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, 
ME
 "device %s failed on scsi+ata "

324 "io˘l, skù", 
fûe_«mï
);

325 
	`≥º‹
(
ebuff
);

326 ++
num_îr‹s
;

329 
ªs
 = 
	`io˘l
(
sg_fd
, 
SCSI_IOCTL_GET_BUS_NUMBER
, &
ho°_no
);

330 i‡(
ªs
 < 0) {

331 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, 
ME
 "device %s failed on scsi "

332 "io˘l(2), skù", 
fûe_«mï
);

333 
	`≥º‹
(
ebuff
);

334 ++
num_îr‹s
;

337 
ªs
 = 
	`io˘l
(
sg_fd
, 
SG_EMULATED_HOST
, &
emul
);

338 i‡(
ªs
 < 0)

339 
emul
 = -1;

340 
	`¥ötf
("%s: scsi%d ch™√l=%d id=%dÜun=%d", 
fûe_«mï
, 
ho°_no
,

341 (
my_idlun
.
dev_id
 >> 16) & 0xff, my_idlun.dev_id & 0xff,

342 (
my_idlun
.
dev_id
 >> 8) & 0xff);

343 i‡(1 =
emul
)

344 
	`¥ötf
(" [em]");

346 
	`¥ötf
(", huid=%d", 
my_idlun
.
ho°_unique_id
);

348 i‡(! 
has_fûe_¨gs
) {

349 
My_sg_scsi_id
 
m_id
;

351 
ªs
 = 
	`io˘l
(
sg_fd
, 
SG_GET_SCSI_ID
, &
m_id
);

352 i‡(
ªs
 < 0) {

353 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, 
ME
 "device %s failed "

354 "SG_GET_SCSI_ID io˘l(4), skù", 
fûe_«mï
);

355 
	`≥º‹
(
ebuff
);

356 ++
num_îr‹s
;

360 i‡(
do_exåa
)

361 
	`¥ötf
(" cmd_per_lun=%hd queue_depth=%hd\n",

362 
m_id
.
h_cmd_≥r_lun
, m_id.
d_queue_dïth
);

364 
	`¥ötf
("\n");

367 
	`¥ötf
("\n");

368 i‡(
do_öquúy
) {

369 i‡(-1 =
sg_vî3
) {

370 
sg_vî3
 = 0;

371 i‡((
	`io˘l
(
sg_fd
, 
SG_GET_VERSION_NUM
, &
f
) >= 0) &&

372 (
f
 >= 30000))

373 
sg_vî3
 = 1;

375 i‡(1 =
sg_vî3
)

376 
ªs
 = 
	`sg3_öq
(
sg_fd
, 
öqBuff
, 
do_exåa
);

379 i‡((
num_îr‹s
 >
MAX_ERRORS
Ë&& (
num_sûít
 <Çum_errors) &&

380 (! 
has_fûe_¨gs
)) {

381 
	`¥ötf
("Stopping becauseÅhereáreÅoo manyÉrror\n");

382 i‡(
óc˚s_îr
)

383 
	`¥ötf
("Ñootáccess may beÑequired\n");

386 
	}
}

388 
	$sg3_öq
(
sg_fd
, * 
öqBuff
, 
do_exåa
)

390 
sg_io_hdr
 
io_hdr
;

391 
£n£_buf„r
[32];

392 
ok
, 
îr
, 
sg_io
;

394 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr
));

395 
	`mem£t
(
öqBuff
, 0, 
INQ_REPLY_LEN
);

396 
öqBuff
[0] = 0x7f;

397 
io_hdr
.
öãrÁ˚_id
 = 'S';

398 
io_hdr
.
cmd_Àn
 = (
öqCmdBlk
);

399 
io_hdr
.
mx_sb_Àn
 = (
£n£_buf„r
);

400 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

401 
io_hdr
.
dx„r_Àn
 = 
INQ_REPLY_LEN
;

402 
io_hdr
.
dx„Ω
 = 
öqBuff
;

403 
io_hdr
.
cmdp
 = 
öqCmdBlk
;

404 
io_hdr
.
sbp
 = 
£n£_buf„r
;

405 
io_hdr
.
timeout
 = 20000;

407 
ok
 = 1;

408 
sg_io
 = 0;

409 i‡(
	`io˘l
(
sg_fd
, 
SG_IO
, &
io_hdr
) < 0) {

410 i‡((
îr
 = 
	`scsi_öq
(
sg_fd
, 
öqBuff
)) < 0) {

411 
	`≥º‹
(
ME
 "Inquiry SG_IO + SCSI_IOCTL_SEND_COMMAND ioctlÉrror");

413 } i‡(
îr
) {

414 
	`¥ötf
(
ME
 "SCSI_IOCTL_SEND_COMMAND io˘»îr‹=0x%x\n", 
îr
);

418 
sg_io
 = 1;

420 
	`sg_îr_ˇãg‹y3
(&
io_hdr
)) {

421 
SG_LIB_CAT_RECOVERED
:

422 
	`sg_chk_n_¥öt3
("Inquúy, c⁄töuög", &
io_hdr
, 1);

424 
SG_LIB_CAT_CLEAN
:

427 
ok
 = 0;

428 
	`sg_chk_n_¥öt3
("INQUIRY comm™dÉº‹", &
io_hdr
, 1);

433 i‡(
ok
) {

434 * 
p
 = (*)
öqBuff
;

436 
	`¥ötf
(" %.8† %.16† %.4†", 
p
 + 8,Ö + 16,Ö + 32);

437 
	`¥ötf
("[rmb=%d cmdq=%dÖqual=%dÖdev=0x%x] ",

438 !!(
p
[1] & 0x80), !!(p[7] & 2), (p[0] & 0xe0) >> 5,

439 (
p
[0] & 0x1f));

440 i‡(
do_exåa
 && 
sg_io
)

441 
	`¥ötf
("dur=%ums\n", 
io_hdr
.
duøti⁄
);

443 
	`¥ötf
("\n");

446 
	}
}

448 
	slscsi_io˘l_comm™d
 {

449 
	möÀn
;

450 
	mouéí
;

451 
	md©a
[1];

456 
	$scsi_öq
(
sg_fd
, * 
öqBuff
)

458 
ªs
;

459 
buff
[512];

460 
lscsi_io˘l_comm™d
 * 
si˝
 = (lscsi_io˘l_comm™d *)
buff
;

462 
	`mem£t
(
buff
, 0, (buff));

463 
si˝
->
öÀn
 = 0;

464 
si˝
->
ouéí
 = 
INQ_REPLY_LEN
;

465 
	`mem˝y
(
si˝
->
d©a
, 
öqCmdBlk
, 
INQ_CMD_LEN
);

466 
ªs
 = 
	`io˘l
(
sg_fd
, 
SCSI_IOCTL_SEND_COMMAND
, 
si˝
);

467 i‡(0 =
ªs
)

468 
	`mem˝y
(
öqBuff
, 
si˝
->
d©a
, 
INQ_REPLY_LEN
);

469  
ªs
;

470 
	}
}

478 #i‚de‡
ATA_IDENTIFY_DEVICE


479 
	#ATA_IDENTIFY_DEVICE
 0xec

	)

481 #i‚de‡
HDIO_DRIVE_CMD


482 
	#HDIO_DRIVE_CMD
 0x031f

	)

488 
	s©a_idítify_devi˚
 {

489 
	mw‹ds000_009
[10];

490 
	m£rül_no
[20];

491 
	mw‹ds020_022
[3];

492 
	mfw_ªv
[8];

493 
	mmodñ
[40];

494 
	mw‹ds047_079
[33];

495 
	mmaj‹_ªv_num
;

496 
	mmö‹_ªv_num
;

497 
	mcomm™d_£t_1
;

498 
	mcomm™d_£t_2
;

499 
	mcomm™d_£t_exãnsi⁄
;

500 
	mcfs_íabÀ_1
;

501 
	mw‹d086
;

502 
	mcsf_deÁu…
;

503 
	mw‹ds088_255
[168];

509 
	$sw≠byãs
(*
out
, c⁄° *
ö
, 
size_t
 
n
)

511 
size_t
 
k
;

513 i‡(
n
 > 1) {

514 
k
 = 0; k < (
n
 - 1); k += 2) {

515 
out
[
k
] = 
ö
[k + 1];

516 
out
[
k
 + 1] = 
ö
[k];

519 
	}
}

522 
	$åim
(*
out
, c⁄° *
ö
)

524 
k
, 
fú°
, 
œ°
;

527 
fú°
 = -1;

528 
k
 = 0; 
ö
[k]; k++) {

529 i‡(! 
	`is•a˚
(()
ö
[
k
])) {

530 
fú°
 = 
k
;

535 i‡(
fú°
 == -1) {

537 
out
[0] = '\0';

542 
k
 = 
	`°æí
(
ö
Ë- 1; k >
fú°
 && 
	`is•a˚
(()in[k]); k--)

544 
œ°
 = 
k
;

545 
	`°∫˝y
(
out
, 
ö
 + 
fú°
, 
œ°
 - first + 1);

546 
out
[
œ°
 - 
fú°
 + 1] = '\0';

547 
	}
}

550 
	$f‹m©driveid°rög
(*
out
, c⁄° *
ö
, 
n
)

552 
tmp
[65];

554 
n
 =Ç > 64 ? 64 :Ç;

555 
	`sw≠byãs
(
tmp
, 
ö
, 
n
);

556 
tmp
[
n
] = '\0';

557 
	`åim
(
out
, 
tmp
);

558 
	}
}

564 
	$¥ötsw≠
(*
ouçut
, *
ö
, 
n
)

566 
	`f‹m©driveid°rög
(
ouçut
, 
ö
, 
n
);

567 i‡(*
ouçut
)

568 
	`¥ötf
("%.*† ", ()
n
, 
ouçut
);

570 
	`¥ötf
("%.*† ", ()
n
, "[No Information Found]\n");

571 
	}
}

573 
	#ATA_IDENTIFY_BUFF_SZ
 (
©a_idítify_devi˚
)

	)

574 
	#HDIO_DRIVE_CMD_OFFSET
 4

	)

576 
	$©a_comm™d_öãrÁ˚
(
devi˚
, *
d©a
)

578 
buff
[
ATA_IDENTIFY_BUFF_SZ
 + 
HDIO_DRIVE_CMD_OFFSET
];

579 
ªtvÆ
;

581 
buff
[0] = 
ATA_IDENTIFY_DEVICE
;

582 
buff
[3] = 1;

584 i‡((
ªtvÆ
 = 
	`io˘l
(
devi˚
, 
HDIO_DRIVE_CMD
, 
buff
)))

585  
ªtvÆ
;

588 
	`mem˝y
(
d©a
, 
buff
 + 
HDIO_DRIVE_CMD_OFFSET
, 
ATA_IDENTIFY_BUFF_SZ
);

590 
	}
}

592 
	$åy_©a_idítôy
(c⁄° * 
fûe_«mï
, 
©a_fd
, 
do_öq
)

594 
©a_idítify_devi˚
 
©a_idít
;

595 
modñ
[64];

596 
£rül
[64];

597 
fúm
[64];

598 
ªs
;

600 
ªs
 = 
	`©a_comm™d_öãrÁ˚
(
©a_fd
, (*)&
©a_idít
);

601 i‡(
ªs
)

602  
ªs
;

603 
	`¥ötf
("%s: ATA devi˚\n", 
fûe_«mï
);

604 i‡(
do_öq
) {

605 
	`¥ötf
(" ");

606 
	`¥ötsw≠
(
modñ
, (*)
©a_idít
.model, 40);

607 
	`¥ötsw≠
(
£rül
, (*)
©a_idít
.
£rül_no
, 20);

608 
	`¥ötsw≠
(
fúm
, (*)
©a_idít
.
fw_ªv
, 8);

609 
	`¥ötf
("\n");

611  
ªs
;

612 
	}
}

	@src/sg_senddiag.c

12 
	~<uni°d.h
>

13 
	~<f˙é.h
>

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

17 
	~<˘y≥.h
>

18 
	~<gë›t.h
>

20 #ifde‡
HAVE_CONFIG_H


21 
	~"c⁄fig.h
"

23 
	~"sg_lib.h
"

24 
	~"sg_cmds_basic.h
"

25 
	~"sg_cmds_exåa.h
"

27 c⁄° * 
	gvîsi⁄_°r
 = "0.38 20130507";

29 
	#ME
 "sg_£nddüg: "

	)

31 
	#MX_ALLOC_LEN
 (1024 * 4)

	)

33 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

51 
	s›ts_t
 {

52 
	mdo_doff
;

53 
	mdo_extdur
;

54 
	mdo_hñp
;

55 
	mdo_hex
;

56 
	mdo_li°
;

57 
	mdo_pf
;

58 
	mdo_øw
;

59 
	mdo_£l·e°
;

60 
	mdo_de·e°
;

61 
	mdo_uoff
;

62 
	mdo_vîbo£
;

63 
	mdo_vîsi⁄
;

64 c⁄° * 
	mdevi˚_«me
;

65 c⁄° * 
	møw_¨g
;

66 
	m›t_√w
;

69 
	$ußge
()

71 
	`¥ötf
("Usage: sg_senddiag [--doff] [--extdur] [--help] [--hex] "

103 
	}
}

105 
	$ußge_ﬁd
()

107 
	`¥ötf
("Usage: sg_senddiag [-doff] [-e] [-h] [-H] [-l] [-pf]"

134 
	}
}

136 
	$¥o˚ss_˛_√w
(
›ts_t
 * 
›t•
, 
¨gc
, * 
¨gv
[])

138 
c
, 
n
;

141 
›ti⁄_ödex
 = 0;

143 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "dehHlNO¥:s:tuvV", 
l⁄g_›ti⁄s
,

144 &
›ti⁄_ödex
);

145 i‡(
c
 == -1)

148 
c
) {

150 
›t•
->
do_doff
 = 1;

153 
›t•
->
do_extdur
 = 1;

157 ++
›t•
->
do_hñp
;

160 ++
›t•
->
do_hex
;

163 ++
›t•
->
do_li°
;

168 
›t•
->
›t_√w
 = 0;

171 
›t•
->
do_pf
 = 1;

174 
›t•
->
øw_¨g
 = 
›èrg
;

175 
›t•
->
do_øw
 = 1;

178 
n
 = 
	`sg_gë_num
(
›èrg
);

179 i‡((
n
 < 0) || (n > 7)) {

180 
	`Ârötf
(
°dîr
, "badárgumentÅo '--selftest='\n");

181 
	`ußge
();

182  
SG_LIB_SYNTAX_ERROR
;

184 
›t•
->
do_£l·e°
 = 
n
;

187 
›t•
->
do_de·e°
 = 1;

190 
›t•
->
do_uoff
 = 1;

193 ++
›t•
->
do_vîbo£
;

196 ++
›t•
->
do_vîsi⁄
;

199 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê%¯[0x%x]\n", 
c
, c);

200 i‡(
›t•
->
do_hñp
)

202 
	`ußge
();

203  
SG_LIB_SYNTAX_ERROR
;

206 i‡(
›töd
 < 
¨gc
) {

207 i‡(
NULL
 =
›t•
->
devi˚_«me
) {

208 
›t•
->
devi˚_«me
 = 
¨gv
[
›töd
];

209 ++
›töd
;

211 i‡(
›töd
 < 
¨gc
) {

212 ; 
›töd
 < 
¨gc
; ++optind)

213 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

214 
¨gv
[
›töd
]);

215 
	`ußge
();

216  
SG_LIB_SYNTAX_ERROR
;

220 
	}
}

222 
	$¥o˚ss_˛_ﬁd
(
›ts_t
 * 
›t•
, 
¨gc
, * 
¨gv
[])

224 
k
, 
jmp_out
, 
∂í
, 
num
;

225 
u
;

226 c⁄° * 
˝
;

228 
k
 = 1; k < 
¨gc
; ++k) {

229 
˝
 = 
¨gv
[
k
];

230 
∂í
 = 
	`°æí
(
˝
);

231 i‡(
∂í
 <= 0)

233 i‡('-' =*
˝
) {

234 --
∂í
, ++
˝
, 
jmp_out
 = 0;Ölen > 0; --plen, ++cp) {

235 *
˝
) {

237 i‡(0 =
	`°∫cmp
("doff", 
˝
, 4)) {

238 
›t•
->
do_doff
 = 1;

239 
˝
 += 3;

240 
∂í
 -= 3;

242 
jmp_out
 = 1;

245 
›t•
->
do_extdur
 = 1;

249 ++
›t•
->
do_hex
;

252 ++
›t•
->
do_li°
;

255 
›t•
->
›t_√w
 = 1;

260 i‡(0 =
	`°∫cmp
("pf", 
˝
, 2)) {

261 
›t•
->
do_pf
 = 1;

262 ++
˝
;

263 --
∂í
;

265 
jmp_out
 = 1;

268 
›t•
->
do_de·e°
 = 1;

271 i‡(0 =
	`°∫cmp
("uoff", 
˝
, 4)) {

272 
›t•
->
do_uoff
 = 1;

273 
˝
 += 3;

274 
∂í
 -= 3;

276 
jmp_out
 = 1;

279 ++
›t•
->
do_vîbo£
;

282 ++
›t•
->
do_vîsi⁄
;

285 ++
›t•
->
do_hñp
;

288 
jmp_out
 = 1;

291 i‡(
jmp_out
)

294 i‡(
∂í
 <= 0)

296 i‡(0 =
	`°∫cmp
("øw=", 
˝
, 4)) {

297 
›t•
->
øw_¨g
 = 
˝
 + 4;

298 
›t•
->
do_øw
 = 1;

299 } i‡(0 =
	`°∫cmp
("s=", 
˝
, 2)) {

300 
num
 = 
	`ssˇnf
(
˝
 + 2, "%x", &
u
);

301 i‡((1 !
num
Ë|| (
u
 > 7)) {

302 
	`¥ötf
("BadÖage codeáfter '-s=' option\n");

303 
	`ußge_ﬁd
();

304  
SG_LIB_SYNTAX_ERROR
;

306 
›t•
->
do_£l·e°
 = 
u
;

307 } i‡(0 =
	`°∫cmp
("-ﬁd", 
˝
, 5))

309 i‡(
jmp_out
) {

310 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄: %s\n", 
˝
);

311 
	`ußge_ﬁd
();

312  
SG_LIB_SYNTAX_ERROR
;

314 } i‡(0 =
›t•
->
devi˚_«me
)

315 
›t•
->
devi˚_«me
 = 
˝
;

317 
	`Ârötf
(
°dîr
, "too manyárguments, got: %s,ÇotÉxpecting: "

318 "%s\n", 
›t•
->
devi˚_«me
, 
˝
);

319 
	`ußge_ﬁd
();

320  
SG_LIB_SYNTAX_ERROR
;

324 
	}
}

326 
	$¥o˚ss_˛
(
›ts_t
 * 
›t•
, 
¨gc
, * 
¨gv
[])

328 
ªs
;

329 * 
˝
;

331 
˝
 = 
	`gëív
("SG3_UTILS_OLD_OPTS");

332 i‡(
˝
) {

333 
›t•
->
›t_√w
 = 0;

334 
ªs
 = 
	`¥o˚ss_˛_ﬁd
(
›t•
, 
¨gc
, 
¨gv
);

335 i‡((0 =
ªs
Ë&& 
›t•
->
›t_√w
)

336 
ªs
 = 
	`¥o˚ss_˛_√w
(
›t•
, 
¨gc
, 
¨gv
);

338 
›t•
->
›t_√w
 = 1;

339 
ªs
 = 
	`¥o˚ss_˛_√w
(
›t•
, 
¨gc
, 
¨gv
);

340 i‡((0 =
ªs
Ë&& (0 =
›t•
->
›t_√w
))

341 
ªs
 = 
	`¥o˚ss_˛_ﬁd
(
›t•
, 
¨gc
, 
¨gv
);

343  
ªs
;

344 
	}
}

347 
	$do_£nddüg
(
sg_fd
, 
sf_code
, 
pf_bô
, 
sf_bô
,

348 
devoÊ_bô
, 
unôoÊ_bô
, * 
outgoög_pg
,

349 
outgoög_Àn
, 
noisy
, 
vîbo£
)

351 
l⁄g_duøti⁄
 = 0;

353 i‡((0 =
sf_bô
Ë&& ((5 =
sf_code
) || (6 == sf_code)))

354 
l⁄g_duøti⁄
 = 1;

355  
	`sg_Œ_£nd_düg
(
sg_fd
, 
sf_code
, 
pf_bô
, 
sf_bô
, 
devoÊ_bô
,

356 
unôoÊ_bô
, 
l⁄g_duøti⁄
, 
outgoög_pg
,

357 
outgoög_Àn
, 
noisy
, 
vîbo£
);

358 
	}
}

361 
	$do_modes_0a
(
sg_fd
, * 
ª•
, 
mx_ª•_Àn
, 
noisy
,

362 
mode6
, 
vîbo£
)

364 
ªs
;

366 i‡(
mode6
)

367 
ªs
 = 
	`sg_Œ_mode_£n£6
(
sg_fd
, 1 , 0 , 0xa ,

368 0, 
ª•
, 
mx_ª•_Àn
, 
noisy
, 
vîbo£
);

370 
ªs
 = 
	`sg_Œ_mode_£n£10
(
sg_fd
, 0 , 1 , 0, 0xa, 0,

371 
ª•
, 
mx_ª•_Àn
, 
noisy
, 
vîbo£
);

372 i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

373 
	`Ârötf
(
°dîr
, "Mode sense (%s) commandÇot supported\n",

374 (
mode6
 ? "6" : "10"));

375 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

376 
	`Ârötf
(
°dîr
, "bad field in Mode sense (%s) command\n",

377 (
mode6
 ? "6" : "10"));

378 i‡(
SG_LIB_CAT_NOT_READY
 =
ªs
)

379 
	`Ârötf
(
°dîr
, "Mode sense (%s) failed, deviceÇotÑeady\n",

380 (
mode6
 ? "6" : "10"));

381 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
)

382 
	`Ârötf
(
°dîr
, "Mode sense (%s) failed, unitáttention\n",

383 (
mode6
 ? "6" : "10"));

384 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

385 
	`Ârötf
(
°dîr
, "Mode sense (%s) failed,áborted command\n",

386 (
mode6
 ? "6" : "10"));

387  
ªs
;

388 
	}
}

393 
	$buûd_düg_∑ge
(c⁄° * 
öp
, * 
mp_¨r
,

394 * 
mp_¨r_Àn
, 
max_¨r_Àn
)

396 
ö_Àn
, 
k
, 
j
, 
m
;

397 
h
;

398 c⁄° * 
l˝
;

399 * 
˝
;

400 * 
c2p
;

402 i‡((
NULL
 =
öp
Ë|| (NULL =
mp_¨r
) ||

403 (
NULL
 =
mp_¨r_Àn
))

405 
l˝
 = 
öp
;

406 
ö_Àn
 = 
	`°æí
(
öp
);

407 i‡(0 =
ö_Àn
)

408 *
mp_¨r_Àn
 = 0;

409 i‡('-' =
öp
[0]) {

410 
löe
[512];

411 
off
 = 0;

413 
j
 = 0; j < 512; ++j) {

414 i‡(
NULL
 =
	`fgës
(
löe
, ÷öe), 
°dö
))

416 
ö_Àn
 = 
	`°æí
(
löe
);

417 i‡(
ö_Àn
 > 0) {

418 i‡('\n' =
löe
[
ö_Àn
 - 1]) {

419 --
ö_Àn
;

420 
löe
[
ö_Àn
] = '\0';

423 i‡(0 =
ö_Àn
)

425 
l˝
 = 
löe
;

426 
m
 = 
	`°r•n
(
l˝
, " \t");

427 i‡(
m
 =
ö_Àn
)

429 
l˝
 +
m
;

430 
ö_Àn
 -
m
;

431 i‡('#' =*
l˝
)

433 
k
 = 
	`°r•n
(
l˝
, "0123456789aAbBcCdDeEfF ,\t");

434 i‡((
k
 < 
ö_Àn
Ë&& ('#' !
l˝
[k])) {

435 
	`Ârötf
(
°dîr
, "build_diag_page: syntaxÉrrorát "

436 "löê%d,Öo†%d\n", 
j
 + 1, 
m
 + 
k
 + 1);

439 
k
 = 0; k < 1024; ++k) {

440 i‡(1 =
	`ssˇnf
(
l˝
, "%x", &
h
)) {

441 i‡(
h
 > 0xff) {

442 
	`Ârötf
(
°dîr
, "build_diag_page: hexÇumber "

444 
j
 + 1, ()(
l˝
 - 
löe
 + 1));

447 i‡((
off
 + 
k
Ë>
max_¨r_Àn
) {

448 
	`Ârötf
(
°dîr
, "build_diag_page:árrayÜength "

452 
mp_¨r
[
off
 + 
k
] = 
h
;

453 
l˝
 = 
	`°Ωbrk
(lcp, " ,\t");

454 i‡(
NULL
 =
l˝
)

456 
l˝
 +
	`°r•n
(lcp, " ,\t");

457 i‡('\0' =*
l˝
)

460 i‡('#' =*
l˝
) {

461 --
k
;

464 
	`Ârötf
(
°dîr
, "build_diag_page:Érror in "

465 "löê%d,áàpo†%d\n", 
j
 + 1,

466 ()(
l˝
 - 
löe
 + 1));

470 
off
 +(
k
 + 1);

472 *
mp_¨r_Àn
 = 
off
;

474 
k
 = 
	`°r•n
(
öp
, "0123456789aAbBcCdDeEfF, ");

475 i‡(
ö_Àn
 !
k
) {

476 
	`Ârötf
(
°dîr
, "buûd_düg_∑ge:Éº‹áàpo†%d\n", 
k
 + 1);

479 
k
 = 0; k < 
max_¨r_Àn
; ++k) {

480 i‡(1 =
	`ssˇnf
(
l˝
, "%x", &
h
)) {

481 i‡(
h
 > 0xff) {

482 
	`Ârötf
(
°dîr
, "build_diag_page: hexÇumberÜarger "

483 "th™ 0xf‡©Öo†%d\n", ()(
l˝
 - 
öp
 + 1));

486 
mp_¨r
[
k
] = 
h
;

487 
˝
 = (*)
	`°rchr
(
l˝
, ',');

488 
c2p
 = (*)
	`°rchr
(
l˝
, ' ');

489 i‡(
NULL
 =
˝
)

490 
˝
 = 
c2p
;

491 i‡(
NULL
 =
˝
)

493 i‡(
c2p
 && (c2∞< 
˝
))

494 
˝
 = 
c2p
;

495 
l˝
 = 
˝
 + 1;

497 
	`Ârötf
(
°dîr
, "build_diag_page:ÉrrorátÖos %d\n",

498 ()(
l˝
 - 
öp
 + 1));

502 *
mp_¨r_Àn
 = 
k
 + 1;

503 i‡(
k
 =
max_¨r_Àn
) {

504 
	`Ârötf
(
°dîr
, "build_diag_page:árrayÜengthÉxceeded\n");

509 
	}
}

512 
	s∑ge_code_desc
 {

513 
	m∑ge_code
;

514 c⁄° * 
	mdesc
;

516 
∑ge_code_desc
 
	gpc_desc_¨r
[] = {

539 c⁄° * 
	$föd_∑ge_code_desc
(
∑ge_num
)

541 
k
;

542 
num
 = (
pc_desc_¨r
) / (pc_desc_arr[0]);

543 c⁄° 
∑ge_code_desc
 * 
pcdp
 = &
pc_desc_¨r
[0];

545 
k
 = 0; k < 
num
; ++k, ++
pcdp
) {

546 i‡(
∑ge_num
 =
pcdp
->
∑ge_code
)

547  
pcdp
->
desc
;

548 i‡(
∑ge_num
 < 
pcdp
->
∑ge_code
)

549  
NULL
;

551  
NULL
;

552 
	}
}

554 
	$li°_∑ge_codes
()

556 
k
;

557 
num
 = (
pc_desc_¨r
) / (pc_desc_arr[0]);

558 c⁄° 
∑ge_code_desc
 * 
pcdp
 = &
pc_desc_¨r
[0];

560 
	`¥ötf
("Page_Code Description\n");

561 
k
 = 0; k < 
num
; ++k, ++
pcdp
)

562 
	`¥ötf
(" 0x%02x %s\n", 
pcdp
->
∑ge_code
,

563 (
pcdp
->
desc
 ?Öcdp->desc : "<unknown>"));

564 
	}
}

567 
	$maö
(
¨gc
, * 
¨gv
[])

569 
sg_fd
, 
k
, 
num
, 
r•_Àn
, 
ªs
;

570 
r•_buff
[
MX_ALLOC_LEN
];

571 
r•_buff_size
 = 
MX_ALLOC_LEN
;

572 
ªad_ö_Àn
 = 0;

573 c⁄° * 
˝
;

574 
ªad_ö
[
MX_ALLOC_LEN
];

575 
ªt
 = 0;

576 
›ts_t
 
›ts
;

578 
	`mem£t
(&
›ts
, 0, (opts));

579 
ªs
 = 
	`¥o˚ss_˛
(&
›ts
, 
¨gc
, 
¨gv
);

580 i‡(
ªs
)

581  
SG_LIB_SYNTAX_ERROR
;

582 i‡(
›ts
.
do_hñp
) {

583 i‡(
›ts
.
›t_√w
)

584 
	`ußge
();

586 
	`ußge_ﬁd
();

589 i‡(
›ts
.
do_vîsi⁄
) {

590 
	`Ârötf
(
°dîr
, "Vîsi⁄ såög: %s\n", 
vîsi⁄_°r
);

594 i‡(
NULL
 =
›ts
.
devi˚_«me
) {

595 i‡(
›ts
.
do_li°
) {

596 
	`li°_∑ge_codes
();

599 
	`Ârötf
(
°dîr
, "No DEVICEárgument given\n");

600 i‡(
›ts
.
›t_√w
)

601 
	`ußge
();

603 
	`ußge_ﬁd
();

604  
SG_LIB_SYNTAX_ERROR
;

606 i‡(
›ts
.
do_øw
) {

607 i‡(
	`buûd_düg_∑ge
(
›ts
.
øw_¨g
, 
ªad_ö
, &
ªad_ö_Àn
,

608 (
ªad_ö
))) {

609 i‡(
›ts
.
›t_√w
) {

610 
	`¥ötf
("Bad sequenceáfter '--raw=' option\n");

611 
	`ußge
();

613 
	`¥ötf
("Bad sequenceáfter '-raw=' option\n");

614 
	`ußge_ﬁd
();

616  
SG_LIB_SYNTAX_ERROR
;

620 i‡((
›ts
.
do_doff
 || o±s.
do_uoff
Ë&& (! o±s.
do_de·e°
)) {

621 i‡(
›ts
.
›t_√w
) {

622 
	`¥ötf
("setting --doff or --uoff only useful when -t is set\n");

623 
	`ußge
();

625 
	`¥ötf
("setting -doff or -uoff only useful when -t is set\n");

626 
	`ußge_ﬁd
();

628  
SG_LIB_SYNTAX_ERROR
;

630 i‡((
›ts
.
do_£l·e°
 > 0Ë&& o±s.
do_de·e°
) {

631 i‡(
›ts
.
›t_√w
) {

632 
	`¥ötf
("either set --selftest=SF or --test (not both)\n");

633 
	`ußge
();

635 
	`¥ötf
("either set -s=SF or -t (not both)\n");

636 
	`ußge_ﬁd
();

638  
SG_LIB_SYNTAX_ERROR
;

640 i‡(
›ts
.
do_øw
) {

641 i‡((
›ts
.
do_£l·e°
 > 0Ë|| o±s.
do_de·e°
 || o±s.
do_extdur
 ||

642 
›ts
.
do_li°
) {

643 i‡(
›ts
.
›t_√w
) {

644 
	`¥ötf
("'--raw=' cannot be used with self-tests, '-e' or "

646 
	`ußge
();

648 
	`¥ötf
("'-raw=' cannot be used with self-tests, '-e' or "

650 
	`ußge_ﬁd
();

652  
SG_LIB_SYNTAX_ERROR
;

654 i‡(! 
›ts
.
do_pf
) {

655 i‡(
›ts
.
›t_√w
)

656 
	`¥ötf
(">>> warning, '--pf'Örobably should be used with "

659 
	`¥ötf
(">>> warning, '-pf'Örobably should be used with "

664 i‡((
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
›ts
.
devi˚_«me
, 0 ,

665 
›ts
.
do_vîbo£
)) < 0) {

666 
	`Ârötf
(
°dîr
, 
ME
 "îr‹ o≥nög fûe: %s: %s\n", 
›ts
.
devi˚_«me
,

667 
	`ß„_°ªº‹
(-
sg_fd
));

668  
SG_LIB_FILE_ERROR
;

670 i‡(
›ts
.
do_extdur
) {

671 
ªs
 = 
	`do_modes_0a
(
sg_fd
, 
r•_buff
, 32, 1, 0, 
›ts
.
do_vîbo£
);

672 i‡(0 =
ªs
) {

674 
num
 = (
r•_buff
[0] << 8) +Ñsp_buff[1] - 6;

675 i‡(
num
 >= 0xc) {

676 
£cs
;

678 
£cs
 = (
r•_buff
[18] << 8) +Ñsp_buff[19];

679 #ifde‡
SG_LIB_MINGW


680 
	`¥ötf
("ExpectedÉxtended self-test duration=%d seconds "

681 "(%g möuãs)\n", 
£cs
, secs / 60.0);

683 
	`¥ötf
("ExpectedÉxtended self-test duration=%d seconds "

684 "(%.2‡möuãs)\n", 
£cs
, secs / 60.0);

687 
	`¥ötf
("Extended self-test durationÇotávailable\n");

689 
ªt
 = 
ªs
;

690 
	`¥ötf
("Extended self-test duration (modeÖage 0xa) failed\n");

691 
îr_out9
;

693 } i‡(
›ts
.
do_li°
) {

694 
	`mem£t
(
r•_buff
, 0, (rsp_buff));

695 
ªs
 = 
	`do_£nddüg
(
sg_fd
, 0, 1 , 0, 0, 0, 
r•_buff
, 4, 1,

696 
›ts
.
do_vîbo£
);

697 i‡(0 =
ªs
) {

698 i‡(0 =
	`sg_Œ_ª˚ive_düg
(
sg_fd
, 0, 0, 
r•_buff
,

699 
r•_buff_size
, 1, 
›ts
.
do_vîbo£
)) {

700 
	`¥ötf
("Supported diagnosticÖagesÑesponse:\n");

701 
r•_Àn
 = (
r•_buff
[2] << 8) +Ñsp_buff[3] + 4;

702 i‡(
›ts
.
do_hex
)

703 
	`dSåHex
((c⁄° *)
r•_buff
, 
r•_Àn
, 1);

705 
k
 = 0; k < (
r•_Àn
 - 4); ++k) {

706 
˝
 = 
	`föd_∑ge_code_desc
(
r•_buff
[
k
 + 4]);

707 
	`¥ötf
(" 0x%02x %s\n", 
r•_buff
[
k
 + 4],

708 (
˝
 ? cp : "<unknown>"));

712 
ªt
 = 
ªs
;

713 
	`Ârötf
(
°dîr
, "RECEIVE DIAGNOSTIC RESULTS command "

715 
îr_out9
;

718 
ªt
 = 
ªs
;

719 
îr_out
;

721 } i‡(
›ts
.
do_øw
) {

722 
ªs
 = 
	`do_£nddüg
(
sg_fd
, 0, 
›ts
.
do_pf
, 0, 0, 0, 
ªad_ö
,

723 
ªad_ö_Àn
, 1, 
›ts
.
do_vîbo£
);

724 i‡(
ªs
) {

725 
ªt
 = 
ªs
;

726 
îr_out
;

729 
ªs
 = 
	`do_£nddüg
(
sg_fd
, 
›ts
.
do_£l·e°
, o±s.
do_pf
,

730 
›ts
.
do_de·e°
, o±s.
do_doff
, o±s.
do_uoff
, 
NULL
,

731 0, 1, 
›ts
.
do_vîbo£
);

732 i‡(0 =
ªs
) {

733 i‡((5 =
›ts
.
do_£l·e°
) || (6 == opts.do_selftest))

734 
	`¥ötf
("Foreground self-testÑeturned GOOD status\n");

735 i‡(
›ts
.
do_de·e°
 && (! o±s.
do_doff
Ë&& (! o±s.
do_uoff
))

736 
	`¥ötf
("Default self-testÑeturned GOOD status\n");

738 
ªt
 = 
ªs
;

739 
îr_out
;

742 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

743 i‡((
ªs
 < 0Ë&& (0 =
ªt
))

744  
SG_LIB_SYNTAX_ERROR
;

745  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

747 
îr_out
:

748 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
)

749 
	`Ârötf
(
°dîr
, "SEND DIAGNOSTIC, unitáttention\n");

750 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

751 
	`Ârötf
(
°dîr
, "SEND DIAGNOSTIC,áborted command\n");

752 i‡(
SG_LIB_CAT_NOT_READY
 =
ªs
)

753 
	`Ârötf
(
°dîr
, "SEND DIAGNOSTIC, deviceÇot "

756 
	`Ârötf
(
°dîr
, "SEND DIAGNOSTIC command, failed\n");

757 
îr_out9
:

758 i‡(
›ts
.
do_vîbo£
 < 2)

759 
	`Ârötf
(
°dîr
, "Åryágain with '-vv' for more information\n");

760 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

761 i‡((
ªs
 < 0Ë&& (0 =
ªt
))

762  
SG_LIB_FILE_ERROR
;

763  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

764 
	}
}

	@src/sg_ses.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<˘y≥.h
>

14 
	~<gë›t.h
>

15 
	#__STDC_FORMAT_MACROS
 1

	)

16 
	~<öây≥s.h
>

18 #ifde‡
HAVE_CONFIG_H


19 
	~"c⁄fig.h
"

21 
	~"sg_lib.h
"

22 
	~"sg_cmds_basic.h
"

23 
	~"sg_cmds_exåa.h
"

30 c⁄° * 
	gvîsi⁄_°r
 = "1.71 20130507";

32 
	#MX_ALLOC_LEN
 ((64 * 1024Ë- 1)

	)

33 
	#MX_ELEM_HDR
 1024

	)

34 
	#MX_DATA_IN
 2048

	)

35 
	#MX_JOIN_ROWS
 260

	)

36 
	#NUM_ACTIVE_ET_AESP_ARR
 32

	)

38 
	#TEMPERAT_OFF
 20

	)

42 
	#DPC_SUPPORTED
 0x0

	)

43 
	#DPC_CONFIGURATION
 0x1

	)

44 
	#DPC_ENC_CONTROL
 0x2

	)

45 
	#DPC_ENC_STATUS
 0x2

	)

46 
	#DPC_HELP_TEXT
 0x3

	)

47 
	#DPC_STRING
 0x4

	)

48 
	#DPC_THRESHOLD
 0x5

	)

49 
	#DPC_ARRAY_CONTROL
 0x6

	)

50 
	#DPC_ARRAY_STATUS
 0x6

	)

51 
	#DPC_ELEM_DESC
 0x7

	)

52 
	#DPC_SHORT_ENC_STATUS
 0x8

	)

53 
	#DPC_ENC_BUSY
 0x9

	)

54 
	#DPC_ADD_ELEM_STATUS
 0xa

	)

55 
	#DPC_SUBENC_HELP_TEXT
 0xb

	)

56 
	#DPC_SUBENC_STRING
 0xc

	)

57 
	#DPC_SUPPORTED_SES
 0xd

	)

58 
	#DPC_DOWNLOAD_MICROCODE
 0xe

	)

59 
	#DPC_SUBENC_NICKNAME
 0xf

	)

62 
	#UNSPECIFIED_ETC
 0x0

	)

63 
	#DEVICE_ETC
 0x1

	)

64 
	#POWER_SUPPLY_ETC
 0x2

	)

65 
	#COOLING_ETC
 0x3

	)

66 
	#TEMPERATURE_ETC
 0x4

	)

67 
	#DOOR_ETC
 0x5

	)

68 
	#AUD_ALARM_ETC
 0x6

	)

69 
	#ESC_ELECTRONICS_ETC
 0x7

	)

70 
	#SCC_CELECTR_ETC
 0x8

	)

71 
	#NV_CACHE_ETC
 0x9

	)

72 
	#INV_OP_REASON_ETC
 0xa

	)

73 
	#UI_POWER_SUPPLY_ETC
 0xb

	)

74 
	#DISPLAY_ETC
 0xc

	)

75 
	#KEY_PAD_ETC
 0xd

	)

76 
	#ENCLOSURE_ETC
 0xe

	)

77 
	#SCSI_PORT_TRAN_ETC
 0xf

	)

78 
	#LANGUAGE_ETC
 0x10

	)

79 
	#COMM_PORT_ETC
 0x11

	)

80 
	#VOLT_SENSOR_ETC
 0x12

	)

81 
	#CURR_SENSOR_ETC
 0x13

	)

82 
	#SCSI_TPORT_ETC
 0x14

	)

83 
	#SCSI_IPORT_ETC
 0x15

	)

84 
	#SIMPLE_SUBENC_ETC
 0x16

	)

85 
	#ARRAY_DEV_ETC
 0x17

	)

86 
	#SAS_EXPANDER_ETC
 0x18

	)

87 
	#SAS_CONNECTOR_ETC
 0x19

	)

90 
	sñemít_ty≥_t
 {

91 
	mñem_ty≥_code
;

92 c⁄° * 
	mabbªv
;

93 c⁄° * 
	mdesc
;

96 
	s›ts_t
 {

97 
	mbyã1
;

98 
	mbyã1_giví
;

99 
	mdo_c⁄åﬁ
;

100 
	mdo_d©a
;

101 
	mdo_íumî©e
;

102 
	mdo_fûãr
;

103 
	mdo_hñp
;

104 
	mdo_hex
;

105 
	möd_giví
;

106 
	möd_th
;

107 
	möd_ödiv
;

108 
	möd_ëp_num
;

109 
	mö√r_hex
;

110 
	mdo_joö
;

111 
	mdo_li°
;

112 
	m∑ge_code
;

113 
	m∑ge_code_giví
;

114 
	mdo_øw
;

115 
	mdo_°©us
;

116 
	mvîbo£
;

117 
	mdo_vîsi⁄
;

118 
	mnum_cgs
;

119 
	m¨r_Àn
;

120 
	md©a_¨r
[
MX_DATA_IN
 + 16];

121 c⁄° * 
	m˛ór_°r
;

122 c⁄° * 
	mdesc_«me
;

123 c⁄° * 
	mgë_°r
;

124 c⁄° * 
	m£t_°r
;

125 c⁄° * 
	mdevi˚_«me
;

126 c⁄° * 
	mödex_°r
;

127 c⁄° 
ñemít_ty≥_t
 * 
	möd_ëp
;

130 
	sdüg_∑ge_code
 {

131 
	m∑ge_code
;

132 c⁄° * 
	mdesc
;

135 
	sdüg_∑ge_abbªv
 {

136 c⁄° * 
	mabbªv
;

137 
	m∑ge_code
;

144 
	sty≥_desc_hdr_t
 {

145 
	mëy≥
;

146 
	mnum_ñemíts
;

148 
	m£_id
;

149 
	mtxt_Àn
;

155 
	sjoö_row_t
 {

156 
	mñ_öd_th
;

157 
	mñ_öd_ödiv
;

159 
	mëy≥
;

160 
	m£_id
;

161 
	mei_asc
;

163 
	mei_asc2
;

168 * 
	mñem_des˝
;

169 * 
	míc_°©p
;

170 * 
	mthªsh_öp
;

171 * 
	madd_ñem_°©p
;

176 
	stu∂e_a¸⁄ym_vÆ
 {

177 c⁄° * 
	ma¸⁄
;

178 c⁄° * 
	mvÆ_°r
;

179 
	m°¨t_byã
;

180 
	m°¨t_bô
;

181 
	mnum_bôs
;

182 
öt64_t
 
	mvÆ
;

187 
	sa¸⁄ym2tu∂e
 {

188 c⁄° * 
	ma¸⁄
;

189 
	mëy≥
;

190 
	m°¨t_byã
;

191 
	m°¨t_bô
;

192 
	mnum_bôs
;

197 
	sí˛osuª_öfo
 {

198 
	mhave_öfo
;

199 
	mªl_e•_id
;

200 
	mnum_e•
;

201 
	míc_log_id
[8];

202 
	míc_víd‹_id
[8];

203 
	m¥odu˘_id
[16];

204 
	m¥odu˘_ªv_Àvñ
[4];

208 
ty≥_desc_hdr_t
 
	gty≥_desc_hdr_¨r
[
MX_ELEM_HDR
];

210 
joö_row_t
 
	gjoö_¨r
[
MX_JOIN_ROWS
];

211 
joö_row_t
 * 
	gjoö_¨r_œ°p
 = 
joö_¨r
 + 
MX_JOIN_ROWS
 - 1;

213 
	gíc_°©_r•
[
MX_ALLOC_LEN
];

214 
	gñem_desc_r•
[
MX_ALLOC_LEN
];

215 
	gadd_ñem_r•
[
MX_ALLOC_LEN
];

216 
	gthªshﬁd_r•
[
MX_ALLOC_LEN
];

217 
	gíc_°©_r•_Àn
;

218 
	gñem_desc_r•_Àn
;

219 
	gadd_ñem_r•_Àn
;

220 
	gthªshﬁd_r•_Àn
;

223 
düg_∑ge_code
 
	gdpc_¨r
[] = {

224 {
DPC_SUPPORTED
, "Supported Diagnostic Pages"},

225 {
DPC_CONFIGURATION
, "Configuration (SES)"},

226 {
DPC_ENC_STATUS
, "Enclosure Status/Control (SES)"},

227 {
DPC_HELP_TEXT
, "Help Text (SES)"},

228 {
DPC_STRING
, "String In/Out (SES)"},

229 {
DPC_THRESHOLD
, "Threshold In/Out (SES)"},

230 {
DPC_ARRAY_STATUS
, "Array Status/Control (SES, obsolete)"},

231 {
DPC_ELEM_DESC
, "Element Descriptor (SES)"},

232 {
DPC_SHORT_ENC_STATUS
, "Short Enclosure Status (SES)"},

233 {
DPC_ENC_BUSY
, "Enclosure Busy (SES-2)"},

234 {
DPC_ADD_ELEM_STATUS
, "Additional Element Status (SES-2)"},

235 {
DPC_SUBENC_HELP_TEXT
, "Subenclosure Help Text (SES-2)"},

236 {
DPC_SUBENC_STRING
, "Subenclosure String In/Out (SES-2)"},

237 {
DPC_SUPPORTED_SES
, "Supported SES Diagnostic Pages (SES-2)"},

238 {
DPC_DOWNLOAD_MICROCODE
, "Download Microcode (SES-2)"},

239 {
DPC_SUBENC_NICKNAME
, "Subenclosure Nickname (SES-2)"},

244 {-1, 
NULL
},

248 
düg_∑ge_code
 
	gö_dpc_¨r
[] = {

249 {
DPC_SUPPORTED
, "Supported Diagnostic Pages"},

250 {
DPC_CONFIGURATION
, "Configuration (SES)"},

251 {
DPC_ENC_STATUS
, "Enclosure Status (SES)"},

252 {
DPC_HELP_TEXT
, "Help Text (SES)"},

253 {
DPC_STRING
, "String In (SES)"},

254 {
DPC_THRESHOLD
, "Threshold In (SES)"},

255 {
DPC_ARRAY_STATUS
, "Array Status (SES, obsolete)"},

256 {
DPC_ELEM_DESC
, "Element Descriptor (SES)"},

257 {
DPC_SHORT_ENC_STATUS
, "Short Enclosure Status (SES)"},

258 {
DPC_ENC_BUSY
, "Enclosure Busy (SES-2)"},

259 {
DPC_ADD_ELEM_STATUS
, "Additional Element Status (SES-2)"},

260 {
DPC_SUBENC_HELP_TEXT
, "Subenclosure Help Text (SES-2)"},

261 {
DPC_SUBENC_STRING
, "Subenclosure String In (SES-2)"},

262 {
DPC_SUPPORTED_SES
, "Supported SES Diagnostic Pages (SES-2)"},

263 {
DPC_DOWNLOAD_MICROCODE
, "Download Microcode (SES-2)"},

264 {
DPC_SUBENC_NICKNAME
, "Subenclosure Nickname (SES-2)"},

269 {-1, 
NULL
},

273 
düg_∑ge_code
 
	gout_dpc_¨r
[] = {

274 {
DPC_SUPPORTED
, "?? [Supported Diagnostic Pages]"},

275 {
DPC_CONFIGURATION
, "?? [Configuration (SES)]"},

276 {
DPC_ENC_CONTROL
, "Enclosure Control (SES)"},

277 {
DPC_HELP_TEXT
, "Help Text (SES)"},

278 {
DPC_STRING
, "String Out (SES)"},

279 {
DPC_THRESHOLD
, "Threshold Out (SES)"},

280 {
DPC_ARRAY_CONTROL
, "Array Control (SES, obsolete)"},

281 {
DPC_ELEM_DESC
, "?? [Element Descriptor (SES)]"},

282 {
DPC_SHORT_ENC_STATUS
, "?? [Short Enclosure Status (SES)]"},

283 {
DPC_ENC_BUSY
, "?? [Enclosure Busy (SES-2)]"},

284 {
DPC_ADD_ELEM_STATUS
, "?? [Additional Element Status (SES-2)]"},

285 {
DPC_SUBENC_HELP_TEXT
, "?? [Subenclosure Help Text (SES-2)]"},

286 {
DPC_SUBENC_STRING
, "Subenclosure String Out (SES-2)"},

287 {
DPC_SUPPORTED_SES
, "?? [Supported SES Diagnostic Pages (SES-2)]"},

288 {
DPC_DOWNLOAD_MICROCODE
, "Download Microcode (SES-2)"},

289 {
DPC_SUBENC_NICKNAME
, "Subenclosure Nickname (SES-2)"},

294 {-1, 
NULL
},

297 
düg_∑ge_abbªv
 
	gdp_abbªv
[] = {

298 {"ac", 
DPC_ARRAY_CONTROL
},

299 {"´s", 
DPC_ADD_ELEM_STATUS
},

300 {"as", 
DPC_ARRAY_STATUS
},

301 {"cf", 
DPC_CONFIGURATION
},

302 {"dm", 
DPC_DOWNLOAD_MICROCODE
},

303 {"eb", 
DPC_ENC_BUSY
},

304 {"ec", 
DPC_ENC_CONTROL
},

305 {"ed", 
DPC_ELEM_DESC
},

306 {"es", 
DPC_ENC_STATUS
},

307 {"ht", 
DPC_HELP_TEXT
},

308 {"sdp", 
DPC_SUPPORTED
},

309 {"£s", 
DPC_SHORT_ENC_STATUS
},

310 {"sht", 
DPC_SUBENC_HELP_TEXT
},

311 {"¢ic", 
DPC_SUBENC_NICKNAME
},

312 {"s•", 
DPC_SUPPORTED_SES
},

313 {"s°r", 
DPC_SUBENC_STRING
},

314 {"°r", 
DPC_STRING
},

315 {"th", 
DPC_THRESHOLD
},

316 {
NULL
, -1},

321 
ñemít_ty≥_t
 
	gñemít_ty≥_¨r
[] = {

322 {
UNSPECIFIED_ETC
, "un", "Unspecified"},

323 {
DEVICE_ETC
, "dev", "Device slot"},

324 {
POWER_SUPPLY_ETC
, "ps", "Power supply"},

325 {
COOLING_ETC
, "coo", "Cooling"},

326 {
TEMPERATURE_ETC
, "ts", "Temperature sensor"},

327 {
DOOR_ETC
, "do", "Door"},

329 {
AUD_ALARM_ETC
, "aa", "Audibleálarm"},

330 {
ESC_ELECTRONICS_ETC
, "esc", "Enclosure services controllerÉlectronics"},

331 {
SCC_CELECTR_ETC
, "sce", "SCC controllerÉlectronics"},

332 {
NV_CACHE_ETC
, "nc", "Nonvolatile cache"},

333 {
INV_OP_REASON_ETC
, "ior", "Invalid operationÑeason"},

334 {
UI_POWER_SUPPLY_ETC
, "ups", "UninterruptibleÖower supply"},

335 {
DISPLAY_ETC
, "dis", "Display"},

336 {
KEY_PAD_ETC
, "kpe", "KeyÖadÉntry"},

337 {
ENCLOSURE_ETC
, "enc", "Enclosure"},

338 {
SCSI_PORT_TRAN_ETC
, "sp", "SCSIÖort/transceiver"},

339 {
LANGUAGE_ETC
, "lan", "Language"},

340 {
COMM_PORT_ETC
, "cp", "CommunicationÖort"},

341 {
VOLT_SENSOR_ETC
, "vs", "Voltage sensor"},

342 {
CURR_SENSOR_ETC
, "cs", "Current sensor"},

343 {
SCSI_TPORT_ETC
, "stp", "SCSIÅargetÖort"},

344 {
SCSI_IPORT_ETC
, "sip", "SCSI initiatorÖort"},

345 {
SIMPLE_SUBENC_ETC
, "ss", "Simple subenclosure"},

346 {
ARRAY_DEV_ETC
, "arr", "Array device slot"},

347 {
SAS_EXPANDER_ETC
, "sse", "SASÉxpander"},

348 {
SAS_CONNECTOR_ETC
, "ssc", "SAS connector"},

349 {-1, 
NULL
, NULL},

352 
ñemít_ty≥_t
 
	gñemít_ty≥_by_code
 =

353 {0, 
NULL
, "elementÅype code form"};

357 
a¸⁄ym2tu∂e
 
	gecs_a2t_¨r
[] = {

358 {"a˘ive", 
DEVICE_ETC
, 2, 7, 1},

359 {"a˘ive", 
ARRAY_DEV_ETC
, 2, 7, 1},

361 {"devoff", 
DEVICE_ETC
, 3, 4, 1},

362 {"devoff", 
ARRAY_DEV_ETC
, 3, 4, 1},

363 {"dƒ", 
DEVICE_ETC
, 2, 6, 1},

364 {"dƒ", 
ARRAY_DEV_ETC
, 2, 6, 1},

365 {"Áu…", 
DEVICE_ETC
, 3, 5, 1},

366 {"Áu…", 
ARRAY_DEV_ETC
, 3, 5, 1},

367 {"idít", 
DEVICE_ETC
, 2, 1, 1},

368 {"idít", 
ARRAY_DEV_ETC
, 2, 1, 1},

369 {"idít", 
POWER_SUPPLY_ETC
, 1, 7, 1},

370 {"idít", 
COOLING_ETC
, 1, 7, 1},

371 {"idít", 
ENCLOSURE_ETC
, 1, 7, 1},

372 {"ö£π", 
DEVICE_ETC
, 2, 3, 1},

373 {"ö£π", 
ARRAY_DEV_ETC
, 2, 3, 1},

374 {"loˇã", 
DEVICE_ETC
, 2, 1, 1},

375 {"loˇã", 
ARRAY_DEV_ETC
, 2, 1, 1},

376 {"loˇã", 
POWER_SUPPLY_ETC
, 1, 7, 1},

377 {"loˇã", 
COOLING_ETC
, 1, 7, 1},

378 {"loˇã", 
ENCLOSURE_ETC
, 1, 7, 1},

379 {"missög", 
DEVICE_ETC
, 2, 4, 1},

380 {"missög", 
ARRAY_DEV_ETC
, 2, 4, 1},

381 {"loˇã", 
DEVICE_ETC
, 2, 1, 1},

382 {"loˇã", 
ARRAY_DEV_ETC
, 2, 1, 1},

384 {"ªmove", 
DEVICE_ETC
, 2, 2, 1},

385 {"ªmove", 
ARRAY_DEV_ETC
, 2, 2, 1},

386 {"•ìd_a˘", 
COOLING_ETC
, 2, 7, 8},

387 {"•ìd_code", 
COOLING_ETC
, 3, 2, 3},

389 {
NULL
, 0, 0, 0, 0},

393 
a¸⁄ym2tu∂e
 
	gth_a2t_¨r
[] = {

398 {
NULL
, 0, 0, 0, 0},

403 
a¸⁄ym2tu∂e
 
	g´_ßs_a2t_¨r
[] = {

416 {
NULL
, 0, 0, 0, 0},

421 
	ga˘ive_ë_´•_¨r
[
NUM_ACTIVE_ET_AESP_ARR
] = {

429 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

453 
ªad_hex
(c⁄° * 
öp
, * 
¨r
, * 
¨r_Àn
);

454 
°rˇ£_eq
(c⁄° * 
s1p
, c⁄° * 
s2p
);

455 
íumî©e_düg_∑ges
();

460 
	$ußge
()

462 
	`Ârötf
(
°dîr
, "Usage: "

503 
	`Ârötf
(
°dîr
,

533 
	}
}

537 
	$∑r£_ödex
(
›ts_t
 *
›
)

539 
n
;

540 c⁄° * 
˝
;

541 * 
mÆl˝
;

542 * 
c2p
;

543 c⁄° 
ñemít_ty≥_t
 * 
ëp
;

544 
b
[64];

546 
›
->
öd_giví
 = 1;

547 i‡((
˝
 = 
	`°rchr
(
›
->
ödex_°r
, ','))) {

548 i‡(0 =
	`°rcmp
("-1", 
˝
 + 1))

549 
n
 = -1;

551 
n
 = 
	`sg_gë_num
(
˝
 + 1);

552 i‡((
n
 < 0) || (n > 255)) {

553 
	`Ârötf
(
°dîr
, "badárgumentÅo '--index',áfter "

555  
SG_LIB_SYNTAX_ERROR
;

558 
›
->
öd_ödiv
 = 
n
;

559 
n
 = 
˝
 - 
›
->
ödex_°r
;

560 i‡(
n
 >()(
b
)) {

561 
	`Ârötf
(
°dîr
, "badárgumentÅo '--index', string "

563  
SG_LIB_SYNTAX_ERROR
;

566 
n
 = 
	`°æí
(
›
->
ödex_°r
);

567 i‡(
n
 >()(
b
)) {

568 
	`Ârötf
(
°dîr
, "badárgumentÅo '--index', string "

570  
SG_LIB_SYNTAX_ERROR
;

573 
	`°∫˝y
(
b
, 
›
->
ödex_°r
, 
n
);

574 
b
[
n
] = '\0';

575 i‡(0 =
	`°rcmp
("-1", 
b
)) {

576 i‡(
˝
) {

577 
	`Ârötf
(
°dîr
, "badárgumentÅo '--index', "

579  
SG_LIB_SYNTAX_ERROR
;

581 
›
->
öd_th
 = 0;

582 
›
->
öd_ödiv
 = -1;

583 } i‡(
	`isdigô
(
b
[0])) {

584 
n
 = 
	`sg_gë_num
(
b
);

585 i‡((
n
 < 0) || (n > 255)) {

586 
	`Ârötf
(
°dîr
, "badÇumericárgumentÅo '--index', "

588  
SG_LIB_SYNTAX_ERROR
;

590 i‡(
˝
)

591 
›
->
öd_th
 = 
n
;

593 
›
->
öd_th
 = 0;

594 
›
->
öd_ödiv
 = 
n
;

596 } i‡('_' =
b
[0]) {

597 i‡((
c2p
 = 
	`°rchr
(
b
 + 1, '_')))

598 *
c2p
 = '\0';

599 
n
 = 
	`sg_gë_num
(
b
 + 1);

600 i‡((
n
 < 0) || (n > 255)) {

601 
	`Ârötf
(
°dîr
, "badÉlementÅype code for '--index', "

603  
SG_LIB_SYNTAX_ERROR
;

605 
ñemít_ty≥_by_code
.
ñem_ty≥_code
 = 
n
;

606 
mÆl˝
 = (*)
	`mÆloc
(8);

607 
mÆl˝
[0] = '_';

608 
	`¢¥ötf
(
mÆl˝
 + 1, 6, "%d", 
n
);

609 
ñemít_ty≥_by_code
.
abbªv
 = 
mÆl˝
;

610 i‡(
c2p
) {

611 
n
 = 
	`sg_gë_num
(
c2p
 + 1);

612 i‡((
n
 < 0) || (n > 255)) {

613 
	`Ârötf
(
°dîr
, "badÉlementÅype code <num> "

615  
SG_LIB_SYNTAX_ERROR
;

617 
›
->
öd_ëp_num
 = 
n
;

619 
›
->
öd_ëp
 = &
ñemít_ty≥_by_code
;

620 i‡(
NULL
 =
˝
)

621 
›
->
öd_ödiv
 = -1;

623 
ëp
 = 
ñemít_ty≥_¨r
;Éç->
desc
; ++etp) {

624 
n
 = 
	`°æí
(
ëp
->
abbªv
);

625 i‡(0 =
	`°∫cmp
(
b
, 
ëp
->
abbªv
, 
n
))

628 i‡(
NULL
 =
ëp
->
desc
) {

629 
	`Ârötf
(
°dîr
, "badÉlementÅypeábbreviation [%s] for "

630 "'--ödex'\nu£ '--íumî©e'Åÿ£êpossibÀs\n", 
b
);

631  
SG_LIB_SYNTAX_ERROR
;

633 i‡(()
	`°æí
(
b
Ë> 
n
) {

634 
n
 = 
	`sg_gë_num
(
b
 +Ç);

635 i‡((
n
 < 0) || (n > 255)) {

636 
	`Ârötf
(
°dîr
, "badÉlementÅypeábbreviation <num> "

638  
SG_LIB_SYNTAX_ERROR
;

640 
›
->
öd_ëp_num
 = 
n
;

642 
›
->
öd_ëp
 = 
ëp
;

643 i‡(
NULL
 =
˝
)

644 
›
->
öd_ödiv
 = -1;

646 i‡(
›
->
vîbo£
 > 1) {

647 i‡(
›
->
öd_ëp
)

648 
	`Ârötf
(
°dîr
, "ÉlementÅypeábbreviation: %s,Étp_num=%d, "

649 "ödividuÆ index=%d\n", 
›
->
öd_ëp
->
abbªv
,

650 
›
->
öd_ëp_num
, op->
öd_ödiv
);

652 
	`Ârötf
(
°dîr
, "Åype header index=%d, individual "

653 "ödex=%d\n", 
›
->
öd_th
, op->
öd_ödiv
);

656 
	}
}

661 
	$¥o˚ss_˛
(
›ts_t
 *
›
, 
¨gc
, *
¨gv
[])

663 
c
, 
ªt
;

666 
›ti⁄_ödex
 = 0;

668 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "b:cC:d:D:efG:hHiI:jlp:rsS:vV",

669 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

670 i‡(
c
 == -1)

673 
c
) {

675 
›
->
byã1
 = 
	`sg_gë_num
(
›èrg
);

676 i‡((
›
->
byã1
 < 0) || (op->byte1 > 255)) {

677 
	`Ârötf
(
°dîr
, "badárgumentÅo '--byte1' (0Åo 255 "

679  
SG_LIB_SYNTAX_ERROR
;

681 ++
›
->
byã1_giví
;

684 ++
›
->
do_c⁄åﬁ
;

687 
›
->
˛ór_°r
 = 
›èrg
;

688 ++
›
->
num_cgs
;

691 
	`mem£t
(
›
->
d©a_¨r
, 0, (op->data_arr));

692 i‡(
	`ªad_hex
(
›èrg
, 
›
->
d©a_¨r
 + 4, &›->
¨r_Àn
)) {

693 
	`Ârötf
(
°dîr
, "badárgumentÅo '--data'\n");

694  
SG_LIB_SYNTAX_ERROR
;

696 
›
->
do_d©a
 = 1;

699 
›
->
desc_«me
 = 
›èrg
;

702 ++
›
->
do_íumî©e
;

705 
›
->
do_fûãr
 = 1;

708 
›
->
gë_°r
 = 
›èrg
;

709 ++
›
->
num_cgs
;

713 ++
›
->
do_hñp
;

716 ++
›
->
do_hex
;

719 ++
›
->
ö√r_hex
;

722 
›
->
ödex_°r
 = 
›èrg
;

725 ++
›
->
do_joö
;

728 ++
›
->
do_li°
;

731 i‡(
	`isdigô
(
›èrg
[0])) {

732 
›
->
∑ge_code
 = 
	`sg_gë_num
(
›èrg
);

733 i‡((
›
->
∑ge_code
 < 0) || (op->page_code > 255)) {

734 
	`Ârötf
(
°dîr
, "badárgumentÅo '--page' (0Åo 255 "

736  
SG_LIB_SYNTAX_ERROR
;

739 c⁄° 
düg_∑ge_abbªv
 * 
≠
;

741 
≠
 = 
dp_abbªv
;áp->
abbªv
; ++ap) {

742 i‡(
	`°rˇ£_eq
(
≠
->
abbªv
, 
›èrg
)) {

743 
›
->
∑ge_code
 = 
≠
->page_code;

747 i‡(
NULL
 =
≠
->
abbªv
) {

748 
	`Ârötf
(
°dîr
, "'--page'ábbreviation %sÇot "

749 "found\nHîê¨êthêchoi˚s:\n", 
›èrg
);

750 
	`íumî©e_düg_∑ges
();

751  
SG_LIB_SYNTAX_ERROR
;

754 ++
›
->
∑ge_code_giví
;

757 ++
›
->
do_øw
;

760 ++
›
->
do_°©us
;

763 
›
->
£t_°r
 = 
›èrg
;

764 ++
›
->
num_cgs
;

767 ++
›
->
vîbo£
;

770 ++
›
->
do_vîsi⁄
;

773 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê0x%x ??\n", 
c
);

774 
	`Ârötf
(
°dîr
, " For commandÜine usage information useÅhe "

776  
SG_LIB_SYNTAX_ERROR
;

779 i‡(
›töd
 < 
¨gc
) {

780 i‡(
NULL
 =
›
->
devi˚_«me
) {

781 
›
->
devi˚_«me
 = 
¨gv
[
›töd
];

782 ++
›töd
;

784 i‡(
›töd
 < 
¨gc
) {

785 ; 
›töd
 < 
¨gc
; ++optind)

786 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

787 
¨gv
[
›töd
]);

788 
	`Ârötf
(
°dîr
, " For more information use '--help'\n");

789  
SG_LIB_SYNTAX_ERROR
;

792 i‡(
›
->
do_joö
 && (›->
do_c⁄åﬁ
)) {

793 
	`Ârötf
(
°dîr
, "cannot have '--join'ánd '--control'\n");

794 
	`Ârötf
(
°dîr
, " For more information use '--help'\n");

795  
SG_LIB_SYNTAX_ERROR
;

797 i‡(
›
->
num_cgs
 > 1) {

798 
	`Ârötf
(
°dîr
, "can only be one of '--clear', '--get'ánd "

800 
	`Ârötf
(
°dîr
, " For more information use '--help'\n");

801  
SG_LIB_SYNTAX_ERROR
;

803 i‡(
›
->
ödex_°r
) {

804 
ªt
 = 
	`∑r£_ödex
(
›
);

805 i‡(
ªt
) {

806 
	`Ârötf
(
°dîr
, " For more information use '--help'\n");

807  
ªt
;

810 i‡(
›
->
desc_«me
) {

811 i‡(
›
->
öd_giví
) {

812 
	`Ârötf
(
°dîr
, "can haveÉither --descriptor or --index but "

814 
	`Ârötf
(
°dîr
, " For more information use '--help'\n");

815  
SG_LIB_SYNTAX_ERROR
;

817 i‡((0 =
›
->
do_joö
Ë&& (0 =›->
do_c⁄åﬁ
) &&

818 (0 =
›
->
num_cgs
Ë&& (0 =›->
∑ge_code_giví
)) {

819 ++
›
->
do_joö
;

820 i‡(
›
->
vîbo£
)

821 
	`Ârötf
(
°dîr
, "assume --join option is set\n");

824 i‡(
›
->
öd_giví
) {

825 i‡((0 =
›
->
do_joö
Ë&& (0 =›->
do_c⁄åﬁ
) &&

826 (0 =
›
->
num_cgs
Ë&& (0 =›->
∑ge_code_giví
)) {

827 ++
›
->
∑ge_code_giví
;

828 
›
->
∑ge_code
 = 2;

829 i‡(
›
->
vîbo£
)

830 
	`Ârötf
(
°dîr
, "assume --page=2 (es) option is set\n");

833 i‡(
›
->
do_li°
 || op->
do_íumî©e
)

835 i‡(
›
->
do_c⁄åﬁ
 && op->
do_°©us
) {

836 
	`Ârötf
(
°dîr
, "cannot have both '--control'ánd '--status'\n");

837 
	`Ârötf
(
°dîr
, "For more information use '--help'\n");

838  
SG_LIB_SYNTAX_ERROR
;

839 } i‡(
›
->
do_c⁄åﬁ
) {

840 i‡(! 
›
->
do_d©a
) {

841 
	`Ârötf
(
°dîr
, "needÅo give '--data' in control mode\n");

842 
	`Ârötf
(
°dîr
, "For more information use '--help'\n");

843  
SG_LIB_SYNTAX_ERROR
;

845 } i‡(0 =
›
->
do_°©us
)

846 
›
->
do_°©us
 = 1;

848 i‡(
NULL
 =
›
->
devi˚_«me
) {

849 
	`Ârötf
(
°dîr
, "missing DEVICEÇame!\n");

850 
	`Ârötf
(
°dîr
, "For more information use '--help'\n");

851  
SG_LIB_SYNTAX_ERROR
;

854 
	}
}

859 
öt64_t


860 
	$gë_Œnum
(c⁄° * 
buf
)

862 
ªs
, 
Àn
;

863 
öt64_t
 
num
;

864 
uöt64_t
 
unum
;

866 i‡((
NULL
 =
buf
) || ('\0' == buf[0]))

868 
Àn
 = 
	`°æí
(
buf
);

869 i‡(('0' =
buf
[0]) && (('x' == buf[1]) || ('X' == buf[1]))) {

870 
ªs
 = 
	`ssˇnf
(
buf
 + 2, "%" 
SCNx64
 "", &
unum
);

871 
num
 = 
unum
;

872 } i‡('H' =
	`touµî
(
buf
[
Àn
 - 1])) {

873 
ªs
 = 
	`ssˇnf
(
buf
, "%" 
SCNx64
 "", &
unum
);

874 
num
 = 
unum
;

876 
ªs
 = 
	`ssˇnf
(
buf
, "%" 
SCNd64
 "", &
num
);

877  (1 =
ªs
Ë? 
num
 : -1;

878 
	}
}

883 
	$∑r£_cgs_°r
(* 
buff
, 
tu∂e_a¸⁄ym_vÆ
 * 
èvp
)

885 * 
e•
;

886 * 
cﬁp
;

887 * 
˝
;

888 
ui
;

890 
èvp
->
a¸⁄
 = 
NULL
;

891 
èvp
->
vÆ_°r
 = 
NULL
;

892 
èvp
->
°¨t_byã
 = -1;

893 
èvp
->
num_bôs
 = 1;

894 i‡((
e•
 = 
	`°rchr
(
buff
, '='))) {

895 
èvp
->
vÆ_°r
 = 
e•
 + 1;

896 *
e•
 = '\0';

897 i‡(0 =
	`°rcmp
("-1", 
e•
 + 1))

898 
èvp
->
vÆ
 = -1;

900 
èvp
->
vÆ
 = 
	`gë_Œnum
(
e•
 + 1);

901 i‡(-1 =
èvp
->
vÆ
) {

902 
	`Ârötf
(
°dîr
, "u«bÀÅÿdecode: %†vÆue\n", 
e•
 + 1);

903 
	`Ârötf
(
°dîr
, "Éxpected: <acronym>[=<val>]\n");

908 i‡(
	`ißÕha
(
buff
[0]))

909 
èvp
->
a¸⁄
 = 
buff
;

911 
cﬁp
 = 
	`°rchr
(
buff
, ':');

912 i‡((
NULL
 =
cﬁp
Ë|| (
buff
 == colp))

914 *
cﬁp
 = '\0';

915 i‡(('0' =
buff
[0]Ë&& ('X' =
	`touµî
(buff[1]))) {

916 i‡(1 !
	`ssˇnf
(
buff
 + 2, "%x", &
ui
))

918 
èvp
->
°¨t_byã
 = 
ui
;

919 } i‡('H' =
	`touµî
(*(
cﬁp
 - 1))) {

920 i‡(1 !
	`ssˇnf
(
buff
, "%x", &
ui
))

922 
èvp
->
°¨t_byã
 = 
ui
;

924 i‡(1 !
	`ssˇnf
(
buff
, "%d", &
èvp
->
°¨t_byã
))

927 i‡((
èvp
->
°¨t_byã
 < 0) || (tavp->start_byte > 127)) {

928 
	`Ârötf
(
°dîr
, "<start_byte>ÇeedsÅo be between 0ánd 127\n");

931 
˝
 = 
cﬁp
 + 1;

932 
cﬁp
 = 
	`°rchr
(
˝
, ':');

933 i‡(
˝
 =
cﬁp
)

935 i‡(
cﬁp
)

936 *
cﬁp
 = '\0';

937 i‡(1 !
	`ssˇnf
(
˝
, "%d", &
èvp
->
°¨t_bô
))

939 i‡((
èvp
->
°¨t_bô
 < 0) || (tavp->start_bit > 7)) {

940 
	`Ârötf
(
°dîr
, "<start_bit>ÇeedsÅo be between 0ánd 7\n");

943 i‡(
cﬁp
) {

944 i‡(1 !
	`ssˇnf
(
cﬁp
 + 1, "%d", &
èvp
->
num_bôs
))

947 i‡((
èvp
->
num_bôs
 < 1) || (tavp->num_bits > 64)) {

948 
	`Ârötf
(
°dîr
, "<num_bits>ÇeedsÅo be between 1ánd 64\n");

953 
	}
}

957 
	$föd_out_düg_∑ge_desc
(
∑ge_num
)

959 c⁄° 
düg_∑ge_code
 * 
pcdp
;

961 
pcdp
 = 
out_dpc_¨r
;Öcdp->
desc
; ++pcdp) {

962 i‡(
∑ge_num
 =
pcdp
->
∑ge_code
)

963  
pcdp
->
desc
;

964 i‡(
∑ge_num
 < 
pcdp
->
∑ge_code
)

965  
NULL
;

967  
NULL
;

968 
	}
}

975 
	$do_£nddüg
(
sg_fd
, 
pf_bô
, * 
outgoög_pg
, 
outgoög_Àn
,

976 
noisy
, 
vîbo£
)

978 c⁄° * 
˝
;

979 
∑ge_num
;

981 i‡(
outgoög_pg
 && (
vîbo£
 > 2)) {

982 
∑ge_num
 = ((c⁄° *)
outgoög_pg
)[0];

983 
˝
 = 
	`föd_out_düg_∑ge_desc
(
∑ge_num
);

984 i‡(
˝
)

985 
	`Ârötf
(
°dîr
, " Síd dügno°i¯cmdÇame: %s\n", 
˝
);

987 
	`Ârötf
(
°dîr
, " Send diagnostic cmdÇumber: 0x%x\n",

988 
∑ge_num
);

990  
	`sg_Œ_£nd_düg
(
sg_fd
, 0 , 
pf_bô
, 0 ,

992 0 , 
outgoög_pg
, 
outgoög_Àn
,

993 
noisy
, 
vîbo£
);

994 
	}
}

999 
	$föd_düg_∑ge_desc
(
∑ge_num
)

1001 c⁄° 
düg_∑ge_code
 * 
pcdp
;

1003 
pcdp
 = 
dpc_¨r
;Öcdp->
desc
; ++pcdp) {

1004 i‡(
∑ge_num
 =
pcdp
->
∑ge_code
)

1005  
pcdp
->
desc
;

1006 i‡(
∑ge_num
 < 
pcdp
->
∑ge_code
)

1007  
NULL
;

1009  
NULL
;

1010 
	}
}

1014 
	$föd_ö_düg_∑ge_desc
(
∑ge_num
)

1016 c⁄° 
düg_∑ge_code
 * 
pcdp
;

1018 
pcdp
 = 
ö_dpc_¨r
;Öcdp->
desc
; ++pcdp) {

1019 i‡(
∑ge_num
 =
pcdp
->
∑ge_code
)

1020  
pcdp
->
desc
;

1021 i‡(
∑ge_num
 < 
pcdp
->
∑ge_code
)

1022  
NULL
;

1024  
NULL
;

1025 
	}
}

1029 
	$föd_ñemít_äame
(
ñem_ty≥_code
, * 
b
, 
mÀn_b
)

1031 c⁄° 
ñemít_ty≥_t
 * 
ëp
;

1032 
Àn
;

1034 i‡((
NULL
 =
b
Ë|| (
mÀn_b
 < 1))

1035  
b
;

1036 
ëp
 = 
ñemít_ty≥_¨r
;Éç->
desc
; ++etp) {

1037 i‡(
ñem_ty≥_code
 =
ëp
->elem_type_code) {

1038 
Àn
 = 
	`°æí
(
ëp
->
desc
);

1039 i‡(
Àn
 < 
mÀn_b
)

1040 
	`°r˝y
(
b
, 
ëp
->
desc
);

1042 
	`°∫˝y
(
b
, 
ëp
->
desc
, 
mÀn_b
 - 1);

1043 
b
[
mÀn_b
 - 1] = '\0';

1045  
b
;

1046 } i‡(
ñem_ty≥_code
 < 
ëp
->elem_type_code)

1049 i‡(
ñem_ty≥_code
 < 0x80)

1050 
	`¢¥ötf
(
b
, 
mÀn_b
 - 1, "[0x%x]", 
ñem_ty≥_code
);

1052 
	`¢¥ötf
(
b
, 
mÀn_b
 - 1, "víd‹ s≥cifi¯[0x%x]", 
ñem_ty≥_code
);

1053 
b
[
mÀn_b
 - 1] = '\0';

1054  
b
;

1055 
	}
}

1060 
	$a˘ive_ë_´•
(
ñ_ty≥
)

1062 i‡((
ñ_ty≥
 >0Ë&& (ñ_ty≥ < 
NUM_ACTIVE_ET_AESP_ARR
))

1063  
a˘ive_ë_´•_¨r
[
ñ_ty≥
];

1066 
	}
}

1073 
	$do_ªc_düg
(
sg_fd
, 
∑ge_code
, * 
r•_buff
,

1074 
r•_buff_size
, c⁄° 
›ts_t
 * 
›
, * 
r•_À≈
)

1076 
r•_Àn
, 
ªs
;

1077 c⁄° * 
˝
;

1079 
	`mem£t
(
r•_buff
, 0, 
r•_buff_size
);

1080 i‡(
r•_À≈
)

1081 *
r•_À≈
 = 0;

1082 
˝
 = 
	`föd_ö_düg_∑ge_desc
(
∑ge_code
);

1083 i‡(
›
->
vîbo£
 > 1) {

1084 i‡(
˝
)

1085 
	`Ârötf
(
°dîr
, " Receive diagnosticÑesults cmd for %s "

1086 "∑ge\n", 
˝
);

1088 
	`Ârötf
(
°dîr
, " Receive diagnosticÑesults cmd for "

1089 "∑gê0x%x\n", 
∑ge_code
);

1091 
ªs
 = 
	`sg_Œ_ª˚ive_düg
(
sg_fd
, 1 , 
∑ge_code
, 
r•_buff
,

1092 
r•_buff_size
, 1, 
›
->
vîbo£
);

1093 i‡(0 =
ªs
) {

1094 
r•_Àn
 = (
r•_buff
[2] << 8) +Ñsp_buff[3] + 4;

1095 i‡(
r•_Àn
 > 
r•_buff_size
) {

1096 
	`Ârötf
(
°dîr
, "<<< warningÑesponse bufferÅoo small "

1097 "[%d buà√ed %d]>>>\n", 
r•_buff_size
, 
r•_Àn
);

1098 
r•_Àn
 = 
r•_buff_size
;

1100 i‡(
r•_À≈
)

1101 *
r•_À≈
 = 
r•_Àn
;

1102 i‡(
∑ge_code
 !
r•_buff
[0]) {

1103 i‡((0x9 =
r•_buff
[0]) && (1 &Ñsp_buff[1])) {

1104 
	`Ârötf
(
°dîr
, "Enclosure busy,ÅryágainÜater\n");

1105 i‡(
›
->
do_hex
)

1106 
	`dSåHex
((c⁄° *)
r•_buff
, 
r•_Àn
, 0);

1107 } i‡(0x8 =
r•_buff
[0]) {

1108 
	`Ârötf
(
°dîr
, "Enclosure only supports Short Enclosure "

1109 "Sètus: 0x%x\n", 
r•_buff
[1]);

1111 
	`Ârötf
(
°dîr
, "InvalidÑesponse, wantedÖage code: 0x%x "

1112 "buàgŸ 0x%x\n", 
∑ge_code
, 
r•_buff
[0]);

1113 
	`dSåHex
((c⁄° *)
r•_buff
, 
r•_Àn
, 0);

1118 } i‡(
›
->
vîbo£
) {

1119 i‡(
˝
)

1120 
	`Ârötf
(
°dîr
, "AttemptÅo fetch %s diagnosticÖage failed\n",

1121 
˝
);

1123 
	`Ârötf
(
°dîr
, "AttemptÅo fetch status diagnosticÖage "

1124 "[0x%x] faûed\n", 
∑ge_code
);

1125 
ªs
) {

1126 
SG_LIB_CAT_NOT_READY
:

1127 
	`Ârötf
(
°dîr
, " deviceÇoÑeady\n");

1129 
SG_LIB_CAT_ABORTED_COMMAND
:

1130 
	`Ârötf
(
°dîr
, "áborted command\n");

1132 
SG_LIB_CAT_UNIT_ATTENTION
:

1133 
	`Ârötf
(
°dîr
, " unitáttention\n");

1135 
SG_LIB_CAT_INVALID_OP
:

1136 
	`Ârötf
(
°dîr
, " Receive diagnosticÑesults commandÇot "

1139 
SG_LIB_CAT_ILLEGAL_REQ
:

1140 
	`Ârötf
(
°dîr
, " Receive diagnosticÑesults command, "

1145  
ªs
;

1146 
	}
}

1149 
	$dSåRaw
(c⁄° * 
°r
, 
Àn
)

1151 
k
;

1153 
k
 = 0 ; k < 
Àn
; ++k)

1154 
	`¥ötf
("%c", 
°r
[
k
]);

1155 
	}
}

1160 
	$£s_c⁄figuøti⁄_sdg
(c⁄° * 
ª•
, 
ª•_Àn
)

1162 
j
, 
k
, 
ñ
, 
num_subs
, 
sum_ñem_ty≥s
;

1163 
gí_code
;

1164 c⁄° * 
u˝
;

1165 c⁄° * 
œ°_u˝
;

1166 c⁄° * 
ãxt_u˝
;

1167 
b
[64];

1169 
	`¥ötf
("Configuration diagnosticÖage:\n");

1170 i‡(
ª•_Àn
 < 4)

1171 
åunˇãd
;

1172 
num_subs
 = 
ª•
[1] + 1;

1173 
sum_ñem_ty≥s
 = 0;

1174 
œ°_u˝
 = 
ª•
 + 
ª•_Àn
 - 1;

1175 
	`¥ötf
("Çumber of secondary subenclosures: %d\n",

1176 
num_subs
 - 1);

1177 
gí_code
 = (
ª•
[4] << 24) | (resp[5] << 16) |

1178 (
ª•
[6] << 8) |Ñesp[7];

1179 
	`¥ötf
(" gíî©i⁄ code: 0x%x\n", 
gí_code
);

1180 
	`¥ötf
("Énclosure descriptorÜist\n");

1181 
u˝
 = 
ª•
 + 8;

1182 
k
 = 0; k < 
num_subs
; ++k, 
u˝
 +
ñ
) {

1183 i‡((
u˝
 + 3Ë> 
œ°_u˝
)

1184 
åunˇãd
;

1185 
ñ
 = 
u˝
[3] + 4;

1186 
sum_ñem_ty≥s
 +
u˝
[2];

1187 
	`¥ötf
(" Subí˛osuª idítifõr: %d%s\n", 
u˝
[1],

1188 (
u˝
[1] ? "" : " (primary)"));

1189 
	`¥ötf
("Ñelative ESÖrocess id: %d,Çumber of ESÖrocesses"

1190 ": %d\n", ((
u˝
[0] & 0x70) >> 4), (ucp[0] & 0x7));

1191 
	`¥ötf
("Çumbî o‡ty≥ des¸ùt‹ hódîs: %d\n", 
u˝
[2]);

1192 i‡(
ñ
 < 40) {

1193 
	`Ârötf
(
°dîr
, "Én¯des¸ùt‹Üí=%d ??\n", 
ñ
);

1196 
	`¥ötf
("ÉnclosureÜogical identifier (hex): ");

1197 
j
 = 0; j < 8; ++j)

1198 
	`¥ötf
("%02x", 
u˝
[4 + 
j
]);

1199 
	`¥ötf
("\nÉnclosure vendor: %.8sÖroduct: %.16sÑev: %.4s\n",

1200 
u˝
 + 12, ucp + 20, ucp + 36);

1201 i‡(
ñ
 > 40) {

1202 
	`¥ötf
(" vendor-specific data:\n");

1204 
	`¥ötf
(" ");

1205 
j
 = 0; j < (
ñ
 - 40); ++j) {

1206 i‡((
j
 > 0) && (0 == (j % 16)))

1207 
	`¥ötf
("\n ");

1208 
	`¥ötf
("%02x ", *(
u˝
 + 40 + 
j
));

1210 
	`¥ötf
("\n");

1214 
	`¥ötf
("Åype descriptor header/textÜist\n");

1215 
ãxt_u˝
 = 
u˝
 + (
sum_ñem_ty≥s
 * 4);

1216 
k
 = 0; k < 
sum_ñem_ty≥s
; ++k, 
u˝
 += 4) {

1217 i‡((
u˝
 + 3Ë> 
œ°_u˝
)

1218 
åunˇãd
;

1219 
	`¥ötf
(" ElementÅype: %s, subenclosure id: %d\n",

1220 
	`föd_ñemít_äame
(
u˝
[0], 
b
, (b)), ucp[2]);

1221 
	`¥ötf
("Çumbî o‡possibÀÉÀmíts: %d\n", 
u˝
[1]);

1222 i‡(
u˝
[3] > 0) {

1223 i‡(
ãxt_u˝
 > 
œ°_u˝
)

1224 
åunˇãd
;

1225 
	`¥ötf
("Åext: %.*s\n", 
u˝
[3], 
ãxt_u˝
);

1226 
ãxt_u˝
 +
u˝
[3];

1230 
åunˇãd
:

1231 
	`Ârötf
(
°dîr
, " <<<ses_configuration_sdg:ÑesponseÅoo short>>>\n");

1233 
	}
}

1239 
	$p›uœã_ty≥_desc_hdr_¨r
(
fd
, 
ty≥_desc_hdr_t
 * 
tdhp
,

1240 * 
gíî©i⁄p
,

1241 
í˛osuª_öfo
 * 
¥im¨y_ù
,

1242 
›ts_t
 * 
›
)

1244 
ª•_Àn
, 
k
, 
ñ
, 
num_subs
, 
sum_ty≥_dhódîs
, 
ªs
, 
n
;

1245 
ªt
 = 0;

1246 
gí_code
;

1247 * 
ª•
;

1248 c⁄° * 
u˝
;

1249 c⁄° * 
œ°_u˝
;

1251 
ª•
 = (*)
	`ˇŒoc
(
MX_ALLOC_LEN
, 1);

1252 i‡(
NULL
 =
ª•
) {

1253 
	`Ârötf
(
°dîr
, "populate: unableÅoállocate %d bytes on heap\n",

1254 
MX_ALLOC_LEN
);

1255 
ªt
 = -1;

1256 
the_íd
;

1258 
ªs
 = 
	`do_ªc_düg
(
fd
, 
DPC_CONFIGURATION
, 
ª•
, 
MX_ALLOC_LEN
, 
›
,

1259 &
ª•_Àn
);

1260 i‡(
ªs
) {

1261 
	`Ârötf
(
°dîr
, "p›uœã: couldn'àªad c⁄figÖage,Ñes=%d\n", 
ªs
);

1262 
ªt
 = -1;

1263 
the_íd
;

1265 i‡(
ª•_Àn
 < 4) {

1266 
ªt
 = -1;

1267 
the_íd
;

1269 
num_subs
 = 
ª•
[1] + 1;

1270 
sum_ty≥_dhódîs
 = 0;

1271 
œ°_u˝
 = 
ª•
 + 
ª•_Àn
 - 1;

1272 
gí_code
 = (
ª•
[4] << 24) | (resp[5] << 16) |

1273 (
ª•
[6] << 8) |Ñesp[7];

1274 i‡(
gíî©i⁄p
)

1275 *
gíî©i⁄p
 = 
gí_code
;

1276 
u˝
 = 
ª•
 + 8;

1277 
k
 = 0; k < 
num_subs
; ++k, 
u˝
 +
ñ
) {

1278 i‡((
u˝
 + 3Ë> 
œ°_u˝
)

1279 
p_åunˇãd
;

1280 
ñ
 = 
u˝
[3] + 4;

1281 
sum_ty≥_dhódîs
 +
u˝
[2];

1282 i‡(
ñ
 < 40) {

1283 
	`Ârötf
(
°dîr
, "populate: shortÉnc descriptorÜen=%d ??\n",

1284 
ñ
);

1287 i‡((0 =
k
Ë&& 
¥im¨y_ù
) {

1288 ++
¥im¨y_ù
->
have_öfo
;

1289 
¥im¨y_ù
->
ªl_e•_id
 = (
u˝
[0] & 0x70) >> 4;

1290 
¥im¨y_ù
->
num_e•
 = (
u˝
[0] & 0x7);

1291 
	`mem˝y
(
¥im¨y_ù
->
íc_log_id
, 
u˝
 + 4, 8);

1292 
	`mem˝y
(
¥im¨y_ù
->
íc_víd‹_id
, 
u˝
 + 12, 8);

1293 
	`mem˝y
(
¥im¨y_ù
->
¥odu˘_id
, 
u˝
 + 20, 16);

1294 
	`mem˝y
(
¥im¨y_ù
->
¥odu˘_ªv_Àvñ
, 
u˝
 + 36, 4);

1297 
k
 = 0; k < 
sum_ty≥_dhódîs
; ++k, 
u˝
 += 4) {

1298 i‡((
u˝
 + 3Ë> 
œ°_u˝
)

1299 
p_åunˇãd
;

1300 i‡(
k
 >
MX_ELEM_HDR
) {

1301 
	`Ârötf
(
°dîr
, "populate:Åoo manyÉlements\n");

1302 
ªt
 = -1;

1303 
the_íd
;

1305 
tdhp
[
k
].
ëy≥
 = 
u˝
[0];

1306 
tdhp
[
k
].
num_ñemíts
 = 
u˝
[1];

1307 
tdhp
[
k
].
£_id
 = 
u˝
[2];

1308 
tdhp
[
k
].
txt_Àn
 = 
u˝
[3];

1310 i‡(
›
->
öd_giví
 && op->
öd_ëp
) {

1311 
n
 = 
›
->
öd_ëp_num
;

1312 
k
 = 0; k < 
sum_ty≥_dhódîs
; ++k) {

1313 i‡(
›
->
öd_ëp
->
ñem_ty≥_code
 =
tdhp
[
k
].
ëy≥
) {

1314 i‡(0 =
n
)

1317 --
n
;

1320 i‡(
k
 < 
sum_ty≥_dhódîs
)

1321 
›
->
öd_th
 = 
k
;

1323 i‡(
›
->
öd_ëp_num
)

1324 
	`Ârötf
(
°dîr
, "populate: unableÅo findÉlementÅype "

1325 "'%s%d'\n", 
›
->
öd_ëp
->
abbªv
, op->
öd_ëp_num
);

1327 
	`Ârötf
(
°dîr
, "populate: unableÅo findÉlementÅype "

1329 
›
->
öd_ëp
->
abbªv
);

1330 
ªt
 = -1;

1331 
the_íd
;

1334 
ªt
 = 
sum_ty≥_dhódîs
;

1335 
the_íd
;

1337 
p_åunˇãd
:

1338 
	`Ârötf
(
°dîr
, "populate: configÅoo short\n");

1339 
ªt
 = -1;

1341 
the_íd
:

1342 i‡(
ª•
)

1343 
	`‰ì
(
ª•
);

1344  
ªt
;

1345 
	}
}

1348 
	$föd_ßs_c⁄√˘‹_ty≥
(
c⁄n_ty≥
, * 
buff
, 
buff_Àn
)

1350 
c⁄n_ty≥
) {

1352 
	`¢¥ötf
(
buff
, 
buff_Àn
, "No information");

1355 
	`¢¥ötf
(
buff
, 
buff_Àn
, "SAS 4xÑeceptacle (SFF-8470) "

1359 
	`¢¥ötf
(
buff
, 
buff_Àn
, "Mini SAS 4xÑeceptacle (SFF-8088) "

1363 
	`¢¥ötf
(
buff
, 
buff_Àn
, "QSFP+Ñeceptacle (SFF-8436) "

1367 
	`¢¥ötf
(
buff
, 
buff_Àn
, "Mini SAS 4xáctiveÑeceptacle (SFF-8088) "

1371 
	`¢¥ötf
(
buff
, 
buff_Àn
, "Mini SAS HD 4xÑeceptacle (SFF-8644) "

1375 
	`¢¥ötf
(
buff
, 
buff_Àn
, "Mini SAS HD 8xÑeceptacle (SFF-8644) "

1379 
	`¢¥ötf
(
buff
, 
buff_Àn
, "Mini SAS HD 16xÑeceptacle (SFF-8644) "

1383 
	`¢¥ötf
(
buff
, 
buff_Àn
, "Vendor specificÉxternal connector");

1386 
	`¢¥ötf
(
buff
, 
buff_Àn
, "SAS 4iÖlug (SFF-8484) [max 4Öhys]");

1389 
	`¢¥ötf
(
buff
, 
buff_Àn
, "Mini SAS 4iÑeceptacle (SFF-8087) "

1393 
	`¢¥ötf
(
buff
, 
buff_Àn
, "Mini SAS HD 4iÑeceptacle (SFF-8643) "

1397 
	`¢¥ötf
(
buff
, 
buff_Àn
, "Mini SAS HD 8iÑeceptacle (SFF-8643) "

1401 
	`¢¥ötf
(
buff
, 
buff_Àn
, "SAS Drive backplaneÑeceptacle (SFF-8482) "

1405 
	`¢¥ötf
(
buff
, 
buff_Àn
, "SATA hostÖlug [max 1Öhy]");

1408 
	`¢¥ötf
(
buff
, 
buff_Àn
, "SAS DriveÖlug (SFF-8482) [max 2Öhys]");

1411 
	`¢¥ötf
(
buff
, 
buff_Àn
, "SATA deviceÖlug [max 1Öhy]");

1414 
	`¢¥ötf
(
buff
, 
buff_Àn
, "Micro SASÑeceptacle [max 2Öhys]");

1417 
	`¢¥ötf
(
buff
, 
buff_Àn
, "Micro SATA deviceÖlug [max 1Öhy]");

1420 
	`¢¥ötf
(
buff
, 
buff_Àn
, "Micro SASÖlug (SFF-8486) [max 2Öhys]");

1423 
	`¢¥ötf
(
buff
, 
buff_Àn
, "Micro SAS/SATAÖlug (SFF-8486) "

1427 
	`¢¥ötf
(
buff
, 
buff_Àn
, "SAS virtual connector [max 1Öhy]");

1429 0x3f: 
	`¢¥ötf
(
buff
, 
buff_Àn
, "Vendor specific internal connector");

1432 i‡(
c⁄n_ty≥
 < 0x10)

1433 
	`¢¥ötf
(
buff
, 
buff_Àn
, "unknownÉxternal connectorÅype: 0x%x",

1434 
c⁄n_ty≥
);

1435 i‡(
c⁄n_ty≥
 < 0x20)

1436 
	`¢¥ötf
(
buff
, 
buff_Àn
, "unknown internal wide connectorÅype: "

1437 "0x%x", 
c⁄n_ty≥
);

1438 i‡(
c⁄n_ty≥
 < 0x30)

1439 
	`¢¥ötf
(
buff
, 
buff_Àn
, "unknown internal connectorÅoÉnd "

1440 "devi˚,Åy≥: 0x%x", 
c⁄n_ty≥
);

1441 i‡(
c⁄n_ty≥
 < 0x3f)

1442 
	`¢¥ötf
(
buff
, 
buff_Àn
, "reserved for internal connector, "

1443 "ty≥: 0x%x", 
c⁄n_ty≥
);

1444 i‡(
c⁄n_ty≥
 < 0x70)

1445 
	`¢¥ötf
(
buff
, 
buff_Àn
, "reserved connectorÅype: 0x%x",

1446 
c⁄n_ty≥
);

1447 i‡(
c⁄n_ty≥
 < 0x80)

1448 
	`¢¥ötf
(
buff
, 
buff_Àn
, "vendor specific connectorÅype: 0x%x",

1449 
c⁄n_ty≥
);

1451 
	`¢¥ötf
(
buff
, 
buff_Àn
, "unexpected connectorÅype: 0x%x",

1452 
c⁄n_ty≥
);

1455  
buff
;

1456 
	}
}

1458 c⁄° * 
	gñem_°©us_code_desc
[] = {

1465 c⁄° * 
	ga˘uÆ_•ìd_desc
[] = {

1471 c⁄° * 
	gnv_ˇche_unô
[] = {

1475 c⁄° * 
	göv›_ty≥_desc
[] = {

1481 
	$íc_°©us_hñ≥r
(c⁄° * 
∑d
, c⁄° * 
°©p
, 
ëy≥
,

1482 c⁄° 
›ts_t
 * 
›
)

1484 
ªs
, 
a
, 
b
;

1485 
bb
[128];

1486 
fûãr
 = 
›
->
do_fûãr
;

1488 i‡(
›
->
ö√r_hex
) {

1489 
	`¥ötf
("%s%02x %02x %02x %02x\n", 
∑d
, 
°©p
[0], statp[1], statp[2],

1490 
°©p
[3]);

1493 
	`¥ötf
("%sPredicted failure=%d, Disabled=%d, Swap=%d, status: %s\n",

1494 
∑d
, !!(
°©p
[0] & 0x40), !!(statp[0] & 0x20),

1495 !!(
°©p
[0] & 0x10), 
ñem_°©us_code_desc
[statp[0] & 0xf]);

1496 
ëy≥
) {

1497 
UNSPECIFIED_ETC
:

1498 i‡(
›
->
vîbo£
)

1499 
	`¥ötf
("%sstatus in hex: %02x %02x %02x %02x\n",

1500 
∑d
, 
°©p
[0], statp[1], statp[2], statp[3]);

1502 
DEVICE_ETC
:

1503 
	`¥ötf
("%sSlŸáddªss: %d\n", 
∑d
, 
°©p
[1]);

1504 i‡((! 
fûãr
Ë|| (0xe0 & 
°©p
[2]))

1505 
	`¥ötf
("%sApp client bypassed A=%d, DoÇotÑemove=%d, Enc "

1506 "by∑s£d A=%d\n", 
∑d
, !!(
°©p
[2] & 0x80),

1507 !!(
°©p
[2] & 0x40), !!(statp[2] & 0x20));

1508 i‡((! 
fûãr
Ë|| (0x1¯& 
°©p
[2]))

1509 
	`¥ötf
("%sEnc bypassed B=%d, ReadyÅo insert=%d, RMV=%d, Ident="

1510 "%d\n", 
∑d
, !!(
°©p
[2] & 0x10), !!(statp[2] & 0x8),

1511 !!(
°©p
[2] & 0x4), !!(statp[2] & 0x2));

1512 i‡((! 
fûãr
Ë|| ((1 & 
°©p
[2]) || (0xe0 & statp[3])))

1513 
	`¥ötf
("%sReport=%d, App client bypassed B=%d, Fault sensed=%d, "

1514 "Fau…Ñeque°ed=%d\n", 
∑d
, !!(
°©p
[2] & 0x1),

1515 !!(
°©p
[3] & 0x80), !!(statp[3] & 0x40),

1516 !!(
°©p
[3] & 0x20));

1517 i‡((! 
fûãr
Ë|| (0x1ê& 
°©p
[3]))

1518 
	`¥ötf
("%sDevice off=%d, Bypassed A=%d, Bypassed B=%d, Device "

1519 "by∑s£d A=%d\n", 
∑d
, !!(
°©p
[3] & 0x10),

1520 !!(
°©p
[3] & 0x8), !!(statp[3] & 0x4), !!(statp[3] & 0x2));

1521 i‡((! 
fûãr
Ë|| (0x1 & 
°©p
[3]))

1522 
	`¥ötf
("%sDevi˚ by∑s£d B=%d\n", 
∑d
, !!(
°©p
[3] & 0x1));

1524 
POWER_SUPPLY_ETC
:

1525 i‡((! 
fûãr
Ë|| ((0x80 & 
°©p
[1]) || (0xe & statp[2])))

1526 
	`¥ötf
("%sIdent=%d, DC overvoltage=%d, DC undervoltage=%d, DC "

1527 "ovîcuºít=%d\n", 
∑d
, !!(
°©p
[1] & 0x80),

1528 !!(
°©p
[2] & 0x8), !!(statp[2] & 0x4), !!(statp[2] & 0x2));

1529 i‡((! 
fûãr
Ë|| (0xf8 & 
°©p
[3]))

1530 
	`¥ötf
("%sHot swap=%d, Fail=%d, Requested on=%d, Off=%d, "

1531 "Ovîtm∞Áû=%d\n", 
∑d
, !!(
°©p
[3] & 0x80),

1532 !!(
°©p
[3] & 0x40), !!(statp[3] & 0x20),

1533 !!(
°©p
[3] & 0x10), !!(statp[3] & 0x8));

1534 i‡((! 
fûãr
Ë|| (0x7 & 
°©p
[3]))

1535 
	`¥ötf
("%sTemperature warn=%d, AC fail=%d, DC fail=%d\n",

1536 
∑d
, !!(
°©p
[3] & 0x4), !!(statp[3] & 0x2),

1537 !!(
°©p
[3] & 0x1));

1539 
COOLING_ETC
:

1540 i‡((! 
fûãr
Ë|| ((0xc0 & 
°©p
[1]) || (0xf0 & statp[3])))

1541 
	`¥ötf
("%sIdent=%d, Hot swap=%d, Fail=%d, Requested on=%d, "

1542 "Off=%d\n", 
∑d
, !!(
°©p
[1] & 0x80), !!(statp[3] & 0x80),

1543 !!(
°©p
[3] & 0x40), !!(statp[3] & 0x20),

1544 !!(
°©p
[3] & 0x10));

1545 
	`¥ötf
("%sA˘uÆ s≥ed=%dÑpm, F™ %s\n", 
∑d
,

1546 (((0x7 & 
°©p
[1]) << 8) + statp[2]) * 10,

1547 
a˘uÆ_•ìd_desc
[7 & 
°©p
[3]]);

1549 
TEMPERATURE_ETC
:

1550 i‡((! 
fûãr
Ë|| ((0xc0 & 
°©p
[1]) || (0xf & statp[3]))) {

1551 
	`¥ötf
("%sIdent=%d, Fail=%d, OT failure=%d, OT warning=%d, "

1552 "UT faûuª=%d\n", 
∑d
, !!(
°©p
[1] & 0x80),

1553 !!(
°©p
[1] & 0x40), !!(statp[3] & 0x8),

1554 !!(
°©p
[3] & 0x4), !!(statp[3] & 0x2));

1555 
	`¥ötf
("%sUT w¨nög=%d\n", 
∑d
, !!(
°©p
[3] & 0x1));

1557 i‡(
°©p
[2])

1558 
	`¥ötf
("%sTem≥øtuª=%d C\n", 
∑d
,

1559 ()
°©p
[2] - 
TEMPERAT_OFF
);

1561 
	`¥ötf
("%sTem≥øtuª: <ª£rved>\n", 
∑d
);

1563 
DOOR_ETC
:

1564 i‡((! 
fûãr
Ë|| ((0xc0 & 
°©p
[1]) || (0x1 & statp[3])))

1565 
	`¥ötf
("%sIdít=%d, Faû=%d, O≥n=%d, U∆ock=%d\n", 
∑d
,

1566 !!(
°©p
[1] & 0x80), !!(statp[1] & 0x40),

1567 !!(
°©p
[3] & 0x2), !!(statp[3] & 0x1));

1569 
AUD_ALARM_ETC
:

1570 i‡((! 
fûãr
Ë|| ((0xc0 & 
°©p
[1]) || (0xd0 & statp[3])))

1571 
	`¥ötf
("%sIdent=%d, Fail=%d, Request mute=%d, Mute=%d, "

1572 "Remöd=%d\n", 
∑d
, !!(
°©p
[1] & 0x80),

1573 !!(
°©p
[1] & 0x40), !!(statp[3] & 0x80),

1574 !!(
°©p
[3] & 0x40), !!(statp[3] & 0x10));

1575 i‡((! 
fûãr
Ë|| (0x‡& 
°©p
[3]))

1576 
	`¥ötf
("%sTone indicator: Info=%d, Non-crit=%d, Crit=%d, "

1577 "Uƒecov=%d\n", 
∑d
, !!(
°©p
[3] & 0x8), !!(statp[3] & 0x4),

1578 !!(
°©p
[3] & 0x2), !!(statp[3] & 0x1));

1580 
ESC_ELECTRONICS_ETC
:

1581 i‡((! 
fûãr
Ë|| (0xc0 & 
°©p
[1]) || (0x1 & statp[2]) ||

1582 (0x80 & 
°©p
[3]))

1583 
	`¥ötf
("%sIdít=%d, Faû=%d, Rï‹t=%d, HŸ sw≠=%d\n", 
∑d
,

1584 !!(
°©p
[1] & 0x80), !!(statp[1] & 0x40),

1585 !!(
°©p
[2] & 0x1), !!(statp[3] & 0x80));

1587 
SCC_CELECTR_ETC
:

1588 i‡((! 
fûãr
Ë|| ((0xc0 & 
°©p
[1]) || (0x1 & statp[2])))

1589 
	`¥ötf
("%sIdít=%d, Faû=%d, Rï‹t=%d\n", 
∑d
,

1590 !!(
°©p
[1] & 0x80), !!(statp[1] & 0x40),

1591 !!(
°©p
[2] & 0x1));

1593 
NV_CACHE_ETC
:

1594 
ªs
 = (
°©p
[2] << 8) + statp[3];

1595 
	`¥ötf
("%sIdent=%d, Fail=%d, Size multiplier=%d, Non volatile cache "

1596 "size=0x%x\n", 
∑d
, !!(
°©p
[1] & 0x80), !!(statp[1] & 0x40),

1597 (
°©p
[1] & 0x3), 
ªs
);

1598 
	`¥ötf
("%sHí˚Ç⁄ vﬁ©ûêˇchêsize: %d %s\n", 
∑d
, 
ªs
,

1599 
nv_ˇche_unô
[
°©p
[1] & 0x3]);

1601 
INV_OP_REASON_ETC
:

1602 
ªs
 = ((
°©p
[1] >> 6) & 3);

1603 
	`¥ötf
("%sInv›Åy≥=%d %s\n", 
∑d
, 
ªs
, 
öv›_ty≥_desc
[res]);

1604 
ªs
) {

1606 
	`¥ötf
("%sPagênŸ suµ‹ãd=%d\n", 
∑d
, (
°©p
[1] & 1));

1609 
	`¥ötf
("%sByã off£t=%d, bôÇumbî=%d\n", 
∑d
,

1610 (
°©p
[2] << 8) + statp[3], (statp[1] & 7));

1614 
	`¥ötf
("%¶a° 3 byã†(hex): %02x %02x %02x\n", 
∑d
, 
°©p
[1],

1615 
°©p
[2], statp[3]);

1621 
UI_POWER_SUPPLY_ETC
:

1622 i‡(0 =
°©p
[1])

1623 
	`¥ötf
("%sB©ãry sètus: disch¨ged o∏unknown\n", 
∑d
);

1624 i‡(255 =
°©p
[1])

1625 
	`¥ötf
("%sB©ãry sètus: 255 o∏m‹êmöuã†ªmaöög\n", 
∑d
);

1627 
	`¥ötf
("%sB©ãry sètus: %d möuã†ªmaöög\n", 
∑d
, 
°©p
[1]);

1628 i‡((! 
fûãr
Ë|| (0xf8 & 
°©p
[2]))

1629 
	`¥ötf
("%sACÜow=%d, AC high=%d, AC qual=%d, AC fail=%d, DC fail="

1630 "%d\n", 
∑d
, !!(
°©p
[2] & 0x80), !!(statp[2] & 0x40),

1631 !!(
°©p
[2] & 0x20), !!(statp[2] & 0x10),

1632 !!(
°©p
[2] & 0x8));

1633 i‡((! 
fûãr
Ë|| ((0x7 & 
°©p
[2]) || (0xc3 & statp[3]))) {

1634 
	`¥ötf
("%sUPS fail=%d, Warn=%d, Intf fail=%d, Ident=%d, Fail=%d, "

1635 "B©àÁû=%d\n", 
∑d
, !!(
°©p
[2] & 0x4),

1636 !!(
°©p
[2] & 0x2), !!(statp[2] & 0x1),

1637 !!(
°©p
[3] & 0x80), !!(statp[3] & 0x40),

1638 !!(
°©p
[3] & 0x2));

1639 
	`¥ötf
("%sBPF=%d\n", 
∑d
, !!(
°©p
[3] & 0x1));

1642 
DISPLAY_ETC
:

1643 i‡((! 
fûãr
Ë|| (0xc0 & 
°©p
[1]))

1644 
	`¥ötf
("%sIdent=%d, Fail=%d, Display mode status=%d, Display "

1645 "ch¨a˘î sètus=0x%x\n", 
∑d
, !!(
°©p
[1] & 0x80),

1646 !!(
°©p
[1] & 0x40), (statp[1] & 0x3),

1647 ((
°©p
[2] << 8) & statp[3]));

1649 
KEY_PAD_ETC
:

1650 i‡((! 
fûãr
Ë|| (0xc0 & 
°©p
[1]))

1651 
	`¥ötf
("%sIdít=%d, Faû=%d\n", 
∑d
, !!(
°©p
[1] & 0x80),

1652 !!(
°©p
[1] & 0x40));

1654 
ENCLOSURE_ETC
:

1655 
a
 = ((
°©p
[2] >> 2) & 0x3f);

1656 i‡((! 
fûãr
Ë|| ((0x80 & 
°©p
[1]Ë|| 
a
 || (0x2 & statp[2])))

1657 
	`¥ötf
("%sIdent=%d, Time untilÖower cycle=%d, "

1658 "Faûuª indiˇti⁄=%d\n", 
∑d
, !!(
°©p
[1] & 0x80),

1659 
a
, !!(
°©p
[2] & 0x2));

1660 
b
 = ((
°©p
[3] >> 2) & 0x3f);

1661 i‡((! 
fûãr
Ë|| (0x1 & 
°©p
[2]Ë|| 
a
 || 
b
)

1662 
	`¥ötf
("%sWarning indication=%d, RequestedÖower off "

1663 "duøti⁄=%d\n", 
∑d
, !!(
°©p
[2] & 0x2), 
b
);

1664 i‡((! 
fûãr
Ë|| (0x3 & 
°©p
[3]))

1665 
	`¥ötf
("%sFailureÑequested=%d, WarningÑequested=%d\n",

1666 
∑d
, !!(
°©p
[3] & 0x2), !!(statp[3] & 0x1));

1668 
SCSI_PORT_TRAN_ETC
:

1669 i‡((! 
fûãr
Ë|| ((0xc0 & 
°©p
[1]) || (0x1 & statp[2]) ||

1670 (0x13 & 
°©p
[3])))

1671 
	`¥ötf
("%sIdent=%d, Fail=%d, Report=%d, Disabled=%d, Loss of "

1672 "lök=%d, Xmô faû=%d\n", 
∑d
, !!(
°©p
[1] & 0x80),

1673 !!(
°©p
[1] & 0x40), !!(statp[2] & 0x1),

1674 !!(
°©p
[3] & 0x10), !!(statp[3] & 0x2),

1675 !!(
°©p
[3] & 0x1));

1677 
LANGUAGE_ETC
:

1678 
	`¥ötf
("%sIdít=%d, L™guagêcode: %.2s\n", 
∑d
, !!(
°©p
[1] & 0x80),

1679 
°©p
 + 2);

1681 
COMM_PORT_ETC
:

1682 i‡((! 
fûãr
Ë|| ((0xc0 & 
°©p
[1]) || (0x1 & statp[3])))

1683 
	`¥ötf
("%sIdít=%d, Faû=%d, DißbÀd=%d\n", 
∑d
,

1684 !!(
°©p
[1] & 0x80), !!(statp[1] & 0x40),

1685 !!(
°©p
[3] & 0x1));

1687 
VOLT_SENSOR_ETC
:

1688 i‡((! 
fûãr
Ë|| (0xc‡& 
°©p
[1])) {

1689 
	`¥ötf
("%sIdent=%d, Fail=%d, Warn Over=%d, Warn Under=%d, "

1690 "Crô Ovî=%d\n", 
∑d
, !!(
°©p
[1] & 0x80),

1691 !!(
°©p
[1] & 0x40), !!(statp[1] & 0x8),

1692 !!(
°©p
[1] & 0x4), !!(statp[1] & 0x2));

1693 
	`¥ötf
("%sCrô Undî=%d\n", 
∑d
, !!(
°©p
[1] & 0x1));

1695 #ifde‡
SG_LIB_MINGW


1696 
	`¥ötf
("%sVﬁège: %g vﬁts\n", 
∑d
,

1697 (()()((
°©p
[2] << 8) + statp[3]) / 100.0));

1699 
	`¥ötf
("%sVﬁège: %.2‡vﬁts\n", 
∑d
,

1700 (()()((
°©p
[2] << 8) + statp[3]) / 100.0));

1703 
CURR_SENSOR_ETC
:

1704 i‡((! 
fûãr
Ë|| (0xˇ & 
°©p
[1]))

1705 
	`¥ötf
("%sIdent=%d, Fail=%d, Warn Over=%d, Crit Over=%d\n",

1706 
∑d
, !!(
°©p
[1] & 0x80), !!(statp[1] & 0x40),

1707 !!(
°©p
[1] & 0x8), !!(statp[1] & 0x2));

1708 #ifde‡
SG_LIB_MINGW


1709 
	`¥ötf
("%sCuºít: %gámps\n", 
∑d
,

1710 (()()((
°©p
[2] << 8) + statp[3]) / 100.0));

1712 
	`¥ötf
("%sCuºít: %.2‡amps\n", 
∑d
,

1713 (()()((
°©p
[2] << 8) + statp[3]) / 100.0));

1716 
SCSI_TPORT_ETC
:

1717 i‡((! 
fûãr
Ë|| ((0xc0 & 
°©p
[1]) || (0x1 & statp[2]) ||

1718 (0x1 & 
°©p
[3])))

1719 
	`¥ötf
("%sIdít=%d, Faû=%d, Rï‹t=%d, E«bÀd=%d\n", 
∑d
,

1720 !!(
°©p
[1] & 0x80), !!(statp[1] & 0x40),

1721 !!(
°©p
[2] & 0x1), !!(statp[3] & 0x1));

1723 
SCSI_IPORT_ETC
:

1724 i‡((! 
fûãr
Ë|| ((0xc0 & 
°©p
[1]) || (0x1 & statp[2]) ||

1725 (0x1 & 
°©p
[3])))

1726 
	`¥ötf
("%sIdít=%d, Faû=%d, Rï‹t=%d, E«bÀd=%d\n", 
∑d
,

1727 !!(
°©p
[1] & 0x80), !!(statp[1] & 0x40),

1728 !!(
°©p
[2] & 0x1), !!(statp[3] & 0x1));

1730 
SIMPLE_SUBENC_ETC
:

1731 
	`¥ötf
("%sIdít=%d, Faû=%d, Sh‹àí˛osuª sètus: 0x%x\n", 
∑d
,

1732 !!(
°©p
[1] & 0x80), !!(statp[1] & 0x40), statp[3]);

1734 
ARRAY_DEV_ETC
:

1735 i‡((! 
fûãr
Ë|| (0xf0 & 
°©p
[1]))

1736 
	`¥ötf
("%sOK=%d, Reserved device=%d, Hot spare=%d, Cons check="

1737 "%d\n", 
∑d
, !!(
°©p
[1] & 0x80), !!(statp[1] & 0x40),

1738 !!(
°©p
[1] & 0x20), !!(statp[1] & 0x10));

1739 i‡((! 
fûãr
Ë|| (0x‡& 
°©p
[1]))

1740 
	`¥ötf
("%sIn critárray=%d, In failedárray=%d, Rebuild/remap=%d"

1741 ", R/Ráb‹t=%d\n", 
∑d
, !!(
°©p
[1] & 0x8),

1742 !!(
°©p
[1] & 0x4), !!(statp[1] & 0x2),

1743 !!(
°©p
[1] & 0x1));

1744 i‡((! 
fûãr
Ë|| (0xf0 & 
°©p
[2]))

1745 
	`¥ötf
("%sApp client bypass A=%d, DoÇotÑemove=%d, Enc bypass "

1746 "A=%d, En¯by∑s†B=%d\n", 
∑d
, !!(
°©p
[2] & 0x80),

1747 !!(
°©p
[2] & 0x40), !!(statp[2] & 0x20),

1748 !!(
°©p
[2] & 0x10));

1749 i‡((! 
fûãr
Ë|| (0x‡& 
°©p
[2]))

1750 
	`¥ötf
("%sReadyÅo insert=%d, RMV=%d, Ident=%d, Report=%d\n",

1751 
∑d
, !!(
°©p
[2] & 0x8), !!(statp[2] & 0x4),

1752 !!(
°©p
[2] & 0x2), !!(statp[2] & 0x1));

1753 i‡((! 
fûãr
Ë|| (0xf0 & 
°©p
[3]))

1754 
	`¥ötf
("%sApp client bypass B=%d, Fault sensed=%d, FaultÑeqstd="

1755 "%d, Devi˚ off=%d\n", 
∑d
, !!(
°©p
[3] & 0x80),

1756 !!(
°©p
[3] & 0x40), !!(statp[3] & 0x20),

1757 !!(
°©p
[3] & 0x10));

1758 i‡((! 
fûãr
Ë|| (0x‡& 
°©p
[3]))

1759 
	`¥ötf
("%sBypassed A=%d, Bypassed B=%d, Dev bypassed A=%d, "

1761 
∑d
, !!(
°©p
[3] & 0x8), !!(statp[3] & 0x4),

1762 !!(
°©p
[3] & 0x2), !!(statp[3] & 0x1));

1764 
SAS_EXPANDER_ETC
:

1765 
	`¥ötf
("%sIdít=%d, Faû=%d\n", 
∑d
, !!(
°©p
[1] & 0x80),

1766 !!(
°©p
[1] & 0x40));

1768 
SAS_CONNECTOR_ETC
:

1769 
	`¥ötf
("%sIdít=%d, %s\n", 
∑d
, !!(
°©p
[1] & 0x80),

1770 
	`föd_ßs_c⁄√˘‹_ty≥
((
°©p
[1] & 0x7f), 
bb
, (bb)));

1771 
	`¥ötf
("%sC⁄√˘‹Öhysiˇ»lök=0x%x, Faû=%d\n", 
∑d
, 
°©p
[2],

1772 !!(
°©p
[3] & 0x40));

1775 i‡(
ëy≥
 < 0x80)

1776 
	`¥ötf
("%sUnknownÉlementÅype, status in hex: %02x %02x %02x "

1777 "%02x\n", 
∑d
, 
°©p
[0], statp[1], statp[2], statp[3]);

1779 
	`¥ötf
("%sVendor specificÉlementÅype, status in hex: %02x "

1780 "%02x %02x %02x\n", 
∑d
, 
°©p
[0], statp[1], statp[2],

1781 
°©p
[3]);

1784 
	}
}

1789 
	$£s_íc_°©us_dp
(c⁄° 
ty≥_desc_hdr_t
 * 
tdhp
, 
num_ãÀms
,

1790 
ªf_gí_code
, c⁄° * 
ª•
,

1791 
ª•_Àn
, c⁄° 
›ts_t
 * 
›
)

1793 
j
, 
k
, 
ñem_öd
, 
m©ch_öd_th
, 
gŸ1
;

1794 
gí_code
;

1795 c⁄° * 
u˝
;

1796 c⁄° * 
œ°_u˝
;

1797 
b
[64];

1799 
	`¥ötf
("Enclosure Status diagnosticÖage:\n");

1800 i‡(
ª•_Àn
 < 4)

1801 
åunˇãd
;

1802 
	`¥ötf
(" INVOP=%d, INFO=%d, NON-CRIT=%d, CRIT=%d, UNRECOV=%d\n",

1803 !!(
ª•
[1] & 0x10), !!(resp[1] & 0x8), !!(resp[1] & 0x4),

1804 !!(
ª•
[1] & 0x2), !!(resp[1] & 0x1));

1805 
œ°_u˝
 = 
ª•
 + 
ª•_Àn
 - 1;

1806 i‡(
ª•_Àn
 < 8)

1807 
åunˇãd
;

1808 
gí_code
 = (
ª•
[4] << 24) | (resp[5] << 16) |

1809 (
ª•
[6] << 8) |Ñesp[7];

1810 
	`¥ötf
(" gíî©i⁄ code: 0x%x\n", 
gí_code
);

1811 i‡(
ªf_gí_code
 !
gí_code
) {

1812 
	`Ârötf
(
°dîr
, " <<state ofÉnclosure changed,ÖleaseÅry "

1816 
	`¥ötf
(" status descriptorÜist\n");

1817 
u˝
 = 
ª•
 + 8;

1818 
k
 = 0, 
gŸ1
 = 0; k < 
num_ãÀms
; ++k, ++
tdhp
) {

1819 i‡((
u˝
 + 3Ë> 
œ°_u˝
)

1820 
åunˇãd
;

1821 
m©ch_öd_th
 = (
›
->
öd_giví
 && (
k
 =›->
öd_th
));

1822 i‡((! 
›
->
öd_giví
Ë|| (
m©ch_öd_th
 && (-1 =›->
öd_ödiv
))) {

1823 
	`¥ötf
(" ElementÅype: %s, subenclosure id: %d [ti=%d]\n",

1824 
	`föd_ñemít_äame
(
tdhp
->
ëy≥
, 
b
, (b)),

1825 
tdhp
->
£_id
, 
k
);

1826 
	`¥ötf
(" Overall descriptor:\n");

1827 
	`íc_°©us_hñ≥r
(" ", 
u˝
, 
tdhp
->
ëy≥
, 
›
);

1828 ++
gŸ1
;

1830 
u˝
 +4, 
j
 = 0, 
ñem_öd
 = 0; j < 
tdhp
->
num_ñemíts
;

1831 ++
j
, 
u˝
 +4, ++
ñem_öd
) {

1832 i‡(
›
->
öd_giví
) {

1833 i‡((! 
m©ch_öd_th
Ë|| (-1 =
›
->
öd_ödiv
) ||

1834 (
ñem_öd
 !
›
->
öd_ödiv
))

1837 
	`¥ötf
(" EÀmíà%d des¸ùt‹:\n", 
ñem_öd
);

1838 
	`íc_°©us_hñ≥r
(" ", 
u˝
, 
tdhp
->
ëy≥
, 
›
);

1839 ++
gŸ1
;

1842 i‡(
›
->
öd_giví
 && (0 =
gŸ1
))

1843 
	`¥ötf
(" >>>Çÿm©ch o¿--ödex=%d,%d\n", 
›
->
öd_th
,

1844 
›
->
öd_ödiv
);

1846 
åunˇãd
:

1847 
	`Ârötf
(
°dîr
, " <<<enc:ÑesponseÅoo short>>>\n");

1849 
	}
}

1852 
	$ª£rved_‹_num
(* 
buff
, 
buff_Àn
, 
num
, 
ª£rve_num
)

1854 i‡(
num
 =
ª£rve_num
)

1855 
	`°∫˝y
(
buff
, "<ªs>", 
buff_Àn
);

1857 
	`¢¥ötf
(
buff
, 
buff_Àn
, "%d", 
num
);

1858 i‡(
buff_Àn
 > 0)

1859 
buff
[
buff_Àn
 - 1] = '\0';

1860  
buff
;

1861 
	}
}

1864 
	$£s_thªshﬁd_hñ≥r
(c⁄° * 
∑d
, c⁄° *
ç
, 
ëy≥
,

1865 c⁄° 
›ts_t
 * 
›
)

1867 
b
[128];

1868 
b2
[128];

1870 i‡(
›
->
ö√r_hex
) {

1871 
	`¥ötf
("%s%02x %02x %02x %02x\n", 
∑d
, 
ç
[0],Åp[1],Åp[2],Åp[3]);

1874 
ëy≥
) {

1876 
	`¥ötf
("%shigh crôiˇl=%s, high w¨nög=%s\n", 
∑d
,

1877 
	`ª£rved_‹_num
(
b
, 128, 
ç
[0] - 
TEMPERAT_OFF
, -TEMPERAT_OFF),

1878 
	`ª£rved_‹_num
(
b2
, 128, 
ç
[1] - 
TEMPERAT_OFF
, -TEMPERAT_OFF));

1879 
	`¥ötf
("%¶ow w¨nög=%s,Üow crôiˇl=%†(ö Cñsius)\n", 
∑d
,

1880 
	`ª£rved_‹_num
(
b
, 128, 
ç
[2] - 
TEMPERAT_OFF
, -TEMPERAT_OFF),

1881 
	`ª£rved_‹_num
(
b2
, 128, 
ç
[3] - 
TEMPERAT_OFF
, -TEMPERAT_OFF));

1884 i‡(0 =
ç
[2])

1885 
	`°r˝y
(
b
, "<vendor>");

1887 
	`¢¥ötf
(
b
, (b), "%d", 
ç
[2]);

1888 
	`¥ötf
("%¶ow w¨nög=%s, ", 
∑d
, 
b
);

1889 i‡(0 =
ç
[3])

1890 
	`°r˝y
(
b
, "<vendor>");

1892 
	`¢¥ötf
(
b
, (b), "%d", 
ç
[3]);

1893 
	`¥ötf
("low crôiˇl=%†(ö möuãs)\n", 
b
);

1896 #ifde‡
SG_LIB_MINGW


1897 
	`¥ötf
("%shigh crôiˇl=%g %%, high w¨nög=%g %%\n", 
∑d
,

1898 0.5 * 
ç
[0], 0.5 *Åp[1]);

1899 
	`¥ötf
("%slow warning=%g %%,Üow critical=%g %% (fromÇominal "

1900 "vﬁège)\n", 
∑d
, 0.5 * 
ç
[2], 0.5 *Åp[3]);

1902 
	`¥ötf
("%shigh crôiˇl=%.1‡%%, high w¨nög=%.1‡%%\n", 
∑d
,

1903 0.5 * 
ç
[0], 0.5 *Åp[1]);

1904 
	`¥ötf
("%slow warning=%.1f %%,Üow critical=%.1f %% (fromÇominal "

1905 "vﬁège)\n", 
∑d
, 0.5 * 
ç
[2], 0.5 *Åp[3]);

1909 #ifde‡
SG_LIB_MINGW


1910 
	`¥ötf
("%shigh crôiˇl=%g %%, high w¨nög=%g %%", 
∑d
,

1911 0.5 * 
ç
[0], 0.5 *Åp[1]);

1913 
	`¥ötf
("%shigh crôiˇl=%.1‡%%, high w¨nög=%.1‡%%", 
∑d
,

1914 0.5 * 
ç
[0], 0.5 *Åp[1]);

1916 
	`¥ötf
(" (aboveÇominal current)\n");

1919 i‡(
›
->
vîbo£
)

1920 
	`¥ötf
("%s<<Çÿthªshﬁd†f‹Åhi†ñemíàty≥ >>\n", 
∑d
);

1923 
	}
}

1927 
	$£s_thªshﬁd_sdg
(c⁄° 
ty≥_desc_hdr_t
 * 
tdhp
, 
num_ãÀms
,

1928 
ªf_gí_code
, c⁄° * 
ª•
,

1929 
ª•_Àn
, c⁄° 
›ts_t
 * 
›
)

1931 
j
, 
k
, 
ñem_öd
, 
m©ch_öd_th
, 
gŸ1
;

1932 
gí_code
;

1933 c⁄° * 
u˝
;

1934 c⁄° * 
œ°_u˝
;

1935 
b
[64];

1937 
	`¥ötf
("Threshold In diagnosticÖage:\n");

1938 i‡(
ª•_Àn
 < 4)

1939 
åunˇãd
;

1940 
	`¥ötf
(" INVOP=%d\n", !!(
ª•
[1] & 0x10));

1941 
œ°_u˝
 = 
ª•
 + 
ª•_Àn
 - 1;

1942 i‡(
ª•_Àn
 < 8)

1943 
åunˇãd
;

1944 
gí_code
 = (
ª•
[4] << 24) | (resp[5] << 16) |

1945 (
ª•
[6] << 8) |Ñesp[7];

1946 
	`¥ötf
(" gíî©i⁄ code: 0x%x\n", 
gí_code
);

1947 i‡(
ªf_gí_code
 !
gí_code
) {

1948 
	`Ârötf
(
°dîr
, " <<state ofÉnclosure changed,ÖleaseÅry "

1952 
	`¥ötf
(" Threshold status descriptorÜist\n");

1953 
u˝
 = 
ª•
 + 8;

1954 
k
 = 0, 
gŸ1
 = 0; k < 
num_ãÀms
; ++k, ++
tdhp
) {

1955 i‡((
u˝
 + 3Ë> 
œ°_u˝
)

1956 
åunˇãd
;

1957 
m©ch_öd_th
 = (
›
->
öd_giví
 && (
k
 =›->
öd_th
));

1958 i‡((! 
›
->
öd_giví
Ë|| (
m©ch_öd_th
 && (-1 =›->
öd_ödiv
))) {

1959 
	`¥ötf
(" ElementÅype: %s, subenclosure id: %d [ti=%d]\n",

1960 
	`föd_ñemít_äame
(
tdhp
->
ëy≥
, 
b
, (b)),

1961 
tdhp
->
£_id
, 
k
);

1962 
	`¥ötf
(" Overall descriptor:\n");

1963 
	`£s_thªshﬁd_hñ≥r
(" ", 
u˝
, 
tdhp
->
ëy≥
, 
›
);

1964 ++
gŸ1
;

1966 
u˝
 +4, 
j
 = 0, 
ñem_öd
 = 0; j < 
tdhp
->
num_ñemíts
;

1967 ++
j
, 
u˝
 +4, ++
ñem_öd
) {

1968 i‡(
›
->
öd_giví
) {

1969 i‡((! 
m©ch_öd_th
Ë|| (-1 =
›
->
öd_ödiv
) ||

1970 (
ñem_öd
 !
›
->
öd_ödiv
))

1973 
	`¥ötf
(" EÀmíà%d des¸ùt‹:\n", 
ñem_öd
);

1974 
	`£s_thªshﬁd_hñ≥r
(" ", 
u˝
, 
tdhp
->
ëy≥
, 
›
);

1975 ++
gŸ1
;

1978 i‡(
›
->
öd_giví
 && (0 =
gŸ1
))

1979 
	`¥ötf
(" >>>Çÿm©ch o¿--ödex=%d,%d\n", 
›
->
öd_th
,

1980 
›
->
öd_ödiv
);

1982 
åunˇãd
:

1983 
	`Ârötf
(
°dîr
, " <<<thresh:ÑesponseÅoo short>>>\n");

1985 
	}
}

1991 
	$£s_ñemít_desc_sdg
(c⁄° 
ty≥_desc_hdr_t
 * 
tdhp
, 
num_ãÀms
,

1992 
ªf_gí_code
, c⁄° * 
ª•
,

1993 
ª•_Àn
, c⁄° 
›ts_t
 * 
›
)

1995 
j
, 
k
, 
desc_Àn
, 
ñem_öd
, 
m©ch_öd_th
, 
gŸ1
;

1996 
gí_code
;

1997 c⁄° * 
u˝
;

1998 c⁄° * 
œ°_u˝
;

1999 c⁄° 
ty≥_desc_hdr_t
 * 
ç
;

2000 
b
[64];

2002 
	`¥ötf
("Element Descriptor In diagnosticÖage:\n");

2003 i‡(
ª•_Àn
 < 4)

2004 
åunˇãd
;

2005 
œ°_u˝
 = 
ª•
 + 
ª•_Àn
 - 1;

2006 i‡(
ª•_Àn
 < 8)

2007 
åunˇãd
;

2008 
gí_code
 = (
ª•
[4] << 24) | (resp[5] << 16) |

2009 (
ª•
[6] << 8) |Ñesp[7];

2010 
	`¥ötf
(" gíî©i⁄ code: 0x%x\n", 
gí_code
);

2011 i‡(
ªf_gí_code
 !
gí_code
) {

2012 
	`Ârötf
(
°dîr
, " <<state ofÉnclosure changed,ÖleaseÅry "

2016 
	`¥ötf
("Élement descriptor byÅypeÜist\n");

2017 
u˝
 = 
ª•
 + 8;

2018 
k
 = 0, 
gŸ1
 = 0, 
ç
 = 
tdhp
; k < 
num_ãÀms
; ++k, ++tp) {

2019 i‡((
u˝
 + 3Ë> 
œ°_u˝
)

2020 
åunˇãd
;

2021 
desc_Àn
 = (
u˝
[2] << 8) + ucp[3] + 4;

2022 
m©ch_öd_th
 = (
›
->
öd_giví
 && (
k
 =›->
öd_th
));

2023 i‡((! 
›
->
öd_giví
Ë|| (
m©ch_öd_th
 && (-1 =›->
öd_ödiv
))) {

2024 
	`¥ötf
(" ElementÅype: %s, subenclosure id: %d [ti=%d]\n",

2025 
	`föd_ñemít_äame
(
ç
->
ëy≥
, 
b
, (b)),Åp->
£_id
, 
k
);

2026 i‡(
desc_Àn
 > 4)

2027 
	`¥ötf
(" OvîÆ»des¸ùt‹: %.*s\n", 
desc_Àn
 - 4,

2028 
u˝
 + 4);

2030 
	`¥ötf
(" Overall descriptor: <empty>\n");

2031 ++
gŸ1
;

2033 
u˝
 +
desc_Àn
, 
j
 = 0, 
ñem_öd
 = 0; j < 
ç
->
num_ñemíts
;

2034 ++
j
, 
u˝
 +
desc_Àn
, ++
ñem_öd
) {

2035 
desc_Àn
 = (
u˝
[2] << 8) + ucp[3] + 4;

2036 i‡(
›
->
öd_giví
) {

2037 i‡((! 
m©ch_öd_th
Ë|| (-1 =
›
->
öd_ödiv
) ||

2038 (
ñem_öd
 !
›
->
öd_ödiv
))

2041 i‡(
desc_Àn
 > 4)

2042 
	`¥ötf
(" EÀmíà%d des¸ùt‹: %.*s\n", 
j
,

2043 
desc_Àn
 - 4, 
u˝
 + 4);

2045 
	`¥ötf
(" EÀmíà%d des¸ùt‹: <em±y>\n", 
j
);

2046 ++
gŸ1
;

2049 i‡(
›
->
öd_giví
 && (0 =
gŸ1
))

2050 
	`¥ötf
(" >>>Çÿm©ch o¿--ödex=%d,%d\n", 
›
->
öd_th
,

2051 
›
->
öd_ödiv
);

2053 
åunˇãd
:

2054 
	`Ârötf
(
°dîr
, " <<<element:ÑesponseÅoo short>>>\n");

2056 
	}
}

2059 
	$ßs_addr_n⁄_zîo
(c⁄° * 
u˝
)

2061 
k
;

2063 
k
 = 0; k < 8; ++k) {

2064 i‡(
u˝
[
k
])

2068 
	}
}

2070 c⁄° * 
	gßs_devi˚_ty≥
[] = {

2079 
	$addôi⁄Æ_ñem_hñ≥r
(c⁄° * 
∑d
, c⁄° * 
u˝
, 
Àn
,

2080 
ñem_ty≥
, c⁄° 
›ts_t
 * 
›
)

2082 
p‹ts
, 
phys
, 
j
, 
m
, 
desc_ty≥
, 
eù_off£t
, 
¥öt_ßs_addr
;

2083 c⁄° * 
≥r_u˝
;

2084 
fûãr
 = 
›
->
do_fûãr
;

2085 
b
[64];

2087 i‡(
›
->
ö√r_hex
) {

2088 
j
 = 0; j < 
Àn
; ++j) {

2089 i‡(0 =(
j
 % 16))

2090 
	`¥ötf
("%s%s", ((0 =
j
Ë? "" : "\n"), 
∑d
);

2091 
	`¥ötf
("%02x ", 
u˝
[
j
]);

2093 
	`¥ötf
("\n");

2096 
eù_off£t
 = (0x10 & 
u˝
[0]) ? 2 : 0;

2097 0x‡& 
u˝
[0]) {

2098 
TPROTO_FCP
:

2099 
	`¥ötf
("%sTøn•‹à¥Ÿocﬁ: FCP\n", 
∑d
);

2100 i‡(
Àn
 < (12 + 
eù_off£t
))

2102 
p‹ts
 = 
u˝
[2 + 
eù_off£t
];

2103 
	`¥ötf
("%¢umbî o‡p‹ts: %d\n", 
∑d
, 
p‹ts
);

2104 
	`¥ötf
("%¢ode_«me: ", 
∑d
);

2105 
m
 = 0; m < 8; ++m)

2106 
	`¥ötf
("%02x", 
u˝
[6 + 
eù_off£t
 + 
m
]);

2107 i‡(
eù_off£t
)

2108 
	`¥ötf
(", devi˚ slŸÇumbî: %d", 
u˝
[5 + 
eù_off£t
]);

2109 
	`¥ötf
("\n");

2110 
≥r_u˝
 = 
u˝
 + 14 + 
eù_off£t
;

2111 
j
 = 0; j < 
p‹ts
; ++j, 
≥r_u˝
 += 16) {

2112 
	`¥ötf
("%sÖort index: %d,ÖortÜoopÖosition: %d,Öort "

2113 "by∑s†ªas⁄: 0x%x\n", 
∑d
, 
j
, 
≥r_u˝
[0],Öer_ucp[1]);

2114 
	`¥ötf
("%srequested hardáddress: %d,Ç_port identifier: "

2115 "%02x%02x%02x\n", 
∑d
, 
≥r_u˝
[4],Öer_ucp[5],

2116 
≥r_u˝
[6],Öer_ucp[7]);

2117 
	`¥ötf
("%†Ç_p‹à«me: ", 
∑d
);

2118 
m
 = 0; m < 8; ++m)

2119 
	`¥ötf
("%02x", 
≥r_u˝
[8 + 
m
]);

2120 
	`¥ötf
("\n");

2123 
TPROTO_SAS
:

2124 
	`¥ötf
("%sTøn•‹à¥Ÿocﬁ: SAS\n", 
∑d
);

2125 i‡(
Àn
 < (4 + 
eù_off£t
))

2127 
desc_ty≥
 = (
u˝
[3 + 
eù_off£t
] >> 6) & 0x3;

2128 i‡(0 =
desc_ty≥
) {

2129 
phys
 = 
u˝
[2 + 
eù_off£t
];

2130 
	`¥ötf
("%¢umbî o‡phys: %d,ÇŸáŒÖhys: %d", 
∑d
, 
phys
,

2131 
u˝
[3 + 
eù_off£t
] & 1);

2132 i‡(
eù_off£t
)

2133 
	`¥ötf
(", devi˚ slŸÇumbî: %d", 
u˝
[5 + 
eù_off£t
]);

2134 
	`¥ötf
("\n");

2135 
≥r_u˝
 = 
u˝
 + 4 + 
eù_off£t
 +Éip_offset;

2136 
j
 = 0; j < 
phys
; ++j, 
≥r_u˝
 += 28) {

2137 
	`¥ötf
("%•hy index: %d\n", 
∑d
, 
j
);

2138 
	`¥ötf
("%† devi˚Åy≥: %s\n", 
∑d
,

2139 
ßs_devi˚_ty≥
[(0x70 & 
≥r_u˝
[0]) >> 4]);

2140 i‡((! 
fûãr
Ë|| (0xê& 
≥r_u˝
[2]))

2141 
	`¥ötf
("%† inôüt‹Ö‹àf‹:%s%s%s\n", 
∑d
,

2142 ((
≥r_u˝
[2] & 8) ? " SSP" : ""),

2143 ((
≥r_u˝
[2] & 4) ? " STP" : ""),

2144 ((
≥r_u˝
[2] & 2) ? " SMP" : ""));

2145 i‡((! 
fûãr
Ë|| (0x8‡& 
≥r_u˝
[3]))

2146 
	`¥ötf
("%†Å¨gëÖ‹àf‹:%s%s%s%s%s\n", 
∑d
,

2147 ((
≥r_u˝
[3] & 0x80) ? " SATA_port_selector" : ""),

2148 ((
≥r_u˝
[3] & 8) ? " SSP" : ""),

2149 ((
≥r_u˝
[3] & 4) ? " STP" : ""),

2150 ((
≥r_u˝
[3] & 2) ? " SMP" : ""),

2151 ((
≥r_u˝
[3] & 1) ? " SATA_device" : ""));

2152 
¥öt_ßs_addr
 = 0;

2153 i‡((! 
fûãr
Ë|| 
	`ßs_addr_n⁄_zîo
(
≥r_u˝
 + 4)) {

2154 ++
¥öt_ßs_addr
;

2155 
	`¥ötf
("%†áâached SASáddªss: 0x", 
∑d
);

2156 
m
 = 0; m < 8; ++m)

2157 
	`¥ötf
("%02x", 
≥r_u˝
[4 + 
m
]);

2159 i‡((! 
fûãr
Ë|| 
	`ßs_addr_n⁄_zîo
(
≥r_u˝
 + 12)) {

2160 ++
¥öt_ßs_addr
;

2161 
	`¥ötf
("\n%† SASáddªss: 0x", 
∑d
);

2162 
m
 = 0; m < 8; ++m)

2163 
	`¥ötf
("%02x", 
≥r_u˝
[12 + 
m
]);

2165 i‡(
¥öt_ßs_addr
)

2166 
	`¥ötf
("\n%†Öhy idítifõr: 0x%x\n", 
∑d
, 
≥r_u˝
[20]);

2168 } i‡(1 =
desc_ty≥
) {

2169 
phys
 = 
u˝
[2 + 
eù_off£t
];

2170 i‡(
SAS_EXPANDER_ETC
 =
ñem_ty≥
) {

2171 
	`¥ötf
("%¢umbî o‡phys: %d\n", 
∑d
, 
phys
);

2172 
	`¥ötf
("%sSASáddªss: 0x", 
∑d
);

2173 
m
 = 0; m < 8; ++m)

2174 
	`¥ötf
("%02x", 
u˝
[6 + 
eù_off£t
 + 
m
]);

2175 
	`¥ötf
("\n");

2176 
≥r_u˝
 = 
u˝
 + 14 + 
eù_off£t
;

2177 
j
 = 0; j < 
phys
; ++j, 
≥r_u˝
 += 2) {

2178 
	`¥ötf
("%† [%d] ", 
∑d
, 
j
);

2179 i‡(0xf‡=
≥r_u˝
[0])

2180 
	`¥ötf
("noáttached connector");

2182 
	`¥ötf
("c⁄√˘‹ÉÀmíàödex: %d", 
≥r_u˝
[0]);

2183 i‡(0xf‡!
≥r_u˝
[1])

2184 
	`¥ötf
(", othîÉÀmíàödex: %d", 
≥r_u˝
[1]);

2185 
	`¥ötf
("\n");

2187 } i‡((
SCSI_TPORT_ETC
 =
ñem_ty≥
) ||

2188 (
SCSI_IPORT_ETC
 =
ñem_ty≥
) ||

2189 (
ESC_ELECTRONICS_ETC
 =
ñem_ty≥
)) {

2190 
	`¥ötf
("%¢umbî o‡phys: %d\n", 
∑d
, 
phys
);

2191 
≥r_u˝
 = 
u˝
 + 6 + 
eù_off£t
;

2192 
j
 = 0; j < 
phys
; ++j, 
≥r_u˝
 += 12) {

2193 
	`¥ötf
("%•hy index: %d\n", 
∑d
, 
j
);

2194 
	`¥ötf
("%†Öhy idítifõr: 0x%x\n", 
∑d
, 
≥r_u˝
[0]);

2195 i‡(0xf‡=
≥r_u˝
[2])

2196 
	`¥ötf
("%†Çÿ©èched c⁄√˘‹", 
∑d
);

2198 
	`¥ötf
("%† c⁄√˘‹ÉÀmíàödex: %d", 
∑d
,

2199 
≥r_u˝
[2]);

2200 i‡(0xf‡!
≥r_u˝
[3])

2201 
	`¥ötf
(", othîÉÀmíàödex: %d", 
≥r_u˝
[3]);

2202 
	`¥ötf
("\n");

2203 
	`¥ötf
("%† SASáddªss: 0x", 
∑d
);

2204 
m
 = 0; m < 8; ++m)

2205 
	`¥ötf
("%02x", 
≥r_u˝
[4 + 
m
]);

2206 
	`¥ötf
("\n");

2209 
	`¥ötf
("%sunrecognisedÉlementÅype [%d] for desc_type "

2210 "1\n", 
∑d
, 
ñem_ty≥
);

2212 
	`¥ötf
("%suƒecogni£d des¸ùt‹Åy≥ [%d]\n", 
∑d
, 
desc_ty≥
);

2215 
	`¥ötf
("%sTøn•‹à¥Ÿocﬁ: %†nŸ decoded\n", 
∑d
,

2216 
	`sg_gë_å™s_¥Ÿo_°r
((0x‡& 
u˝
[0]), (
b
), b));

2217 i‡(
›
->
vîbo£
)

2218 
	`dSåHex
((c⁄° *)
u˝
, 
Àn
, 0);

2221 
	}
}

2227 
	$£s_addôi⁄Æ_ñem_sdg
(c⁄° 
ty≥_desc_hdr_t
 * 
tdhp
, 
num_ãÀms
,

2228 
ªf_gí_code
, c⁄° * 
ª•
,

2229 
ª•_Àn
, c⁄° 
›ts_t
 * 
›
)

2231 
j
, 
k
, 
desc_Àn
, 
ñem_ty≥
, 
övÆid
, 
ñ_num
, 
eù
, 
öd
, 
m©ch_öd_th
;

2232 
ñem_cou¡
;

2233 
gí_code
;

2234 c⁄° * 
u˝
;

2235 c⁄° * 
œ°_u˝
;

2236 c⁄° 
ty≥_desc_hdr_t
 * 
ç
;

2237 
b
[64];

2239 
	`¥ötf
("AdditionalÉlement status diagnosticÖage:\n");

2240 i‡(
ª•_Àn
 < 4)

2241 
åunˇãd
;

2242 
œ°_u˝
 = 
ª•
 + 
ª•_Àn
 - 1;

2243 
gí_code
 = (
ª•
[4] << 24) | (resp[5] << 16) |

2244 (
ª•
[6] << 8) |Ñesp[7];

2245 
	`¥ötf
(" gíî©i⁄ code: 0x%x\n", 
gí_code
);

2246 i‡(
ªf_gí_code
 !
gí_code
) {

2247 
	`Ârötf
(
°dîr
, " <<state ofÉnclosure changed,ÖleaseÅry "

2251 
	`¥ötf
("ádditionalÉlement status descriptorÜist\n");

2252 
u˝
 = 
ª•
 + 8;

2253 
k
 = 0, 
ç
 = 
tdhp
, 
ñem_cou¡
 = 0; k < 
num_ãÀms
; ++k, ++tp) {

2254 
ñem_ty≥
 = 
ç
->
ëy≥
;

2255 i‡(! 
	`a˘ive_ë_´•
(
ñem_ty≥
)) {

2256 
ñem_cou¡
 +
ç
->
num_ñemíts
;

2259 i‡((
u˝
 + 1Ë> 
œ°_u˝
)

2260 
åunˇãd
;

2265 i‡(
u˝
[0] & 0x10) {

2266 i‡((
u˝
[3] < 
ñem_cou¡
) ||

2267 (
u˝
[3] >(
ñem_cou¡
 + 
ç
->
num_ñemíts
))) {

2268 
ñem_cou¡
 +
ç
->
num_ñemíts
;

2272 
m©ch_öd_th
 = (
›
->
öd_giví
 && (
k
 =›->
öd_th
));

2273 i‡((! 
›
->
öd_giví
Ë|| (
m©ch_öd_th
 && (-1 =›->
öd_ödiv
))) {

2274 
	`¥ötf
(" ElementÅype: %s, subenclosure id: %d [ti=%d]\n",

2275 
	`föd_ñemít_äame
(
ñem_ty≥
, 
b
, (b)), 
ç
->
£_id
, 
k
);

2277 
j
 = 0, 
ñ_num
 = 0; j < 
ç
->
num_ñemíts
;

2278 ++
j
, 
u˝
 +
desc_Àn
, ++
ñ_num
) {

2279 
övÆid
 = !!(
u˝
[0] & 0x80);

2280 
desc_Àn
 = 
u˝
[1] + 2;

2281 
eù
 = 
u˝
[0] & 0x10;

2282 
öd
 = 
eù
 ? 
u˝
[3] : 
ñ_num
;

2283 i‡(
›
->
öd_giví
) {

2284 i‡((! 
m©ch_öd_th
Ë|| (-1 =
›
->
öd_ödiv
) ||

2285 (
ñ_num
 !
›
->
öd_ödiv
))

2288 i‡(
eù
)

2289 
	`¥ötf
(" EÀmíàödex: %d\n", 
öd
);

2291 
	`¥ötf
(" EÀmíà%d des¸ùt‹\n", 
öd
);

2292 i‡(
övÆid
 && (0 =
›
->
ö√r_hex
))

2293 
	`¥ötf
(" flaggedás invalid (no further "

2296 
	`addôi⁄Æ_ñem_hñ≥r
(" ", 
u˝
, 
desc_Àn
, 
ñem_ty≥
,

2297 
›
);

2299 
ñem_cou¡
 +
ç
->
num_ñemíts
;

2302 
åunˇãd
:

2303 
	`Ârötf
(
°dîr
, " <<<additional:ÑesponseÅoo short>>>\n");

2305 
	}
}

2309 
	$£s_subíc_hñp_sdg
(c⁄° * 
ª•
, 
ª•_Àn
)

2311 
k
, 
ñ
, 
num_subs
;

2312 
gí_code
;

2313 c⁄° * 
u˝
;

2314 c⁄° * 
œ°_u˝
;

2316 
	`¥ötf
("Subenclosure helpÅext diagnosticÖage:\n");

2317 i‡(
ª•_Àn
 < 4)

2318 
åunˇãd
;

2319 
num_subs
 = 
ª•
[1] + 1;

2320 
œ°_u˝
 = 
ª•
 + 
ª•_Àn
 - 1;

2321 
	`¥ötf
("Çumber of secondary subenclosures: %d\n",

2322 
num_subs
 - 1);

2323 
gí_code
 = (
ª•
[4] << 24) | (resp[5] << 16) |

2324 (
ª•
[6] << 8) |Ñesp[7];

2325 
	`¥ötf
(" gíî©i⁄ code: 0x%x\n", 
gí_code
);

2326 
u˝
 = 
ª•
 + 8;

2327 
k
 = 0; k < 
num_subs
; ++k, 
u˝
 +
ñ
) {

2328 i‡((
u˝
 + 3Ë> 
œ°_u˝
)

2329 
åunˇãd
;

2330 
ñ
 = (
u˝
[2] << 8) + ucp[3] + 4;

2331 
	`¥ötf
(" subí˛osuª idítifõr: %d\n", 
u˝
[1]);

2332 i‡(
ñ
 > 4)

2333 
	`¥ötf
(" %.*s\n", 
ñ
 - 4, 
u˝
 + 4);

2335 
	`¥ötf
(" <empty>\n");

2338 
åunˇãd
:

2339 
	`Ârötf
(
°dîr
, " <<<subenc:ÑesponseÅoo short>>>\n");

2341 
	}
}

2345 
	$£s_subíc_°rög_sdg
(c⁄° * 
ª•
, 
ª•_Àn
)

2347 
k
, 
j
, 
ñ
, 
num_subs
;

2348 
gí_code
;

2349 c⁄° * 
u˝
;

2350 c⁄° * 
œ°_u˝
;

2352 
	`¥ötf
("Subenclosure string in diagnosticÖage:\n");

2353 i‡(
ª•_Àn
 < 4)

2354 
åunˇãd
;

2355 
num_subs
 = 
ª•
[1] + 1;

2356 
œ°_u˝
 = 
ª•
 + 
ª•_Àn
 - 1;

2357 
	`¥ötf
("Çumber of secondary subenclosures: %d\n",

2358 
num_subs
 - 1);

2359 
gí_code
 = (
ª•
[4] << 24) | (resp[5] << 16) |

2360 (
ª•
[6] << 8) |Ñesp[7];

2361 
	`¥ötf
(" gíî©i⁄ code: 0x%x\n", 
gí_code
);

2362 
u˝
 = 
ª•
 + 8;

2363 
k
 = 0; k < 
num_subs
; ++k, 
u˝
 +
ñ
) {

2364 i‡((
u˝
 + 3Ë> 
œ°_u˝
)

2365 
åunˇãd
;

2366 
ñ
 = (
u˝
[2] << 8) + ucp[3] + 4;

2367 
	`¥ötf
(" subí˛osuª idítifõr: %d\n", 
u˝
[1]);

2368 i‡(
ñ
 > 4) {

2370 
	`¥ötf
(" ");

2371 
j
 = 0; j < (
ñ
 - 4); ++j) {

2372 i‡((
j
 > 0) && (0 == (j % 16)))

2373 
	`¥ötf
("\n ");

2374 
	`¥ötf
("%02x ", *(
u˝
 + 4 + 
j
));

2376 
	`¥ötf
("\n");

2378 
	`¥ötf
(" <empty>\n");

2381 
åunˇãd
:

2382 
	`Ârötf
(
°dîr
, " <<<subence str:ÑesponseÅoo short>>>\n");

2384 
	}
}

2388 
	$£s_subíc_nick«me_sdg
(c⁄° * 
ª•
, 
ª•_Àn
)

2390 
k
, 
ñ
, 
num_subs
;

2391 
gí_code
;

2392 c⁄° * 
u˝
;

2393 c⁄° * 
œ°_u˝
;

2395 
	`¥ötf
("SubenclosureÇickname status diagnosticÖage:\n");

2396 i‡(
ª•_Àn
 < 4)

2397 
åunˇãd
;

2398 
num_subs
 = 
ª•
[1] + 1;

2399 
œ°_u˝
 = 
ª•
 + 
ª•_Àn
 - 1;

2400 
	`¥ötf
("Çumber of secondary subenclosures: %d\n",

2401 
num_subs
 - 1);

2402 
gí_code
 = (
ª•
[4] << 24) | (resp[5] << 16) |

2403 (
ª•
[6] << 8) |Ñesp[7];

2404 
	`¥ötf
(" gíî©i⁄ code: 0x%x\n", 
gí_code
);

2405 
u˝
 = 
ª•
 + 8;

2406 
ñ
 = 40;

2407 
k
 = 0; k < 
num_subs
; ++k, 
u˝
 +
ñ
) {

2408 i‡((
u˝
 + 
ñ
 - 1Ë> 
œ°_u˝
)

2409 
åunˇãd
;

2410 
	`¥ötf
(" subí˛osuª idítifõr: %d\n", 
u˝
[1]);

2411 
	`¥ötf
("Çick«mê°©us: 0x%x\n", 
u˝
[2]);

2412 
	`¥ötf
("Çick«mêaddôi⁄Æ sètus: 0x%x\n", 
u˝
[3]);

2413 
	`¥ötf
("Çick«mêœnguagêcode: %.2s\n", 
u˝
 + 6);

2414 
	`¥ötf
("Çick«me: %.*s\n", 32, 
u˝
 + 8);

2417 
åunˇãd
:

2418 
	`Ârötf
(
°dîr
, " <<<subence str:ÑesponseÅoo short>>>\n");

2420 
	}
}

2424 
	$£s_suµ‹ãd_∑ges_sdg
(c⁄° * 
Àadö
, c⁄° * 
ª•
,

2425 
ª•_Àn
)

2427 
k
, 
code
, 
¥ev
, 
gŸ1
;

2428 c⁄° * 
˝
;

2429 c⁄° 
düg_∑ge_abbªv
 * 
≠
;

2431 
	`¥ötf
("%s:\n", 
Àadö
);

2432 
k
 = 0, 
¥ev
 = 0; k < (
ª•_Àn
 - 4); ++k,Öªv = 
code
) {

2433 
code
 = 
ª•
[
k
 + 4];

2434 i‡(
code
 < 
¥ev
)

2436 
˝
 = 
	`föd_düg_∑ge_desc
(
code
);

2437 i‡(
˝
) {

2438 
	`¥ötf
(" %†[", 
˝
);

2439 
≠
 = 
dp_abbªv
, 
gŸ1
 = 0;áp->
abbªv
; ++ap) {

2440 i‡(
≠
->
∑ge_code
 =
code
) {

2441 
	`¥ötf
("%s%s", (
gŸ1
 ? "," : ""), 
≠
->
abbªv
);

2442 ++
gŸ1
;

2445 
	`¥ötf
("] [0x%x]\n", 
code
);

2447 
	`¥ötf
(" <unknown> [0x%x]\n", 
code
);

2449 
	}
}

2453 
	$£s_dow∆ﬂd_code_sdg
(c⁄° * 
ª•
, 
ª•_Àn
)

2455 
k
, 
num_subs
;

2456 
gí_code
;

2457 c⁄° * 
u˝
;

2458 c⁄° * 
œ°_u˝
;

2460 
	`¥ötf
("Download microcode status diagnosticÖage:\n");

2461 i‡(
ª•_Àn
 < 4)

2462 
åunˇãd
;

2463 
num_subs
 = 
ª•
[1] + 1;

2464 
œ°_u˝
 = 
ª•
 + 
ª•_Àn
 - 1;

2465 
	`¥ötf
("Çumber of secondary subenclosures: %d\n",

2466 
num_subs
 - 1);

2467 
gí_code
 = (
ª•
[4] << 24) | (resp[5] << 16) |

2468 (
ª•
[6] << 8) |Ñesp[7];

2469 
	`¥ötf
(" gíî©i⁄ code: 0x%x\n", 
gí_code
);

2470 
u˝
 = 
ª•
 + 8;

2471 
k
 = 0; k < 
num_subs
; ++k, 
u˝
 += 16) {

2472 i‡((
u˝
 + 3Ë> 
œ°_u˝
)

2473 
åunˇãd
;

2474 
	`¥ötf
(" subí˛osuª idítifõr: %d\n", 
u˝
[1]);

2475 
	`¥ötf
(" download microcode status: 0x%x [additional status: "

2476 "0x%x]\n", 
u˝
[2], ucp[3]);

2477 
	`¥ötf
(" download microcode maximum size: %d bytes\n",

2478 (
u˝
[4] << 24) + (ucp[5] << 16) + (ucp[6] << 8) + ucp[7]);

2479 
	`¥ötf
(" dow∆ﬂd mi¸ocodêex≥˘ed buf„∏id: 0x%x\n", 
u˝
[11]);

2480 
	`¥ötf
(" download microcodeÉxpected buffer id offset: %d\n",

2481 (
u˝
[12] << 24) + (ucp[13] << 16) + (ucp[14] << 8) + ucp[15]);

2484 
åunˇãd
:

2485 
	`Ârötf
(
°dîr
, " <<<download:ÑesponseÅoo short>>>\n");

2487 
	}
}

2490 
	$ªad_hex
(c⁄° * 
öp
, * 
¨r
, * 
¨r_Àn
)

2492 
ö_Àn
, 
k
, 
j
, 
m
, 
off
;

2493 
h
;

2494 c⁄° * 
l˝
;

2495 * 
˝
;

2496 * 
c2p
;

2497 
löe
[512];

2499 i‡((
NULL
 =
öp
Ë|| (NULL =
¨r
Ë|| (NULL =
¨r_Àn
))

2501 
l˝
 = 
öp
;

2502 
ö_Àn
 = 
	`°æí
(
öp
);

2503 i‡(0 =
ö_Àn
) {

2504 *
¨r_Àn
 = 0;

2506 i‡('-' =
öp
[0]) {

2507 
j
 = 0, 
off
 = 0; j < 
MX_DATA_IN
; ++j) {

2509 i‡(
NULL
 =
	`fgës
(
löe
, ÷öe), 
°dö
))

2511 
ö_Àn
 = 
	`°æí
(
löe
);

2512 i‡(
ö_Àn
 > 0) {

2513 i‡('\n' =
löe
[
ö_Àn
 - 1]) {

2514 --
ö_Àn
;

2515 
löe
[
ö_Àn
] = '\0';

2518 i‡(0 =
ö_Àn
)

2520 
l˝
 = 
löe
;

2521 
m
 = 
	`°r•n
(
l˝
, " \t");

2522 i‡(
m
 =
ö_Àn
)

2524 
l˝
 +
m
;

2525 
ö_Àn
 -
m
;

2526 i‡('#' =*
l˝
)

2528 
k
 = 
	`°r•n
(
l˝
, "0123456789aAbBcCdDeEfF ,\t");

2529 i‡(
ö_Àn
 !
k
) {

2530 
	`Ârötf
(
°dîr
, "read_hex: syntaxÉrrorát "

2531 "löê%d,Öo†%d\n", 
j
 + 1, 
m
 + 
k
 + 1);

2534 
k
 = 0; k < (
MX_DATA_IN
 - 
off
); ++k) {

2535 i‡(1 =
	`ssˇnf
(
l˝
, "%x", &
h
)) {

2536 i‡(
h
 > 0xff) {

2537 
	`Ârötf
(
°dîr
, "read_hex: hexÇumber "

2539 
j
 + 1, ()(
l˝
 - 
löe
 + 1));

2542 
¨r
[
off
 + 
k
] = 
h
;

2543 
l˝
 = 
	`°Ωbrk
(lcp, " ,\t");

2544 i‡(
NULL
 =
l˝
)

2546 
l˝
 +
	`°r•n
(lcp, " ,\t");

2547 i‡('\0' =*
l˝
)

2550 
	`Ârötf
(
°dîr
, "read_hex:Érror in "

2551 "löê%d,áàpo†%d\n", 
j
 + 1,

2552 ()(
l˝
 - 
löe
 + 1));

2556 
off
 +
k
 + 1;

2557 i‡(
off
 >
MX_DATA_IN
)

2560 *
¨r_Àn
 = 
off
;

2562 
k
 = 
	`°r•n
(
öp
, "0123456789aAbBcCdDeEfF, ");

2563 i‡(
ö_Àn
 !
k
) {

2564 
	`Ârötf
(
°dîr
, "read_hex:ÉrrorátÖos %d\n",

2565 
k
 + 1);

2568 
k
 = 0; k < 
MX_DATA_IN
; ++k) {

2569 i‡(1 =
	`ssˇnf
(
l˝
, "%x", &
h
)) {

2570 i‡(
h
 > 0xff) {

2571 
	`Ârötf
(
°dîr
, "read_hex: hexÇumberÜarger "

2572 "th™ 0xf‡©Öo†%d\n", ()(
l˝
 - 
öp
 + 1));

2575 
¨r
[
k
] = 
h
;

2576 
˝
 = (*)
	`°rchr
(
l˝
, ',');

2577 
c2p
 = (*)
	`°rchr
(
l˝
, ' ');

2578 i‡(
NULL
 =
˝
)

2579 
˝
 = 
c2p
;

2580 i‡(
NULL
 =
˝
)

2582 i‡(
c2p
 && (c2∞< 
˝
))

2583 
˝
 = 
c2p
;

2584 
l˝
 = 
˝
 + 1;

2586 
	`Ârötf
(
°dîr
, "read_hex:ÉrrorátÖos %d\n",

2587 ()(
l˝
 - 
öp
 + 1));

2591 *
¨r_Àn
 = 
k
 + 1;

2594 
	}
}

2598 
	$£s_¥o˚ss_°©us_∑ge
(
sg_fd
, 
›ts_t
 * 
›
)

2600 
j
, 
ª•_Àn
, 
ªs
;

2601 
ªt
 = 0;

2602 
ªf_gí_code
;

2603 * 
ª•
;

2604 c⁄° * 
˝
;

2605 
í˛osuª_öfo
 
¥im¨y_öfo
;

2607 
ª•
 = (*)
	`ˇŒoc
(
MX_ALLOC_LEN
, 1);

2608 i‡(
NULL
 =
ª•
) {

2609 
	`Ârötf
(
°dîr
, "process_status_page: unableÅoállocate %d bytes "

2610 "⁄ hóp\n", 
MX_ALLOC_LEN
);

2611 
ªt
 = -1;

2612 
föi
;

2614 
˝
 = 
	`föd_ö_düg_∑ge_desc
(
›
->
∑ge_code
);

2615 
ªt
 = 
	`do_ªc_düg
(
sg_fd
, 
›
->
∑ge_code
, 
ª•
, 
MX_ALLOC_LEN
,

2616 
›
, &
ª•_Àn
);

2617 i‡(
ªt
)

2618 
föi
;

2619 i‡(
›
->
do_øw
) {

2620 i‡(1 =
›
->
do_øw
)

2621 
	`dSåHex
((c⁄° *)
ª•
 + 4, 
ª•_Àn
 - 4, -1);

2623 i‡(
	`sg_£t_bö¨y_mode
(
STDOUT_FILENO
) < 0)

2624 
	`≥º‹
("sg_set_binary_mode");

2625 
	`dSåRaw
((c⁄° *)
ª•
, 
ª•_Àn
);

2627 } i‡(
›
->
do_hex
) {

2628 i‡(
˝
)

2629 
	`¥ötf
("Re•⁄£ i¿hex from dügno°i¯∑ge: %s\n", 
˝
);

2631 
	`¥ötf
("Response in hex from unknown diagnosticÖage "

2632 "[0x%x]\n", 
›
->
∑ge_code
);

2633 
	`dSåHex
((c⁄° *)
ª•
, 
ª•_Àn
, 0);

2635 
	`mem£t
(&
¥im¨y_öfo
, 0, (primary_info));

2636 
›
->
∑ge_code
) {

2637 
DPC_SUPPORTED
:

2638 
	`£s_suµ‹ãd_∑ges_sdg
("Supported diagnosticÖages",

2639 
ª•
, 
ª•_Àn
);

2641 
DPC_CONFIGURATION
:

2642 
	`£s_c⁄figuøti⁄_sdg
(
ª•
, 
ª•_Àn
);

2644 
DPC_ENC_STATUS
:

2645 
ªs
 = 
	`p›uœã_ty≥_desc_hdr_¨r
(
sg_fd
, 
ty≥_desc_hdr_¨r
,

2646 &
ªf_gí_code
, &
¥im¨y_öfo
,

2647 
›
);

2648 i‡(
ªs
 < 0) {

2649 
ªt
 = 
ªs
;

2650 
föi
;

2652 i‡(
¥im¨y_öfo
.
have_öfo
) {

2653 
	`¥ötf
(" PrimaryÉnclosureÜogical identifier (hex): ");

2654 
j
 = 0; j < 8; ++j)

2655 
	`¥ötf
("%02x", 
¥im¨y_öfo
.
íc_log_id
[
j
]);

2656 
	`¥ötf
("\n");

2658 
	`£s_íc_°©us_dp
(
ty≥_desc_hdr_¨r
, 
ªs
, 
ªf_gí_code
,

2659 
ª•
, 
ª•_Àn
, 
›
);

2661 
DPC_HELP_TEXT
:

2662 
	`¥ötf
("HelpÅext diagnosticÖage (forÖrimary "

2664 i‡(
ª•_Àn
 > 4)

2665 
	`¥ötf
(" %.*s\n", 
ª•_Àn
 - 4, 
ª•
 + 4);

2667 
	`¥ötf
(" <empty>\n");

2669 
DPC_STRING
:

2670 
	`¥ötf
("String In diagnosticÖage (forÖrimary "

2672 i‡(
ª•_Àn
 > 4) {

2674 
	`dSåHex
((c⁄° *)(
ª•
 + 4), 
ª•_Àn
 - 4, 0);

2676 
j
;

2678 
	`¥ötf
(" ");

2679 
j
 = 0; j < (
ª•_Àn
 - 4); ++j) {

2680 i‡((
j
 > 0) && (0 == (j % 16)))

2681 
	`¥ötf
("\n ");

2682 
	`¥ötf
("%02x ", *(
ª•
 + 4 + 
j
));

2684 
	`¥ötf
("\n");

2687 
	`¥ötf
(" <empty>\n");

2689 
DPC_THRESHOLD
:

2690 
ªs
 = 
	`p›uœã_ty≥_desc_hdr_¨r
(
sg_fd
, 
ty≥_desc_hdr_¨r
,

2691 &
ªf_gí_code
, &
¥im¨y_öfo
,

2692 
›
);

2693 i‡(
ªs
 < 0) {

2694 
ªt
 = 
ªs
;

2695 
föi
;

2697 i‡(
¥im¨y_öfo
.
have_öfo
) {

2698 
	`¥ötf
(" PrimaryÉnclosureÜogical identifier (hex): ");

2699 
j
 = 0; j < 8; ++j)

2700 
	`¥ötf
("%02x", 
¥im¨y_öfo
.
íc_log_id
[
j
]);

2701 
	`¥ötf
("\n");

2703 
	`£s_thªshﬁd_sdg
(
ty≥_desc_hdr_¨r
, 
ªs
, 
ªf_gí_code
,

2704 
ª•
, 
ª•_Àn
, 
›
);

2706 
DPC_ELEM_DESC
:

2707 
ªs
 = 
	`p›uœã_ty≥_desc_hdr_¨r
(
sg_fd
, 
ty≥_desc_hdr_¨r
,

2708 &
ªf_gí_code
, &
¥im¨y_öfo
,

2709 
›
);

2710 i‡(
ªs
 < 0) {

2711 
ªt
 = 
ªs
;

2712 
föi
;

2714 i‡(
¥im¨y_öfo
.
have_öfo
) {

2715 
	`¥ötf
(" PrimaryÉnclosureÜogical identifier (hex): ");

2716 
j
 = 0; j < 8; ++j)

2717 
	`¥ötf
("%02x", 
¥im¨y_öfo
.
íc_log_id
[
j
]);

2718 
	`¥ötf
("\n");

2720 
	`£s_ñemít_desc_sdg
(
ty≥_desc_hdr_¨r
, 
ªs
, 
ªf_gí_code
,

2721 
ª•
, 
ª•_Àn
, 
›
);

2723 
DPC_SHORT_ENC_STATUS
:

2724 
	`¥ötf
("ShortÉnclosure status diagnosticÖage, "

2725 "°©us=0x%x\n", 
ª•
[1]);

2727 
DPC_ENC_BUSY
:

2728 
	`¥ötf
("Enclosure Busy diagnosticÖage, "

2730 
ª•
[1] & 1, (resp[1] >> 1) & 0xff);

2732 
DPC_ADD_ELEM_STATUS
:

2733 
ªs
 = 
	`p›uœã_ty≥_desc_hdr_¨r
(
sg_fd
, 
ty≥_desc_hdr_¨r
,

2734 &
ªf_gí_code
, &
¥im¨y_öfo
,

2735 
›
);

2736 i‡(
ªs
 < 0) {

2737 
ªt
 = 
ªs
;

2738 
föi
;

2740 i‡(
¥im¨y_öfo
.
have_öfo
) {

2741 
	`¥ötf
(" PrimaryÉnclosureÜogical identifier (hex): ");

2742 
j
 = 0; j < 8; ++j)

2743 
	`¥ötf
("%02x", 
¥im¨y_öfo
.
íc_log_id
[
j
]);

2744 
	`¥ötf
("\n");

2746 
	`£s_addôi⁄Æ_ñem_sdg
(
ty≥_desc_hdr_¨r
, 
ªs
, 
ªf_gí_code
,

2747 
ª•
, 
ª•_Àn
, 
›
);

2749 
DPC_SUBENC_HELP_TEXT
:

2750 
	`£s_subíc_hñp_sdg
(
ª•
, 
ª•_Àn
);

2752 
DPC_SUBENC_STRING
:

2753 
	`£s_subíc_°rög_sdg
(
ª•
, 
ª•_Àn
);

2755 
DPC_SUPPORTED_SES
:

2756 
	`£s_suµ‹ãd_∑ges_sdg
("Supported SES diagnosticÖages",

2757 
ª•
, 
ª•_Àn
);

2759 
DPC_DOWNLOAD_MICROCODE
:

2760 
	`£s_dow∆ﬂd_code_sdg
(
ª•
, 
ª•_Àn
);

2762 
DPC_SUBENC_NICKNAME
:

2763 
	`£s_subíc_nick«me_sdg
(
ª•
, 
ª•_Àn
);

2766 
	`¥ötf
("Cannot decodeÑesponse from diagnostic "

2767 "∑ge: %s\n", (
˝
 ? cp : "<unknown>"));

2768 
	`dSåHex
((c⁄° *)
ª•
, 
ª•_Àn
, 0);

2771 
ªt
 = 0;

2773 
föi
:

2774 i‡(
ª•
)

2775 
	`‰ì
(
ª•
);

2776  
ªt
;

2777 
	}
}

2784 
	$joö_w‹k
(
sg_fd
, 
›ts_t
 * 
›
, 
di•œy
)

2786 
k
, 
j
, 
ªs
, 
num_t_hdrs
, 
ñem_öd
, 
ei
, 
gë_out
;

2787 
desc_Àn
, 
dn_Àn
, 
brokí_ei
, 
ei2
, 
gŸ1
;

2788 
ªf_gí_code
, 
gí_code
;

2789 
joö_row_t
 * 
jΩ
;

2790 
joö_row_t
 * 
jr2p
;

2791 * 
es_u˝
;

2792 * 
ed_u˝
;

2793 * 
´_u˝
;

2794 * 
t_u˝
;

2797 c⁄° * 
´_œ°_u˝
;

2799 c⁄° * 
˝
;

2800 c⁄° * 
íc_°©e_ch™ged
 = " <<state ofÉnclosure changed, "

2802 c⁄° 
ty≥_desc_hdr_t
 * 
tdhp
;

2803 
í˛osuª_öfo
 
¥im¨y_öfo
;

2804 
b
[64];

2806 
	`mem£t
(&
¥im¨y_öfo
, 0, (primary_info));

2807 
num_t_hdrs
 = 
	`p›uœã_ty≥_desc_hdr_¨r
(
sg_fd
, 
ty≥_desc_hdr_¨r
,

2808 &
ªf_gí_code
, &
¥im¨y_öfo
,

2809 
›
);

2810 i‡(
num_t_hdrs
 < 0)

2811  
num_t_hdrs
;

2812 i‡(
di•œy
 && 
¥im¨y_öfo
.
have_öfo
) {

2813 
	`¥ötf
(" PrimaryÉnclosureÜogical identifier (hex): ");

2814 
j
 = 0; j < 8; ++j)

2815 
	`¥ötf
("%02x", 
¥im¨y_öfo
.
íc_log_id
[
j
]);

2816 
	`¥ötf
("\n");

2818 
ªs
 = 
	`do_ªc_düg
(
sg_fd
, 
DPC_ENC_STATUS
, 
íc_°©_r•
,

2819 (
íc_°©_r•
), 
›
, &
íc_°©_r•_Àn
);

2820 i‡(
ªs
)

2821  
ªs
;

2822 i‡(
íc_°©_r•_Àn
 < 8) {

2823 
	`Ârötf
(
°dîr
, "Enclosure StatusÑesponseÅoo short\n");

2826 
gí_code
 = (
íc_°©_r•
[4] << 24) | (enc_stat_rsp[5] << 16) |

2827 (
íc_°©_r•
[6] << 8) |Énc_stat_rsp[7];

2828 i‡(
ªf_gí_code
 !
gí_code
) {

2829 
	`Ârötf
(
°dîr
, "%s", 
íc_°©e_ch™ged
);

2832 
es_u˝
 = 
íc_°©_r•
 + 8;

2835 
ªs
 = 
	`do_ªc_düg
(
sg_fd
, 
DPC_ELEM_DESC
, 
ñem_desc_r•
,

2836 (
ñem_desc_r•
), 
›
, &
ñem_desc_r•_Àn
);

2837 i‡(0 =
ªs
) {

2838 i‡(
ñem_desc_r•_Àn
 < 8) {

2839 
	`Ârötf
(
°dîr
, "Element DescriptorÑesponseÅoo short\n");

2842 
gí_code
 = (
ñem_desc_r•
[4] << 24) | (elem_desc_rsp[5] << 16) |

2843 (
ñem_desc_r•
[6] << 8) |Élem_desc_rsp[7];

2844 i‡(
ªf_gí_code
 !
gí_code
) {

2845 
	`Ârötf
(
°dîr
, "%s", 
íc_°©e_ch™ged
);

2848 
ed_u˝
 = 
ñem_desc_r•
 + 8;

2851 
ñem_desc_r•_Àn
 = 0;

2852 
ed_u˝
 = 
NULL
;

2853 
ªs
 = 0;

2854 i‡(
›
->
vîbo£
)

2855 
	`Ârötf
(
°dîr
, " Element DescriptorÖageÇot "

2859 i‡(
di•œy
 || (
DPC_ADD_ELEM_STATUS
 =
›
->
∑ge_code
)) {

2860 
ªs
 = 
	`do_ªc_düg
(
sg_fd
, 
DPC_ADD_ELEM_STATUS
, 
add_ñem_r•
,

2861 (
add_ñem_r•
), 
›
, &
add_ñem_r•_Àn
);

2862 i‡(0 =
ªs
) {

2863 i‡(
add_ñem_r•_Àn
 < 8) {

2864 
	`Ârötf
(
°dîr
, "Additional Element StatusÑesponseÅoo "

2868 
gí_code
 = (
add_ñem_r•
[4] << 24) | (add_elem_rsp[5] << 16) |

2869 (
add_ñem_r•
[6] << 8) |ádd_elem_rsp[7];

2870 i‡(
ªf_gí_code
 !
gí_code
) {

2871 
	`Ârötf
(
°dîr
, "%s", 
íc_°©e_ch™ged
);

2874 
´_u˝
 = 
add_ñem_r•
 + 8;

2875 
´_œ°_u˝
 = 
add_ñem_r•
 + 
add_ñem_r•_Àn
 - 1;

2877 
add_ñem_r•_Àn
 = 0;

2878 
´_u˝
 = 
NULL
;

2879 
´_œ°_u˝
 = 
NULL
;

2880 
ªs
 = 0;

2881 i‡(
›
->
vîbo£
)

2882 
	`Ârötf
(
°dîr
, " Additional Element StatusÖageÇot "

2886 
´_u˝
 = 
NULL
;

2887 
´_œ°_u˝
 = 
NULL
;

2890 i‡((
›
->
do_joö
 > 1) ||

2891 ((0 =
di•œy
Ë&& (
DPC_THRESHOLD
 =
›
->
∑ge_code
))) {

2892 
ªs
 = 
	`do_ªc_düg
(
sg_fd
, 
DPC_THRESHOLD
, 
thªshﬁd_r•
,

2893 (
thªshﬁd_r•
), 
›
, &
thªshﬁd_r•_Àn
);

2894 i‡(0 =
ªs
) {

2895 i‡(
thªshﬁd_r•_Àn
 < 8) {

2896 
	`Ârötf
(
°dîr
, "Additional Element StatusÑesponseÅoo "

2900 
gí_code
 = (
thªshﬁd_r•
[4] << 24) | (threshold_rsp[5] << 16) |

2901 (
thªshﬁd_r•
[6] << 8) |Åhreshold_rsp[7];

2902 i‡(
ªf_gí_code
 !
gí_code
) {

2903 
	`Ârötf
(
°dîr
, "%s", 
íc_°©e_ch™ged
);

2906 
t_u˝
 = 
thªshﬁd_r•
 + 8;

2909 
thªshﬁd_r•_Àn
 = 0;

2910 
t_u˝
 = 
NULL
;

2911 
ªs
 = 0;

2912 i‡(
›
->
vîbo£
)

2913 
	`Ârötf
(
°dîr
, " Threshold InÖageÇotávailable\n");

2916 
thªshﬁd_r•_Àn
 = 0;

2917 
t_u˝
 = 
NULL
;

2920 
jΩ
 = 
joö_¨r
;

2921 
tdhp
 = 
ty≥_desc_hdr_¨r
;

2922 
k
 = 0, 
ei
 = 0, 
ei2
 = 0; k < 
num_t_hdrs
; ++k, ++
tdhp
) {

2923 
jΩ
->
ñ_öd_th
 = 
k
;

2924 
jΩ
->
ñ_öd_ödiv
 = -1;

2925 
jΩ
->
ëy≥
 = 
tdhp
->etype;

2926 
jΩ
->
ei_asc
 = -1;

2927 
brokí_ei
 = 
	`a˘ive_ë_´•
(
tdhp
->
ëy≥
);

2928 
jΩ
->
ei_asc2
 = -1;

2929 
jΩ
->
£_id
 = 
tdhp
->se_id;

2931 
jΩ
->
íc_°©p
 = 
es_u˝
;

2932 
es_u˝
 += 4;

2933 
jΩ
->
ñem_des˝
 = 
ed_u˝
;

2934 i‡(
ed_u˝
)

2935 
ed_u˝
 += (ed_ucp[2] << 8) +Éd_ucp[3] + 4;

2936 
jΩ
->
add_ñem_°©p
 = 
NULL
;

2937 
jΩ
->
thªsh_öp
 = 
t_u˝
;

2938 i‡(
t_u˝
)

2939 
t_u˝
 += 4;

2940 ++
jΩ
;

2941 
j
 = 0, 
ñem_öd
 = 0; j < 
tdhp
->
num_ñemíts
;

2942 ++
j
, ++
jΩ
, ++
ñem_öd
) {

2943 i‡(
jΩ
 >
joö_¨r_œ°p
)

2945 
jΩ
->
ñ_öd_th
 = 
k
;

2946 
jΩ
->
ñ_öd_ödiv
 = 
ñem_öd
;

2947 
jΩ
->
ei_asc
 = 
ei
++;

2948 i‡(
brokí_ei
)

2949 
jΩ
->
ei_asc2
 = 
ei2
++;

2951 
jΩ
->
ei_asc2
 = -1;

2952 
jΩ
->
ëy≥
 = 
tdhp
->etype;

2953 
jΩ
->
£_id
 = 
tdhp
->se_id;

2954 
jΩ
->
íc_°©p
 = 
es_u˝
;

2955 
es_u˝
 += 4;

2956 
jΩ
->
ñem_des˝
 = 
ed_u˝
;

2957 i‡(
ed_u˝
)

2958 
ed_u˝
 += (ed_ucp[2] << 8) +Éd_ucp[3] + 4;

2959 
jΩ
->
thªsh_öp
 = 
t_u˝
;

2960 i‡(
t_u˝
)

2961 
t_u˝
 += 4;

2962 
jΩ
->
add_ñem_°©p
 = 
NULL
;

2964 i‡(
jΩ
 >
joö_¨r_œ°p
)

2968 
brokí_ei
 = 0;

2969 i‡(
´_u˝
) {

2970 
gë_out
 = 0;

2971 
jΩ
 = 
joö_¨r
;

2972 
tdhp
 = 
ty≥_desc_hdr_¨r
;

2973 
k
 = 0; k < 
num_t_hdrs
; ++k, ++
tdhp
) {

2974 i‡(
	`a˘ive_ë_´•
(
tdhp
->
ëy≥
)) {

2975 
j
 = 0; j < 
tdhp
->
num_ñemíts
; ++j) {

2976 i‡((
´_u˝
 + 1Ë> 
´_œ°_u˝
) {

2977 
gë_out
 = 1;

2978 i‡(
›
->
vîbo£
)

2979 
	`Ârötf
(
°dîr
, "join_work: offÉnd ofáe "

2983 i‡(
´_u˝
[0] & 0x10) {

2984 
ei
 = 
´_u˝
[3];

2985 
åy_agaö
:

2986 
jr2p
 = 
joö_¨r
; jr2p->
íc_°©p
; ++jr2p) {

2987 i‡(
brokí_ei
) {

2988 i‡(
ei
 =
jr2p
->
ei_asc2
)

2991 i‡(
ei
 =
jr2p
->
ei_asc
)

2995 i‡(
NULL
 =
jr2p
->
íc_°©p
) {

2996 
gë_out
 = 1;

2997 
	`Ârötf
(
°dîr
, "join_work: oi=%d,Éi=%d "

2998 "(brokí_ei=%dËnŸ i¿joö_¨r\n", 
k
,

2999 
ei
, 
brokí_ei
);

3002 i‡(! 
	`a˘ive_ë_´•
(
jr2p
->
ëy≥
)) {

3004 ++
brokí_ei
;

3005 
åy_agaö
;

3007 
jr2p
->
add_ñem_°©p
 = 
´_u˝
;

3009 
jΩ
->
íc_°©p
 && ((-1 =jΩ->
ñ_öd_ödiv
) ||

3010 
jΩ
->
add_ñem_°©p
))

3011 ++
jΩ
;

3012 i‡(
NULL
 =
jΩ
->
íc_°©p
) {

3013 
gë_out
 = 1;

3014 
	`Ârötf
(
°dîr
, "join_work: join_arr hasÇo "

3018 
jΩ
->
add_ñem_°©p
 = 
´_u˝
;

3019 ++
jΩ
;

3021 
´_u˝
 +=áe_ucp[1] + 2;

3025 
j
 = 0; j <
tdhp
->
num_ñemíts
; ++j, ++
jΩ
) {

3026 i‡(
NULL
 =
jΩ
->
íc_°©p
) {

3027 
gë_out
 = 1;

3028 
	`Ârötf
(
°dîr
, "join_work: join_arr hasÇo "

3034 i‡(
gë_out
)

3039 i‡(
›
->
vîbo£
 > 3) {

3040 
jΩ
 = 
joö_¨r
;

3041 
k
 = 0; ((k < 
MX_JOIN_ROWS
Ë&& 
jΩ
->
íc_°©p
); ++k, ++jrp) {

3042 
	`Ârötf
(
°dîr
, "el_ind_th=%dÉl_ind_indiv=%dÉtype=%d "

3043 "£_id=%dÉi=%dÉi2=%d %†%†%†%s\n", 
jΩ
->
ñ_öd_th
,

3044 
jΩ
->
ñ_öd_ödiv
, jΩ->
ëy≥
, jΩ->
£_id
, jΩ->
ei_asc
,

3045 
jΩ
->
ei_asc2
, (jΩ->
íc_°©p
 ? "enc_statp" : ""),

3046 (
jΩ
->
ñem_des˝
 ? "elem_descp" : ""),

3047 (
jΩ
->
add_ñem_°©p
 ? "add_elem_statp" : ""),

3048 (
jΩ
->
thªsh_öp
 ? "thresh_inp" : ""));

3050 
	`Ârötf
(
°dîr
, ">>ÉÀmít†ö joö_¨r: %d, brokí_ei=%d\n", 
k
,

3051 
brokí_ei
);

3053 i‡(! 
di•œy
)

3057 
dn_Àn
 = 
›
->
desc_«me
 ? ()
	`°æí
(op->desc_name) : 0;

3058 
k
 = 0, 
jΩ
 = 
joö_¨r
, 
gŸ1
 = 0;

3059 ((
k
 < 
MX_JOIN_ROWS
Ë&& 
jΩ
->
íc_°©p
); ++k, ++jrp) {

3060 i‡(
›
->
öd_giví
) {

3061 i‡(
›
->
öd_th
 !
jΩ
->
ñ_öd_th
)

3063 i‡(
›
->
öd_ödiv
 !
jΩ
->
ñ_öd_ödiv
)

3066 
ed_u˝
 = 
jΩ
->
ñem_des˝
;

3067 i‡(
›
->
desc_«me
) {

3068 i‡(
NULL
 =
ed_u˝
)

3070 
desc_Àn
 = (
ed_u˝
[2] << 8) +Éd_ucp[3];

3071 i‡(
desc_Àn
 !
dn_Àn
)

3073 i‡(0 !
	`°∫cmp
(
›
->
desc_«me
, (c⁄° *)(
ed_u˝
 + 4),

3074 
desc_Àn
))

3077 ++
gŸ1
;

3078 
˝
 = 
	`föd_ñemít_äame
(
jΩ
->
ëy≥
, 
b
, (b));

3079 i‡(
ed_u˝
) {

3080 
desc_Àn
 = (
ed_u˝
[2] << 8) +Éd_ucp[3] + 4;

3081 i‡(
desc_Àn
 > 4)

3082 
	`¥ötf
("%.*†[%d,%d] EÀmíàty≥: %s\n", 
desc_Àn
 - 4,

3083 (c⁄° *)(
ed_u˝
 + 4), 
jΩ
->
ñ_öd_th
,

3084 
jΩ
->
ñ_öd_ödiv
, 
˝
);

3086 
	`¥ötf
("[%d,%d] EÀmíàty≥: %s\n", 
jΩ
->
ñ_öd_th
,

3087 
jΩ
->
ñ_öd_ödiv
, 
˝
);

3089 
	`¥ötf
("[%d,%d] EÀmíàty≥: %s\n", 
jΩ
->
ñ_öd_th
,

3090 
jΩ
->
ñ_öd_ödiv
, 
˝
);

3091 
	`¥ötf
(" Enclosure Status:\n");

3092 
	`íc_°©us_hñ≥r
(" ", 
jΩ
->
íc_°©p
, jΩ->
ëy≥
, 
›
);

3093 i‡(
jΩ
->
add_ñem_°©p
) {

3094 
	`¥ötf
(" Additional Element Status:\n");

3095 
´_u˝
 = 
jΩ
->
add_ñem_°©p
;

3096 
desc_Àn
 = 
´_u˝
[1] + 2;

3097 
	`addôi⁄Æ_ñem_hñ≥r
(" ", 
´_u˝
, 
desc_Àn
, 
jΩ
->
ëy≥
, 
›
);

3099 i‡(
jΩ
->
thªsh_öp
) {

3100 
	`¥ötf
(" Threshold In:\n");

3101 
t_u˝
 = 
jΩ
->
thªsh_öp
;

3102 
	`£s_thªshﬁd_hñ≥r
(" ", 
t_u˝
, 
jΩ
->
ëy≥
, 
›
);

3105 i‡(0 =
gŸ1
) {

3106 i‡(
›
->
öd_giví
)

3107 
	`¥ötf
(" >>>Çÿm©ch o¿--ödex=%d,%d\n", 
›
->
öd_th
,

3108 
›
->
öd_ödiv
);

3109 i‡(
›
->
desc_«me
)

3110 
	`¥ötf
(" >>>Çÿm©ch o¿--des¸ùt‹=%s\n", 
›
->
desc_«me
);

3112  
ªs
;

3113 
	}
}

3115 
uöt64_t


3116 
	$gë_big_ídün
(c⁄° * 
‰om
, 
°¨t_bô
, 
num_bôs
)

3118 
uöt64_t
 
ªs
;

3119 
sbô_o1
 = 
°¨t_bô
 + 1;

3121 
ªs
 = (*
‰om
++ & ((1 << 
sbô_o1
) - 1));

3122 
num_bôs
 -
sbô_o1
;

3123 
num_bôs
 > 0) {

3124 
ªs
 <<= 8;

3125 
ªs
 |*
‰om
++;

3126 
num_bôs
 -= 8;

3128 i‡(
num_bôs
 < 0)

3129 
ªs
 >>(-
num_bôs
);

3130  
ªs
;

3131 
	}
}

3134 
	$£t_big_ídün
(
uöt64_t
 
vÆ
, * 
to
, 
°¨t_bô
, 
num_bôs
)

3136 
sbô_o1
 = 
°¨t_bô
 + 1;

3137 
mask
, 
num
, 
k
, 
x
;

3139 
mask
 = (8 !
sbô_o1
) ? ((1 << sbit_o1) - 1) : 0xff;

3140 
k
 = 
°¨t_bô
 - ((
num_bôs
 - 1) % 8);

3141 i‡(0 !
k
)

3142 
vÆ
 <<((
k
 > 0) ? k : (8 + k));

3143 
num
 = (
num_bôs
 + 15 - 
sbô_o1
) / 8;

3144 
k
 = 0; k < 
num
; ++k) {

3145 i‡((
sbô_o1
 - 
num_bôs
) > 0)

3146 
mask
 &~((1 << (
sbô_o1
 - 
num_bôs
)) - 1);

3147 i‡(
k
 < (
num
 - 1))

3148 
x
 = (
vÆ
 >> ((
num
 - 
k
 - 1) * 8)) & 0xff;

3150 
x
 = 
vÆ
 & 0xff;

3151 
to
[
k
] = (to[k] & ~
mask
Ë| (
x
 & mask);

3152 
mask
 = 0xff;

3153 
num_bôs
 -
sbô_o1
;

3154 
sbô_o1
 = 8;

3156 
	}
}

3161 
	$°rˇ£_eq
(c⁄° * 
s1p
, c⁄° * 
s2p
)

3163 
c1
, 
c2
;

3166 
c1
 = *
s1p
++;

3167 
c2
 = *
s2p
++;

3168 i‡(
c1
 !
c2
) {

3169 i‡(
c2
 >= 'a')

3170 
c2
 = 
	`touµî
(c2);

3171 i‡(
c1
 >= 'a')

3172 
c1
 = 
	`touµî
(c1);

3175 i‡(
c1
 !
c2
)

3178 } 
c1
);

3180 
	}
}

3183 
	$is_a¸⁄ym_ö_°©us_˘l
(c⁄° 
tu∂e_a¸⁄ym_vÆ
 * 
èvp
)

3185 c⁄° 
a¸⁄ym2tu∂e
 * 
a2ç
;

3187 
a2ç
 = 
ecs_a2t_¨r
;á2ç->
a¸⁄
; ++á2tp) {

3188 i‡(
	`°rˇ£_eq
(
èvp
->
a¸⁄
, 
a2ç
->acron))

3191  (
a2ç
->
a¸⁄
 ? 1 : 0);

3192 
	}
}

3195 
	$is_a¸⁄ym_ö_thªshﬁd
(c⁄° 
tu∂e_a¸⁄ym_vÆ
 * 
èvp
)

3197 c⁄° 
a¸⁄ym2tu∂e
 * 
a2ç
;

3199 
a2ç
 = 
th_a2t_¨r
;á2ç->
a¸⁄
; ++á2tp) {

3200 i‡(
	`°rˇ£_eq
(
èvp
->
a¸⁄
, 
a2ç
->acron))

3203  (
a2ç
->
a¸⁄
 ? 1 : 0);

3204 
	}
}

3207 
	$is_a¸⁄ym_ö_addôi⁄Æ
(c⁄° 
tu∂e_a¸⁄ym_vÆ
 * 
èvp
)

3209 c⁄° 
a¸⁄ym2tu∂e
 * 
a2ç
;

3211 
a2ç
 = 
´_ßs_a2t_¨r
;á2ç->
a¸⁄
; ++á2tp) {

3212 i‡(
	`°rˇ£_eq
(
èvp
->
a¸⁄
, 
a2ç
->acron))

3215  (
a2ç
->
a¸⁄
 ? 1 : 0);

3216 
	}
}

3222 
	$cgs_íc_˘l_°©
(
sg_fd
, c⁄° 
joö_row_t
 * 
jΩ
,

3223 c⁄° 
tu∂e_a¸⁄ym_vÆ
 * 
èvp
,

3224 c⁄° 
›ts_t
 * 
›
)

3226 
ªt
, 
Àn
, 
s_byã
, 
s_bô
, 
n_bôs
;

3227 
uöt64_t
 
ui
;

3228 c⁄° 
a¸⁄ym2tu∂e
 * 
a2ç
;

3230 i‡(
NULL
 =
èvp
->
a¸⁄
) {

3231 
s_byã
 = 
èvp
->
°¨t_byã
;

3232 
s_bô
 = 
èvp
->
°¨t_bô
;

3233 
n_bôs
 = 
èvp
->
num_bôs
;

3235 i‡(
èvp
->
a¸⁄
) {

3236 
a2ç
 = 
ecs_a2t_¨r
;á2ç->
a¸⁄
; ++á2tp) {

3237 i‡(((
jΩ
->
ëy≥
 =
a2ç
->etype) || (-1 ==á2tp->etype)) &&

3238 
	`°rˇ£_eq
(
èvp
->
a¸⁄
, 
a2ç
->acron))

3241 i‡(
a2ç
->
a¸⁄
) {

3242 
s_byã
 = 
a2ç
->
°¨t_byã
;

3243 
s_bô
 = 
a2ç
->
°¨t_bô
;

3244 
n_bôs
 = 
a2ç
->
num_bôs
;

3248 i‡(
›
->
vîbo£
 > 1)

3249 
	`Ârötf
(
°dîr
, " s_byã=%d, s_bô=%d,Ç_bôs=%d\n", 
s_byã
, 
s_bô
,

3250 
n_bôs
);

3251 i‡(
›
->
gë_°r
) {

3252 
ui
 = 
	`gë_big_ídün
(
jΩ
->
íc_°©p
 + 
s_byã
, 
s_bô
, 
n_bôs
);

3253 i‡(
›
->
do_hex
)

3254 
	`¥ötf
("0x%" 
PRIx64
 "\n", 
ui
);

3256 
	`¥ötf
("%" 
PRId64
 "\n", (
öt64_t
)
ui
);

3258 
jΩ
->
íc_°©p
[0] &= 0x40;

3259 
	`£t_big_ídün
((
uöt64_t
)
èvp
->
vÆ
,

3260 
jΩ
->
íc_°©p
 + 
s_byã
, 
s_bô
, 
n_bôs
);

3261 
jΩ
->
íc_°©p
[0] |= 0x80;

3262 i‡(
›
->
byã1_giví
)

3263 
íc_°©_r•
[1] = 
›
->
byã1
;

3264 
Àn
 = (
íc_°©_r•
[2] << 8) +Énc_stat_rsp[3] + 4;

3265 
ªt
 = 
	`do_£nddüg
(
sg_fd
, 1, 
íc_°©_r•
, 
Àn
, 1, 
›
->
vîbo£
);

3266 i‡(
ªt
) {

3267 
	`Ârötf
(
°dîr
, "couldn't send Enclosure ControlÖage\n");

3272 
	}
}

3278 
	$cgs_thªshﬁd
(
sg_fd
, c⁄° 
joö_row_t
 * 
jΩ
,

3279 c⁄° 
tu∂e_a¸⁄ym_vÆ
 * 
èvp
,

3280 c⁄° 
›ts_t
 * 
›
)

3282 
ªt
, 
Àn
, 
s_byã
, 
s_bô
, 
n_bôs
;

3283 
uöt64_t
 
ui
;

3284 c⁄° 
a¸⁄ym2tu∂e
 * 
a2ç
;

3286 i‡(
NULL
 =
jΩ
->
thªsh_öp
) {

3287 
	`Ârötf
(
°dîr
, "No Threshold In/OutÉlementávailable\n");

3290 i‡(
NULL
 =
èvp
->
a¸⁄
) {

3291 
s_byã
 = 
èvp
->
°¨t_byã
;

3292 
s_bô
 = 
èvp
->
°¨t_bô
;

3293 
n_bôs
 = 
èvp
->
num_bôs
;

3295 i‡(
èvp
->
a¸⁄
) {

3296 
a2ç
 = 
th_a2t_¨r
;á2ç->
a¸⁄
; ++á2tp) {

3297 i‡(((
jΩ
->
ëy≥
 =
a2ç
->etype) || (-1 ==á2tp->etype)) &&

3298 
	`°rˇ£_eq
(
èvp
->
a¸⁄
, 
a2ç
->acron))

3301 i‡(
a2ç
->
a¸⁄
) {

3302 
s_byã
 = 
a2ç
->
°¨t_byã
;

3303 
s_bô
 = 
a2ç
->
°¨t_bô
;

3304 
n_bôs
 = 
a2ç
->
num_bôs
;

3308 i‡(
›
->
gë_°r
) {

3309 
ui
 = 
	`gë_big_ídün
(
jΩ
->
thªsh_öp
 + 
s_byã
, 
s_bô
, 
n_bôs
);

3310 i‡(
›
->
do_hex
)

3311 
	`¥ötf
("0x%" 
PRIx64
 "\n", 
ui
);

3313 
	`¥ötf
("%" 
PRId64
 "\n", (
öt64_t
)
ui
);

3315 
	`£t_big_ídün
((
uöt64_t
)
èvp
->
vÆ
,

3316 
jΩ
->
thªsh_öp
 + 
s_byã
, 
s_bô
, 
n_bôs
);

3317 i‡(
›
->
byã1_giví
)

3318 
thªshﬁd_r•
[1] = 
›
->
byã1
;

3319 
Àn
 = (
thªshﬁd_r•
[2] << 8) +Åhreshold_rsp[3] + 4;

3320 
ªt
 = 
	`do_£nddüg
(
sg_fd
, 1, 
thªshﬁd_r•
, 
Àn
, 1, 
›
->
vîbo£
);

3321 i‡(
ªt
) {

3322 
	`Ârötf
(
°dîr
, "couldn't send Threshold OutÖage\n");

3327 
	}
}

3333 
	$cgs_addôi⁄Æ_ñ
(c⁄° 
joö_row_t
 * 
jΩ
,

3334 c⁄° 
tu∂e_a¸⁄ym_vÆ
 * 
èvp
,

3335 c⁄° 
›ts_t
 * 
›
)

3337 
s_byã
, 
s_bô
, 
n_bôs
;

3338 
uöt64_t
 
ui
;

3339 c⁄° 
a¸⁄ym2tu∂e
 * 
a2ç
;

3341 i‡(
NULL
 =
jΩ
->
add_ñem_°©p
) {

3342 
	`Ârötf
(
°dîr
, "NoádditionalÉlement statusÉlementávailable\n");

3345 i‡(
NULL
 =
èvp
->
a¸⁄
) {

3346 
s_byã
 = 
èvp
->
°¨t_byã
;

3347 
s_bô
 = 
èvp
->
°¨t_bô
;

3348 
n_bôs
 = 
èvp
->
num_bôs
;

3350 i‡(
èvp
->
a¸⁄
) {

3351 
a2ç
 = 
´_ßs_a2t_¨r
;á2ç->
a¸⁄
; ++á2tp) {

3352 i‡(((
jΩ
->
ëy≥
 =
a2ç
->etype) || (-1 ==á2tp->etype)) &&

3353 
	`°rˇ£_eq
(
èvp
->
a¸⁄
, 
a2ç
->acron))

3356 i‡(
a2ç
->
a¸⁄
) {

3357 
s_byã
 = 
a2ç
->
°¨t_byã
;

3358 
s_bô
 = 
a2ç
->
°¨t_bô
;

3359 
n_bôs
 = 
a2ç
->
num_bôs
;

3363 i‡(
›
->
gë_°r
) {

3364 
ui
 = 
	`gë_big_ídün
(
jΩ
->
add_ñem_°©p
 + 
s_byã
, 
s_bô
, 
n_bôs
);

3365 i‡(
›
->
do_hex
)

3366 
	`¥ötf
("0x%" 
PRIx64
 "\n", 
ui
);

3368 
	`¥ötf
("%" 
PRId64
 "\n", (
öt64_t
)
ui
);

3370 
	`Ârötf
(
°dîr
, "--clearánd --setÇotávailable for Additional "

3375 
	}
}

3380 
	$£s_cgs
(
sg_fd
, c⁄° 
tu∂e_a¸⁄ym_vÆ
 * 
èvp
,

3381 
›ts_t
 * 
›
)

3383 
ªt
, 
k
, 
desc_Àn
, 
dn_Àn
, 
found
;

3384 c⁄° 
joö_row_t
 * 
jΩ
;

3385 c⁄° * 
ed_u˝
;

3386 
b
[64];

3388 
found
 = 0;

3389 i‡(
NULL
 =
èvp
->
a¸⁄
) {

3390 i‡(! 
›
->
∑ge_code_giví
)

3391 
›
->
∑ge_code
 = 
DPC_ENC_CONTROL
;

3392 ++
found
;

3393 } i‡(
	`is_a¸⁄ym_ö_°©us_˘l
(
èvp
)) {

3394 
›
->
∑ge_code
 = 
DPC_ENC_CONTROL
;

3395 ++
found
;

3396 } i‡(
	`is_a¸⁄ym_ö_thªshﬁd
(
èvp
)) {

3397 
›
->
∑ge_code
 = 
DPC_THRESHOLD
;

3398 ++
found
;

3399 } i‡(
	`is_a¸⁄ym_ö_addôi⁄Æ
(
èvp
)) {

3400 
›
->
∑ge_code
 = 
DPC_ADD_ELEM_STATUS
;

3401 ++
found
;

3403 i‡(! 
found
) {

3404 
	`Ârötf
(
°dîr
, "acroynm %sÇot found (try '-ee' option)\n",

3405 
èvp
->
a¸⁄
);

3408 
ªt
 = 
	`joö_w‹k
(
sg_fd
, 
›
, 0);

3409 i‡(
ªt
)

3410  
ªt
;

3411 
dn_Àn
 = 
›
->
desc_«me
 ? ()
	`°æí
(op->desc_name) : 0;

3412 
k
 = 0, 
jΩ
 = 
joö_¨r
; ((k < 
MX_JOIN_ROWS
Ë&& jΩ->
íc_°©p
);

3413 ++
k
, ++
jΩ
) {

3414 i‡(
›
->
öd_giví
) {

3415 i‡(
›
->
öd_th
 !
jΩ
->
ñ_öd_th
)

3417 i‡(
›
->
öd_ödiv
 !
jΩ
->
ñ_öd_ödiv
)

3419 } i‡(
›
->
desc_«me
) {

3420 
ed_u˝
 = 
jΩ
->
ñem_des˝
;

3421 i‡(
NULL
 =
ed_u˝
)

3423 
desc_Àn
 = (
ed_u˝
[2] << 8) +Éd_ucp[3];

3424 i‡(
desc_Àn
 !
dn_Àn
)

3426 i‡(0 !
	`°∫cmp
(
›
->
desc_«me
, (c⁄° *)(
ed_u˝
 + 4),

3427 
desc_Àn
))

3430 i‡(
DPC_ENC_CONTROL
 =
›
->
∑ge_code
)

3431 
ªt
 = 
	`cgs_íc_˘l_°©
(
sg_fd
, 
jΩ
, 
èvp
, 
›
);

3432 i‡(
DPC_THRESHOLD
 =
›
->
∑ge_code
)

3433 
ªt
 = 
	`cgs_thªshﬁd
(
sg_fd
, 
jΩ
, 
èvp
, 
›
);

3434 i‡(
DPC_ADD_ELEM_STATUS
 =
›
->
∑ge_code
)

3435 
ªt
 = 
	`cgs_addôi⁄Æ_ñ
(
jΩ
, 
èvp
, 
›
);

3437 
	`Ârötf
(
°dîr
, "page %sÇot supported for cgs\n",

3438 
	`föd_ñemít_äame
(
›
->
∑ge_code
, 
b
, (b)));

3439 
ªt
 = -1;

3441 i‡(
ªt
)

3442  
ªt
;

3445 i‡((
NULL
 =
jΩ
->
íc_°©p
Ë|| (
k
 >
MX_JOIN_ROWS
)) {

3446 i‡(
›
->
desc_«me
)

3447 
	`Ârötf
(
°dîr
, "descriptorÇame: %sÇot found (checkÅhe 'ed' "

3448 "∑gê[0x7])\n", 
›
->
desc_«me
);

3450 
	`Ârötf
(
°dîr
, "ödex: %d,%dÇŸ found\n", 
›
->
öd_th
,

3451 
›
->
öd_ödiv
);

3455 
	}
}

3458 
	$íumî©e_düg_∑ges
()

3460 c⁄° 
düg_∑ge_code
 * 
pcdp
;

3461 c⁄° 
düg_∑ge_abbªv
 * 
≠
;

3462 
gŸ1
;

3464 
	`¥ötf
("DiagnosticÖages, followed byábbreviation(s)ÅhenÖage code:\n");

3465 
pcdp
 = 
dpc_¨r
;Öcdp->
desc
; ++pcdp) {

3466 
	`¥ötf
(" %† [", 
pcdp
->
desc
);

3467 
≠
 = 
dp_abbªv
, 
gŸ1
 = 0;áp->
abbªv
; ++ap) {

3468 i‡(
≠
->
∑ge_code
 =
pcdp
->page_code) {

3469 
	`¥ötf
("%s%s", (
gŸ1
 ? "," : ""), 
≠
->
abbªv
);

3470 ++
gŸ1
;

3473 
	`¥ötf
("] [0x%x]\n", 
pcdp
->
∑ge_code
);

3475 
	}
}

3480 
	$íumî©e_w‹k
(c⁄° 
›ts_t
 * 
›
)

3482 
num
;

3483 c⁄° 
ñemít_ty≥_t
 * 
ëp
;

3484 c⁄° 
a¸⁄ym2tu∂e
 * 
a2ç
;

3485 
b
[64];

3486 c⁄° * 
˝
;

3488 i‡(
›
->
devi˚_«me
)

3489 
	`¥ötf
(">>> DEVICE %s ignored when --%s option given.\n",

3490 
›
->
devi˚_«me
, (›->
do_li°
 ? "list" : "enumerate"));

3491 
num
 = 
›
->
do_íumî©e
 + op->
do_li°
;

3492 i‡(
num
 < 2) {

3493 
	`íumî©e_düg_∑ges
();

3494 
	`¥ötf
("\nSESÉlementÅypeÇames, followed byábbreviationánd "

3496 
ëp
 = 
ñemít_ty≥_¨r
;Éç->
desc
; ++etp)

3497 
	`¥ötf
(" %† [%s] [0x%x]\n", 
ëp
->
desc
,Éç->
abbªv
,

3498 
ëp
->
ñem_ty≥_code
);

3501 
	`¥ötf
("--clear, --get, --setácronyms for Enclosure Status/Control "

3503 
a2ç
 = 
ecs_a2t_¨r
;á2ç->
a¸⁄
; ++a2tp) {

3504 
˝
 = (
a2ç
->
ëy≥
 < 0) ? "*" :

3505 
	`föd_ñemít_äame
(
a2ç
->
ëy≥
, 
b
, (b));

3506 
	`¥ötf
(" %† [%s] [%d:%d:%d]\n", 
a2ç
->
a¸⁄
, (
˝
 ? cp : "??"),

3507 
a2ç
->
°¨t_byã
,á2ç->
°¨t_bô
,á2ç->
num_bôs
);

3509 
	`¥ötf
("\n--clear, --get, --setácronyms for Threshold In/Out "

3511 
a2ç
 = 
th_a2t_¨r
;á2ç->
a¸⁄
; ++a2tp) {

3512 
˝
 = (
a2ç
->
ëy≥
 < 0) ? "*" :

3513 
	`föd_ñemít_äame
(
a2ç
->
ëy≥
, 
b
, (b));

3514 
	`¥ötf
(" %† [%s] [%d:%d:%d]\n", 
a2ç
->
a¸⁄
, (
˝
 ? cp : "??"),

3515 
a2ç
->
°¨t_byã
,á2ç->
°¨t_bô
,á2ç->
num_bôs
);

3517 
	`¥ötf
("\n--getácronyms for Additional Element Status ['aes']Öage "

3519 
a2ç
 = 
´_ßs_a2t_¨r
;á2ç->
a¸⁄
; ++a2tp) {

3520 
˝
 = (
a2ç
->
ëy≥
 < 0) ? "*" :

3521 
	`föd_ñemít_äame
(
a2ç
->
ëy≥
, 
b
, (b));

3522 
	`¥ötf
(" %† [%s] [%d:%d:%d]\n", 
a2ç
->
a¸⁄
, (
˝
 ? cp : "??"),

3523 
a2ç
->
°¨t_byã
,á2ç->
°¨t_bô
,á2ç->
num_bôs
);

3526 
	}
}

3530 
	$maö
(
¨gc
, * 
¨gv
[])

3532 
sg_fd
, 
ªs
;

3533 
buff
[128];

3534 
pd_ty≥
 = 0;

3535 
have_cgs
 = 0;

3536 
ªt
 = 0;

3537 
sg_sim∂e_öquúy_ª•
 
öq_ª•
;

3538 c⁄° * 
˝
;

3539 
›ts_t
 
›ts
;

3540 
tu∂e_a¸⁄ym_vÆ
 
èv
;

3542 
	`mem£t
(&
›ts
, 0, (opts));

3543 
ªs
 = 
	`¥o˚ss_˛
(&
›ts
, 
¨gc
, 
¨gv
);

3544 i‡(
ªs
)

3545  
SG_LIB_SYNTAX_ERROR
;

3546 i‡(
›ts
.
do_vîsi⁄
) {

3547 
	`Ârötf
(
°dîr
, "vîsi⁄: %s\n", 
vîsi⁄_°r
);

3550 i‡(
›ts
.
do_hñp
) {

3551 
	`ußge
();

3554 i‡(
›ts
.
do_íumî©e
 || o±s.
do_li°
) {

3555 
	`íumî©e_w‹k
(&
›ts
);

3558 i‡(
›ts
.
num_cgs
) {

3559 
have_cgs
 = 1;

3560 
˝
 = 
›ts
.
˛ór_°r
 ? opts.clear_str :

3561 (
›ts
.
gë_°r
 ? o±s.gë_°∏: o±s.
£t_°r
);

3562 
	`°∫˝y
(
buff
, 
˝
, (buff) - 1);

3563 
buff
[(buff) - 1] = '\0';

3564 i‡(
	`∑r£_cgs_°r
(
buff
, &
èv
)) {

3565 
	`Ârötf
(
°dîr
, "unableÅo decode STRárgumentÅo --clear, "

3567  
SG_LIB_SYNTAX_ERROR
;

3569 i‡(
›ts
.
gë_°r
 && 
èv
.
vÆ_°r
)

3570 
	`Ârötf
(
°dîr
, "--get option ignoring =<val>átÅheÉnd "

3572 i‡((0 =
›ts
.
öd_giví
Ë&& (! o±s.
desc_«me
)) {

3573 
	`Ârötf
(
°dîr
, "with --clear, --get or --set optionÇeed "

3575  
SG_LIB_SYNTAX_ERROR
;

3577 i‡(
NULL
 =
èv
.
vÆ_°r
) {

3578 i‡(
›ts
.
˛ór_°r
)

3579 
èv
.
vÆ
 = 0;

3580 i‡(
›ts
.
£t_°r
)

3581 
èv
.
vÆ
 = 1;

3583 i‡(
›ts
.
∑ge_code_giví
 && (
DPC_ENC_STATUS
 !›ts.
∑ge_code
) &&

3584 (
DPC_THRESHOLD
 !
›ts
.
∑ge_code
) &&

3585 (
DPC_ADD_ELEM_STATUS
 !
›ts
.
∑ge_code
)) {

3586 
	`Ârötf
(
°dîr
, "--clear, --get or --set options only supported "

3589  
SG_LIB_SYNTAX_ERROR
;

3593 
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
›ts
.
devi˚_«me
, 0 , o±s.
vîbo£
);

3594 i‡(
sg_fd
 < 0) {

3595 
	`Ârötf
(
°dîr
, "›íÉº‹: %s: %s\n", 
›ts
.
devi˚_«me
,

3596 
	`ß„_°ªº‹
(-
sg_fd
));

3597  
SG_LIB_FILE_ERROR
;

3599 i‡(! (
›ts
.
do_øw
 || 
have_cgs
)) {

3600 i‡(
	`sg_sim∂e_öquúy
(
sg_fd
, &
öq_ª•
, 1, 
›ts
.
vîbo£
)) {

3601 
	`Ârötf
(
°dîr
, "%s doesn'tÑespondÅoá SCSI INQUIRY\n",

3602 
›ts
.
devi˚_«me
);

3603 
ªt
 = 
SG_LIB_CAT_OTHER
;

3604 
îr_out
;

3606 
	`¥ötf
(" %.8† %.16† %.4s\n", 
öq_ª•
.
víd‹
,

3607 
öq_ª•
.
¥odu˘
, inq_ª•.
ªvisi⁄
);

3608 
pd_ty≥
 = 
öq_ª•
.
≥rùhîÆ_ty≥
;

3609 
˝
 = 
	`sg_gë_pdt_°r
(
pd_ty≥
, (
buff
), buff);

3610 i‡(0xd =
pd_ty≥
) {

3611 i‡(
›ts
.
vîbo£
)

3612 
	`¥ötf
("Énclosure services device\n");

3613 } i‡(0x40 & 
öq_ª•
.
byã_6
)

3614 
	`¥ötf
(" %†devi˚ ha†EncSîv bô së\n", 
˝
);

3616 
	`¥ötf
(" %†devi˚ (nŸá¿í˛osuª)\n", 
˝
);

3619 i‡(
have_cgs
)

3620 
ªt
 = 
	`£s_cgs
(
sg_fd
, &
èv
, &
›ts
);

3621 i‡(
›ts
.
do_joö
)

3622 
ªt
 = 
	`joö_w‹k
(
sg_fd
, &
›ts
, 1);

3623 i‡(
›ts
.
do_°©us
)

3624 
ªt
 = 
	`£s_¥o˚ss_°©us_∑ge
(
sg_fd
, &
›ts
);

3626 
›ts
.
d©a_¨r
[0] = o±s.
∑ge_code
;

3627 
›ts
.
d©a_¨r
[1] = o±s.
byã1
;

3628 
›ts
.
d©a_¨r
[2] = (›ts.
¨r_Àn
 >> 8) & 0xff;

3629 
›ts
.
d©a_¨r
[3] = o±s.
¨r_Àn
 & 0xff;

3630 
›ts
.
∑ge_code
) {

3631 
DPC_ENC_CONTROL
:

3632 
	`¥ötf
("Sending Enclosure Control [0x%x]Öage, withÖage "

3633 "Àngth=%d byãs\n", 
›ts
.
∑ge_code
, o±s.
¨r_Àn
);

3634 
ªt
 = 
	`do_£nddüg
(
sg_fd
, 1, 
›ts
.
d©a_¨r
, o±s.
¨r_Àn
 + 4, 1,

3635 
›ts
.
vîbo£
);

3636 i‡(
ªt
) {

3637 
	`Ârötf
(
°dîr
, "couldn't send Enclosure ControlÖage\n");

3638 
îr_out
;

3641 
DPC_STRING
:

3642 
	`¥ötf
("Sending String Out [0x%x]Öage, withÖageÜength=%d "

3643 "byãs\n", 
›ts
.
∑ge_code
, o±s.
¨r_Àn
);

3644 
ªt
 = 
	`do_£nddüg
(
sg_fd
, 1, 
›ts
.
d©a_¨r
, o±s.
¨r_Àn
 + 4, 1,

3645 
›ts
.
vîbo£
);

3646 i‡(
ªt
) {

3647 
	`Ârötf
(
°dîr
, "couldn't send String OutÖage\n");

3648 
îr_out
;

3651 
DPC_THRESHOLD
:

3652 
	`¥ötf
("Sending Threshold Out [0x%x]Öage, withÖageÜength=%d "

3653 "byãs\n", 
›ts
.
∑ge_code
, o±s.
¨r_Àn
);

3654 
ªt
 = 
	`do_£nddüg
(
sg_fd
, 1, 
›ts
.
d©a_¨r
, o±s.
¨r_Àn
 + 4, 1,

3655 
›ts
.
vîbo£
);

3656 i‡(
ªt
) {

3657 
	`Ârötf
(
°dîr
, "couldn't send Threshold OutÖage\n");

3658 
îr_out
;

3661 
DPC_ARRAY_CONTROL
:

3662 
	`¥ötf
("Sending Array Control [0x%x]Öage, withÖage "

3663 "Àngth=%d byãs\n", 
›ts
.
∑ge_code
, o±s.
¨r_Àn
);

3664 
ªt
 = 
	`do_£nddüg
(
sg_fd
, 1, 
›ts
.
d©a_¨r
, o±s.
¨r_Àn
 + 4, 1,

3665 
›ts
.
vîbo£
);

3666 i‡(
ªt
) {

3667 
	`Ârötf
(
°dîr
, "couldn't send Array ControlÖage\n");

3668 
îr_out
;

3671 
DPC_SUBENC_STRING
:

3672 
	`¥ötf
("Sending Subenclosure String Out [0x%x]Öage, withÖage "

3673 "Àngth=%d byãs\n", 
›ts
.
∑ge_code
, o±s.
¨r_Àn
);

3674 
ªt
 = 
	`do_£nddüg
(
sg_fd
, 1, 
›ts
.
d©a_¨r
, o±s.
¨r_Àn
 + 4, 1,

3675 
›ts
.
vîbo£
);

3676 i‡(
ªt
) {

3677 
	`Ârötf
(
°dîr
, "couldn't send Subenclosure String Out "

3679 
îr_out
;

3682 
DPC_DOWNLOAD_MICROCODE
:

3683 
	`¥ötf
("Sending Download Microcode Control [0x%x]Öage, with "

3684 "∑gêÀngth=%d byãs\n", 
›ts
.
∑ge_code
, o±s.
¨r_Àn
);

3685 
ªt
 = 
	`do_£nddüg
(
sg_fd
, 1, 
›ts
.
d©a_¨r
, o±s.
¨r_Àn
 + 4, 1,

3686 
›ts
.
vîbo£
);

3687 i‡(
ªt
) {

3688 
	`Ârötf
(
°dîr
, "couldn't send Download Microcode Control "

3690 
îr_out
;

3693 
DPC_SUBENC_NICKNAME
:

3694 
	`¥ötf
("Sending Subenclosure Nickname Control [0x%x]Öage, with "

3695 "∑gêÀngth=%d byãs\n", 
›ts
.
∑ge_code
, o±s.
¨r_Àn
);

3696 
ªt
 = 
	`do_£nddüg
(
sg_fd
, 1, 
›ts
.
d©a_¨r
, o±s.
¨r_Àn
 + 4, 1,

3697 
›ts
.
vîbo£
);

3698 i‡(
ªt
) {

3699 
	`Ârötf
(
°dîr
, "couldn't send Subenclosure Nickname "

3701 
îr_out
;

3705 
	`Ârötf
(
°dîr
, "Setting SES controlÖage 0x%xÇot supported "

3706 "byÅhi†utûôy\n", 
›ts
.
∑ge_code
);

3707 
	`Ârötf
(
°dîr
, "That can be done withÅhe sg_senddiag utility "

3709 
ªt
 = 
SG_LIB_SYNTAX_ERROR
;

3714 
îr_out
:

3715 i‡(0 =
›ts
.
do_°©us
) {

3716 
ªt
) {

3717 
SG_LIB_CAT_NOT_READY
:

3718 
	`Ârötf
(
°dîr
, " deviceÇoÑeady\n");

3720 
SG_LIB_CAT_ABORTED_COMMAND
:

3721 
	`Ârötf
(
°dîr
, "áborted command\n");

3723 
SG_LIB_CAT_UNIT_ATTENTION
:

3724 
	`Ârötf
(
°dîr
, " unitáttention\n");

3726 
SG_LIB_CAT_INVALID_OP
:

3727 
	`Ârötf
(
°dîr
, " Send diagnostics commandÇot supported\n");

3729 
SG_LIB_CAT_ILLEGAL_REQ
:

3730 
	`Ârötf
(
°dîr
, " Send diagnostics command, bad field in "

3735 i‡(
ªt
 && (0 =
›ts
.
vîbo£
))

3736 
	`Ârötf
(
°dîr
, "Problem detected,Åryágain with --verbose option "

3738 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

3739 i‡(
ªs
 < 0) {

3740 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

3741 i‡(0 =
ªt
)

3742  
SG_LIB_FILE_ERROR
;

3744  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

3745 
	}
}

	@src/sg_start.c

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<uni°d.h
>

23 
	~<°rög.h
>

24 
	~<f˙é.h
>

25 
	~<gë›t.h
>

27 #ifde‡
HAVE_CONFIG_H


28 
	~"c⁄fig.h
"

30 
	~"sg_lib.h
"

31 
	~"sg_cmds_basic.h
"

34 c⁄° * 
	gvîsi⁄_°r
 = "0.59 20130507";

36 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

56 
	s›ts_t
 {

57 
	mdo_eje˘
;

58 
	mdo_Ê
;

59 
	mdo_hñp
;

60 
	mdo_immed
;

61 
	mdo_lﬂd
;

62 
	mdo_l€j
;

63 
	mdo_mod
;

64 
	mdo_noÊush
;

65 
	mdo_ªad⁄ly
;

66 
	mdo_pc
;

67 
	mdo_°¨t
;

68 
	mdo_°›
;

69 
	mdo_vîbo£
;

70 
	mdo_vîsi⁄
;

71 c⁄° * 
	mdevi˚_«me
;

72 
	m›t_√w
;

76 
	$ußge
()

78 
	`Ârötf
(
°dîr
, "Usage: sg_start [--eject] [--fl=FL] [--help] "

119 
	}
}

122 
	$ußge_ﬁd
()

124 
	`Ârötf
(
°dîr
, "Usage: sg_start [0] [1] [--eject] [--fl=FL] "

164 
	}
}

167 
	$¥o˚ss_˛_√w
(
›ts_t
 * 
›t•
, 
¨gc
, * 
¨gv
[])

169 
c
, 
n
, 
îr
;

172 
›ti⁄_ödex
 = 0;

174 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "ef:hûLm:nNOp:rsSvV", 
l⁄g_›ti⁄s
,

175 &
›ti⁄_ödex
);

176 i‡(
c
 == -1)

179 
c
) {

181 ++
›t•
->
do_eje˘
;

182 ++
›t•
->
do_l€j
;

185 
n
 = 
	`sg_gë_num
(
›èrg
);

186 i‡((
n
 < 0) || (n > 3)) {

187 
	`Ârötf
(
°dîr
, "badárgumentÅo '--fl='\n");

188 
	`ußge
();

189  
SG_LIB_SYNTAX_ERROR
;

191 ++
›t•
->
do_l€j
;

192 ++
›t•
->
do_°¨t
;

193 
›t•
->
do_Ê
 = 
n
;

197 ++
›t•
->
do_hñp
;

200 ++
›t•
->
do_immed
;

203 ++
›t•
->
do_lﬂd
;

204 ++
›t•
->
do_l€j
;

207 ++
›t•
->
do_l€j
;

210 
n
 = 
	`sg_gë_num
(
›èrg
);

211 i‡((
n
 < 0) || (n > 15)) {

212 
	`Ârötf
(
°dîr
, "badárgumentÅo '--mod='\n");

213 
	`ußge
();

214  
SG_LIB_SYNTAX_ERROR
;

216 
›t•
->
do_mod
 = 
n
;

219 ++
›t•
->
do_noÊush
;

224 
›t•
->
›t_√w
 = 0;

227 
n
 = 
	`sg_gë_num
(
›èrg
);

228 i‡((
n
 < 0) || (n > 15)) {

229 
	`Ârötf
(
°dîr
, "badárgumentÅo '--pc='\n");

230 
	`ußge
();

231  
SG_LIB_SYNTAX_ERROR
;

233 
›t•
->
do_pc
 = 
n
;

236 ++
›t•
->
do_ªad⁄ly
;

239 ++
›t•
->
do_°¨t
;

242 ++
›t•
->
do_°›
;

245 ++
›t•
->
do_vîbo£
;

248 ++
›t•
->
do_vîsi⁄
;

251 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê%¯[0x%x]\n", 
c
, c);

252 i‡(
›t•
->
do_hñp
)

254 
	`ußge
();

255  
SG_LIB_SYNTAX_ERROR
;

258 
îr
 = 0;

259 ; 
›töd
 < 
¨gc
; ++optind) {

260 i‡(1 =
	`°æí
(
¨gv
[
›töd
])) {

261 i‡(0 =
	`°rcmp
("0", 
¨gv
[
›töd
])) {

262 ++
›t•
->
do_°›
;

264 } i‡(0 =
	`°rcmp
("1", 
¨gv
[
›töd
])) {

265 ++
›t•
->
do_°¨t
;

269 i‡(
NULL
 =
›t•
->
devi˚_«me
)

270 
›t•
->
devi˚_«me
 = 
¨gv
[
›töd
];

272 
	`Ârötf
(
°dîr
, "U√x≥˘edÉxå®¨gumít: %s\n", 
¨gv
[
›töd
]);

273 ++
îr
;

276 i‡(
îr
) {

277 
	`ußge
();

278  
SG_LIB_SYNTAX_ERROR
;

281 
	}
}

284 
	$¥o˚ss_˛_ﬁd
(
›ts_t
 * 
›t•
, 
¨gc
, * 
¨gv
[])

286 
k
, 
jmp_out
, 
∂í
, 
num
;

287 
ambigu
 = 0;

288 
°¨t°›
 = -1;

289 
u
;

290 c⁄° * 
˝
;

292 
k
 = 1; k < 
¨gc
; ++k) {

293 
˝
 = 
¨gv
[
k
];

294 
∂í
 = 
	`°æí
(
˝
);

295 i‡(
∂í
 <= 0)

297 i‡('-' =*
˝
) {

298 --
∂í
, ++
˝
, 
jmp_out
 = 0;Ölen > 0;

299 --
∂í
, ++
˝
) {

300 *
˝
) {

302 i‡('\0' =*(
˝
 + 1))

303 
›t•
->
do_immed
 = 1;

305 
jmp_out
 = 1;

308 ++
›t•
->
do_ªad⁄ly
;

311 ++
›t•
->
do_vîbo£
;

314 ++
›t•
->
do_vîsi⁄
;

318 ++
›t•
->
do_hñp
;

321 
›t•
->
›t_√w
 = 1;

326 ++
˝
;

327 --
∂í
;

328 
jmp_out
 = 1;

331 
jmp_out
 = 1;

334 i‡(
jmp_out
)

337 i‡(
∂í
 <= 0)

340 i‡(0 =
	`°∫cmp
(
˝
, "eject", 5)) {

341 
›t•
->
do_l€j
 = 1;

342 i‡(
°¨t°›
 == 1)

343 
ambigu
 = 1;

345 
°¨t°›
 = 0;

346 } i‡(0 =
	`°∫cmp
("Ê=", 
˝
, 3)) {

347 
num
 = 
	`ssˇnf
(
˝
 + 3, "%x", &
u
);

348 i‡(1 !
num
) {

349 
	`Ârötf
(
°dîr
, "Bad valueáfter 'fl=' option\n");

350 
	`ußge_ﬁd
();

351  
SG_LIB_SYNTAX_ERROR
;

353 
°¨t°›
 = 1;

354 
›t•
->
do_l€j
 = 1;

355 
›t•
->
do_Ê
 = 
u
;

356 } i‡(0 =
	`°∫cmp
("imm=", 
˝
, 4)) {

357 
num
 = 
	`ssˇnf
(
˝
 + 4, "%x", &
u
);

358 i‡((1 !
num
Ë|| (
u
 > 1)) {

359 
	`Ârötf
(
°dîr
, "Bad valueáfter 'imm=' option\n");

360 
	`ußge_ﬁd
();

361  
SG_LIB_SYNTAX_ERROR
;

363 
›t•
->
do_immed
 = 
u
;

364 } i‡(0 =
	`°∫cmp
(
˝
, "load", 4)) {

365 
›t•
->
do_l€j
 = 1;

366 i‡(
°¨t°›
 == 0)

367 
ambigu
 = 1;

369 
°¨t°›
 = 1;

370 } i‡(0 =
	`°∫cmp
(
˝
, "loej", 4))

371 
›t•
->
do_l€j
 = 1;

372 i‡(0 =
	`°∫cmp
("pc=", 
˝
, 3)) {

373 
num
 = 
	`ssˇnf
(
˝
 + 3, "%x", &
u
);

374 i‡((1 !
num
Ë|| (
u
 > 15)) {

375 
	`Ârötf
(
°dîr
, "Bad valueáfteráfter 'pc=' option\n");

376 
	`ußge_ﬁd
();

377  
SG_LIB_SYNTAX_ERROR
;

379 
›t•
->
do_pc
 = 
u
;

380 } i‡(0 =
	`°∫cmp
("mod=", 
˝
, 4)) {

381 
num
 = 
	`ssˇnf
(
˝
 + 3, "%x", &
u
);

382 i‡(1 !
num
) {

383 
	`Ârötf
(
°dîr
, "Bad valueáfter 'mod=' option\n");

384 
	`ußge_ﬁd
();

385  
SG_LIB_SYNTAX_ERROR
;

387 
›t•
->
do_mod
 = 
u
;

388 } i‡(0 =
	`°∫cmp
(
˝
, "noflush", 7)) {

389 
›t•
->
do_noÊush
 = 1;

390 } i‡(0 =
	`°∫cmp
(
˝
, "start", 5)) {

391 i‡(
°¨t°›
 == 0)

392 
ambigu
 = 1;

394 
°¨t°›
 = 1;

395 } i‡(0 =
	`°∫cmp
(
˝
, "stop", 4)) {

396 i‡(
°¨t°›
 == 1)

397 
ambigu
 = 1;

399 
°¨t°›
 = 0;

400 } i‡(0 =
	`°∫cmp
(
˝
, "old", 3))

402 i‡(
jmp_out
) {

403 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄: %s\n", 
˝
);

404 
	`ußge_ﬁd
();

405  
SG_LIB_SYNTAX_ERROR
;

407 } i‡(0 =
	`°rcmp
("0", 
˝
)) {

408 i‡(1 =
°¨t°›
)

409 
ambigu
 = 1;

411 
°¨t°›
 = 0;

412 } i‡(0 =
	`°rcmp
("1", 
˝
)) {

413 i‡(0 =
°¨t°›
)

414 
ambigu
 = 1;

416 
°¨t°›
 = 1;

417 } i‡(0 =
›t•
->
devi˚_«me
)

418 
›t•
->
devi˚_«me
 = 
˝
;

420 
	`Ârötf
(
°dîr
, "too manyárguments, got: %s,Çot "

421 "ex≥˘ög: %s\n", 
›t•
->
devi˚_«me
, 
˝
);

422 
	`ußge_ﬁd
();

423  
SG_LIB_SYNTAX_ERROR
;

425 i‡(
ambigu
) {

426 
	`Ârötf
(
°dîr
, "please, only one of 0, 1, --eject, "

428 
	`ußge_ﬁd
();

429  
SG_LIB_SYNTAX_ERROR
;

430 } i‡(0 =
°¨t°›
)

431 ++
›t•
->
do_°›
;

432 i‡(1 =
°¨t°›
)

433 ++
›t•
->
do_°¨t
;

436 
	}
}

439 
	$¥o˚ss_˛
(
›ts_t
 * 
›t•
, 
¨gc
, * 
¨gv
[])

441 
ªs
;

442 * 
˝
;

444 
˝
 = 
	`gëív
("SG3_UTILS_OLD_OPTS");

445 i‡(
˝
) {

446 
›t•
->
›t_√w
 = 0;

447 
ªs
 = 
	`¥o˚ss_˛_ﬁd
(
›t•
, 
¨gc
, 
¨gv
);

448 i‡((0 =
ªs
Ë&& 
›t•
->
›t_√w
)

449 
ªs
 = 
	`¥o˚ss_˛_√w
(
›t•
, 
¨gc
, 
¨gv
);

451 
›t•
->
›t_√w
 = 1;

452 
ªs
 = 
	`¥o˚ss_˛_√w
(
›t•
, 
¨gc
, 
¨gv
);

453 i‡((0 =
ªs
Ë&& (0 =
›t•
->
›t_√w
))

454 
ªs
 = 
	`¥o˚ss_˛_ﬁd
(
›t•
, 
¨gc
, 
¨gv
);

456  
ªs
;

457 
	}
}

461 
	$maö
(
¨gc
, * 
¨gv
[])

463 
fd
, 
ªs
;

464 
ªt
 = 0;

465 
›ts_t
 
›ts
;

467 
	`mem£t
(&
›ts
, 0, (opts));

468 
›ts
.
do_Ê
 = -1;

469 
ªs
 = 
	`¥o˚ss_˛
(&
›ts
, 
¨gc
, 
¨gv
);

470 i‡(
ªs
)

471  
SG_LIB_SYNTAX_ERROR
;

472 i‡(
›ts
.
do_hñp
) {

473 i‡(
›ts
.
›t_√w
)

474 
	`ußge
();

476 
	`ußge_ﬁd
();

479 i‡(
›ts
.
do_vîsi⁄
) {

480 
	`Ârötf
(
°dîr
, "Vîsi⁄ såög: %s\n", 
vîsi⁄_°r
);

484 i‡(
›ts
.
do_°¨t
 && o±s.
do_°›
) {

485 
	`Ârötf
(
°dîr
, "AmbiguousÅo give both '--start'ánd '--stop'\n");

486  
SG_LIB_SYNTAX_ERROR
;

488 i‡(
›ts
.
do_lﬂd
 && o±s.
do_eje˘
) {

489 
	`Ârötf
(
°dîr
, "AmbiguousÅo give both '--load'ánd '--eject'\n");

490  
SG_LIB_SYNTAX_ERROR
;

492 i‡(
›ts
.
do_lﬂd
)

493 
›ts
.
do_°¨t
 = 1;

494 i‡((
›ts
.
do_eje˘
Ë|| (›ts.
do_°›
))

495 
›ts
.
do_°¨t
 = 0;

496 i‡(
›ts
.
›t_√w
 && o±s.
do_l€j
 && (0 =›ts.
do_°¨t
))

497 
›ts
.
do_°¨t
 = 1;

498 i‡((0 =
›ts
.
do_l€j
Ë&& (-1 =›ts.
do_Ê
Ë&& (0 =›ts.
do_pc
))

499 
›ts
.
do_°¨t
 = 1;

502 i‡(0 =
›ts
.
devi˚_«me
) {

503 
	`Ârötf
(
°dîr
, "No DEVICEárgument given\n");

504 i‡(
›ts
.
›t_√w
)

505 
	`ußge
();

507 
	`ußge_ﬁd
();

508  
SG_LIB_SYNTAX_ERROR
;

511 i‡(
›ts
.
do_Ê
 >= 0) {

512 i‡(
›ts
.
do_°¨t
 == 0) {

513 
	`Ârötf
(
°dîr
, "Giving '--fl=FL' with '--stop' (or "

515  
SG_LIB_SYNTAX_ERROR
;

517 i‡(
›ts
.
do_pc
 > 0) {

518 
	`Ârötf
(
°dîr
, "Giving '--fl=FL' with '--pc=PC' "

520  
SG_LIB_SYNTAX_ERROR
;

524 
fd
 = 
	`sg_cmds_›í_devi˚
(
›ts
.
devi˚_«me
, o±s.
do_ªad⁄ly
 ,

525 
›ts
.
do_vîbo£
);

526 i‡(
fd
 < 0) {

527 
	`Ârötf
(
°dîr
, "ErrorÅryingÅo open %s: %s\n",

528 
›ts
.
devi˚_«me
, 
	`ß„_°ªº‹
(-
fd
));

529  
SG_LIB_FILE_ERROR
;

532 
ªs
 = 0;

533 i‡(
›ts
.
do_Ê
 >= 0)

534 
ªs
 = 
	`sg_Œ_°¨t_°›_unô
(
fd
, 
›ts
.
do_immed
, o±s.
do_Ê
, 0 ,

537 
›ts
.
do_vîbo£
);

538 i‡(
›ts
.
do_pc
 > 0)

539 
ªs
 = 
	`sg_Œ_°¨t_°›_unô
(
fd
, 
›ts
.
do_immed
, o±s.
do_mod
,

540 
›ts
.
do_pc
, o±s.
do_noÊush
, 0, 0, 1,

541 
›ts
.
do_vîbo£
);

543 
ªs
 = 
	`sg_Œ_°¨t_°›_unô
(
fd
, 
›ts
.
do_immed
, 0, 0, o±s.
do_noÊush
,

544 
›ts
.
do_l€j
, o±s.
do_°¨t
, 1,

545 
›ts
.
do_vîbo£
);

546 
ªt
 = 
ªs
;

547 i‡(
ªs
) {

548 i‡(
›ts
.
do_vîbo£
 < 2) {

549 i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

550 
	`Ârötf
(
°dîr
, "commandÇot supported\n");

551 i‡(
SG_LIB_CAT_NOT_READY
 =
ªs
)

552 
	`Ârötf
(
°dîr
, "deviceÇotÑeady\n");

553 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
)

554 
	`Ârötf
(
°dîr
, "unitáttention\n");

555 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

556 
	`Ârötf
(
°dîr
, "aborted command\n");

557 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

558 
	`Ârötf
(
°dîr
, "invalid field in cdb\n");

560 
	`Ârötf
(
°dîr
, "START STOP UNIT command failed\n");

562 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
fd
);

563 i‡((
ªs
 < 0Ë&& (0 =
ªt
))

564  
SG_LIB_FILE_ERROR
;

565  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

566 
	}
}

	@src/sg_stpg.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<˘y≥.h
>

14 
	~<gë›t.h
>

16 
	~"sg_lib.h
"

17 
	~"sg_cmds_basic.h
"

18 
	~"sg_cmds_exåa.h
"

27 c⁄° * 
	gvîsi⁄_°r
 = "1.6 20130507";

29 
	#TGT_GRP_BUFF_LEN
 1024

	)

30 
	#MX_ALLOC_LEN
 (0xc000 + 0x80)

	)

32 
	#TPGS_STATE_OPTIMIZED
 0x0

	)

33 
	#TPGS_STATE_NONOPTIMIZED
 0x1

	)

34 
	#TPGS_STATE_STANDBY
 0x2

	)

35 
	#TPGS_STATE_UNAVAILABLE
 0x3

	)

36 
	#TPGS_STATE_OFFLINE
 0xê

	)

37 
	#TPGS_STATE_TRANSITIONING
 0xf

	)

40 #i‚de‡
__˝lu•lus


42 c⁄° 
	g°©e_sup_mask
[] = {

43 [
TPGS_STATE_OPTIMIZED
] = 0x01,

44 [
TPGS_STATE_NONOPTIMIZED
] = 0x02,

45 [
TPGS_STATE_STANDBY
] = 0x04,

46 [
TPGS_STATE_UNAVAILABLE
] = 0x08,

47 [
TPGS_STATE_OFFLINE
] = 0x40,

48 [
TPGS_STATE_TRANSITIONING
] = 0x80,

54 c⁄° 
	g°©e_sup_mask
[] = {

61 
	#VPD_DEVICE_ID
 0x83

	)

62 
	#DEF_VPD_DEVICE_ID_LEN
 252

	)

64 
	#MAX_PORT_LIST_ARR_LEN
 16

	)

66 
	stgtgΩ
 {

67 
	mid
;

68 
	mcuºít
;

69 
	mvÆid
;

72 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

80 {"°©e", 
ªquúed_¨gumít
, 0, 'S'},

81 {"ç", 
ªquúed_¨gumít
, 0, 't'},

89 
	$ußge
()

91 
	`Ârötf
(
°dîr
, "Usage: "

124 
	}
}

127 
	$dSåRaw
(c⁄° * 
°r
, 
Àn
)

129 
k
;

131 
k
 = 0 ; k < 
Àn
; ++k)

132 
	`¥ötf
("%c", 
°r
[
k
]);

133 
	}
}

136 
	$decode_èrgë_p‹t
(* 
buff
, 
Àn
, *
d_id
, *
d_çg
)

138 
c_£t
, 
assoc
, 
desig_ty≥
, 
i_Àn
;

139 
off
, 
u
;

140 c⁄° * 
u˝
;

141 c⁄° * 
ù
;

143 *
d_id
 = -1;

144 *
d_çg
 = -1;

145 
off
 = -1;

146 (
u
 = 
	`sg_vpd_dev_id_ôî
(
buff
, 
Àn
, &
off
, -1, -1, -1)) == 0) {

147 
u˝
 = 
buff
 + 
off
;

148 
i_Àn
 = 
u˝
[3];

149 i‡((
off
 + 
i_Àn
 + 4Ë> 
Àn
) {

150 
	`Ârötf
(
°dîr
, " VPDÖageÉrror: designatorÜengthÜonger "

151 "th™\¿ÑemaöögÑe•⁄£Üígth=%d\n", (
Àn
 - 
off
));

152  
SG_LIB_CAT_MALFORMED
;

154 
ù
 = 
u˝
 + 4;

155 
c_£t
 = (
u˝
[0] & 0xf);

157 
assoc
 = ((
u˝
[1] >> 4) & 0x3);

158 
desig_ty≥
 = (
u˝
[1] & 0xf);

159 
desig_ty≥
) {

161 i‡((1 !
c_£t
Ë|| (1 !
assoc
Ë|| (4 !
i_Àn
)) {

162 
	`Ârötf
(
°dîr
, " <<Éxpected binary code_set,Åarget "

164 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

167 *
d_id
 = ((
ù
[2] << 8) | ip[3]);

170 i‡((1 !
c_£t
Ë|| (1 !
assoc
Ë|| (4 !
i_Àn
)) {

171 
	`Ârötf
(
°dîr
, " <<Éxpected binary code_set,Åarget "

173 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

176 *
d_çg
 = ((
ù
[2] << 8) | ip[3]);

182 i‡(-1 =*
d_id
 || -1 =*
d_çg
) {

183 
	`Ârötf
(
°dîr
, "VPDÖageÉrror:ÇoÅargetÖort group information\n");

184  
SG_LIB_CAT_MALFORMED
;

187 
	}
}

190 
	$decode_çgs_°©e
(c⁄° 
°
)

192 
°
) {

193 
TPGS_STATE_OPTIMIZED
:

194 
	`¥ötf
(" (active/optimized)");

196 
TPGS_STATE_NONOPTIMIZED
:

197 
	`¥ötf
(" (active/non optimized)");

199 
TPGS_STATE_STANDBY
:

200 
	`¥ötf
(" (standby)");

202 
TPGS_STATE_UNAVAILABLE
:

203 
	`¥ötf
(" (unavailable)");

205 
TPGS_STATE_OFFLINE
:

206 
	`¥ötf
(" (offline)");

208 
TPGS_STATE_TRANSITIONING
:

209 
	`¥ötf
(" (transitioning between states)");

212 
	`¥ötf
(" (unknown: 0x%x)", 
°
);

215 
	}
}

218 
	$å™sôi⁄_çgs_°©es
(
tgtgΩ
 *
tgtSèã
, 
numgΩ
, 
p‹tgroup
,

219 
√w°©e
)

221 
i
,
ﬁd°©e
;

223  
i
 = 0; i < 
numgΩ
; i++) {

224 i‡(
tgtSèã
[
i
].
id
 =
p‹tgroup
)

227 i‡(
i
 =
numgΩ
) {

228 
	`¥ötf
("P‹tgrou∞0x%02x d€†nŸÉxi°\n", 
p‹tgroup
);

232 i‡(!–
°©e_sup_mask
[
√w°©e
] & 
tgtSèã
[
i
].
vÆid
 )) {

233 
	`¥ötf
("Portgroup 0x%02x: Invalid state 0x%x\n",

234 
p‹tgroup
, 
√w°©e
);

237 
ﬁd°©e
 = 
tgtSèã
[
i
].
cuºít
;

238 
tgtSèã
[
i
].
cuºít
 = 
√w°©e
;

239 i‡(
√w°©e
 =
TPGS_STATE_OPTIMIZED
) {

241  
i
 = 0; i < 
numgΩ
; i++) {

242 i‡(
tgtSèã
[
i
].
id
 =
p‹tgroup
)

244 i‡(
tgtSèã
[
i
].
cuºít
 =
TPGS_STATE_OPTIMIZED
)

245 
tgtSèã
[
i
].
cuºít
 = 
ﬁd°©e
;

247 } i‡(
ﬁd°©e
 =
TPGS_STATE_OPTIMIZED
) {

249  
i
 = 0; i < 
numgΩ
; i++) {

250 i‡(
tgtSèã
[
i
].
id
 =
p‹tgroup
)

252 i‡(
tgtSèã
[
i
].
cuºít
 =
TPGS_STATE_NONOPTIMIZED
) {

253 
tgtSèã
[
i
].
cuºít
 = 
TPGS_STATE_OPTIMIZED
;

258 
	`¥ötf
("NewÅargetÖort groups:\n");

259 
i
 = 0; i < 
numgΩ
; i++) {

260 
	`¥ötf
("ÅargetÖort group id : 0x%x\n",

261 
tgtSèã
[
i
].
id
);

262 
	`¥ötf
("ÅargetÖort groupásymmetricáccess state : ");

263 
	`¥ötf
("0x%02x\n", 
tgtSèã
[
i
].
cuºít
);

266 
	}
}

269 
	$ícode_çgs_°©es
(*
buff
, 
tgtgΩ
 *
tgtSèã
, 
numgΩ
)

271 
i
;

272 *
desc
;

274 
i
 = 0, 
desc
 = 
buff
 + 4; i < 
numgΩ
; desc += 4, i++) {

275 
desc
[0] = 
tgtSèã
[
i
].
cuºít
 & 0x0f;

276 
desc
[2] = (
tgtSèã
[
i
].
id
 >> 8) & 0x0f;

277 
desc
[3] = 
tgtSèã
[
i
].
id
 & 0x0f;

279 
	}
}

285 
	$buûd_p‹t_¨r
(c⁄° * 
öp
, * 
p‹t_¨r
, * 
p‹t_¨r_Àn
,

286 
max_¨r_Àn
)

288 
ö_Àn
, 
k
;

289 c⁄° * 
l˝
;

290 
v
;

291 * 
˝
;

293 i‡((
NULL
 =
öp
Ë|| (NULL =
p‹t_¨r
) ||

294 (
NULL
 =
p‹t_¨r_Àn
))

296 
l˝
 = 
öp
;

297 
ö_Àn
 = 
	`°æí
(
öp
);

298 i‡(0 =
ö_Àn
)

299 *
p‹t_¨r_Àn
 = 0;

300 
k
 = 
	`°r•n
(
öp
, "0123456789aAbBcCdDeEfFhHxX,");

301 i‡(
ö_Àn
 !
k
) {

302 
	`Ârötf
(
°dîr
, "buûd_p‹t_¨r:Éº‹áàpo†%d\n", 
k
 + 1);

305 
k
 = 0; k < 
max_¨r_Àn
; ++k) {

306 
v
 = 
	`sg_gë_num_nomu…
(
l˝
);

307 i‡(-1 !
v
) {

308 
p‹t_¨r
[
k
] = 
v
;

309 
˝
 = (*)
	`°rchr
(
l˝
, ',');

310 i‡(
NULL
 =
˝
)

312 
l˝
 = 
˝
 + 1;

314 
	`Ârötf
(
°dîr
, "build_port_arr:ÉrrorátÖos %d\n",

315 ()(
l˝
 - 
öp
 + 1));

319 *
p‹t_¨r_Àn
 = 
k
 + 1;

320 i‡(
k
 =
max_¨r_Àn
) {

321 
	`Ârötf
(
°dîr
, "build_port_arr:árrayÜengthÉxceeded\n");

325 
	}
}

334 
	$buûd_°©e_¨r
(c⁄° * 
öp
, * 
°©e_¨r
, * 
°©e_¨r_Àn
,

335 
max_¨r_Àn
)

337 
ö_Àn
, 
k
, 
v
, 
åy_num
;

338 c⁄° * 
l˝
;

339 * 
˝
;

341 i‡((
NULL
 =
öp
Ë|| (NULL =
°©e_¨r
) ||

342 (
NULL
 =
°©e_¨r_Àn
))

344 
l˝
 = 
öp
;

345 
ö_Àn
 = 
	`°æí
(
öp
);

346 i‡(0 =
ö_Àn
)

347 *
°©e_¨r_Àn
 = 0;

348 
k
 = 
	`°r•n
(
öp
, "0123456789aAbBcCdDeEfFhHnNoOsSuUxX,");

349 i‡(
ö_Àn
 !
k
) {

350 
	`Ârötf
(
°dîr
, "buûd_°©e_¨r:Éº‹áàpo†%d\n", 
k
 + 1);

353 
k
 = 0; k < 
max_¨r_Àn
; ++k) {

354 
åy_num
 = 1;

355 i‡(
	`ißÕha
(*
l˝
)) {

356 
åy_num
 = 0;

357 
	`touµî
(*
l˝
)) {

359 i‡('N' =
	`touµî
(*(
l˝
 + 1)))

360 
°©e_¨r
[
k
] = 1;

361 i‡('O' =
	`touµî
(*(
l˝
 + 1)))

362 
°©e_¨r
[
k
] = 0;

364 
åy_num
 = 1;

367 
°©e_¨r
[
k
] = 14;

370 
°©e_¨r
[
k
] = 2;

373 
°©e_¨r
[
k
] = 3;

376 
	`Ârötf
(
°dîr
, "build_state_arr:Éxpected 'ao', 'an', 'o', "

377 "'s' o∏'u'áàpo†%d\n", ()(
l˝
 - 
öp
 + 1));

381 i‡(
åy_num
) {

382 
v
 = 
	`sg_gë_num_nomu…
(
l˝
);

383 i‡(((
v
 >= 0) && (v <= 3)) || (14 ==v))

384 
°©e_¨r
[
k
] = 
v
;

385 i‡(-1 =
v
) {

386 
	`Ârötf
(
°dîr
, "build_state_arr:ÉrrorátÖos %d\n",

387 ()(
l˝
 - 
öp
 + 1));

390 
	`Ârötf
(
°dîr
, "build_state_arr:Éxpect 0,1,2,3 or 14\n");

394 
˝
 = (*)
	`°rchr
(
l˝
, ',');

395 i‡(
NULL
 =
˝
)

397 
l˝
 = 
˝
 + 1;

399 *
°©e_¨r_Àn
 = 
k
 + 1;

400 i‡(
k
 =
max_¨r_Àn
) {

401 
	`Ârötf
(
°dîr
, "build_state_arr:árrayÜengthÉxceeded\n");

405 
	}
}

409 
	$maö
(
¨gc
, * 
¨gv
[])

411 
sg_fd
, 
k
, 
off
, 
ªs
, 
c
, 
ªp‹t_Àn
, 
tgt_p‹t_cou¡
;

412 
ªp‹tTgtGΩBuff
[
TGT_GRP_BUFF_LEN
];

413 
£tTgtGΩBuff
[
TGT_GRP_BUFF_LEN
];

414 
r•_buff
[
MX_ALLOC_LEN
 + 2];

415 * 
u˝
;

416 
tgtgΩ
 
tgtGΩSèã
[256], *
tgtSèãPå
;

417 
°©e
 = -1;

418 c⁄° * 
°©e_¨g
 = 
NULL
;

419 c⁄° * 
ç_¨g
 = 
NULL
;

420 
hex
 = 0;

421 
øw
 = 0;

422 
vîbo£
 = 0;

423 
p‹t_¨r
[
MAX_PORT_LIST_ARR_LEN
];

424 
p‹t_¨r_Àn
 = 0;

425 
°©e_¨r
[
MAX_PORT_LIST_ARR_LEN
];

426 
°©e_¨r_Àn
 = 0;

427 
p‹tgroup
 = -1;

428 
ªÕ‹t
 = -1;

429 
numgΩ
 = 0;

430 c⁄° * 
devi˚_«me
 = 
NULL
;

431 
ªt
 = 0;

434 
›ti⁄_ödex
 = 0;

436 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "ahHloOrsS:t:uvV", 
l⁄g_›ti⁄s
,

437 &
›ti⁄_ödex
);

438 i‡(
c
 == -1)

441 
c
) {

443 
°©e
 = 
TPGS_STATE_NONOPTIMIZED
;

447 
	`ußge
();

450 
hex
 = 1;

454 
°©e
 = 
TPGS_STATE_OFFLINE
;

457 
°©e
 = 
TPGS_STATE_OPTIMIZED
;

460 
øw
 = 1;

463 
°©e
 = 
TPGS_STATE_STANDBY
;

466 
°©e_¨g
 = 
›èrg
;

469 
ç_¨g
 = 
›èrg
;

472 
°©e
 = 
TPGS_STATE_UNAVAILABLE
;

475 ++
vîbo£
;

478 
	`Ârötf
(
°dîr
, "Vîsi⁄: %s\n", 
vîsi⁄_°r
);

481 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê0x%x ??\n", 
c
);

482 
	`ußge
();

483  
SG_LIB_SYNTAX_ERROR
;

486 i‡(
›töd
 < 
¨gc
) {

487 i‡(
NULL
 =
devi˚_«me
) {

488 
devi˚_«me
 = 
¨gv
[
›töd
];

489 ++
›töd
;

491 i‡(
›töd
 < 
¨gc
) {

492 ; 
›töd
 < 
¨gc
; ++optind)

493 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

494 
¨gv
[
›töd
]);

495 
	`ußge
();

496  
SG_LIB_SYNTAX_ERROR
;

500 i‡(
°©e_¨g
) {

501 i‡(
	`buûd_°©e_¨r
(
°©e_¨g
, 
°©e_¨r
, &
°©e_¨r_Àn
,

502 
MAX_PORT_LIST_ARR_LEN
)) {

503 
	`ußge
();

504  
SG_LIB_SYNTAX_ERROR
;

507 i‡(
ç_¨g
) {

508 i‡(
	`buûd_p‹t_¨r
(
ç_¨g
, 
p‹t_¨r
, &
p‹t_¨r_Àn
,

509 
MAX_PORT_LIST_ARR_LEN
)) {

510 
	`ußge
();

511  
SG_LIB_SYNTAX_ERROR
;

514 i‡((
°©e
 >0Ë&& (
°©e_¨r_Àn
 > 0)) {

515 
	`Ârötf
(
°dîr
, "either use individual state option or '--state=' "

517 
	`ußge
();

518  
SG_LIB_SYNTAX_ERROR
;

520 i‡((0 =
°©e_¨r_Àn
Ë&& (0 =
p‹t_¨r_Àn
Ë&& (-1 =
°©e
))

521 
°©e
 = 0;

522 i‡((1 =
°©e_¨r_Àn
Ë&& (0 =
p‹t_¨r_Àn
Ë&& (-1 =
°©e
)) {

523 
°©e
 = 
°©e_¨r
[0];

524 
°©e_¨r_Àn
 = 0;

526 i‡(
°©e_¨r_Àn
 > 
p‹t_¨r_Àn
) {

527 
	`Ârötf
(
°dîr
, "'state='ÜistÜongerÅhanÉxpected\n");

528 
	`ußge
();

529  
SG_LIB_SYNTAX_ERROR
;

531 i‡((
p‹t_¨r_Àn
 > 0Ë&& (0 =
°©e_¨r_Àn
)) {

532 i‡(-1 =
°©e
) {

533 
	`Ârötf
(
°dîr
, "targetÖortÜist given butÇo state "

535 
	`ußge
();

536  
SG_LIB_SYNTAX_ERROR
;

538 
°©e_¨r
[0] = 
°©e
;

539 
°©e_¨r_Àn
 = 1;

540 
°©e
 = -1;

542 i‡((
p‹t_¨r_Àn
 > 1Ë&& (1 =
°©e_¨r_Àn
)) {

543 
k
 = 1; k < 
p‹t_¨r_Àn
; ++k)

544 
°©e_¨r
[
k
] = state_arr[0];

545 
°©e_¨r_Àn
 = 
p‹t_¨r_Àn
;

547 i‡(
p‹t_¨r_Àn
 !
°©e_¨r_Àn
) {

548 
	`Ârötf
(
°dîr
, "'state='ánd '--tp='Üists mismatched\n");

549 
	`ußge
();

550  
SG_LIB_SYNTAX_ERROR
;

553 i‡(
NULL
 =
devi˚_«me
) {

554 
	`Ârötf
(
°dîr
, "missing deviceÇame!\n");

555 
	`ußge
();

556  
SG_LIB_SYNTAX_ERROR
;

558 
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 0 , 
vîbo£
);

559 i‡(
sg_fd
 < 0) {

560 
	`Ârötf
(
°dîr
, "›íÉº‹: %s: %s\n", 
devi˚_«me
,

561 
	`ß„_°ªº‹
(-
sg_fd
));

562  
SG_LIB_FILE_ERROR
;

565 i‡(0 =
p‹t_¨r_Àn
) {

566 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
VPD_DEVICE_ID
, 
r•_buff
,

567 
DEF_VPD_DEVICE_ID_LEN
, 1, 
vîbo£
);

568 i‡(0 =
ªs
) {

569 
ªp‹t_Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

570 i‡(
VPD_DEVICE_ID
 !
r•_buff
[1]) {

571 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

573 i‡(
vîbo£
) {

574 
	`Ârötf
(
°dîr
, "First 32 bytes of badÑesponse\n");

575 
	`dSåHex
((c⁄° *)
r•_buff
, 32, 0);

577  
SG_LIB_CAT_MALFORMED
;

579 i‡(
ªp‹t_Àn
 > 
MX_ALLOC_LEN
) {

580 
	`Ârötf
(
°dîr
, "responseÜengthÅooÜong: %d > %d\n",

581 
ªp‹t_Àn
, 
MX_ALLOC_LEN
);

582  
SG_LIB_CAT_MALFORMED
;

583 } i‡(
ªp‹t_Àn
 > 
DEF_VPD_DEVICE_ID_LEN
) {

584 i‡(
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
VPD_DEVICE_ID
, 
r•_buff
,

585 
ªp‹t_Àn
, 1, 
vîbo£
))

586  
SG_LIB_CAT_OTHER
;

588 
	`decode_èrgë_p‹t
(
r•_buff
 + 4, 
ªp‹t_Àn
 - 4, &
ªÕ‹t
,

589 &
p‹tgroup
);

590 
	`¥ötf
("Device isátÖort Group 0x%02x,ÑelativeÖort 0x%02x\n",

591 
p‹tgroup
, 
ªÕ‹t
);

594 
	`mem£t
(
ªp‹tTgtGΩBuff
, 0x0, (reportTgtGrpBuff));

597 
ªs
 = 
	`sg_Œ_ªp‹t_tgt_¥t_gΩ2
(
sg_fd
, 
ªp‹tTgtGΩBuff
,

598 (
ªp‹tTgtGΩBuff
), 0, 1,

599 
vîbo£
);

600 
ªt
 = 
ªs
;

601 i‡(0 =
ªs
) {

602 
ªp‹t_Àn
 = (
ªp‹tTgtGΩBuff
[0] << 24) +

603 (
ªp‹tTgtGΩBuff
[1] << 16) +

604 (
ªp‹tTgtGΩBuff
[2] << 8) +

605 
ªp‹tTgtGΩBuff
[3] + 4;

606 i‡(
ªp‹t_Àn
 > ()(
ªp‹tTgtGΩBuff
)) {

608 
	`Ârötf
(
°dîr
, " <<reportÅooÜong for internal buffer,"

610 
ªp‹t_Àn
 = ()(
ªp‹tTgtGΩBuff
);

612 i‡(
øw
) {

613 
	`dSåRaw
((c⁄° *)
ªp‹tTgtGΩBuff
, 
ªp‹t_Àn
);

614 
îr_out
;

616 i‡(
vîbo£
)

617 
	`¥ötf
("Rï‹àli°Üígth = %d\n", 
ªp‹t_Àn
);

618 i‡(
hex
) {

619 i‡(
vîbo£
)

620 
	`Ârötf
(
°dîr
, "\nOutputÑesponse in hex:\n");

621 
	`dSåHex
((c⁄° *)
ªp‹tTgtGΩBuff
, 
ªp‹t_Àn
, 1);

622 
îr_out
;

624 
	`mem£t
(
tgtGΩSèã
, 0, (
tgtgΩ
) * 256);

625 
tgtSèãPå
 = 
tgtGΩSèã
;

626 
	`¥ötf
("CurrentÅargetÖort groups:\n");

627 
k
 = 4, 
u˝
 = 
ªp‹tTgtGΩBuff
 + 4, 
numgΩ
 = 0; k < 
ªp‹t_Àn
;

628 
k
 +
off
, 
u˝
 +off, 
numgΩ
 ++) {

630 
	`¥ötf
("ÅargetÖort group id : 0x%x , Pref=%d\n",

631 (
u˝
[2] << 8) + ucp[3], !!(ucp[0] & 0x80));

632 
	`¥ötf
("ÅargetÖort groupásymmetricáccess state : ");

633 
	`¥ötf
("0x%02x", 
u˝
[0] & 0x0f);

634 
	`¥ötf
("\n");

635 
tgtSèãPå
->
id
 = (
u˝
[2] << 8) + ucp[3];

636 
tgtSèãPå
->
cuºít
 = 
u˝
[0] & 0x0f;

637 
tgtSèãPå
->
vÆid
 = 
u˝
[1];

639 
tgt_p‹t_cou¡
 = 
u˝
[7];

641 
tgtSèãPå
++;

642 
off
 = 8 + 
tgt_p‹t_cou¡
 * 4;

644 } i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

645 
	`Ârötf
(
°dîr
, "Report Target Port Groups commandÇot "

647 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

648 
	`Ârötf
(
°dîr
, "bad field in Report Target Port Groups cdb "

650 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
)

651 
	`Ârötf
(
°dîr
, "Report Target Port Groups, unitáttention\n");

652 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

653 
	`Ârötf
(
°dîr
, "Report Target Port Groups,áborted command\n");

655 
	`Ârötf
(
°dîr
, "Report Target Port Groups command failed\n");

656 i‡(0 =
vîbo£
)

657 
	`Ârötf
(
°dîr
, "Åry '-v' for more information\n");

659 i‡(0 !
ªs
)

660 
îr_out
;

662 
	`¥ötf
("P‹àgrou∞0x%02x: Sëásymmëri¯ac˚s†°©êto", 
p‹tgroup
);

663 
	`decode_çgs_°©e
(
°©e
);

664 
	`¥ötf
("\n");

666 
	`å™sôi⁄_çgs_°©es
(
tgtGΩSèã
, 
numgΩ
, 
p‹tgroup
, 
°©e
);

668 
	`mem£t
(
£tTgtGΩBuff
, 0x0, (setTgtGrpBuff));

671 
	`ícode_çgs_°©es
(
£tTgtGΩBuff
, 
tgtGΩSèã
, 
numgΩ
);

672 
ªp‹t_Àn
 = 
numgΩ
 * 4 + 4;

674 
	`mem£t
(
£tTgtGΩBuff
, 0x0, (setTgtGrpBuff));

675 
k
 = 0, 
u˝
 = 
£tTgtGΩBuff
 + 4; k < 
p‹t_¨r_Àn
; ++k, ucp +=4) {

676 
u˝
[0] = 
°©e_¨r
[
k
] & 0xf;

677 
u˝
[2] = (
p‹t_¨r
[
k
] >> 8) & 0xff;

678 
u˝
[3] = 
p‹t_¨r
[
k
] & 0xff;

680 
ªp‹t_Àn
 = 
p‹t_¨r_Àn
 * 4 + 4;

683 
ªs
 = 
	`sg_Œ_£t_tgt_¥t_gΩ
(
sg_fd
, 
£tTgtGΩBuff
, 
ªp‹t_Àn
, 1, 
vîbo£
);

685 i‡(0 =
ªs
)

686 
îr_out
;

687 i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

688 
	`Ârötf
(
°dîr
, "Set Target Port Groups commandÇot supported\n");

689 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

690 
	`Ârötf
(
°dîr
, "bad field in Report Target Port Groups cdb "

692 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
)

693 
	`Ârötf
(
°dîr
, "Set Target Port Groups, unitáttention\n");

694 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

695 
	`Ârötf
(
°dîr
, "Set Target Port Groups,áborted command\n");

697 
	`Ârötf
(
°dîr
, "Set Target Port Groups command failed\n");

698 i‡(0 =
vîbo£
)

699 
	`Ârötf
(
°dîr
, "Åry '-v' for more information\n");

702 
îr_out
:

703 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

704 i‡(
ªs
 < 0) {

705 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

706 i‡(0 =
ªt
)

707  
SG_LIB_FILE_ERROR
;

709  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

710 
	}
}

	@src/sg_sync.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<limôs.h
>

14 
	~<gë›t.h
>

16 
	~"sg_lib.h
"

17 
	~"sg_cmds_basic.h
"

18 
	~"sg_±.h
"

28 c⁄° * 
	gvîsi⁄_°r
 = "1.10 20130516";

30 
	#SYNCHRONIZE_CACHE16_CMD
 0x91

	)

31 
	#SYNCHRONIZE_CACHE16_CMDLEN
 16

	)

32 
	#SENSE_BUFF_LEN
 64

	)

33 
	#DEF_PT_TIMEOUT
 60

	)

36 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

37 {"16", 
no_¨gumít
, 0, 'S'},

38 {"cou¡", 
ªquúed_¨gumít
, 0, 'c'},

39 {"group", 
ªquúed_¨gumít
, 0, 'g'},

40 {"hñp", 
no_¨gumít
, 0, 'h'},

41 {"immed", 
no_¨gumít
, 0, 'i'},

42 {"lba", 
ªquúed_¨gumít
, 0, 'l'},

43 {"sync-nv", 
no_¨gumít
, 0, 's'},

44 {"timeout", 
ªquúed_¨gumít
, 0, 't'},

45 {"vîbo£", 
no_¨gumít
, 0, 'v'},

46 {"vîsi⁄", 
no_¨gumít
, 0, 'V'},

50 
	$ußge
()

52 
	`Ârötf
(
°dîr
, "Usage: "

83 
	}
}

86 
	$Œ_sync_ˇche_16
(
sg_fd
, 
sync_nv
, 
immed
, 
group
,

87 
uöt64_t
 
lba
, 
num_lb
, 
to_£cs
,

88 
noisy
, 
vîbo£
)

90 
ªs
, 
ªt
, 
k
, 
£n£_ˇt
;

91 
scCmdBlk
[
SYNCHRONIZE_CACHE16_CMDLEN
] =

92 {
SYNCHRONIZE_CACHE16_CMD
, 0, 0, 0, 0, 0, 0, 0, 0, 0,

94 
£n£_b
[
SENSE_BUFF_LEN
];

95 
sg_±_ba£
 * 
±vp
;

97 i‡(
sync_nv
)

98 
scCmdBlk
[1] |= 4;

99 i‡(
immed
)

100 
scCmdBlk
[1] |= 2;

101 
scCmdBlk
[2] = (
lba
 >> 56) & 0xff;

102 
scCmdBlk
[3] = (
lba
 >> 48) & 0xff;

103 
scCmdBlk
[4] = (
lba
 >> 40) & 0xff;

104 
scCmdBlk
[5] = (
lba
 >> 32) & 0xff;

105 
scCmdBlk
[6] = (
lba
 >> 24) & 0xff;

106 
scCmdBlk
[7] = (
lba
 >> 16) & 0xff;

107 
scCmdBlk
[8] = (
lba
 >> 8) & 0xff;

108 
scCmdBlk
[9] = 
lba
 & 0xff;

109 
scCmdBlk
[14] = 
group
 & 0x1f;

110 
scCmdBlk
[10] = (
num_lb
 >> 24) & 0xff;

111 
scCmdBlk
[11] = (
num_lb
 >> 16) & 0xff;

112 
scCmdBlk
[12] = (
num_lb
 >> 8) & 0xff;

113 
scCmdBlk
[13] = 
num_lb
 & 0xff;

115 i‡(
vîbo£
) {

116 
	`Ârötf
(
°dîr
, " synchronize cache(16) cdb: ");

117 
k
 = 0; k < 
SYNCHRONIZE_CACHE16_CMDLEN
; ++k)

118 
	`Ârötf
(
°dîr
, "%02x ", 
scCmdBlk
[
k
]);

119 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

121 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

122 i‡(
NULL
 =
±vp
) {

123 
	`Ârötf
(
°dîr
, "synchronize cache(16): out of memory\n");

126 
	`£t_scsi_±_cdb
(
±vp
, 
scCmdBlk
, (scCmdBlk));

127 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

128 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
to_£cs
, 
vîbo£
);

129 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "synchr⁄izêˇche(16)", 
ªs
, 0,

130 
£n£_b
, 
noisy
, 
vîbo£
, &
£n£_ˇt
);

131 i‡(-1 =
ªt
)

133 i‡(-2 =
ªt
) {

134 
£n£_ˇt
) {

135 
SG_LIB_CAT_NOT_READY
:

136 
SG_LIB_CAT_UNIT_ATTENTION
:

137 
SG_LIB_CAT_INVALID_OP
:

138 
SG_LIB_CAT_ILLEGAL_REQ
:

139 
SG_LIB_CAT_ABORTED_COMMAND
:

140 
ªt
 = 
£n£_ˇt
;

142 
SG_LIB_CAT_RECOVERED
:

143 
SG_LIB_CAT_NO_SENSE
:

144 
ªt
 = 0;

147 
ªt
 = -1;

151 
ªt
 = 0;

153 
	`de°ru˘_scsi_±_obj
(
±vp
);

154  
ªt
;

155 
	}
}

158 
	$maö
(
¨gc
, * 
¨gv
[])

160 
sg_fd
, 
ªs
, 
c
;

161 
öt64_t
 
cou¡
 = 0;

162 
num_lb
 = 0;

163 
do_16
 = 0;

164 
group
 = 0;

165 
öt64_t
 
lba
 = 0;

166 
immed
 = 0;

167 
sync_nv
 = 0;

168 
to_£cs
 = 
DEF_PT_TIMEOUT
;

169 
vîbo£
 = 0;

170 c⁄° * 
devi˚_«me
 = 
NULL
;

171 
ªt
 = 0;

174 
›ti⁄_ödex
 = 0;

176 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "c:g:hû:sSt:vV", 
l⁄g_›ti⁄s
,

177 &
›ti⁄_ödex
);

178 i‡(
c
 == -1)

181 
c
) {

183 
cou¡
 = 
	`sg_gë_Œnum
(
›èrg
);

184 i‡((
cou¡
 < 0Ë|| (cou¡ > 
UINT_MAX
)) {

185 
	`Ârötf
(
°dîr
, "badárgumentÅo '--count'\n");

186  
SG_LIB_SYNTAX_ERROR
;

188 
num_lb
 = ()
cou¡
;

191 
group
 = 
	`sg_gë_num
(
›èrg
);

192 i‡((
group
 < 0) || (group > 31)) {

193 
	`Ârötf
(
°dîr
, "badárgumentÅo '--group'\n");

194  
SG_LIB_SYNTAX_ERROR
;

199 
	`ußge
();

202 
immed
 = 1;

205 
lba
 = 
	`sg_gë_Œnum
(
›èrg
);

206 i‡(
lba
 < 0) {

207 
	`Ârötf
(
°dîr
, "badárgumentÅo '--lba'\n");

208  
SG_LIB_SYNTAX_ERROR
;

212 
sync_nv
 = 1;

215 
do_16
 = 1;

218 
to_£cs
 = 
	`sg_gë_num
(
›èrg
);

219 i‡(
to_£cs
 < 0) {

220 
	`Ârötf
(
°dîr
, "badárgumentÅo '--timeout'\n");

221  
SG_LIB_SYNTAX_ERROR
;

225 ++
vîbo£
;

228 
	`Ârötf
(
°dîr
, "vîsi⁄: %s\n", 
vîsi⁄_°r
);

231 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê0x%x ??\n", 
c
);

232 
	`ußge
();

233  
SG_LIB_SYNTAX_ERROR
;

236 i‡(
›töd
 < 
¨gc
) {

237 i‡(
NULL
 =
devi˚_«me
) {

238 
devi˚_«me
 = 
¨gv
[
›töd
];

239 ++
›töd
;

241 i‡(
›töd
 < 
¨gc
) {

242 ; 
›töd
 < 
¨gc
; ++optind)

243 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

244 
¨gv
[
›töd
]);

245 
	`ußge
();

246  
SG_LIB_SYNTAX_ERROR
;

250 i‡(
NULL
 =
devi˚_«me
) {

251 
	`Ârötf
(
°dîr
, "missing deviceÇame!\n");

252 
	`ußge
();

253  
SG_LIB_SYNTAX_ERROR
;

255 
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 0 , 
vîbo£
);

256 i‡(
sg_fd
 < 0) {

257 
	`Ârötf
(
°dîr
, "›íÉº‹: %s: %s\n", 
devi˚_«me
,

258 
	`ß„_°ªº‹
(-
sg_fd
));

259  
SG_LIB_FILE_ERROR
;

262 i‡(
do_16
)

263 
ªs
 = 
	`Œ_sync_ˇche_16
(
sg_fd
, 
sync_nv
, 
immed
, 
group
, 
lba
, 
num_lb
,

264 
to_£cs
, 1, 
vîbo£
);

266 
ªs
 = 
	`sg_Œ_sync_ˇche_10
(
sg_fd
, 
sync_nv
, 
immed
, 
group
,

267 ()
lba
, 
num_lb
, 1, 
vîbo£
);

268 
ªt
 = 
ªs
;

269 i‡(0 =
ªs
)

271 i‡(
SG_LIB_CAT_NOT_READY
 =
ªs
)

272 
	`Ârötf
(
°dîr
, "Synchronize cache failed, deviceÇotÑeady\n");

273 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
)

274 
	`Ârötf
(
°dîr
, "Synchronize cache, unitáttention\n");

275 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

276 
	`Ârötf
(
°dîr
, "Synchronize cache,áborted command\n");

277 i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
)

278 
	`Ârötf
(
°dîr
, "Synchronize cache commandÇot supported\n");

279 i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)

280 
	`Ârötf
(
°dîr
, "bad field in Synchronize cache command\n");

282 
	`Ârötf
(
°dîr
, "Synchronize cache failed\n");

284 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

285 i‡(
ªs
 < 0) {

286 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

287 i‡(0 =
ªt
)

288  
SG_LIB_FILE_ERROR
;

290  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

291 
	}
}

	@src/sg_test_rwbuf.c

25 
	~<uni°d.h
>

26 
	~<f˙é.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<gë›t.h
>

31 
	~<sys/io˘l.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<time.h
>

35 #ifde‡
HAVE_CONFIG_H


36 
	~"c⁄fig.h
"

38 
	~"sg_lib.h
"

39 
	~"sg_io_löux.h
"

42 c⁄° * 
	gvîsi⁄_°r
 = "1.07 20130507";

44 
	#BPI
 (sig√d)(())

	)

46 
	#RB_MODE_DESC
 3

	)

47 
	#RWB_MODE_DATA
 2

	)

48 
	#RB_DESC_LEN
 4

	)

56 
	#ME
 "sg_ã°_rwbuf: "

	)

58 
	gba£
 = 0x12345678;

59 
	gbuf_ˇ∑côy
 = 0;

60 
	gbuf_gønul
 = 255;

61 *
	gcmpbuf
 = 
NULL
;

65 
	gsize
 = -1;

66 
	gdo_quick
 = 0;

67 
	gaddwrôe
 = 0;

68 
	gaddªad
 = 0;

69 
	gvîbo£
 = 0;

71 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

83 
	$föd_out_about_buf„r
 (
sg_fd
)

85 
rbCmdBlk
[] = {
READ_BUFFER
, 0, 0, 0, 0, 0, 0, 0, 0, 0};

86 
rbBuff
[
RB_DESC_LEN
];

87 
£n£_buf„r
[32];

88 
sg_io_hdr
 
io_hdr
;

89 
k
, 
ªs
;

91 
rbCmdBlk
[1] = 
RB_MODE_DESC
;

92 
rbCmdBlk
[8] = 
RB_DESC_LEN
;

93 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr
));

94 
io_hdr
.
öãrÁ˚_id
 = 'S';

95 
io_hdr
.
cmd_Àn
 = (
rbCmdBlk
);

96 
io_hdr
.
mx_sb_Àn
 = (
£n£_buf„r
);

97 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

98 
io_hdr
.
dx„r_Àn
 = 
RB_DESC_LEN
;

99 
io_hdr
.
dx„Ω
 = 
rbBuff
;

100 
io_hdr
.
cmdp
 = 
rbCmdBlk
;

101 
io_hdr
.
sbp
 = 
£n£_buf„r
;

102 
io_hdr
.
timeout
 = 60000;

104 i‡(
vîbo£
) {

105 
	`Ârötf
(
°dîr
, "Ñead buffer [mode desc] cdb: ");

106 
k
 = 0; k < ()(
rbCmdBlk
); ++k)

107 
	`Ârötf
(
°dîr
, "%02x ", 
rbCmdBlk
[
k
]);

108 
	`Ârötf
(
°dîr
, "\n");

110 i‡(
	`io˘l
(
sg_fd
, 
SG_IO
, &
io_hdr
) < 0) {

111 
	`≥º‹
(
ME
 "SG_IO READ BUFFER descriptorÉrror");

115 
ªs
 = 
	`sg_îr_ˇãg‹y3
(&
io_hdr
);

116 
ªs
) {

117 
SG_LIB_CAT_RECOVERED
:

118 
	`sg_chk_n_¥öt3
("READ BUFFER descriptor, continuing",

119 &
io_hdr
, 1);

121 
SG_LIB_CAT_CLEAN
:

124 
	`sg_chk_n_¥öt3
("READ BUFFER des¸ùt‹Éº‹", &
io_hdr
, 1);

125  
ªs
;

128 
buf_ˇ∑côy
 = ((
rbBuff
[1] << 16) | (rbBuff[2] << 8) |ÑbBuff[3]);

129 
buf_gønul
 = ()
rbBuff
[0];

131 
	`¥ötf
("READ BUFFERÑeports: %02x %02x %02x %02x\n",

132 
rbBuff
[0],ÑbBuff[1],ÑbBuff[2],ÑbBuff[3]);

134 i‡(
vîbo£
)

135 
	`¥ötf
("READ BUFFERÑeports: buffer capacity=%d, offset "

136 "bound¨y=%d\n", 
buf_ˇ∑côy
, 
buf_gønul
);

138 
	}
}

140 
	$mymemcmp
 (*
bf1
, *
bf2
, 
Àn
)

142 
df
;

143 
df
 = 0; d‡< 
Àn
; df++)

144 i‡(
bf1
[
df
] !
bf2
[df])  df;

146 
	}
}

149 
	$do_checksum
 (*
buf
, 
Àn
, 
quõt
)

151 
sum
 = 
ba£
;

152 
i
; 
æn
 = 
Àn
;

153 
i
 = 0; i < 
Àn
/
BPI
; i++)

154 
sum
 +
buf
[
i
];

155 
æn
%
BPI
Ë
sum
 +((*)
buf
)[--rln];

156 i‡(
sum
 != 0x12345678) {

157 i‡(!
quõt
Ë
	`¥ötf
 ("sg_test_rwbuf: ChecksumÉrror (sz=%i):"

158 " %08x\n", 
Àn
, 
sum
);

159 i‡(
cmpbuf
 && !
quõt
) {

160 
diff
 = 
	`mymemcmp
 (
cmpbuf
, (*)
buf
,

161 
Àn
);

162 
	`¥ötf
 ("Dif„∏©Öo†%i/%i:\n", 
diff
, 
Àn
);

163 
i
 = 0; i < 24 && i+
diff
 < 
Àn
; i++)

164 
	`¥ötf
 (" %02x", 
cmpbuf
[
i
+
diff
]);

165 
	`¥ötf
 ("\n");

166 
i
 = 0; i < 24 && i+
diff
 < 
Àn
; i++)

167 
	`¥ötf
 (" %02x",

168 ((*)
buf
)[
i
+
diff
]);

169 
	`¥ötf
 ("\n");

174 i‡(
vîbo£
 > 1)

175 
	`¥ötf
("Checksum vÆue: 0x%x\n", 
sum
);

178 
	}
}

180 
	$do_fûl_buf„r
 (*
buf
, 
Àn
)

182 
sum
;

183 
i
; 
æn
 = 
Àn
;

184 
	`§™d
 (
	`time
 (0));

185 
ªåy
:

186 i‡(
Àn
 >
BPI
)

187 
ba£
 = 0x12345678 + 
	`ønd
 ();

189 
ba£
 = 0x12345678 + (Ë
	`ønd
 ();

190 
sum
 = 
ba£
;

191 
i
 = 0; i < 
Àn
/
BPI
 - 1; i++)

194 
buf
[
i
] = 
	`ønd
 ();

195 
sum
 +
buf
[
i
];

197 
æn
%
BPI
)

199 ((*)
buf
)[--
æn
] = 
	`ønd
 ();

200 
sum
 +((*)
buf
)[
æn
];

202 i‡(
Àn
 >
BPI
Ë
buf
[Àn/BPI - 1] = 0x12345678 - 
sum
;

203 ((*)
buf
)[0] = 0x12345678 + ((*)buf)[0] - 
sum
;

204 i‡(
	`do_checksum
 (
buf
, 
Àn
, 1)) {

205 i‡(
Àn
 < 
BPI
Ë
ªåy
;

206 
	`¥ötf
 ("sg_test_rwbuf: Memory corruption?\n");

207 
	`exô
 (1);

209 i‡(
cmpbuf
Ë
	`mem˝y
 (cmpbuf, (*)
buf
, 
Àn
);

210 
	}
}

213 
	$ªad_buf„r
 (
sg_fd
, 
size
)

215 
ªs
, 
k
;

216 
rbCmdBlk
[] = {
READ_BUFFER
, 0, 0, 0, 0, 0, 0, 0, 0, 0};

217 
bufSize
 = 
size
 + 
addªad
;

218 * 
rbBuff
 = (*)
	`mÆloc
(
bufSize
);

219 
£n£_buf„r
[32];

220 
sg_io_hdr
 
io_hdr
;

222 i‡(
NULL
 =
rbBuff
)

224 
rbCmdBlk
[1] = 
RWB_MODE_DATA
;

225 
rbCmdBlk
[6] = 0xf‡& (
bufSize
 >> 16);

226 
rbCmdBlk
[7] = 0xf‡& (
bufSize
 >> 8);

227 
rbCmdBlk
[8] = 0xf‡& 
bufSize
;

228 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr
));

229 
io_hdr
.
öãrÁ˚_id
 = 'S';

230 
io_hdr
.
cmd_Àn
 = (
rbCmdBlk
);

231 
io_hdr
.
mx_sb_Àn
 = (
£n£_buf„r
);

232 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

233 
io_hdr
.
dx„r_Àn
 = 
bufSize
;

234 
io_hdr
.
dx„Ω
 = 
rbBuff
;

235 
io_hdr
.
cmdp
 = 
rbCmdBlk
;

236 
io_hdr
.
sbp
 = 
£n£_buf„r
;

237 
io_hdr
.
∑ck_id
 = 2;

238 
io_hdr
.
timeout
 = 60000;

239 i‡(
vîbo£
) {

240 
	`Ârötf
(
°dîr
, "Ñead buffer [mode data] cdb: ");

241 
k
 = 0; k < ()(
rbCmdBlk
); ++k)

242 
	`Ârötf
(
°dîr
, "%02x ", 
rbCmdBlk
[
k
]);

243 
	`Ârötf
(
°dîr
, "\n");

246 i‡(
	`io˘l
(
sg_fd
, 
SG_IO
, &
io_hdr
) < 0) {

247 
	`≥º‹
(
ME
 "SG_IO READ BUFFER dataÉrror");

248 
	`‰ì
(
rbBuff
);

252 
ªs
 = 
	`sg_îr_ˇãg‹y3
(&
io_hdr
);

253 
ªs
) {

254 
SG_LIB_CAT_RECOVERED
:

255 
	`sg_chk_n_¥öt3
("READ BUFFER d©a, c⁄töuög", &
io_hdr
, 1);

257 
SG_LIB_CAT_CLEAN
:

260 
	`sg_chk_n_¥öt3
("READ BUFFER d©®îr‹", &
io_hdr
, 1);

261 
	`‰ì
(
rbBuff
);

262  
ªs
;

265 
ªs
 = 
	`do_checksum
 ((*)
rbBuff
, 
size
, 0);

266 
	`‰ì
(
rbBuff
);

267  
ªs
;

268 
	}
}

270 
	$wrôe_buf„r
 (
sg_fd
, 
size
)

272 
wbCmdBlk
[] = {
WRITE_BUFFER
, 0, 0, 0, 0, 0, 0, 0, 0, 0};

273 
bufSize
 = 
size
 + 
addwrôe
;

274 * 
wbBuff
 = (*)
	`mÆloc
(
bufSize
);

275 
£n£_buf„r
[32];

276 
sg_io_hdr
 
io_hdr
;

277 
k
, 
ªs
;

279 i‡(
NULL
 =
wbBuff
)

281 
	`mem£t
(
wbBuff
, 0, 
bufSize
);

282 
	`do_fûl_buf„r
 ((*)
wbBuff
, 
size
);

283 
wbCmdBlk
[1] = 
RWB_MODE_DATA
;

284 
wbCmdBlk
[6] = 0xf‡& (
bufSize
 >> 16);

285 
wbCmdBlk
[7] = 0xf‡& (
bufSize
 >> 8);

286 
wbCmdBlk
[8] = 0xf‡& 
bufSize
;

287 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr
));

288 
io_hdr
.
öãrÁ˚_id
 = 'S';

289 
io_hdr
.
cmd_Àn
 = (
wbCmdBlk
);

290 
io_hdr
.
mx_sb_Àn
 = (
£n£_buf„r
);

291 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_TO_DEV
;

292 
io_hdr
.
dx„r_Àn
 = 
bufSize
;

293 
io_hdr
.
dx„Ω
 = 
wbBuff
;

294 
io_hdr
.
cmdp
 = 
wbCmdBlk
;

295 
io_hdr
.
sbp
 = 
£n£_buf„r
;

296 
io_hdr
.
∑ck_id
 = 1;

297 
io_hdr
.
timeout
 = 60000;

298 i‡(
vîbo£
) {

299 
	`Ârötf
(
°dîr
, " write buffer [mode data] cdb: ");

300 
k
 = 0; k < ()(
wbCmdBlk
); ++k)

301 
	`Ârötf
(
°dîr
, "%02x ", 
wbCmdBlk
[
k
]);

302 
	`Ârötf
(
°dîr
, "\n");

305 i‡(
	`io˘l
(
sg_fd
, 
SG_IO
, &
io_hdr
) < 0) {

306 
	`≥º‹
(
ME
 "SG_IO WRITE BUFFER dataÉrror");

307 
	`‰ì
(
wbBuff
);

311 
ªs
 = 
	`sg_îr_ˇãg‹y3
(&
io_hdr
);

312 
ªs
) {

313 
SG_LIB_CAT_RECOVERED
:

314 
	`sg_chk_n_¥öt3
("WRITE BUFFER d©a, c⁄töuög", &
io_hdr
, 1);

316 
SG_LIB_CAT_CLEAN
:

319 
	`sg_chk_n_¥öt3
("WRITE BUFFER d©®îr‹", &
io_hdr
, 1);

320 
	`‰ì
(
wbBuff
);

321  
ªs
;

323 
	`‰ì
(
wbBuff
);

324  
ªs
;

325 
	}
}

327 
	$ußge
 ()

329 
	`¥ötf
 ("Usage: sg_test_rwbuf [--addrd=AR] [--addwr=AW] [--help] "

331 
	`¥ötf
 (" --size=SZ [--times=NUM] [--verbose] "

336 
	`¥ötf
 (" where:\n"

348 
	`¥ötf
 ("\nWARNING: If youáccessÅhe deviceátÅhe sameÅime,É.g. "

350 
	`¥ötf
 (" mounted hard disk,Åhe device's buffer may be used byÅhe "

352 
	`¥ötf
 (" for other dataátÅhe sameÅime,ánd overwriting it may or "

354 
	`¥ötf
 (" cause data corruption!\n");

355 
	`¥ötf
 ("(c) Douglas Gilbert, Kurt Garloff, 2000-2007, GNU GPL\n");

356 
	}
}

359 
	$maö
 (
¨gc
, * 
¨gv
[])

361 
sg_fd
, 
ªs
;

362 c⁄° * 
devi˚_«me
 = 
NULL
;

363 
times
 = 1;

364 
ªt
 = 0;

365 
k
 = 0;

368 
›ti⁄_ödex
 = 0;

369 
c
;

371 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hqr:s:t:w:vV",

372 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

373 i‡(
c
 == -1)

376 
c
) {

378 
	`ußge
();

381 
do_quick
 = 1;

384 
addªad
 = 
	`sg_gë_num
(
›èrg
);

385 i‡(-1 =
addªad
) {

386 
	`Ârötf
(
°dîr
, "badárgumentÅo '--addrd'\n");

387  
SG_LIB_SYNTAX_ERROR
;

391 
size
 = 
	`sg_gë_num
(
›èrg
);

392 i‡(-1 =
size
) {

393 
	`Ârötf
(
°dîr
, "badárgumentÅo '--size'\n");

394  
SG_LIB_SYNTAX_ERROR
;

398 
times
 = 
	`sg_gë_num
(
›èrg
);

399 i‡(-1 =
times
) {

400 
	`Ârötf
(
°dîr
, "badárgumentÅo '--times'\n");

401  
SG_LIB_SYNTAX_ERROR
;

405 
vîbo£
++;

408 
	`Ârötf
(
°dîr
, 
ME
 "version: %s\n",

409 
vîsi⁄_°r
);

412 
addwrôe
 = 
	`sg_gë_num
(
›èrg
);

413 i‡(-1 =
addwrôe
) {

414 
	`Ârötf
(
°dîr
, "badárgumentÅo '--addwr'\n");

415  
SG_LIB_SYNTAX_ERROR
;

419 
	`ußge
();

420  
SG_LIB_SYNTAX_ERROR
;

423 i‡(
›töd
 < 
¨gc
) {

424 i‡(
NULL
 =
devi˚_«me
) {

425 
devi˚_«me
 = 
¨gv
[
›töd
];

426 ++
›töd
;

429 i‡(
›töd
 < 
¨gc
) {

430 i‡(-1 =
size
) {

431 
size
 = 
	`sg_gë_num
(
¨gv
[
›töd
]);

432 i‡(-1 =
size
) {

433 
	`Ârötf
(
°dîr
, "bad <sz>\n");

434 
	`ußge
();

435  
SG_LIB_SYNTAX_ERROR
;

437 i‡(++
›töd
 < 
¨gc
) {

438 
addwrôe
 = 
	`sg_gë_num
(
¨gv
[
›töd
]);

439 i‡(-1 =
addwrôe
) {

440 
	`Ârötf
(
°dîr
, "bad [addwr]\n");

441 
	`ußge
();

442  
SG_LIB_SYNTAX_ERROR
;

444 i‡(++
›töd
 < 
¨gc
) {

445 
addªad
 = 
	`sg_gë_num
(
¨gv
[
›töd
]);

446 i‡(-1 =
addªad
) {

447 
	`Ârötf
(
°dîr
,

449 
	`ußge
();

450  
SG_LIB_SYNTAX_ERROR
;

456 i‡(
›töd
 < 
¨gc
) {

457 ; 
›töd
 < 
¨gc
; ++optind)

458 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument"

459 ": %s\n", 
¨gv
[
›töd
]);

460 
	`ußge
();

461  
SG_LIB_SYNTAX_ERROR
;

464 i‡(
NULL
 =
devi˚_«me
) {

465 
	`Ârötf
(
°dîr
, "no deviceÇame given\n");

466 
	`ußge
();

467  
SG_LIB_SYNTAX_ERROR
;

469 i‡((
size
 <0Ë&& (! 
do_quick
)) {

470 
	`Ârötf
(
°dîr
, "must give '--size' or '--quick' options "

472 
	`ußge
();

473  
SG_LIB_SYNTAX_ERROR
;

476 
sg_fd
 = 
	`›í
(
devi˚_«me
, 
O_RDWR
 | 
O_NONBLOCK
);

477 i‡(
sg_fd
 < 0) {

478 
	`≥º‹
("sg_test_rwbuf: openÉrror");

479  
SG_LIB_FILE_ERROR
;

481 
ªt
 = 
	`föd_out_about_buf„r
(
sg_fd
);

482 i‡(
ªt
)

483 
îr_out
;

484 i‡(
do_quick
) {

485 
	`¥ötf
 ("READ BUFFERÑead descriptorÑeportsá buffer "

486 "o‡%d byã†[%d KiB]\n", 
buf_ˇ∑côy
,

487 
buf_ˇ∑côy
 / 1024);

488 
îr_out
;

490 i‡(
size
 > 
buf_ˇ∑côy
) {

491 
	`Ârötf
 (
°dîr
, 
ME
 "sz=%i > buf_capacity=%i\n",

492 
size
, 
buf_ˇ∑côy
);

493 
ªt
 = 
SG_LIB_CAT_OTHER
;

494 
îr_out
;

497 
cmpbuf
 = (*)
	`mÆloc
(
size
);

498 
k
 = 0; k < 
times
; ++k) {

499 
ªt
 = 
	`wrôe_buf„r
 (
sg_fd
, 
size
);

500 i‡(
ªt
) {

501 
îr_out
;

503 
ªt
 = 
	`ªad_buf„r
 (
sg_fd
, 
size
);

504 i‡(
ªt
) {

505 i‡(2222 =
ªt
)

506 
ªt
 = 
SG_LIB_CAT_MALFORMED
;

507 
îr_out
;

511 
îr_out
:

512 i‡(
cmpbuf
)

513 
	`‰ì
(
cmpbuf
);

514 
ªs
 = 
	`˛o£
(
sg_fd
);

515 i‡(
ªs
 < 0) {

516 
	`≥º‹
(
ME
 "closeÉrror");

517 i‡(0 =
ªt
)

518 
ªt
 = 
SG_LIB_FILE_ERROR
;

520 i‡((0 =
ªt
Ë&& (! 
do_quick
))

521 
	`¥ötf
 ("Success\n");

522 i‡(
times
 > 1)

523 
	`¥ötf
 ("Faûedá·î %d suc˚ssfu»cy˛es\n", 
k
);

524  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

525 
	}
}

	@src/sg_turs.c

14 
	~<uni°d.h
>

15 
	~<f˙é.h
>

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<°rög.h
>

19 
	~<gë›t.h
>

21 #ifde‡
HAVE_CONFIG_H


22 
	~"c⁄fig.h
"

25 #i‚de‡
SG_LIB_MINGW


26 
	~<sys/time.h
>

29 
	~"sg_lib.h
"

30 
	~"sg_cmds_basic.h
"

33 c⁄° * 
	gvîsi⁄_°r
 = "3.29 20130530";

35 #i‡
deföed
(
MSC_VER
Ë|| deföed(
__MINGW32__
)

36 
	#HAVE_MS_SLEEP


	)

39 #ifde‡
HAVE_MS_SLEEP


40 
	~<wödows.h
>

41 
	#¶ìp_f‹
(
£c⁄ds
Ë
	`SÀï
–(£c⁄dsË* 1000)

	)

43 
	#¶ìp_f‹
(
£c⁄ds
Ë
	`¶ìp
(£c⁄ds)

	)

46 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

58 
	s›ts_t
 {

59 
	mdo_hñp
;

60 
	mdo_numbî
;

61 
	mdo_¥ogªss
;

62 
	mdo_time
;

63 
	mdo_vîbo£
;

64 
	mdo_vîsi⁄
;

65 c⁄° * 
	mdevi˚_«me
;

66 
	m›t_√w
;

70 
	$ußge
()

72 
	`¥ötf
("Usage: sg_turs [--help] [--number=NUM] [--progress] [--time] "

86 
	}
}

88 
	$ußge_ﬁd
()

90 
	`¥ötf
("Usage: sg_turs [-n=NUM] [-p] [-t] [-v] [-V] "

102 
	}
}

104 
	$ußge_f‹
(c⁄° 
›ts_t
 * 
›t•
)

106 i‡(
›t•
->
›t_√w
)

107 
	`ußge
();

109 
	`ußge_ﬁd
();

110 
	}
}

112 
	$¥o˚ss_˛_√w
(
›ts_t
 * 
›t•
, 
¨gc
, * 
¨gv
[])

114 
c
, 
n
;

117 
›ti⁄_ödex
 = 0;

119 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hn:NO±vV", 
l⁄g_›ti⁄s
,

120 &
›ti⁄_ödex
);

121 i‡(
c
 == -1)

124 
c
) {

127 ++
›t•
->
do_hñp
;

130 
n
 = 
	`sg_gë_num
(
›èrg
);

131 i‡(
n
 < 0) {

132 
	`Ârötf
(
°dîr
, "badárgumentÅo '--number='\n");

133 
	`ußge
();

134  
SG_LIB_SYNTAX_ERROR
;

136 
›t•
->
do_numbî
 = 
n
;

141 
›t•
->
›t_√w
 = 0;

144 ++
›t•
->
do_¥ogªss
;

147 ++
›t•
->
do_time
;

150 ++
›t•
->
do_vîbo£
;

153 ++
›t•
->
do_vîsi⁄
;

156 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê%¯[0x%x]\n", 
c
, c);

157 i‡(
›t•
->
do_hñp
)

159 
	`ußge
();

160  
SG_LIB_SYNTAX_ERROR
;

163 i‡(
›töd
 < 
¨gc
) {

164 i‡(
NULL
 =
›t•
->
devi˚_«me
) {

165 
›t•
->
devi˚_«me
 = 
¨gv
[
›töd
];

166 ++
›töd
;

168 i‡(
›töd
 < 
¨gc
) {

169 ; 
›töd
 < 
¨gc
; ++optind)

170 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

171 
¨gv
[
›töd
]);

172 
	`ußge
();

173  
SG_LIB_SYNTAX_ERROR
;

177 
	}
}

179 
	$¥o˚ss_˛_ﬁd
(
›ts_t
 * 
›t•
, 
¨gc
, * 
¨gv
[])

181 
k
, 
jmp_out
, 
∂í
;

182 c⁄° * 
˝
;

184 
k
 = 1; k < 
¨gc
; ++k) {

185 
˝
 = 
¨gv
[
k
];

186 
∂í
 = 
	`°æí
(
˝
);

187 i‡(
∂í
 <= 0)

189 i‡('-' =*
˝
) {

190 --
∂í
, ++
˝
, 
jmp_out
 = 0;Ölen > 0; --plen, ++cp) {

191 *
˝
) {

193 
›t•
->
›t_√w
 = 1;

198 ++
›t•
->
do_¥ogªss
;

201 ++
›t•
->
do_time
;

204 ++
›t•
->
do_vîbo£
;

207 ++
›t•
->
do_vîbo£
;

210 
	`ußge_ﬁd
();

213 
jmp_out
 = 1;

216 i‡(
jmp_out
)

219 i‡(
∂í
 <= 0)

221 i‡(0 =
	`°∫cmp
("n=", 
˝
, 2)) {

222 
›t•
->
do_numbî
 = 
	`sg_gë_num
(
˝
 + 2);

223 i‡(
›t•
->
do_numbî
 <= 0) {

224 
	`¥ötf
("Couldn't decodeÇumberáfter 'n=' option\n");

225 
	`ußge_ﬁd
();

226  
SG_LIB_SYNTAX_ERROR
;

228 } i‡(0 =
	`°∫cmp
("-ﬁd", 
˝
, 4))

230 i‡(
jmp_out
) {

231 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄: %s\n", 
˝
);

232 
	`ußge_ﬁd
();

233  
SG_LIB_SYNTAX_ERROR
;

235 } i‡(0 =
›t•
->
devi˚_«me
)

236 
›t•
->
devi˚_«me
 = 
˝
;

238 
	`Ârötf
(
°dîr
, "too manyárguments, got: %s,ÇotÉxpecting: "

239 "%s\n", 
›t•
->
devi˚_«me
, 
˝
);

240 
	`ußge_ﬁd
();

241  
SG_LIB_SYNTAX_ERROR
;

245 
	}
}

247 
	$¥o˚ss_˛
(
›ts_t
 * 
›t•
, 
¨gc
, * 
¨gv
[])

249 
ªs
;

250 * 
˝
;

252 
˝
 = 
	`gëív
("SG3_UTILS_OLD_OPTS");

253 i‡(
˝
) {

254 
›t•
->
›t_√w
 = 0;

255 
ªs
 = 
	`¥o˚ss_˛_ﬁd
(
›t•
, 
¨gc
, 
¨gv
);

256 i‡((0 =
ªs
Ë&& 
›t•
->
›t_√w
)

257 
ªs
 = 
	`¥o˚ss_˛_√w
(
›t•
, 
¨gc
, 
¨gv
);

259 
›t•
->
›t_√w
 = 1;

260 
ªs
 = 
	`¥o˚ss_˛_√w
(
›t•
, 
¨gc
, 
¨gv
);

261 i‡((0 =
ªs
Ë&& (0 =
›t•
->
›t_√w
))

262 
ªs
 = 
	`¥o˚ss_˛_ﬁd
(
›t•
, 
¨gc
, 
¨gv
);

264  
ªs
;

265 
	}
}

267 
	$maö
(
¨gc
, * 
¨gv
[])

269 
sg_fd
, 
k
, 
ªs
, 
¥ogªss
, 
¥
, 
ªm
;

270 
num_îrs
 = 0;

271 
ªp‹ãd
 = 0;

272 
ªt
 = 0;

273 #i‚de‡
SG_LIB_MINGW


274 
timevÆ
 
°¨t_tm
, 
íd_tm
;

276 
›ts_t
 
›ts
;

278 
	`mem£t
(&
›ts
, 0, (opts));

279 
›ts
.
do_numbî
 = 1;

280 
ªs
 = 
	`¥o˚ss_˛
(&
›ts
, 
¨gc
, 
¨gv
);

281 i‡(
ªs
)

282  
SG_LIB_SYNTAX_ERROR
;

283 i‡(
›ts
.
do_hñp
) {

284 
	`ußge_f‹
(&
›ts
);

287 i‡(
›ts
.
do_vîsi⁄
) {

288 
	`Ârötf
(
°dîr
, "Vîsi⁄ såög: %s\n", 
vîsi⁄_°r
);

292 i‡(
NULL
 =
›ts
.
devi˚_«me
) {

293 
	`Ârötf
(
°dîr
, "No DEVICEárgument given\n");

294 
	`ußge_f‹
(&
›ts
);

295  
SG_LIB_SYNTAX_ERROR
;

298 i‡((
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
›ts
.
devi˚_«me
, 1 ,

299 
›ts
.
do_vîbo£
)) < 0) {

300 
	`Ârötf
(
°dîr
, "sg_turs:Érror opening file: %s: %s\n",

301 
›ts
.
devi˚_«me
, 
	`ß„_°ªº‹
(-
sg_fd
));

302  
SG_LIB_FILE_ERROR
;

304 i‡(
›ts
.
do_¥ogªss
) {

305 
k
 = 0; k < 
›ts
.
do_numbî
; ++k) {

306 i‡(
k
 > 0)

307 
	`¶ìp_f‹
(30);

308 
¥ogªss
 = -1;

309 
ªs
 = 
	`sg_Œ_ã°_unô_ªady_¥ogªss
(
sg_fd
, 
k
, &
¥ogªss
,

310 ((1 =
›ts
.
do_numbî
Ë? 1 : 0), o±s.
do_vîbo£
);

311 i‡(
¥ogªss
 < 0) {

312 
ªt
 = 
ªs
;

315 
¥
 = (
¥ogªss
 * 100) / 65536;

316 
ªm
 = ((
¥ogªss
 * 100) % 65536) / 656;

317 
	`¥ötf
("Progªs†ödiˇti⁄: %d.%02d%% d⁄e\n", 
¥
, 
ªm
);

320 i‡(
›ts
.
do_numbî
 > 1)

321 
	`¥ötf
("Completed %d Test Unit Ready commands\n",

322 ((
k
 < 
›ts
.
do_numbî
) ? k + 1 : k));

324 #i‚de‡
SG_LIB_MINGW


325 i‡(
›ts
.
do_time
) {

326 
°¨t_tm
.
tv_£c
 = 0;

327 
°¨t_tm
.
tv_u£c
 = 0;

328 
	`gëtimeofday
(&
°¨t_tm
, 
NULL
);

331 
k
 = 0; k < 
›ts
.
do_numbî
; ++k) {

333 
ªs
 = 
	`sg_Œ_ã°_unô_ªady
(
sg_fd
, 
k
, (0 =k), 
›ts
.
do_vîbo£
);

334 i‡(
ªs
) {

335 ++
num_îrs
;

336 
ªt
 = 
ªs
;

337 i‡((1 =
›ts
.
do_numbî
Ë&& (
SG_LIB_CAT_NOT_READY
 =
ªs
)) {

338 
	`¥ötf
("deviceÇotÑeady\n");

339 
ªp‹ãd
 = 1;

344 #i‚de‡
SG_LIB_MINGW


345 i‡((
›ts
.
do_time
Ë&& (
°¨t_tm
.
tv_£c
 || sèπ_tm.
tv_u£c
)) {

346 
timevÆ
 
ªs_tm
;

347 
a
, 
b
;

349 
	`gëtimeofday
(&
íd_tm
, 
NULL
);

350 
ªs_tm
.
tv_£c
 = 
íd_tm
.tv_£¯- 
°¨t_tm
.tv_sec;

351 
ªs_tm
.
tv_u£c
 = 
íd_tm
.tv_u£¯- 
°¨t_tm
.tv_usec;

352 i‡(
ªs_tm
.
tv_u£c
 < 0) {

353 --
ªs_tm
.
tv_£c
;

354 
ªs_tm
.
tv_u£c
 += 1000000;

356 
a
 = 
ªs_tm
.
tv_£c
;

357 
a
 +(0.000001 * 
ªs_tm
.
tv_u£c
);

358 
b
 = ()
›ts
.
do_numbî
;

359 
	`¥ötf
("timeÅoÖerform commands was %d.%06d secs",

360 ()
ªs_tm
.
tv_£c
, (Ïes_tm.
tv_u£c
);

361 i‡(
a
 > 0.00001)

362 
	`¥ötf
("; %.2‡›î©i⁄s/£c\n", 
b
 / 
a
);

364 
	`¥ötf
("\n");

368 i‡(((
›ts
.
do_numbî
 > 1Ë|| (
num_îrs
 > 0)Ë&& (! 
ªp‹ãd
))

369 
	`¥ötf
("Completed %d Test Unit Ready commands with %dÉrrors\n",

370 
›ts
.
do_numbî
, 
num_îrs
);

372 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

373  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

374 
	}
}

	@src/sg_unmap.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<˘y≥.h
>

14 
	~<gë›t.h
>

15 
	~<limôs.h
>

16 
	#__STDC_FORMAT_MACROS
 1

	)

17 
	~<öây≥s.h
>

19 #ifde‡
HAVE_CONFIG_H


20 
	~"c⁄fig.h
"

22 
	~"sg_lib.h
"

23 
	~"sg_cmds_basic.h
"

24 
	~"sg_cmds_exåa.h
"

32 c⁄° * 
	gvîsi⁄_°r
 = "1.02 20130507";

35 
	#DEF_TIMEOUT_SECS
 60

	)

36 
	#MAX_NUM_ADDR
 128

	)

39 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

40 {"™ch‹", 
no_¨gumít
, 0, 'a'},

41 {"gΩnum", 
ªquúed_¨gumít
, 0, 'g'},

42 {"hñp", 
no_¨gumít
, 0, 'h'},

43 {"ö", 
ªquúed_¨gumít
, 0, 'I'},

44 {"lba", 
ªquúed_¨gumít
, 0, 'l'},

45 {"num", 
ªquúed_¨gumít
, 0, 'n'},

46 {"timeout", 
ªquúed_¨gumít
, 0, 't'},

47 {"vîbo£", 
no_¨gumít
, 0, 'v'},

48 {"vîsi⁄", 
no_¨gumít
, 0, 'V'},

53 
	$ußge
()

55 
	`Ârötf
(
°dîr
, "Usage: "

84 
	}
}

88 
öt64_t


89 
	$gë_Œnum
(c⁄° * 
buf
)

91 
ªs
, 
Àn
;

92 
öt64_t
 
num
;

93 
uöt64_t
 
unum
;

95 i‡((
NULL
 =
buf
) || ('\0' == buf[0]))

97 
Àn
 = 
	`°r•n
(
buf
, "0123456789aAbBcCdDeEfFhHxX");

98 i‡(0 =
Àn
)

100 i‡(('0' =
buf
[0]) && (('x' == buf[1]) || ('X' == buf[1]))) {

101 
ªs
 = 
	`ssˇnf
(
buf
 + 2, "%" 
SCNx64
 "", &
unum
);

102 
num
 = 
unum
;

103 } i‡('H' =
	`touµî
(
buf
[
Àn
 - 1])) {

104 
ªs
 = 
	`ssˇnf
(
buf
, "%" 
SCNx64
 "", &
unum
);

105 
num
 = 
unum
;

107 
ªs
 = 
	`ssˇnf
(
buf
, "%" 
SCNd64
 "", &
num
);

108 i‡(1 =
ªs
)

109  
num
;

112 
	}
}

119 
	$buûd_lba_¨r
(c⁄° * 
öp
, 
uöt64_t
 * 
lba_¨r
,

120 * 
lba_¨r_Àn
, 
max_¨r_Àn
)

122 
ö_Àn
, 
k
;

123 c⁄° * 
l˝
;

124 
öt64_t
 
Œ
;

125 * 
˝
;

126 * 
c2p
;

128 i‡((
NULL
 =
öp
Ë|| (NULL =
lba_¨r
) ||

129 (
NULL
 =
lba_¨r_Àn
))

131 
l˝
 = 
öp
;

132 
ö_Àn
 = 
	`°æí
(
öp
);

133 i‡(0 =
ö_Àn
)

134 *
lba_¨r_Àn
 = 0;

135 i‡('-' =
öp
[0]) {

136 
	`Ârötf
(
°dîr
, "'--lba' cannot beÑead from stdin\n");

139 
k
 = 
	`°r•n
(
öp
, "0123456789aAbBcCdDeEfFhHxX, ");

140 i‡(
ö_Àn
 !
k
) {

141 
	`Ârötf
(
°dîr
, "buûd_lba_¨r:Éº‹áàpo†%d\n", 
k
 + 1);

144 
k
 = 0; k < 
max_¨r_Àn
; ++k) {

145 
Œ
 = 
	`gë_Œnum
(
l˝
);

146 i‡(-1 !
Œ
) {

147 
lba_¨r
[
k
] = (
uöt64_t
)
Œ
;

148 
˝
 = (*)
	`°rchr
(
l˝
, ',');

149 
c2p
 = (*)
	`°rchr
(
l˝
, ' ');

150 i‡(
NULL
 =
˝
)

151 
˝
 = 
c2p
;

152 i‡(
NULL
 =
˝
)

154 i‡(
c2p
 && (c2∞< 
˝
))

155 
˝
 = 
c2p
;

156 
l˝
 = 
˝
 + 1;

158 
	`Ârötf
(
°dîr
, "build_lba_arr:ÉrrorátÖos %d\n",

159 ()(
l˝
 - 
öp
 + 1));

163 *
lba_¨r_Àn
 = 
k
 + 1;

164 i‡(
k
 =
max_¨r_Àn
) {

165 
	`Ârötf
(
°dîr
, "build_lba_arr:árrayÜengthÉxceeded\n");

170 
	}
}

177 
	$buûd_num_¨r
(c⁄° * 
öp
, 
uöt32_t
 * 
num_¨r
,

178 * 
num_¨r_Àn
, 
max_¨r_Àn
)

180 
ö_Àn
, 
k
;

181 c⁄° * 
l˝
;

182 
öt64_t
 
Œ
;

183 * 
˝
;

184 * 
c2p
;

186 i‡((
NULL
 =
öp
Ë|| (NULL =
num_¨r
) ||

187 (
NULL
 =
num_¨r_Àn
))

189 
l˝
 = 
öp
;

190 
ö_Àn
 = 
	`°æí
(
öp
);

191 i‡(0 =
ö_Àn
)

192 *
num_¨r_Àn
 = 0;

193 i‡('-' =
öp
[0]) {

194 
	`Ârötf
(
°dîr
, "'--len' cannot beÑead from stdin\n");

197 
k
 = 
	`°r•n
(
öp
, "0123456789aAbBcCdDeEfFhHxX, ");

198 i‡(
ö_Àn
 !
k
) {

199 
	`Ârötf
(
°dîr
, "buûd_num_¨r:Éº‹áàpo†%d\n", 
k
 + 1);

202 
k
 = 0; k < 
max_¨r_Àn
; ++k) {

203 
Œ
 = 
	`gë_Œnum
(
l˝
);

204 i‡(-1 !
Œ
) {

205 
num_¨r
[
k
] = (
uöt32_t
)
Œ
;

206 
˝
 = (*)
	`°rchr
(
l˝
, ',');

207 
c2p
 = (*)
	`°rchr
(
l˝
, ' ');

208 i‡(
NULL
 =
˝
)

209 
˝
 = 
c2p
;

210 i‡(
NULL
 =
˝
)

212 i‡(
c2p
 && (c2∞< 
˝
))

213 
˝
 = 
c2p
;

214 
l˝
 = 
˝
 + 1;

216 
	`Ârötf
(
°dîr
, "build_num_arr:ÉrrorátÖos %d\n",

217 ()(
l˝
 - 
öp
 + 1));

221 *
num_¨r_Àn
 = 
k
 + 1;

222 i‡(
k
 =
max_¨r_Àn
) {

223 
	`Ârötf
(
°dîr
, "build_num_arr:árrayÜengthÉxceeded\n");

228 
	}
}

236 
	$buûd_joöt_¨r
(c⁄° * 
fûe_«me
, 
uöt64_t
 * 
lba_¨r
, 
uöt32_t
 * 
num_¨r
,

237 * 
¨r_Àn
, 
max_¨r_Àn
)

239 
löe
[512];

240 
off
 = 0;

241 
ö_Àn
, 
k
, 
j
, 
m
, 
have_°dö
, 
öd
, 
bô0
;

242 * 
l˝
;

243 
FILE
 * 
Â
;

244 
öt64_t
 
Œ
;

246 
have_°dö
 = ((1 =
	`°æí
(
fûe_«me
)) && ('-' == file_name[0]));

247 i‡(
have_°dö
)

248 
Â
 = 
°dö
;

250 
Â
 = 
	`f›í
(
fûe_«me
, "r");

251 i‡(
NULL
 =
Â
) {

252 
	`Ârötf
(
°dîr
, "build_joint_arr: unableÅo open %s\n",

253 
fûe_«me
);

258 
j
 = 0; j < 512; ++j) {

259 i‡(
NULL
 =
	`fgës
(
löe
, ÷öe), 
Â
))

261 
ö_Àn
 = 
	`°æí
(
löe
);

262 i‡(
ö_Àn
 > 0) {

263 i‡('\n' =
löe
[
ö_Àn
 - 1]) {

264 --
ö_Àn
;

265 
löe
[
ö_Àn
] = '\0';

268 i‡(0 =
ö_Àn
)

270 
l˝
 = 
löe
;

271 
m
 = 
	`°r•n
(
l˝
, " \t");

272 i‡(
m
 =
ö_Àn
)

274 
l˝
 +
m
;

275 
ö_Àn
 -
m
;

276 i‡('#' =*
l˝
)

278 
k
 = 
	`°r•n
(
l˝
, "0123456789aAbBcCdDeEfFhHxX ,\t");

279 i‡((
k
 < 
ö_Àn
Ë&& ('#' !
l˝
[k])) {

280 
	`Ârötf
(
°dîr
, "build_joint_arr: syntaxÉrrorát "

281 "löê%d,Öo†%d\n", 
j
 + 1, 
m
 + 
k
 + 1);

284 
k
 = 0; k < 1024; ++k) {

285 
Œ
 = 
	`gë_Œnum
(
l˝
);

286 i‡(-1 !
Œ
) {

287 
öd
 = ((
off
 + 
k
) >> 1);

288 
bô0
 = 0x1 & (
off
 + 
k
);

289 i‡(
öd
 >
max_¨r_Àn
) {

290 
	`Ârötf
(
°dîr
, "build_joint_arr:árrayÜength "

294 i‡(
bô0
)

295 
num_¨r
[
öd
] = (
uöt32_t
)
Œ
;

297 
lba_¨r
[
öd
] = (
uöt64_t
)
Œ
;

298 
l˝
 = 
	`°Ωbrk
(lcp, " ,\t");

299 i‡(
NULL
 =
l˝
)

301 
l˝
 +
	`°r•n
(lcp, " ,\t");

302 i‡('\0' =*
l˝
)

305 i‡('#' =*
l˝
) {

306 --
k
;

309 
	`Ârötf
(
°dîr
, "build_joint_arr:Érror in "

310 "löê%d,áàpo†%d\n", 
j
 + 1,

311 ()(
l˝
 - 
löe
 + 1));

315 
off
 +(
k
 + 1);

317 i‡(0x1 & 
off
) {

318 
	`Ârötf
(
°dîr
, "build_joint_arr:Éxpect LBA,NUMÖairs but decoded "

319 "oddÇumbî\¿ from %s\n", 
have_°dö
 ? "°dö" : 
fûe_«me
);

322 *
¨r_Àn
 = 
off
 >> 1;

324 
	}
}

328 
	$maö
(
¨gc
, * 
¨gv
[])

330 
sg_fd
, 
ªs
, 
c
, 
num
, 
k
, 
j
;

331 
gΩnum
 = 0;

332 c⁄° * 
lba_›
 = 
NULL
;

333 c⁄° * 
num_›
 = 
NULL
;

334 c⁄° * 
ö_›
 = 
NULL
;

335 
addr_¨r_Àn
 = 0;

336 
num_¨r_Àn
 = 0;

337 
™ch‹
 = 0;

338 
timeout
 = 
DEF_TIMEOUT_SECS
;

339 
vîbo£
 = 0;

340 c⁄° * 
devi˚_«me
 = 
NULL
;

341 
uöt64_t
 
addr_¨r
[
MAX_NUM_ADDR
];

342 
uöt32_t
 
num_¨r
[
MAX_NUM_ADDR
];

343 
∑øm_¨r
[8 + (
MAX_NUM_ADDR
 * 16)];

344 
∑øm_Àn
 = 4;

345 
ªt
 = 0;

348 
›ti⁄_ödex
 = 0;

350 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "aghIHl:n:t:vV", 
l⁄g_›ti⁄s
,

351 &
›ti⁄_ödex
);

352 i‡(
c
 == -1)

355 
c
) {

357 ++
™ch‹
;

360 
num
 = 
	`ssˇnf
(
›èrg
, "%d", &
ªs
);

361 i‡((1 =
num
Ë&& ((
ªs
 < 0) || (res > 31)))

362 
gΩnum
 = 
ªs
;

364 
	`Ârötf
(
°dîr
, "value for '--grpnum=' must be 0Åo31\n");

365  
SG_LIB_SYNTAX_ERROR
;

370 
	`ußge
();

373 
ö_›
 = 
›èrg
;

376 
lba_›
 = 
›èrg
;

379 
num_›
 = 
›èrg
;

382 
timeout
 = 
	`sg_gë_num
(
›èrg
);

383 i‡(
timeout
 < 0) {

384 
	`Ârötf
(
°dîr
, "badárgumentÅo '--timeout'\n");

385  
SG_LIB_SYNTAX_ERROR
;

386 } i‡(0 =
timeout
)

387 
timeout
 = 
DEF_TIMEOUT_SECS
;

390 ++
vîbo£
;

393 
	`Ârötf
(
°dîr
, "vîsi⁄: %s\n", 
vîsi⁄_°r
);

396 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê0x%x ??\n", 
c
);

397 
	`ußge
();

398  
SG_LIB_SYNTAX_ERROR
;

401 i‡(
›töd
 < 
¨gc
) {

402 i‡(
NULL
 =
devi˚_«me
) {

403 
devi˚_«me
 = 
¨gv
[
›töd
];

404 ++
›töd
;

406 i‡(
›töd
 < 
¨gc
) {

407 ; 
›töd
 < 
¨gc
; ++optind)

408 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

409 
¨gv
[
›töd
]);

410 
	`ußge
();

411  
SG_LIB_SYNTAX_ERROR
;

414 i‡(
NULL
 =
devi˚_«me
) {

415 
	`Ârötf
(
°dîr
, "missing deviceÇame!\n");

416 
	`ußge
();

417  
SG_LIB_SYNTAX_ERROR
;

420 i‡(
ö_›
 && (
lba_›
 || 
num_›
)) {

421 
	`Ârötf
(
°dîr
, "expect '--in=' by itself, or both '--lba='ánd "

423 
	`ußge
();

424  
SG_LIB_SYNTAX_ERROR
;

425 } i‡(
ö_›
 || (
lba_›
 && 
num_›
))

428 i‡(
lba_›
)

429 
	`Ârötf
(
°dîr
, "since '--lba=' is given,álsoÇeed '--num='\n");

431 
	`Ârötf
(
°dîr
, "expectÉither both '--lba='ánd '--num=', or "

433 
	`ußge
();

434  
SG_LIB_SYNTAX_ERROR
;

437 
	`mem£t
(
addr_¨r
, 0, (addr_arr));

438 
	`mem£t
(
num_¨r
, 0, (num_arr));

439 
addr_¨r_Àn
 = 0;

440 i‡(
lba_›
 && 
num_›
) {

441 i‡(0 !
	`buûd_lba_¨r
(
lba_›
, 
addr_¨r
, &
addr_¨r_Àn
,

442 
MAX_NUM_ADDR
)) {

443 
	`Ârötf
(
°dîr
, "badárgumentÅo '--lba'\n");

444  
SG_LIB_SYNTAX_ERROR
;

446 i‡(0 !
	`buûd_num_¨r
(
num_›
, 
num_¨r
, &
num_¨r_Àn
,

447 
MAX_NUM_ADDR
)) {

448 
	`Ârötf
(
°dîr
, "badárgumentÅo '--num'\n");

449  
SG_LIB_SYNTAX_ERROR
;

451 i‡((
addr_¨r_Àn
 !
num_¨r_Àn
) || (num_arr_len <= 0)) {

452 
	`Ârötf
(
°dîr
, "need sameÇumber ofárgumentsÅo '--lba=' "

454  
SG_LIB_SYNTAX_ERROR
;

457 i‡(
ö_›
) {

458 i‡(0 !
	`buûd_joöt_¨r
(
ö_›
, 
addr_¨r
, 
num_¨r
, &
addr_¨r_Àn
,

459 
MAX_NUM_ADDR
)) {

460 
	`Ârötf
(
°dîr
, "badárgumentÅo '--in'\n");

461  
SG_LIB_SYNTAX_ERROR
;

463 i‡(
addr_¨r_Àn
 <= 0) {

464 
	`Ârötf
(
°dîr
, "noáddresses found in '--in='árgument, file: "

465 "%s\n", 
ö_›
);

466  
SG_LIB_SYNTAX_ERROR
;

469 
∑øm_Àn
 = 8 + (16 * 
addr_¨r_Àn
);

470 
	`mem£t
(
∑øm_¨r
, 0, 
∑øm_Àn
);

471 
k
 = 8;

472 
j
 = 0; j < 
addr_¨r_Àn
; ++j) {

473 
∑øm_¨r
[
k
++] = (
addr_¨r
[
j
] >> 56) & 0xff;

474 
∑øm_¨r
[
k
++] = (
addr_¨r
[
j
] >> 48) & 0xff;

475 
∑øm_¨r
[
k
++] = (
addr_¨r
[
j
] >> 40) & 0xff;

476 
∑øm_¨r
[
k
++] = (
addr_¨r
[
j
] >> 32) & 0xff;

477 
∑øm_¨r
[
k
++] = (
addr_¨r
[
j
] >> 24) & 0xff;

478 
∑øm_¨r
[
k
++] = (
addr_¨r
[
j
] >> 16) & 0xff;

479 
∑øm_¨r
[
k
++] = (
addr_¨r
[
j
] >> 8) & 0xff;

480 
∑øm_¨r
[
k
++] = 
addr_¨r
[
j
] & 0xff;

481 
∑øm_¨r
[
k
++] = (
num_¨r
[
j
] >> 24) & 0xff;

482 
∑øm_¨r
[
k
++] = (
num_¨r
[
j
] >> 16) & 0xff;

483 
∑øm_¨r
[
k
++] = (
num_¨r
[
j
] >> 8) & 0xff;

484 
∑øm_¨r
[
k
++] = 
num_¨r
[
j
] & 0xff;

485 
k
 += 4;

487 
k
 = 0;

488 
num
 = 
∑øm_Àn
 - 2;

489 
∑øm_¨r
[
k
++] = (
num
 >> 8) & 0xff;

490 
∑øm_¨r
[
k
++] = 
num
 & 0xff;

491 
num
 = 
∑øm_Àn
 - 8;

492 
∑øm_¨r
[
k
++] = (
num
 >> 8) & 0xff;

493 
∑øm_¨r
[
k
++] = 
num
 & 0xff;

496 
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 0 , 
vîbo£
);

497 i‡(
sg_fd
 < 0) {

498 
	`Ârötf
(
°dîr
, "›íÉº‹: %s: %s\n", 
devi˚_«me
,

499 
	`ß„_°ªº‹
(-
sg_fd
));

500  
SG_LIB_FILE_ERROR
;

503 
ªs
 = 
	`sg_Œ_unm≠_v2
(
sg_fd
, 
™ch‹
, 
gΩnum
, 
timeout
, 
∑øm_¨r
, 
∑øm_Àn
,

504 1, 
vîbo£
);

505 
ªt
 = 
ªs
;

506 i‡(
SG_LIB_CAT_NOT_READY
 =
ªs
) {

507 
	`Ârötf
(
°dîr
, "UNMAP failed, deviceÇotÑeady\n");

508 
îr_out
;

509 } i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
) {

510 
	`Ârötf
(
°dîr
, "UNMAP, unitáttention\n");

511 
îr_out
;

512 } i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
) {

513 
	`Ârötf
(
°dîr
, "UNMAP,áborted command\n");

514 
îr_out
;

515 } i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
) {

516 
	`Ârötf
(
°dîr
, "UNMAPÇot supported\n");

517 
îr_out
;

518 } i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
) {

519 
	`Ârötf
(
°dîr
, "bad field in UNMAP cdb\n");

520 
îr_out
;

521 } i‡(0 !
ªs
) {

522 
	`Ârötf
(
°dîr
, "UNMAP failed (use '-v'Åo get more information)\n");

523 
îr_out
;

526 
îr_out
:

527 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

528 i‡(
ªs
 < 0) {

529 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

530 i‡(0 =
ªt
)

531  
SG_LIB_FILE_ERROR
;

533  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

534 
	}
}

	@src/sg_verify.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<gë›t.h
>

14 
	#__STDC_FORMAT_MACROS
 1

	)

15 
	~<öây≥s.h
>

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

20 
	~"sg_lib.h
"

21 
	~"sg_cmds_basic.h
"

22 
	~"sg_cmds_exåa.h
"

36 c⁄° * 
	gvîsi⁄_°r
 = "1.19 20130507";

38 
	#ME
 "sg_vîify: "

	)

40 
	#EBUFF_SZ
 256

	)

43 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

62 
	$ußge
()

64 
	`Ârötf
(
°dîr
, "Usage: "

116 
	}
}

119 
	$maö
(
¨gc
, * 
¨gv
[])

121 
sg_fd
, 
ªs
, 
c
, 
num
, 
ƒód
, 
öfd
;

122 
öt64_t
 
Œ
;

123 
dpo
 = 0;

124 
bytchk
 = 0;

125 
ndo
 = 0;

126 *
ªf_d©a
 = 
NULL
;

127 
vΩrŸe˘
 = 0;

128 
öt64_t
 
cou¡
 = 1;

129 
öt64_t
 
‹ig_cou¡
;

130 
bpc
 = 128;

131 
bpc_giví
 = 0;

132 
gŸ_°dö
 = 0;

133 
group
 = 0;

134 
uöt64_t
 
lba
 = 0;

135 
uöt64_t
 
‹ig_lba
;

136 
ªad⁄ly
 = 0;

137 
vîbo£
 = 0;

138 
vîify16
 = 0;

139 c⁄° * 
devi˚_«me
 = 
NULL
;

140 c⁄° * 
fûe_«me
 = 
NULL
;

141 c⁄° * 
vc
;

142 
ªt
 = 0;

143 
öfo
 = 0;

144 
uöt64_t
 
öfo64
 = 0;

145 
ebuff
[
EBUFF_SZ
];

148 
›ti⁄_ödex
 = 0;

150 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "b:B:c:dE:g:hi:l:P:rSvV", 
l⁄g_›ti⁄s
,

151 &
›ti⁄_ödex
);

152 i‡(
c
 == -1)

155 
c
) {

157 
bpc
 = 
	`sg_gë_num
(
›èrg
);

158 i‡(
bpc
 < 1) {

159 
	`Ârötf
(
°dîr
, "badárgumentÅo '--bpc'\n");

160  
SG_LIB_SYNTAX_ERROR
;

162 ++
bpc_giví
;

165 
ndo
 = 
	`sg_gë_num
(
›èrg
);

166 i‡(
ndo
 < 1) {

167 
	`Ârötf
(
°dîr
, "badárgumentÅo '--bytchk'\n");

168  
SG_LIB_SYNTAX_ERROR
;

172 
cou¡
 = 
	`sg_gë_Œnum
(
›èrg
);

173 i‡(
cou¡
 < 0) {

174 
	`Ârötf
(
°dîr
, "badárgumentÅo '--count'\n");

175  
SG_LIB_SYNTAX_ERROR
;

179 
dpo
 = 1;

182 
bytchk
 = 
	`sg_gë_num
(
›èrg
);

183 i‡((
bytchk
 < 1) || (bytchk > 3)) {

184 
	`Ârötf
(
°dîr
, "badárgumentÅo '--ebytchk'\n");

185  
SG_LIB_SYNTAX_ERROR
;

189 
group
 = 
	`sg_gë_num
(
›èrg
);

190 i‡((
group
 < 0) || (group > 31)) {

191 
	`Ârötf
(
°dîr
, "badárgumentÅo '--group'\n");

192  
SG_LIB_SYNTAX_ERROR
;

197 
	`ußge
();

200 
fûe_«me
 = 
›èrg
;

203 
Œ
 = 
	`sg_gë_Œnum
(
›èrg
);

204 i‡(-1 =
Œ
) {

205 
	`Ârötf
(
°dîr
, "badárgumentÅo '--lba'\n");

206  
SG_LIB_SYNTAX_ERROR
;

208 
lba
 = (
uöt64_t
)
Œ
;

211 
vΩrŸe˘
 = 
	`sg_gë_num
(
›èrg
);

212 i‡(-1 =
vΩrŸe˘
) {

213 
	`Ârötf
(
°dîr
, "badárgumentÅo '--vrprotect'\n");

214  
SG_LIB_SYNTAX_ERROR
;

216 i‡((
vΩrŸe˘
 < 0) || (vrprotect > 7)) {

217 
	`Ârötf
(
°dîr
, "'--vrprotect'Ñequiresá value from 0Åo "

219  
SG_LIB_SYNTAX_ERROR
;

223 ++
ªad⁄ly
;

226 ++
vîify16
;

229 ++
vîbo£
;

232 
	`Ârötf
(
°dîr
, 
ME
 "vîsi⁄: %s\n", 
vîsi⁄_°r
);

235 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê0x%x ??\n", 
c
);

236 
	`ußge
();

237  
SG_LIB_SYNTAX_ERROR
;

240 i‡(
›töd
 < 
¨gc
) {

241 i‡(
NULL
 =
devi˚_«me
) {

242 
devi˚_«me
 = 
¨gv
[
›töd
];

243 ++
›töd
;

245 i‡(
›töd
 < 
¨gc
) {

246 ; 
›töd
 < 
¨gc
; ++optind)

247 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

248 
¨gv
[
›töd
]);

249 
	`ußge
();

250  
SG_LIB_SYNTAX_ERROR
;

253 i‡(
ndo
 > 0) {

254 i‡(0 =
bytchk
)

255 
bytchk
 = 1;

256 i‡(
bpc_giví
 && (
bpc
 !
cou¡
))

257 
	`Ârötf
(
°dîr
, "'bpc'árgument ignored, using --bpc=%"

258 
PRIu64
 "\n", 
cou¡
);

259 i‡(
cou¡
 > 0x7fffffffLL) {

260 
	`Ârötf
(
°dîr
, "countÉxceed 31 bits, wayÅooÜarge\n");

261  
SG_LIB_SYNTAX_ERROR
;

263 i‡((3 =
bytchk
Ë&& (1 !
cou¡
)) {

264 
	`Ârötf
(
°dîr
, "count must be 1 when bytchk=3\n");

265  
SG_LIB_SYNTAX_ERROR
;

267 
bpc
 = ()
cou¡
;

268 } i‡(
bytchk
 > 0) {

269 
	`Ârötf
(
°dîr
, "whenÅhe 'ebytchk=BVAL' option is given, "

271  
SG_LIB_SYNTAX_ERROR
;

274 i‡((
bpc
 > 0xffffË&& (0 =
vîify16
)) {

275 
	`Ârötf
(
°dîr
, "'%s'Éxceeds 65535, so use VERIFY(16)\n",

276 (
ndo
 > 0) ? "count" : "bpc");

277 ++
vîify16
;

279 i‡(((
lba
 + 
cou¡
 - 1Ë> 0xffffffffLLUË&& (0 =
vîify16
)) {

280 
	`Ârötf
(
°dîr
, "'lba'Éxceed 32 bits, so use VERIFY(16)\n");

281 ++
vîify16
;

283 i‡((
group
 > 0Ë&& (0 =
vîify16
))

284 
	`Ârötf
(
°dîr
, "groupÇumber ignored with VERIFY(10) command, "

287 
‹ig_cou¡
 = 
cou¡
;

288 
‹ig_lba
 = 
lba
;

290 i‡(
ndo
 > 0) {

291 
ªf_d©a
 = (*)
	`mÆloc
(
ndo
);

292 i‡(
NULL
 =
ªf_d©a
) {

293 
	`Ârötf
(
°dîr
, "ÁûedÅÿÆloˇã %d byã buf„r\n", 
ndo
);

294  
SG_LIB_FILE_ERROR
;

296 i‡((
NULL
 =
fûe_«me
Ë|| (0 =
	`°rcmp
(file_name, "-"))) {

297 ++
gŸ_°dö
;

298 
öfd
 = 
STDIN_FILENO
;

299 i‡(
	`sg_£t_bö¨y_mode
(
STDIN_FILENO
) < 0)

300 
	`≥º‹
("sg_set_binary_mode");

302 i‡((
öfd
 = 
	`›í
(
fûe_«me
, 
O_RDONLY
)) < 0) {

303 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

304 
ME
 "couldÇŸ o≥¿%†f‹Ñódög", 
fûe_«me
);

305 
	`≥º‹
(
ebuff
);

306 
ªt
 = 
SG_LIB_FILE_ERROR
;

307 
îr_out
;

308 } i‡(
	`sg_£t_bö¨y_mode
(
öfd
) < 0)

309 
	`≥º‹
("sg_set_binary_mode");

311 i‡(
vîbo£
 && 
gŸ_°dö
)

312 
	`Ârötf
(
°dîr
, "aboutÅo wait on STDIN\n");

313 
ƒód
 = 0;Çªad < 
ndo
;Çªad +
ªs
) {

314 
ªs
 = 
	`ªad
(
öfd
, 
ªf_d©a
 + 
ƒód
, 
ndo
 -Çread);

315 i‡(
ªs
 <= 0) {

316 
	`Ârötf
(
°dîr
, "reading from %s failedát file offset=%d\n",

317 (
gŸ_°dö
 ? "°dö" : 
fûe_«me
), 
ƒód
);

318 
ªt
 = 
SG_LIB_FILE_ERROR
;

319 
îr_out
;

322 i‡(! 
gŸ_°dö
)

323 
	`˛o£
(
öfd
);

326 i‡(
NULL
 =
devi˚_«me
) {

327 
	`Ârötf
(
°dîr
, "missing deviceÇame!\n");

328 
	`ußge
();

329 
ªt
 = 
SG_LIB_SYNTAX_ERROR
;

330 
îr_out
;

332 
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 
ªad⁄ly
, 
vîbo£
);

333 i‡(
sg_fd
 < 0) {

334 
	`Ârötf
(
°dîr
, 
ME
 "›íÉº‹: %s: %s\n", 
devi˚_«me
,

335 
	`ß„_°ªº‹
(-
sg_fd
));

336 
ªt
 = 
SG_LIB_FILE_ERROR
;

337 
îr_out
;

340 
vc
 = 
vîify16
 ? "VERIFY(16)" : "VERIFY(10)";

341 ; 
cou¡
 > 0; cou¡ -
bpc
, 
lba
 += bpc) {

342 
num
 = (
cou¡
 > 
bpc
) ? bpc : count;

343 i‡(
vîify16
)

344 
ªs
 = 
	`sg_Œ_vîify16
(
sg_fd
, 
vΩrŸe˘
, 
dpo
, 
bytchk
,

345 
lba
, 
num
, 
group
, 
ªf_d©a
,

346 
ndo
, &
öfo64
, 1, 
vîbo£
);

348 
ªs
 = 
	`sg_Œ_vîify10
(
sg_fd
, 
vΩrŸe˘
, 
dpo
, 
bytchk
,

349 ()
lba
, 
num
, 
ªf_d©a
,

350 
ndo
, &
öfo
, 1, 
vîbo£
);

351 i‡(0 !
ªs
) {

352 
ªt
 = 
ªs
;

353 
ªs
) {

354 
SG_LIB_CAT_NOT_READY
:

355 
	`Ârötf
(
°dîr
, "%†Áûed, devi˚ÇŸÑódy\n", 
vc
);

357 
SG_LIB_CAT_UNIT_ATTENTION
:

358 
	`Ârötf
(
°dîr
, "%s, unôáâíti⁄\n", 
vc
);

360 
SG_LIB_CAT_ABORTED_COMMAND
:

361 
	`Ârötf
(
°dîr
, "%s,áb‹ãd comm™d\n", 
vc
);

363 
SG_LIB_CAT_INVALID_OP
:

364 
	`Ârötf
(
°dîr
, "%†comm™dÇŸ suµ‹ãd\n", 
vc
);

366 
SG_LIB_CAT_ILLEGAL_REQ
:

367 
	`Ârötf
(
°dîr
, "bad fõld i¿%†cdb,Çó∏lba=0x%" 
PRIx64


368 "\n", 
vc
, 
lba
);

370 
SG_LIB_CAT_MEDIUM_HARD
:

371 
	`Ârötf
(
°dîr
, "%s medium or hardwareÉrrorÇear "

372 "lba=0x%" 
PRIx64
 "\n", 
vc
, 
lba
);

374 
SG_LIB_CAT_MEDIUM_HARD_WITH_INFO
:

375 i‡(
vîify16
)

376 
	`Ârötf
(
°dîr
, "%s medium or hardwareÉrror,Ñeported "

377 "lba=0x%" 
PRIx64
 "\n", 
vc
, 
öfo64
);

379 
	`Ârötf
(
°dîr
, "%s medium or hardwareÉrror,Ñeported "

380 "lba=0x%x\n", 
vc
, 
öfo
);

383 
	`Ârötf
(
°dîr
, "%†ÁûedÇó∏lba=%" 
PRIu64
 " [0x%" 
PRIx64


384 "]\n", 
vc
, 
lba
,Üba);

391 i‡(
vîbo£
 && (0 =
ªt
Ë&& (
‹ig_cou¡
 > 1))

392 
	`Ârötf
(
°dîr
, "Vîifõd %" 
PRId64
 " [0x%" 
PRIx64
 "] blocks from "

393 "lb®%" 
PRIu64
 " [0x%" 
PRIx64
 "]\n withoutÉrror\n",

394 
‹ig_cou¡
, (
uöt64_t
)‹ig_cou¡, 
‹ig_lba
, orig_lba);

396 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

397 i‡(
ªs
 < 0) {

398 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

399 i‡(0 =
ªt
)

400 
ªt
 = 
SG_LIB_FILE_ERROR
;

403 
îr_out
:

404 i‡(
ªf_d©a
)

405 
	`‰ì
(
ªf_d©a
);

406  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

407 
	}
}

	@src/sg_vpd.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<˘y≥.h
>

14 
	~<gë›t.h
>

15 
	#__STDC_FORMAT_MACROS
 1

	)

16 
	~<öây≥s.h
>

18 #ifde‡
HAVE_CONFIG_H


19 
	~"c⁄fig.h
"

21 
	~"sg_lib.h
"

22 
	~"sg_cmds_basic.h
"

33 c⁄° * 
	gvîsi⁄_°r
 = "0.67 20130517";

36 
svpd_íumî©e_víd‹
();

37 
svpd_decode_víd‹
(
sg_fd
, 
num_vpd
, 
subvÆue
,

38 
maxÀn
, 
do_hex
, 
do_øw
,

39 
do_l⁄g
, 
do_quõt
, 
vîbo£
);

40 c⁄° 
svpd_vÆues_«me_t
 *

41 
svpd_föd_víd‹_by_a¸⁄
(c⁄° * 
≠
);

45 
	#VPD_SUPPORTED_VPDS
 0x0

	)

46 
	#VPD_UNIT_SERIAL_NUM
 0x80

	)

47 
	#VPD_IMP_OP_DEF
 0x81

	)

48 
	#VPD_ASCII_OP_DEF
 0x82

	)

49 
	#VPD_DEVICE_ID
 0x83

	)

50 
	#VPD_SOFTW_INF_ID
 0x84

	)

51 
	#VPD_MAN_NET_ADDR
 0x85

	)

52 
	#VPD_EXT_INQ
 0x86

	)

53 
	#VPD_MODE_PG_POLICY
 0x87

	)

54 
	#VPD_SCSI_PORTS
 0x88

	)

55 
	#VPD_ATA_INFO
 0x89

	)

56 
	#VPD_POWER_CONDITION
 0x8a

	)

57 
	#VPD_DEVICE_CONSTITUENTS
 0x8b

	)

58 
	#VPD_CFA_PROFILE_INFO
 0x8c

	)

59 
	#VPD_POWER_CONSUMPTION
 0x8d

	)

60 
	#VPD_3PARTY_COPY
 0x8f

	)

61 
	#VPD_PROTO_LU
 0x90

	)

62 
	#VPD_PROTO_PORT
 0x91

	)

63 
	#VPD_BLOCK_LIMITS
 0xb0

	)

64 
	#VPD_SA_DEV_CAP
 0xb0

	)

65 
	#VPD_OSD_INFO
 0xb0

	)

66 
	#VPD_BLOCK_DEV_CHARS
 0xb1

	)

67 
	#VPD_MAN_ASS_SN
 0xb1

	)

68 
	#VPD_SECURITY_TOKEN
 0xb1

	)

69 
	#VPD_TA_SUPPORTED
 0xb2

	)

70 
	#VPD_LB_PROVISIONING
 0xb2

	)

71 
	#VPD_REFERRALS
 0xb3

	)

72 
	#VPD_AUTOMATION_DEV_SN
 0xb3

	)

73 
	#VPD_DTDE_ADDRESS
 0xb4

	)

74 
	#VPD_NOT_STD_INQ
 -2

	)

77 
	#VPD_ASSOC_LU
 0

	)

78 
	#VPD_ASSOC_TPORT
 1

	)

79 
	#VPD_ASSOC_TDEVICE
 2

	)

83 
	#VPD_DI_SEL_LU
 1

	)

84 
	#VPD_DI_SEL_TPORT
 2

	)

85 
	#VPD_DI_SEL_TARGET
 4

	)

86 
	#VPD_DI_SEL_AS_IS
 32

	)

89 
	#DEF_ALLOC_LEN
 252

	)

90 
	#MX_ALLOC_LEN
 (0xc000 + 0x80)

	)

91 
	#VPD_ATA_INFO_LEN
 572

	)

96 
	ssvpd_vÆues_«me_t
 {

97 
	mvÆue
;

98 
	msubvÆue
;

99 
	mpdt
;

101 
	mvíd‹
;

102 c⁄° * 
	ma¸⁄
;

103 c⁄° * 
	m«me
;

107 
	gr•_buff
[
MX_ALLOC_LEN
 + 2];

109 
decode_dev_ids
(c⁄° * 
¥öt_if_found
, * 
buff
,

110 
Àn
, 
m_assoc
, 
m_desig_ty≥
,

111 
m_code_£t
, 
l⁄g_out
, 
quõt
);

112 
decode_å™•‹t_id
(c⁄° * 
Àadö
, * 
u˝
,

113 
Àn
);

115 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

116 {"íumî©e", 
no_¨gumít
, 0, 'e'},

117 {"hñp", 
no_¨gumít
, 0, 'h'},

118 {"hex", 
no_¨gumít
, 0, 'H'},

119 {"idít", 
no_¨gumít
, 0, 'i'},

120 {"l⁄g", 
no_¨gumít
, 0, 'l'},

121 {"maxÀn", 
ªquúed_¨gumít
, 0, 'm'},

122 {"∑ge", 
ªquúed_¨gumít
, 0, 'p'},

123 {"quõt", 
no_¨gumít
, 0, 'q'},

124 {"øw", 
no_¨gumít
, 0, 'r'},

125 {"vîbo£", 
no_¨gumít
, 0, 'v'},

126 {"vîsi⁄", 
no_¨gumít
, 0, 'V'},

132 
svpd_vÆues_«me_t
 
	g°™d¨d_vpd_pg
[] = {

133 {
VPD_ATA_INFO
, 0, -1, 0, "ai", "ATA information (SAT)"},

134 {
VPD_ASCII_OP_DEF
, 0, -1, 0, "aod",

136 {
VPD_AUTOMATION_DEV_SN
, 0, 1, 0, "adsn", "Automation device serial "

138 {
VPD_BLOCK_LIMITS
, 0, 0, 0, "bl", "BlockÜimits (SBC)"},

139 {
VPD_BLOCK_DEV_CHARS
, 0, 0, 0, "bdc", "Block device characteristics "

141 {
VPD_CFA_PROFILE_INFO
, 0, 0, 0, "cfa", "CFAÖrofile information"},

142 {
VPD_DEVICE_CONSTITUENTS
, 0, 1, 0, "dc", "Device constituents"},

143 {
VPD_DEVICE_ID
, 0, -1, 0, "di", "Device identification"},

144 {
VPD_DEVICE_ID
, 
VPD_DI_SEL_AS_IS
, -1, 0, "di_asis", "Like 'di' "

146 {
VPD_DEVICE_ID
, 
VPD_DI_SEL_LU
, -1, 0, "di_lu", "Device identification, "

148 {
VPD_DEVICE_ID
, 
VPD_DI_SEL_TPORT
, -1, 0, "di_port", "Device "

150 {
VPD_DEVICE_ID
, 
VPD_DI_SEL_TARGET
, -1, 0, "di_target", "Device "

152 {
VPD_DTDE_ADDRESS
, 0, 1, 0, "dtde",

154 {
VPD_EXT_INQ
, 0, -1, 0, "ei", "Extended inquiry data"},

155 {
VPD_IMP_OP_DEF
, 0, -1, 0, "iod",

157 {
VPD_LB_PROVISIONING
, 0, 0, 0, "lbpv",

159 {
VPD_MAN_ASS_SN
, 0, 1, 0, "mas",

161 {
VPD_MAN_ASS_SN
, 0, 0x12, 0, "masa",

163 {
VPD_MAN_NET_ADDR
, 0, -1, 0, "mna", "ManagementÇetworkáddresses"},

164 {
VPD_MODE_PG_POLICY
, 0, -1, 0, "mpp", "ModeÖageÖolicy"},

165 {
VPD_OSD_INFO
, 0, 0x11, 0, "oi", "OSD information"},

166 {
VPD_POWER_CONDITION
, 0, -1, 0, "pc", "Power condition"},

167 {
VPD_POWER_CONSUMPTION
, 0, -1, 0, "psm", "Power consumption"},

168 {
VPD_PROTO_LU
, 0, 0x0, 0, "pslu", "Protocol-specificÜogical unit "

170 {
VPD_PROTO_PORT
, 0, 0x0, 0, "pspo", "Protocol-specificÖort information"},

171 {
VPD_REFERRALS
, 0, 0, 0, "ref", "Referrals (SBC)"},

172 {
VPD_SA_DEV_CAP
, 0, 1, 0, "sad",

174 {
VPD_SOFTW_INF_ID
, 0, -1, 0, "sii", "Software interface identification"},

175 {
VPD_NOT_STD_INQ
, 0, -1, 0, "sinq", "Standard inquiryÑesponse"},

176 {
VPD_UNIT_SERIAL_NUM
, 0, -1, 0, "sn", "Unit serialÇumber"},

177 {
VPD_SCSI_PORTS
, 0, -1, 0, "sp", "SCSIÖorts"},

178 {
VPD_SECURITY_TOKEN
, 0, 0x11, 0, "st", "SecurityÅoken (OSD)"},

179 {
VPD_SUPPORTED_VPDS
, 0, -1, 0, "sv", "Supported VPDÖages"},

180 {
VPD_TA_SUPPORTED
, 0, 1, 0, "tas", "TapeAlert supported flags (SSC)"},

181 {
VPD_3PARTY_COPY
, 0, -1, 0, "tpc", "ThirdÖarty copy"},

182 {0, 0, 0, 0, 
NULL
, NULL},

186 
	$ußge
()

188 
	`Ârötf
(
°dîr
,

194 
	`Ârötf
(
°dîr
,

217 
	}
}

219 c⁄° 
svpd_vÆues_«me_t
 *

220 
	$sdp_gë_vpd_dëaû
(
∑ge_num
, 
subvÆue
, 
pdt
)

222 c⁄° 
svpd_vÆues_«me_t
 * 
v≈
;

223 
sv
, 
ty
;

225 
sv
 = (
subvÆue
 < 0) ? 1 : 0;

226 
ty
 = (
pdt
 < 0) ? 1 : 0;

227 
v≈
 = 
°™d¨d_vpd_pg
; v≈->
a¸⁄
; ++vnp) {

228 i‡((
∑ge_num
 =
v≈
->
vÆue
) &&

229 (
sv
 || (
subvÆue
 =
v≈
->subvalue)) &&

230 (
ty
 || (
pdt
 =
v≈
->pdt)))

231  
v≈
;

233 i‡(! 
ty
)

234  
	`sdp_gë_vpd_dëaû
(
∑ge_num
, 
subvÆue
, -1);

235 i‡(! 
sv
)

236  
	`sdp_gë_vpd_dëaû
(
∑ge_num
, -1, -1);

237  
NULL
;

238 
	}
}

240 c⁄° 
svpd_vÆues_«me_t
 *

241 
	$sdp_föd_vpd_by_a¸⁄
(c⁄° * 
≠
)

243 c⁄° 
svpd_vÆues_«me_t
 * 
v≈
;

245 
v≈
 = 
°™d¨d_vpd_pg
; v≈->
a¸⁄
; ++vnp) {

246 i‡(0 =
	`°rcmp
(
v≈
->
a¸⁄
, 
≠
))

247  
v≈
;

249  
NULL
;

250 
	}
}

253 
	$íumî©e_vpds
(
°™d¨d
, 
víd‹
)

255 c⁄° 
svpd_vÆues_«me_t
 * 
v≈
;

257 i‡(
°™d¨d
) {

258 
v≈
 = 
°™d¨d_vpd_pg
; v≈->
a¸⁄
; ++vnp) {

259 i‡(
v≈
->
«me
 && (0 =v≈->
víd‹
)) {

260 i‡(
v≈
->
vÆue
 < 0)

261 
	`¥ötf
(" %-10†-1 %s\n", 
v≈
->
a¸⁄
, v≈->
«me
);

263 
	`¥ötf
(" %-10†0x%02x %s\n", 
v≈
->
a¸⁄
, v≈->
vÆue
,

264 
v≈
->
«me
);

268 i‡(
víd‹
)

269 
	`svpd_íumî©e_víd‹
();

270 
	}
}

273 
	$dSåRaw
(c⁄° * 
°r
, 
Àn
)

275 
k
;

277 
k
 = 0 ; k < 
Àn
; ++k)

278 
	`¥ötf
("%c", 
°r
[
k
]);

279 
	}
}

282 c⁄° * 
	gsg_™si_vîsi⁄_¨r
[] =

303 
	$decode_°d_öq
(* 
b
, 
Àn
, 
vîbo£
)

305 
pquÆ
, 
n
;

307 i‡(
Àn
 < 4)

309 
pquÆ
 = (
b
[0] & 0xe0) >> 5;

310 i‡(0 =
pquÆ
)

311 
	`¥ötf
("standard INQUIRY:\n");

312 i‡(1 =
pquÆ
)

313 
	`¥ötf
("standard INQUIRY: [qualifier indicatesÇo connected "

315 i‡(3 =
pquÆ
)

316 
	`¥ötf
("standard INQUIRY: [qualifier indicatesÇot capable "

319 
	`¥ötf
("standard INQUIRY: [reserved or vendor specific "

320 "quÆifõ∏[%d]]\n", 
pquÆ
);

321 
	`¥ötf
(" PQual=%d Device_type=%d RMB=%d version=0x%02x ",

322 
pquÆ
, 
b
[0] & 0x1f, !!(b[1] & 0x80), ()b[2]);

323 
	`¥ötf
(" [%s]\n", 
sg_™si_vîsi⁄_¨r
[
b
[2] & 0xf]);

324 
	`¥ötf
(" [AERC=%d] [TrmTsk=%d] NormACA=%d HiSUP=%d "

326 !!(
b
[3] & 0x80), !!(b[3] & 0x40), !!(b[3] & 0x20),

327 !!(
b
[3] & 0x10), b[3] & 0x0f);

328 i‡(
Àn
 < 5)

330 
n
 = 
b
[4] + 5;

331 i‡(
vîbo£
)

332 
	`Ârötf
(
°dîr
, ">>Ñequested %d bytes, %d bytesávailable\n",

333 
Àn
, 
n
);

334 
	`¥ötf
(" SCCS=%d ACC=%d TPGS=%d 3PC=%d Protect=%d ",

335 !!(
b
[5] & 0x80), !!(b[5] & 0x40), ((b[5] & 0x30) >> 4),

336 !!(
b
[5] & 0x08), !!(b[5] & 0x01));

337 
	`¥ötf
(" [BQue=%d]\¿ EncSîv=%d ", !!(
b
[6] & 0x80), !!(b[6] & 0x40));

338 i‡(
b
[6] & 0x10)

339 
	`¥ötf
("Mu…iP=1 (VS=%dË ", !!(
b
[6] & 0x20));

341 
	`¥ötf
("MultiP=0 ");

342 
	`¥ötf
("[MChngr=%d] [ACKREQQ=%d] Addr16=%d\n [RelAdr=%d] ",

343 !!(
b
[6] & 0x08), !!(b[6] & 0x04), !!(b[6] & 0x01),

344 !!(
b
[7] & 0x80));

345 
	`¥ötf
("WBus16=%d Sync=%d Linked=%d [TranDis=%d] ",

346 !!(
b
[7] & 0x20), !!(b[7] & 0x10), !!(b[7] & 0x08),

347 !!(
b
[7] & 0x04));

348 
	`¥ötf
("CmdQue=%d\n", !!(
b
[7] & 0x02));

349 i‡(
Àn
 < 36)

351 
	`¥ötf
(" Víd‹_idítifiˇti⁄: %.8s\n", 
b
 + 8);

352 
	`¥ötf
(" Produ˘_idítifiˇti⁄: %.16s\n", 
b
 + 16);

353 
	`¥ötf
(" Produ˘_ªvisi⁄_Àvñ: %.4s\n", 
b
 + 32);

354 
	}
}

356 c⁄° * 
	gassoc_¨r
[] =

365 
	$decode_id_vpd
(* 
buff
, 
Àn
, 
subvÆue
, 
do_l⁄g
,

366 
do_quõt
)

368 
m_a
, 
m_d
, 
m_cs
;

370 i‡(
Àn
 < 4) {

371 
	`Ârötf
(
°dîr
, "Device identification VPDÖageÜengthÅoo "

372 "sh‹t=%d\n", 
Àn
);

375 
m_a
 = -1;

376 
m_d
 = -1;

377 
m_cs
 = -1;

378 i‡(0 =
subvÆue
) {

379 
	`decode_dev_ids
(
assoc_¨r
[
VPD_ASSOC_LU
], 
buff
 + 4, 
Àn
 - 4,

380 
VPD_ASSOC_LU
, 
m_d
, 
m_cs
, 
do_l⁄g
, 
do_quõt
);

381 
	`decode_dev_ids
(
assoc_¨r
[
VPD_ASSOC_TPORT
], 
buff
 + 4, 
Àn
 - 4,

382 
VPD_ASSOC_TPORT
, 
m_d
, 
m_cs
, 
do_l⁄g
, 
do_quõt
);

383 
	`decode_dev_ids
(
assoc_¨r
[
VPD_ASSOC_TDEVICE
], 
buff
 + 4, 
Àn
 - 4,

384 
VPD_ASSOC_TDEVICE
, 
m_d
, 
m_cs
, 
do_l⁄g
, 
do_quõt
);

385 } i‡(
VPD_DI_SEL_AS_IS
 =
subvÆue
)

386 
	`decode_dev_ids
(
NULL
, 
buff
 + 4, 
Àn
 - 4, 
m_a
, 
m_d
, 
m_cs
, 
do_l⁄g
,

387 
do_quõt
);

389 i‡(
VPD_DI_SEL_LU
 & 
subvÆue
)

390 
	`decode_dev_ids
(
assoc_¨r
[
VPD_ASSOC_LU
], 
buff
 + 4, 
Àn
 - 4,

391 
VPD_ASSOC_LU
, 
m_d
, 
m_cs
, 
do_l⁄g
, 
do_quõt
);

392 i‡(
VPD_DI_SEL_TPORT
 & 
subvÆue
)

393 
	`decode_dev_ids
(
assoc_¨r
[
VPD_ASSOC_TPORT
], 
buff
 + 4, 
Àn
 - 4,

394 
VPD_ASSOC_TPORT
, 
m_d
, 
m_cs
, 
do_l⁄g
, 
do_quõt
);

395 i‡(
VPD_DI_SEL_TARGET
 & 
subvÆue
)

396 
	`decode_dev_ids
(
assoc_¨r
[
VPD_ASSOC_TDEVICE
], 
buff
 + 4, 
Àn
 - 4,

397 
VPD_ASSOC_TDEVICE
, 
m_d
, 
m_cs
, 
do_l⁄g
, 
do_quõt
);

399 
	}
}

401 c⁄° * 
	g√tw‹k_£rvi˚_ty≥_¨r
[] =

421 
	$decode_√t_m™_vpd
(* 
buff
, 
Àn
, 
do_hex
)

423 
k
, 
bump
, 
«_Àn
;

424 * 
u˝
;

426 i‡(1 =
do_hex
) {

427 
	`dSåHex
((c⁄° *)
buff
, 
Àn
, 1);

430 i‡(
Àn
 < 4) {

431 
	`Ârötf
(
°dîr
, "ManagementÇetworkáddresses VPDÖageÜengthÅoo "

432 "sh‹t=%d\n", 
Àn
);

435 
Àn
 -= 4;

436 
u˝
 = 
buff
 + 4;

437 
k
 = 0; k < 
Àn
; k +
bump
, 
u˝
 += bump) {

438 
	`¥ötf
(" %s, ServiceÅype: %s\n",

439 
assoc_¨r
[(
u˝
[0] >> 5) & 0x3],

440 
√tw‹k_£rvi˚_ty≥_¨r
[
u˝
[0] & 0x1f]);

441 
«_Àn
 = (
u˝
[2] << 8) + ucp[3];

442 
bump
 = 4 + 
«_Àn
;

443 i‡((
k
 + 
bump
Ë> 
Àn
) {

444 
	`Ârötf
(
°dîr
, "ManagementÇetworkáddresses VPDÖage, short "

445 "des¸ùt‹Üígth=%d,Üe·=%d\n", 
bump
, (
Àn
 - 
k
));

448 i‡(
«_Àn
 > 0) {

449 i‡(
do_hex
 > 1) {

450 
	`¥ötf
(" Networkáddress:\n");

451 
	`dSåHex
((c⁄° *)(
u˝
 + 4), 
«_Àn
, 0);

453 
	`¥ötf
(" %s\n", 
u˝
 + 4);

456 
	}
}

458 c⁄° * 
	gmode_∑ge_pﬁicy_¨r
[] =

468 
	$decode_mode_pﬁicy_vpd
(* 
buff
, 
Àn
, 
do_hex
)

470 
k
, 
bump
;

471 * 
u˝
;

473 i‡(1 =
do_hex
) {

474 
	`dSåHex
((c⁄° *)
buff
, 
Àn
, 1);

477 i‡(
Àn
 < 4) {

478 
	`Ârötf
(
°dîr
, "ModeÖageÖolicy VPDÖageÜengthÅoo short=%d\n",

479 
Àn
);

482 
Àn
 -= 4;

483 
u˝
 = 
buff
 + 4;

484 
k
 = 0; k < 
Àn
; k +
bump
, 
u˝
 += bump) {

485 
bump
 = 4;

486 i‡((
k
 + 
bump
Ë> 
Àn
) {

487 
	`Ârötf
(
°dîr
, "ModeÖageÖolicy VPDÖage, short "

488 "des¸ùt‹Üígth=%d,Üe·=%d\n", 
bump
, (
Àn
 - 
k
));

491 i‡(
do_hex
 > 1)

492 
	`dSåHex
((c⁄° *)
u˝
, 4, 1);

494 
	`¥ötf
(" PﬁicyÖagêcode: 0x%x", (
u˝
[0] & 0x3f));

495 i‡(
u˝
[1])

496 
	`¥ötf
(", sub∑gêcode: 0x%x\n", 
u˝
[1]);

498 
	`¥ötf
("\n");

499 
	`¥ötf
(" MLUS=%d, Pﬁicy: %s\n", !!(
u˝
[2] & 0x80),

500 
mode_∑ge_pﬁicy_¨r
[
u˝
[2] & 0x3]);

503 
	}
}

507 
	$decode_scsi_p‹ts_vpd
(* 
buff
, 
Àn
, 
do_hex
, 
do_l⁄g
,

508 
do_quõt
)

510 
k
, 
bump
, 
ªl_p‹t
, 
ù_tid_Àn
, 
çd_Àn
;

511 * 
u˝
;

513 i‡(1 =
do_hex
) {

514 
	`dSåHex
((c⁄° *)
buff
, 
Àn
, 1);

517 i‡(
Àn
 < 4) {

518 
	`Ârötf
(
°dîr
, "SCSI P‹t†VPDÖagêÀngthÅoÿsh‹t=%d\n", 
Àn
);

521 
Àn
 -= 4;

522 
u˝
 = 
buff
 + 4;

523 
k
 = 0; k < 
Àn
; k +
bump
, 
u˝
 += bump) {

524 
ªl_p‹t
 = (
u˝
[2] << 8) + ucp[3];

525 
	`¥ötf
("Rñ©ivêp‹t=%d\n", 
ªl_p‹t
);

526 
ù_tid_Àn
 = (
u˝
[6] << 8) + ucp[7];

527 
bump
 = 8 + 
ù_tid_Àn
;

528 i‡((
k
 + 
bump
Ë> 
Àn
) {

529 
	`Ârötf
(
°dîr
, "SCSI Ports VPDÖage, short descriptor "

530 "Àngth=%d,Üe·=%d\n", 
bump
, (
Àn
 - 
k
));

533 i‡(
ù_tid_Àn
 > 0) {

534 i‡(
do_hex
 > 1) {

535 
	`¥ötf
(" InitiatorÖortÅransport id:\n");

536 
	`dSåHex
((c⁄° *)(
u˝
 + 8), 
ù_tid_Àn
, 1);

538 
	`decode_å™•‹t_id
(" ", 
u˝
 + 8, 
ù_tid_Àn
);

540 
çd_Àn
 = (
u˝
[
bump
 + 2] << 8) + ucp[bump + 3];

541 i‡((
k
 + 
bump
 + 
çd_Àn
 + 4Ë> 
Àn
) {

542 
	`Ârötf
(
°dîr
, "SCSI Ports VPDÖage, short descriptor(tgt) "

543 "Àngth=%d,Üe·=%d\n", 
bump
, (
Àn
 - 
k
));

546 i‡(
çd_Àn
 > 0) {

547 i‡(
do_hex
 > 1) {

548 
	`¥ötf
(" TargetÖort descriptor(s):\n");

549 
	`dSåHex
((c⁄° *)(
u˝
 + 
bump
 + 4), 
çd_Àn
, 1);

551 i‡((0 =
do_quõt
Ë|| (
ù_tid_Àn
 > 0))

552 
	`¥ötf
(" TargetÖort descriptor(s):\n");

553 
	`decode_dev_ids
("SCSI P‹ts", 
u˝
 + 
bump
 + 4, 
çd_Àn
,

554 
VPD_ASSOC_TPORT
, -1, -1, 
do_l⁄g
, 
do_quõt
);

557 
bump
 +
çd_Àn
 + 4;

559 
	}
}

561 c⁄° * 
	gcode_£t_¨r
[] =

572 c⁄° * 
	gdesig_ty≥_¨r
[] =

592 
	$decode_dev_ids_quõt
(* 
buff
, 
Àn
, 
m_assoc
,

593 
m_desig_ty≥
, 
m_code_£t
)

595 
m
, 
p_id
, 
c_£t
, 
piv
, 
desig_ty≥
, 
i_Àn
, 
«a
, 
off
, 
u
;

596 
assoc
, 
is_ßs
, 
πp
;

597 c⁄° * 
u˝
;

598 c⁄° * 
ù
;

599 
ßs_ç‹t_addr
[8];

601 
πp
 = 0;

602 
	`mem£t
(
ßs_ç‹t_addr
, 0, (sas_tport_addr));

603 
off
 = -1;

604 i‡(
buff
[2] != 0) {

605 i‡(
m_assoc
 !
VPD_ASSOC_LU
)

607 
ù
 = 
buff
;

608 
p_id
 = 0;

609 
c_£t
 = 1;

610 
assoc
 = 
VPD_ASSOC_LU
;

611 
piv
 = 0;

612 
is_ßs
 = 0;

613 
desig_ty≥
 = 3;

614 
i_Àn
 = 16;

615 
off
 = 16;

616 
decode
;

618 (
u
 = 
	`sg_vpd_dev_id_ôî
(
buff
, 
Àn
, &
off
, 
m_assoc
, 
m_desig_ty≥
,

619 
m_code_£t
)) == 0) {

620 
u˝
 = 
buff
 + 
off
;

621 
i_Àn
 = 
u˝
[3];

622 i‡((
off
 + 
i_Àn
 + 4Ë> 
Àn
) {

623 
	`Ârötf
(
°dîr
, " VPDÖageÉrror: designatorÜengthÜonger "

624 "th™\¿ÑemaöögÑe•⁄£Üígth=%d\n", (
Àn
 - 
off
));

625  
SG_LIB_CAT_MALFORMED
;

627 
ù
 = 
u˝
 + 4;

628 
p_id
 = ((
u˝
[0] >> 4) & 0xf);

629 
c_£t
 = (
u˝
[0] & 0xf);

630 
piv
 = ((
u˝
[1] & 0x80) ? 1 : 0);

631 
is_ßs
 = (
piv
 && (6 =
p_id
)) ? 1 : 0;

632 
assoc
 = ((
u˝
[1] >> 4) & 0x3);

633 
desig_ty≥
 = (
u˝
[1] & 0xf);

634 
decode
:

635 
desig_ty≥
) {

641 i‡((8 !
i_Àn
) && (12 != i_len) && (16 != i_len))

642 
	`Ârötf
(
°dîr
, " <<Éxpect 8, 12ánd 16 byte "

643 "EUI, gŸ %d>>\n", 
i_Àn
);

644 
	`¥ötf
("0x");

645 
m
 = 0; m < 
i_Àn
; ++m)

646 
	`¥ötf
("%02x", ()
ù
[
m
]);

647 
	`¥ötf
("\n");

650 i‡(1 !
c_£t
) {

651 
	`Ârötf
(
°dîr
, " << unexpected code set %d for "

652 "NAA>>\n", 
c_£t
);

653 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

656 
«a
 = (
ù
[0] >> 4) & 0xff;

657 i‡((
«a
 < 2) || (naa > 6) || (4 ==Çaa)) {

658 
	`Ârötf
(
°dîr
, " << u√x≥˘ed NAA [0x%x]>>\n", 
«a
);

659 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

662 i‡(2 =
«a
) {

663 i‡(8 !
i_Àn
) {

664 
	`Ârötf
(
°dîr
, " << unexpected NAA 2 identifier "

665 "Àngth: 0x%x>>\n", 
i_Àn
);

666 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

669 
	`¥ötf
("0x");

670 
m
 = 0; m < 8; ++m)

671 
	`¥ötf
("%02x", ()
ù
[
m
]);

672 
	`¥ötf
("\n");

673 } i‡((3 =
«a
) || (5 ==Çaa)) {

675 i‡(8 !
i_Àn
) {

676 
	`Ârötf
(
°dîr
, " << unexpected NAA 3 or 5 "

677 "idítifõ∏Àngth: 0x%x>>\n", 
i_Àn
);

678 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

681 i‡((0 =
is_ßs
Ë|| (1 !
assoc
)) {

682 
	`¥ötf
("0x");

683 
m
 = 0; m < 8; ++m)

684 
	`¥ötf
("%02x", ()
ù
[
m
]);

685 
	`¥ötf
("\n");

686 } i‡(
πp
) {

687 
	`¥ötf
("0x");

688 
m
 = 0; m < 8; ++m)

689 
	`¥ötf
("%02x", ()
ù
[
m
]);

690 
	`¥ötf
(",0x%x\n", 
πp
);

691 
πp
 = 0;

693 i‡(
ßs_ç‹t_addr
[0]) {

694 
	`¥ötf
("0x");

695 
m
 = 0; m < 8; ++m)

696 
	`¥ötf
("%02x", ()
ßs_ç‹t_addr
[
m
]);

697 
	`¥ötf
("\n");

699 
	`mem˝y
(
ßs_ç‹t_addr
, 
ù
, (sas_tport_addr));

701 } i‡(6 =
«a
) {

702 i‡(16 !
i_Àn
) {

703 
	`Ârötf
(
°dîr
, " << unexpected NAA 6 identifier "

704 "Àngth: 0x%x>>\n", 
i_Àn
);

705 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

708 
	`¥ötf
("0x");

709 
m
 = 0; m < 16; ++m)

710 
	`¥ötf
("%02x", ()
ù
[
m
]);

711 
	`¥ötf
("\n");

715 i‡((0 =
is_ßs
Ë|| (1 !
c_£t
Ë|| (1 !
assoc
Ë|| (4 !
i_Àn
))

717 
πp
 = ((
ù
[2] << 8) | ip[3]);

718 i‡(
ßs_ç‹t_addr
[0]) {

719 
	`¥ötf
("0x");

720 
m
 = 0; m < 8; ++m)

721 
	`¥ötf
("%02x", ()
ßs_ç‹t_addr
[
m
]);

722 
	`¥ötf
(",0x%x\n", 
πp
);

723 
	`mem£t
(
ßs_ç‹t_addr
, 0, (sas_tport_addr));

724 
πp
 = 0;

734 i‡(3 !
c_£t
) {

735 
	`Ârötf
(
°dîr
, " <<Éxpected UTF-8 code_set>>\n");

736 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

743 
	`¥ötf
("%s\n", (c⁄° *)
ù
);

751 i‡(
ßs_ç‹t_addr
[0]) {

752 
	`¥ötf
("0x");

753 
m
 = 0; m < 8; ++m)

754 
	`¥ötf
("%02x", ()
ßs_ç‹t_addr
[
m
]);

755 
	`¥ötf
("\n");

757 i‡(-2 =
u
) {

758 
	`Ârötf
(
°dîr
, "VPDÖageÉrror: short designatoráround "

759 "off£à%d\n", 
off
);

760  
SG_LIB_CAT_MALFORMED
;

763 
	}
}

766 
	$decode_desig«ti⁄_des¸ùt‹
(c⁄° * 
ù
, 
i_Àn
,

767 
p_id
, 
c_£t
, 
piv
, 
assoc
,

768 
desig_ty≥
, 
l⁄g_out
, 
¥öt_assoc
)

770 
m
, 
ci_off
, 
c_id
, 
d_id
, 
«a
;

771 
vsi
, 
k
;

772 
uöt64_t
 
v£i
;

773 
uöt64_t
 
id_ext
;

774 
b
[64];

776 i‡(
¥öt_assoc
)

777 
	`¥ötf
(" %s:\n", 
assoc_¨r
[
assoc
]);

778 
	`¥ötf
(" designatorÅype: %s, code set: %s\n",

779 
desig_ty≥_¨r
[
desig_ty≥
], 
code_£t_¨r
[
c_£t
]);

780 i‡(
piv
 && ((1 =
assoc
) || (2 ==ássoc)))

781 
	`¥ötf
("Åransport: %s\n",

782 
	`sg_gë_å™s_¥Ÿo_°r
(
p_id
, (
b
), b));

784 
desig_ty≥
) {

786 
k
 = 0;

787 i‡((1 =
c_£t
) || (2 == c_set)) {

788 
k
 = 0; (k < 
i_Àn
Ë&& 
	`i•röt
(
ù
[k]); ++k)

790 i‡(
k
 >
i_Àn
)

791 
k
 = 1;

793 i‡(
k
)

794 
	`¥ötf
(" víd‹ s≥cific: %.*s\n", 
i_Àn
, 
ù
);

796 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

799 
	`¥ötf
(" víd‹ id: %.8s\n", 
ù
);

800 i‡(
i_Àn
 > 8)

801 
	`¥ötf
(" víd‹ s≥cific: %.*s\n", 
i_Àn
 - 8, 
ù
 + 8);

804 i‡(! 
l⁄g_out
) {

805 i‡((8 !
i_Àn
) && (12 != i_len) && (16 != i_len)) {

806 
	`Ârötf
(
°dîr
, " <<Éxpect 8, 12ánd 16 byte "

807 "EUI, gŸ %d>>\n", 
i_Àn
);

808 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

811 
	`¥ötf
(" 0x");

812 
m
 = 0; m < 
i_Àn
; ++m)

813 
	`¥ötf
("%02x", ()
ù
[
m
]);

814 
	`¥ötf
("\n");

817 
	`¥ötf
(" EUI-64 ba£d %d byã idítifõr\n", 
i_Àn
);

818 i‡(1 !
c_£t
) {

819 
	`Ârötf
(
°dîr
, " <<Éxpected binary code_set (1)>>\n");

820 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

823 
ci_off
 = 0;

824 i‡(16 =
i_Àn
) {

825 
ci_off
 = 8;

826 
id_ext
 = 0;

827 
m
 = 0; m < 8; ++m) {

828 i‡(
m
 > 0)

829 
id_ext
 <<= 8;

830 
id_ext
 |
ù
[
m
];

832 
	`¥ötf
(" Idítifõ∏exãnsi⁄: 0x%" 
PRIx64
 "\n", 
id_ext
);

833 } i‡((8 !
i_Àn
) && (12 != i_len)) {

834 
	`Ârötf
(
°dîr
, " << can only decode 8, 12ánd 16 "

836 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

839 
c_id
 = ((
ù
[
ci_off
] << 16) | (ip[ci_off + 1] << 8) |

840 
ù
[
ci_off
 + 2]);

841 
	`¥ötf
(" IEEE Com∑ny_id: 0x%x\n", 
c_id
);

842 
v£i
 = 0;

843 
m
 = 0; m < 5; ++m) {

844 i‡(
m
 > 0)

845 
v£i
 <<= 8;

846 
v£i
 |
ù
[
ci_off
 + 3 + 
m
];

848 
	`¥ötf
(" Víd‹ S≥cifi¯Exãnsi⁄ Idítifõr: 0x%" 
PRIx64


849 "\n", 
v£i
);

850 i‡(12 =
i_Àn
) {

851 
d_id
 = ((()
ù
[8] << 24) | (ip[9] << 16) |

852 (
ù
[10] << 8) | ip[11]);

853 
	`¥ötf
(" Dúe˘‹y ID: 0x%x\n", 
d_id
);

857 i‡(1 !
c_£t
) {

858 
	`Ârötf
(
°dîr
, " << unexpected code set %d for "

859 "NAA>>\n", 
c_£t
);

860 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

863 
«a
 = (
ù
[0] >> 4) & 0xff;

864 i‡(! ((2 =
«a
) || (5 ==Çaa) || (6 ==Çaa))) {

865 
	`Ârötf
(
°dîr
, " << u√x≥˘ed NAA [0x%x]>>\n", 
«a
);

866 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

869 i‡(2 =
«a
) {

870 i‡(8 !
i_Àn
) {

871 
	`Ârötf
(
°dîr
, " << unexpected NAA 2 identifier "

872 "Àngth: 0x%x>>\n", 
i_Àn
);

873 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

876 
d_id
 = (((
ù
[0] & 0xf) << 8) | ip[1]);

877 
c_id
 = ((
ù
[2] << 16) | (ip[3] << 8) | ip[4]);

878 
vsi
 = ((
ù
[5] << 16) | (ip[6] << 8) | ip[7]);

879 i‡(
l⁄g_out
) {

880 
	`¥ötf
(" NAA 2, vendor specific identifier A: "

881 "0x%x\n", 
d_id
);

882 
	`¥ötf
(" IEEE Com∑ny_id: 0x%x\n", 
c_id
);

883 
	`¥ötf
(" víd‹ s≥cifi¯idítifõ∏B: 0x%x\n", 
vsi
);

884 
	`¥ötf
(" [0x");

885 
m
 = 0; m < 8; ++m)

886 
	`¥ötf
("%02x", ()
ù
[
m
]);

887 
	`¥ötf
("]\n");

889 
	`¥ötf
(" 0x");

890 
m
 = 0; m < 8; ++m)

891 
	`¥ötf
("%02x", ()
ù
[
m
]);

892 
	`¥ötf
("\n");

893 } i‡(5 =
«a
) {

894 i‡(8 !
i_Àn
) {

895 
	`Ârötf
(
°dîr
, " << unexpected NAA 5 identifier "

896 "Àngth: 0x%x>>\n", 
i_Àn
);

897 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

900 
c_id
 = (((
ù
[0] & 0xf) << 20) | (ip[1] << 12) |

901 (
ù
[2] << 4) | ((ip[3] & 0xf0) >> 4));

902 
v£i
 = 
ù
[3] & 0xf;

903 
m
 = 1; m < 5; ++m) {

904 
v£i
 <<= 8;

905 
v£i
 |
ù
[3 + 
m
];

907 i‡(
l⁄g_out
) {

908 
	`¥ötf
(" NAA 5, IEEE Com∑ny_id: 0x%x\n", 
c_id
);

909 
	`¥ötf
(" Víd‹ S≥cifi¯Idítifõr: 0x%" 
PRIx64


910 "\n", 
v£i
);

911 
	`¥ötf
(" [0x");

912 
m
 = 0; m < 8; ++m)

913 
	`¥ötf
("%02x", ()
ù
[
m
]);

914 
	`¥ötf
("]\n");

916 
	`¥ötf
(" 0x");

917 
m
 = 0; m < 8; ++m)

918 
	`¥ötf
("%02x", ()
ù
[
m
]);

919 
	`¥ötf
("\n");

921 } i‡(6 =
«a
) {

922 i‡(16 !
i_Àn
) {

923 
	`Ârötf
(
°dîr
, " << unexpected NAA 6 identifier "

924 "Àngth: 0x%x>>\n", 
i_Àn
);

925 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

928 
c_id
 = (((
ù
[0] & 0xf) << 20) | (ip[1] << 12) |

929 (
ù
[2] << 4) | ((ip[3] & 0xf0) >> 4));

930 
v£i
 = 
ù
[3] & 0xf;

931 
m
 = 1; m < 5; ++m) {

932 
v£i
 <<= 8;

933 
v£i
 |
ù
[3 + 
m
];

935 i‡(
l⁄g_out
) {

936 
	`¥ötf
(" NAA 6, IEEE Com∑ny_id: 0x%x\n", 
c_id
);

937 
	`¥ötf
(" Víd‹ S≥cifi¯Idítifõr: 0x%" 
PRIx64


938 "\n", 
v£i
);

939 
v£i
 = 0;

940 
m
 = 0; m < 8; ++m) {

941 i‡(
m
 > 0)

942 
v£i
 <<= 8;

943 
v£i
 |
ù
[8 + 
m
];

945 
	`¥ötf
(" Vendor Specific Identifier Extension: "

946 "0x%" 
PRIx64
 "\n", 
v£i
);

947 
	`¥ötf
(" [0x");

948 
m
 = 0; m < 16; ++m)

949 
	`¥ötf
("%02x", ()
ù
[
m
]);

950 
	`¥ötf
("]\n");

952 
	`¥ötf
(" 0x");

953 
m
 = 0; m < 16; ++m)

954 
	`¥ötf
("%02x", ()
ù
[
m
]);

955 
	`¥ötf
("\n");

960 i‡((1 !
c_£t
Ë|| (1 !
assoc
Ë|| (4 !
i_Àn
)) {

961 
	`Ârötf
(
°dîr
, " <<Éxpected binary code_set,Åarget "

963 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

966 
d_id
 = ((
ù
[2] << 8) | ip[3]);

967 
	`¥ötf
(" Rñ©ivêèrgëÖ‹t: 0x%x\n", 
d_id
);

970 i‡((1 !
c_£t
Ë|| (1 !
assoc
Ë|| (4 !
i_Àn
)) {

971 
	`Ârötf
(
°dîr
, " <<Éxpected binary code_set,Åarget "

973 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

976 
d_id
 = ((
ù
[2] << 8) | ip[3]);

977 
	`¥ötf
(" T¨gëÖ‹àgroup: 0x%x\n", 
d_id
);

980 i‡((1 !
c_£t
Ë|| (0 !
assoc
Ë|| (4 !
i_Àn
)) {

981 
	`Ârötf
(
°dîr
, " <<Éxpected binary code_set,Üogical "

983 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

986 
d_id
 = ((
ù
[2] << 8) | ip[3]);

987 
	`¥ötf
(" Logiˇ»unô group: 0x%x\n", 
d_id
);

990 i‡((1 !
c_£t
Ë|| (0 !
assoc
)) {

991 
	`¥ötf
(" <<Éxpected binary code_set,Üogical "

993 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

996 
	`¥ötf
(" MD5Üogical unit identifier:\n");

997 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

1000 i‡(3 !
c_£t
) {

1001 
	`Ârötf
(
°dîr
, " <<Éxpected UTF-8 code_set>>\n");

1002 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

1005 
	`¥ötf
(" SCSIÇame string:\n");

1010 
	`¥ötf
(" %s\n", (c⁄° *)
ù
);

1015 i‡(! 
piv
)

1016 
	`¥ötf
(" >>>> Protocol specificÖort identifier "

1019 i‡(
TPROTO_UAS
 =
p_id
) {

1020 
	`¥ötf
(" USB devi˚áddªss: 0x%x\n", 0x7‡& 
ù
[0]);

1021 
	`¥ötf
(" USB i¡îÁ˚Çumbî: 0x%x\n", 
ù
[2]);

1022 } i‡(
TPROTO_SOP
 =
p_id
) {

1023 
	`¥ötf
(" PCIêroutög ID, bu†numbî: 0x%x\n", 
ù
[0]);

1024 
	`¥ötf
(" fun˘i⁄Çumbî: 0x%x\n", 
ù
[1]);

1025 
	`¥ötf
(" [or deviceÇumber: 0x%x, functionÇumber: "

1026 "0x%x]\n", (0x1‡& (
ù
[1] >> 3)), 0x7 & ip[1]);

1028 
	`¥ötf
(" >>>> unexpectedÖrotocol indentifier: %s\n"

1031 
	`sg_gë_å™s_¥Ÿo_°r
(
p_id
, (
b
), b));

1034 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

1037 
	}
}

1042 
	$decode_dev_ids
(c⁄° * 
¥öt_if_found
, * 
buff
, 
Àn
,

1043 
m_assoc
, 
m_desig_ty≥
, 
m_code_£t
, 
l⁄g_out
,

1044 
quõt
)

1046 
assoc
, 
i_Àn
, 
c_£t
, 
piv
, 
p_id
, 
desig_ty≥
;

1047 
¥öãd
, 
off
, 
u
;

1048 c⁄° * 
u˝
;

1050 i‡(
quõt
)

1051  
	`decode_dev_ids_quõt
(
buff
, 
Àn
, 
m_assoc
, 
m_desig_ty≥
,

1052 
m_code_£t
);

1053 i‡–
buff
[2] != 0 ) {

1054 i‡(
m_assoc
 =
VPD_ASSOC_LU
)

1055 
	`decode_desig«ti⁄_des¸ùt‹
–
buff
, 16, 0, 1, 0, 
m_assoc
, 3,

1056 
l⁄g_out
, 0);

1059 
off
 = -1;

1060 
¥öãd
 = 0;

1061 (
u
 = 
	`sg_vpd_dev_id_ôî
(
buff
, 
Àn
, &
off
, 
m_assoc
, 
m_desig_ty≥
,

1062 
m_code_£t
)) == 0) {

1063 
u˝
 = 
buff
 + 
off
;

1064 
i_Àn
 = 
u˝
[3];

1065 i‡((
off
 + 
i_Àn
 + 4Ë> 
Àn
) {

1066 
	`Ârötf
(
°dîr
, " VPDÖageÉrror: designatorÜengthÜonger "

1067 "th™\¿ÑemaöögÑe•⁄£Üígth=%d\n", (
Àn
 - 
off
));

1068  
SG_LIB_CAT_MALFORMED
;

1070 
assoc
 = ((
u˝
[1] >> 4) & 0x3);

1071 i‡(
¥öt_if_found
 && (0 =
¥öãd
)) {

1072 
¥öãd
 = 1;

1073 
	`¥ötf
(" %s:\n", 
¥öt_if_found
);

1075 i‡(
NULL
 =
¥öt_if_found
)

1076 
	`¥ötf
(" %s:\n", 
assoc_¨r
[
assoc
]);

1077 
p_id
 = ((
u˝
[0] >> 4) & 0xf);

1078 
c_£t
 = (
u˝
[0] & 0xf);

1079 
piv
 = ((
u˝
[1] & 0x80) ? 1 : 0);

1080 
desig_ty≥
 = (
u˝
[1] & 0xf);

1081 
	`decode_desig«ti⁄_des¸ùt‹
(
u˝
 + 4, 
i_Àn
, 
p_id
, 
c_£t
, 
piv
, 
assoc
,

1082 
desig_ty≥
, 
l⁄g_out
, 0);

1084 i‡(-2 =
u
) {

1085 
	`Ârötf
(
°dîr
, "VPDÖageÉrror: short designatoráround "

1086 "off£à%d\n", 
off
);

1087  
SG_LIB_CAT_MALFORMED
;

1090 
	}
}

1095 
	$decode_å™•‹t_id
(c⁄° * 
Àadö
, * 
u˝
, 
Àn
)

1097 
f‹m©_code
, 
¥Ÿo_id
, 
num
, 
j
, 
k
;

1098 
uöt64_t
 
uŒ
;

1099 
bump
;

1101 
k
 = 0, 
bump
24; k < 
Àn
; k +bump, 
u˝
 += bump) {

1102 i‡((
Àn
 < 24) || (0 != (len % 4)))

1103 
	`¥ötf
("%sTransport Id short orÇot multiple of 4 "

1104 "[Àngth=%d]:\n", 
Àadö
, 
Àn
);

1106 
	`¥ötf
("%sTøn•‹àId o‡öôüt‹:\n", 
Àadö
);

1107 
f‹m©_code
 = ((
u˝
[0] >> 6) & 0x3);

1108 
¥Ÿo_id
 = (
u˝
[0] & 0xf);

1109 
¥Ÿo_id
) {

1110 
TPROTO_FCP
:

1111 
	`¥ötf
("%† FCP-2 W‹ld WidêName:\n", 
Àadö
);

1112 i‡(0 !
f‹m©_code
)

1113 
	`¥ötf
("%† [U√x≥˘ed f‹m© code: %d]\n", 
Àadö
,

1114 
f‹m©_code
);

1115 
	`dSåHex
((c⁄° *)&
u˝
[8], 8, -1);

1116 
bump
 = 24;

1118 
TPROTO_SPI
:

1119 
	`¥ötf
("%s Parallel SCSI initiator SCSIáddress: 0x%x\n",

1120 
Àadö
, ((
u˝
[2] << 8) | ucp[3]));

1121 i‡(0 !
f‹m©_code
)

1122 
	`¥ötf
("%† [U√x≥˘ed f‹m© code: %d]\n", 
Àadö
,

1123 
f‹m©_code
);

1124 
	`¥ötf
("%sÑelativeÖortÇumber (of correspondingÅarget): "

1125 "0x%x\n", 
Àadö
, ((
u˝
[6] << 8) | ucp[7]));

1126 
bump
 = 24;

1128 
TPROTO_SSA
:

1129 
	`¥ötf
("%† SSA (å™•‹àidÇŸ deföed):\n", 
Àadö
);

1130 
	`¥ötf
("%† f‹m© code: %d\n", 
Àadö
, 
f‹m©_code
);

1131 
	`dSåHex
((c⁄° *)
u˝
, ((
Àn
 > 24) ? 24 :Üen), 0);

1132 
bump
 = 24;

1134 
TPROTO_1394
:

1135 
	`¥ötf
("%† IEEE 1394 EUI-64Çame:\n", 
Àadö
);

1136 i‡(0 !
f‹m©_code
)

1137 
	`¥ötf
("%† [U√x≥˘ed f‹m© code: %d]\n", 
Àadö
,

1138 
f‹m©_code
);

1139 
	`dSåHex
((c⁄° *)&
u˝
[8], 8, -1);

1140 
bump
 = 24;

1142 
TPROTO_SRP
:

1143 
	`¥ötf
("%† RDMA inôüt‹Ö‹àidítifõr:\n", 
Àadö
);

1144 i‡(0 !
f‹m©_code
)

1145 
	`¥ötf
("%† [U√x≥˘ed f‹m© code: %d]\n", 
Àadö
,

1146 
f‹m©_code
);

1147 
	`dSåHex
((c⁄° *)&
u˝
[8], 16, -1);

1148 
bump
 = 24;

1150 
TPROTO_ISCSI
:

1151 
	`¥ötf
("%† iSCSI ", 
Àadö
);

1152 
num
 = ((
u˝
[2] << 8) | ucp[3]);

1153 i‡(0 =
f‹m©_code
)

1154 
	`¥ötf
("«me: %.*s\n", 
num
, &
u˝
[4]);

1155 i‡(1 =
f‹m©_code
)

1156 
	`¥ötf
("w‹ld widêuniquêp‹àid: %.*s\n", 
num
, &
u˝
[4]);

1158 
	`¥ötf
(" [U√x≥˘ed f‹m© code: %d]\n", 
f‹m©_code
);

1159 
	`dSåHex
((c⁄° *)
u˝
, 
num
 + 4, 0);

1161 
bump
 = (((
num
 + 4) < 24) ? 24 :Çum + 4);

1163 
TPROTO_SAS
:

1164 
uŒ
 = 0;

1165 
j
 = 0; j < 8; ++j) {

1166 i‡(
j
 > 0)

1167 
uŒ
 <<= 8;

1168 
uŒ
 |
u˝
[4 + 
j
];

1170 
	`¥ötf
("%† SASáddªss: 0x%" 
PRIx64
 "\n", 
Àadö
, 
uŒ
);

1171 i‡(0 !
f‹m©_code
)

1172 
	`¥ötf
("%† [U√x≥˘ed f‹m© code: %d]\n", 
Àadö
,

1173 
f‹m©_code
);

1174 
bump
 = 24;

1176 
TPROTO_ADT
:

1177 
	`¥ötf
("%† ADT:\n", 
Àadö
);

1178 
	`¥ötf
("%† f‹m© code: %d\n", 
Àadö
, 
f‹m©_code
);

1179 
	`dSåHex
((c⁄° *)
u˝
, ((
Àn
 > 24) ? 24 :Üen), 0);

1180 
bump
 = 24;

1182 
TPROTO_ATA
:

1183 
	`¥ötf
("%† ATAPI:\n", 
Àadö
);

1184 
	`¥ötf
("%† f‹m© code: %d\n", 
Àadö
, 
f‹m©_code
);

1185 
	`dSåHex
((c⁄° *)
u˝
, ((
Àn
 > 24) ? 24 :Üen), 0);

1186 
bump
 = 24;

1188 
TPROTO_UAS
:

1189 
	`¥ötf
("%† UAS:\n", 
Àadö
);

1190 
	`¥ötf
("%† f‹m© code: %d\n", 
Àadö
, 
f‹m©_code
);

1191 
	`dSåHex
((c⁄° *)
u˝
, ((
Àn
 > 24) ? 24 :Üen), 0);

1192 
bump
 = 24;

1194 
TPROTO_SOP
:

1195 
	`¥ötf
("%† SOP ", 
Àadö
);

1196 
num
 = ((
u˝
[2] << 8) | ucp[3]);

1197 i‡(0 =
f‹m©_code
)

1198 
	`¥ötf
("Routög ID: 0x%x\n", 
num
);

1200 
	`¥ötf
(" [U√x≥˘ed f‹m© code: %d]\n", 
f‹m©_code
);

1201 
	`dSåHex
((c⁄° *)
u˝
, 24, 0);

1203 
bump
 = 24;

1205 
TPROTO_NONE
:

1206 
	`Ârötf
(
°dîr
, "%† Nÿ•ecifõdÖrŸocﬁ\n", 
Àadö
);

1208 
bump
 = 24;

1211 
	`Ârötf
(
°dîr
, "%s unknownÖrotocol id=0x%x "

1212 "f‹m©_code=%d\n", 
Àadö
, 
¥Ÿo_id
, 
f‹m©_code
);

1213 
	`dSåHex
((c⁄° *)
u˝
, ((
Àn
 > 24) ? 24 :Üen), 0);

1214 
bump
 = 24;

1218 
	}
}

1222 
	$decode_x_öq_vpd
(* 
b
, 
Àn
, 
do_hex
, 
do_l⁄g
,

1223 
¥Ÿe˘
)

1225 
n
;

1227 i‡(
Àn
 < 7) {

1228 
	`Ârötf
(
°dîr
, "Extended INQUIRY data VPDÖageÜengthÅoo "

1229 "sh‹t=%d\n", 
Àn
);

1232 i‡(
do_hex
) {

1233 
	`dSåHex
((c⁄° *)
b
, 
Àn
, 0);

1236 i‡(
do_l⁄g
) {

1237 
n
 = (
b
[4] >> 6) & 0x3;

1238 
	`¥ötf
(" ACTIVATE_MICROCODE=%d", 
n
);

1239 i‡(1 =
n
)

1240 
	`¥ötf
(" [before final WRITE BUFFER]\n");

1241 i‡(2 =
n
)

1242 
	`¥ötf
(" [afterÖower on or hardÑeset]\n");

1244 
	`¥ötf
("\n");

1245 
n
 = (
b
[4] >> 3) & 0x7;

1246 
	`¥ötf
(" SPT=%d", 
n
);

1247 i‡(
¥Ÿe˘
) {

1248 
n
)

1251 
	`¥ötf
(" [protectionÅype 1 supported]\n");

1254 
	`¥ötf
(" [protectionÅypes 1ánd 2 supported]\n");

1257 
	`¥ötf
(" [protectionÅype 2 supported]\n");

1260 
	`¥ötf
(" [protectionÅypes 1ánd 3 supported]\n");

1263 
	`¥ötf
(" [protectionÅype 3 supported]\n");

1266 
	`¥ötf
(" [protectionÅypes 2ánd 3 supported]\n");

1269 
	`¥ötf
(" [protectionÅypes 1, 2ánd 3 supported]\n");

1272 
	`¥ötf
("\n");

1276 
	`¥ötf
("\n");

1277 
	`¥ötf
(" GRD_CHK=%d\n", !!(
b
[4] & 0x4));

1278 
	`¥ötf
(" APP_CHK=%d\n", !!(
b
[4] & 0x2));

1279 
	`¥ötf
(" REF_CHK=%d\n", !!(
b
[4] & 0x1));

1280 
	`¥ötf
(" UASK_SUP=%d\n", !!(
b
[5] & 0x20));

1281 
	`¥ötf
(" GROUP_SUP=%d\n", !!(
b
[5] & 0x10));

1282 
	`¥ötf
(" PRIOR_SUP=%d\n", !!(
b
[5] & 0x8));

1283 
	`¥ötf
(" HEADSUP=%d\n", !!(
b
[5] & 0x4));

1284 
	`¥ötf
(" ORDSUP=%d\n", !!(
b
[5] & 0x2));

1285 
	`¥ötf
(" SIMPSUP=%d\n", !!(
b
[5] & 0x1));

1286 
	`¥ötf
(" WU_SUP=%d\n", !!(
b
[6] & 0x8));

1287 
	`¥ötf
(" CRD_SUP=%d\n", !!(
b
[6] & 0x4));

1288 
	`¥ötf
(" NV_SUP=%d\n", !!(
b
[6] & 0x2));

1289 
	`¥ötf
(" V_SUP=%d\n", !!(
b
[6] & 0x1));

1290 
	`¥ötf
(" P_I_I_SUP=%d\n", !!(
b
[7] & 0x10));

1291 
	`¥ötf
(" LUICLR=%d\n", !!(
b
[7] & 0x1));

1292 
	`¥ötf
(" R_SUP=%d\n", !!(
b
[8] & 0x10));

1293 
	`¥ötf
(" CBCS=%d\n", !!(
b
[8] & 0x1));

1294 
	`¥ötf
(" Mu…òI_TÇexu†mi¸ocodêdow∆ﬂd=%d\n", 
b
[9] & 0xf);

1295 
	`¥ötf
(" Extended self-test completion minutes=%d\n",

1296 (
b
[10] << 8) + b[11]);

1297 
	`¥ötf
(" POA_SUP=%d\n", !!(
b
[12] & 0x80));

1298 
	`¥ötf
(" HRA_SUP=%d\n", !!(
b
[12] & 0x40));

1299 
	`¥ötf
(" VSA_SUP=%d\n", !!(
b
[12] & 0x20));

1300 
	`¥ötf
(" Maximum supported sense dataÜength=%d\n",

1301 
b
[13]);

1304 
	`¥ötf
(" ACTIVATE_MICROCODE=%d SPT=%d GRD_CHK=%d APP_CHK=%d "

1305 "REF_CHK=%d\n", ((
b
[4] >> 6) & 0x3), ((b[4] >> 3) & 0x7),

1306 !!(
b
[4] & 0x4), !!(b[4] & 0x2), !!(b[4] & 0x1));

1307 
	`¥ötf
(" UASK_SUP=%d GROUP_SUP=%d PRIOR_SUP=%d HEADSUP=%d ORDSUP=%d "

1308 "SIMPSUP=%d\n", !!(
b
[5] & 0x20), !!(b[5] & 0x10), !!(b[5] & 0x8),

1309 !!(
b
[5] & 0x4), !!(b[5] & 0x2), !!(b[5] & 0x1));

1310 
	`¥ötf
(" WU_SUP=%d CRD_SUP=%d NV_SUP=%d V_SUP=%d\n",

1311 !!(
b
[6] & 0x8), !!(b[6] & 0x4), !!(b[6] & 0x2), !!(b[6] & 0x1));

1312 
	`¥ötf
(" P_I_I_SUP=%d LUICLR=%d R_SUP=%d CBCS=%d\n",

1313 !!(
b
[7] & 0x10), !!(b[7] & 0x1), !!(b[8] & 0x10), !!(b[8] & 0x1));

1314 
	`¥ötf
(" Mu…òI_TÇexu†mi¸ocodêdow∆ﬂd=%d\n", 
b
[9] & 0xf);

1315 
	`¥ötf
(" Extended self-test completion minutes=%d\n",

1316 (
b
[10] << 8) + b[11]);

1317 
	`¥ötf
(" POA_SUP=%d HRA_SUP=%d VSA_SUP=%d\n",

1318 !!(
b
[12] & 0x80), !!(b[12] & 0x40), !!(b[12] & 0x20));

1319 
	`¥ötf
(" Maximum suµ‹ãd sí£ d©®Àngth=%d\n", 
b
[13]);

1320 
	}
}

1324 
	$decode_so·w_öf_id
(* 
buff
, 
Àn
, 
do_hex
)

1326 i‡(
do_hex
) {

1327 
	`dSåHex
((c⁄° *)
buff
, 
Àn
, 0);

1330 
Àn
 -= 4;

1331 
buff
 += 4;

1332  ; 
Àn
 > 5;Üí -6, 
buff
 += 6) {

1333 
	`¥ötf
(" IEEE Company_id: 0x%06x, vendor specificÉxtension "

1334 "id: 0x%06x\n", (
buff
[0] << 16) | (buff[1] << 8) | buff[2],

1335 (
buff
[3] << 16) | (buff[4] << 8) | buff[5]);

1337 
	}
}

1341 
	$decode_©a_öfo_vpd
(* 
buff
, 
Àn
, 
do_l⁄g
, 
do_hex
)

1343 
b
[80];

1344 
num
, 
is_be
;

1345 c⁄° * 
˝
;

1347 i‡(
Àn
 < 36) {

1348 
	`Ârötf
(
°dîr
, "ATA information VPDÖageÜengthÅoo "

1349 "sh‹t=%d\n", 
Àn
);

1352 i‡(
do_hex
 && (2 != do_hex)) {

1353 
	`dSåHex
((c⁄° *)
buff
, 
Àn
, 0);

1356 
	`mem˝y
(
b
, 
buff
 + 8, 8);

1357 
b
[8] = '\0';

1358 
	`¥ötf
(" SAT Víd‹ idítifiˇti⁄: %s\n", 
b
);

1359 
	`mem˝y
(
b
, 
buff
 + 16, 16);

1360 
b
[16] = '\0';

1361 
	`¥ötf
(" SAT Produ˘ idítifiˇti⁄: %s\n", 
b
);

1362 
	`mem˝y
(
b
, 
buff
 + 32, 4);

1363 
b
[4] = '\0';

1364 
	`¥ötf
(" SAT Produ˘Ñevisi⁄Üevñ: %s\n", 
b
);

1365 i‡(
Àn
 < 56)

1367 i‡(
do_l⁄g
) {

1368 
	`¥ötf
(" Signature (DeviceÅo host FIS):\n");

1369 
	`dSåHex
((c⁄° *)
buff
 + 36, 20, 0);

1371 i‡(
Àn
 < 60)

1373 
is_be
 = 
	`sg_is_big_ídün
();

1374 i‡((0xe¯=
buff
[56]) || (0xa1 == buff[56])) {

1375 
˝
 = (0xa1 =
buff
[56]) ? "PACKET " : "";

1376 
	`¥ötf
(" ATA comm™d IDENTIFY %sDEVICEÑe•⁄£ summ¨y:\n", 
˝
);

1377 
num
 = 
	`sg_©a_gë_ch¨s
((c⁄° *)(
buff
 + 60), 27, 20,

1378 
is_be
, 
b
);

1379 
b
[
num
] = '\0';

1380 
	`¥ötf
(" modñ: %s\n", 
b
);

1381 
num
 = 
	`sg_©a_gë_ch¨s
((c⁄° *)(
buff
 + 60), 10, 10,

1382 
is_be
, 
b
);

1383 
b
[
num
] = '\0';

1384 
	`¥ötf
(" sîü»numbî: %s\n", 
b
);

1385 
num
 = 
	`sg_©a_gë_ch¨s
((c⁄° *)(
buff
 + 60), 23, 4,

1386 
is_be
, 
b
);

1387 
b
[
num
] = '\0';

1388 
	`¥ötf
(" fúmw¨êªvisi⁄: %s\n", 
b
);

1389 i‡(
do_l⁄g
)

1390 
	`¥ötf
(" ATA comm™d IDENTIFY %sDEVICEÑe•⁄£ i¿hex:\n", 
˝
);

1391 } i‡(
do_l⁄g
)

1392 
	`¥ötf
(" ATA command 0x%x got followingÑesponse:\n",

1393 ()
buff
[56]);

1394 i‡(
Àn
 < 572)

1396 i‡(2 =
do_hex
)

1397 
	`dSåHex
((c⁄° *)(
buff
 + 60), 512, 0);

1398 i‡(
do_l⁄g
)

1399 
	`dW‹dHex
((c⁄° *)(
buff
 + 60), 256, 0, 
is_be
);

1400 
	}
}

1404 
	$decode_powî_c⁄dôi⁄
(* 
buff
, 
Àn
, 
do_hex
)

1406 i‡(
Àn
 < 18) {

1407 
	`Ârötf
(
°dîr
, "Power condition VPDÖageÜengthÅoo short=%d\n",

1408 
Àn
);

1411 i‡(
do_hex
) {

1412 
	`dSåHex
((c⁄° *)
buff
, 
Àn
, 0);

1415 
	`¥ötf
(" Standby_y=%d Standby_z=%d Idle_c=%d Idle_b=%d Idle_a=%d\n",

1416 !!(
buff
[4] & 0x2), !!(buff[4] & 0x1),

1417 !!(
buff
[5] & 0x4), !!(buff[5] & 0x2), !!(buff[5] & 0x1));

1418 
	`¥ötf
(" Stopped conditionÑecoveryÅime (ms) %d\n",

1419 (
buff
[6] << 8) + buff[7]);

1420 
	`¥ötf
(" Standby_z conditionÑecoveryÅime (ms) %d\n",

1421 (
buff
[8] << 8) + buff[9]);

1422 
	`¥ötf
(" Standby_y conditionÑecoveryÅime (ms) %d\n",

1423 (
buff
[10] << 8) + buff[11]);

1424 
	`¥ötf
(" Idle_a conditionÑecoveryÅime (ms) %d\n",

1425 (
buff
[12] << 8) + buff[13]);

1426 
	`¥ötf
(" Idle_b conditionÑecoveryÅime (ms) %d\n",

1427 (
buff
[14] << 8) + buff[15]);

1428 
	`¥ötf
(" Idle_c conditionÑecoveryÅime (ms) %d\n",

1429 (
buff
[16] << 8) + buff[17]);

1430 
	}
}

1432 c⁄° * 
	gpowî_unô_¨r
[] =

1446 
	$decode_powî_c⁄sum±i⁄_vpd
(* 
buff
, 
Àn
, 
do_hex
)

1448 
k
, 
bump
;

1449 * 
u˝
;

1450 
vÆue
;

1452 i‡(1 =
do_hex
) {

1453 
	`dSåHex
((c⁄° *)
buff
, 
Àn
, 1);

1456 i‡(
Àn
 < 4) {

1457 
	`Ârötf
(
°dîr
, "Power consumption VPDÖageÜengthÅoo short=%d\n",

1458 
Àn
);

1461 
Àn
 -= 4;

1462 
u˝
 = 
buff
 + 4;

1463 
k
 = 0; k < 
Àn
; k +
bump
, 
u˝
 += bump) {

1464 
bump
 = 4;

1465 i‡((
k
 + 
bump
Ë> 
Àn
) {

1466 
	`Ârötf
(
°dîr
, "Power consumption VPDÖage, short "

1467 "des¸ùt‹Üígth=%d,Üe·=%d\n", 
bump
, (
Àn
 - 
k
));

1470 i‡(
do_hex
 > 1)

1471 
	`dSåHex
((c⁄° *)
u˝
, 4, 1);

1473 
vÆue
 = (
u˝
[2] << 8) + ucp[3];

1474 
	`¥ötf
(" Powî c⁄sum±i⁄ idítifõr: 0x%x", 
u˝
[0]);

1475 i‡(
vÆue
 >1000 && (
u˝
[1] & 0x7) > 0)

1476 
	`¥ötf
(" MaximumÖower consumption: %d.%03d %s\n",

1477 
vÆue
 / 1000, value % 1000,

1478 
powî_unô_¨r
[(
u˝
[1] & 0x7) - 1]);

1480 
	`¥ötf
(" MaximumÖower consumption: %d %s\n",

1481 
vÆue
, 
powî_unô_¨r
[
u˝
[1] & 0x7]);

1484 
	}
}

1488 
	$decode_¥Ÿo_lu_vpd
(* 
buff
, 
Àn
, 
do_hex
)

1490 
k
, 
bump
, 
ªl_p‹t
, 
desc_Àn
, 
¥Ÿo
;

1491 * 
u˝
;

1493 i‡(1 =
do_hex
) {

1494 
	`dSåHex
((c⁄° *)
buff
, 
Àn
, 0);

1497 i‡(
Àn
 < 4) {

1498 
	`Ârötf
(
°dîr
, "Protocol-specificÜogical unit information VPD "

1499 "∑gêÀngthÅoÿsh‹t=%d\n", 
Àn
);

1502 
Àn
 -= 4;

1503 
u˝
 = 
buff
 + 4;

1504 
k
 = 0; k < 
Àn
; k +
bump
, 
u˝
 += bump) {

1505 
ªl_p‹t
 = (
u˝
[0] << 8) + ucp[1];

1506 
	`¥ötf
("Rñ©ivêp‹t=%d\n", 
ªl_p‹t
);

1507 
¥Ÿo
 = 
u˝
[2] & 0xf;

1508 
desc_Àn
 = (
u˝
[6] << 8) + ucp[7];

1509 
bump
 = 8 + 
desc_Àn
;

1510 i‡((
k
 + 
bump
Ë> 
Àn
) {

1511 
	`Ârötf
(
°dîr
, "Protocol-specificÜogical unit information VPD "

1512 "∑ge, sh‹àdes¸ùt‹Üígth=%d,Üe·=%d\n", 
bump
,

1513 (
Àn
 - 
k
));

1516 i‡(0 =
desc_Àn
)

1518 i‡(2 =
do_hex
)

1519 
	`dSåHex
((c⁄° *)
u˝
 + 8, 
desc_Àn
, 1);

1520 i‡(
do_hex
 > 2)

1521 
	`dSåHex
((c⁄° *)
u˝
, 
bump
, 1);

1523 
¥Ÿo
) {

1524 
TPROTO_SAS
:

1525 
	`¥ötf
(" Protocol identifier: SAS\n");

1526 
	`¥ötf
(" TLR c⁄åﬁ suµ‹ãd: %d\n", !!(
u˝
[8] & 0x1));

1529 
	`Ârötf
(
°dîr
, "U√x≥˘edÖrŸo=%d\n", 
¥Ÿo
);

1530 
	`dSåHex
((c⁄° *)
u˝
, 
bump
, 1);

1535 
	}
}

1539 
	$decode_¥Ÿo_p‹t_vpd
(* 
buff
, 
Àn
, 
do_hex
)

1541 
k
, 
j
, 
bump
, 
ªl_p‹t
, 
desc_Àn
, 
¥Ÿo
;

1542 * 
u˝
;

1543 * 
pidp
;

1545 i‡(1 =
do_hex
) {

1546 
	`dSåHex
((c⁄° *)
buff
, 
Àn
, 0);

1549 i‡(
Àn
 < 4) {

1550 
	`Ârötf
(
°dîr
, "Protocol-specificÖort information VPD "

1551 "∑gêÀngthÅoÿsh‹t=%d\n", 
Àn
);

1554 
Àn
 -= 4;

1555 
u˝
 = 
buff
 + 4;

1556 
k
 = 0; k < 
Àn
; k +
bump
, 
u˝
 += bump) {

1557 
ªl_p‹t
 = (
u˝
[0] << 8) + ucp[1];

1558 
	`¥ötf
("Rñ©ivêp‹t=%d\n", 
ªl_p‹t
);

1559 
¥Ÿo
 = 
u˝
[2] & 0xf;

1560 
desc_Àn
 = (
u˝
[6] << 8) + ucp[7];

1561 
bump
 = 8 + 
desc_Àn
;

1562 i‡((
k
 + 
bump
Ë> 
Àn
) {

1563 
	`Ârötf
(
°dîr
, "Protocol-specificÖort VPD "

1564 "∑ge, sh‹àdes¸ùt‹Üígth=%d,Üe·=%d\n", 
bump
,

1565 (
Àn
 - 
k
));

1568 i‡(0 =
desc_Àn
)

1570 i‡(2 =
do_hex
)

1571 
	`dSåHex
((c⁄° *)
u˝
 + 8, 
desc_Àn
, 1);

1572 i‡(
do_hex
 > 2)

1573 
	`dSåHex
((c⁄° *)
u˝
, 
bump
, 1);

1575 
¥Ÿo
) {

1576 
TPROTO_SAS
:

1577 
	`¥ötf
("Öwr_d_s=%d\n", !!(
u˝
[3] & 0x1));

1578 
pidp
 = 
u˝
 + 8;

1579 
j
 = 0; j < 
desc_Àn
; j +4, 
pidp
 += 4)

1580 
	`¥ötf
("Öhy id=%d, sspÖersistent capable=%d\n",

1581 
pidp
[1], (0x1 &Öidp[2]));

1584 
	`Ârötf
(
°dîr
, "U√x≥˘edÖrŸo=%d\n", 
¥Ÿo
);

1585 
	`dSåHex
((c⁄° *)
u˝
, 
bump
, 1);

1590 
	}
}

1596 
	$decode_b0_vpd
(* 
buff
, 
Àn
, 
do_hex
, 
pdt
)

1598 
u
;

1600 i‡(
do_hex
) {

1601 
	`dSåHex
((c⁄° *)
buff
, 
Àn
, 0);

1604 
pdt
) {

1606 i‡(
Àn
 < 16) {

1607 
	`Ârötf
(
°dîr
, "BlockÜimits VPDÖageÜengthÅoo "

1608 "sh‹t=%d\n", 
Àn
);

1611 
	`¥ötf
(" Wrôêßmênÿzîÿ(WSNZ): %d\n", !!(
buff
[4] & 0x1));

1612 
	`¥ötf
(" Maximum compareánd writeÜength: %u blocks\n",

1613 
buff
[5]);

1614 
u
 = (
buff
[6] << 8) | buff[7];

1615 
	`¥ötf
(" O±imÆÅøns„∏Àngth gønuœrôy: %u blocks\n", 
u
);

1616 
u
 = (
buff
[8] << 24) | (buff[9] << 16) | (buff[10] << 8) |

1617 
buff
[11];

1618 
	`¥ötf
(" MaximumÅøns„∏Àngth: %u blocks\n", 
u
);

1619 
u
 = (
buff
[12] << 24) | (buff[13] << 16) | (buff[14] << 8) |

1620 
buff
[15];

1621 
	`¥ötf
(" O±imÆÅøns„∏Àngth: %u blocks\n", 
u
);

1622 i‡(
Àn
 > 19) {

1623 
u
 = (
buff
[16] << 24) | (buff[17] << 16) | (buff[18] << 8) |

1624 
buff
[19];

1625 
	`¥ötf
(" MaximumÖª„tchÜígth: %u blocks\n", 
u
);

1628 i‡(
Àn
 > 27) {

1629 
u
 = (()
buff
[20] << 24) | (buff[21] << 16) |

1630 (
buff
[22] << 8) | buff[23];

1631 
	`¥ötf
(" Maximum unm≠ LBA cou¡: %u\n", 
u
);

1632 
u
 = (()
buff
[24] << 24) | (buff[25] << 16) |

1633 (
buff
[26] << 8) | buff[27];

1634 
	`¥ötf
(" Maximum unm≠ block des¸ùt‹ cou¡: %u\n", 
u
);

1636 i‡(
Àn
 > 35) {

1637 
m
;

1638 
uöt64_t
 
mw¶
;

1640 
u
 = (()
buff
[28] << 24) | (buff[29] << 16) |

1641 (
buff
[30] << 8) | buff[31];

1642 
	`¥ötf
(" O±imÆ unm≠ gønuœrôy: %u\n", 
u
);

1643 
	`¥ötf
(" Unmap granularityálignment valid: %u\n",

1644 !!(
buff
[32] & 0x80));

1645 
u
 = (()(
buff
[32] & 0x7f) << 24) | (buff[33] << 16) |

1646 (
buff
[34] << 8) | buff[35];

1647 
	`¥ötf
(" Unm≠ gønuœrôyálignmít: %u\n", 
u
);

1649 
mw¶
 = 0;

1650 
m
 = 0; m < 8; ++m) {

1651 i‡(
m
 > 0)

1652 
mw¶
 <<= 8;

1653 
mw¶
 |
buff
[36 + 
m
];

1655 
	`¥ötf
(" Maximum wrôêßmêÀngth: 0x%" 
PRIx64
 " blocks\n",

1656 
mw¶
);

1660 
	`¥ötf
(" WORM=%d\n", !!(
buff
[4] & 0x1));

1664 
	`¥ötf
(" U«bÀÅÿdecodêpdt=0x%x, i¿hex:\n", 
pdt
);

1665 
	`dSåHex
((c⁄° *)
buff
, 
Àn
, 0);

1668 
	}
}

1674 
	$decode_b1_vpd
(* 
buff
, 
Àn
, 
do_hex
, 
pdt
)

1676 
u
;

1678 i‡(
do_hex
) {

1679 
	`dSåHex
((c⁄° *)
buff
, 
Àn
, 0);

1682 
pdt
) {

1683 
PDT_DISK
: 
PDT_WO
: 
PDT_OPTICAL
:

1684 i‡(
Àn
 < 64) {

1685 
	`Ârötf
(
°dîr
, "Block device characteristics VPDÖageÜength "

1686 "toÿsh‹t=%d\n", 
Àn
);

1689 
u
 = (
buff
[4] << 8) | buff[5];

1690 i‡(0 =
u
)

1691 
	`¥ötf
(" MediumÑotationÑate isÇotÑeported\n");

1692 i‡(1 =
u
)

1693 
	`¥ötf
(" Non-rotating medium (e.g. solid state)\n");

1694 i‡((
u
 < 0x401) || (0xffff == u))

1695 
	`¥ötf
(" Re£rved [0x%x]\n", 
u
);

1697 
	`¥ötf
(" NomöÆÑŸ©i⁄Ñ©e: %dÑpm\n", 
u
);

1698 
	`¥ötf
(" Produ˘Åy≥=%d\n", 
buff
[6]);

1699 
	`¥ötf
(" WABEREQ=%d\n", (
buff
[7] >> 6) & 0x3);

1700 
	`¥ötf
(" WACEREQ=%d\n", (
buff
[7] >> 4) & 0x3);

1701 
u
 = 
buff
[7] & 0xf;

1702 
	`¥ötf
(" Nominal form factor");

1703 
u
) {

1705 
	`¥ötf
("ÇotÑeported\n");

1708 
	`¥ötf
(": 5.25 inch\n");

1711 
	`¥ötf
(": 3.5 inch\n");

1714 
	`¥ötf
(": 2.5 inch\n");

1717 
	`¥ötf
(": 1.8 inch\n");

1720 
	`¥ötf
(":ÜessÅhen 1.8 inch\n");

1723 
	`¥ötf
(":Ñeserved\n");

1726 
	`¥ötf
(" FUAB=%d\n", 
buff
[8] & 0x2);

1727 
	`¥ötf
(" VBULS=%d\n", 
buff
[8] & 0x1);

1729 
PDT_TAPE
: 
PDT_MCHANGER
: 
PDT_ADC
:

1730 
	`¥ötf
(" Manufacturer-assigned serialÇumber: %.*s\n",

1731 
Àn
 - 4, 
buff
 + 4);

1734 
	`¥ötf
(" U«bÀÅÿdecodêpdt=0x%x, i¿hex:\n", 
pdt
);

1735 
	`dSåHex
((c⁄° *)
buff
, 
Àn
, 0);

1738 
	}
}

1742 
	$decode_block_lb_¥ov_vpd
(* 
b
, 
Àn
)

1744 
dp
;

1746 i‡(
Àn
 < 4) {

1747 
	`Ârötf
(
°dîr
, "Logical blockÖrovisioningÖageÅoo short=%d\n",

1748 
Àn
);

1749  
SG_LIB_CAT_MALFORMED
;

1751 
	`¥ötf
(" Unm≠ comm™d suµ‹ãd (LBPU): %d\n", !!(0x80 & 
b
[5]));

1752 
	`¥ötf
(" Write same (16) with unmap bit supported (LBWS): %d\n",

1753 !!(0x40 & 
b
[5]));

1754 
	`¥ötf
(" Write same (10) with unmap bit supported (LBWS10): %d\n",

1755 !!(0x20 & 
b
[5]));

1756 
	`¥ötf
(" Logical blockÖrovisioningÑead zeros (LBPRZ): %d\n",

1757 !!(0x4 & 
b
[5]));

1758 
	`¥ötf
(" Anch‹ed LBA†suµ‹ãd (ANC_SUP): %d\n", !!(0x2 & 
b
[5]));

1759 
dp
 = !!(
b
[5] & 0x1);

1760 
	`¥ötf
(" ThªshﬁdÉxp⁄ít: %d\n", 
b
[4]);

1761 
	`¥ötf
(" Des¸ùt‹Öª£¡ (DP): %d\n", 
dp
);

1762 
	`¥ötf
(" Provisi⁄ögÅy≥: %d\n", 
b
[6] & 0x7);

1763 i‡(
dp
) {

1764 c⁄° * 
u˝
;

1765 
i_Àn
, 
p_id
, 
c_£t
, 
piv
, 
assoc
, 
desig_ty≥
;

1767 
u˝
 = 
b
 + 8;

1768 
i_Àn
 = 
u˝
[3];

1769 i‡(0 =
i_Àn
) {

1770 
	`Ârötf
(
°dîr
, "Logical blockÖrovisioningÖageÖrovisioning "

1771 "grou∞des¸ùt‹Åoÿsh‹t=%d\n", 
i_Àn
);

1774 
	`¥ötf
(" Provisioning group descriptor\n");

1775 
p_id
 = ((
u˝
[0] >> 4) & 0xf);

1776 
c_£t
 = (
u˝
[0] & 0xf);

1777 
piv
 = ((
u˝
[1] & 0x80) ? 1 : 0);

1778 
assoc
 = ((
u˝
[1] >> 4) & 0x3);

1779 
desig_ty≥
 = (
u˝
[1] & 0xf);

1780 
	`decode_desig«ti⁄_des¸ùt‹
(
u˝
, 
i_Àn
, 
p_id
, 
c_£t
, 
piv
, 
assoc
,

1781 
desig_ty≥
, 0, 1);

1784 
	}
}

1788 
	$decode_è≥Æît_suµ‹ãd_vpd
(* 
b
, 
Àn
)

1790 i‡(
Àn
 < 12) {

1791 
	`Ârötf
(
°dîr
, "TapeAlert supported flagsÜengthÅoo short=%d\n",

1792 
Àn
);

1793  
SG_LIB_CAT_MALFORMED
;

1795 
	`¥ötf
(" Flag01h: %d 02h: %d 03h: %d 04h: %d 05h: %d 06h: %d "

1796 "07h: %d 08h: %d\n", !!(
b
[4] & 0x80), !!(b[4] & 0x40),

1797 !!(
b
[4] & 0x20), !!(b[4] & 0x10), !!(b[4] & 0x8), !!(b[4] & 0x4),

1798 !!(
b
[4] & 0x2), !!(b[4] & 0x1));

1799 
	`¥ötf
(" Flag09h: %d 0ah: %d 0bh: %d 0ch: %d 0dh: %d 0eh: %d "

1800 "0fh: %d 10h: %d\n", !!(
b
[5] & 0x80), !!(b[5] & 0x40),

1801 !!(
b
[5] & 0x20), !!(b[5] & 0x10), !!(b[5] & 0x8), !!(b[5] & 0x4),

1802 !!(
b
[5] & 0x2), !!(b[5] & 0x1));

1803 
	`¥ötf
(" Flag11h: %d 12h: %d 13h: %d 14h: %d 15h: %d 16h: %d "

1804 "17h: %d 18h: %d\n", !!(
b
[6] & 0x80), !!(b[6] & 0x40),

1805 !!(
b
[6] & 0x20), !!(b[6] & 0x10), !!(b[6] & 0x8), !!(b[6] & 0x4),

1806 !!(
b
[6] & 0x2), !!(b[6] & 0x1));

1807 
	`¥ötf
(" Flag19h: %d 1ah: %d 1bh: %d 1ch: %d 1dh: %d 1eh: %d "

1808 "1fh: %d 20h: %d\n", !!(
b
[7] & 0x80), !!(b[7] & 0x40),

1809 !!(
b
[7] & 0x20), !!(b[7] & 0x10), !!(b[7] & 0x8), !!(b[7] & 0x4),

1810 !!(
b
[7] & 0x2), !!(b[7] & 0x1));

1811 
	`¥ötf
(" Flag21h: %d 22h: %d 23h: %d 24h: %d 25h: %d 26h: %d "

1812 "27h: %d 28h: %d\n", !!(
b
[8] & 0x80), !!(b[8] & 0x40),

1813 !!(
b
[8] & 0x20), !!(b[8] & 0x10), !!(b[8] & 0x8), !!(b[8] & 0x4),

1814 !!(
b
[8] & 0x2), !!(b[8] & 0x1));

1815 
	`¥ötf
(" Flag29h: %d 2ah: %d 2bh: %d 2ch: %d 2dh: %d 2eh: %d "

1816 "2fh: %d 30h: %d\n", !!(
b
[9] & 0x80), !!(b[9] & 0x40),

1817 !!(
b
[9] & 0x20), !!(b[9] & 0x10), !!(b[9] & 0x8), !!(b[9] & 0x4),

1818 !!(
b
[9] & 0x2), !!(b[9] & 0x1));

1819 
	`¥ötf
(" Flag31h: %d 32h: %d 33h: %d 34h: %d 35h: %d 36h: %d "

1820 "37h: %d 38h: %d\n", !!(
b
[10] & 0x80), !!(b[10] & 0x40),

1821 !!(
b
[10] & 0x20), !!(b[10] & 0x10), !!(b[10] & 0x8),

1822 !!(
b
[10] & 0x4), !!(b[10] & 0x2), !!(b[10] & 0x1));

1823 
	`¥ötf
(" Flag39h: %d 3ah: %d 3bh: %d 3ch: %d 3dh: %d 3eh: %d "

1824 "3fh: %d 40h: %d\n", !!(
b
[11] & 0x80), !!(b[11] & 0x40),

1825 !!(
b
[11] & 0x20), !!(b[11] & 0x10), !!(b[11] & 0x8),

1826 !!(
b
[11] & 0x4), !!(b[11] & 0x2), !!(b[11] & 0x1));

1828 
	}
}

1833 
	$decode_b2_vpd
(* 
buff
, 
Àn
, 
do_hex
, 
pdt
)

1835 i‡(
do_hex
) {

1836 
	`dSåHex
((c⁄° *)
buff
, 
Àn
, 0);

1839 
pdt
) {

1840 
PDT_DISK
: 
PDT_WO
: 
PDT_OPTICAL
:

1841 
	`decode_block_lb_¥ov_vpd
(
buff
, 
Àn
);

1843 
PDT_TAPE
: 
PDT_MCHANGER
:

1844 
	`decode_è≥Æît_suµ‹ãd_vpd
(
buff
, 
Àn
);

1847 
	`¥ötf
(" U«bÀÅÿdecodêpdt=0x%x, i¿hex:\n", 
pdt
);

1848 
	`dSåHex
((c⁄° *)
buff
, 
Àn
, 0);

1851 
	}
}

1856 
	$decode_b3_vpd
(* 
b
, 
Àn
, 
do_hex
, 
pdt
)

1858 
obuff
[
DEF_ALLOC_LEN
];

1859 
u
;

1861 i‡(
do_hex
) {

1862 
	`dSåHex
((c⁄° *)
b
, 
Àn
, 0);

1865 
pdt
) {

1866 
PDT_DISK
: 
PDT_WO
: 
PDT_OPTICAL
:

1867 i‡(
Àn
 < 16) {

1868 
	`Ârötf
(
°dîr
, "Re„ºÆ†VPDÖagêÀngthÅoÿsh‹t=%d\n", 
Àn
);

1871 
u
 = (()
b
[8] << 24) | (b[9] << 16) | (b[10] << 8) | b[11];

1872 
	`¥ötf
(" U£∏d©®£gmíàsize: %u\n", 
u
);

1873 
u
 = (()
b
[12] << 24) | (b[13] << 16) |

1874 (
b
[14] << 8) | b[15];

1875 
	`¥ötf
(" U£∏d©®£gmíàmu…ùlõr: %u\n", 
u
);

1877 
PDT_TAPE
: 
PDT_MCHANGER
:

1878 
	`mem£t
(
obuff
, 0, (obuff));

1879 
Àn
 -= 4;

1880 i‡(
Àn
 >()(
obuff
))

1881 
Àn
 = (
obuff
) - 1;

1882 
	`mem˝y
(
obuff
, 
b
 + 4, 
Àn
);

1883 
	`¥ötf
(" Autom©i⁄ devi˚ sîü»numbî: %s\n", 
obuff
);

1886 
	`¥ötf
(" U«bÀÅÿdecodêpdt=0x%x, i¿hex:\n", 
pdt
);

1887 
	`dSåHex
((c⁄° *)
b
, 
Àn
, 0);

1890 
	}
}

1894 
	$svpd_u«bÀ_to_decode
(
sg_fd
, 
num_vpd
, 
subvÆue
, 
maxÀn
,

1895 
do_hex
, 
do_øw
, 
do_l⁄g
, 
do_quõt
,

1896 
vîbo£
)

1898 
Àn
, 
ªs
;

1899 
Æloc_Àn
 = 
maxÀn
;

1901 
do_quõt
 = do_quiet;

1902 i‡((! 
do_hex
Ë&& (! 
do_øw
))

1903 
	`¥ötf
("Only hex output supported\n");

1904 i‡(!
do_øw
) {

1905 i‡(
subvÆue
)

1906 
	`¥ötf
("VPDÖagêcode=0x%.2x, subvÆue=0x%.2x:\n", 
num_vpd
,

1907 
subvÆue
);

1908 i‡(
num_vpd
 >= 0)

1909 
	`¥ötf
("VPDÖagêcode=0x%.2x:\n", 
num_vpd
);

1911 
	`¥ötf
("VPDÖagêcode=%d:\n", 
num_vpd
);

1913 i‡(0 =
Æloc_Àn
)

1914 
Æloc_Àn
 = 
DEF_ALLOC_LEN
;

1915 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Æloc_Àn
,

1916 1, 
vîbo£
);

1917 i‡(0 =
ªs
) {

1918 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

1919 i‡(
num_vpd
 !
r•_buff
[1]) {

1920 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

1922 i‡(
vîbo£
) {

1923 
	`Ârötf
(
°dîr
, "First 32 bytes of badÑesponse\n");

1924 
	`dSåHex
((c⁄° *)
r•_buff
, 32, 0);

1926  
SG_LIB_CAT_MALFORMED
;

1928 i‡(
Àn
 > 
Æloc_Àn
) {

1929 i‡((0 =
maxÀn
Ë&& (
Àn
 < 
MX_ALLOC_LEN
)) {

1930 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Àn
, 1,

1931 
vîbo£
);

1932 i‡(
ªs
) {

1933 
	`Ârötf
(
°dîr
, "fetching VPDÖage (2) code=0x%.2x "

1934 " (Æloc_Àn=%dËÁûed\n", 
num_vpd
, 
Àn
);

1935  
ªs
;

1938 
	`Ârötf
(
°dîr
, "warning:ÑesponseÜength (%d)ÜongerÅhan "

1939 "ªque°ed (%d)\n", 
Àn
, 
maxÀn
);

1940 
Àn
 = 
Æloc_Àn
;

1943 i‡(
do_øw
)

1944 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

1946 i‡(
VPD_ASCII_OP_DEF
 =
num_vpd
)

1947 
	`dSåHex
((c⁄° *)
r•_buff
, 
Àn
, 0);

1949 
	`dSåHex
((c⁄° *)
r•_buff
, 
Àn
, (
do_l⁄g
 ? 0 : 1));

1953 i‡(
num_vpd
 >= 0)

1954 
	`Ârötf
(
°dîr
, "fetching VPDÖage code=0x%.2x: failed\n",

1955 
num_vpd
);

1957 
	`Ârötf
(
°dîr
, "„tchög VPDÖagêcode=%d: faûed\n", 
num_vpd
);

1958  
ªs
;

1960 
	}
}

1964 
	$svpd_decode_t10
(
sg_fd
, 
num_vpd
, 
subvÆue
, 
maxÀn
, 
do_hex
,

1965 
do_øw
, 
do_l⁄g
, 
do_quõt
, 
vîbo£
)

1967 
Àn
, 
pdt
, 
num
, 
k
, 
≤
;

1968 
buff
[48];

1969 c⁄° 
svpd_vÆues_«me_t
 * 
v≈
;

1970 
ªs
 = 0;

1971 
Æloc_Àn
 = 
maxÀn
;

1972 
obuff
[
DEF_ALLOC_LEN
];

1975 i‡(0 =
Æloc_Àn
)

1976 
Æloc_Àn
 = (
VPD_ATA_INFO
 =
num_vpd
) ?

1977 
VPD_ATA_INFO_LEN
 : 
DEF_ALLOC_LEN
;

1978 
num_vpd
) {

1979 
VPD_NOT_STD_INQ
:

1980 i‡(
do_l⁄g
)

1981 
Æloc_Àn
 = 
DEF_ALLOC_LEN
;

1982 i‡(0 =
maxÀn
)

1983 
Æloc_Àn
 = 36;

1984 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 0, 0, 
r•_buff
, 
Æloc_Àn
, 1,

1985 
vîbo£
);

1986 i‡(0 =
ªs
) {

1987 i‡(
do_øw
)

1988 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Æloc_Àn
);

1989 i‡(
do_hex
) {

1990 i‡(! 
do_quõt
)

1991 
	`¥ötf
("Standard InquiryÑeponse:\n");

1992 
	`dSåHex
((c⁄° *)
r•_buff
, 
Æloc_Àn
, 0);

1994 
	`decode_°d_öq
(
r•_buff
, 
Æloc_Àn
, 
vîbo£
);

1998 
VPD_SUPPORTED_VPDS
:

1999 i‡((! 
do_øw
Ë&& (! 
do_quõt
))

2000 
	`¥ötf
("Supported VPDÖages VPDÖage:\n");

2001 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Æloc_Àn
, 1,

2002 
vîbo£
);

2003 i‡(0 =
ªs
) {

2004 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

2005 i‡(
num_vpd
 !
r•_buff
[1]) {

2006 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

2008 i‡(
vîbo£
) {

2009 
	`Ârötf
(
°dîr
, "First 32 bytes of badÑesponse\n");

2010 
	`dSåHex
((c⁄° *)
r•_buff
, 32, 0);

2012  
SG_LIB_CAT_MALFORMED
;

2014 i‡(
Àn
 > 
Æloc_Àn
) {

2015 i‡((0 =
maxÀn
Ë&& (
Àn
 < 
MX_ALLOC_LEN
)) {

2016 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Àn
,

2017 1, 
vîbo£
);

2018 i‡(
ªs
) {

2019 
	`Ârötf
(
°dîr
, "fetching Supported VPDÖages "

2020 "◊Œoc_Àn=%dËÁûed\n", 
Àn
);

2021  
ªs
;

2024 
	`Ârötf
(
°dîr
, ">>> warning:ÑesponseÜength (%d) "

2025 "l⁄gîÅh™Ñeque°ed (%d)\n", 
Àn
, 
Æloc_Àn
);

2026 
Àn
 = 
Æloc_Àn
;

2029 i‡(
do_øw
)

2030 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

2031 i‡(
do_hex
)

2032 
	`dSåHex
((c⁄° *)
r•_buff
, 
Àn
, 0);

2034 
pdt
 = 
r•_buff
[0] & 0x1f;

2035 i‡(
vîbo£
 || 
do_l⁄g
)

2036 
	`¥ötf
(" [PQual=%d Peripheral deviceÅype: %s]\n",

2037 (
r•_buff
[0] & 0xe0) >> 5,

2038 
	`sg_gë_pdt_°r
(
pdt
, (
buff
), buff));

2039 
num
 = 
r•_buff
[3];

2040 i‡(
num
 > (
Àn
 - 4))

2041 
num
 = (
Àn
 - 4);

2042 
k
 = 0; k < 
num
; ++k) {

2043 
≤
 = 
r•_buff
[4 + 
k
];

2044 
v≈
 = 
	`sdp_gë_vpd_dëaû
(
≤
, -1, 
pdt
);

2045 i‡(
v≈
) {

2046 i‡(
do_l⁄g
)

2047 
	`¥ötf
(" 0x%02x %†[%s]\n", 
≤
, 
v≈
->
«me
,

2048 
v≈
->
a¸⁄
);

2050 
	`¥ötf
(" %†[%s]\n", 
v≈
->
«me
, v≈->
a¸⁄
);

2052 
	`¥ötf
(" 0x%x\n", 
≤
);

2058 
VPD_UNIT_SERIAL_NUM
:

2059 i‡((! 
do_øw
Ë&& (! 
do_quõt
))

2060 
	`¥ötf
("Unit serialÇumber VPDÖage:\n");

2061 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Æloc_Àn
, 1,

2062 
vîbo£
);

2063 i‡(0 =
ªs
) {

2064 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

2065 i‡(
num_vpd
 !
r•_buff
[1]) {

2066 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

2068 i‡(
vîbo£
) {

2069 
	`Ârötf
(
°dîr
, "First 32 bytes of badÑesponse\n");

2070 
	`dSåHex
((c⁄° *)
r•_buff
, 32, 0);

2072  
SG_LIB_CAT_MALFORMED
;

2074 i‡(
Àn
 > 
Æloc_Àn
) {

2075 i‡((0 =
maxÀn
Ë&& (
Àn
 < 
MX_ALLOC_LEN
)) {

2076 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Àn
,

2077 1, 
vîbo£
);

2078 i‡(
ªs
) {

2079 
	`Ârötf
(
°dîr
, "fetching Unit serialÇumberÖage "

2080 "◊Œoc_Àn=%dËÁûed\n", 
Àn
);

2081  
ªs
;

2084 
	`Ârötf
(
°dîr
, ">>> warning:ÑesponseÜength (%d) "

2085 "l⁄gîÅh™Ñeque°ed (%d)\n", 
Àn
, 
Æloc_Àn
);

2086 
Àn
 = 
Æloc_Àn
;

2089 i‡(
do_øw
)

2090 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

2091 i‡(
do_hex
)

2092 
	`dSåHex
((c⁄° *)
r•_buff
, 
Àn
, 0);

2094 
pdt
 = 
r•_buff
[0] & 0x1f;

2095 i‡(
vîbo£
 || 
do_l⁄g
)

2096 
	`¥ötf
(" [PQual=%d Peripheral deviceÅype: %s]\n",

2097 (
r•_buff
[0] & 0xe0) >> 5,

2098 
	`sg_gë_pdt_°r
(
pdt
, (
buff
), buff));

2099 
	`mem£t
(
obuff
, 0, (obuff));

2100 
Àn
 -= 4;

2101 i‡(
Àn
 >()(
obuff
))

2102 
Àn
 = (
obuff
) - 1;

2103 
	`mem˝y
(
obuff
, 
r•_buff
 + 4, 
Àn
);

2104 
	`¥ötf
(" Unô sîü»numbî: %s\n", 
obuff
);

2109 
VPD_DEVICE_ID
:

2110 i‡((! 
do_øw
Ë&& (! 
do_quõt
))

2111 
	`¥ötf
("Device Identification VPDÖage:\n");

2112 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Æloc_Àn
, 1,

2113 
vîbo£
);

2114 i‡(0 =
ªs
) {

2115 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

2116 i‡(
num_vpd
 !
r•_buff
[1]) {

2117 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

2119 i‡(
vîbo£
) {

2120 
	`Ârötf
(
°dîr
, "First 32 bytes of badÑesponse\n");

2121 
	`dSåHex
((c⁄° *)
r•_buff
, 32, 0);

2123  
SG_LIB_CAT_MALFORMED
;

2125 i‡(
Àn
 > 
Æloc_Àn
) {

2126 i‡((0 =
maxÀn
Ë&& (
Àn
 < 
MX_ALLOC_LEN
)) {

2127 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Àn
,

2128 1, 
vîbo£
);

2129 i‡(
ªs
) {

2130 
	`Ârötf
(
°dîr
, "fetching Device IdentificationÖage "

2131 "◊Œoc_Àn=%dËÁûed\n", 
Àn
);

2132  
ªs
;

2135 
	`Ârötf
(
°dîr
, ">>> warning:ÑesponseÜength (%d) "

2136 "l⁄gîÅh™Ñeque°ed (%d)\n", 
Àn
, 
Æloc_Àn
);

2137 
Àn
 = 
Æloc_Àn
;

2140 i‡(
do_øw
)

2141 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

2142 i‡(
do_hex
)

2143 
	`dSåHex
((c⁄° *)
r•_buff
, 
Àn
, 0);

2145 
pdt
 = 
r•_buff
[0] & 0x1f;

2146 i‡(
vîbo£
 || 
do_l⁄g
)

2147 
	`¥ötf
(" [PQual=%d Peripheral deviceÅype: %s]\n",

2148 (
r•_buff
[0] & 0xe0) >> 5,

2149 
	`sg_gë_pdt_°r
(
pdt
, (
buff
), buff));

2150 
	`decode_id_vpd
(
r•_buff
, 
Àn
, 
subvÆue
, 
do_l⁄g
, 
do_quõt
);

2155 
VPD_SOFTW_INF_ID
:

2156 i‡((! 
do_øw
Ë&& (! 
do_quõt
))

2157 
	`¥ötf
("Software interface identification VPDÖage:\n");

2158 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Æloc_Àn
, 1,

2159 
vîbo£
);

2160 i‡(0 =
ªs
) {

2161 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

2162 i‡(
num_vpd
 !
r•_buff
[1]) {

2163 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

2165 i‡(
vîbo£
) {

2166 
	`Ârötf
(
°dîr
, "First 32 bytes of badÑesponse\n");

2167 
	`dSåHex
((c⁄° *)
r•_buff
, 32, 0);

2169  
SG_LIB_CAT_MALFORMED
;

2171 i‡(
Àn
 > 
Æloc_Àn
) {

2172 i‡((0 =
maxÀn
Ë&& (
Àn
 < 
MX_ALLOC_LEN
)) {

2173 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Àn
,

2174 1, 
vîbo£
);

2175 i‡(
ªs
) {

2176 
	`Ârötf
(
°dîr
, "fetching Software interface idÖage "

2177 "◊Œoc_Àn=%dËÁûed\n", 
Àn
);

2178  
ªs
;

2181 
	`Ârötf
(
°dîr
, ">>> warning:ÑesponseÜength (%d) "

2182 "l⁄gîÅh™Ñeque°ed (%d)\n", 
Àn
, 
Æloc_Àn
);

2183 
Àn
 = 
Æloc_Àn
;

2186 i‡(
do_øw
)

2187 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

2189 
pdt
 = 
r•_buff
[0] & 0x1f;

2190 i‡(
vîbo£
 || 
do_l⁄g
)

2191 
	`¥ötf
(" [PQual=%d Peripheral deviceÅype: %s]\n",

2192 (
r•_buff
[0] & 0xe0) >> 5,

2193 
	`sg_gë_pdt_°r
(
pdt
, (
buff
), buff));

2194 
	`decode_so·w_öf_id
(
r•_buff
, 
Àn
, 
do_hex
);

2199 
VPD_MAN_NET_ADDR
:

2200 i‡((! 
do_øw
Ë&& (! 
do_quõt
))

2201 
	`¥ötf
("ManagementÇetworkáddresses VPDÖage:\n");

2202 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Æloc_Àn
, 1,

2203 
vîbo£
);

2204 i‡(0 =
ªs
) {

2205 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

2206 i‡(
num_vpd
 !
r•_buff
[1]) {

2207 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

2209 i‡(
vîbo£
) {

2210 
	`Ârötf
(
°dîr
, "First 32 bytes of badÑesponse\n");

2211 
	`dSåHex
((c⁄° *)
r•_buff
, 32, 0);

2213  
SG_LIB_CAT_MALFORMED
;

2215 i‡(
Àn
 > 
Æloc_Àn
) {

2216 i‡((0 =
maxÀn
Ë&& (
Àn
 < 
MX_ALLOC_LEN
)) {

2217 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Àn
,

2218 1, 
vîbo£
);

2219 i‡(
ªs
) {

2220 
	`Ârötf
(
°dîr
, "fetching ManagementÇetwork "

2222 
Àn
);

2223  
ªs
;

2226 
	`Ârötf
(
°dîr
, ">>> warning:ÑesponseÜength (%d) "

2227 "l⁄gîÅh™Ñeque°ed (%d)\n", 
Àn
, 
Æloc_Àn
);

2228 
Àn
 = 
Æloc_Àn
;

2231 i‡(
do_øw
)

2232 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

2234 
	`decode_√t_m™_vpd
(
r•_buff
, 
Àn
, 
do_hex
);

2238 
VPD_EXT_INQ
:

2239 i‡((! 
do_øw
Ë&& (! 
do_quõt
))

2240 
	`¥ötf
("extended INQUIRY data VPDÖage:\n");

2241 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Æloc_Àn
, 1,

2242 
vîbo£
);

2243 i‡(0 =
ªs
) {

2244 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

2245 i‡(
num_vpd
 !
r•_buff
[1]) {

2246 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

2248 i‡(
vîbo£
) {

2249 
	`Ârötf
(
°dîr
, "First 32 bytes of badÑesponse\n");

2250 
	`dSåHex
((c⁄° *)
r•_buff
, 32, 0);

2252  
SG_LIB_CAT_MALFORMED
;

2254 i‡(
Àn
 > 
Æloc_Àn
) {

2255 i‡((0 =
maxÀn
Ë&& (
Àn
 < 
MX_ALLOC_LEN
)) {

2256 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Àn
,

2257 1, 
vîbo£
);

2258 i‡(
ªs
) {

2259 
	`Ârötf
(
°dîr
, "fetching Extended INQUIRY dataÖage "

2260 "◊Œoc_Àn=%dËÁûed\n", 
Àn
);

2261  
ªs
;

2264 
	`Ârötf
(
°dîr
, ">>> warning:ÑesponseÜength (%d) "

2265 "l⁄gîÅh™Ñeque°ed (%d)\n", 
Àn
, 
Æloc_Àn
);

2266 
Àn
 = 
Æloc_Àn
;

2269 i‡(
do_øw
)

2270 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

2272 
¥Ÿe˘
 = 0;

2273 
sg_sim∂e_öquúy_ª•
 
sú
;

2275 i‡(
do_l⁄g
) {

2276 
ªs
 = 
	`sg_sim∂e_öquúy
(
sg_fd
, &
sú
, 0, 
vîbo£
);

2277 i‡(
ªs
)

2279 
¥Ÿe˘
 = 
sú
.
byã_5
 & 0x1;

2281 
pdt
 = 
r•_buff
[0] & 0x1f;

2282 i‡(
vîbo£
)

2283 
	`¥ötf
(" [PQual=%d Peripheral deviceÅype: %s]\n",

2284 (
r•_buff
[0] & 0xe0) >> 5,

2285 
	`sg_gë_pdt_°r
(
pdt
, (
buff
), buff));

2286 
	`decode_x_öq_vpd
(
r•_buff
, 
Àn
, 
do_hex
, 
do_l⁄g
, 
¥Ÿe˘
);

2291 
VPD_MODE_PG_POLICY
:

2292 i‡((! 
do_øw
Ë&& (! 
do_quõt
))

2293 
	`¥ötf
("ModeÖageÖolicy VPDÖage:\n");

2294 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Æloc_Àn
, 1,

2295 
vîbo£
);

2296 i‡(0 =
ªs
) {

2297 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

2298 i‡(
num_vpd
 !
r•_buff
[1]) {

2299 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

2301 i‡(
vîbo£
) {

2302 
	`Ârötf
(
°dîr
, "First 32 bytes of badÑesponse\n");

2303 
	`dSåHex
((c⁄° *)
r•_buff
, 32, 0);

2305  
SG_LIB_CAT_MALFORMED
;

2307 i‡(
Àn
 > 
Æloc_Àn
) {

2308 i‡((0 =
maxÀn
Ë&& (
Àn
 < 
MX_ALLOC_LEN
)) {

2309 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Àn
,

2310 1, 
vîbo£
);

2311 i‡(
ªs
) {

2312 
	`Ârötf
(
°dîr
, "fetching ModeÖageÖolicyÖage "

2313 "◊Œoc_Àn=%dËÁûed\n", 
Àn
);

2314  
ªs
;

2317 
	`Ârötf
(
°dîr
, ">>> warning:ÑesponseÜength (%d) "

2318 "l⁄gîÅh™Ñeque°ed (%d)\n", 
Àn
, 
Æloc_Àn
);

2319 
Àn
 = 
Æloc_Àn
;

2322 i‡(
do_øw
)

2323 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

2325 
pdt
 = 
r•_buff
[0] & 0x1f;

2326 i‡(
vîbo£
 || 
do_l⁄g
)

2327 
	`¥ötf
(" [PQual=%d Peripheral deviceÅype: %s]\n",

2328 (
r•_buff
[0] & 0xe0) >> 5,

2329 
	`sg_gë_pdt_°r
(
pdt
, (
buff
), buff));

2330 
	`decode_mode_pﬁicy_vpd
(
r•_buff
, 
Àn
, 
do_hex
);

2335 
VPD_SCSI_PORTS
:

2336 i‡((! 
do_øw
Ë&& (! 
do_quõt
))

2337 
	`¥ötf
("SCSI Ports VPDÖage:\n");

2338 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Æloc_Àn
, 1,

2339 
vîbo£
);

2340 i‡(0 =
ªs
) {

2341 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

2342 i‡(
num_vpd
 !
r•_buff
[1]) {

2343 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

2345 i‡(
vîbo£
) {

2346 
	`Ârötf
(
°dîr
, "First 32 bytes of badÑesponse\n");

2347 
	`dSåHex
((c⁄° *)
r•_buff
, 32, 0);

2349  
SG_LIB_CAT_MALFORMED
;

2351 i‡(
Àn
 > 
Æloc_Àn
) {

2352 i‡((0 =
maxÀn
Ë&& (
Àn
 < 
MX_ALLOC_LEN
)) {

2353 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Àn
,

2354 1, 
vîbo£
);

2355 i‡(
ªs
) {

2356 
	`Ârötf
(
°dîr
, "fetching SCSIÖortsÖage "

2357 "◊Œoc_Àn=%dËÁûed\n", 
Àn
);

2358  
ªs
;

2361 
	`Ârötf
(
°dîr
, ">>> warning:ÑesponseÜength (%d) "

2362 "l⁄gîÅh™Ñeque°ed (%d)\n", 
Àn
, 
Æloc_Àn
);

2363 
Àn
 = 
Æloc_Àn
;

2366 i‡(
do_øw
)

2367 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

2369 
pdt
 = 
r•_buff
[0] & 0x1f;

2370 i‡(
vîbo£
 || 
do_l⁄g
)

2371 
	`¥ötf
(" [PQual=%d Peripheral deviceÅype: %s]\n",

2372 (
r•_buff
[0] & 0xe0) >> 5,

2373 
	`sg_gë_pdt_°r
(
pdt
, (
buff
), buff));

2374 
	`decode_scsi_p‹ts_vpd
(
r•_buff
, 
Àn
, 
do_hex
, 
do_l⁄g
,

2375 
do_quõt
);

2380 
VPD_ATA_INFO
:

2381 i‡((! 
do_øw
Ë&& (3 !
do_hex
Ë&& (! 
do_quõt
))

2382 
	`¥ötf
("ATA information VPDÖage:\n");

2383 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Æloc_Àn
, 1,

2384 
vîbo£
);

2385 i‡(0 =
ªs
) {

2386 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

2387 i‡(
num_vpd
 !
r•_buff
[1]) {

2388 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

2390 i‡(
vîbo£
) {

2391 
	`Ârötf
(
°dîr
, "First 32 bytes of badÑesponse\n");

2392 
	`dSåHex
((c⁄° *)
r•_buff
, 32, 0);

2394  
SG_LIB_CAT_MALFORMED
;

2396 i‡(
Àn
 > 
Æloc_Àn
) {

2397 i‡((0 =
maxÀn
Ë&& (
Àn
 < 
MX_ALLOC_LEN
)) {

2398 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Àn
,

2399 1, 
vîbo£
);

2400 i‡(
ªs
) {

2401 
	`Ârötf
(
°dîr
, "fetching ATA infoÖage "

2402 "◊Œoc_Àn=%dËÁûed\n", 
Àn
);

2403  
ªs
;

2406 
	`Ârötf
(
°dîr
, ">>> warning:ÑesponseÜength (%d) "

2407 "l⁄gîÅh™Ñeque°ed (%d)\n", 
Àn
, 
Æloc_Àn
);

2408 
Àn
 = 
Æloc_Àn
;

2411 i‡((2 =
do_øw
Ë|| (3 =
do_hex
))

2412 
	`dW‹dHex
((c⁄° *)(
r•_buff
 + 60),

2413 256, -2, 
	`sg_is_big_ídün
());

2414 i‡(
do_øw
)

2415 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

2417 
pdt
 = 
r•_buff
[0] & 0x1f;

2418 i‡(
vîbo£
 || 
do_l⁄g
)

2419 
	`¥ötf
(" [PQual=%d Peripheral deviceÅype: %s]\n",

2420 (
r•_buff
[0] & 0xe0) >> 5,

2421 
	`sg_gë_pdt_°r
(
pdt
, (
buff
), buff));

2422 
	`decode_©a_öfo_vpd
(
r•_buff
, 
Àn
, 
do_l⁄g
, 
do_hex
);

2427 
VPD_POWER_CONDITION
:

2428 i‡((! 
do_øw
Ë&& (! 
do_quõt
))

2429 
	`¥ötf
("Power condition VPDÖage:\n");

2430 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Æloc_Àn
, 1,

2431 
vîbo£
);

2432 i‡(0 =
ªs
) {

2433 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

2434 i‡(
num_vpd
 !
r•_buff
[1]) {

2435 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

2437 i‡(
vîbo£
) {

2438 
	`Ârötf
(
°dîr
, "First 32 bytes of badÑesponse\n");

2439 
	`dSåHex
((c⁄° *)
r•_buff
, 32, 0);

2441  
SG_LIB_CAT_MALFORMED
;

2443 i‡(
Àn
 > 
Æloc_Àn
) {

2444 i‡((0 =
maxÀn
Ë&& (
Àn
 < 
MX_ALLOC_LEN
)) {

2445 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Àn
,

2446 1, 
vîbo£
);

2447 i‡(
ªs
) {

2448 
	`Ârötf
(
°dîr
, "fetching ATA infoÖage "

2449 "◊Œoc_Àn=%dËÁûed\n", 
Àn
);

2450  
ªs
;

2453 
	`Ârötf
(
°dîr
, ">>> warning:ÑesponseÜength (%d) "

2454 "l⁄gîÅh™Ñeque°ed (%d)\n", 
Àn
, 
Æloc_Àn
);

2455 
Àn
 = 
Æloc_Àn
;

2458 i‡(
do_øw
)

2459 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

2461 
pdt
 = 
r•_buff
[0] & 0x1f;

2462 i‡(
vîbo£
 || 
do_l⁄g
)

2463 
	`¥ötf
(" [PQual=%d Peripheral deviceÅype: %s]\n",

2464 (
r•_buff
[0] & 0xe0) >> 5,

2465 
	`sg_gë_pdt_°r
(
pdt
, (
buff
), buff));

2466 
	`decode_powî_c⁄dôi⁄
(
r•_buff
, 
Àn
, 
do_hex
);

2471 
VPD_POWER_CONSUMPTION
:

2472 i‡((! 
do_øw
Ë&& (! 
do_quõt
))

2473 
	`¥ötf
("Power consumption VPDÖage:\n");

2474 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Æloc_Àn
, 1,

2475 
vîbo£
);

2476 i‡(0 =
ªs
) {

2477 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

2478 i‡(
num_vpd
 !
r•_buff
[1]) {

2479 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

2481 i‡(
vîbo£
) {

2482 
	`Ârötf
(
°dîr
, "First 32 bytes of badÑesponse\n");

2483 
	`dSåHex
((c⁄° *)
r•_buff
, 32, 0);

2485  
SG_LIB_CAT_MALFORMED
;

2487 i‡(
Àn
 > 
Æloc_Àn
) {

2488 i‡((0 =
maxÀn
Ë&& (
Àn
 < 
MX_ALLOC_LEN
)) {

2489 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Àn
,

2490 1, 
vîbo£
);

2491 i‡(
ªs
) {

2492 
	`Ârötf
(
°dîr
, "fetching Power consumptionÖage "

2493 "◊Œoc_Àn=%dËÁûed\n", 
Àn
);

2494  
ªs
;

2497 
	`Ârötf
(
°dîr
, ">>> warning:ÑesponseÜength (%d) "

2498 "l⁄gîÅh™Ñeque°ed (%d)\n", 
Àn
, 
Æloc_Àn
);

2499 
Àn
 = 
Æloc_Àn
;

2502 i‡(
do_øw
)

2503 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

2505 
pdt
 = 
r•_buff
[0] & 0x1f;

2506 i‡(
vîbo£
 || 
do_l⁄g
)

2507 
	`¥ötf
(" [PQual=%d Peripheral deviceÅype: %s]\n",

2508 (
r•_buff
[0] & 0xe0) >> 5,

2509 
	`sg_gë_pdt_°r
(
pdt
, (
buff
), buff));

2510 
	`decode_powî_c⁄sum±i⁄_vpd
(
r•_buff
, 
Àn
, 
do_hex
);

2515 
VPD_3PARTY_COPY
:

2516 i‡((! 
do_øw
Ë&& (! 
do_quõt
))

2517 
	`¥ötf
("ThirdÖarty copy VPDÖage:\n");

2518 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Æloc_Àn
, 1,

2519 
vîbo£
);

2520 i‡(0 =
ªs
) {

2521 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

2522 i‡(
num_vpd
 !
r•_buff
[1]) {

2523 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

2525 i‡(
vîbo£
) {

2526 
	`Ârötf
(
°dîr
, "First 32 bytes of badÑesponse\n");

2527 
	`dSåHex
((c⁄° *)
r•_buff
, 32, 0);

2529  
SG_LIB_CAT_MALFORMED
;

2531 i‡(
Àn
 > 
Æloc_Àn
) {

2532 i‡((0 =
maxÀn
Ë&& (
Àn
 < 
MX_ALLOC_LEN
)) {

2533 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Àn
,

2534 1, 
vîbo£
);

2535 i‡(
ªs
) {

2536 
	`Ârötf
(
°dîr
, "fetching ThirdÖarty copyÖage "

2537 "◊Œoc_Àn=%dËÁûed\n", 
Àn
);

2538  
ªs
;

2541 
	`Ârötf
(
°dîr
, ">>> warning:ÑesponseÜength (%d) "

2542 "l⁄gîÅh™Ñeque°ed (%d)\n", 
Àn
, 
Æloc_Àn
);

2543 
Àn
 = 
Æloc_Àn
;

2546 i‡(
do_øw
)

2547 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

2548 i‡(
do_hex
)

2549 
	`dSåHex
((c⁄° *)
r•_buff
, 
Àn
, 0);

2551 
	`¥ötf
(" Leave decoding ofÅhisÖage until it is wanted, "

2553 
	`dSåHex
((c⁄° *)
r•_buff
, 
Àn
, 0);

2558 
VPD_PROTO_LU
:

2559 i‡((! 
do_øw
Ë&& (! 
do_quõt
))

2560 
	`¥ötf
("Protocol-specificÜogical unit information:\n");

2561 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Æloc_Àn
, 1,

2562 
vîbo£
);

2563 i‡(0 =
ªs
) {

2564 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

2565 i‡(
num_vpd
 !
r•_buff
[1]) {

2566 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

2568 i‡(
vîbo£
) {

2569 
	`Ârötf
(
°dîr
, "First 32 bytes of badÑesponse\n");

2570 
	`dSåHex
((c⁄° *)
r•_buff
, 32, 0);

2572  
SG_LIB_CAT_MALFORMED
;

2574 i‡(
Àn
 > 
Æloc_Àn
) {

2575 i‡((0 =
maxÀn
Ë&& (
Àn
 < 
MX_ALLOC_LEN
)) {

2576 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Àn
,

2577 1, 
vîbo£
);

2578 i‡(
ªs
) {

2579 
	`Ârötf
(
°dîr
, "fetching Protocol-specific LUÖage "

2580 "◊Œoc_Àn=%dËÁûed\n", 
Àn
);

2581  
ªs
;

2584 
	`Ârötf
(
°dîr
, ">>> warning:ÑesponseÜength (%d) "

2585 "l⁄gîÅh™Ñeque°ed (%d)\n", 
Àn
, 
Æloc_Àn
);

2586 
Àn
 = 
Æloc_Àn
;

2589 i‡(
do_øw
)

2590 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

2592 
pdt
 = 
r•_buff
[0] & 0x1f;

2593 i‡(
vîbo£
 || 
do_l⁄g
)

2594 
	`¥ötf
(" [PQual=%d Peripheral deviceÅype: %s]\n",

2595 (
r•_buff
[0] & 0xe0) >> 5,

2596 
	`sg_gë_pdt_°r
(
pdt
, (
buff
), buff));

2597 
	`decode_¥Ÿo_lu_vpd
(
r•_buff
, 
Àn
, 
do_hex
);

2602 
VPD_PROTO_PORT
:

2603 i‡((! 
do_øw
Ë&& (! 
do_quõt
))

2604 
	`¥ötf
("Protocol-specificÖort information:\n");

2605 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Æloc_Àn
, 1,

2606 
vîbo£
);

2607 i‡(0 =
ªs
) {

2608 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

2609 i‡(
num_vpd
 !
r•_buff
[1]) {

2610 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

2612 i‡(
vîbo£
) {

2613 
	`Ârötf
(
°dîr
, "First 32 bytes of badÑesponse\n");

2614 
	`dSåHex
((c⁄° *)
r•_buff
, 32, 0);

2616  
SG_LIB_CAT_MALFORMED
;

2618 i‡(
Àn
 > 
Æloc_Àn
) {

2619 i‡((0 =
maxÀn
Ë&& (
Àn
 < 
MX_ALLOC_LEN
)) {

2620 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Àn
,

2621 1, 
vîbo£
);

2622 i‡(
ªs
) {

2623 
	`Ârötf
(
°dîr
, "fetching Protocol-specificÖortÖage "

2624 "◊Œoc_Àn=%dËÁûed\n", 
Àn
);

2625  
ªs
;

2628 
	`Ârötf
(
°dîr
, ">>> warning:ÑesponseÜength (%d) "

2629 "l⁄gîÅh™Ñeque°ed (%d)\n", 
Àn
, 
Æloc_Àn
);

2630 
Àn
 = 
Æloc_Àn
;

2633 i‡(
do_øw
)

2634 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

2636 
pdt
 = 
r•_buff
[0] & 0x1f;

2637 i‡(
vîbo£
 || 
do_l⁄g
)

2638 
	`¥ötf
(" [PQual=%d Peripheral deviceÅype: %s]\n",

2639 (
r•_buff
[0] & 0xe0) >> 5,

2640 
	`sg_gë_pdt_°r
(
pdt
, (
buff
), buff));

2641 
	`decode_¥Ÿo_p‹t_vpd
(
r•_buff
, 
Àn
, 
do_hex
);

2647 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Æloc_Àn
, 1,

2648 
vîbo£
);

2649 i‡(0 =
ªs
) {

2650 
pdt
 = 
r•_buff
[0] & 0x1f;

2651 i‡((! 
do_øw
Ë&& (! 
do_quõt
)) {

2652 
pdt
) {

2654 
	`¥ötf
("BlockÜimits VPDÖage (SBC):\n");

2657 
	`¥ötf
("Sequentialáccess device capabilities VPDÖage "

2661 
	`¥ötf
("OSD information VPDÖage (OSD):\n");

2664 
	`¥ötf
("VPDÖage=0x%x,Ödt=0x%x:\n", 0xb0, 
pdt
);

2668 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

2669 i‡(
num_vpd
 !
r•_buff
[1]) {

2670 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

2672 i‡(
vîbo£
) {

2673 
	`Ârötf
(
°dîr
, "First 32 bytes of badÑesponse\n");

2674 
	`dSåHex
((c⁄° *)
r•_buff
, 32, 0);

2676  
SG_LIB_CAT_MALFORMED
;

2678 i‡(
Àn
 > 
Æloc_Àn
) {

2679 i‡((0 =
maxÀn
Ë&& (
Àn
 < 
MX_ALLOC_LEN
)) {

2680 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Àn
,

2681 1, 
vîbo£
);

2682 i‡(
ªs
) {

2683 
	`Ârötf
(
°dîr
, "fetching 0xb0Öage "

2684 "◊Œoc_Àn=%dËÁûed\n", 
Àn
);

2685  
ªs
;

2688 
	`Ârötf
(
°dîr
, ">>> warning:ÑesponseÜength (%d) "

2689 "l⁄gîÅh™Ñeque°ed (%d)\n", 
Àn
, 
Æloc_Àn
);

2690 
Àn
 = 
Æloc_Àn
;

2693 i‡(
do_øw
)

2694 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

2696 
pdt
 = 
r•_buff
[0] & 0x1f;

2697 i‡(
vîbo£
 || 
do_l⁄g
)

2698 
	`¥ötf
(" [PQual=%d Peripheral deviceÅype: %s]\n",

2699 (
r•_buff
[0] & 0xe0) >> 5,

2700 
	`sg_gë_pdt_°r
(
pdt
, (
buff
), buff));

2701 
	`decode_b0_vpd
(
r•_buff
, 
Àn
, 
do_hex
, 
pdt
);

2704 } i‡(! 
do_øw
)

2705 
	`¥ötf
("VPDÖage=0xb0\n");

2708 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Æloc_Àn
, 1,

2709 
vîbo£
);

2710 i‡(0 =
ªs
) {

2711 
pdt
 = 
r•_buff
[0] & 0x1f;

2712 i‡((! 
do_øw
Ë&& (! 
do_quõt
)) {

2713 
pdt
) {

2714 
PDT_DISK
: 
PDT_WO
: 
PDT_OPTICAL
:

2715 
	`¥ötf
("Block device characteristics VPDÖage (SBC):\n");

2717 
PDT_TAPE
: 
PDT_MCHANGER
:

2718 
	`¥ötf
("Manufacturedássigned serialÇumber VPDÖage "

2721 
PDT_OSD
:

2722 
	`¥ötf
("SecurityÅoken VPDÖage (OSD):\n");

2724 
PDT_ADC
:

2725 
	`¥ötf
("Manufacturedássigned serialÇumber VPDÖage "

2729 
	`¥ötf
("VPDÖage=0x%x,Ödt=0x%x:\n", 0xb1, 
pdt
);

2733 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

2734 i‡(
num_vpd
 !
r•_buff
[1]) {

2735 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

2737 i‡(
vîbo£
) {

2738 
	`Ârötf
(
°dîr
, "First 32 bytes of badÑesponse\n");

2739 
	`dSåHex
((c⁄° *)
r•_buff
, 32, 0);

2741  
SG_LIB_CAT_MALFORMED
;

2743 i‡(
Àn
 > 
Æloc_Àn
) {

2744 i‡((0 =
maxÀn
Ë&& (
Àn
 < 
MX_ALLOC_LEN
)) {

2745 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Àn
,

2746 1, 
vîbo£
);

2747 i‡(
ªs
) {

2748 
	`Ârötf
(
°dîr
, "fetching 0xb1Öage "

2749 "◊Œoc_Àn=%dËÁûed\n", 
Àn
);

2750  
ªs
;

2753 
	`Ârötf
(
°dîr
, ">>> warning:ÑesponseÜength (%d) "

2754 "l⁄gîÅh™Ñeque°ed (%d)\n", 
Àn
, 
Æloc_Àn
);

2755 
Àn
 = 
Æloc_Àn
;

2758 i‡(
do_øw
)

2759 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

2761 
pdt
 = 
r•_buff
[0] & 0x1f;

2762 i‡(
vîbo£
 || 
do_l⁄g
)

2763 
	`¥ötf
(" [PQual=%d Peripheral deviceÅype: %s]\n",

2764 (
r•_buff
[0] & 0xe0) >> 5,

2765 
	`sg_gë_pdt_°r
(
pdt
, (
buff
), buff));

2766 
	`decode_b1_vpd
(
r•_buff
, 
Àn
, 
do_hex
, 
pdt
);

2769 } i‡(! 
do_øw
)

2770 
	`¥ötf
("VPDÖage=0xb1\n");

2773 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Æloc_Àn
, 1,

2774 
vîbo£
);

2775 i‡(0 =
ªs
) {

2776 
pdt
 = 
r•_buff
[0] & 0x1f;

2777 i‡((! 
do_øw
Ë&& (! 
do_quõt
)) {

2778 
pdt
) {

2779 
PDT_DISK
: 
PDT_WO
: 
PDT_OPTICAL
:

2780 
	`¥ötf
("Logical blockÖrovisioning VPDÖage (SBC):\n");

2782 
PDT_TAPE
: 
PDT_MCHANGER
:

2783 
	`¥ötf
("TapeAlert supported flags VPDÖage (SSC):\n");

2786 
	`¥ötf
("VPDÖage=0x%x,Ödt=0x%x:\n", 0xb2, 
pdt
);

2790 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

2791 i‡(
num_vpd
 !
r•_buff
[1]) {

2792 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

2794 i‡(
vîbo£
) {

2795 
	`Ârötf
(
°dîr
, "First 32 bytes of badÑesponse\n");

2796 
	`dSåHex
((c⁄° *)
r•_buff
, 32, 0);

2798  
SG_LIB_CAT_MALFORMED
;

2800 i‡(
Àn
 > 
Æloc_Àn
) {

2801 i‡((0 =
maxÀn
Ë&& (
Àn
 < 
MX_ALLOC_LEN
)) {

2802 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Àn
,

2803 1, 
vîbo£
);

2804 i‡(
ªs
) {

2805 
	`Ârötf
(
°dîr
, "fetching 0xb2Öage "

2806 "◊Œoc_Àn=%dËÁûed\n", 
Àn
);

2807  
ªs
;

2810 
	`Ârötf
(
°dîr
, ">>> warning:ÑesponseÜength (%d) "

2811 "l⁄gîÅh™Ñeque°ed (%d)\n", 
Àn
, 
Æloc_Àn
);

2812 
Àn
 = 
Æloc_Àn
;

2815 i‡(
do_øw
)

2816 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

2818 
pdt
 = 
r•_buff
[0] & 0x1f;

2819 i‡(
vîbo£
 || 
do_l⁄g
)

2820 
	`¥ötf
(" [PQual=%d Peripheral deviceÅype: %s]\n",

2821 (
r•_buff
[0] & 0xe0) >> 5,

2822 
	`sg_gë_pdt_°r
(
pdt
, (
buff
), buff));

2823 
	`decode_b2_vpd
(
r•_buff
, 
Àn
, 
do_hex
, 
pdt
);

2826 } i‡(! 
do_øw
)

2827 
	`¥ötf
("VPDÖage=0xb2\n");

2830 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Æloc_Àn
, 1,

2831 
vîbo£
);

2832 i‡(0 =
ªs
) {

2833 
pdt
 = 
r•_buff
[0] & 0x1f;

2834 i‡((! 
do_øw
Ë&& (! 
do_quõt
)) {

2835 
pdt
) {

2836 
PDT_DISK
: 
PDT_WO
: 
PDT_OPTICAL
:

2837 
	`¥ötf
("Referrals VPDÖage (SBC):\n");

2839 
PDT_TAPE
: 
PDT_MCHANGER
:

2840 
	`¥ötf
("Automation device serialÇumber VPDÖage "

2844 
	`¥ötf
("VPDÖage=0x%x,Ödt=0x%x:\n", 0xb3, 
pdt
);

2848 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

2849 i‡(
num_vpd
 !
r•_buff
[1]) {

2850 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

2852 i‡(
vîbo£
) {

2853 
	`Ârötf
(
°dîr
, "First 32 bytes of badÑesponse\n");

2854 
	`dSåHex
((c⁄° *)
r•_buff
, 32, 0);

2856  
SG_LIB_CAT_MALFORMED
;

2858 i‡(
Àn
 > 
Æloc_Àn
) {

2859 i‡((0 =
maxÀn
Ë&& (
Àn
 < 
MX_ALLOC_LEN
)) {

2860 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Àn
,

2861 1, 
vîbo£
);

2862 i‡(
ªs
) {

2863 
	`Ârötf
(
°dîr
, "fetching VPDÖage 0x%x "

2864 "◊Œoc_Àn=%dËÁûed\n", 
num_vpd
, 
Àn
);

2865  
ªs
;

2868 
	`Ârötf
(
°dîr
, ">>> warning:ÑesponseÜength (%d) "

2869 "l⁄gîÅh™Ñeque°ed (%d)\n", 
Àn
, 
Æloc_Àn
);

2870 
Àn
 = 
Æloc_Àn
;

2873 i‡(
do_øw
)

2874 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

2876 
pdt
 = 
r•_buff
[0] & 0x1f;

2877 i‡(
vîbo£
 || 
do_l⁄g
)

2878 
	`¥ötf
(" [PQual=%d Peripheral deviceÅype: %s]\n",

2879 (
r•_buff
[0] & 0xe0) >> 5,

2880 
	`sg_gë_pdt_°r
(
pdt
, (
buff
), buff));

2881 
	`decode_b3_vpd
(
r•_buff
, 
Àn
, 
do_hex
, 
pdt
);

2884 } i‡(! 
do_øw
)

2885 
	`¥ötf
("VPDÖage=0xb3\n");

2887 
VPD_DTDE_ADDRESS
:

2888 i‡((! 
do_øw
Ë&& (! 
do_quõt
))

2889 
	`¥ötf
("DataÅransfer deviceÉlementáddress (SSC):\n");

2890 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Æloc_Àn
, 1,

2891 
vîbo£
);

2892 i‡(0 =
ªs
) {

2893 
Àn
 = ((
r•_buff
[2] << 8) +Ñsp_buff[3]) + 4;

2894 i‡(
num_vpd
 !
r•_buff
[1]) {

2895 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;Örobablyá STANDARD "

2897 i‡(
vîbo£
) {

2898 
	`Ârötf
(
°dîr
, "First 32 bytes of badÑesponse\n");

2899 
	`dSåHex
((c⁄° *)
r•_buff
, 32, 0);

2901  
SG_LIB_CAT_MALFORMED
;

2903 i‡(
Àn
 > 
Æloc_Àn
) {

2904 i‡((0 =
maxÀn
Ë&& (
Àn
 < 
MX_ALLOC_LEN
)) {

2905 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Àn
,

2906 1, 
vîbo£
);

2907 i‡(
ªs
) {

2908 
	`Ârötf
(
°dîr
, "fetching DataÅransfer device "

2910 "Áûed\n", 
Àn
);

2911  
ªs
;

2914 
	`Ârötf
(
°dîr
, ">>> warning:ÑesponseÜength (%d) "

2915 "l⁄gîÅh™Ñeque°ed (%d)\n", 
Àn
, 
Æloc_Àn
);

2916 
Àn
 = 
Æloc_Àn
;

2919 i‡(
do_øw
)

2920 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

2922 
pdt
 = 
r•_buff
[0] & 0x1f;

2923 i‡(
vîbo£
 || 
do_l⁄g
)

2924 
	`¥ötf
(" [PQual=%d Peripheral deviceÅype: %s]\n",

2925 (
r•_buff
[0] & 0xe0) >> 5,

2926 
	`sg_gë_pdt_°r
(
pdt
, (
buff
), buff));

2927 
	`¥ötf
(" DataÅransfer deviceÉlementáddress: 0x");

2928 
k
 = 4; k < 
Àn
; ++k)

2929 
	`¥ötf
("%02x", ()
r•_buff
[
k
]);

2930 
	`¥ötf
("\n");

2936  
SG_LIB_SYNTAX_ERROR
;

2938  
ªs
;

2939 
	}
}

2943 
	$maö
(
¨gc
, * 
¨gv
[])

2945 
sg_fd
, 
c
, 
ªs
;

2946 c⁄° * 
devi˚_«me
 = 
NULL
;

2947 c⁄° 
svpd_vÆues_«me_t
 * 
v≈
;

2948 c⁄° * 
∑ge_°r
 = 
NULL
;

2949 c⁄° * 
˝
;

2950 
num_vpd
 = 0;

2951 
do_hex
 = 0;

2952 
do_idít
 = 0;

2953 
do_l⁄g
 = 0;

2954 
maxÀn
 = 0;

2955 
do_quõt
 = 0;

2956 
do_øw
 = 0;

2957 
do_vîbo£
 = 0;

2958 
ªt
 = 0;

2959 
subvÆue
 = 0;

2962 
›ti⁄_ödex
 = 0;

2964 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "ehHûm:p:qrvV", 
l⁄g_›ti⁄s
,

2965 &
›ti⁄_ödex
);

2966 i‡(
c
 == -1)

2969 
c
) {

2971 
	`¥ötf
("Standard VPDÖages:\n");

2972 
	`íumî©e_vpds
(1, 1);

2976 
	`ußge
();

2979 ++
do_hex
;

2982 ++
do_idít
;

2985 ++
do_l⁄g
;

2988 
maxÀn
 = 
	`sg_gë_num
(
›èrg
);

2989 i‡((
maxÀn
 < 0Ë|| (maxÀ¿> 
MX_ALLOC_LEN
)) {

2990 
	`Ârötf
(
°dîr
, "argumentÅo '--maxlen' should be %d or "

2991 "Àss\n", 
MX_ALLOC_LEN
);

2992  
SG_LIB_SYNTAX_ERROR
;

2996 i‡(
∑ge_°r
) {

2997 
	`Ârötf
(
°dîr
, "only one '--page=' optionÖermitted\n");

2998 
	`ußge
();

2999  
SG_LIB_SYNTAX_ERROR
;

3001 
∑ge_°r
 = 
›èrg
;

3004 ++
do_quõt
;

3007 ++
do_øw
;

3010 ++
do_vîbo£
;

3013 
	`Ârötf
(
°dîr
, "vîsi⁄: %s\n", 
vîsi⁄_°r
);

3016 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê0x%x ??\n", 
c
);

3017 
	`ußge
();

3018  
SG_LIB_SYNTAX_ERROR
;

3021 i‡(
›töd
 < 
¨gc
) {

3022 i‡(
NULL
 =
devi˚_«me
) {

3023 
devi˚_«me
 = 
¨gv
[
›töd
];

3024 ++
›töd
;

3026 i‡(
›töd
 < 
¨gc
) {

3027 ; 
›töd
 < 
¨gc
; ++optind)

3028 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

3029 
¨gv
[
›töd
]);

3030 
	`ußge
();

3031  
SG_LIB_SYNTAX_ERROR
;

3034 i‡(
∑ge_°r
) {

3035 i‡((0 =
	`°rcmp
("-1", 
∑ge_°r
)) || (0 == strcmp("-2",Öage_str)))

3036 
num_vpd
 = 
VPD_NOT_STD_INQ
;

3037 i‡(
	`ißÕha
(
∑ge_°r
[0])) {

3038 
v≈
 = 
	`sdp_föd_vpd_by_a¸⁄
(
∑ge_°r
);

3039 i‡(
NULL
 =
v≈
) {

3040 
v≈
 = 
	`svpd_föd_víd‹_by_a¸⁄
(
∑ge_°r
);

3041 i‡(
NULL
 =
v≈
) {

3042 
	`Ârötf
(
°dîr
, "abbreviation doesn't matchá VPD "

3044 
	`¥ötf
("available VPDÖages:\n");

3045 
	`íumî©e_vpds
(1, 1);

3046  
SG_LIB_SYNTAX_ERROR
;

3049 
num_vpd
 = 
v≈
->
vÆue
;

3050 
subvÆue
 = 
v≈
->subvalue;

3052 
˝
 = 
	`°rchr
(
∑ge_°r
, ',');

3053 
num_vpd
 = 
	`sg_gë_num_nomu…
(
∑ge_°r
);

3054 i‡((
num_vpd
 < 0) || (num_vpd > 255)) {

3055 
	`Ârötf
(
°dîr
, "BadÖage code valueáfter '-p' "

3057 
	`¥ötf
("available VPDÖages:\n");

3058 
	`íumî©e_vpds
(1, 1);

3059  
SG_LIB_SYNTAX_ERROR
;

3061 i‡(
˝
) {

3062 
subvÆue
 = 
	`sg_gë_num_nomu…
(
˝
 + 1);

3063 i‡((
subvÆue
 < 0) || (subvalue > 255)) {

3064 
	`Ârötf
(
°dîr
, "Bad subvalue code valueáfter "

3066  
SG_LIB_SYNTAX_ERROR
;

3072 i‡(
do_øw
 && 
do_hex
) {

3073 
	`Ârötf
(
°dîr
, "Can't do hexándÑawátÅhe sameÅime\n");

3074 
	`ußge
();

3075  
SG_LIB_SYNTAX_ERROR
;

3077 i‡(
do_idít
) {

3078 
num_vpd
 = 
VPD_DEVICE_ID
;

3079 i‡(
do_idít
 > 1) {

3080 i‡(0 =
do_l⁄g
)

3081 ++
do_quõt
;

3082 
subvÆue
 = 
VPD_DI_SEL_LU
;

3085 i‡(
NULL
 =
devi˚_«me
) {

3086 
	`Ârötf
(
°dîr
, "No DEVICEárgument given\n");

3087 
	`ußge
();

3088  
SG_LIB_SYNTAX_ERROR
;

3090 i‡(
do_øw
) {

3091 i‡(
	`sg_£t_bö¨y_mode
(
STDOUT_FILENO
) < 0) {

3092 
	`≥º‹
("sg_set_binary_mode");

3093  
SG_LIB_FILE_ERROR
;

3097 i‡((
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 1 ,

3098 
do_vîbo£
)) < 0) {

3099 
	`Ârötf
(
°dîr
, "error opening file: %s: %s\n",

3100 
devi˚_«me
, 
	`ß„_°ªº‹
(-
sg_fd
));

3101  
SG_LIB_FILE_ERROR
;

3103 
	`mem£t
(
r•_buff
, 0, (rsp_buff));

3105 
ªs
 = 
	`svpd_decode_t10
(
sg_fd
, 
num_vpd
, 
subvÆue
, 
maxÀn
, 
do_hex
, 
do_øw
,

3106 
do_l⁄g
, 
do_quõt
, 
do_vîbo£
);

3107 i‡(
SG_LIB_SYNTAX_ERROR
 =
ªs
) {

3108 
ªs
 = 
	`svpd_decode_víd‹
(
sg_fd
, 
num_vpd
, 
subvÆue
, 
maxÀn
, 
do_hex
,

3109 
do_øw
, 
do_l⁄g
, 
do_quõt
, 
do_vîbo£
);

3110 i‡(
SG_LIB_SYNTAX_ERROR
 =
ªs
)

3111 
ªs
 = 
	`svpd_u«bÀ_to_decode
(
sg_fd
, 
num_vpd
, 
subvÆue
, 
maxÀn
,

3112 
do_hex
, 
do_øw
, 
do_l⁄g
, 
do_quõt
,

3113 
do_vîbo£
);

3115 i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
)

3116 
	`Ârötf
(
°dîr
, "fetching VPDÖage failed,áborted command\n");

3117 i‡(
ªs
)

3118 
	`Ârötf
(
°dîr
, "fetching VPDÖage failed\n");

3119 
ªt
 = 
ªs
;

3120 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

3121 i‡(
ªs
 < 0) {

3122 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

3123 i‡(0 =
ªt
)

3124  
SG_LIB_FILE_ERROR
;

3126  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

3127 
	}
}

	@src/sg_vpd_vendor.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	#__STDC_FORMAT_MACROS
 1

	)

14 
	~<öây≥s.h
>

16 #i‚de‡
SG_LIB_MINGW


17 
	~<time.h
>

20 #ifde‡
HAVE_CONFIG_H


21 
	~"c⁄fig.h
"

23 
	~"sg_lib.h
"

24 
	~"sg_cmds_basic.h
"

46 
	#VPD_V_HP3PAR
 0xc0

	)

47 
	#VPD_V_FIRM_SEA
 0xc0

	)

48 
	#VPD_V_UPR_EMC
 0xc0

	)

49 
	#VPD_V_HVER_RDAC
 0xc0

	)

50 
	#VPD_V_DATC_SEA
 0xc1

	)

51 
	#VPD_V_FVER_RDAC
 0xc1

	)

52 
	#VPD_V_JUMP_SEA
 0xc2

	)

53 
	#VPD_V_SVER_RDAC
 0xc2

	)

54 
	#VPD_V_DEV_BEH_SEA
 0xc3

	)

55 
	#VPD_V_FEAT_RDAC
 0xc3

	)

56 
	#VPD_V_SUBS_RDAC
 0xc4

	)

57 
	#VPD_V_EDID_RDAC
 0xc8

	)

58 
	#VPD_V_VAC_RDAC
 0xc9

	)

59 
	#VPD_V_RVSI_RDAC
 0xˇ

	)

60 
	#VPD_V_SAID_RDAC
 0xd0

	)

63 
	#DEF_ALLOC_LEN
 252

	)

64 
	#MX_ALLOC_LEN
 (0xc000 + 0x80)

	)

68 
	ssvpd_vÆues_«me_t
 {

69 
	mvÆue
;

70 
	msubvÆue
;

72 
	mpdt
;

74 
	mvíd‹
;

75 c⁄° * 
	ma¸⁄
;

76 c⁄° * 
	m«me
;

81 
	gr•_buff
[
MX_ALLOC_LEN
 + 2];

87 
svpd_vÆues_«me_t
 
	gvíd‹_vpd_pg
[] = {

88 {
VPD_V_DATC_SEA
, 0, -1, 1, "datc", "Date code (Seagate)"},

89 {
VPD_V_DEV_BEH_SEA
, 0, -1, 1, "devb", "Device behavior (Seagate)"},

90 {
VPD_V_EDID_RDAC
, 0, -1, 1, "edid", "Extended device identification "

92 {
VPD_V_FEAT_RDAC
, 1, -1, 1, "feat", "Feature Parameters (RDAC)"},

93 {
VPD_V_FIRM_SEA
, 0, -1, 1, "firm", "FirmwareÇumbers (Seagate)"},

94 {
VPD_V_FVER_RDAC
, 1, -1, 1, "fver", "Firmware version (RDAC)"},

95 {
VPD_V_HP3PAR
, 2, -1, 1, "hp3par", "Volume information (HP/3PAR)"},

96 {
VPD_V_HVER_RDAC
, 3, -1, 1, "hver", "Hardware version (RDAC)"},

97 {
VPD_V_JUMP_SEA
, 0, -1, 1, "jump", "Jump setting (Seagate)"},

98 {
VPD_V_RVSI_RDAC
, 0, -1, 1, "rvsi", "Replicated volume source "

100 {
VPD_V_SAID_RDAC
, 0, -1, 1, "said", "Storageárray world wideÇame "

102 {
VPD_V_SUBS_RDAC
, 0, -1, 1, "sub", "Subsystem identifier (RDAC)"},

103 {
VPD_V_SVER_RDAC
, 1, -1, 1, "sver", "Software version (RDAC)"},

104 {
VPD_V_UPR_EMC
, 1, -1, 1, "upr", "UnitÖathÑeport (EMC)"},

105 {
VPD_V_VAC_RDAC
, 0, -1, 1, "vac", "Volumeáccess control (RDAC)"},

106 {0, 0, 0, 0, 
NULL
, NULL},

109 c⁄° 
svpd_vÆues_«me_t
 *

110 
	$svpd_gë_v_dëaû
(
∑ge_num
, 
subvÆue
, 
pdt
)

112 c⁄° 
svpd_vÆues_«me_t
 * 
v≈
;

113 
sv
, 
ty
;

115 
sv
 = (
subvÆue
 < 0) ? 1 : 0;

116 
ty
 = (
pdt
 < 0) ? 1 : 0;

117 
v≈
 = 
víd‹_vpd_pg
; v≈->
a¸⁄
; ++vnp) {

118 i‡((
∑ge_num
 =
v≈
->
vÆue
) &&

119 (
sv
 || (
subvÆue
 =
v≈
->subvalue)) &&

120 (
ty
 || (
pdt
 =
v≈
->pdt)))

121  
v≈
;

123 i‡(! 
ty
)

124  
	`svpd_gë_v_dëaû
(
∑ge_num
, 
subvÆue
, -1);

125 i‡(! 
sv
)

126  
	`svpd_gë_v_dëaû
(
∑ge_num
, -1, -1);

127  
NULL
;

128 
	}
}

130 c⁄° 
svpd_vÆues_«me_t
 *

131 
	$svpd_föd_víd‹_by_a¸⁄
(c⁄° * 
≠
)

133 c⁄° 
svpd_vÆues_«me_t
 * 
v≈
;

135 
v≈
 = 
víd‹_vpd_pg
; v≈->
a¸⁄
; ++vnp) {

136 i‡(0 =
	`°rcmp
(
v≈
->
a¸⁄
, 
≠
))

137  
v≈
;

139  
NULL
;

140 
	}
}

143 
	$svpd_íumî©e_víd‹
()

145 c⁄° 
svpd_vÆues_«me_t
 * 
v≈
;

146 
£í
;

148 
£í
 = 0, 
v≈
 = 
víd‹_vpd_pg
; v≈->
a¸⁄
; ++vnp) {

149 i‡(
v≈
->
«me
) {

150 i‡(! 
£í
) {

151 
	`¥ötf
("\nVendor specific VPDÖages:\n");

152 
£í
 = 1;

154 
	`¥ötf
(" %-10†0x%02x,%d %s\n", 
v≈
->
a¸⁄
,

155 
v≈
->
vÆue
, v≈->
subvÆue
, v≈->
«me
);

158 
	}
}

161 
	$dSåRaw
(c⁄° * 
°r
, 
Àn
)

163 
k
;

165 
k
 = 0 ; k < 
Àn
; ++k)

166 
	`¥ötf
("%c", 
°r
[
k
]);

167 
	}
}

170 
	$decode_vpd_c0_hp3∑r
(* 
buff
, 
Àn
)

172 
ªv
;

173 
off£t
;

175 i‡(
Àn
 < 24) {

176 
	`Ârötf
(
°dîr
, "HP/3PAR vendor specific VPDÖageÜengthÅoo "

177 "sh‹t=%d\n", 
Àn
);

181 
ªv
 = 
buff
[4];

182 
	`¥ötf
(" Pagêªvisi⁄: %d\n", 
ªv
);

184 
	`¥ötf
(" Vﬁumêty≥: %s\n", (
buff
[5] & 0x01) ? "tpvv" :

185 (
buff
[5] & 0x02) ? "snap" : "base");

186 
	`¥ötf
(" Re˛aim suµ‹ãd: %s\n", (
buff
[5] & 0x04) ? "yes" : "no");

187 
	`¥ötf
(" ATS suµ‹ãd: %s\n", (
buff
[5] & 0x10) ? "yes" : "no");

188 
	`¥ötf
(" XC›y suµ‹ãd: %s\n", (
buff
[5] & 0x20) ? "yes" : "no");

190 i‡(
ªv
 > 3) {

191 
	`¥ötf
(" VV ID: %" 
PRIu64
 "\n", ((
uöt64_t
Ë
buff
[28] << 56) +

192 ((
uöt64_t
Ë
buff
[29] << 48) + ((uint64_t) buff[30] << 40) +

193 ((
uöt64_t
Ë
buff
[31] << 32) + ((uint64_t) buff[32] << 24) +

194 (
buff
[33] << 16) + (buff[34] << 8) + buff[35]);

196 
off£t
 = 44;

197 
	`¥ötf
(" Vﬁumê«me: %s\n", &
buff
[
off£t
]);

199 
	`¥ötf
(" Domaö ID: %d\n", (
buff
[36] << 24) + (buff[37] << 16) +

200 (
buff
[38] << 8) + buff[39]);

202 
off£t
 +(
buff
[offset - 4] << 24) + (buff[offset - 3] << 16) +

203 (
buff
[
off£t
 - 2] << 8) + buff[offset - 1] + 4;

204 
	`¥ötf
(" Domaö Name: %s\n", &
buff
[
off£t
]);

206 
off£t
 +(
buff
[offset - 4] << 24) + (buff[offset - 3] << 16) +

207 (
buff
[
off£t
 - 2] << 8) + buff[offset - 1] + 4;

208 
	`¥ötf
(" U£∏CPG: %s\n", &
buff
[
off£t
]);

210 
off£t
 +(
buff
[offset - 4] << 24) + (buff[offset - 3] << 16) +

211 (
buff
[
off£t
 - 2] << 8) + buff[offset - 1] + 4;

212 
	`¥ötf
(" S«∞CPG: %s\n", &
buff
[
off£t
]);

214 
off£t
 +(
buff
[offset - 4] << 24) + (buff[offset - 3] << 16) +

215 (
buff
[
off£t
 - 2] << 8) + buff[offset - 1];

217 
	`¥ötf
(" VVÖolicies: %s,%s,%s,%s\n",

218 (
buff
[
off£t
 + 3] & 0x01) ? "stale_ss" : "no_stale_ss",

219 (
buff
[
off£t
 + 3] & 0x02) ? "one_host" : "no_one_host",

220 (
buff
[
off£t
 + 3] & 0x04) ? "tp_bzero" : "no_tp_bzero",

221 (
buff
[
off£t
 + 3] & 0x08) ? "zero_detect" : "no_zero_detect");

225 i‡(
buff
[5] & 0x04) {

226 
	`¥ötf
(" AŒoˇti⁄ unô: %d\n", (
buff
[8] << 24) + (buff[9] << 16) +

227 (
buff
[10] << 8) + buff[11]);

229 
	`¥ötf
(" D©®poﬁ size: %" 
PRIu64
 "\n",

230 (((
uöt64_t
)
buff
[12]) << 56) + (((uint64_t)buff[13]) << 48) +

231 (((
uöt64_t
)
buff
[14]) << 40) + (((uint64_t)buff[15]) << 32) +

232 (((
uöt64_t
)
buff
[16]) << 24) + (buff[17] << 16) +

233 (
buff
[18] << 8) + buff[19]);

235 
	`¥ötf
(" S∑˚áŒoˇãd: %" 
PRIu64
 "\n",

236 (((
uöt64_t
)
buff
[20]) << 56) + (((uint64_t)buff[21]) << 48) +

237 (((
uöt64_t
)
buff
[22]) << 40) + (((uint64_t)buff[23]) << 32) +

238 (((
uöt64_t
)
buff
[24]) << 24) + (buff[25] << 16) +

239 (
buff
[26] << 8) + buff[27]);

242 
	}
}

246 
	$decode_fúm_vpd_c0_£a
(* 
buff
, 
Àn
)

248 i‡(
Àn
 < 28) {

249 
	`Ârötf
(
°dîr
, "Seagate firmwareÇumbers VPDÖageÜengthÅoo "

250 "sh‹t=%d\n", 
Àn
);

253 i‡(28 =
Àn
) {

254 
	`¥ötf
(" SCSI fúmw¨êªÀa£Çumbî: %.8s\n", 
buff
 + 4);

255 
	`¥ötf
(" SîvÿROMÑñó£Çumbî: %.8s\n", 
buff
 + 20);

257 
	`¥ötf
(" SCSI fúmw¨êªÀa£Çumbî: %.8s\n", 
buff
 + 4);

258 
	`¥ötf
(" SîvÿROMÑñó£Çumbî: %.8s\n", 
buff
 + 12);

259 
	`¥ötf
(" SAP blockÖoöànumbî†(maj‹/mö‹): %.8s\n", 
buff
 + 20);

260 i‡(
Àn
 < 36)

262 
	`¥ötf
(" Sîvÿfúmw¨êªÀa£ d©e: %.4s\n", 
buff
 + 28);

263 
	`¥ötf
(" SîvÿROMÑñó£ d©e: %.4s\n", 
buff
 + 32);

264 i‡(
Àn
 < 44)

266 
	`¥ötf
(" SAP fúmw¨êªÀa£Çumbî: %.8s\n", 
buff
 + 36);

267 i‡(
Àn
 < 52)

269 
	`¥ötf
(" SAP fúmw¨êªÀa£ d©e: %.4s\n", 
buff
 + 44);

270 
	`¥ötf
(" SAP fúmw¨êªÀa£ yór: %.4s\n", 
buff
 + 48);

271 i‡(
Àn
 < 60)

273 
	`¥ötf
(" SAP m™uÁ˘urög key: %.4s\n", 
buff
 + 52);

274 
	`¥ötf
(" Servo firmwareÖroduct familyándÖroduct family "

275 "membî: %.4s\n", 
buff
 + 56);

277 
	}
}

279 c⁄° * 
	glun_°©e_¨r
[] =

286 c⁄° * 
	gù_mgmt_¨r
[] =

294 c⁄° * 
	g•_¨r
[] =

300 c⁄° * 
	glun_›_¨r
[] =

306 c⁄° * 
	gÁûovî_mode_¨r
[] =

327 
	$decode_u¥_vpd_c0_emc
(* 
buff
, 
Àn
)

329 
k
, 
ù_mgmt
, 
vµ80
, 
lun_z
;

331 i‡(
Àn
 < 3) {

332 
	`Ârötf
(
°dîr
, "EMC upr VPDÖage [0xc0]:ÜengthÅoo short=%d\n",

333 
Àn
);

336 i‡(
buff
[9] != 0x00) {

337 
	`Ârötf
(
°dîr
, "UnsupportedÖageÑevision %d, decodingÇot "

338 "possibÀ.\n" , 
buff
[9]);

341 
	`¥ötf
(" LUN WWN: ");

342 
k
 = 0; k < 16; ++k)

343 
	`¥ötf
("%02x", 
buff
[10 + 
k
]);

344 
	`¥ötf
("\n");

345 
	`¥ötf
(" Array Serial Number: ");

346 
	`dSåRaw
((c⁄° *)&
buff
[50], buff[49]);

347 
	`¥ötf
("\n");

349 
	`¥ötf
(" LUN State: ");

350 i‡(
buff
[4] > 0x02)

351 
	`¥ötf
("Unknow¿(%x)\n", 
buff
[4]);

353 
	`¥ötf
("%s\n", 
lun_°©e_¨r
[
buff
[4]]);

355 
	`¥ötf
(" ThisÖath connectsÅo: ");

356 i‡(
buff
[8] > 0x01)

357 
	`¥ötf
("Unknow¿SP (%x)", 
buff
[8]);

359 
	`¥ötf
("%s", 
•_¨r
[
buff
[8]]);

360 
	`¥ötf
(", P‹àNumbî: %u\n", 
buff
[7]);

362 
	`¥ötf
(" Default Owner: ");

363 i‡(
buff
[5] > 0x01)

364 
	`¥ötf
("Unknow¿(%x)\n", 
buff
[5]);

366 
	`¥ötf
("%s\n", 
•_¨r
[
buff
[5]]);

368 
	`¥ötf
(" NO_ATF: %s, Access Logix: %s\n",

369 
buff
[6] & 0x80 ? "set" : "not set",

370 
buff
[6] & 0x40 ? "supported" : "not supported");

372 
ù_mgmt
 = (
buff
[6] >> 4) & 0x3;

374 
	`¥ötf
(" SP IP M™agemíàMode: %s\n", 
ù_mgmt_¨r
[
ù_mgmt
]);

375 i‡(
ù_mgmt
 == 2)

376 
	`¥ötf
(" SP IPv4áddress: %u.%u.%u.%u\n",

377 
buff
[44], buff[45], buff[46], buff[47]);

379 
	`¥ötf
(" SP IPv6áddress: ");

380 
k
 = 0; k < 16; ++k)

381 
	`¥ötf
("%02x", 
buff
[32 + 
k
]);

382 
	`¥ötf
("\n");

385 
vµ80
 = 
buff
[30] & 0x08;

386 
lun_z
 = 
buff
[30] & 0x04;

388 
	`¥ötf
(" System Type: %x, Failover mode: %s\n",

389 
buff
[27], 
Áûovî_mode_¨r
[buff[28] & 0x0f]);

391 
	`¥ötf
(" Inquiry VPP 0x80Ñeturns: %s, Arraycommpath: %s\n",

392 
vµ80
 ? "array serial#" : "LUN serial#",

393 
lun_z
 ? "SetÅo 1" : "Unknown");

395 
	`¥ötf
(" Lun operations: %s\n",

396 
buff
[48] > 1 ? "undeföed" : 
lun_›_¨r
[buff[48]]);

399 
	}
}

402 
	$decode_rdac_vpd_c0
(* 
buff
, 
Àn
)

404 
memsize
;

405 
«me
[65];

407 i‡(
Àn
 < 3) {

408 
	`Ârötf
(
°dîr
, "Hardware Version VPDÖageÜengthÅoo "

409 "sh‹t=%d\n", 
Àn
);

412 i‡(
buff
[4] != 'h' && buff[5] != 'w' && buff[6] != 'r') {

413 
	`Ârötf
(
°dîr
, "InvalidÖage identifier %c%c%c%c, decoding "

414 "nŸÖossibÀ.\n" , 
buff
[4], buff[5], buff[6], buff[7]);

417 
	`¥ötf
(" Numbî o‡ch™√ls: %x\n", 
buff
[8]);

418 
memsize
 = 
buff
[10] << 8 | buff[11];

419 
	`¥ötf
(" Pro˚ss‹ Mem‹y Size: %d\n", 
memsize
);

420 
	`mem£t
(
«me
, 0, 65);

421 
	`mem˝y
(
«me
, 
buff
 + 16, 64);

422 
	`¥ötf
(" Bﬂrd Name: %s\n", 
«me
);

423 
	`mem£t
(
«me
, 0, 65);

424 
	`mem˝y
(
«me
, 
buff
 + 80, 16);

425 
	`¥ötf
(" Bﬂrd P¨àNumbî: %s\n", 
«me
);

426 
	`mem£t
(
«me
, 0, 65);

427 
	`mem˝y
(
«me
, 
buff
 + 96, 12);

428 
	`¥ötf
(" Schem©i¯Numbî: %s\n", 
«me
);

429 
	`mem£t
(
«me
, 0, 65);

430 
	`mem˝y
(
«me
, 
buff
 + 108, 4);

431 
	`¥ötf
(" Schem©i¯Revisi⁄ Numbî: %s\n", 
«me
);

432 
	`mem£t
(
«me
, 0, 65);

433 
	`mem˝y
(
«me
, 
buff
 + 112, 16);

434 
	`¥ötf
(" Bﬂrd Sîü»Numbî: %s\n", 
«me
);

435 
	`mem£t
(
«me
, 0, 65);

436 
	`mem˝y
(
«me
, 
buff
 + 144, 8);

437 
	`¥ötf
(" D©êo‡M™uÁ˘uª: %s\n", 
«me
);

438 
	`mem£t
(
«me
, 0, 65);

439 
	`mem˝y
(
«me
, 
buff
 + 152, 2);

440 
	`¥ötf
(" Bﬂrd Revisi⁄: %s\n", 
«me
);

441 
	`mem£t
(
«me
, 0, 65);

442 
	`mem˝y
(
«me
, 
buff
 + 154, 2);

443 
	`¥ötf
(" Bﬂrd Idítifõr: %s\n", 
«me
);

446 
	}
}

449 
	$decode_rdac_vpd_c1
(* 
buff
, 
Àn
)

451 
i
, 
n
, 
v
, 
r
, 
m
, 
p
, 
d
, 
y
, 
num_∑π
;

452 
∑π
[5];

454 i‡(
Àn
 < 3) {

455 
	`Ârötf
(
°dîr
, "Firmware Version VPDÖageÜengthÅoo "

456 "sh‹t=%d\n", 
Àn
);

459 i‡(
buff
[4] != 'f' && buff[5] != 'w' && buff[6] != 'r') {

460 
	`Ârötf
(
°dîr
, "InvalidÖage identifier %c%c%c%c, decoding "

461 "nŸÖossibÀ.\n" , 
buff
[4], buff[5], buff[6], buff[7]);

464 
	`¥ötf
(" Fúmw¨êVîsi⁄: %x.%x.%x\n", 
buff
[8], buff[9], buff[10]);

465 
	`¥ötf
(" Fúmw¨êD©e: %02d/%02d/%02d\n", 
buff
[11], buff[12], buff[13]);

467 
num_∑π
 = (
Àn
 - 12) / 16;

468 
n
 = 16;

469 
	`¥ötf
(" P¨tôi⁄s: %d\n", 
num_∑π
);

470 
i
 = 0; i < 
num_∑π
; i++) {

471 
	`mem£t
(
∑π
,0, 5);

472 
	`mem˝y
(
∑π
, &
buff
[
n
], 4);

473 
	`¥ötf
(" Name: %s\n", 
∑π
);

474 
n
 += 4;

475 
v
 = 
buff
[
n
++];

476 
r
 = 
buff
[
n
++];

477 
m
 = 
buff
[
n
++];

478 
p
 = 
buff
[
n
++];

479 
	`¥ötf
(" Vîsi⁄: %d.%d.%d.%d\n", 
v
, 
r
, 
m
, 
p
);

480 
m
 = 
buff
[
n
++];

481 
d
 = 
buff
[
n
++];

482 
y
 = 
buff
[
n
++];

483 
	`¥ötf
(" D©e: %d/%d/%d\n", 
m
, 
d
, 
y
);

485 
n
 += 5;

489 
	}
}

492 
	$decode_rdac_vpd_c2
(* 
buff
, 
Àn
)

494 
i
, 
n
, 
v
, 
r
, 
m
, 
p
, 
d
, 
y
, 
num_∑π
;

495 
∑π
[5];

497 i‡(
Àn
 < 3) {

498 
	`Ârötf
(
°dîr
, "Software Version VPDÖageÜengthÅoo "

499 "sh‹t=%d\n", 
Àn
);

502 i‡(
buff
[4] != 's' && buff[5] != 'w' && buff[6] != 'r') {

503 
	`Ârötf
(
°dîr
, "InvalidÖage identifier %c%c%c%c, decoding "

504 "nŸÖossibÀ.\n" , 
buff
[4], buff[5], buff[6], buff[7]);

507 
	`¥ötf
(" So·w¨êVîsi⁄: %x.%x.%x\n", 
buff
[8], buff[9], buff[10]);

508 
	`¥ötf
(" So·w¨êD©e: %02d/%02d/%02d\n", 
buff
[11], buff[12], buff[13]);

509 
	`¥ötf
(" Features:");

510 i‡(
buff
[14] & 0x01)

511 
	`¥ötf
(" Dual Active,");

512 i‡(
buff
[14] & 0x02)

513 
	`¥ötf
(" Series 3,");

514 i‡(
buff
[14] & 0x04)

515 
	`¥ötf
(" Multiple Sub-enclosures,");

516 i‡(
buff
[14] & 0x08)

517 
	`¥ötf
(" DCE/DRM,");

518 i‡(
buff
[14] & 0x10)

519 
	`¥ötf
(" AVT,");

520 
	`¥ötf
("\n");

521 
	`¥ötf
(" Max. #o‡LUNS: %d\n", 
buff
[15]);

523 
num_∑π
 = (
Àn
 - 12) / 16;

524 
n
 = 16;

525 
	`¥ötf
(" P¨tôi⁄s: %d\n", 
num_∑π
);

526 
i
 = 0; i < 
num_∑π
; i++) {

527 
	`mem£t
(
∑π
,0, 5);

528 
	`mem˝y
(
∑π
, &
buff
[
n
], 4);

529 
	`¥ötf
(" Name: %s\n", 
∑π
);

530 
n
 += 4;

531 
v
 = 
buff
[
n
++];

532 
r
 = 
buff
[
n
++];

533 
m
 = 
buff
[
n
++];

534 
p
 = 
buff
[
n
++];

535 
	`¥ötf
(" Vîsi⁄: %d.%d.%d.%d\n", 
v
, 
r
, 
m
, 
p
);

536 
m
 = 
buff
[
n
++];

537 
d
 = 
buff
[
n
++];

538 
y
 = 
buff
[
n
++];

539 
	`¥ötf
(" D©e: %d/%d/%d\n", 
m
, 
d
, 
y
);

541 
n
 += 5;

545 
	}
}

548 
	$decode_rdac_vpd_c3
(* 
buff
, 
Àn
)

550 i‡(
Àn
 < 0x2c) {

551 
	`Ârötf
(
°dîr
, "FeatureÖarameters VPDÖageÜengthÅoo "

552 "sh‹t=%d\n", 
Àn
);

555 i‡(
buff
[4] != 'p' && buff[5] != 'r' && buff[6] != 'm') {

556 
	`Ârötf
(
°dîr
, "InvalidÖage identifier %c%c%c%c, decoding "

557 "nŸÖossibÀ.\n" , 
buff
[4], buff[5], buff[6], buff[7]);

560 
	`¥ötf
(" MaximumÇumbî o‡drive†≥∏LUN: %d\n", 
buff
[8]);

561 
	`¥ötf
(" MaximumÇumbî o‡hŸ s∑ª drives: %d\n", 
buff
[9]);

562 
	`¥ötf
(" UTM: %s\n", 
buff
[11] & 0x80?"enabled":"disabled");

563 i‡((
buff
[11] & 0x80))

564 
	`¥ötf
(" UTM LUN: %02x\n", 
buff
[11] & 0x7f);

567 
	}
}

570 
	$decode_rdac_vpd_c4
(* 
buff
, 
Àn
)

572 
subsy°em_id
[17];

573 
subsy°em_ªv
[5];

574 
¶Ÿ_id
[3];

576 i‡(
Àn
 < 0x1c) {

577 
	`Ârötf
(
°dîr
, "Subsystem identifier VPDÖageÜengthÅoo "

578 "sh‹t=%d\n", 
Àn
);

581 i‡(
buff
[4] != 's' && buff[5] != 'u' && buff[6] != 'b') {

582 
	`Ârötf
(
°dîr
, "InvalidÖage identifier %c%c%c%c, decoding "

583 "nŸÖossibÀ.\n" , 
buff
[4], buff[5], buff[6], buff[7]);

586 
	`mem£t
(
subsy°em_id
, 0, 17);

587 
	`mem˝y
(
subsy°em_id
, &
buff
[8], 16);

588 
	`mem£t
(
subsy°em_ªv
, 0, 5);

589 
	`mem˝y
(
subsy°em_ªv
, &
buff
[24], 4);

590 
¶Ÿ_id
[0] = 
buff
[28];

591 
¶Ÿ_id
[1] = 
buff
[29];

592 
¶Ÿ_id
[2] = 0;

594 
	`¥ötf
(" Subsystem ID: %s\n Subsystem Revision: %s",

595 
subsy°em_id
, 
subsy°em_ªv
);

596 i‡(!
	`°rcmp
(
subsy°em_ªv
, "10.0"))

597 
	`¥ötf
(" (Board ID 4884)\n");

598 i‡(!
	`°rcmp
(
subsy°em_ªv
, "12.0"))

599 
	`¥ötf
(" (Board ID 5884)\n");

600 i‡(!
	`°rcmp
(
subsy°em_ªv
, "13.0"))

601 
	`¥ötf
(" (Board ID 2882)\n");

602 i‡(!
	`°rcmp
(
subsy°em_ªv
, "13.1"))

603 
	`¥ötf
(" (Board ID 2880)\n");

604 i‡(!
	`°rcmp
(
subsy°em_ªv
, "14.0"))

605 
	`¥ötf
(" (Board ID 2822)\n");

607 
	`¥ötf
(" (Board ID unknown)\n");

609 
	`¥ötf
(" SlŸ ID: %s\n", 
¶Ÿ_id
);

612 
	}
}

615 
	$decode_rdac_vpd_c8
(* 
buff
, 
Àn
)

617 
i
;

618 #i‚de‡
SG_LIB_MINGW


619 
time_t
 
t°amp
;

621 *
c
;

622 
œbñ
[61];

623 
œbñ_Àn
;

624 
uuid
[33];

625 
uuid_Àn
;

627 i‡(
Àn
 < 0xab) {

628 
	`Ârötf
(
°dîr
, "Extended Device Identification VPDÖageÜengthÅoo "

629 "sh‹t=%d\n", 
Àn
);

632 i‡(
buff
[4] != 'e' && buff[5] != 'd' && buff[6] != 'i') {

633 
	`Ârötf
(
°dîr
, "InvalidÖage identifier %c%c%c%c, decoding "

634 "nŸÖossibÀ.\n" , 
buff
[4], buff[5], buff[6], buff[7]);

638 
uuid_Àn
 = 
buff
[11];

640 
i
 = 0, 
c
 = 
uuid
; i < 
uuid_Àn
; i++) {

641 
	`•rötf
(
c
,"%02x",
buff
[12 + 
i
]);

642 
c
 += 2;

645 
	`¥ötf
(" VﬁumêUniquêIdítifõr: %s\n", 
uuid
);

646 #i‚de‡
SG_LIB_MINGW


647 
t°amp
 = (
buff
[24] << 24) + (buff[25] << 16) + (buff[26] << 8) + buff[27];

648 
	`¥ötf
(" Creation Number: %d, Timestamp: %s",

649 (
buff
[22] << 8Ë+ buff[23], 
	`˘ime
(&
t°amp
));

651 
	`¥ötf
(" Creation Number: %d, Timestamp value: %u",

652 (
buff
[22] << 8) + buff[23],

653 (
buff
[24] << 24) + (buff[25] << 16) + (buff[26] << 8) + buff[27]);

655 
	`mem£t
(
œbñ
, 0, 61);

656 
œbñ_Àn
 = 
buff
[28];

657 
i
 = 0; i < (
œbñ_Àn
 - 1); ++i)

658 *(
œbñ
 + 
i
Ë
buff
[29 + (2 * i) + 1];

659 
	`¥ötf
(" VﬁumêU£∏Labñ: %s\n", 
œbñ
);

661 
uuid_Àn
 = 
buff
[89];

663 
i
 = 0, 
c
 = 
uuid
; i < 
uuid_Àn
; i++) {

664 
	`•rötf
(
c
,"%02x",
buff
[90 + 
i
]);

665 
c
 += 2;

668 
	`¥ötf
(" St‹agêAºay UniquêIdítifõr: %s\n", 
uuid
);

669 
	`mem£t
(
œbñ
, 0, 61);

670 
œbñ_Àn
 = 
buff
[106];

671 
i
 = 0; i < (
œbñ_Àn
 - 1); ++i)

672 *(
œbñ
 + 
i
Ë
buff
[107 + (2 * i) + 1];

673 
	`¥ötf
(" St‹agêAºay U£∏Labñ: %s\n", 
œbñ
);

675 
i
 = 0, 
c
 = 
uuid
; i < 8; i++) {

676 
	`•rötf
(
c
,"%02x",
buff
[167 + 
i
]);

677 
c
 += 2;

680 
	`¥ötf
(" Logiˇ»Unô Numbî: %s\n", 
uuid
);

683 
	}
}

686 
	$decode_rdac_vpd_c9
(* 
buff
, 
Àn
)

688 i‡(
Àn
 < 3) {

689 
	`Ârötf
(
°dîr
, "Volume Access Control VPDÖageÜengthÅoo "

690 "sh‹t=%d\n", 
Àn
);

693 i‡(
buff
[4] != 'v' && buff[5] != 'a' && buff[6] != 'c') {

694 
	`Ârötf
(
°dîr
, "InvalidÖage identifier %c%c%c%c, decoding "

695 "nŸÖossibÀ.\n" , 
buff
[4], buff[5], buff[6], buff[7]);

698 i‡(
buff
[7] != '1') {

699 
	`Ârötf
(
°dîr
, "InvalidÖage version '%c' (should be 1)\n",

700 
buff
[7]);

702 
	`¥ötf
(" AVT:");

703 i‡(
buff
[8] & 0x80) {

704 
	`¥ötf
(" Enabled");

705 i‡(
buff
[8] & 0x40)

706 
	`¥ötf
(" (AllowÑeads on sector 0)");

707 
	`¥ötf
("\n");

709 
	`¥ötf
(" Disabled\n");

711 
	`¥ötf
(" Volume Access via: ");

712 i‡(
buff
[8] & 0x01)

713 
	`¥ötf
("primary controller\n");

715 
	`¥ötf
("alternate controller\n");

717 
	`¥ötf
(" P©hÖri‹ôy: %d ", 
buff
[9] & 0xf);

718 
buff
[9] & 0xf) {

720 
	`¥ötf
("(preferredÖath)\n");

723 
	`¥ötf
("(secondaryÖath)\n");

726 
	`¥ötf
("(unknown)\n");

731 
	}
}

734 
	$decode_rdac_vpd_ˇ
(* 
buff
, 
Àn
)

736 
i
;

738 i‡(
Àn
 < 16) {

739 
	`Ârötf
(
°dîr
, "Replicated Volume Source Identifier "

740 "VPDÖagêÀngthÅoÿsh‹t=%d\n", 
Àn
);

743 i‡(
buff
[4] != 'r' && buff[5] != 'v' && buff[6] != 's') {

744 
	`Ârötf
(
°dîr
, "InvalidÖage identifier %c%c%c%c, decoding "

745 "nŸÖossibÀ.\n" , 
buff
[4], buff[5], buff[6], buff[7]);

748 i‡(
buff
[8] & 0x01) {

749 
	`¥ötf
(" Snapshot Volume\n");

750 
	`¥ötf
(" Base Volume WWID: ");

751 
i
 = 0; i < 16; i++)

752 
	`¥ötf
("%02x", 
buff
[10 + 
i
]);

753 
	`¥ötf
("\n");

754 } i‡(
buff
[8] & 0x02) {

755 
	`¥ötf
(" Copy Target Volume\n");

756 
	`¥ötf
(" Source Volume WWID: ");

757 
i
 = 0; i < 16; i++)

758 
	`¥ötf
("%02x", 
buff
[10 + 
i
]);

759 
	`¥ötf
("\n");

761 
	`¥ötf
(" Neitherá snapshotÇorá copyÅarget volume\n");

764 
	}
}

767 
	$decode_rdac_vpd_d0
(* 
buff
, 
Àn
)

769 
i
;

771 i‡(
Àn
 < 20) {

772 
	`Ârötf
(
°dîr
, "Storage Array World Wide Name "

773 "VPDÖagêÀngthÅoÿsh‹t=%d\n", 
Àn
);

776 
	`¥ötf
(" Storage Array WWN: ");

777 
i
 = 0; i < 16; i++)

778 
	`¥ötf
("%02x", 
buff
[8 + 
i
]);

779 
	`¥ötf
("\n");

782 
	}
}

787 
	$svpd_decode_víd‹
(
sg_fd
, 
num_vpd
, 
subvÆue
, 
maxÀn
,

788 
do_hex
, 
do_øw
, 
do_l⁄g
, 
do_quõt
,

789 
vîbo£
)

791 
Àn
, 
ªs
;

792 
«me
[64];

793 c⁄° 
svpd_vÆues_«me_t
 * 
v≈
;

794 
Æloc_Àn
 = 
maxÀn
;

796 
do_l⁄g
 = do_long;

797 
v≈
 = 
	`svpd_gë_v_dëaû
(
num_vpd
, 
subvÆue
, -1);

798 i‡(
v≈
 && v≈->
«me
)

799 
	`°r˝y
(
«me
, 
v≈
->name);

801 
	`¢¥ötf
(
«me
, “ameË- 1, "Víd‹ VPDÖage=0x%x", 
num_vpd
);

802 i‡(0 =
Æloc_Àn
)

803 
Æloc_Àn
 = 
DEF_ALLOC_LEN
;

804 i‡((! 
do_øw
Ë&& (! 
do_quõt
))

805 
	`¥ötf
("%†VPD Page:\n", 
«me
);

806 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Æloc_Àn
, 1,

807 
vîbo£
);

808 i‡(0 =
ªs
) {

809 
Àn
 = 
r•_buff
[3] + 4;

810 i‡(
num_vpd
 !
r•_buff
[1]) {

811 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse;ÖrobablyÇot "

813  
SG_LIB_CAT_MALFORMED
;

815 i‡(
Àn
 > 
Æloc_Àn
) {

816 i‡((0 =
maxÀn
Ë&& (
Àn
 < 
MX_ALLOC_LEN
)) {

817 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 
num_vpd
, 
r•_buff
, 
Àn
,

818 1, 
vîbo£
);

819 i‡(
ªs
) {

820 
	`Ârötf
(
°dîr
, "fetching 0x%xÖage "

821 "◊Œoc_Àn=%dËÁûed\n", 
num_vpd
, 
Àn
);

822  
ªs
;

825 
	`Ârötf
(
°dîr
, ">>> warning:ÑesponseÜength (%d) "

826 "l⁄gîÅh™Ñeque°ed (%d)\n", 
Àn
, 
Æloc_Àn
);

827 
Àn
 = 
Æloc_Àn
;

830 i‡(
do_øw
)

831 
	`dSåRaw
((c⁄° *)
r•_buff
, 
Àn
);

832 i‡(
do_hex
)

833 
	`dSåHex
((c⁄° *)
r•_buff
, 
Àn
, 0);

835 
num_vpd
) {

837 i‡(0 =
subvÆue
)

838 
	`decode_fúm_vpd_c0_£a
(
r•_buff
, 
Àn
);

839 i‡(1 =
subvÆue
)

840 
	`decode_u¥_vpd_c0_emc
(
r•_buff
, 
Àn
);

841 i‡(2 =
subvÆue
)

842 
	`decode_vpd_c0_hp3∑r
(
r•_buff
, 
Àn
);

843 i‡(3 =
subvÆue
)

844 
	`decode_rdac_vpd_c0
(
r•_buff
, 
Àn
);

846 
	`dSåHex
((c⁄° *)
r•_buff
, 
Àn
, 0);

849 i‡(1 =
subvÆue
)

850 
	`decode_rdac_vpd_c1
(
r•_buff
, 
Àn
);

852 
	`dSåHex
((c⁄° *)
r•_buff
, 
Àn
, 0);

855 i‡(1 =
subvÆue
)

856 
	`decode_rdac_vpd_c2
(
r•_buff
, 
Àn
);

858 
	`dSåHex
((c⁄° *)
r•_buff
, 
Àn
, 0);

861 i‡(1 =
subvÆue
)

862 
	`decode_rdac_vpd_c3
(
r•_buff
, 
Àn
);

864 
	`dSåHex
((c⁄° *)
r•_buff
, 
Àn
, 0);

867 i‡(0 =
subvÆue
)

868 
	`decode_rdac_vpd_c4
(
r•_buff
, 
Àn
);

870 
	`dSåHex
((c⁄° *)
r•_buff
, 
Àn
, 0);

873 i‡(0 =
subvÆue
)

874 
	`decode_rdac_vpd_c8
(
r•_buff
, 
Àn
);

876 
	`dSåHex
((c⁄° *)
r•_buff
, 
Àn
, 0);

879 i‡(0 =
subvÆue
)

880 
	`decode_rdac_vpd_c9
(
r•_buff
, 
Àn
);

882 
	`dSåHex
((c⁄° *)
r•_buff
, 
Àn
, 0);

885 i‡(0 =
subvÆue
)

886 
	`decode_rdac_vpd_ˇ
(
r•_buff
, 
Àn
);

888 
	`dSåHex
((c⁄° *)
r•_buff
, 
Àn
, 0);

891 i‡(0 =
subvÆue
)

892 
	`decode_rdac_vpd_d0
(
r•_buff
, 
Àn
);

894 
	`dSåHex
((c⁄° *)
r•_buff
, 
Àn
, 0);

897  
SG_LIB_SYNTAX_ERROR
;

902  
ªs
;

903 
	}
}

	@src/sg_wr_mode.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<gë›t.h
>

15 #ifde‡
HAVE_CONFIG_H


16 
	~"c⁄fig.h
"

18 
	~"sg_lib.h
"

19 
	~"sg_cmds_basic.h
"

27 c⁄° * 
	gvîsi⁄_°r
 = "1.10 20130507";

29 
	#ME
 "sg_wr_mode: "

	)

31 
	#MX_ALLOC_LEN
 2048

	)

32 
	#SHORT_ALLOC_LEN
 252

	)

34 
	#EBUFF_SZ
 256

	)

37 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

51 
	$ußge
()

53 
	`Ârötf
(
°dîr
, "Usage: "

88 
	}
}

96 
	$buûd_mode_∑ge
(c⁄° * 
öp
, * 
mp_¨r
,

97 * 
mp_¨r_Àn
, 
max_¨r_Àn
)

99 
ö_Àn
, 
k
, 
j
, 
m
;

100 
h
;

101 c⁄° * 
l˝
;

102 * 
˝
;

103 * 
c2p
;

105 i‡((
NULL
 =
öp
Ë|| (NULL =
mp_¨r
) ||

106 (
NULL
 =
mp_¨r_Àn
))

108 
l˝
 = 
öp
;

109 
ö_Àn
 = 
	`°æí
(
öp
);

110 i‡(0 =
ö_Àn
)

111 *
mp_¨r_Àn
 = 0;

112 i‡('-' =
öp
[0]) {

113 
löe
[512];

114 
off
 = 0;

116 
j
 = 0; j < 512; ++j) {

117 i‡(
NULL
 =
	`fgës
(
löe
, ÷öe), 
°dö
))

119 
ö_Àn
 = 
	`°æí
(
löe
);

120 i‡(
ö_Àn
 > 0) {

121 i‡('\n' =
löe
[
ö_Àn
 - 1]) {

122 --
ö_Àn
;

123 
löe
[
ö_Àn
] = '\0';

126 i‡(0 =
ö_Àn
)

128 
l˝
 = 
löe
;

129 
m
 = 
	`°r•n
(
l˝
, " \t");

130 i‡(
m
 =
ö_Àn
)

132 
l˝
 +
m
;

133 
ö_Àn
 -
m
;

134 i‡('#' =*
l˝
)

136 
k
 = 
	`°r•n
(
l˝
, "0123456789aAbBcCdDeEfF ,\t");

137 i‡((
k
 < 
ö_Àn
Ë&& ('#' !
l˝
[k])) {

138 
	`Ârötf
(
°dîr
, "build_mode_page: syntaxÉrrorát "

139 "löê%d,Öo†%d\n", 
j
 + 1, 
m
 + 
k
 + 1);

142 
k
 = 0; k < 1024; ++k) {

143 i‡(1 =
	`ssˇnf
(
l˝
, "%x", &
h
)) {

144 i‡(
h
 > 0xff) {

145 
	`Ârötf
(
°dîr
, "build_mode_page: hexÇumber "

147 
j
 + 1, ()(
l˝
 - 
löe
 + 1));

150 i‡((
off
 + 
k
Ë>
max_¨r_Àn
) {

151 
	`Ârötf
(
°dîr
, "build_mode_page:árrayÜength "

155 
mp_¨r
[
off
 + 
k
] = 
h
;

156 
l˝
 = 
	`°Ωbrk
(lcp, " ,\t");

157 i‡(
NULL
 =
l˝
)

159 
l˝
 +
	`°r•n
(lcp, " ,\t");

160 i‡('\0' =*
l˝
)

163 i‡('#' =*
l˝
) {

164 --
k
;

167 
	`Ârötf
(
°dîr
, "build_mode_page:Érror in "

168 "löê%d,áàpo†%d\n", 
j
 + 1,

169 ()(
l˝
 - 
löe
 + 1));

173 
off
 +(
k
 + 1);

175 *
mp_¨r_Àn
 = 
off
;

177 
k
 = 
	`°r•n
(
öp
, "0123456789aAbBcCdDeEfF, ");

178 i‡(
ö_Àn
 !
k
) {

179 
	`Ârötf
(
°dîr
, "buûd_mode_∑ge:Éº‹áàpo†%d\n", 
k
 + 1);

182 
k
 = 0; k < 
max_¨r_Àn
; ++k) {

183 i‡(1 =
	`ssˇnf
(
l˝
, "%x", &
h
)) {

184 i‡(
h
 > 0xff) {

185 
	`Ârötf
(
°dîr
, "build_mode_page: hexÇumberÜarger "

186 "th™ 0xf‡©Öo†%d\n", ()(
l˝
 - 
öp
 + 1));

189 
mp_¨r
[
k
] = 
h
;

190 
˝
 = (*)
	`°rchr
(
l˝
, ',');

191 
c2p
 = (*)
	`°rchr
(
l˝
, ' ');

192 i‡(
NULL
 =
˝
)

193 
˝
 = 
c2p
;

194 i‡(
NULL
 =
˝
)

196 i‡(
c2p
 && (c2∞< 
˝
))

197 
˝
 = 
c2p
;

198 
l˝
 = 
˝
 + 1;

200 
	`Ârötf
(
°dîr
, "build_mode_page:ÉrrorátÖos %d\n",

201 ()(
l˝
 - 
öp
 + 1));

205 *
mp_¨r_Àn
 = 
k
 + 1;

206 i‡(
k
 =
max_¨r_Àn
) {

207 
	`Ârötf
(
°dîr
, "build_mode_page:árrayÜengthÉxceeded\n");

212 
	}
}

217 
	$buûd_mask
(c⁄° * 
öp
, * 
mask_¨r
,

218 * 
mask_¨r_Àn
, 
max_¨r_Àn
)

220 
ö_Àn
, 
k
;

221 
h
;

222 c⁄° * 
l˝
;

223 * 
˝
;

224 * 
c2p
;

226 i‡((
NULL
 =
öp
Ë|| (NULL =
mask_¨r
) ||

227 (
NULL
 =
mask_¨r_Àn
))

229 
l˝
 = 
öp
;

230 
ö_Àn
 = 
	`°æí
(
öp
);

231 i‡(0 =
ö_Àn
)

232 *
mask_¨r_Àn
 = 0;

233 i‡('-' =
öp
[0]) {

234 
	`Ârötf
(
°dîr
, "'--mask' doesÇotáccept input from stdin\n");

237 
k
 = 
	`°r•n
(
öp
, "0123456789aAbBcCdDeEfF, ");

238 i‡(
ö_Àn
 !
k
) {

239 
	`Ârötf
(
°dîr
, "buûd_mode_∑ge:Éº‹áàpo†%d\n", 
k
 + 1);

242 
k
 = 0; k < 
max_¨r_Àn
; ++k) {

243 i‡(1 =
	`ssˇnf
(
l˝
, "%x", &
h
)) {

244 i‡(
h
 > 0xff) {

245 
	`Ârötf
(
°dîr
, "build_mode_page: hexÇumberÜarger "

246 "th™ 0xf‡©Öo†%d\n", ()(
l˝
 - 
öp
 + 1));

249 
mask_¨r
[
k
] = 
h
;

250 
˝
 = (*)
	`°rchr
(
l˝
, ',');

251 
c2p
 = (*)
	`°rchr
(
l˝
, ' ');

252 i‡(
NULL
 =
˝
)

253 
˝
 = 
c2p
;

254 i‡(
NULL
 =
˝
)

256 i‡(
c2p
 && (c2∞< 
˝
))

257 
˝
 = 
c2p
;

258 
l˝
 = 
˝
 + 1;

260 
	`Ârötf
(
°dîr
, "build_mode_page:ÉrrorátÖos %d\n",

261 ()(
l˝
 - 
öp
 + 1));

265 *
mask_¨r_Àn
 = 
k
 + 1;

266 i‡(
k
 =
max_¨r_Àn
) {

267 
	`Ârötf
(
°dîr
, "build_mode_page:árrayÜengthÉxceeded\n");

272 
	}
}

275 
	$maö
(
¨gc
, * 
¨gv
[])

277 
sg_fd
, 
ªs
, 
c
, 
num
, 
Æloc_Àn
, 
off
, 
pdt
;

278 
k
, 
md_Àn
, 
hdr_Àn
, 
bd_Àn
, 
mask_ö_Àn
;

279 
u
, 
uu
;

280 
dbd
 = 0;

281 
gŸ_c⁄ã¡s
 = 0;

282 
f‹˚
 = 0;

283 
gŸ_mask
 = 0;

284 
mode_6
 = 0;

285 
pg_code
 = -1;

286 
sub_pg_code
 = 0;

287 
ßve
 = 0;

288 
vîbo£
 = 0;

289 
ªad_ö_Àn
 = 0;

290 c⁄° * 
devi˚_«me
 = 
NULL
;

291 
ªad_ö
[
MX_ALLOC_LEN
];

292 
mask_ö
[
MX_ALLOC_LEN
];

293 
ªf_md
[
MX_ALLOC_LEN
];

294 
ebuff
[
EBUFF_SZ
];

295 
sg_sim∂e_öquúy_ª•
 
öq_d©a
;

296 
ªt
 = 0;

299 
›ti⁄_ödex
 = 0;

301 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "c:dfhl:m:p:svV", 
l⁄g_›ti⁄s
,

302 &
›ti⁄_ödex
);

303 i‡(
c
 == -1)

306 
c
) {

308 
	`mem£t
(
ªad_ö
, 0, (read_in));

309 i‡(0 !
	`buûd_mode_∑ge
(
›èrg
, 
ªad_ö
, &
ªad_ö_Àn
,

310 (
ªad_ö
))) {

311 
	`Ârötf
(
°dîr
, "badárgumentÅo '--contents'\n");

312  
SG_LIB_SYNTAX_ERROR
;

314 
gŸ_c⁄ã¡s
 = 1;

317 
dbd
 = 1;

320 
f‹˚
 = 1;

324 
	`ußge
();

327 
num
 = 
	`ssˇnf
(
›èrg
, "%d", &
ªs
);

328 i‡((1 =
num
Ë&& ((6 =
ªs
) || (10 ==Ñes)))

329 
mode_6
 = (6 =
ªs
) ? 1 : 0;

331 
	`Ârötf
(
°dîr
, "length (of cdb) must be 6 or 10\n");

332  
SG_LIB_SYNTAX_ERROR
;

336 
	`mem£t
(
mask_ö
, 0xff, (mask_in));

337 i‡(0 !
	`buûd_mask
(
›èrg
, 
mask_ö
, &
mask_ö_Àn
,

338 (
mask_ö
))) {

339 
	`Ârötf
(
°dîr
, "badárgumentÅo '--mask'\n");

340  
SG_LIB_SYNTAX_ERROR
;

342 
gŸ_mask
 = 1;

345 i‡(
NULL
 =
	`°rchr
(
›èrg
, ',')) {

346 
num
 = 
	`ssˇnf
(
›èrg
, "%x", &
u
);

347 i‡((1 !
num
Ë|| (
u
 > 62)) {

348 
	`Ârötf
(
°dîr
, "BadÖage code valueáfter '--page' "

350  
SG_LIB_SYNTAX_ERROR
;

352 
pg_code
 = 
u
;

353 } i‡(2 =
	`ssˇnf
(
›èrg
, "%x,%x", &
u
, &
uu
)) {

354 i‡(
uu
 > 254) {

355 
	`Ârötf
(
°dîr
, "Bad subÖage code valueáfter '--page'"

357  
SG_LIB_SYNTAX_ERROR
;

359 
pg_code
 = 
u
;

360 
sub_pg_code
 = 
uu
;

362 
	`Ârötf
(
°dîr
, "BadÖage code, subpage code sequenceáfter "

364  
SG_LIB_SYNTAX_ERROR
;

368 
ßve
 = 1;

371 ++
vîbo£
;

374 
	`Ârötf
(
°dîr
, 
ME
 "vîsi⁄: %s\n", 
vîsi⁄_°r
);

377 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê0x%x ??\n", 
c
);

378 
	`ußge
();

379  
SG_LIB_SYNTAX_ERROR
;

382 i‡(
›töd
 < 
¨gc
) {

383 i‡(
NULL
 =
devi˚_«me
) {

384 
devi˚_«me
 = 
¨gv
[
›töd
];

385 ++
›töd
;

387 i‡(
›töd
 < 
¨gc
) {

388 ; 
›töd
 < 
¨gc
; ++optind)

389 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

390 
¨gv
[
›töd
]);

391 
	`ußge
();

392  
SG_LIB_SYNTAX_ERROR
;

395 i‡(
NULL
 =
devi˚_«me
) {

396 
	`Ârötf
(
°dîr
, "missing deviceÇame!\n");

397 
	`ußge
();

398  
SG_LIB_SYNTAX_ERROR
;

400 i‡(
pg_code
 < 0) {

401 
	`Ârötf
(
°dîr
, "needÖage code (see '--page=')\n");

402 
	`ußge
();

403  
SG_LIB_SYNTAX_ERROR
;

405 i‡(
gŸ_mask
 && 
f‹˚
) {

406 
	`Ârötf
(
°dîr
, "cannot use both '--force'ánd '--mask'\n");

407 
	`ußge
();

408  
SG_LIB_SYNTAX_ERROR
;

411 
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 0 , 
vîbo£
);

412 i‡(
sg_fd
 < 0) {

413 
	`Ârötf
(
°dîr
, 
ME
 "›íÉº‹: %s: %s\n", 
devi˚_«me
,

414 
	`ß„_°ªº‹
(-
sg_fd
));

415  
SG_LIB_FILE_ERROR
;

417 i‡(0 =
	`sg_sim∂e_öquúy
(
sg_fd
, &
öq_d©a
, 0, 
vîbo£
))

418 
pdt
 = 
öq_d©a
.
≥rùhîÆ_ty≥
;

420 
pdt
 = 0x1f;

423 
	`mem£t
(
ªf_md
, 0, 
MX_ALLOC_LEN
);

424 
Æloc_Àn
 = 
mode_6
 ? 
SHORT_ALLOC_LEN
 : 
MX_ALLOC_LEN
;

425 i‡(
mode_6
)

426 
ªs
 = 
	`sg_Œ_mode_£n£6
(
sg_fd
, 
dbd
, 0 , 
pg_code
,

427 
sub_pg_code
, 
ªf_md
, 
Æloc_Àn
, 1, 
vîbo£
);

429 
ªs
 = 
	`sg_Œ_mode_£n£10
(
sg_fd
, 0 , 
dbd
, 0 ,

430 
pg_code
, 
sub_pg_code
, 
ªf_md
, 
Æloc_Àn
, 1,

431 
vîbo£
);

432 
ªt
 = 
ªs
;

433 i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
) {

434 
	`Ârötf
(
°dîr
, "MODE SENSE (%d)Çot supported,Åry '--len=%d'\n",

435 (
mode_6
 ? 6 : 10), (mode_6 ? 10 : 6));

436 
îr_out
;

437 } i‡(
SG_LIB_CAT_NOT_READY
 =
ªs
) {

438 
	`Ârötf
(
°dîr
, "MODE SENSE (%d) failed, deviceÇotÑeady\n",

439 (
mode_6
 ? 6 : 10));

440 
îr_out
;

441 } i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
) {

442 
	`Ârötf
(
°dîr
, "MODE SENSE (%d) failed, unitáttention\n",

443 (
mode_6
 ? 6 : 10));

444 
îr_out
;

445 } i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
) {

446 
	`Ârötf
(
°dîr
, "MODE SENSE (%d) failed,áborted command\n",

447 (
mode_6
 ? 6 : 10));

448 
îr_out
;

449 } i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
) {

450 
	`Ârötf
(
°dîr
, "bad field in MODE SENSE (%d) command\n",

451 (
mode_6
 ? 6 : 10));

452 
îr_out
;

453 } i‡(0 !
ªs
) {

454 
	`Ârötf
(
°dîr
, "MODE SENSE (%dËÁûed\n", (
mode_6
 ? 6 : 10));

455 
îr_out
;

457 
off
 = 
	`sg_mode_∑ge_off£t
(
ªf_md
, 
Æloc_Àn
, 
mode_6
, 
ebuff
, 
EBUFF_SZ
);

458 i‡(
off
 < 0) {

459 
	`Ârötf
(
°dîr
, "MODE SENSE (%d): %s\n", (
mode_6
 ? 6 : 10), 
ebuff
);

460 
îr_out
;

462 i‡(
mode_6
) {

463 
hdr_Àn
 = 4;

464 
md_Àn
 = 
ªf_md
[0] + 1;

465 
bd_Àn
 = 
ªf_md
[3];

467 
hdr_Àn
 = 8;

468 
md_Àn
 = (
ªf_md
[0] << 8) +Ñef_md[1] + 2;

469 
bd_Àn
 = (
ªf_md
[6] << 8) +Ñef_md[7];

471 i‡(
gŸ_c⁄ã¡s
) {

472 i‡(
ªad_ö_Àn
 < 2) {

473 
	`Ârötf
(
°dîr
, "c⁄ã¡†Àngth=%dÅoÿsh‹t\n", 
ªad_ö_Àn
);

474 
îr_out
;

476 
ªf_md
[0] = 0;

477 i‡(! 
mode_6
)

478 
ªf_md
[1] = 0;

479 i‡(0 =
pdt
)

480 
ªf_md
[
mode_6
 ? 2 : 3] &= 0xef;

481 i‡(
md_Àn
 > 
Æloc_Àn
) {

482 
	`Ârötf
(
°dîr
, "mode dataÜength=%dÉxceedsállocation "

483 "Àngth=%d\n", 
md_Àn
, 
Æloc_Àn
);

484 
îr_out
;

486 i‡(
gŸ_mask
) {

487 
k
 = 0; k < (
md_Àn
 - 
off
); ++k) {

488 i‡((0x0 =
mask_ö
[
k
]Ë|| (k > 
ªad_ö_Àn
))

489 
ªad_ö
[
k
] = 
ªf_md
[
off
 + k];

490 i‡(
mask_ö
[
k
] < 0xff) {

491 
c
 = (
ªf_md
[
off
 + 
k
] & (0xf‡& ~
mask_ö
[k]));

492 
ªad_ö
[
k
] = (
c
 | (ªad_ö[k] & 
mask_ö
[k]));

495 
ªad_ö_Àn
 = 
md_Àn
 - 
off
;

497 i‡(! 
f‹˚
) {

498 i‡((! (
ªf_md
[
off
] & 0x80)Ë&& 
ßve
) {

499 
	`Ârötf
(
°dîr
, "PS bit inÉxisting modeÖage indicatesÅhat "

501 
îr_out
;

503 
ªad_ö
[0] &= 0x7f;

504 i‡((
md_Àn
 - 
off
Ë!
ªad_ö_Àn
) {

505 
	`Ârötf
(
°dîr
, "contentsÜength=%d butÑeference modeÖage "

506 "Àngth=%d\n", 
ªad_ö_Àn
, 
md_Àn
 - 
off
);

507 
îr_out
;

509 i‡(
pg_code
 !(
ªad_ö
[0] & 0x3f)) {

510 
	`Ârötf
(
°dîr
, "contentsÖage_code=0x%x butÑeference "

511 "∑ge_code=0x%x\n", (
ªad_ö
[0] & 0x3f), 
pg_code
);

512 
îr_out
;

514 i‡((
ªad_ö
[0] & 0x40Ë!(
ªf_md
[
off
] & 0x40)) {

515 
	`Ârötf
(
°dîr
, "contents flags subpage butÑeferenceÖage"

517 
îr_out
;

519 i‡((
ªad_ö
[0] & 0x40Ë&& (ªad_ö[1] !
sub_pg_code
)) {

520 
	`Ârötf
(
°dîr
, "contents subpage_code=0x%x butÑeference "

521 "sub_∑ge_code=0x%x\n", 
ªad_ö
[1], 
sub_pg_code
);

522 
îr_out
;

525 
md_Àn
 = 
off
 + 
ªad_ö_Àn
;

527 
	`mem˝y
(
ªf_md
 + 
off
, 
ªad_ö
, 
ªad_ö_Àn
);

528 i‡(
mode_6
)

529 
ªs
 = 
	`sg_Œ_mode_£À˘6
(
sg_fd
, 1, 
ßve
, 
ªf_md
, 
md_Àn
, 1,

530 
vîbo£
);

532 
ªs
 = 
	`sg_Œ_mode_£À˘10
(
sg_fd
, 1, 
ßve
, 
ªf_md
, 
md_Àn
, 1,

533 
vîbo£
);

534 
ªt
 = 
ªs
;

535 i‡(
SG_LIB_CAT_INVALID_OP
 =
ªs
) {

536 
	`Ârötf
(
°dîr
, "MODE SELECT (%d)Çot supported\n",

537 (
mode_6
 ? 6 : 10));

538 
îr_out
;

539 } i‡(
SG_LIB_CAT_NOT_READY
 =
ªs
) {

540 
	`Ârötf
(
°dîr
, "MODE SELECT (%d) failed, deviceÇotÑeady\n",

541 (
mode_6
 ? 6 : 10));

542 
îr_out
;

543 } i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
) {

544 
	`Ârötf
(
°dîr
, "MODE SELECT (%d) failed, unitáttention\n",

545 (
mode_6
 ? 6 : 10));

546 
îr_out
;

547 } i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
) {

548 
	`Ârötf
(
°dîr
, "MODE SELECT (%d) failed,áborted command\n",

549 (
mode_6
 ? 6 : 10));

550 
îr_out
;

551 } i‡(
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
) {

552 
	`Ârötf
(
°dîr
, "bad field in MODE SELECT (%d) command\n",

553 (
mode_6
 ? 6 : 10));

554 
îr_out
;

555 } i‡(0 !
ªs
) {

556 
	`Ârötf
(
°dîr
, "MODE SELECT (%dËÁûed\n", (
mode_6
 ? 6 : 10));

557 
îr_out
;

560 
	`¥ötf
(">>> No contents given, so show current modeÖage data:\n");

561 
	`¥ötf
(" header:\n");

562 
	`dSåHex
((c⁄° *)
ªf_md
, 
hdr_Àn
, -1);

563 i‡(
bd_Àn
) {

564 
	`¥ötf
(" block descriptor(s):\n");

565 
	`dSåHex
((c⁄° *)(
ªf_md
 + 
hdr_Àn
), 
bd_Àn
, -1);

567 
	`¥ötf
(" <<Ço block descriptors >>\n");

568 
	`¥ötf
(" modeÖage:\n");

569 
	`dSåHex
((c⁄° *)(
ªf_md
 + 
off
), 
md_Àn
 - off, -1);

571 
îr_out
:

572 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

573 i‡(
ªs
 < 0) {

574 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

575 i‡(0 =
ªt
)

576  
SG_LIB_FILE_ERROR
;

578  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

579 
	}
}

	@src/sg_write_buffer.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<˘y≥.h
>

13 
	~<°rög.h
>

14 
	~<gë›t.h
>

16 #ifde‡
HAVE_CONFIG_H


17 
	~"c⁄fig.h
"

19 
	~"sg_lib.h
"

20 
	~"sg_cmds_basic.h
"

21 
	~"sg_cmds_exåa.h
"

22 
	~"sg_±.h
"

28 c⁄° * 
	gvîsi⁄_°r
 = "1.10 20130507";

30 
	#ME
 "sg_wrôe_buf„r: "

	)

31 
	#DEF_XFER_LEN
 (8 * 1024 * 1024)

	)

32 
	#EBUFF_SZ
 256

	)

34 
	#WRITE_BUFFER_CMD
 0x3b

	)

35 
	#WRITE_BUFFER_CMDLEN
 10

	)

36 
	#SENSE_BUFF_LEN
 64

	)

37 
	#DEF_PT_TIMEOUT
 60

	)

39 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

56 
	$ußge
()

58 
	`Ârötf
(
°dîr
, "Usage: "

88 
	}
}

90 
	#MODE_HEADER_DATA
 0

	)

91 
	#MODE_VENDOR
 1

	)

92 
	#MODE_DATA
 2

	)

93 
	#MODE_DNLD_MC
 4

	)

94 
	#MODE_DNLD_MC_SAVE
 5

	)

95 
	#MODE_DNLD_MC_OFFS
 6

	)

96 
	#MODE_DNLD_MC_OFFS_SAVE
 7

	)

97 
	#MODE_ECHO_BUFFER
 0x0A

	)

98 
	#MODE_DNLD_MC_EV_OFFS_DEFER
 0x0D

	)

99 
	#MODE_DNLD_MC_OFFS_DEFER
 0x0E

	)

100 
	#MODE_ACTIVATE_MC
 0x0F

	)

101 
	#MODE_EN_EX_ECHO
 0x1A

	)

102 
	#MODE_DIS_EX
 0x1B

	)

103 
	#MODE_DNLD_ERR_HISTORY
 0x1C

	)

106 
	smode_s
 {

107 c⁄° *
	mmode_°rög
;

108 
	mmode
;

109 c⁄° *
	mcommít
;

110 } 
	gmodes
[] = {

111 { "hd", 
MODE_HEADER_DATA
, "combined headeránd data"},

112 { "víd‹", 
MODE_VENDOR
, "vendor specific"},

113 { "d©a", 
MODE_DATA
, "data"},

114 { "dmc", 
MODE_DNLD_MC
, "download microcodeándáctivate"},

115 { "dmc_ßve", 
MODE_DNLD_MC_SAVE
, "download microcode, saveánd "

117 { "dmc_offs", 
MODE_DNLD_MC_OFFS
, "download microcode with offsets "

119 { "dmc_offs_ßve", 
MODE_DNLD_MC_OFFS_SAVE
, "download microcode with "

121 { "echo", 
MODE_ECHO_BUFFER
, "write dataÅoÉcho buffer"},

122 { "dmc_offs_ev_de„r", 
MODE_DNLD_MC_EV_OFFS_DEFER
, "download "

125 { "dmc_offs_de„r", 
MODE_DNLD_MC_OFFS_DEFER
, "download microcode "

127 { "a˘iv©e_mc", 
MODE_ACTIVATE_MC
,

129 { "í_ex", 
MODE_EN_EX_ECHO
, "enableÉxpander communications "

131 { "dis_ex", 
MODE_DIS_EX
, "disableÉxpander communications "

133 { "deh", 
MODE_DNLD_ERR_HISTORY
, "downloadÉrror history "},

136 
	#NUM_MODES
 (()((
modes
)/(modes[0])))

	)

139 
	$¥öt_modes
()

141 
k
;

143 
	`Ârötf
(
°dîr
, "The modesÖarameterárgument can beÇumeric "

145 
k
 = 0; k < 
NUM_MODES
; k++) {

146 
	`Ârötf
(
°dîr
, " %2d (0x%02xË %-18s%s\n", 
modes
[
k
].
mode
,

147 
modes
[
k
].
mode
, modes[k].
mode_°rög
, modes[k].
commít
);

149 
	}
}

158 
	$sg_Œ_wrôe_buf„r_v2
(
sg_fd
, 
mode
, 
m_•ecific
, 
buf„r_id
,

159 
buf„r_off£t
, * 
∑ømp
, 
∑øm_Àn
,

160 
noisy
, 
vîbo£
)

162 
k
, 
ªs
, 
ªt
, 
£n£_ˇt
;

163 
wbufCmdBlk
[
WRITE_BUFFER_CMDLEN
] =

164 {
WRITE_BUFFER_CMD
, 0, 0, 0, 0, 0, 0, 0, 0, 0};

165 
£n£_b
[
SENSE_BUFF_LEN
];

166 
sg_±_ba£
 * 
±vp
;

168 
wbufCmdBlk
[1] = ()(
mode
 & 0x1f);

169 
wbufCmdBlk
[1] |()((
m_•ecific
 & 0x7) << 5);

170 
wbufCmdBlk
[2] = ()(
buf„r_id
 & 0xff);

171 
wbufCmdBlk
[3] = ()((
buf„r_off£t
 >> 16) & 0xff);

172 
wbufCmdBlk
[4] = ()((
buf„r_off£t
 >> 8) & 0xff);

173 
wbufCmdBlk
[5] = ()(
buf„r_off£t
 & 0xff);

174 
wbufCmdBlk
[6] = ()((
∑øm_Àn
 >> 16) & 0xff);

175 
wbufCmdBlk
[7] = ()((
∑øm_Àn
 >> 8) & 0xff);

176 
wbufCmdBlk
[8] = ()(
∑øm_Àn
 & 0xff);

177 i‡(
NULL
 =
sg_w¨nögs_°rm
)

178 
sg_w¨nögs_°rm
 = 
°dîr
;

179 i‡(
vîbo£
) {

180 
	`Ârötf
(
sg_w¨nögs_°rm
, " Write buffer cmd: ");

181 
k
 = 0; k < 
WRITE_BUFFER_CMDLEN
; ++k)

182 
	`Ârötf
(
sg_w¨nögs_°rm
, "%02x ", 
wbufCmdBlk
[
k
]);

183 
	`Ârötf
(
sg_w¨nögs_°rm
, "\n");

184 i‡((
vîbo£
 > 1Ë&& 
∑ømp
 && 
∑øm_Àn
) {

185 
	`Ârötf
(
sg_w¨nögs_°rm
, " Write bufferÖarameterÜist%s:\n",

186 ((
∑øm_Àn
 > 256) ? " (first 256 bytes)" : ""));

187 
	`dSåHex
((c⁄° *)
∑ømp
,

188 ((
∑øm_Àn
 > 256) ? 256 :Öaram_len), -1);

192 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

193 i‡(
NULL
 =
±vp
) {

194 
	`Ârötf
(
sg_w¨nögs_°rm
, "write buffer: out of memory\n");

197 
	`£t_scsi_±_cdb
(
±vp
, 
wbufCmdBlk
, (wbufCmdBlk));

198 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

199 
	`£t_scsi_±_d©a_out
(
±vp
, (*)
∑ømp
, 
∑øm_Àn
);

200 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
DEF_PT_TIMEOUT
, 
vîbo£
);

201 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "wrôêbuf„r", 
ªs
, 0, 
£n£_b
,

202 
noisy
, 
vîbo£
, &
£n£_ˇt
);

203 i‡(-1 =
ªt
)

205 i‡(-2 =
ªt
) {

206 
£n£_ˇt
) {

207 
SG_LIB_CAT_NOT_READY
:

208 
SG_LIB_CAT_INVALID_OP
:

209 
SG_LIB_CAT_ILLEGAL_REQ
:

210 
SG_LIB_CAT_UNIT_ATTENTION
:

211 
SG_LIB_CAT_ABORTED_COMMAND
:

212 
ªt
 = 
£n£_ˇt
;

214 
SG_LIB_CAT_RECOVERED
:

215 
SG_LIB_CAT_NO_SENSE
:

216 
ªt
 = 0;

219 
ªt
 = -1;

223 
ªt
 = 0;

225 
	`de°ru˘_scsi_±_obj
(
±vp
);

226  
ªt
;

227 
	}
}

231 
	$maö
(
¨gc
, * 
¨gv
[])

233 
sg_fd
, 
öfd
, 
ªs
, 
c
, 
Àn
, 
k
, 
gŸ_°dö
;

234 
do_hñp
 = 0;

235 
wb_id
 = 0;

236 
wb_Àn
 = 0;

237 
wb_Àn_giví
 = 0;

238 
wb_mode
 = 0;

239 
wb_off£t
 = 0;

240 
wb_skù
 = 0;

241 
wb_m•ec
 = 0;

242 
vîbo£
 = 0;

243 c⁄° * 
devi˚_«me
 = 
NULL
;

244 c⁄° * 
fûe_«me
 = 
NULL
;

245 * 
d›
 = 
NULL
;

246 
ebuff
[
EBUFF_SZ
];

247 
ªt
 = 0;

250 
›ti⁄_ödex
 = 0;

252 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hi:I:l:m:o:rs:S:vV", 
l⁄g_›ti⁄s
,

253 &
›ti⁄_ödex
);

254 i‡(
c
 == -1)

257 
c
) {

260 ++
do_hñp
;

263 
wb_id
 = 
	`sg_gë_num
(
›èrg
);

264 i‡((
wb_id
 < 0) || (wb_id > 255)) {

265 
	`Ârötf
(
°dîr
, "argumentÅo '--id' should be inÅheÑange "

267  
SG_LIB_SYNTAX_ERROR
;

271 
fûe_«me
 = 
›èrg
;

274 
wb_Àn
 = 
	`sg_gë_num
(
›èrg
);

275 i‡(
wb_Àn
 < 0) {

276 
	`Ârötf
(
°dîr
, "badárgumentÅo '--length'\n");

277  
SG_LIB_SYNTAX_ERROR
;

279 
wb_Àn_giví
 = 1;

282 i‡(
	`isdigô
(*
›èrg
)) {

283 
wb_mode
 = 
	`sg_gë_num
(
›èrg
);

284 i‡((
wb_mode
 < 0) || (wb_mode > 31)) {

285 
	`Ârötf
(
°dîr
, "argumentÅo '--mode' should be inÅhe "

287  
SG_LIB_SYNTAX_ERROR
;

290 
Àn
 = 
	`°æí
(
›èrg
);

291 
k
 = 0; k < 
NUM_MODES
; ++k) {

292 i‡(0 =
	`°∫cmp
(
modes
[
k
].
mode_°rög
, 
›èrg
, 
Àn
)) {

293 
wb_mode
 = 
modes
[
k
].
mode
;

297 i‡(
NUM_MODES
 =
k
) {

298 
	`¥öt_modes
();

299  
SG_LIB_SYNTAX_ERROR
;

304 
wb_off£t
 = 
	`sg_gë_num
(
›èrg
);

305 i‡(
wb_off£t
 < 0) {

306 
	`Ârötf
(
°dîr
, "badárgumentÅo '--offset'\n");

307  
SG_LIB_SYNTAX_ERROR
;

311 
fûe_«me
 = "-";

314 
wb_skù
 = 
	`sg_gë_num
(
›èrg
);

315 i‡(
wb_skù
 < 0) {

316 
	`Ârötf
(
°dîr
, "badárgumentÅo '--skip'\n");

317  
SG_LIB_SYNTAX_ERROR
;

321 
wb_m•ec
 = 
	`sg_gë_num
(
›èrg
);

322 i‡((
wb_m•ec
 < 0) || (wb_mspec > 7)) {

323 
	`Ârötf
(
°dîr
, "expectedárgumentÅo '--specific'Åo be "

325  
SG_LIB_SYNTAX_ERROR
;

329 ++
vîbo£
;

332 
	`Ârötf
(
°dîr
, 
ME
 "vîsi⁄: %s\n", 
vîsi⁄_°r
);

335 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê0x%x ??\n", 
c
);

336 
	`ußge
();

337  
SG_LIB_SYNTAX_ERROR
;

340 i‡(
do_hñp
) {

341 i‡(
do_hñp
 > 1) {

342 
	`ußge
();

343 
	`Ârötf
(
°dîr
, "\n");

344 
	`¥öt_modes
();

346 
	`ußge
();

349 i‡(
›töd
 < 
¨gc
) {

350 i‡(
NULL
 =
devi˚_«me
) {

351 
devi˚_«me
 = 
¨gv
[
›töd
];

352 ++
›töd
;

354 i‡(
›töd
 < 
¨gc
) {

355 ; 
›töd
 < 
¨gc
; ++optind)

356 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

357 
¨gv
[
›töd
]);

358 
	`ußge
();

359  
SG_LIB_SYNTAX_ERROR
;

363 i‡(
NULL
 =
devi˚_«me
) {

364 
	`Ârötf
(
°dîr
, "missing deviceÇame!\n");

365 
	`ußge
();

366  
SG_LIB_SYNTAX_ERROR
;

369 #ifde‡
SG_LIB_WIN32


370 #ifde‡
SG_LIB_WIN32_DIRECT


371 i‡(
vîbo£
 > 4)

372 
	`Ârötf
(
°dîr
, "Initial win32 SPT interface state: %s\n",

373 
	`scsi_±_wö32_•t_°©e
() ? "direct" : "indirect");

374 
	`scsi_±_wö32_dúe˘
(
SG_LIB_WIN32_DIRECT
 );

378 
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 0 , 
vîbo£
);

379 i‡(
sg_fd
 < 0) {

380 
	`Ârötf
(
°dîr
, 
ME
 "›íÉº‹: %s: %s\n", 
devi˚_«me
,

381 
	`ß„_°ªº‹
(-
sg_fd
));

382  
SG_LIB_FILE_ERROR
;

384 i‡(
fûe_«me
 || (
wb_Àn
 > 0)) {

385 i‡(0 =
wb_Àn
)

386 
wb_Àn
 = 
DEF_XFER_LEN
;

387 i‡(
NULL
 =(
d›
 = (*)
	`mÆloc
(
wb_Àn
))) {

388 
	`Ârötf
(
°dîr
, 
ME
 "out of memory\n");

389 
ªt
 = 
SG_LIB_SYNTAX_ERROR
;

390 
îr_out
;

392 
	`mem£t
(
d›
, 0xff, 
wb_Àn
);

393 i‡(
fûe_«me
) {

394 
gŸ_°dö
 = (0 =
	`°rcmp
(
fûe_«me
, "-")) ? 1 : 0;

395 i‡(
gŸ_°dö
) {

396 i‡(
wb_skù
 > 0) {

397 
	`Ârötf
(
°dîr
, "Can't skip on stdin\n");

398 
ªt
 = 
SG_LIB_FILE_ERROR
;

399 
îr_out
;

401 
öfd
 = 
STDIN_FILENO
;

403 i‡((
öfd
 = 
	`›í
(
fûe_«me
, 
O_RDONLY
)) < 0) {

404 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

405 
ME
 "couldÇŸ o≥¿%†f‹Ñódög", 
fûe_«me
);

406 
	`≥º‹
(
ebuff
);

407 
ªt
 = 
SG_LIB_FILE_ERROR
;

408 
îr_out
;

409 } i‡(
	`sg_£t_bö¨y_mode
(
öfd
) < 0)

410 
	`≥º‹
("sg_set_binary_mode");

411 i‡(
wb_skù
 > 0) {

412 i‡(
	`l£ek
(
öfd
, 
wb_skù
, 
SEEK_SET
) < 0) {

413 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, 
ME
 "couldn't skipÅo "

414 "ªquúedÖosôi⁄ o¿%s", 
fûe_«me
);

415 
	`≥º‹
(
ebuff
);

416 
	`˛o£
(
öfd
);

417 
ªt
 = 
SG_LIB_FILE_ERROR
;

418 
îr_out
;

422 
ªs
 = 
	`ªad
(
öfd
, 
d›
, 
wb_Àn
);

423 i‡(
ªs
 < 0) {

424 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, 
ME
 "couldn'tÑead from %s",

425 
fûe_«me
);

426 
	`≥º‹
(
ebuff
);

427 i‡(! 
gŸ_°dö
)

428 
	`˛o£
(
öfd
);

429 
ªt
 = 
SG_LIB_FILE_ERROR
;

430 
îr_out
;

432 i‡(
ªs
 < 
wb_Àn
) {

433 i‡(
wb_Àn_giví
) {

434 
	`Ârötf
(
°dîr
, "triedÅoÑead %d bytes from %s, got "

435 "%d byãs\n", 
wb_Àn
, 
fûe_«me
, 
ªs
);

436 
	`Ârötf
(
°dîr
, "pad with 0xff bytesánd continue\n");

438 i‡(
vîbo£
) {

439 
	`Ârötf
(
°dîr
, "triedÅoÑead %d bytes from %s, got "

440 "%d byãs\n", 
wb_Àn
, 
fûe_«me
, 
ªs
);

441 
	`Ârötf
(
°dîr
, "wû»wrôê%d byãs\n", 
ªs
);

443 
wb_Àn
 = 
ªs
;

446 i‡(! 
gŸ_°dö
)

447 
	`˛o£
(
öfd
);

451 
ªs
 = 
	`sg_Œ_wrôe_buf„r_v2
(
sg_fd
, 
wb_mode
, 
wb_m•ec
, 
wb_id
, 
wb_off£t
,

452 
d›
, 
wb_Àn
, 1, 
vîbo£
);

453 i‡(0 !
ªs
) {

454 
ªt
 = 
ªs
;

455 
ªs
) {

456 
SG_LIB_CAT_NOT_READY
:

457 
	`Ârötf
(
°dîr
, "Write buffer failed, deviceÇotÑeady\n");

459 
SG_LIB_CAT_UNIT_ATTENTION
:

460 
	`Ârötf
(
°dîr
, "Write bufferÇot done, unitáttention\n");

462 
SG_LIB_CAT_ABORTED_COMMAND
:

463 
	`Ârötf
(
°dîr
, "Write buffer,áborted command\n");

465 
SG_LIB_CAT_INVALID_OP
:

466 
	`Ârötf
(
°dîr
, "Write buffer commandÇot supported\n");

468 
SG_LIB_CAT_ILLEGAL_REQ
:

469 
	`Ârötf
(
°dîr
, "bad field in Write buffer cdb\n");

472 
	`Ârötf
(
°dîr
, "Wrôêbuf„∏ÁûedÑes=%d\n", 
ªs
);

477 
îr_out
:

478 i‡(
d›
)

479 
	`‰ì
(
d›
);

480 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

481 i‡(
ªs
 < 0) {

482 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

483 i‡(0 =
ªt
)

484  
SG_LIB_FILE_ERROR
;

486  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

487 
	}
}

	@src/sg_write_long.c

17 
	~<uni°d.h
>

18 
	~<f˙é.h
>

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<î∫o.h
>

23 
	~<gë›t.h
>

24 
	#__STDC_FORMAT_MACROS
 1

	)

25 
	~<öây≥s.h
>

27 #ifde‡
HAVE_CONFIG_H


28 
	~"c⁄fig.h
"

30 
	~"sg_lib.h
"

31 
	~"sg_cmds_basic.h
"

32 
	~"sg_cmds_exåa.h
"

34 c⁄° * 
	gvîsi⁄_°r
 = "1.18 20130507";

37 
	#MAX_XFER_LEN
 10000

	)

41 
	#ME
 "sg_wrôe_l⁄g: "

	)

43 
	#EBUFF_SZ
 256

	)

45 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

62 
	$ußge
()

64 
	`Ârötf
(
°dîr
, "Usage: "

92 
	}
}

95 
	$maö
(
¨gc
, * 
¨gv
[])

97 
sg_fd
, 
ªs
, 
c
, 
öfd
, 
off£t
;

98 * 
wrôeL⁄gBuff
 = 
NULL
;

99 * 
øwp
 = 
NULL
;

100 
x„r_Àn
 = 520;

101 
c‹_dis
 = 0;

102 
pblock
 = 0;

103 
wr_unc‹
 = 0;

104 
do_16
 = 0;

105 
uöt64_t
 
Œba
 = 0;

106 
vîbo£
 = 0;

107 
öt64_t
 
Œ
;

108 
gŸ_°dö
;

109 c⁄° * 
devi˚_«me
 = 
NULL
;

110 
fûe_«me
[256];

111 
ebuff
[
EBUFF_SZ
];

112 c⁄° * 
ãn_‹
;

113 
ªt
 = 1;

115 
	`mem£t
(
fûe_«me
, 0,  file_name);

117 
›ti⁄_ödex
 = 0;

119 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "chi:l:pSvVwx:", 
l⁄g_›ti⁄s
,

120 &
›ti⁄_ödex
);

121 i‡(
c
 == -1)

124 
c
) {

126 
c‹_dis
 = 1;

130 
	`ußge
();

133 
	`°∫˝y
(
fûe_«me
, 
›èrg
, (file_name));

136 
Œ
 = 
	`sg_gë_Œnum
(
›èrg
);

137 i‡(-1 =
Œ
) {

138 
	`Ârötf
(
°dîr
, "badárgumentÅo '--lba'\n");

139  
SG_LIB_SYNTAX_ERROR
;

141 
Œba
 = (
uöt64_t
)
Œ
;

144 
pblock
 = 1;

147 
do_16
 = 1;

150 ++
vîbo£
;

153 
	`Ârötf
(
°dîr
, 
ME
 "vîsi⁄: %s\n", 
vîsi⁄_°r
);

156 
wr_unc‹
 = 1;

159 
x„r_Àn
 = 
	`sg_gë_num
(
›èrg
);

160 i‡(-1 =
x„r_Àn
) {

161 
	`Ârötf
(
°dîr
, "badárgumentÅo '--xfer_len'\n");

162  
SG_LIB_SYNTAX_ERROR
;

166 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê0x%x ??\n", 
c
);

167 
	`ußge
();

168  
SG_LIB_SYNTAX_ERROR
;

171 i‡(
›töd
 < 
¨gc
) {

172 i‡(
NULL
 =
devi˚_«me
) {

173 
devi˚_«me
 = 
¨gv
[
›töd
];

174 ++
›töd
;

176 i‡(
›töd
 < 
¨gc
) {

177 ; 
›töd
 < 
¨gc
; ++optind)

178 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

179 
¨gv
[
›töd
]);

180 
	`ußge
();

181  
SG_LIB_SYNTAX_ERROR
;

185 i‡(
NULL
 =
devi˚_«me
) {

186 
	`Ârötf
(
°dîr
, "missing deviceÇame!\n");

187 
	`ußge
();

188  
SG_LIB_SYNTAX_ERROR
;

190 i‡(
wr_unc‹
)

191 
x„r_Àn
 = 0;

192 i‡(
x„r_Àn
 >
MAX_XFER_LEN
) {

193 
	`Ârötf
(
°dîr
, "xfer_len (%d) is out ofÑange ( < %d)\n",

194 
x„r_Àn
, 
MAX_XFER_LEN
);

195 
	`ußge
();

196  
SG_LIB_SYNTAX_ERROR
;

198 
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 0 , 
vîbo£
);

199 i‡(
sg_fd
 < 0) {

200 
	`Ârötf
(
°dîr
, 
ME
 "›íÉº‹: %s: %s\n", 
devi˚_«me
,

201 
	`ß„_°ªº‹
(-
sg_fd
));

202  
SG_LIB_FILE_ERROR
;

205 i‡(
wr_unc‹
) {

206 i‡('\0' !
fûe_«me
[0])

207 
	`Ârötf
(
°dîr
, ">>> warning: when '--wr_uncor' given "

210 i‡(
NULL
 =(
øwp
 = 
	`mÆloc
(
MAX_XFER_LEN
))) {

211 
	`Ârötf
(
°dîr
, 
ME
 "out of memory\n");

212 
ªt
 = 
SG_LIB_FILE_ERROR
;

213 
îr_out
;

215 
wrôeL⁄gBuff
 = (*)
øwp
;

216 
	`mem£t
(
øwp
, 0xff, 
MAX_XFER_LEN
);

217 i‡(
fûe_«me
[0]) {

218 
gŸ_°dö
 = (0 =
	`°rcmp
(
fûe_«me
, "-")) ? 1 : 0;

219 i‡(
gŸ_°dö
) {

220 
öfd
 = 
STDIN_FILENO
;

221 i‡(
	`sg_£t_bö¨y_mode
(
STDIN_FILENO
) < 0)

222 
	`≥º‹
("sg_set_binary_mode");

224 i‡((
öfd
 = 
	`›í
(
fûe_«me
, 
O_RDONLY
)) < 0) {

225 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

226 
ME
 "couldÇŸ o≥¿%†f‹Ñódög", 
fûe_«me
);

227 
	`≥º‹
(
ebuff
);

228 
îr_out
;

229 } i‡(
	`sg_£t_bö¨y_mode
(
öfd
) < 0)

230 
	`≥º‹
("sg_set_binary_mode");

232 
ªs
 = 
	`ªad
(
öfd
, 
wrôeL⁄gBuff
, 
x„r_Àn
);

233 i‡(
ªs
 < 0) {

234 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, 
ME
 "couldn'tÑead from %s",

235 
fûe_«me
);

236 
	`≥º‹
(
ebuff
);

237 i‡(! 
gŸ_°dö
)

238 
	`˛o£
(
öfd
);

239 
îr_out
;

241 i‡(
ªs
 < 
x„r_Àn
) {

242 
	`Ârötf
(
°dîr
, "triedÅoÑead %d bytes from %s, got %d "

243 "byãs\n", 
x„r_Àn
, 
fûe_«me
, 
ªs
);

244 
	`Ârötf
(
°dîr
, "pad with 0xff bytesánd continue\n");

246 i‡(! 
gŸ_°dö
)

247 
	`˛o£
(
öfd
);

250 i‡(
vîbo£
)

251 
	`Ârötf
(
°dîr
, 
ME
 "issue writeÜongÅo device %s\n\t\txfer_len= %d "

252 "(0x%x),Üba=%" 
PRIu64
 " (0x%" 
PRIx64
 ")\n cor_dis=%d, "

253 "wr_unc‹=%d,Öblock=%d\n", 
devi˚_«me
, 
x„r_Àn
, xfer_len,

254 
Œba
,Ülba, 
c‹_dis
, 
wr_unc‹
, 
pblock
);

256 
ãn_‹
 = 
do_16
 ? "16" : "10";

257 i‡(
do_16
)

258 
ªs
 = 
	`sg_Œ_wrôe_l⁄g16
(
sg_fd
, 
c‹_dis
, 
wr_unc‹
, 
pblock
, 
Œba
,

259 
wrôeL⁄gBuff
, 
x„r_Àn
, &
off£t
, 1, 
vîbo£
);

261 
ªs
 = 
	`sg_Œ_wrôe_l⁄g10
(
sg_fd
, 
c‹_dis
, 
wr_unc‹
, 
pblock
,

262 ()
Œba
, 
wrôeL⁄gBuff
, 
x„r_Àn
,

263 &
off£t
, 1, 
vîbo£
);

264 
ªt
 = 
ªs
;

265 
ªs
) {

268 
SG_LIB_CAT_NOT_READY
:

269 
	`Ârötf
(
°dîr
, " SCSI WRITE LONG (%s) failed, deviceÇotÑeady\n",

270 
ãn_‹
);

272 
SG_LIB_CAT_UNIT_ATTENTION
:

273 
	`Ârötf
(
°dîr
, " SCSI WRITE LONG (%s), unitáttention\n",

274 
ãn_‹
);

276 
SG_LIB_CAT_ABORTED_COMMAND
:

277 
	`Ârötf
(
°dîr
, " SCSI WRITE LONG (%s),áborted command\n",

278 
ãn_‹
);

280 
SG_LIB_CAT_INVALID_OP
:

281 
	`Ârötf
(
°dîr
, " SCSI WRITE LONG (%s) commandÇot supported\n",

282 
ãn_‹
);

284 
SG_LIB_CAT_ILLEGAL_REQ
:

285 
	`Ârötf
(
°dîr
, " SCSI WRITE LONG (%s) command, bad field in cdb\n",

286 
ãn_‹
);

288 
SG_LIB_CAT_ILLEGAL_REQ_WITH_INFO
:

289 
	`Ârötf
(
°dîr
, "<<< device indicates 'xfer_len' should be %d "

290 ">>>\n", 
x„r_Àn
 - 
off£t
);

293 
	`Ârötf
(
°dîr
, " SCSI WRITE LONG (%sËcomm™dÉº‹\n", 
ãn_‹
);

297 
îr_out
:

298 i‡(
øwp
)

299 
	`‰ì
(
øwp
);

300 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

301 i‡(
ªs
 < 0) {

302 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

303 i‡(0 =
ªt
)

304  
SG_LIB_FILE_ERROR
;

306  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

307 
	}
}

	@src/sg_write_same.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<î∫o.h
>

14 
	~<limôs.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<sys/°©.h
>

17 
	~<gë›t.h
>

18 
	#__STDC_FORMAT_MACROS
 1

	)

19 
	~<öây≥s.h
>

21 #ifde‡
HAVE_CONFIG_H


22 
	~"c⁄fig.h
"

24 
	~"sg_lib.h
"

25 
	~"sg_±.h
"

26 
	~"sg_cmds_basic.h
"

27 
	~"sg_cmds_exåa.h
"

29 c⁄° * 
	gvîsi⁄_°r
 = "1.02 20130516";

32 
	#ME
 "sg_wrôe_ßme: "

	)

34 
	#WRITE_SAME10_OP
 0x41

	)

35 
	#WRITE_SAME16_OP
 0x93

	)

36 
	#VARIABLE_LEN_OP
 0x7f

	)

37 
	#WRITE_SAME32_SA
 0xd

	)

38 
	#WRITE_SAME32_ADD
 0x18

	)

39 
	#WRITE_SAME10_LEN
 10

	)

40 
	#WRITE_SAME16_LEN
 16

	)

41 
	#WRITE_SAME32_LEN
 32

	)

42 
	#RCAP10_RESP_LEN
 8

	)

43 
	#RCAP16_RESP_LEN
 32

	)

44 
	#SENSE_BUFF_LEN
 64

	)

45 
	#DEF_TIMEOUT_SECS
 60

	)

46 
	#DEF_WS_CDB_SIZE
 
WRITE_SAME10_LEN


	)

47 
	#DEF_WS_NUMBLOCKS
 1

	)

48 
	#MAX_XFER_LEN
 (64 * 1024)

	)

49 
	#EBUFF_SZ
 256

	)

51 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

52 {"10", 
no_¨gumít
, 0, 'R'},

53 {"16", 
no_¨gumít
, 0, 'S'},

54 {"32", 
no_¨gumít
, 0, 'T'},

55 {"™ch‹", 
no_¨gumít
, 0, 'a'},

56 {"gΩnum", 
ªquúed_¨gumít
, 0, 'g'},

57 {"hñp", 
no_¨gumít
, 0, 'h'},

58 {"ö", 
ªquúed_¨gumít
, 0, 'i'},

59 {"lba", 
ªquúed_¨gumít
, 0, 'l'},

60 {"lbd©a", 
no_¨gumít
, 0, 'L'},

61 {"ndob", 
no_¨gumít
, 0, 'N'},

62 {"num", 
ªquúed_¨gumít
, 0, 'n'},

63 {"pbd©a", 
no_¨gumít
, 0, 'P'},

64 {"timeout", 
ªquúed_¨gumít
, 0, 'r'},

65 {"unm≠", 
no_¨gumít
, 0, 'U'},

66 {"vîbo£", 
no_¨gumít
, 0, 'v'},

67 {"vîsi⁄", 
no_¨gumít
, 0, 'V'},

68 {"wΩrŸe˘", 
ªquúed_¨gumít
, 0, 'w'},

69 {"x„æí", 
ªquúed_¨gumít
, 0, 'x'},

73 
	s›ts_t
 {

74 
	m™ch‹
;

75 
	mgΩnum
;

76 
	mifûíame
[256];

77 
uöt64_t
 
	mlba
;

78 
	mlbd©a
;

79 
	mndob
;

80 
	mnumblocks
;

81 
	mpbd©a
;

82 
	mtimeout
;

83 
	munm≠
;

84 
	mvîbo£
;

85 
	mwΩrŸe˘
;

86 
	mx„r_Àn
;

87 
	m¥ef_cdb_size
;

88 
	mw™t_ws10
;

94 
	$ußge
()

96 
	`Ârötf
(
°dîr
, "Usage: "

140 
	}
}

143 
	$do_wrôe_ßme
(
sg_fd
, c⁄° 
›ts_t
 * 
›t•
, c⁄° * 
d©aouç
,

144 * 
a˘_cdb_À≈
)

146 
k
, 
ªt
, 
ªs
, 
£n£_ˇt
, 
cdb_Àn
;

147 
uöt64_t
 
Œba
;

148 
uöt32_t
 
lba
, 
unum
;

149 
wsCmdBlk
[
WRITE_SAME32_LEN
];

150 
£n£_b
[
SENSE_BUFF_LEN
];

151 
sg_±_ba£
 * 
±vp
;

153 
cdb_Àn
 = 
›t•
->
¥ef_cdb_size
;

154 i‡(
WRITE_SAME10_LEN
 =
cdb_Àn
) {

155 
Œba
 = 
›t•
->
lba
 + o±•->
numblocks
;

156 i‡((
›t•
->
numblocks
 > 0xffffË|| (
Œba
 > 
ULONG_MAX
) ||

157 
›t•
->
ndob
 || (›t•->
unm≠
 && (0 =›t•->
w™t_ws10
))) {

158 
cdb_Àn
 = 
WRITE_SAME16_LEN
;

159 i‡(
›t•
->
vîbo£
)

160 
	`Ârötf
(
°dîr
, "do_write_same: use WRITE SAME(16) instead "

164 i‡(
a˘_cdb_À≈
)

165 *
a˘_cdb_À≈
 = 
cdb_Àn
;

166 
	`mem£t
(
wsCmdBlk
, 0, (wsCmdBlk));

167 
cdb_Àn
) {

168 
WRITE_SAME10_LEN
:

169 
wsCmdBlk
[0] = 
WRITE_SAME10_OP
;

170 
wsCmdBlk
[1] = ((
›t•
->
wΩrŸe˘
 & 0x7) << 5);

173 i‡(
›t•
->
™ch‹
)

174 
wsCmdBlk
[1] |= 0x10;

175 i‡(
›t•
->
unm≠
)

176 
wsCmdBlk
[1] |= 0x8;

177 i‡(
›t•
->
pbd©a
)

178 
wsCmdBlk
[1] |= 0x4;

179 i‡(
›t•
->
lbd©a
)

180 
wsCmdBlk
[1] |= 0x2;

181 
lba
 = (
uöt32_t
)
›t•
->lba;

182 
k
 = 3; k >= 0; --k) {

183 
wsCmdBlk
[2 + 
k
] = (
lba
 & 0xff);

184 
lba
 >>= 8;

186 
wsCmdBlk
[6] = (
›t•
->
gΩnum
 & 0x1f);

187 
wsCmdBlk
[7] = ((
›t•
->
numblocks
 >> 8) & 0xff);

188 
wsCmdBlk
[8] = (
›t•
->
numblocks
 & 0xff);

190 
WRITE_SAME16_LEN
:

191 
wsCmdBlk
[0] = 
WRITE_SAME16_OP
;

192 
wsCmdBlk
[1] = ((
›t•
->
wΩrŸe˘
 & 0x7) << 5);

193 i‡(
›t•
->
™ch‹
)

194 
wsCmdBlk
[1] |= 0x10;

195 i‡(
›t•
->
unm≠
)

196 
wsCmdBlk
[1] |= 0x8;

197 i‡(
›t•
->
pbd©a
)

198 
wsCmdBlk
[1] |= 0x4;

199 i‡(
›t•
->
lbd©a
)

200 
wsCmdBlk
[1] |= 0x2;

201 i‡(
›t•
->
ndob
)

202 
wsCmdBlk
[1] |= 0x1;

203 
Œba
 = 
›t•
->
lba
;

204 
k
 = 7; k >= 0; --k) {

205 
wsCmdBlk
[2 + 
k
] = (
Œba
 & 0xff);

206 
Œba
 >>= 8;

208 
unum
 = 
›t•
->
numblocks
;

209 
k
 = 3; k >= 0; --k) {

210 
wsCmdBlk
[10 + 
k
] = (
unum
 & 0xff);

211 
unum
 >>= 8;

213 
wsCmdBlk
[14] = (
›t•
->
gΩnum
 & 0x1f);

215 
WRITE_SAME32_LEN
:

218 
wsCmdBlk
[0] = 
VARIABLE_LEN_OP
;

219 
wsCmdBlk
[6] = (
›t•
->
gΩnum
 & 0x1f);

220 
wsCmdBlk
[7] = 
WRITE_SAME32_ADD
;

221 
wsCmdBlk
[8] = ((
WRITE_SAME32_SA
 >> 8) & 0xff);

222 
wsCmdBlk
[9] = (
WRITE_SAME32_SA
 & 0xff);

223 
wsCmdBlk
[10] = ((
›t•
->
wΩrŸe˘
 & 0x7) << 5);

224 i‡(
›t•
->
™ch‹
)

225 
wsCmdBlk
[10] |= 0x10;

226 i‡(
›t•
->
unm≠
)

227 
wsCmdBlk
[10] |= 0x8;

228 i‡(
›t•
->
pbd©a
)

229 
wsCmdBlk
[10] |= 0x4;

230 i‡(
›t•
->
lbd©a
)

231 
wsCmdBlk
[10] |= 0x2;

232 i‡(
›t•
->
ndob
)

233 
wsCmdBlk
[10] |= 0x1;

234 
Œba
 = 
›t•
->
lba
;

235 
k
 = 7; k >= 0; --k) {

236 
wsCmdBlk
[12 + 
k
] = (
Œba
 & 0xff);

237 
Œba
 >>= 8;

239 
unum
 = 
›t•
->
numblocks
;

240 
k
 = 3; k >= 0; --k) {

241 
wsCmdBlk
[28 + 
k
] = (
unum
 & 0xff);

242 
unum
 >>= 8;

246 
	`Ârötf
(
°dîr
, "do_wrôe_ßme: bad cdbÜígth %d\n", 
cdb_Àn
);

250 i‡(
›t•
->
vîbo£
 > 1) {

251 
	`Ârötf
(
°dîr
, " Wrôêßme(%dËcmd: ", 
cdb_Àn
);

252 
k
 = 0; k < 
cdb_Àn
; ++k)

253 
	`Ârötf
(
°dîr
, "%02x ", 
wsCmdBlk
[
k
]);

254 
	`Ârötf
(
°dîr
, "\n Data-out bufferÜength=%d\n",

255 
›t•
->
x„r_Àn
);

257 i‡((
›t•
->
vîbo£
 > 3Ë&& (›t•->
x„r_Àn
 > 0)) {

258 
	`Ârötf
(
°dîr
, " Data-out buffer contents:\n");

259 
	`dSåHex
((c⁄° *)
d©aouç
, 
›t•
->
x„r_Àn
, 1);

261 
±vp
 = 
	`c⁄°ru˘_scsi_±_obj
();

262 i‡(
NULL
 =
±vp
) {

263 
	`Ârötf
(
sg_w¨nögs_°rm
, "Wrôêßme(%d): ouào‡mem‹y\n", 
cdb_Àn
);

266 
	`£t_scsi_±_cdb
(
±vp
, 
wsCmdBlk
, 
cdb_Àn
);

267 
	`£t_scsi_±_£n£
(
±vp
, 
£n£_b
, (sense_b));

268 
	`£t_scsi_±_d©a_out
(
±vp
, (*)
d©aouç
, 
›t•
->
x„r_Àn
);

269 
ªs
 = 
	`do_scsi_±
(
±vp
, 
sg_fd
, 
›t•
->
timeout
, o±•->
vîbo£
);

270 
ªt
 = 
	`sg_cmds_¥o˚ss_ª•
(
±vp
, "Wrôêßme", 
ªs
, 0, 
£n£_b
,

271 1 , 
›t•
->
vîbo£
, &
£n£_ˇt
);

272 i‡(-1 =
ªt
)

274 i‡(-2 =
ªt
) {

275 
£n£_ˇt
) {

276 
SG_LIB_CAT_NOT_READY
:

277 
SG_LIB_CAT_UNIT_ATTENTION
:

278 
SG_LIB_CAT_INVALID_OP
:

279 
SG_LIB_CAT_ILLEGAL_REQ
:

280 
SG_LIB_CAT_ABORTED_COMMAND
:

281 
ªt
 = 
£n£_ˇt
;

283 
SG_LIB_CAT_RECOVERED
:

284 
SG_LIB_CAT_NO_SENSE
:

285 
ªt
 = 0;

287 
SG_LIB_CAT_MEDIUM_HARD
:

289 
vÆid
, 
¶í
;

290 
uöt64_t
 
uŒ
 = 0;

292 
¶í
 = 
	`gë_scsi_±_£n£_Àn
(
±vp
);

293 
vÆid
 = 
	`sg_gë_£n£_öfo_Êd
(
£n£_b
, 
¶í
, &
uŒ
);

294 i‡(
vÆid
)

295 
	`Ârötf
(
°dîr
, "Medium or hardwareÉrror startingát "

296 "lba=%"
PRIu64
" [0x%"
PRIx64
"]\n", 
uŒ
, ull);

298 
ªt
 = 
£n£_ˇt
;

301 
ªt
 = -1;

305 
ªt
 = 0;

307 
	`de°ru˘_scsi_±_obj
(
±vp
);

308  
ªt
;

309 
	}
}

313 
	$maö
(
¨gc
, * 
¨gv
[])

315 
sg_fd
, 
ªs
, 
c
, 
öfd
, 
¥Ÿ_í
, 
a˘_cdb_Àn
, 
vb
;

316 
num_giví
 = 0;

317 
lba_giví
 = 0;

318 
if_giví
 = 0;

319 
gŸ_°dö
 = 0;

320 
öt64_t
 
Œ
;

321 
uöt32_t
 
block_size
;

322 c⁄° * 
devi˚_«me
 = 
NULL
;

323 
ebuff
[
EBUFF_SZ
];

324 
ª•_buff
[
RCAP16_RESP_LEN
];

325 * 
wBuff
 = 
NULL
;

326 
ªt
 = -1;

327 
›ts_t
 
›ts
;

328 
°©
 
a_°©
;

330 
	`mem£t
(&
›ts
, 0, (opts));

331 
›ts
.
numblocks
 = 
DEF_WS_NUMBLOCKS
;

332 
›ts
.
¥ef_cdb_size
 = 
DEF_WS_CDB_SIZE
;

333 
›ts
.
timeout
 = 
DEF_TIMEOUT_SECS
;

334 
vb
 = 0;

336 
›ti⁄_ödex
 = 0;

338 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "ag:hi:l:Ln:NPRSt:TUvVw:x:",

339 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

340 i‡(
c
 == -1)

343 
c
) {

345 ++
›ts
.
™ch‹
;

348 
›ts
.
gΩnum
 = 
	`sg_gë_num
(
›èrg
);

349 i‡((
›ts
.
gΩnum
 < 0) || (opts.grpnum > 31)) {

350 
	`Ârötf
(
°dîr
, "badárgumentÅo '--grpnum'\n");

351  
SG_LIB_SYNTAX_ERROR
;

356 
	`ußge
();

359 
	`°∫˝y
(
›ts
.
ifûíame
, 
›èrg
, (opts.ifilename));

360 
if_giví
 = 1;

363 
Œ
 = 
	`sg_gë_Œnum
(
›èrg
);

364 i‡(-1 =
Œ
) {

365 
	`Ârötf
(
°dîr
, "badárgumentÅo '--lba'\n");

366  
SG_LIB_SYNTAX_ERROR
;

368 
›ts
.
lba
 = (
uöt64_t
)
Œ
;

369 
lba_giví
 = 1;

372 ++
›ts
.
lbd©a
;

375 
›ts
.
numblocks
 = 
	`sg_gë_num
(
›èrg
);

376 i‡(
›ts
.
numblocks
 < 0) {

377 
	`Ârötf
(
°dîr
, "badárgumentÅo '--num'\n");

378  
SG_LIB_SYNTAX_ERROR
;

380 
num_giví
 = 1;

383 ++
›ts
.
ndob
;

386 ++
›ts
.
pbd©a
;

389 ++
›ts
.
w™t_ws10
;

392 i‡(
DEF_WS_CDB_SIZE
 !
›ts
.
¥ef_cdb_size
) {

393 
	`Ârötf
(
°dîr
, "only one '--10', '--16' or '--32' "

395  
SG_LIB_SYNTAX_ERROR
;

397 
›ts
.
¥ef_cdb_size
 = 16;

400 
›ts
.
timeout
 = 
	`sg_gë_num
(
›èrg
);

401 i‡(
›ts
.
timeout
 < 0) {

402 
	`Ârötf
(
°dîr
, "badárgumentÅo '--timeout'\n");

403  
SG_LIB_SYNTAX_ERROR
;

407 i‡(
DEF_WS_CDB_SIZE
 !
›ts
.
¥ef_cdb_size
) {

408 
	`Ârötf
(
°dîr
, "only one '--10', '--16' or '--32' "

410  
SG_LIB_SYNTAX_ERROR
;

412 
›ts
.
¥ef_cdb_size
 = 32;

415 ++
›ts
.
unm≠
;

418 ++
›ts
.
vîbo£
;

421 
	`Ârötf
(
°dîr
, 
ME
 "vîsi⁄: %s\n", 
vîsi⁄_°r
);

424 
›ts
.
wΩrŸe˘
 = 
	`sg_gë_num
(
›èrg
);

425 i‡((
›ts
.
wΩrŸe˘
 < 0) || (opts.wrprotect > 7)) {

426 
	`Ârötf
(
°dîr
, "badárgumentÅo '--wrprotect'\n");

427  
SG_LIB_SYNTAX_ERROR
;

431 
›ts
.
x„r_Àn
 = 
	`sg_gë_num
(
›èrg
);

432 i‡(
›ts
.
x„r_Àn
 < 0) {

433 
	`Ârötf
(
°dîr
, "badárgumentÅo '--xferlen'\n");

434  
SG_LIB_SYNTAX_ERROR
;

438 
	`Ârötf
(
°dîr
, "uƒecogni£d o±i⁄ codê0x%x ??\n", 
c
);

439 
	`ußge
();

440  
SG_LIB_SYNTAX_ERROR
;

443 i‡(
›töd
 < 
¨gc
) {

444 i‡(
NULL
 =
devi˚_«me
) {

445 
devi˚_«me
 = 
¨gv
[
›töd
];

446 ++
›töd
;

448 i‡(
›töd
 < 
¨gc
) {

449 ; 
›töd
 < 
¨gc
; ++optind)

450 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

451 
¨gv
[
›töd
]);

452 
	`ußge
();

453  
SG_LIB_SYNTAX_ERROR
;

456 i‡(
›ts
.
w™t_ws10
 && (
DEF_WS_CDB_SIZE
 !›ts.
¥ef_cdb_size
)) {

457 
	`Ârötf
(
°dîr
, "only one '--10', '--16' or '--32'Ölease\n");

458  
SG_LIB_SYNTAX_ERROR
;

460 i‡(
NULL
 =
devi˚_«me
) {

461 
	`Ârötf
(
°dîr
, "missing deviceÇame!\n");

462 
	`ußge
();

463  
SG_LIB_SYNTAX_ERROR
;

465 
vb
 = 
›ts
.
vîbo£
;

467 i‡((! 
if_giví
Ë&& (! 
lba_giví
Ë&& (! 
num_giví
)) {

468 
	`Ârötf
(
°dîr
, "AsáÖrecautionÑequire one of '--in=', '--lba=' "

470  
SG_LIB_SYNTAX_ERROR
;

473 i‡(
›ts
.
ndob
) {

474 i‡(
if_giví
) {

475 
	`Ârötf
(
°dîr
, "Can't have both --ndobánd '--in='\n");

476  
SG_LIB_SYNTAX_ERROR
;

478 i‡(0 !
›ts
.
x„r_Àn
) {

479 
	`Ârötf
(
°dîr
, "With --ndob only '--xferlen=0' (orÇot given) "

481  
SG_LIB_SYNTAX_ERROR
;

483 } i‡(
›ts
.
ifûíame
[0]) {

484 
gŸ_°dö
 = (0 =
	`°rcmp
(
›ts
.
ifûíame
, "-")) ? 1 : 0;

485 i‡(! 
gŸ_°dö
) {

486 
	`mem£t
(&
a_°©
, 0, (a_stat));

487 i‡(
	`°©
(
›ts
.
ifûíame
, &
a_°©
) < 0) {

488 i‡(
vb
)

489 
	`Ârötf
(
°dîr
, "unableÅo stat(%s): %s\n",

490 
›ts
.
ifûíame
, 
	`ß„_°ªº‹
(
î∫o
));

491  
SG_LIB_FILE_ERROR
;

493 i‡(
›ts
.
x„r_Àn
 <= 0)

494 
›ts
.
x„r_Àn
 = ()
a_°©
.
°_size
;

498 
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
devi˚_«me
, 0 , 
vb
);

499 i‡(
sg_fd
 < 0) {

500 
	`Ârötf
(
°dîr
, 
ME
 "›íÉº‹: %s: %s\n", 
devi˚_«me
,

501 
	`ß„_°ªº‹
(-
sg_fd
));

502  
SG_LIB_FILE_ERROR
;

505 i‡(! 
›ts
.
ndob
) {

506 
¥Ÿ_í
 = 0;

507 i‡(0 =
›ts
.
x„r_Àn
) {

508 
ªs
 = 
	`sg_Œ_ªadˇp_16
(
sg_fd
, 0 , 0 , 
ª•_buff
,

509 
RCAP16_RESP_LEN
, 0, (
vb
 ? (vb - 1): 0));

510 i‡(0 =
ªs
) {

511 i‡(
vb
 > 3)

512 
	`dSåHex
((c⁄° *)
ª•_buff
, 
RCAP16_RESP_LEN
, 1);

513 
block_size
 = ((
ª•_buff
[8] << 24) |

514 (
ª•_buff
[9] << 16) |

515 (
ª•_buff
[10] << 8) |

516 
ª•_buff
[11]);

517 
¥Ÿ_í
 = !!(
ª•_buff
[12] & 0x1);

518 
›ts
.
x„r_Àn
 = 
block_size
;

519 i‡(
¥Ÿ_í
 && (
›ts
.
wΩrŸe˘
 > 0))

520 
›ts
.
x„r_Àn
 += 8;

521 } i‡((
SG_LIB_CAT_INVALID_OP
 =
ªs
) ||

522 (
SG_LIB_CAT_ILLEGAL_REQ
 =
ªs
)) {

523 i‡(
vb
)

524 
	`Ârötf
(
°dîr
, "Read capacity(16)Çot supported,Åry "

526 
ªs
 = 
	`sg_Œ_ªadˇp_10
(
sg_fd
, 0 , 0 ,

527 
ª•_buff
, 
RCAP10_RESP_LEN
, 0,

528 (
vb
 ? (vb - 1): 0));

529 i‡(0 =
ªs
) {

530 i‡(
vb
 > 3)

531 
	`dSåHex
((c⁄° *)
ª•_buff
, 
RCAP10_RESP_LEN
, 1);

532 
block_size
 = ((
ª•_buff
[4] << 24) |

533 (
ª•_buff
[5] << 16) |

534 (
ª•_buff
[6] << 8) |

535 
ª•_buff
[7]);

536 
›ts
.
x„r_Àn
 = 
block_size
;

538 } i‡(
vb
)

539 
	`Ârötf
(
°dîr
, "Read capacity(16) failed. UnableÅo "

541 i‡(
ªs
)

542 
	`Ârötf
(
°dîr
, "Read capacity(10) failed. UnableÅo "

545 i‡(
›ts
.
x„r_Àn
 < 1) {

546 
	`Ârötf
(
°dîr
, "unableÅo deduce block size,Ölease give "

548 
ªt
 = 
SG_LIB_SYNTAX_ERROR
;

549 
îr_out
;

551 i‡(
›ts
.
x„r_Àn
 > 
MAX_XFER_LEN
) {

552 
	`Ârötf
(
°dîr
, "'--xferlen=%d is out ofÑange ( want <= %d)\n",

553 
›ts
.
x„r_Àn
, 
MAX_XFER_LEN
);

554 
ªt
 = 
SG_LIB_SYNTAX_ERROR
;

555 
îr_out
;

557 
wBuff
 = (*)
	`ˇŒoc
(
›ts
.
x„r_Àn
, 1);

558 i‡(
NULL
 =
wBuff
) {

559 
	`Ârötf
(
°dîr
, "unableÅoállocate %d bytes of memory with "

560 "ˇŒoc()\n", 
›ts
.
x„r_Àn
);

561 
ªt
 = 
SG_LIB_SYNTAX_ERROR
;

562 
îr_out
;

564 i‡(
›ts
.
ifûíame
[0]) {

565 i‡(
gŸ_°dö
) {

566 
öfd
 = 
STDIN_FILENO
;

567 i‡(
	`sg_£t_bö¨y_mode
(
STDIN_FILENO
) < 0)

568 
	`≥º‹
("sg_set_binary_mode");

570 i‡((
öfd
 = 
	`›í
(
›ts
.
ifûíame
, 
O_RDONLY
)) < 0) {

571 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, 
ME
 "couldÇot open %s for "

572 "ªadög", 
›ts
.
ifûíame
);

573 
	`≥º‹
(
ebuff
);

574 
ªt
 = 
SG_LIB_FILE_ERROR
;

575 
îr_out
;

576 } i‡(
	`sg_£t_bö¨y_mode
(
öfd
) < 0)

577 
	`≥º‹
("sg_set_binary_mode");

579 
ªs
 = 
	`ªad
(
öfd
, 
wBuff
, 
›ts
.
x„r_Àn
);

580 i‡(
ªs
 < 0) {

581 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, 
ME
 "couldn'tÑead from %s",

582 
›ts
.
ifûíame
);

583 
	`≥º‹
(
ebuff
);

584 i‡(! 
gŸ_°dö
)

585 
	`˛o£
(
öfd
);

586 
ªt
 = 
SG_LIB_FILE_ERROR
;

587 
îr_out
;

589 i‡(
ªs
 < 
›ts
.
x„r_Àn
) {

590 
	`Ârötf
(
°dîr
, "triedÅoÑead %d bytes from %s, got %d "

591 "byãs\n", 
›ts
.
x„r_Àn
, o±s.
ifûíame
, 
ªs
);

592 
	`Ârötf
(
°dîr
, " soÖad with 0x0 bytesánd continue\n");

594 i‡(! 
gŸ_°dö
)

595 
	`˛o£
(
öfd
);

597 i‡(
vb
)

598 
	`Ârötf
(
°dîr
, "Default data-out buffer setÅo %d zeros\n",

599 
›ts
.
x„r_Àn
);

600 i‡(
¥Ÿ_í
 && (
›ts
.
wΩrŸe˘
 > 0)) {

602 
	`mem£t
(
wBuff
 + 
›ts
.
x„r_Àn
 - 8, 0xff, 8);

603 i‡(
vb
)

604 
	`Ârötf
(
°dîr
, " ...ápart fromÜast 8 bytes whicháre "

610 
ªt
 = 
	`do_wrôe_ßme
(
sg_fd
, &
›ts
, 
wBuff
, &
a˘_cdb_Àn
);

611 i‡(
ªt
) {

612 
ªt
) {

613 
SG_LIB_CAT_NOT_READY
:

614 
	`Ârötf
(
°dîr
, "Write same(%d) failed, deviceÇotÑeady\n",

615 
a˘_cdb_Àn
);

617 
SG_LIB_CAT_UNIT_ATTENTION
:

618 
	`Ârötf
(
°dîr
, "Wrôêßme(%d), unôáâíti⁄\n", 
a˘_cdb_Àn
);

620 
SG_LIB_CAT_ABORTED_COMMAND
:

621 
	`Ârötf
(
°dîr
, "Wrôêßme(%d),áb‹ãd comm™d\n", 
a˘_cdb_Àn
);

623 
SG_LIB_CAT_INVALID_OP
:

624 
	`Ârötf
(
°dîr
, "Write same(%d) commandÇot supported\n",

625 
a˘_cdb_Àn
);

627 
SG_LIB_CAT_ILLEGAL_REQ
:

628 
	`Ârötf
(
°dîr
, "bad field in Write same(%d) cdb, option "

629 "¥obablyÇŸ suµ‹ãd\n", 
a˘_cdb_Àn
);

631 
SG_LIB_CAT_MEDIUM_HARD
:

632 
	`Ârötf
(
°dîr
, "Write same(%d) commandÑeported medium or "

633 "h¨dw¨êîr‹\n", 
a˘_cdb_Àn
);

636 
	`Ârötf
(
°dîr
, "Wrôêßme(%dËcomm™d faûed\n", 
a˘_cdb_Àn
);

641 
îr_out
:

642 i‡(
wBuff
)

643 
	`‰ì
(
wBuff
);

644 
ªs
 = 
	`sg_cmds_˛o£_devi˚
(
sg_fd
);

645 i‡(
ªs
 < 0) {

646 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(-
ªs
));

647 i‡(0 =
ªt
)

648  
SG_LIB_FILE_ERROR
;

650  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

651 
	}
}

	@src/sg_xcopy.c

31 
	#_XOPEN_SOURCE
 600

	)

32 #i‚de‡
_GNU_SOURCE


33 
	#_GNU_SOURCE


	)

36 
	~<uni°d.h
>

37 
	~<f˙é.h
>

38 
	~<°dio.h
>

39 
	~<°dlib.h
>

40 
	~<°rög.h
>

41 
	~<sig«l.h
>

42 
	~<˘y≥.h
>

43 
	~<î∫o.h
>

44 
	~<limôs.h
>

45 
	#__STDC_FORMAT_MACROS
 1

	)

46 
	~<öây≥s.h
>

47 
	~<sys/io˘l.h
>

48 
	~<sys/ty≥s.h
>

49 
	~<sys/°©.h
>

50 
	~<sys/sysma¸os.h
>

51 
	~<sys/time.h
>

52 
	~<sys/fûe.h
>

53 
	~<löux/maj‹.h
>

54 
	~<löux/fs.h
>

56 #ifde‡
HAVE_CONFIG_H


57 
	~"c⁄fig.h
"

59 
	~"sg_lib.h
"

60 
	~"sg_cmds_basic.h
"

61 
	~"sg_cmds_exåa.h
"

62 
	~"sg_io_löux.h
"

64 c⁄° * 
	gvîsi⁄_°r
 = "0.34 20130507";

66 
	#ME
 "sg_xc›y: "

	)

68 
	#SG_DEBUG


	)

70 
	#STR_SZ
 1024

	)

71 
	#INOUTF_SZ
 512

	)

72 
	#EBUFF_SZ
 512

	)

74 
	#DEF_BLOCK_SIZE
 512

	)

75 
	#DEF_BLOCKS_PER_TRANSFER
 128

	)

76 
	#DEF_BLOCKS_PER_2048TRANSFER
 32

	)

78 
	#DEF_MODE_RESP_LEN
 252

	)

79 
	#RW_ERR_RECOVERY_MP
 1

	)

80 
	#CACHING_MP
 8

	)

81 
	#CONTROL_MP
 0xa

	)

83 
	#SENSE_BUFF_LEN
 64

	)

84 
	#READ_CAP_REPLY_LEN
 8

	)

85 
	#RCAP16_REPLY_LEN
 32

	)

87 
	#DEF_TIMEOUT
 60000

	)

89 #i‚de‡
RAW_MAJOR


90 
	#RAW_MAJOR
 255

	)

93 
	#SG_LIB_FLOCK_ERR
 90

	)

95 
	#FT_OTHER
 1

	)

96 
	#FT_SG
 2

	)

98 
	#FT_RAW
 4

	)

99 
	#FT_DEV_NULL
 8

	)

100 
	#FT_ST
 16

	)

101 
	#FT_BLOCK
 32

	)

102 
	#FT_FIFO
 64

	)

103 
	#FT_ERROR
 128

	)

105 
	#TD_FC_WWPN
 1

	)

106 
	#TD_FC_PORT
 2

	)

107 
	#TD_FC_WWPN_AND_PORT
 4

	)

108 
	#TD_SPI
 8

	)

109 
	#TD_VPD
 16

	)

110 
	#TD_IPV4
 32

	)

111 
	#TD_ALIAS
 64

	)

112 
	#TD_RDMA
 128

	)

113 
	#TD_FW
 256

	)

114 
	#TD_SAS
 512

	)

115 
	#TD_IPV6
 1024

	)

116 
	#TD_IP_COPY_SERVICE
 2048

	)

117 
	#TD_ROD
 4096

	)

119 
	#DEV_NULL_MINOR_NUM
 3

	)

121 
	#MIN_RESERVED_SIZE
 8192

	)

123 
	#MAX_UNIT_ATTENTIONS
 10

	)

124 
	#MAX_ABORTED_CMDS
 256

	)

126 
öt64_t
 
	gdd_cou¡
 = -1;

127 
öt64_t
 
	gö_fuŒ
 = 0;

128 
	gö_∑πül
 = 0;

129 
öt64_t
 
	gout_fuŒ
 = 0;

130 
	gout_∑πül
 = 0;

132 
	gªcovîed_îrs
 = 0;

133 
	guƒecovîed_îrs
 = 0;

134 
	gnum_ªåõs
 = 0;

137 
	gdo_time
 = 0;

138 
	gvîbo£
 = 0;

139 
	g°¨t_tm_vÆid
 = 0;

140 
timevÆ
 
	g°¨t_tm
;

141 
	gblk_sz
 = 0;

142 
	g¥i‹ôy
 = 1;

143 
	gli°_id_ußge
 = -1;

145 
	gxc›y_Êag_ˇt
 = 0;

146 
	gxc›y_Êag_dc
 = 0;

148 
	sxc›y_Â_t
 {

149 
	m‚ame
[
INOUTF_SZ
];

150 
dev_t
 
	mdevno
;

151 
	msg_ty≥
;

152 
	msg_fd
;

153 
	mmö_byãs
;

154 
	mmax_byãs
;

155 
öt64_t
 
	mnum_£˘
;

156 
	m£˘_sz
;

157 
	m≠≥nd
;

158 
	mex˛
;

159 
	mÊock
;

160 
	m∑d
;

161 
	mpdt
;

163 
	mªåõs
;

167 
xc›y_Â_t
 
	giÂ
;

168 
xc›y_Â_t
 
	goÂ
;

170 
ˇlc_duøti⁄_throughput
(
c⁄tö
);

174 
ö°Æl_h™dÀr
(
sig_num
, (*
sig_h™dÀr
Ë(
sig
))

176 
siga˘i⁄
 
siga˘
;

177 
	`siga˘i⁄
 (
sig_num
, 
NULL
, &
siga˘
);

178 i‡(
siga˘
.
ß_h™dÀr
 !
SIG_IGN
)

180 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

181 
	`sigem±y£t
 (&
siga˘
.
ß_mask
);

182 
siga˘
.
ß_Êags
 = 0;

183 
	`siga˘i⁄
 (
sig_num
, &
siga˘
, 
NULL
);

185 
	}
}

189 
	$¥öt_°©s
(c⁄° * 
°r
)

191 i‡(0 !
dd_cou¡
)

192 
	`Ârötf
(
°dîr
, "Ñemaöög block cou¡=%"
PRId64
"\n", 
dd_cou¡
);

193 
	`Ârötf
(
°dîr
, "%s%"
PRId64
"+%dÑec‹d†ö\n", 
°r
, 
ö_fuŒ
 - 
ö_∑πül
,

194 
ö_∑πül
);

195 
	`Ârötf
(
°dîr
, "%s%"
PRId64
"+%dÑec‹d†out\n", 
°r
,

196 
out_fuŒ
 - 
out_∑πül
, out_partial);

198 i‡(
ªcovîed_îrs
 > 0)

199 
	`Ârötf
(
°dîr
, "%s%dÑecovîedÉº‹s\n", 
°r
, 
ªcovîed_îrs
);

200 i‡(
num_ªåõs
 > 0)

201 
	`Ârötf
(
°dîr
, "%s%dÑërõ†©ãm±ed\n", 
°r
, 
num_ªåõs
);

202 i‡(
uƒecovîed_îrs
)

203 
	`Ârötf
(
°dîr
, "%s%d uƒecovîedÉº‹(s)\n", 
°r
,

204 
uƒecovîed_îrs
);

206 
	}
}

210 
	$öãºu±_h™dÀr
(
sig
)

212 
siga˘i⁄
 
siga˘
;

214 
siga˘
.
ß_h™dÀr
 = 
SIG_DFL
;

215 
	`sigem±y£t
(&
siga˘
.
ß_mask
);

216 
siga˘
.
ß_Êags
 = 0;

217 
	`siga˘i⁄
(
sig
, &
siga˘
, 
NULL
);

218 
	`Ârötf
(
°dîr
, "Interrupted by signal,");

219 i‡(
do_time
)

220 
	`ˇlc_duøti⁄_throughput
(0);

221 
	`¥öt_°©s
("");

222 
	`kûl
(
	`gëpid
 (), 
sig
);

223 
	}
}

227 
	$sigöfo_h™dÀr
(
sig
)

229 
sig
 = sig;

230 
	`Ârötf
(
°dîr
, "ProgressÑeport, continuing ...\n");

231 i‡(
do_time
)

232 
	`ˇlc_duøti⁄_throughput
(1);

233 
	`¥öt_°©s
(" ");

234 
	}
}

236 
	gbsg_maj‹_checked
 = 0;

237 
	gbsg_maj‹
 = 0;

240 
	$föd_bsg_maj‹
()

242 c⁄° * 
¥oc_devi˚s
 = "/proc/devices";

243 
FILE
 *
Â
;

244 
a
[128];

245 
b
[128];

246 * 
˝
;

247 
n
;

249 i‡(
NULL
 =(
Â
 = 
	`f›í
(
¥oc_devi˚s
, "r"))) {

250 i‡(
vîbo£
)

251 
	`Ârötf
(
°dîr
, "f›í %†Áûed: %s\n", 
¥oc_devi˚s
,

252 
	`°ªº‹
(
î∫o
));

255 (
˝
 = 
	`fgës
(
b
, (b), 
Â
))) {

256 i‡((1 =
	`ssˇnf
(
b
, "%s", 
a
)) &&

257 (0 =
	`memcmp
(
a
, "Character", 9)))

260 
˝
 && (˝ = 
	`fgës
(
b
, (b), 
Â
))) {

261 i‡(2 =
	`ssˇnf
(
b
, "%d %s", &
n
, 
a
)) {

262 i‡(0 =
	`°rcmp
("bsg", 
a
)) {

263 
bsg_maj‹
 = 
n
;

269 i‡(
vîbo£
 > 5) {

270 i‡(
˝
)

271 
	`Ârötf
(
°dîr
, "found bsg_maj‹=%d\n", 
bsg_maj‹
);

273 
	`Ârötf
(
°dîr
, "foundÇÿbsg ch¨ devi˚ i¿%s\n", 
¥oc_devi˚s
);

275 
	`f˛o£
(
Â
);

276 
	}
}

279 
	$›í_sg
(
xc›y_Â_t
 * 
Â
, 
vîbo£
)

281 
devmaj‹
, 
devmö‹
, 
off£t
;

282 
sg_sim∂e_öquúy_ª•
 
sú
;

283 
ebuff
[
EBUFF_SZ
];

284 
Àn
;

286 
devmaj‹
 = 
	`maj‹
(
Â
->
devno
);

287 
devmö‹
 = 
	`mö‹
(
Â
->
devno
);

289 i‡(
Â
->
sg_ty≥
 & 
FT_SG
) {

290 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, "%s", 
Â
->
‚ame
);

291 } i‡(
Â
->
sg_ty≥
 & 
FT_BLOCK
 || fp->sg_ty≥ & 
FT_OTHER
) {

292 
fd
;

294 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, "/sys/dev/block/%d:%d/partition",

295 
devmaj‹
, 
devmö‹
);

296 i‡((
fd
 = 
	`›í
(
ebuff
, 
O_RDONLY
)) >= 0) {

297 
Àn
 = 
	`ªad
(
fd
, 
ebuff
, 
EBUFF_SZ
);

298 i‡(
Àn
 < 0) {

299 
	`≥º‹
("readÖartition");

301 
off£t
 = 
	`°πoul
(
ebuff
, 
NULL
, 10);

302 
devmö‹
 -
off£t
;

304 
	`˛o£
(
fd
);

306 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, "/dev/block/%d:%d", 
devmaj‹
, 
devmö‹
);

308 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, "/dev/ch¨/%d:%d", 
devmaj‹
, 
devmö‹
);

310 
Â
->
sg_fd
 = 
	`sg_cmds_›í_devi˚
(
ebuff
, 0, 
vîbo£
);

311 i‡(
Â
->
sg_fd
 < 0) {

312 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

313 
ME
 "couldÇot open %s device %d:%d for sg",

314 
Â
->
sg_ty≥
 & 
FT_BLOCK
 ? "block" : "char",

315 
devmaj‹
, 
devmö‹
);

316 
	`≥º‹
(
ebuff
);

319 i‡(
	`sg_sim∂e_öquúy
(
Â
->
sg_fd
, &
sú
, 0, 
vîbo£
)) {

320 
	`Ârötf
(
°dîr
, "INQUIRY faûed o¿%s\n", 
ebuff
);

321 
	`sg_cmds_˛o£_devi˚
(
Â
->
sg_fd
);

322 
Â
->
sg_fd
 = -1;

323  
Â
->
sg_fd
;

326 
Â
->
pdt
 = 
sú
.
≥rùhîÆ_ty≥
;

327 i‡(
vîbo£
)

328 
	`Ârötf
(
°dîr
, " %s: %.8s %.16s %.4s [pdt=%d]\n",

329 
Â
->
‚ame
, 
sú
.
víd‹
, sú.
¥odu˘
, sú.
ªvisi⁄
, fp->
pdt
);

331  
Â
->
sg_fd
;

332 
	}
}

335 
	$dd_fûëy≥
(
xc›y_Â_t
 * 
Â
)

337 
°©
 
°
;

338 
size_t
 
Àn
 = 
	`°æí
(
Â
->
‚ame
);

340 i‡((1 =
Àn
Ë&& ('.' =
Â
->
‚ame
[0]))

341  
FT_DEV_NULL
;

342 i‡(
	`°©
(
Â
->
‚ame
, &
°
) < 0)

343  
FT_ERROR
;

344 i‡(
	`S_ISCHR
(
°
.
°_mode
)) {

345 
Â
->
devno
 = 
°
.
°_rdev
;

347 i‡((
MEM_MAJOR
 =
	`maj‹
(
°
.
°_rdev
)) &&

348 (
DEV_NULL_MINOR_NUM
 =
	`mö‹
(
°
.
°_rdev
)))

349  
FT_DEV_NULL
;

350 i‡(
RAW_MAJOR
 =
	`maj‹
(
°
.
°_rdev
))

351  
FT_RAW
;

352 i‡(
SCSI_GENERIC_MAJOR
 =
	`maj‹
(
°
.
°_rdev
))

353  
FT_SG
;

354 i‡(
SCSI_TAPE_MAJOR
 =
	`maj‹
(
°
.
°_rdev
))

355  
FT_ST
;

356 i‡(! 
bsg_maj‹_checked
) {

357 
bsg_maj‹_checked
 = 1;

358 
	`föd_bsg_maj‹
();

360 i‡(
bsg_maj‹
 =()
	`maj‹
(
°
.
°_rdev
))

361  
FT_SG
;

362 } i‡(
	`S_ISBLK
(
°
.
°_mode
)) {

363 
Â
->
devno
 = 
°
.
°_rdev
;

364  
FT_BLOCK
;

365 } i‡(
	`S_ISFIFO
(
°
.
°_mode
)) {

366 
Â
->
devno
 = 
°
.
°_dev
;

367  
FT_FIFO
;

369 
Â
->
devno
 = 
°
.
°_dev
;

370  
FT_OTHER
 | 
FT_BLOCK
;

371 
	}
}

375 
	$dd_fûëy≥_°r
(
·
, * 
buff
)

377 
off
 = 0;

379 i‡(
FT_DEV_NULL
 & 
·
)

380 
off
 +
	`¢¥ötf
(
buff
 + off, 32, "null device ");

381 i‡(
FT_SG
 & 
·
)

382 
off
 +
	`¢¥ötf
(
buff
 + off, 32, "SCSI generic (sg) device ");

383 i‡(
FT_BLOCK
 & 
·
)

384 
off
 +
	`¢¥ötf
(
buff
 + off, 32, "block device ");

385 i‡(
FT_FIFO
 & 
·
)

386 
off
 +
	`¢¥ötf
(
buff
 + off, 32, "fifo (namedÖipe) ");

387 i‡(
FT_ST
 & 
·
)

388 
off
 +
	`¢¥ötf
(
buff
 + off, 32, "SCSIÅape device ");

389 i‡(
FT_RAW
 & 
·
)

390 
off
 +
	`¢¥ötf
(
buff
 + off, 32, "raw device ");

391 i‡(
FT_OTHER
 & 
·
)

392 
off
 +
	`¢¥ötf
(
buff
 + off, 32, "other (perhaps ordinary file) ");

393 i‡(
FT_ERROR
 & 
·
)

394 
off
 +
	`¢¥ötf
(
buff
 + off, 32, "unableÅo 'stat' file ");

395  
buff
;

396 
	}
}

399 
	$£g_desc_‰om_dd_ty≥
(
ö_·
, 
ö_off
, 
out_·
, 
out_off
)

401 
desc_ty≥
 = -1;

403 
ö_·
) {

404 
FT_BLOCK
:

405 
out_·
) {

406 
FT_ST
:

407 i‡(
out_off
)

410 i‡(
ö_off
)

411 
desc_ty≥
 = 0x8;

413 
desc_ty≥
 = 0;

415 
FT_BLOCK
:

416 i‡(
ö_off
 || 
out_off
)

417 
desc_ty≥
 = 0xA;

419 
desc_ty≥
 = 2;

425 
FT_ST
:

426 i‡(
ö_off
)

429 
out_·
) {

430 
FT_ST
:

431 i‡(!
out_off
) {

432 
desc_ty≥
 = 3;

436 
FT_BLOCK
:

437 i‡(
out_off
)

438 
desc_ty≥
 = 9;

440 
desc_ty≥
 = 3;

442 
FT_DEV_NULL
:

443 
desc_ty≥
 = 6;

453  
desc_ty≥
;

454 
	}
}

457 
	$ußge
()

459 
	`Ârötf
(
°dîr
, "Usage: "

474 
	`Ârötf
(
°dîr
,

491 
	`Ârötf
(
°dîr
,

512 
	}
}

515 
	$scsi_ícode_£g_desc
(*
£g_desc
, 
£g_desc_ty≥
,

516 
öt64_t
 
num_blk
, 
uöt64_t
 
§c_lba
, uöt64_à
d°_lba
)

518 
£g_desc_Àn
 = 0;

520 
£g_desc
[0] = 
£g_desc_ty≥
;

521 
£g_desc
[1] = 
xc›y_Êag_ˇt
 | (
xc›y_Êag_dc
 << 1);

522 i‡(
£g_desc_ty≥
 == 0x02) {

523 
£g_desc_Àn
 = 0x18;

524 
£g_desc
[4] = 0;

525 
£g_desc
[5] = 0;

526 
£g_desc
[7] = 1;

527 
£g_desc
[10] = (
num_blk
 >> 8) & 0xff;

528 
£g_desc
[11] = 
num_blk
 & 0xff;

529 
£g_desc
[12] = (
§c_lba
 >> 56) & 0xff;

530 
£g_desc
[13] = (
§c_lba
 >> 48) & 0xff;

531 
£g_desc
[14] = (
§c_lba
 >> 40) & 0xff;

532 
£g_desc
[15] = (
§c_lba
 >> 32) & 0xff;

533 
£g_desc
[16] = (
§c_lba
 >> 24) & 0xff;

534 
£g_desc
[17] = (
§c_lba
 >> 16) & 0xff;

535 
£g_desc
[18] = (
§c_lba
 >> 8) & 0xff;

536 
£g_desc
[19] = 
§c_lba
 & 0xff;

537 
£g_desc
[20] = (
d°_lba
 >> 56) & 0xff;

538 
£g_desc
[21] = (
d°_lba
 >> 48) & 0xff;

539 
£g_desc
[22] = (
d°_lba
 >> 40) & 0xff;

540 
£g_desc
[23] = (
d°_lba
 >> 32) & 0xff;

541 
£g_desc
[24] = (
d°_lba
 >> 24) & 0xff;

542 
£g_desc
[25] = (
d°_lba
 >> 16) & 0xff;

543 
£g_desc
[26] = (
d°_lba
 >> 8) & 0xff;

544 
£g_desc
[27] = 
d°_lba
 & 0xff;

546 
£g_desc
[2] = (
£g_desc_Àn
 >> 8) & 0xFF;

547 
£g_desc
[3] = 
£g_desc_Àn
 & 0xFF;

549  
£g_desc_Àn
 + 4;

550 
	}
}

553 
	$scsi_exãnded_c›y
(
sg_fd
, 
li°_id
,

554 *
§c_desc
, 
§c_desc_Àn
,

555 *
d°_desc
, 
d°_desc_Àn
,

556 
£g_desc_ty≥
, 
öt64_t
 
num_blk
,

557 
uöt64_t
 
§c_lba
, uöt64_à
d°_lba
)

559 
xc›yBuff
[256];

560 
desc_off£t
 = 16;

561 
£g_desc_Àn
;

562 
vîb
;

564 
vîb
 = (
vîbo£
 ? verbose - 1: 0);

566 
	`mem£t
(
xc›yBuff
, 0, 256);

567 
xc›yBuff
[0] = 
li°_id
;

568 
xc›yBuff
[1] = (
li°_id_ußge
 << 3Ë| 
¥i‹ôy
;

569 
xc›yBuff
[2] = 0;

570 
xc›yBuff
[3] = 
§c_desc_Àn
 + 
d°_desc_Àn
;

571 
	`mem˝y
(
xc›yBuff
 + 
desc_off£t
, 
§c_desc
, 
§c_desc_Àn
);

572 
desc_off£t
 +
§c_desc_Àn
;

573 
	`mem˝y
(
xc›yBuff
 + 
desc_off£t
, 
d°_desc
, 
d°_desc_Àn
);

574 
desc_off£t
 +
d°_desc_Àn
;

575 
£g_desc_Àn
 = 
	`scsi_ícode_£g_desc
(
xc›yBuff
 + 
desc_off£t
,

576 
£g_desc_ty≥
, 
num_blk
,

577 
§c_lba
, 
d°_lba
);

578 
xc›yBuff
[11] = 
£g_desc_Àn
;

579 
desc_off£t
 +
£g_desc_Àn
;

580 i‡(
vîbo£
 > 3) {

581 
	`Ârötf
(
°dîr
, "\nP¨amëîÜi° i¿hex (Àngth %d):\n", 
desc_off£t
);

582 
	`dSåHex
((c⁄° *)
xc›yBuff
, 
desc_off£t
, 1);

584  
	`sg_Œ_exãnded_c›y
(
sg_fd
, 
xc›yBuff
, 
desc_off£t
, 0, 
vîb
);

585 
	}
}

589 
	$scsi_ªad_ˇ∑côy
(
xc›y_Â_t
 *
xÂ
)

591 
k
, 
ªs
;

592 
ui
;

593 
rcBuff
[
RCAP16_REPLY_LEN
];

594 
vîb
;

596 
vîb
 = (
vîbo£
 ? verbose - 1: 0);

597 
ªs
 = 
	`sg_Œ_ªadˇp_10
(
xÂ
->
sg_fd
, 0, 0, 
rcBuff
,

598 
READ_CAP_REPLY_LEN
, 0, 
vîb
);

599 i‡(0 !
ªs
)

600  
ªs
;

602 i‡((0xf‡=
rcBuff
[0]) && (0xff ==ÑcBuff[1]) && (0xff ==ÑcBuff[2]) &&

603 (0xf‡=
rcBuff
[3])) {

604 
öt64_t
 
ls
;

606 
ªs
 = 
	`sg_Œ_ªadˇp_16
(
xÂ
->
sg_fd
, 0, 0, 
rcBuff
,

607 
RCAP16_REPLY_LEN
, 0, 
vîb
);

608 i‡(0 !
ªs
)

609  
ªs
;

610 
k
 = 0, 
ls
 = 0; k < 8; ++k) {

611 
ls
 <<= 8;

612 
ls
 |
rcBuff
[
k
];

614 
xÂ
->
num_£˘
 = 
ls
 + 1;

615 
xÂ
->
£˘_sz
 = (
rcBuff
[8] << 24) | (rcBuff[9] << 16) |

616 (
rcBuff
[10] << 8) |ÑcBuff[11];

618 
ui
 = ((
rcBuff
[0] << 24) | (rcBuff[1] << 16) | (rcBuff[2] << 8) |

619 
rcBuff
[3]);

621 
xÂ
->
num_£˘
 = (
öt64_t
)
ui
 + 1;

622 
xÂ
->
£˘_sz
 = (
rcBuff
[4] << 24) | (rcBuff[5] << 16) |

623 (
rcBuff
[6] << 8) |ÑcBuff[7];

625 i‡(
vîbo£
)

626 
	`Ârötf
(
°dîr
, " %s:Çumbî o‡blocks=%"
PRId64
" [0x%"
PRIx64
"], "

627 "block size=%d\n", 
xÂ
->
‚ame
, xÂ->
num_£˘
, xfp->num_sect,

628 
xÂ
->
£˘_sz
);

630 
	}
}

633 
	$scsi_›î©ög_∑ømëî
(
xc›y_Â_t
 *
xÂ
, 
is_èrgë
)

635 
ªs
;

636 
rcBuff
[256];

637 
rcBuffLí
 = 256, 
Àn
, 
n
, 
td_li°
 = 0;

638 
num
, 
max_èrgë_num
, 
max_£gmít_num
, 
max_£gmít_Àn
;

639 
max_desc_Àn
, 
max_ölöe_d©a
, 
hñd_d©a_limô
;

640 
vîb
, 
vÆid
 = 0;

642 
vîb
 = (
vîbo£
 ? verbose - 1: 0);

643 
ªs
 = 
	`sg_Œ_ª˚ive_c›y_ªsu…s
(
xÂ
->
sg_fd
, 0x03, 0, 
rcBuff
, 
rcBuffLí
,

644 0, 
vîb
);

645 i‡(0 !
ªs
)

646  -
ªs
;

648 
Àn
 = (
rcBuff
[0] << 24) | (rcBuff[1] << 16) | (rcBuff[2] << 8) |

649 
rcBuff
[3];

650 i‡(
Àn
 > 
rcBuffLí
) {

651 
	`Ârötf
(
°dîr
, " <<reportÅooÜong for internal buffer,"

654 i‡(
vîbo£
 > 2) {

655 
	`Ârötf
(
°dîr
, "\nOutputÑesponse in hex:\n");

656 
	`dSåHex
((c⁄° *)
rcBuff
, 
Àn
, 1);

658 
max_èrgë_num
 = 
rcBuff
[8] << 8 |ÑcBuff[9];

659 
max_£gmít_num
 = 
rcBuff
[10] << 8 |ÑcBuff[11];

660 
max_desc_Àn
 = 
rcBuff
[12] << 24 |ÑcBuff[13] << 16 |ÑcBuff[14] << 8 |

661 
rcBuff
[15];

662 
max_£gmít_Àn
 = 
rcBuff
[16] << 24 |ÑcBuff[17] << 16 |

663 
rcBuff
[18] << 8 |ÑcBuff[19];

664 
xÂ
->
max_byãs
 = 
max_£gmít_Àn
 ? max_£gmít_À¿: 
ULONG_MAX
;

665 
max_ölöe_d©a
 = 
rcBuff
[20] << 24 |ÑcBuff[21] << 16 |ÑcBuff[22] << 8 |

666 
rcBuff
[23];

667 i‡(
vîbo£
) {

668 
	`¥ötf
(" >> Receive copyÑesults (report operatingÖarameters):\n");

669 
	`¥ötf
(" MaximumÅ¨gë des¸ùt‹ cou¡: %lu\n", 
max_èrgë_num
);

670 
	`¥ötf
(" Maximum segmíàdes¸ùt‹ cou¡: %lu\n", 
max_£gmít_num
);

671 
	`¥ötf
(" Maximum des¸ùt‹Üi°Üígth: %lu\n", 
max_desc_Àn
);

672 
	`¥ötf
(" Maximum segmíàÀngth: %lu\n", 
max_£gmít_Àn
);

673 
	`¥ötf
(" Maximum i∆öêd©®Àngth: %lu\n", 
max_ölöe_d©a
);

675 
hñd_d©a_limô
 = 
rcBuff
[24] << 24 |ÑcBuff[25] << 16 |

676 
rcBuff
[26] << 8 |ÑcBuff[27];

677 i‡(
li°_id_ußge
 < 0) {

678 i‡(!
hñd_d©a_limô
)

679 
li°_id_ußge
 = 2;

681 
li°_id_ußge
 = 0;

683 i‡(
vîbo£
) {

684 
	`¥ötf
(" Held dataÜimit: %lu (usage: %d)\n",

685 
hñd_d©a_limô
, 
li°_id_ußge
);

686 
num
 = 
rcBuff
[28] << 24 |ÑcBuff[29] << 16 |ÑcBuff[30] << 8 |

687 
rcBuff
[31];

688 
	`¥ötf
(" Maximum såóm devi˚Åøns„∏size: %lu\n", 
num
);

689 
	`¥ötf
(" Maximum c⁄cuºíàc›õs: %u\n", 
rcBuff
[36]);

690 
	`¥ötf
(" D©®£gmíàgønuœrôy: %u byãs\n", 1 << 
rcBuff
[37]);

691 
	`¥ötf
(" I∆öêd©®gønuœrôy: %u byãs\n", 1 << 
rcBuff
[38]);

692 
	`¥ötf
(" Hñd d©®gønuœrôy: %u byãs\n", 1 << 
rcBuff
[39]);

694 
	`¥ötf
(" Implemented descriptorÜist:\n");

696 
xÂ
->
mö_byãs
 = 1 << 
rcBuff
[37];

698 
n
 = 0;Ç < 
rcBuff
[43];Ç++) {

699 
rcBuff
[44 + 
n
]) {

701 i‡(!
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_BLOCK
))

702 
vÆid
++;

703 i‡(
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_ST
))

704 
vÆid
++;

705 i‡(
vîbo£
)

706 
	`¥ötf
(" Copy BlockÅo Stream device\n");

709 i‡(!
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_ST
))

710 
vÆid
++;

711 i‡(
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_BLOCK
))

712 
vÆid
++;

713 i‡(
vîbo£
)

714 
	`¥ötf
(" Copy StreamÅo Block device\n");

717 i‡(!
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_BLOCK
))

718 
vÆid
++;

719 i‡(
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_BLOCK
))

720 
vÆid
++;

721 i‡(
vîbo£
)

722 
	`¥ötf
(" Copy BlockÅo Block device\n");

725 i‡(!
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_ST
))

726 
vÆid
++;

727 i‡(
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_ST
))

728 
vÆid
++;

729 i‡(
vîbo£
)

730 
	`¥ötf
(" Copy StreamÅo Stream device\n");

733 i‡(!
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_OTHER
))

734 
vÆid
++;

735 i‡(
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_ST
))

736 
vÆid
++;

737 i‡(
vîbo£
)

738 
	`¥ötf
(" Copy inline dataÅo Stream device\n");

741 i‡(!
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_OTHER
))

742 
vÆid
++;

743 i‡(
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_ST
))

744 
vÆid
++;

745 i‡(
vîbo£
)

746 
	`¥ötf
(" CopyÉmbedded dataÅo Stream device\n");

749 i‡(!
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_ST
))

750 
vÆid
++;

751 i‡(
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_DEV_NULL
))

752 
vÆid
++;

753 i‡(
vîbo£
)

754 
	`¥ötf
(" Read from stream deviceánd discard\n");

757 i‡(!
is_èrgë
 && (
xÂ
->
sg_ty≥
 & (
FT_ST
 | 
FT_BLOCK
)))

758 
vÆid
++;

759 i‡(
is_èrgë
 && (
xÂ
->
sg_ty≥
 & (
FT_ST
 | 
FT_BLOCK
)))

760 
vÆid
++;

761 i‡(
vîbo£
)

762 
	`¥ötf
(" Verify block or stream device operation\n");

765 i‡(!
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_BLOCK
))

766 
vÆid
++;

767 i‡(
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_ST
))

768 
vÆid
++;

769 i‡(
vîbo£
)

770 
	`¥ötf
(" Copy block device with offsetÅo stream "

774 i‡(!
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_ST
))

775 
vÆid
++;

776 i‡(
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_BLOCK
))

777 
vÆid
++;

778 i‡(
vîbo£
)

779 
	`¥ötf
(" Copy stream deviceÅo block device with "

784 i‡(!
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_BLOCK
))

785 
vÆid
++;

786 i‡(
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_BLOCK
))

787 
vÆid
++;

788 i‡(
vîbo£
)

789 
	`¥ötf
(" Copy block device with offsetÅo block "

793 i‡(!
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_BLOCK
))

794 
vÆid
++;

795 i‡(
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_ST
))

796 
vÆid
++;

797 i‡(
vîbo£
)

798 
	`¥ötf
(" Copy block deviceÅo stream deviceánd hold "

802 i‡(!
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_ST
))

803 
vÆid
++;

804 i‡(
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_BLOCK
))

805 
vÆid
++;

806 i‡(
vîbo£
)

807 
	`¥ötf
(" Copy stream deviceÅo block deviceánd hold "

811 i‡(!
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_BLOCK
))

812 
vÆid
++;

813 i‡(
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_BLOCK
))

814 
vÆid
++;

815 i‡(
vîbo£
)

816 
	`¥ötf
(" Copy block deviceÅo block deviceánd hold "

820 i‡(!
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_ST
))

821 
vÆid
++;

822 i‡(
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_ST
))

823 
vÆid
++;

824 i‡(
vîbo£
)

825 
	`¥ötf
(" Copy block deviceÅo block deviceánd hold "

829 i‡(!
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_ST
))

830 
vÆid
++;

831 i‡(
is_èrgë
 && (
xÂ
->
sg_ty≥
 & 
FT_DEV_NULL
))

832 
vÆid
++;

833 i‡(
vîbo£
)

834 
	`¥ötf
(" Read from stream deviceánd hold data\n");

837 i‡(
vîbo£
)

838 
	`¥ötf
(" FC N_Port_NameÅarget descriptor\n");

839 
td_li°
 |
TD_FC_WWPN
;

842 i‡(
vîbo£
)

843 
	`¥ötf
(" FC Port_IDÅarget descriptor\n");

844 
td_li°
 |
TD_FC_PORT
;

847 i‡(
vîbo£
)

848 
	`¥ötf
(" FC N_Port_ID with N_Port_NameÅarget "

850 
td_li°
 |
TD_FC_WWPN_AND_PORT
;

853 i‡(
vîbo£
)

854 
	`¥ötf
(" SPI T_LÅarget descriptor\n");

855 
td_li°
 |
TD_SPI
;

858 i‡(
vîbo£
)

859 
	`¥ötf
(" IdentificationÅarget descriptor\n");

860 
td_li°
 |
TD_VPD
;

863 i‡(
vîbo£
)

864 
	`¥ötf
(" IPv4Åarget descriptor\n");

865 
td_li°
 |
TD_IPV4
;

868 i‡(
vîbo£
)

869 
	`¥ötf
(" AliasÅarget descriptor\n");

870 
td_li°
 |
TD_ALIAS
;

873 i‡(
vîbo£
)

874 
	`¥ötf
(" RDMAÅarget descriptor\n");

875 
td_li°
 |
TD_RDMA
;

878 i‡(
vîbo£
)

879 
	`¥ötf
(" IEEE 1394Åarget descriptor\n");

880 
td_li°
 |
TD_FW
;

883 i‡(
vîbo£
)

884 
	`¥ötf
(" SASÅarget descriptor\n");

885 
td_li°
 |
TD_SAS
;

888 i‡(
vîbo£
)

889 
	`¥ötf
(" IPv6Åarget descriptor\n");

890 
td_li°
 |
TD_IPV6
;

893 i‡(
vîbo£
)

894 
	`¥ötf
(" IP Copy ServiceÅarget descriptor\n");

895 
td_li°
 |
TD_IP_COPY_SERVICE
;

898 i‡(
vîbo£
)

899 
	`¥ötf
(" RODÅarget descriptor\n");

900 
td_li°
 |
TD_ROD
;

903 
	`Ârötf
(
°dîr
, ">> UnhandledÅarget descriptor 0x%02x\n",

904 
rcBuff
[44 + 
n
]);

908 i‡(!
vÆid
) {

909 
	`Ârötf
(
°dîr
, ">>Ço matchingÅarget descriptor supported\n");

910 
td_li°
 = 0;

912  
td_li°
;

913 
	}
}

916 
	$decode_desig«ti⁄_des¸ùt‹
(c⁄° * 
u˝
, 
i_Àn
)

918 
m
, 
p_id
, 
piv
, 
c_£t
, 
assoc
, 
desig_ty≥
, 
d_id
, 
«a
;

919 
k
;

920 c⁄° * 
ù
;

921 
uöt64_t
 
v£i
;

922 
b
[64];

924 
ù
 = 
u˝
 + 4;

925 
p_id
 = ((
u˝
[0] >> 4) & 0xf);

926 
c_£t
 = (
u˝
[0] & 0xf);

927 
piv
 = ((
u˝
[1] & 0x80) ? 1 : 0);

928 
assoc
 = ((
u˝
[1] >> 4) & 0x3);

929 
desig_ty≥
 = (
u˝
[1] & 0xf);

930 
	`¥ötf
(" desig«t‹Åy≥: %d, codê£t: %d\n", 
desig_ty≥
, 
c_£t
);

931 i‡(
piv
 && ((1 =
assoc
) || (2 ==ássoc)))

932 
	`¥ötf
("Åransport: %s\n",

933 
	`sg_gë_å™s_¥Ÿo_°r
(
p_id
, (
b
), b));

935 
desig_ty≥
) {

937 
k
 = 0;

938 i‡((1 =
c_£t
) || (2 == c_set)) {

939 
k
 = 0; (k < 
i_Àn
Ë&& 
	`i•röt
(
ù
[k]); ++k)

941 i‡(
k
 >
i_Àn
)

942 
k
 = 1;

944 i‡(
k
)

945 
	`¥ötf
(" víd‹ s≥cific: %.*s\n", 
i_Àn
, 
ù
);

947 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

950 
	`¥ötf
(" víd‹ id: %.8s\n", 
ù
);

951 i‡(
i_Àn
 > 8)

952 
	`¥ötf
(" víd‹ s≥cific: %.*s\n", 
i_Àn
 - 8, 
ù
 + 8);

955 i‡((8 !
i_Àn
) && (12 != i_len) && (16 != i_len)) {

956 
	`Ârötf
(
°dîr
, " <<Éxpect 8, 12ánd 16 byte "

957 "EUI, gŸ %d>>\n", 
i_Àn
);

958 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

961 
	`¥ötf
(" 0x");

962 
m
 = 0; m < 
i_Àn
; ++m)

963 
	`¥ötf
("%02x", ()
ù
[
m
]);

964 
	`¥ötf
("\n");

967 i‡(1 !
c_£t
) {

968 
	`Ârötf
(
°dîr
, " << unexpected code set %d for "

969 "NAA>>\n", 
c_£t
);

970 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

973 
«a
 = (
ù
[0] >> 4) & 0xff;

974 i‡(! ((2 =
«a
) || (5 ==Çaa) || (6 ==Çaa))) {

975 
	`Ârötf
(
°dîr
, " << u√x≥˘ed NAA [0x%x]>>\n", 
«a
);

976 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

979 i‡((5 =
«a
Ë&& (0x10 =
i_Àn
)) {

980 i‡(
vîbo£
 > 2)

981 
	`Ârötf
(
°dîr
, " << unexpected NAA 5Üen 16,ássuming "

983 
«a
 = 6;

985 i‡(2 =
«a
) {

986 i‡(8 !
i_Àn
) {

987 
	`Ârötf
(
°dîr
, " << unexpected NAA 2 identifier "

988 "Àngth: 0x%x>>\n", 
i_Àn
);

989 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

992 
d_id
 = (((
ù
[0] & 0xf) << 8) | ip[1]);

995 
	`¥ötf
(" 0x");

996 
m
 = 0; m < 8; ++m)

997 
	`¥ötf
("%02x", ()
ù
[
m
]);

998 
	`¥ötf
("\n");

999 } i‡(5 =
«a
) {

1000 i‡(8 !
i_Àn
) {

1001 
	`Ârötf
(
°dîr
, " << unexpected NAA 5 identifier "

1002 "Àngth: 0x%x>>\n", 
i_Àn
);

1003 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

1008 
v£i
 = 
ù
[3] & 0xf;

1009 
m
 = 1; m < 5; ++m) {

1010 
v£i
 <<= 8;

1011 
v£i
 |
ù
[3 + 
m
];

1013 
	`¥ötf
(" 0x");

1014 
m
 = 0; m < 8; ++m)

1015 
	`¥ötf
("%02x", ()
ù
[
m
]);

1016 
	`¥ötf
("\n");

1017 } i‡(6 =
«a
) {

1018 i‡(16 !
i_Àn
) {

1019 
	`Ârötf
(
°dîr
, " << unexpected NAA 6 identifier "

1020 "Àngth: 0x%x>>\n", 
i_Àn
);

1021 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

1026 
v£i
 = 
ù
[3] & 0xf;

1027 
m
 = 1; m < 5; ++m) {

1028 
v£i
 <<= 8;

1029 
v£i
 |
ù
[3 + 
m
];

1031 
	`¥ötf
(" 0x");

1032 
m
 = 0; m < 16; ++m)

1033 
	`¥ötf
("%02x", ()
ù
[
m
]);

1034 
	`¥ötf
("\n");

1038 i‡((1 !
c_£t
Ë|| (1 !
assoc
Ë|| (4 !
i_Àn
)) {

1039 
	`Ârötf
(
°dîr
, " <<Éxpected binary code_set,Åarget "

1041 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

1044 
d_id
 = ((
ù
[2] << 8) | ip[3]);

1045 
	`¥ötf
(" Rñ©ivêèrgëÖ‹t: 0x%x\n", 
d_id
);

1048 i‡((1 !
c_£t
Ë|| (1 !
assoc
Ë|| (4 !
i_Àn
)) {

1049 
	`Ârötf
(
°dîr
, " <<Éxpected binary code_set,Åarget "

1051 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

1054 
d_id
 = ((
ù
[2] << 8) | ip[3]);

1055 
	`¥ötf
(" T¨gëÖ‹àgroup: 0x%x\n", 
d_id
);

1058 i‡((1 !
c_£t
Ë|| (0 !
assoc
Ë|| (4 !
i_Àn
)) {

1059 
	`Ârötf
(
°dîr
, " <<Éxpected binary code_set,Üogical "

1061 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

1064 
d_id
 = ((
ù
[2] << 8) | ip[3]);

1065 
	`¥ötf
(" Logiˇ»unô group: 0x%x\n", 
d_id
);

1068 i‡((1 !
c_£t
Ë|| (0 !
assoc
)) {

1069 
	`¥ötf
(" <<Éxpected binary code_set,Üogical "

1071 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

1074 
	`¥ötf
(" MD5Üogical unit identifier:\n");

1075 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

1078 i‡(3 !
c_£t
) {

1079 
	`Ârötf
(
°dîr
, " <<Éxpected UTF-8 code_set>>\n");

1080 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

1083 
	`¥ötf
(" SCSIÇame string:\n");

1088 
	`¥ötf
(" %s\n", (c⁄° *)
ù
);

1091 
	`dSåHex
((c⁄° *)
ù
, 
i_Àn
, 0);

1094 
	}
}

1097 
	$desc_‰om_vpd_id
(
sg_fd
, *
desc
, 
desc_Àn
,

1098 
block_size
, 
∑d
)

1100 
ªs
;

1101 
rcBuff
[256], *
u˝
, *
be°
 = 
NULL
;

1102 
Àn
 = 254;

1103 
off
 = -1, 
u
, 
i_Àn
, 
be°_Àn
 = 0, 
assoc
, 
desig
, 
f_desig
 = 0;

1105 
	`mem£t
(
rcBuff
, 0xff, 
Àn
);

1106 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 0x83, 
rcBuff
, 4, 1, 
vîbo£
);

1107 i‡(0 !
ªs
) {

1108 
	`Ârötf
(
°dîr
, "VPD inquúy faûed wôh %d\n", 
ªs
);

1109  
ªs
;

1110 } i‡(
rcBuff
[1] != 0x83) {

1111 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse\n");

1112  
SG_LIB_CAT_MALFORMED
;

1114 
Àn
 = ((
rcBuff
[2] << 8) +ÑcBuff[3]) + 4;

1115 
ªs
 = 
	`sg_Œ_öquúy
(
sg_fd
, 0, 1, 0x83, 
rcBuff
, 
Àn
, 1, 
vîbo£
);

1116 i‡(0 !
ªs
) {

1117 
	`Ârötf
(
°dîr
, "VPD inquúy faûed wôh %d\n", 
ªs
);

1118  
ªs
;

1119 } i‡(
rcBuff
[1] != 0x83) {

1120 
	`Ârötf
(
°dîr
, "invalid VPDÑesponse\n");

1121  
SG_LIB_CAT_MALFORMED
;

1123 i‡(
vîbo£
 > 2) {

1124 
	`Ârötf
(
°dîr
, "OutputÑesponse in hex:\n");

1125 
	`dSåHex
((c⁄° *)
rcBuff
, 
Àn
, 1);

1128 (
u
 = 
	`sg_vpd_dev_id_ôî
(
rcBuff
 + 4, 
Àn
 - 4, &
off
, 0, -1, -1)) ==

1130 
u˝
 = 
rcBuff
 + 4 + 
off
;

1131 
i_Àn
 = 
u˝
[3];

1132 i‡((()
off
 + 
i_Àn
 + 4Ë> 
Àn
) {

1133 
	`Ârötf
(
°dîr
, " VPDÖageÉrror: designatorÜength %dÜonger "

1134 "th™\¿ÑemaöögÑe•⁄£Üígth=%d\n", 
i_Àn
,

1135 (
Àn
 - 
off
));

1136  
SG_LIB_CAT_MALFORMED
;

1138 
assoc
 = ((
u˝
[1] >> 4) & 0x3);

1139 
desig
 = (
u˝
[1] & 0xf);

1140 i‡(
vîbo£
)

1141 
	`Ârötf
(
°dîr
, " Des¯%d:ásso¯%u desig %uÜí %d\n", 
off
,

1142 
assoc
, 
desig
, 
i_Àn
);

1144 i‡(
i_Àn
 > 16)

1146 i‡(
desig
 == 3) {

1147 
be°
 = 
u˝
;

1148 
be°_Àn
 = 
i_Àn
;

1151 i‡(
desig
 == 2) {

1152 i‡(!
be°
 || 
f_desig
 < 2) {

1153 
be°
 = 
u˝
;

1154 
be°_Àn
 = 
i_Àn
;

1155 
f_desig
 = 2;

1157 } i‡(
desig
 == 1) {

1158 i‡(!
be°
 || 
f_desig
 == 0) {

1159 
be°
 = 
u˝
;

1160 
be°_Àn
 = 
i_Àn
;

1161 
f_desig
 = 
desig
;

1163 } i‡(
desig
 == 0) {

1164 i‡(!
be°
) {

1165 
be°
 = 
u˝
;

1166 
be°_Àn
 = 
i_Àn
;

1167 
f_desig
 = 
desig
;

1171 i‡(
be°
) {

1172 i‡(
vîbo£
)

1173 
	`decode_desig«ti⁄_des¸ùt‹
(
be°
, 
be°_Àn
);

1174 i‡(
be°_Àn
 + 4 < 
desc_Àn
) {

1175 
	`mem£t
(
desc
, 0, 32);

1176 
desc
[0] = 0xe4;

1177 
	`mem˝y
(
desc
 + 4, 
be°
, 
be°_Àn
 + 4);

1178 
desc
[4] &= 0x1f;

1179 
desc
[28] = 
∑d
 << 2;

1180 
desc
[29] = (
block_size
 >> 16) & 0xff;

1181 
desc
[30] = (
block_size
 >> 8) & 0xff;

1182 
desc
[31] = 
block_size
 & 0xff;

1183 i‡(
vîbo£
 > 3) {

1184 
	`Ârötf
(
°dîr
, "Des¸ùt‹ i¿hex (b†%d):\n", 
block_size
);

1185 
	`dSåHex
((c⁄° *)
desc
, 32, 1);

1189  
be°_Àn
 + 8;

1192 
	}
}

1195 
	$ˇlc_duøti⁄_throughput
(
c⁄tö
)

1197 
timevÆ
 
íd_tm
, 
ªs_tm
;

1198 
a
, 
b
;

1199 
öt64_t
 
blks
;

1201 i‡(
°¨t_tm_vÆid
 && (
°¨t_tm
.
tv_£c
 || sèπ_tm.
tv_u£c
)) {

1202 
blks
 = (
ö_fuŒ
 > 
out_fuŒ
) ? in_full : out_full;

1203 
	`gëtimeofday
(&
íd_tm
, 
NULL
);

1204 
ªs_tm
.
tv_£c
 = 
íd_tm
.tv_£¯- 
°¨t_tm
.tv_sec;

1205 
ªs_tm
.
tv_u£c
 = 
íd_tm
.tv_u£¯- 
°¨t_tm
.tv_usec;

1206 i‡(
ªs_tm
.
tv_u£c
 < 0) {

1207 --
ªs_tm
.
tv_£c
;

1208 
ªs_tm
.
tv_u£c
 += 1000000;

1210 
a
 = 
ªs_tm
.
tv_£c
;

1211 
a
 +(0.000001 * 
ªs_tm
.
tv_u£c
);

1212 
b
 = ()
blk_sz
 * 
blks
;

1213 
	`Ârötf
(
°dîr
, "timeÅoÅransfer data%s: %d.%06d secs",

1214 (
c⁄tö
 ? " sÿÁr" : ""), ()
ªs_tm
.
tv_£c
,

1215 ()
ªs_tm
.
tv_u£c
);

1216 i‡((
a
 > 0.00001Ë&& (
b
 > 511))

1217 
	`Ârötf
(
°dîr
, "áà%.2‡MB/£c\n", 
b
 / (
a
 * 1000000.0));

1219 
	`Ârötf
(
°dîr
, "\n");

1221 
	}
}

1226 
	$¥o˚ss_Êags
(c⁄° * 
¨g
, 
xc›y_Â_t
 * 
Â
)

1228 
buff
[256];

1229 * 
˝
;

1230 * 
≈
;

1232 
	`°∫˝y
(
buff
, 
¨g
, (buff));

1233 
buff
[(buff) - 1] = '\0';

1234 i‡('\0' =
buff
[0]) {

1235 
	`Ârötf
(
°dîr
, "no flag found\n");

1238 
˝
 = 
buff
;

1240 
≈
 = 
	`°rchr
(
˝
, ',');

1241 i‡(
≈
)

1242 *
≈
++ = '\0';

1243 i‡(0 =
	`°rcmp
(
˝
, "append"))

1244 
Â
->
≠≥nd
 = 1;

1245 i‡(0 =
	`°rcmp
(
˝
, "pad"))

1246 
Â
->
∑d
 = 1;

1247 i‡(0 =
	`°rcmp
(
˝
, "excl"))

1248 
Â
->
ex˛
 = 1;

1249 i‡(0 =
	`°rcmp
(
˝
, "null"))

1251 i‡(0 =
	`°rcmp
(
˝
, "flock"))

1252 ++
Â
->
Êock
;

1254 
	`Ârötf
(
°dîr
, "uƒecogni£d fœg: %s\n", 
˝
);

1257 
˝
 = 
≈
;

1258 } 
˝
);

1260 
	}
}

1266 
	$›í_if
(
xc›y_Â_t
 * 
iÂ
, 
vîbo£
)

1268 
öfd
 = -1, 
Êags
, 
Ê
, 
ªs
;

1269 
ebuff
[
EBUFF_SZ
];

1271 
iÂ
->
sg_ty≥
 = 
	`dd_fûëy≥
(ifp);

1273 i‡(
vîbo£
)

1274 
	`Ârötf
(
°dîr
, " >> Input fileÅype: %s, devno %d:%d\n",

1275 
	`dd_fûëy≥_°r
(
iÂ
->
sg_ty≥
, 
ebuff
),

1276 
	`maj‹
(
iÂ
->
devno
), 
	`mö‹
(ifp->devno));

1277 i‡(
FT_ERROR
 & 
iÂ
->
sg_ty≥
) {

1278 
	`Ârötf
(
°dîr
, 
ME
 "u«bÀác˚s†%s\n", 
iÂ
->
‚ame
);

1279 
fûe_îr
;

1281 
Êags
 = 
O_NONBLOCK
;

1282 i‡(
iÂ
->
ex˛
)

1283 
Êags
 |
O_EXCL
;

1284 
Ê
 = 
O_RDWR
;

1285 i‡((
öfd
 = 
	`›í
(
iÂ
->
‚ame
, 
Ê
 | 
Êags
)) < 0) {

1286 
Ê
 = 
O_RDONLY
;

1287 i‡((
öfd
 = 
	`›í
(
iÂ
->
‚ame
, 
Ê
 | 
Êags
)) < 0) {

1288 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

1289 
ME
 "couldÇŸ o≥¿%†f‹ sgÑódög", 
iÂ
->
‚ame
);

1290 
	`≥º‹
(
ebuff
);

1291 
fûe_îr
;

1294 i‡(
vîbo£
)

1295 
	`Ârötf
(
°dîr
, " open input(sg_io), flags=0x%x\n",

1296 
Ê
 | 
Êags
);

1298 i‡(
iÂ
->
Êock
) {

1299 
ªs
 = 
	`Êock
(
öfd
, 
LOCK_EX
 | 
LOCK_NB
);

1300 i‡(
ªs
 < 0) {

1301 
	`˛o£
(
öfd
);

1302 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, 
ME
 "flock(LOCK_EX | LOCK_NB) on %s "

1303 "Áûed", 
iÂ
->
‚ame
);

1304 
	`≥º‹
(
ebuff
);

1305  -
SG_LIB_FLOCK_ERR
;

1308  
öfd
;

1310 
fûe_îr
:

1311 i‡(
öfd
 >= 0)

1312 
	`˛o£
(
öfd
);

1313  -
SG_LIB_FILE_ERROR
;

1314 
	}
}

1321 
	$›í_of
(
xc›y_Â_t
 * 
oÂ
, 
vîbo£
)

1323 
outfd
, 
Êags
, 
ªs
;

1324 
ebuff
[
EBUFF_SZ
];

1326 
oÂ
->
sg_ty≥
 = 
	`dd_fûëy≥
(ofp);

1327 i‡(
vîbo£
)

1328 
	`Ârötf
(
°dîr
, " >> Output fileÅype: %s, devno %d:%d\n",

1329 
	`dd_fûëy≥_°r
(
oÂ
->
sg_ty≥
, 
ebuff
),

1330 
	`maj‹
(
oÂ
->
devno
), 
	`mö‹
(ofp->devno));

1332 i‡(!(
FT_DEV_NULL
 & 
oÂ
->
sg_ty≥
)) {

1333 
Êags
 = 
O_RDWR
 | 
O_NONBLOCK
;

1334 i‡(
oÂ
->
ex˛
)

1335 
Êags
 |
O_EXCL
;

1336 i‡((
outfd
 = 
	`›í
(
oÂ
->
‚ame
, 
Êags
)) < 0) {

1337 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

1338 
ME
 "couldÇŸ o≥¿%†f‹ sg wrôög", 
oÂ
->
‚ame
);

1339 
	`≥º‹
(
ebuff
);

1340 
fûe_îr
;

1342 i‡(
vîbo£
)

1343 
	`Ârötf
(
°dîr
, " open output(sg_io), flags=0x%x\n",

1344 
Êags
);

1346 
outfd
 = -1;

1348 i‡(
oÂ
->
Êock
) {

1349 
ªs
 = 
	`Êock
(
outfd
, 
LOCK_EX
 | 
LOCK_NB
);

1350 i‡(
ªs
 < 0) {

1351 
	`˛o£
(
outfd
);

1352 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, 
ME
 "flock(LOCK_EX | LOCK_NB) on %s "

1353 "Áûed", 
oÂ
->
‚ame
);

1354 
	`≥º‹
(
ebuff
);

1355  -
SG_LIB_FLOCK_ERR
;

1358  
outfd
;

1360 
fûe_îr
:

1361  -
SG_LIB_FILE_ERROR
;

1362 
	}
}

1366 
	$maö
(
¨gc
, * 
¨gv
[])

1368 
öt64_t
 
skù
 = 0;

1369 
öt64_t
 
£ek
 = 0;

1370 
ibs
 = 0;

1371 
obs
 = 0;

1372 
b±
 = 
DEF_BLOCKS_PER_TRANSFER
;

1373 
b±_giví
 = 0;

1374 
°r
[
STR_SZ
];

1375 * 
key
;

1376 * 
buf
;

1377 
blocks
 = 0;

1378 
num_xc›y
 = 0;

1379 
ªs
, 
k
;

1380 
öfd
, 
outfd
, 
xc›y_fd
;

1381 
ªt
 = 0;

1382 
li°_id
 = 1;

1383 
li°_id_giví
 = 0;

1384 
§c_desc
[256];

1385 
d°_desc
[256];

1386 
§c_desc_Àn
;

1387 
d°_desc_Àn
;

1388 
£g_desc_ty≥
;

1389 
⁄_§c
 = 0;

1390 
⁄_d°
 = 0;

1392 
iÂ
.
‚ame
[0] = '\0';

1393 
oÂ
.
‚ame
[0] = '\0';

1394 
iÂ
.
num_£˘
 = -1;

1395 
oÂ
.
num_£˘
 = -1;

1397 i‡(
¨gc
 < 2) {

1398 
	`Ârötf
(
°dîr
,

1400 
	`Ârötf
(
°dîr
, "For more information use '--help'\n");

1401  
SG_LIB_SYNTAX_ERROR
;

1404 
k
 = 1; k < 
¨gc
; k++) {

1405 i‡(
¨gv
[
k
]) {

1406 
	`°∫˝y
(
°r
, 
¨gv
[
k
], 
STR_SZ
);

1407 
°r
[
STR_SZ
 - 1] = '\0';

1410 
key
 = 
°r
, 
buf
 = key; *buf && *buf != '=';)

1411 
buf
++;

1412 i‡(*
buf
)

1413 *
buf
++ = '\0';

1414 i‡(0 =
	`°∫cmp
(
key
, "app", 3)) {

1415 
iÂ
.
≠≥nd
 = 
	`sg_gë_num
(
buf
);

1416 
oÂ
.
≠≥nd
 = 
iÂ
.append;

1417 } i‡(0 =
	`°rcmp
(
key
, "bpt")) {

1418 
b±
 = 
	`sg_gë_num
(
buf
);

1419 i‡(-1 =
b±
) {

1420 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'bpt='\n");

1421  
SG_LIB_SYNTAX_ERROR
;

1423 
b±_giví
 = 1;

1424 } i‡(0 =
	`°rcmp
(
key
, "bs")) {

1425 
blk_sz
 = 
	`sg_gë_num
(
buf
);

1426 i‡(-1 =
blk_sz
) {

1427 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'bs='\n");

1428  
SG_LIB_SYNTAX_ERROR
;

1430 } i‡(0 =
	`°rcmp
(
key
, "list_id")) {

1431 
ªt
 = 
	`sg_gë_num
(
buf
);

1432 i‡(-1 =
ªt
 ||Ñet > 0xff) {

1433 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'list_id='\n");

1434  
SG_LIB_SYNTAX_ERROR
;

1436 
li°_id
 = (
ªt
 & 0xff);

1437 
li°_id_giví
 = 1;

1438 } i‡(0 =
	`°rcmp
(
key
, "id_usage")) {

1439 i‡(!
	`°∫cmp
(
buf
, "hold", 4))

1440 
li°_id_ußge
 = 0;

1441 i‡(!
	`°∫cmp
(
buf
, "discard", 7))

1442 
li°_id_ußge
 = 2;

1443 i‡(!
	`°∫cmp
(
buf
, "disable", 7))

1444 
li°_id_ußge
 = 3;

1446 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'list_id_usage='\n");

1447  
SG_LIB_SYNTAX_ERROR
;

1449 } i‡(0 =
	`°rcmp
(
key
, "conv"))

1450 
	`Ârötf
(
°dîr
, 
ME
 ">>> ignoringáll 'conv='árguments\n");

1451 i‡(0 =
	`°rcmp
(
key
, "count")) {

1452 i‡(0 !
	`°rcmp
("-1", 
buf
)) {

1453 
dd_cou¡
 = 
	`sg_gë_Œnum
(
buf
);

1454 i‡(-1LL =
dd_cou¡
) {

1455 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'count='\n");

1456  
SG_LIB_SYNTAX_ERROR
;

1459 } i‡(0 =
	`°rcmp
(
key
, "prio")) {

1460 
¥i‹ôy
 = 
	`sg_gë_num
(
buf
);

1461 } i‡(0 =
	`°rcmp
(
key
, "cat")) {

1462 
xc›y_Êag_ˇt
 = 
	`sg_gë_num
(
buf
);

1463 i‡(
xc›y_Êag_ˇt
 < 0 || xcopy_flag_cat > 1) {

1464 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'cat='\n");

1465  
SG_LIB_SYNTAX_ERROR
;

1467 } i‡(0 =
	`°rcmp
(
key
, "dc")) {

1468 
xc›y_Êag_dc
 = 
	`sg_gë_num
(
buf
);

1469 i‡(
xc›y_Êag_dc
 < 0 || xcopy_flag_dc > 1) {

1470 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'dc='\n");

1471  
SG_LIB_SYNTAX_ERROR
;

1473 } i‡(0 =
	`°rcmp
(
key
, "ibs")) {

1474 
ibs
 = 
	`sg_gë_num
(
buf
);

1475 } i‡(
	`°rcmp
(
key
, "if") == 0) {

1476 i‡('\0' !
iÂ
.
‚ame
[0]) {

1477 
	`Ârötf
(
°dîr
, "Second IFILEárgument??\n");

1478  
SG_LIB_SYNTAX_ERROR
;

1480 
	`°∫˝y
(
iÂ
.
‚ame
, 
buf
, 
INOUTF_SZ
);

1481 } i‡(0 =
	`°rcmp
(
key
, "iflag")) {

1482 i‡(
	`¥o˚ss_Êags
(
buf
, &
iÂ
)) {

1483 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'iflag='\n");

1484  
SG_LIB_SYNTAX_ERROR
;

1486 } i‡(0 =
	`°rcmp
(
key
, "obs")) {

1487 
obs
 = 
	`sg_gë_num
(
buf
);

1488 } i‡(
	`°rcmp
(
key
, "of") == 0) {

1489 i‡('\0' !
oÂ
.
‚ame
[0]) {

1490 
	`Ârötf
(
°dîr
, "Second OFILEárgument??\n");

1491  
SG_LIB_SYNTAX_ERROR
;

1493 
	`°∫˝y
(
oÂ
.
‚ame
, 
buf
, 
INOUTF_SZ
);

1494 } i‡(0 =
	`°rcmp
(
key
, "oflag")) {

1495 i‡(
	`¥o˚ss_Êags
(
buf
, &
oÂ
)) {

1496 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'oflag='\n");

1497  
SG_LIB_SYNTAX_ERROR
;

1500 } i‡(0 =
	`°rcmp
(
key
, "retries")) {

1501 
iÂ
.
ªåõs
 = 
	`sg_gë_num
(
buf
);

1502 
oÂ
.
ªåõs
 = 
iÂ
.retries;

1503 i‡(-1 =
iÂ
.
ªåõs
) {

1504 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'retries='\n");

1505  
SG_LIB_SYNTAX_ERROR
;

1508 } i‡(0 =
	`°rcmp
(
key
, "seek")) {

1509 
£ek
 = 
	`sg_gë_Œnum
(
buf
);

1510 i‡(-1LL =
£ek
) {

1511 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'seek='\n");

1512  
SG_LIB_SYNTAX_ERROR
;

1514 } i‡(0 =
	`°rcmp
(
key
, "skip")) {

1515 
skù
 = 
	`sg_gë_Œnum
(
buf
);

1516 i‡(-1LL =
skù
) {

1517 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'skip='\n");

1518  
SG_LIB_SYNTAX_ERROR
;

1520 } i‡(0 =
	`°rcmp
(
key
, "time"))

1521 
do_time
 = 
	`sg_gë_num
(
buf
);

1522 i‡(0 =
	`°∫cmp
(
key
, "verb", 4))

1523 
vîbo£
 = 
	`sg_gë_num
(
buf
);

1524 i‡(0 =
	`°∫cmp
(
key
, "--on_src", 8))

1525 
⁄_§c
 = 1;

1526 i‡(0 =
	`°∫cmp
(
key
, "--on_dst", 8))

1527 
⁄_d°
 = 1;

1528 i‡((0 =
	`°∫cmp
(
key
, "--help", 7)) ||

1529 (0 =
	`°∫cmp
(
key
, "-h", 2)) ||

1530 (0 =
	`°rcmp
(
key
, "-?"))) {

1531 
	`ußge
();

1533 } i‡((0 =
	`°∫cmp
(
key
, "--vers", 6)) ||

1534 (0 =
	`°rcmp
(
key
, "-V"))) {

1535 
	`Ârötf
(
°dîr
, 
ME
 "%s\n", 
vîsi⁄_°r
);

1537 } i‡(0 =
	`°∫cmp
(
key
, "--verb", 6))

1538 
vîbo£
 += 1;

1539 i‡(0 =
	`°rcmp
(
key
, "-vvvvv"))

1540 
vîbo£
 += 5;

1541 i‡(0 =
	`°rcmp
(
key
, "-vvvv"))

1542 
vîbo£
 += 4;

1543 i‡(0 =
	`°rcmp
(
key
, "-vvv"))

1544 
vîbo£
 += 3;

1545 i‡(0 =
	`°rcmp
(
key
, "-vv"))

1546 
vîbo£
 += 2;

1547 i‡(0 =
	`°rcmp
(
key
, "-v"))

1548 
vîbo£
 += 1;

1550 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%s'\n", 
key
);

1551 
	`Ârötf
(
°dîr
, "For more information use '--help'\n");

1552  
SG_LIB_SYNTAX_ERROR
;

1555 i‡(
⁄_§c
 && 
⁄_d°
) {

1556 
	`Ârötf
(
°dîr
, "SyntaxÉrror -Éither specify --on_src OR "

1558 
	`Ârötf
(
°dîr
, "For more information use '--help'\n");

1559  
SG_LIB_SYNTAX_ERROR
;

1561 i‡(!
⁄_§c
 && !
⁄_d°
)

1562 
⁄_§c
 = 1;

1563 i‡((
ibs
 && 
blk_sz
 && (ibs != blk_sz)) ||

1564 (
obs
 && 
blk_sz
 && (obs != blk_sz))) {

1565 
	`Ârötf
(
°dîr
, "If 'ibs' or 'obs' given must be sameás 'bs'\n");

1566 
	`Ârötf
(
°dîr
, "For more information use '--help'\n");

1567  
SG_LIB_SYNTAX_ERROR
;

1569 i‡(
blk_sz
 && !
ibs
)

1570 
ibs
 = 
blk_sz
;

1571 i‡(
blk_sz
 && !
obs
)

1572 
obs
 = 
blk_sz
;

1574 i‡((
skù
 < 0Ë|| (
£ek
 < 0)) {

1575 
	`Ârötf
(
°dîr
, "skipánd seek cannot beÇegative\n");

1576  
SG_LIB_SYNTAX_ERROR
;

1578 i‡((
oÂ
.
≠≥nd
 > 0Ë&& (
£ek
 > 0)) {

1579 
	`Ârötf
(
°dîr
, "Can't use botháppendánd seek switches\n");

1580  
SG_LIB_SYNTAX_ERROR
;

1582 i‡(
b±
 < 1) {

1583 
	`Ârötf
(
°dîr
, "bpt must be greaterÅhan 0\n");

1584  
SG_LIB_SYNTAX_ERROR
;

1586 i‡(
li°_id_ußge
 == 3) {

1587 i‡(!
li°_id_giví
)

1588 
li°_id
 = 0;

1589 i‡(
li°_id
) {

1590 
	`Ârötf
(
°dîr
, "list_id disabled by id_usage flag\n");

1591  
SG_LIB_SYNTAX_ERROR
;

1595 #ifde‡
SG_DEBUG


1596 
	`Ârötf
(
°dîr
, 
ME
 "%†if=%†skù=%" 
PRId64
 " of=%s seek=%" PRId64

1597 " cou¡=%" 
PRId64
 "\n", (
⁄_§c
)?"on-source":"on-destination",

1598 
iÂ
.
‚ame
, 
skù
, 
oÂ
.‚ame, 
£ek
, 
dd_cou¡
);

1600 
	`ö°Æl_h™dÀr
(
SIGINT
, 
öãºu±_h™dÀr
);

1601 
	`ö°Æl_h™dÀr
(
SIGQUIT
, 
öãºu±_h™dÀr
);

1602 
	`ö°Æl_h™dÀr
(
SIGPIPE
, 
öãºu±_h™dÀr
);

1603 
	`ö°Æl_h™dÀr
(
SIGUSR1
, 
sigöfo_h™dÀr
);

1605 
öfd
 = 
STDIN_FILENO
;

1606 
outfd
 = 
STDOUT_FILENO
;

1607 
iÂ
.
pdt
 = -1;

1608 
oÂ
.
pdt
 = -1;

1609 i‡(
iÂ
.
‚ame
[0] && ('-' != ifp.fname[0])) {

1610 
öfd
 = 
	`›í_if
(&
iÂ
, 
vîbo£
);

1611 i‡(
öfd
 < 0)

1612  -
öfd
;

1615 i‡(
oÂ
.
‚ame
[0] && ('-' != ofp.fname[0])) {

1616 
outfd
 = 
	`›í_of
(&
oÂ
, 
vîbo£
);

1617 i‡(
outfd
 < -1)

1618  -
outfd
;

1621 i‡(
	`›í_sg
(&
iÂ
, 
vîbo£
) < 0)

1622  
SG_LIB_CAT_INVALID_OP
;

1624 i‡(
	`›í_sg
(&
oÂ
, 
vîbo£
) < 0)

1625  
SG_LIB_CAT_INVALID_OP
;

1627 i‡((
STDIN_FILENO
 =
öfd
Ë&& (
STDOUT_FILENO
 =
outfd
)) {

1628 
	`Ârötf
(
°dîr
,

1630 
	`Ârötf
(
°dîr
, "For more information use '--help'\n");

1631  
SG_LIB_SYNTAX_ERROR
;

1634 
ªs
 = 
	`scsi_ªad_ˇ∑côy
(&
iÂ
);

1635 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
) {

1636 
	`Ârötf
(
°dîr
, "Unitáttention (readcap in), continuing\n");

1637 
ªs
 = 
	`scsi_ªad_ˇ∑côy
(&
iÂ
);

1638 } i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
) {

1639 
	`Ârötf
(
°dîr
, "Aborted command (readcap in), continuing\n");

1640 
ªs
 = 
	`scsi_ªad_ˇ∑côy
(&
iÂ
);

1642 i‡(0 !
ªs
) {

1643 i‡(
ªs
 =
SG_LIB_CAT_INVALID_OP
)

1644 
	`Ârötf
(
°dîr
, "read capacityÇot supported on %s\n",

1645 
iÂ
.
‚ame
);

1646 i‡(
ªs
 =
SG_LIB_CAT_NOT_READY
)

1647 
	`Ârötf
(
°dîr
, "read capacity failed on %s -Çot "

1648 "ªady\n", 
iÂ
.
‚ame
);

1650 
	`Ârötf
(
°dîr
, "U«bÀÅÿªad c≠acôy o¿%s\n", 
iÂ
.
‚ame
);

1651 
iÂ
.
num_£˘
 = -1;

1652 } i‡(
ibs
 && 
iÂ
.
£˘_sz
 != ibs) {

1653 
	`Ârötf
(
°dîr
, ">> warning: block size on %s confusion: "

1654 "ibs=%d, devi˚ cœims=%d\n", 
iÂ
.
‚ame
, 
ibs
, iÂ.
£˘_sz
);

1656 i‡(
skù
 && 
iÂ
.
num_£˘
 < skip) {

1657 
	`Ârötf
(
°dîr
, "argumentÅo 'skip='Éxceeds device size "

1658 "(max %"
PRId64
")\n", 
iÂ
.
num_£˘
);

1659  
SG_LIB_SYNTAX_ERROR
;

1662 
ªs
 = 
	`scsi_ªad_ˇ∑côy
(&
oÂ
);

1663 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
) {

1664 
	`Ârötf
(
°dîr
, "Unitáttention (readcap out), continuing\n");

1665 
ªs
 = 
	`scsi_ªad_ˇ∑côy
(&
oÂ
);

1666 } i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
) {

1667 
	`Ârötf
(
°dîr
,

1669 
ªs
 = 
	`scsi_ªad_ˇ∑côy
(&
oÂ
);

1671 i‡(0 !
ªs
) {

1672 i‡(
ªs
 =
SG_LIB_CAT_INVALID_OP
)

1673 
	`Ârötf
(
°dîr
, "read capacityÇot supported on %s\n",

1674 
oÂ
.
‚ame
);

1676 
	`Ârötf
(
°dîr
, "U«bÀÅÿªad c≠acôy o¿%s\n", 
oÂ
.
‚ame
);

1677 
oÂ
.
num_£˘
 = -1;

1678 } i‡(
obs
 && ob†!
oÂ
.
£˘_sz
) {

1679 
	`Ârötf
(
°dîr
, ">> warning: block size on %s confusion: "

1680 "obs=%d, devi˚ cœims=%d\n", 
oÂ
.
‚ame
, 
obs
, oÂ.
£˘_sz
);

1682 i‡(
£ek
 && 
oÂ
.
num_£˘
 < seek) {

1683 
	`Ârötf
(
°dîr
, "argumentÅo 'seek='Éxceeds device size "

1684 "(max %"
PRId64
")\n", 
oÂ
.
num_£˘
);

1685  
SG_LIB_SYNTAX_ERROR
;

1687 i‡((
dd_cou¡
 < 0Ë|| ((
vîbo£
 > 0) && (0 == dd_count))) {

1688 i‡(
xc›y_Êag_dc
 == 0) {

1689 
dd_cou¡
 = 
iÂ
.
num_£˘
 - 
skù
;

1690 i‡(
dd_cou¡
 * 
iÂ
.
£˘_sz
 > (
oÂ
.
num_£˘
 - 
£ek
) * ofp.sect_sz)

1691 
dd_cou¡
 = (
oÂ
.
num_£˘
 - 
£ek
Ë* oÂ.
£˘_sz
 / 
iÂ
.sect_sz;

1693 
dd_cou¡
 = 
oÂ
.
num_£˘
 - 
£ek
;

1694 i‡(
dd_cou¡
 * 
oÂ
.
£˘_sz
 > (
iÂ
.
num_£˘
 - 
skù
) * ifp.sect_sz)

1695 
dd_cou¡
 = (
iÂ
.
num_£˘
 - 
skù
Ë* iÂ.
£˘_sz
 / 
oÂ
.sect_sz;

1698 
öt64_t
 
dd_byãs
;

1700 i‡(
xc›y_Êag_dc
)

1701 
dd_byãs
 = 
dd_cou¡
 * 
oÂ
.
£˘_sz
;

1703 
dd_byãs
 = 
dd_cou¡
 * 
iÂ
.
£˘_sz
;

1705 i‡(
dd_byãs
 > 
iÂ
.
num_£˘
 * iÂ.
£˘_sz
) {

1706 
	`Ârötf
(
°dîr
, "access beyondÉnd of source device "

1707 "(max %"
PRId64
")\n", 
iÂ
.
num_£˘
);

1708  
SG_LIB_SYNTAX_ERROR
;

1710 i‡(
dd_byãs
 > 
oÂ
.
num_£˘
 * oÂ.
£˘_sz
) {

1711 
	`Ârötf
(
°dîr
, "access beyondÉnd ofÅarget device "

1712 "(max %"
PRId64
")\n", 
oÂ
.
num_£˘
);

1713  
SG_LIB_SYNTAX_ERROR
;

1717 
ªs
 = 
	`scsi_›î©ög_∑ømëî
(&
iÂ
, 0);

1718 i‡(
ªs
 < 0) {

1719 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =-
ªs
) {

1720 
	`Ârötf
(
°dîr
, "Unitáttention (operÖarm), continuing\n");

1721 
ªs
 = 
	`scsi_›î©ög_∑ømëî
(&
iÂ
, 0);

1723 i‡(-
ªs
 =
SG_LIB_CAT_INVALID_OP
) {

1724 
	`Ârötf
(
°dîr
, "receive copyÑesultsÇot supported on %s\n",

1725 
iÂ
.
‚ame
);

1726 #i‚de‡
SG_DEBUG


1727  
EINVAL
;

1729 } i‡(-
ªs
 =
SG_LIB_CAT_NOT_READY
)

1730 
	`Ârötf
(
°dîr
, "receive copyÑesults failed on %s -Çot "

1731 "ªady\n", 
iÂ
.
‚ame
);

1733 
	`Ârötf
(
°dîr
, "UnableÅoÑeceive copyÑesults on %s\n",

1734 
iÂ
.
‚ame
);

1735  -
ªs
;

1738 } i‡(
ªs
 == 0)

1739  
SG_LIB_CAT_INVALID_OP
;

1741 i‡(
ªs
 & 
TD_VPD
) {

1742 i‡(
vîbo£
)

1743 
	`¥ötf
(" >> usög VPD idítifiˇti⁄ f‹ sour˚ %s\n", 
iÂ
.
‚ame
);

1744 
§c_desc_Àn
 = 
	`desc_‰om_vpd_id
(
iÂ
.
sg_fd
, 
§c_desc
, 256,

1745 
iÂ
.
£˘_sz
, iÂ.
∑d
);

1746 i‡(
§c_desc_Àn
 > 256) {

1747 
	`Ârötf
(
°dîr
, "sour˚ des¸ùt‹Åoÿœrgê(%d byãs)\n", 
ªs
);

1748  
SG_LIB_CAT_MALFORMED
;

1751  
SG_LIB_CAT_INVALID_OP
;

1754 
ªs
 = 
	`scsi_›î©ög_∑ømëî
(&
oÂ
, 1);

1755 i‡(
ªs
 < 0) {

1756 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =-
ªs
) {

1757 
	`Ârötf
(
°dîr
, "Unitáttention (operÖarm), continuing\n");

1758 
ªs
 = 
	`scsi_›î©ög_∑ømëî
(&
oÂ
, 1);

1760 i‡(-
ªs
 =
SG_LIB_CAT_INVALID_OP
) {

1761 
	`Ârötf
(
°dîr
, "receive copyÑesultsÇot supported on %s\n",

1762 
oÂ
.
‚ame
);

1763 #i‚de‡
SG_DEBUG


1764  
EINVAL
;

1766 } i‡(-
ªs
 =
SG_LIB_CAT_NOT_READY
)

1767 
	`Ârötf
(
°dîr
, "receive copyÑesults failed on %s -Çot "

1768 "ªady\n", 
oÂ
.
‚ame
);

1770 
	`Ârötf
(
°dîr
, "UnableÅoÑeceive copyÑesults on %s\n",

1771 
oÂ
.
‚ame
);

1772  -
ªs
;

1775 } i‡(
ªs
 == 0)

1776  
SG_LIB_CAT_INVALID_OP
;

1778 i‡(
ªs
 & 
TD_VPD
) {

1779 i‡(
vîbo£
)

1780 
	`¥ötf
(" >> using VPD identification for destination %s\n",

1781 
oÂ
.
‚ame
);

1782 
d°_desc_Àn
 = 
	`desc_‰om_vpd_id
(
oÂ
.
sg_fd
, 
d°_desc
, 256,

1783 
oÂ
.
£˘_sz
, oÂ.
∑d
);

1784 i‡(
d°_desc_Àn
 > 256) {

1785 
	`Ârötf
(
°dîr
, "destination descriptorÅooÜarge (%d bytes)\n",

1786 
ªs
);

1787  
SG_LIB_CAT_MALFORMED
;

1790  
SG_LIB_CAT_INVALID_OP
;

1793 i‡(
dd_cou¡
 < 0) {

1794 
	`Ârötf
(
°dîr
, "Couldn't calculate count,Ölease give one\n");

1795  
SG_LIB_CAT_OTHER
;

1798 i‡(()
dd_cou¡
 < 
iÂ
.
mö_byãs
 / iÂ.
£˘_sz
) {

1799 
	`Ârötf
(
°dîr
, "notÉnough dataÅoÑead (min %ld bytes)\n",

1800 
oÂ
.
mö_byãs
);

1801  
SG_LIB_CAT_OTHER
;

1803 i‡(()
dd_cou¡
 < 
oÂ
.
mö_byãs
 / oÂ.
£˘_sz
) {

1804 
	`Ârötf
(
°dîr
, "notÉnough dataÅo write (min %ld bytes)\n",

1805 
oÂ
.
mö_byãs
);

1806  
SG_LIB_CAT_OTHER
;

1809 i‡(
b±_giví
) {

1810 i‡(
xc›y_Êag_dc
) {

1811 i‡(()
b±
 * 
oÂ
.
£˘_sz
 > oÂ.
max_byãs
) {

1812 
	`Ârötf
(
°dîr
, "bptÅooÜarge (max %ld blocks)\n",

1813 
oÂ
.
max_byãs
 / oÂ.
£˘_sz
);

1814  
SG_LIB_SYNTAX_ERROR
;

1817 i‡(()
b±
 * 
iÂ
.
£˘_sz
 > iÂ.
max_byãs
) {

1818 
	`Ârötf
(
°dîr
, "bptÅooÜarge (max %ld blocks)\n",

1819 
iÂ
.
max_byãs
 / iÂ.
£˘_sz
);

1820  
SG_LIB_SYNTAX_ERROR
;

1824 i‡(
xc›y_Êag_dc
)

1825 
b±
 = 
oÂ
.
max_byãs
 / oÂ.
£˘_sz
;

1827 
b±
 = 
iÂ
.
max_byãs
 / iÂ.
£˘_sz
;

1830 
£g_desc_ty≥
 = 
	`£g_desc_‰om_dd_ty≥
(
iÂ
.
sg_ty≥
, 0, 
oÂ
.sg_type, 0);

1832 i‡(
do_time
) {

1833 
°¨t_tm
.
tv_£c
 = 0;

1834 
°¨t_tm
.
tv_u£c
 = 0;

1835 
	`gëtimeofday
(&
°¨t_tm
, 
NULL
);

1836 
°¨t_tm_vÆid
 = 1;

1839 #ifde‡
SG_DEBUG


1840 
	`Ârötf
(
°dîr
,

1841 "Sèπ o‡lo›, cou¡=%"
PRId64
", bpt=%d, "

1842 "lba_ö=%"
PRId64
",Üba_out=%"PRId64"\n",

1843 
dd_cou¡
, 
b±
, 
skù
, 
£ek
);

1845 
xc›y_fd
 = (
⁄_§c
Ë? 
öfd
 : 
outfd
;

1846 
dd_cou¡
 > 0) {

1847 i‡(
dd_cou¡
 > 
b±
)

1848 
blocks
 = 
b±
;

1850 
blocks
 = 
dd_cou¡
;

1851 
ªs
 = 
	`scsi_exãnded_c›y
(
xc›y_fd
, 
li°_id
, 
§c_desc
, 
§c_desc_Àn
,

1852 
d°_desc
, 
d°_desc_Àn
, 
£g_desc_ty≥
,

1853 
blocks
, 
skù
, 
£ek
);

1854 i‡(
ªs
 != 0)

1856 
ö_fuŒ
 +
blocks
;

1857 
skù
 +
blocks
;

1858 
dd_cou¡
 -
blocks
;

1859 
num_xc›y
++;

1862 i‡(
do_time
)

1863 
	`ˇlc_duøti⁄_throughput
(0);

1864 i‡(
ªs
)

1865 
	`Ârötf
(
°dîr
, "sg_xc›y: faûed wôhÉº‹ %d (%"
PRId64


1866 " block†À·)\n", 
ªs
, 
dd_cou¡
);

1868 
	`Ârötf
(
°dîr
, "sg_xc›y: %"
PRId64
" blocks, %d command%s\n",

1869 
ö_fuŒ
, 
num_xc›y
, ((num_xcopy > 1) ? "s" : ""));

1871  
ªs
;

1872 
	}
}

	@src/sginfo.c

120 
	#_XOPEN_SOURCE
 500

	)

121 #i‚de‡
_GNU_SOURCE


122 
	#_GNU_SOURCE


	)

125 c⁄° * 
	gvîsi⁄_°r
 = "2.33 [20130507]";

127 
	~<°dio.h
>

128 
	~<°rög.h
>

129 
	~<gë›t.h
>

130 
	~<uni°d.h
>

131 
	~<°dlib.h
>

132 
	~<f˙é.h
>

133 
	~<î∫o.h
>

134 
	~<°dlib.h
>

135 
	~<˘y≥.h
>

136 
	#__STDC_FORMAT_MACROS
 1

	)

137 
	~<öây≥s.h
>

138 
	~<sys/io˘l.h
>

139 
	~<sys/ty≥s.h
>

140 
	~<sys/°©.h
>

141 
	~<dúít.h
>

143 #ifde‡
HAVE_CONFIG_H


144 
	~"c⁄fig.h
"

146 
	~"sg_io_löux.h
"

149 
	gglob_fd
;

150 *
	gdevi˚_«me
;

152 
	#MAX_SG_DEVS
 8192

	)

153 
	#MAX_RESP6_SIZE
 252

	)

154 
	#MAX_RESP10_SIZE
 (4*1024)

	)

155 
	#MAX_BUFFER_SIZE
 
MAX_RESP10_SIZE


	)

157 
	#INQUIRY_RESP_INITIAL_LEN
 36

	)

159 
	#MAX_HEADS
 127

	)

160 
	#HEAD_SORT_TOKEN
 0x55

	)

162 
	#SIZEOF_BUFFER
 (16*1024)

	)

163 
	#SIZEOF_BUFFER1
 (16*1024)

	)

164 
	gcbuf„r
[
SIZEOF_BUFFER
];

165 
	gcbuf„r1
[
SIZEOF_BUFFER1
];

166 
	gcbuf„r2
[
SIZEOF_BUFFER1
];

168 
	gde„˘
 = 0;

169 
	gde„˘f‹m©
 = 0x4;

170 
	ggrown_de„˘
 = 0;

171 
	g√g©e_•_bô
 = 0;

172 
	gª∂a˚
 = 0;

173 
	g£rül_numbî
 = 0;

174 
	gx_öãrÁ˚
 = 0;

175 
	gsögÀ_„tch
 = 0;

177 
	gmode6byã
 = 0;

178 
	gåa˚_cmd
 = 0;

180 
	sm∑ge_öfo
 {

181 
	m∑ge
;

182 
	msub∑ge
;

183 
	m∑ge_c⁄åﬁ
;

184 
	m≥ri_ty≥
;

185 
	möq_byã6
;

186 
	mª•_Àn
;

190 
comm⁄_disc⁄√˘_ªc⁄√˘
(
m∑ge_öfo
 * 
mpi
,

191 c⁄° * 
¥efix
);

192 
comm⁄_c⁄åﬁ
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
);

193 
comm⁄_c⁄åﬁ_exãnsi⁄
(
m∑ge_öfo
 * 
mpi
,

194 c⁄° * 
¥efix
);

195 
comm⁄_¥Ÿo_•ec_lu
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
);

196 
comm⁄_¥Ÿo_•ec_p‹t
(
m∑ge_öfo
 * 
mpi
,

197 c⁄° * 
¥efix
);

198 
comm⁄_¥Ÿo_•ec_p‹t_•1
(
m∑ge_öfo
 * 
mpi
,

199 c⁄° * 
¥efix
);

200 
comm⁄_¥Ÿo_•ec_p‹t_•2
(
m∑ge_öfo
 * 
mpi
,

201 c⁄° * 
¥efix
);

202 
comm⁄_powî_c⁄dôi⁄
(
m∑ge_öfo
 * 
mpi
,

203 c⁄° * 
¥efix
);

204 
comm⁄_öf‹m©i⁄Æ
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
);

205 
disk_îr‹_ªcovîy
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
);

206 
disk_f‹m©
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
);

207 
disk_vîify_îr‹_ªcovîy
(
m∑ge_öfo
 * 
mpi
,

208 c⁄° * 
¥efix
);

209 
disk_geomëry
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
);

210 
disk_nŸch_∑ømëîs
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
);

211 
disk_ˇche
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
);

212 
disk_x‹_c⁄åﬁ
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
);

213 
disk_background
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
);

214 
›tiˇl_mem‹y
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
);

215 
cdvd_îr‹_ªcovîy
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
);

216 
cdvd_mrw
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
);

217 
cdvd_wrôe_∑øm
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
);

218 
cdvd_audio_c⁄åﬁ
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
);

219 
cdvd_timeout
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
);

220 
cdvd_devi˚_∑øm
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
);

221 
cdvd_ˇche
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
);

222 
cdvd_mm_ˇ∑b
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
);

223 
cdvd_„©uª
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
);

224 
è≥_d©a_com¥essi⁄
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
);

225 
è≥_dev_c⁄fig
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
);

226 
è≥_medium_∑π1
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
);

227 
è≥_medium_∑π2_4
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
);

228 
£s_£rvi˚s_m™ag
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
);

229 
•i4_åaöög_c⁄fig
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
);

230 
•i4_√gŸüãd
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
);

231 
•i4_ªp‹t_x„r
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
);

233 
	e∑ge_˛ass
 {
	mPC_COMMON
, 
	mPC_DISK
, 
	mPC_TAPE
, 
	mPC_CDVD
, 
	mPC_SES
, 
	mPC_SMC
};

235 
	sm∑ge_«me_func
 {

236 
	m∑ge
;

237 
	msub∑ge
;

238 
∑ge_˛ass
 
	mpg_˛ass
;

239 c⁄° * 
	m«me
;

240 (*
	mfunc
)(
	mm∑ge_öfo
 *, const *);

243 
	#MP_LIST_PAGES
 0x3f

	)

244 
	#MP_LIST_SUBPAGES
 0xff

	)

246 
m∑ge_«me_func
 
	gm∑ge_comm⁄
[] =

248 { 0, 0, 
PC_COMMON
, "Víd‹ (n⁄-∑gêf‹m©)", 
NULL
},

249 { 2, 0, 
PC_COMMON
, "Disc⁄√˘-Rec⁄√˘", 
comm⁄_disc⁄√˘_ªc⁄√˘
},

250 { 9, 0, 
PC_COMMON
, "PîùhîÆ devi˚ (obsﬁëe)", 
NULL
},

251 { 0xa, 0, 
PC_COMMON
, "C⁄åﬁ", 
comm⁄_c⁄åﬁ
},

252 { 0xa, 1, 
PC_COMMON
, "C⁄åﬁ Exãnsi⁄", 
comm⁄_c⁄åﬁ_exãnsi⁄
},

253 { 0x15, 0, 
PC_COMMON
, "Exãnded", 
NULL
},

254 { 0x16, 0, 
PC_COMMON
, "Exãnded, devi˚-ty≥ s≥cific", 
NULL
},

255 { 0x18, 0, 
PC_COMMON
, "PrŸocﬁ s≥cifi¯lu", 
comm⁄_¥Ÿo_•ec_lu
},

256 { 0x19, 0, 
PC_COMMON
, "PrŸocﬁ s≥cifi¯p‹t", 
comm⁄_¥Ÿo_•ec_p‹t
},

257 { 0x19, 1, 
PC_COMMON
, "Protocol specificÖort, subpage 1 overload",

258 
comm⁄_¥Ÿo_•ec_p‹t_•1
},

259 { 0x19, 2, 
PC_COMMON
, "Protocol specificÖort, subpage 2 overload",

260 
comm⁄_¥Ÿo_•ec_p‹t_•2
},

263 { 0x19, 3, 
PC_COMMON
, "SPI-4 NegŸüãd Sëtögs", 
•i4_√gŸüãd
},

264 { 0x19, 4, 
PC_COMMON
, "SPI-4 ReportÅransfer capabilities",

265 
•i4_ªp‹t_x„r
},

266 { 0x1a, 0, 
PC_COMMON
, "Powî C⁄dôi⁄", 
comm⁄_powî_c⁄dôi⁄
},

267 { 0x1c, 0, 
PC_COMMON
, "Inf‹m©i⁄Æ Ex˚±i⁄s", 
comm⁄_öf‹m©i⁄Æ
},

268 { 
MP_LIST_PAGES
, 0, 
PC_COMMON
, "Rëu∫áŒÖages", 
NULL
},

270 c⁄° 
	gm∑ge_comm⁄_Àn
 = (
m∑ge_comm⁄
) /

271 (
m∑ge_comm⁄
[0]);

273 
m∑ge_«me_func
 
	gm∑ge_disk
[] =

275 { 1, 0, 
PC_DISK
, "Ród-WrôêEº‹ Recovîy", 
disk_îr‹_ªcovîy
},

276 { 3, 0, 
PC_DISK
, "F‹m© Devi˚", 
disk_f‹m©
},

277 { 4, 0, 
PC_DISK
, "Rigid Disk Geomëry", 
disk_geomëry
},

278 { 5, 0, 
PC_DISK
, "FÀxibÀ Disk", 
NULL
},

279 { 6, 0, 
PC_DISK
, "O±iˇ»mem‹y", 
›tiˇl_mem‹y
},

280 { 7, 0, 
PC_DISK
, "Vîify Eº‹ Recovîy", 
disk_vîify_îr‹_ªcovîy
},

281 { 8, 0, 
PC_DISK
, "Cachög", 
disk_ˇche
},

282 { 0xa, 0xf1, 
PC_DISK
, "P¨ÆÀ»ATA c⁄åﬁ (SAT)", 
NULL
},

283 { 0xb, 0, 
PC_DISK
, "Medium Ty≥†Suµ‹ãd", 
NULL
},

284 { 0xc, 0, 
PC_DISK
, "NŸchánd P¨tôi⁄", 
disk_nŸch_∑ømëîs
},

285 { 0x10, 0, 
PC_DISK
, "XOR c⁄åﬁ", 
disk_x‹_c⁄åﬁ
},

286 { 0x1c, 1, 
PC_DISK
, "Background c⁄åﬁ", 
disk_background
},

288 c⁄° 
	gm∑ge_disk_Àn
 = (
m∑ge_disk
) / (mpage_disk[0]);

290 
m∑ge_«me_func
 
	gm∑ge_cdvd
[] =

292 { 1, 0, 
PC_CDVD
, "Read-Write Error Recovery (cdvd)",

293 
cdvd_îr‹_ªcovîy
},

294 { 3, 0, 
PC_CDVD
, "MRW", 
cdvd_mrw
},

295 { 5, 0, 
PC_CDVD
, "Wrôê∑ømëîs", 
cdvd_wrôe_∑øm
},

296 { 8, 0, 
PC_CDVD
, "Cachög", 
cdvd_ˇche
},

297 { 0xd, 0, 
PC_CDVD
, "CD devi˚Ö¨amëîs", 
cdvd_devi˚_∑øm
},

298 { 0xe, 0, 
PC_CDVD
, "CDáudiÿc⁄åﬁ", 
cdvd_audio_c⁄åﬁ
},

299 { 0x18, 0, 
PC_CDVD
, "Fótuª së suµ‹à& vîsi⁄", 
cdvd_„©uª
},

300 { 0x1a, 0, 
PC_CDVD
, "Powî C⁄dôi⁄", 
comm⁄_powî_c⁄dôi⁄
},

301 { 0x1c, 0, 
PC_CDVD
, "Fault/failureÑeporting control",

302 
comm⁄_öf‹m©i⁄Æ
},

303 { 0x1d, 0, 
PC_CDVD
, "Time-ouà&ÖrŸe˘", 
cdvd_timeout
},

304 { 0x2a, 0, 
PC_CDVD
, "MM c≠abûôõ†& mech™iˇ»°©us", 
cdvd_mm_ˇ∑b
},

306 c⁄° 
	gm∑ge_cdvd_Àn
 = (
m∑ge_cdvd
) / (mpage_cdvd[0]);

308 
m∑ge_«me_func
 
	gm∑ge_è≥
[] =

310 { 1, 0, 
PC_TAPE
, "Ród-WrôêEº‹ Recovîy", 
disk_îr‹_ªcovîy
},

311 { 0xf, 0, 
PC_TAPE
, "D©®com¥essi⁄", 
è≥_d©a_com¥essi⁄
},

312 { 0x10, 0, 
PC_TAPE
, "Devi˚ c⁄figuøti⁄", 
è≥_dev_c⁄fig
},

313 { 0x10, 1, 
PC_TAPE
, "Devi˚ c⁄figuøti⁄Éxãnsi⁄", 
NULL
},

314 { 0x11, 0, 
PC_TAPE
, "MediumÖ¨tôi⁄(1)", 
è≥_medium_∑π1
},

315 { 0x12, 0, 
PC_TAPE
, "MediumÖ¨tôi⁄(2)", 
è≥_medium_∑π2_4
},

316 { 0x13, 0, 
PC_TAPE
, "MediumÖ¨tôi⁄(3)", 
è≥_medium_∑π2_4
},

317 { 0x14, 0, 
PC_TAPE
, "MediumÖ¨tôi⁄(4)", 
è≥_medium_∑π2_4
},

318 { 0x1c, 0, 
PC_TAPE
, "Inf‹m©i⁄Æ Ex˚±i⁄s", 
comm⁄_öf‹m©i⁄Æ
},

319 { 0x1d, 0, 
PC_TAPE
, "Medium c⁄figuøti⁄", 
NULL
},

321 c⁄° 
	gm∑ge_è≥_Àn
 = (
m∑ge_è≥
) / (mpage_tape[0]);

323 
m∑ge_«me_func
 
	gm∑ge_£s
[] =

325 { 0x14, 0, 
PC_SES
, "En˛osuª sîvi˚†m™agemít", 
£s_£rvi˚s_m™ag
},

327 c⁄° 
	gm∑ge_£s_Àn
 = (
m∑ge_£s
) / (mpage_ses[0]);

329 
m∑ge_«me_func
 
	gm∑ge_smc
[] =

331 { 0x1d, 0, 
PC_SMC
, "EÀmíàaddªs†assignmít", 
NULL
},

332 { 0x1e, 0, 
PC_SMC
, "Tøn•‹àgeomëryÖ¨amëîs", 
NULL
},

333 { 0x1f, 0, 
PC_SMC
, "Devi˚ c≠abûôõs", 
NULL
},

334 { 0x1f, 1, 
PC_SMC
, "Exãnded devi˚ c≠abûôõs", 
NULL
},

336 c⁄° 
	gm∑ge_smc_Àn
 = (
m∑ge_smc
) / (mpage_smc[0]);

339 
	#MAXPARM
 64

	)

341 
	g√xt_∑ømëî
;

342 
	gn_ª∂a˚mít_vÆues
;

343 
uöt64_t
 
	gª∂a˚mít_vÆues
[
MAXPARM
];

344 
	gis_hex
[
MAXPARM
];

346 
	#SMODE_SENSE
 0x1a

	)

347 
	#SMODE_SENSE_10
 0x5a

	)

348 
	#SMODE_SELECT
 0x15

	)

349 
	#SMODE_SELECT_10
 0x55

	)

351 
	#MPHEADER6_LEN
 4

	)

352 
	#MPHEADER10_LEN
 8

	)

356 
ußge
(const *);

357 
dump
(*
buf„r
, 
Àngth
);

359 
	#DXFER_NONE
 0

	)

360 
	#DXFER_FROM_DEVICE
 1

	)

361 
	#DXFER_TO_DEVICE
 2

	)

364 
	sscsi_cmnd_io


366 * 
	mcmnd
;

367 
size_t
 
	mcmnd_Àn
;

368 
	mdx„r_dú
;

370 * 
	mdx„Ω
;

371 
size_t
 
	mdx„r_Àn
;

374 
	#SENSE_BUFF_LEN
 64

	)

375 
	#CMD_TIMEOUT
 60000

	)

376 
	#EBUFF_SZ
 256

	)

379 
	#GENERAL_ERROR
 1

	)

380 
	#UNKNOWN_OPCODE
 2

	)

381 
	#BAD_CDB_FIELD
 3

	)

382 
	#UNSUPPORTED_PARAM
 4

	)

383 
	#DEVICE_ATTENTION
 5

	)

384 
	#DEVICE_NOT_READY
 6

	)

386 
	#DECODE_FAILED_TRY_HEX
 9999

	)

391 
	$do_scsi_io
(
scsi_cmnd_io
 * 
sio
)

393 
£n£_b
[
SENSE_BUFF_LEN
];

394 
sg_io_hdr
 
io_hdr
;

395 
sg_scsi_£n£_hdr
 
ssh
;

396 
ªs
;

398 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr
));

399 
io_hdr
.
öãrÁ˚_id
 = 'S';

400 
io_hdr
.
cmd_Àn
 = 
sio
->
cmnd_Àn
;

401 
io_hdr
.
mx_sb_Àn
 = (
£n£_b
);

402 i‡(
DXFER_NONE
 =
sio
->
dx„r_dú
)

403 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_NONE
;

405 
io_hdr
.
dx„r_dúe˘i⁄
 = (
DXFER_TO_DEVICE
 =
sio
->
dx„r_dú
) ?

406 
SG_DXFER_TO_DEV
 : 
SG_DXFER_FROM_DEV
;

407 
io_hdr
.
dx„r_Àn
 = 
sio
->dxfer_len;

408 
io_hdr
.
dx„Ω
 = 
sio
->dxferp;

409 
io_hdr
.
cmdp
 = 
sio
->
cmnd
;

410 
io_hdr
.
sbp
 = 
£n£_b
;

411 
io_hdr
.
timeout
 = 
CMD_TIMEOUT
;

413 i‡(
åa˚_cmd
) {

414 
	`¥ötf
(" cdb:");

415 
	`dump
(
sio
->
cmnd
, sio->
cmnd_Àn
);

417 i‡((
åa˚_cmd
 > 1Ë&& (
DXFER_TO_DEVICE
 =
sio
->
dx„r_dú
)) {

418 
	`¥ötf
("ádditional data:\n");

419 
	`dump
(
sio
->
dx„Ω
, sio->
dx„r_Àn
);

422 i‡(
	`io˘l
(
glob_fd
, 
SG_IO
, &
io_hdr
) < 0) {

423 
	`≥º‹
("do_scsi_cmd: SG_IOÉrror");

424  
GENERAL_ERROR
;

426 
ªs
 = 
	`sg_îr_ˇãg‹y3
(&
io_hdr
);

427 
ªs
) {

428 
SG_LIB_CAT_RECOVERED
:

429 
	`sg_chk_n_¥öt3
("do_scsi_cmd, c⁄töuög", &
io_hdr
, 1);

431 
SG_LIB_CAT_CLEAN
:

434 i‡(
åa˚_cmd
) {

435 
ebuff
[
EBUFF_SZ
];

437 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, "do_scsi_io: opcode=0x%x", 
sio
->
cmnd
[0]);

438 
	`sg_chk_n_¥öt3
(
ebuff
, &
io_hdr
, 1);

440 i‡(
	`sg_n‹mÆize_£n£
(&
io_hdr
, &
ssh
)) {

441 i‡(
ILLEGAL_REQUEST
 =
ssh
.
£n£_key
) {

442 i‡(0x20 =
ssh
.
asc
)

443  
UNKNOWN_OPCODE
;

444 i‡(0x24 =
ssh
.
asc
)

445  
BAD_CDB_FIELD
;

446 i‡(0x26 =
ssh
.
asc
)

447  
UNSUPPORTED_PARAM
;

448 } i‡(
UNIT_ATTENTION
 =
ssh
.
£n£_key
)

449  
DEVICE_ATTENTION
;

450 i‡(
NOT_READY
 =
ssh
.
£n£_key
)

451  
DEVICE_NOT_READY
;

453  
GENERAL_ERROR
;

455 
	}
}

457 
m∑ge_«me_func
 * 
	$gë_m∑ge_öfo
(
∑ge_no
, 
sub∑ge_no
,

458 
m∑ge_«me_func
 * 
mµ
, 
ñems
)

460 
k
;

462 
k
 = 0; k < 
ñems
; ++k, ++
mµ
) {

463 i‡((
mµ
->
∑ge
 =
∑ge_no
Ë&& (mµ->
sub∑ge
 =
sub∑ge_no
))

464  
mµ
;

465 i‡(
mµ
->
∑ge
 > 
∑ge_no
)

468  
NULL
;

469 
	}
}

471 
∑ge_˛ass
 
	$gë_∑ge_˛ass
(
m∑ge_öfo
 * 
mpi
)

473 
mpi
->
≥ri_ty≥
)

479  
PC_DISK
;

482  
PC_TAPE
;

484  
PC_SMC
;

486  
PC_CDVD
;

488  
PC_SES
;

490  
PC_COMMON
;

492 
	}
}

494 
m∑ge_«me_func
 * 
	$gë_m∑ge_«me_func
(
m∑ge_öfo
 * 
mpi
)

496 
m∑ge_«me_func
 * 
mpf
 = 
NULL
;

498 
	`gë_∑ge_˛ass
(
mpi
))

500 
PC_DISK
:

501 
mpf
 = 
	`gë_m∑ge_öfo
(
mpi
->
∑ge
, mpi->
sub∑ge
, 
m∑ge_disk
,

502 
m∑ge_disk_Àn
);

504 
PC_CDVD
:

505 
mpf
 = 
	`gë_m∑ge_öfo
(
mpi
->
∑ge
, mpi->
sub∑ge
, 
m∑ge_cdvd
,

506 
m∑ge_cdvd_Àn
);

508 
PC_TAPE
:

509 
mpf
 = 
	`gë_m∑ge_öfo
(
mpi
->
∑ge
, mpi->
sub∑ge
, 
m∑ge_è≥
,

510 
m∑ge_è≥_Àn
);

512 
PC_SES
:

513 
mpf
 = 
	`gë_m∑ge_öfo
(
mpi
->
∑ge
, mpi->
sub∑ge
, 
m∑ge_£s
,

514 
m∑ge_£s_Àn
);

516 
PC_SMC
:

517 
mpf
 = 
	`gë_m∑ge_öfo
(
mpi
->
∑ge
, mpi->
sub∑ge
, 
m∑ge_smc
,

518 
m∑ge_smc_Àn
);

520 
PC_COMMON
:

524 i‡(
NULL
 =
mpf
) {

525 i‡((
PC_SES
 !
	`gë_∑ge_˛ass
(
mpi
)Ë&& (mpi->
öq_byã6
 & 0x40)) {

527 
mpf
 = 
	`gë_m∑ge_öfo
(
mpi
->
∑ge
, mpi->
sub∑ge
, 
m∑ge_£s
,

528 
m∑ge_£s_Àn
);

530 i‡((
PC_SMC
 !
	`gë_∑ge_˛ass
(
mpi
)Ë&& (mpi->
öq_byã6
 & 0x8)) {

532 
mpf
 = 
	`gë_m∑ge_öfo
(
mpi
->
∑ge
, mpi->
sub∑ge
, 
m∑ge_smc
,

533 
m∑ge_smc_Àn
);

536 i‡(
NULL
 =
mpf
)

537 
mpf
 = 
	`gë_m∑ge_öfo
(
mpi
->
∑ge
, mpi->
sub∑ge
, 
m∑ge_comm⁄
,

538 
m∑ge_comm⁄_Àn
);

539  
mpf
;

540 
	}
}

543 
	gunkn_∑ge_°r
[64];

546 
	$gë_∑ge_«me
(
m∑ge_öfo
 * 
mpi
)

548 
m∑ge_«me_func
 * 
mpf
;

550 i‡(
MP_LIST_PAGES
 =
mpi
->
∑ge
) {

551 i‡(
MP_LIST_SUBPAGES
 =
mpi
->
sub∑ge
)

556 
mpf
 = 
	`gë_m∑ge_«me_func
(
mpi
);

557 i‡((
NULL
 =
mpf
Ë|| (NULL =mpf->
«me
)) {

558 i‡(
mpi
->
sub∑ge
)

559 
	`¢¥ötf
(
unkn_∑ge_°r
, (unkn_page_str),

561 
mpi
->
∑ge
, mpi->
sub∑ge
);

563 
	`¢¥ötf
(
unkn_∑ge_°r
, (unkn_page_str),

564 "∑gênumbî=0x%x", 
mpi
->
∑ge
);

565  
unkn_∑ge_°r
;

567  
mpf
->
«me
;

568 
	}
}

571 
	$dump
(*
buf„r
, 
Àngth
)

573 
i
;

575 
	`¥ötf
(" ");

576 
i
 = 0; i < 
Àngth
; i++) {

578 i‡(((*Ë
buf„r
)[
i
] > 0x20)

579 
	`¥ötf
(" %¯", (Ë((*Ë
buf„r
)[
i
]);

582 
	`¥ötf
("%02x ", (Ë((*Ë
buf„r
)[
i
]);

583 i‡((
i
 % 16 =15Ë&& (ò< (
Àngth
 - 1))) {

584 
	`¥ötf
("\n ");

587 
	`¥ötf
("\n");

589 
	}
}

592 
	$gënbyã
(c⁄° *
≤t
, 
nbyã
)

594 
ªsu…
;

595 
i
;

597 i‡(
nbyã
 > 4)

598 
	`Ârötf
(
°dîr
, "gënbyã(ËlimôedÅÿ32 bôs,Çbyã=%d\n", 
nbyã
);

599 
ªsu…
 = 0;

600 
i
 = 0; i < 
nbyã
; i++)

601 
ªsu…
 = (ªsu… << 8Ë| (
≤t
[
i
] & 0xff);

602  
ªsu…
;

603 
	}
}

605 
öt64_t


606 
	$gënbyã_Œ
(c⁄° *
≤t
, 
nbyã
)

608 
öt64_t
 
ªsu…
;

609 
i
;

611 i‡(
nbyã
 > 8)

612 
	`Ârötf
(
°dîr
, "getnbyte_ll()ÜimitedÅo 64 bits,Çbyte=%d\n",

613 
nbyã
);

614 
ªsu…
 = 0;

615 
i
 = 0; i < 
nbyã
; i++)

616 
ªsu…
 = (ªsu… << 8Ë+ (
≤t
[
i
] & 0xff);

617  
ªsu…
;

618 
	}
}

621 
	$puäbyã
(*
≤t
, 
vÆue
,

622 
nbyã
)

624 
i
;

626 
i
 = 
nbyã
 - 1; i >= 0; i--) {

627 
≤t
[
i
] = 
vÆue
 & 0xff;

628 
vÆue
 = value >> 8;

631 
	}
}

633 
	#REASON_SZ
 128

	)

636 
	$check_∑rm_ty≥
(
i
)

638 
ªas⁄
[
REASON_SZ
];

640 i‡(
i
 =1 && 
is_hex
[
√xt_∑ømëî
] != 1) {

641 
	`¢¥ötf
(
ªas⁄
, 
REASON_SZ
,

642 "sim∂ênumbî (po†%iËö°ód o‡@ hexd©afõld: %"
PRIu64
,

643 
√xt_∑ømëî
, 
ª∂a˚mít_vÆues
[next_parameter]);

644 
	`ußge
(
ªas⁄
);

646 i‡(
i
 !1 && 
is_hex
[
√xt_∑ømëî
]) {

647 
	`¢¥ötf
(
ªas⁄
, 
REASON_SZ
,

648 "@ hexd©afõld (po†%iËö°ód o‡®sim∂ênumbî: %"
PRIu64
,

649 
√xt_∑ømëî
, 
ª∂a˚mít_vÆues
[next_parameter]);

650 
	`ußge
(
ªas⁄
);

652 
	}
}

655 
	$bôfõld
(*
∑góddr
, c⁄° * 
ãxt
, 
mask
, 
shi·
)

657 i‡(
x_öãrÁ˚
 && 
ª∂a˚
) {

658 
	`check_∑rm_ty≥
(0);

659 *
∑góddr
 = (*∑gódd∏& ~(
mask
 << 
shi·
)) |

660 ((
ª∂a˚mít_vÆues
[
√xt_∑ømëî
++] & 
mask
Ë<< 
shi·
);

661 } i‡(
x_öãrÁ˚
)

662 
	`¥ötf
("%d ", (*
∑góddr
 >> 
shi·
Ë& 
mask
);

664 
	`¥ötf
("%-35s%d\n", 
ãxt
, (*
∑góddr
 >> 
shi·
Ë& 
mask
);

665 
	}
}

669 
	$nŸbôfõld
(*
∑góddr
, * 
ãxt
, 
mask
,

670 
shi·
)

672 i‡(
modifübÀ
) {

673 
	`bôfõld
(
∑góddr
, 
ãxt
, 
mask
, 
shi·
);

676 i‡(
x_öãrÁ˚
 && 
ª∂a˚
) {

677 
	`check_∑rm_ty≥
(0);

678 *
∑góddr
 = (*∑gódd∏& ~(
mask
 << 
shi·
)) |

679 (((!
ª∂a˚mít_vÆues
[
√xt_∑ømëî
++]Ë& 
mask
Ë<< 
shi·
);

680 } i‡(
x_öãrÁ˚
)

681 
	`¥ötf
("%d ", !((*
∑góddr
 >> 
shi·
Ë& 
mask
));

683 
	`¥ötf
("%-35s%d\n", 
ãxt
, !((*
∑góddr
 >> 
shi·
Ë& 
mask
));

684 
	}
}

688 
	$ötfõld
(* 
∑góddr
, 
nbyãs
, c⁄° * 
ãxt
)

690 i‡(
x_öãrÁ˚
 && 
ª∂a˚
) {

691 
	`check_∑rm_ty≥
(0);

692 
	`puäbyã
(
∑góddr
, 
ª∂a˚mít_vÆues
[
√xt_∑ømëî
++], 
nbyãs
);

693 } i‡(
x_öãrÁ˚
)

694 
	`¥ötf
("%d ", 
	`gënbyã
(
∑góddr
, 
nbyãs
));

696 
	`¥ötf
("%-35s%d\n", 
ãxt
, 
	`gënbyã
(
∑góddr
, 
nbyãs
));

697 
	}
}

700 
	$hexfõld
(* 
∑góddr
, 
nbyãs
, c⁄° * 
ãxt
)

702 i‡(
x_öãrÁ˚
 && 
ª∂a˚
) {

703 
	`check_∑rm_ty≥
(0);

704 
	`puäbyã
(
∑góddr
, 
ª∂a˚mít_vÆues
[
√xt_∑ømëî
++], 
nbyãs
);

705 } i‡(
x_öãrÁ˚
)

706 
	`¥ötf
("%d ", 
	`gënbyã
(
∑góddr
, 
nbyãs
));

708 
	`¥ötf
("%-35s0x%x\n", 
ãxt
, 
	`gënbyã
(
∑góddr
, 
nbyãs
));

709 
	}
}

712 
	$hexd©afõld
(* 
∑góddr
, 
nbyãs
, c⁄° * 
ãxt
)

714 i‡(
x_öãrÁ˚
 && 
ª∂a˚
) {

715 *
±r
;

716 
tmp
;

721 
	`check_∑rm_ty≥
(1);

723 
±r
 = (*) ()

724 (
ª∂a˚mít_vÆues
[
√xt_∑ømëî
++]);

725 
±r
++;

727 *
±r
) {

728 i‡(!
nbyãs
)

729 
ûÀgÆ
;

730 
tmp
 = (*
±r
 >= 'a') ? (*ptr - 'a' + 'A') : *ptr;

731 
tmp
 -= (tmp >= 'A') ? 'A' - 10 : '0';

733 *
∑góddr
 = 
tmp
 << 4;

734 
±r
++;

736 
tmp
 = (*
±r
 >= 'a') ? (*ptr - 'a' + 'A') : *ptr;

737 
tmp
 -= (tmp >= 'A') ? 'A' - 10 : '0';

739 *
∑góddr
++ +
tmp
;

740 
±r
++;

741 
nbyãs
--;

744 i‡(
nbyãs
) {

745 
ûÀgÆ
:

746 
	`Âuts
("sginfo: incorrectÇumber of bytes in @hexdatafield.\n",

747 
°dout
);

748 
	`exô
(2);

750 } i‡(
x_öãrÁ˚
) {

751 
	`putch¨
('@');

752 
nbyãs
-- > 0)

753 
	`¥ötf
("%02x", *
∑góddr
++);

754 
	`putch¨
(' ');

756 
	`¥ötf
("%-35s0x", 
ãxt
);

757 
nbyãs
-- > 0)

758 
	`¥ötf
("%02x", *
∑góddr
++);

759 
	`putch¨
('\n');

761 
	}
}

767 
	$modePageOff£t
(c⁄° * 
ª•
, 
Àn
, 
mode£_6
)

769 
bd_Àn
;

770 
ª•_Àn
 = 0;

771 
off£t
 = -1;

773 i‡(
ª•
) {

774 i‡(
mode£_6
) {

775 
ª•_Àn
 = 
ª•
[0] + 1;

776 
bd_Àn
 = 
ª•
[3];

777 
off£t
 = 
bd_Àn
 + 
MPHEADER6_LEN
;

779 
ª•_Àn
 = (
ª•
[0] << 8) +Ñesp[1] + 2;

780 
bd_Àn
 = (
ª•
[6] << 8) +Ñesp[7];

782 
off£t
 = 
bd_Àn
 + 
MPHEADER10_LEN
;

784 i‡((
off£t
 + 2Ë> 
Àn
) {

785 
	`¥ötf
("modePageOffset:Ñaw_currÅoo small, offset=%d "

786 "ª•_Àn=%d bd_Àn=%d\n", 
off£t
, 
ª•_Àn
, 
bd_Àn
);

787 
off£t
 = -1;

788 } i‡((
off£t
 + 2Ë> 
ª•_Àn
) {

789 
	`¥ötf
("modePageOffset:ÑesponseÜengthÅoo short,Ñesp_len=%d"

790 " off£t=%d bd_Àn=%d\n", 
ª•_Àn
, 
off£t
, 
bd_Àn
);

791 
off£t
 = -1;

794  
off£t
;

795 
	}
}

799 
	$gë_mode_∑ge6
(
m∑ge_öfo
 * 
mpi
, 
dbd
, * 
ª•
,

800 
¢gl_„tch
)

802 
°©us
, 
off
;

803 
cmd
[6];

804 
scsi_cmnd_io
 
sci
;

805 
öôül_Àn
 = (
¢gl_„tch
 ? 
MAX_RESP6_SIZE
 : 4);

807 
	`mem£t
(
ª•
, 0, 4);

808 
cmd
[0] = 
SMODE_SENSE
;

809 
cmd
[1] = 0x00 | (
dbd
 ? 0x8 : 0);

810 
cmd
[2] = (
mpi
->
∑ge_c⁄åﬁ
 << 6Ë| mpi->
∑ge
;

811 
cmd
[3] = 
mpi
->
sub∑ge
;

812 
cmd
[4] = 
öôül_Àn
;

813 
cmd
[5] = 0x00;

815 
sci
.
cmnd
 = 
cmd
;

816 
sci
.
cmnd_Àn
 = (
cmd
);

817 
sci
.
dx„r_dú
 = 
DXFER_FROM_DEVICE
;

818 
sci
.
dx„r_Àn
 = 
öôül_Àn
;

819 
sci
.
dx„Ω
 = 
ª•
;

820 
°©us
 = 
	`do_scsi_io
(&
sci
);

821 i‡(
°©us
) {

822 i‡(
mpi
->
sub∑ge
)

823 
	`Ârötf
(
°dout
, ">>> UnableÅoÑead %s modeÖage 0x%x, subpage "

824 "0x%x [mode_£n£_6]\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
,

825 
mpi
->
sub∑ge
);

827 
	`Ârötf
(
°dout
, ">>> UnableÅoÑead %s modeÖage (0x%x) "

828 "[mode_£n£_6]\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

829  
°©us
;

831 
mpi
->
ª•_Àn
 = 
ª•
[0] + 1;

832 i‡(
¢gl_„tch
) {

833 i‡(
åa˚_cmd
 > 1) {

834 
off
 = 
	`modePageOff£t
(
ª•
, 
mpi
->
ª•_Àn
, 1);

835 i‡(
off
 >= 0) {

836 
	`¥ötf
(" cdbÑesponse:\n");

837 
	`dump
(
ª•
, 
mpi
->
ª•_Àn
);

840  
°©us
;

843 
cmd
[4] = 
mpi
->
ª•_Àn
;

844 
sci
.
cmnd
 = 
cmd
;

845 
sci
.
cmnd_Àn
 = (
cmd
);

846 
sci
.
dx„r_dú
 = 
DXFER_FROM_DEVICE
;

847 
sci
.
dx„r_Àn
 = 
mpi
->
ª•_Àn
;

848 
sci
.
dx„Ω
 = 
ª•
;

849 
°©us
 = 
	`do_scsi_io
(&
sci
);

850 i‡(
°©us
) {

851 i‡(
mpi
->
sub∑ge
)

852 
	`Ârötf
(
°dout
, ">>> UnableÅoÑead %s modeÖage 0x%x, subpage "

853 "0x%x [mode_£n£_6]\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
,

854 
mpi
->
sub∑ge
);

856 
	`Ârötf
(
°dout
, ">>> UnableÅoÑead %s modeÖage (0x%x) "

857 "[mode_£n£_6]\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

858 } i‡(
åa˚_cmd
 > 1) {

859 
off
 = 
	`modePageOff£t
(
ª•
, 
mpi
->
ª•_Àn
, 1);

860 i‡(
off
 >= 0) {

861 
	`¥ötf
(" cdbÑesponse:\n");

862 
	`dump
(
ª•
, 
mpi
->
ª•_Àn
);

865  
°©us
;

866 
	}
}

870 
	$gë_mode_∑ge10
(
m∑ge_öfo
 * 
mpi
, 
ŒbØ
, 
dbd
,

871 * 
ª•
, 
¢gl_„tch
)

873 
°©us
, 
off
;

874 
cmd
[10];

875 
scsi_cmnd_io
 
sci
;

876 
öôül_Àn
 = (
¢gl_„tch
 ? 
MAX_RESP10_SIZE
 : 4);

878 
	`mem£t
(
ª•
, 0, 4);

879 
cmd
[0] = 
SMODE_SENSE_10
;

880 
cmd
[1] = 0x00 | (
ŒbØ
 ? 0x10 : 0Ë| (
dbd
 ? 0x8 : 0);

881 
cmd
[2] = (
mpi
->
∑ge_c⁄åﬁ
 << 6Ë| mpi->
∑ge
;

882 
cmd
[3] = 
mpi
->
sub∑ge
;

883 
cmd
[4] = 0x00;

884 
cmd
[5] = 0x00;

885 
cmd
[6] = 0x00;

886 
cmd
[7] = (
öôül_Àn
 >> 8) & 0xff;

887 
cmd
[8] = 
öôül_Àn
 & 0xff;

888 
cmd
[9] = 0x00;

890 
sci
.
cmnd
 = 
cmd
;

891 
sci
.
cmnd_Àn
 = (
cmd
);

892 
sci
.
dx„r_dú
 = 
DXFER_FROM_DEVICE
;

893 
sci
.
dx„r_Àn
 = 
öôül_Àn
;

894 
sci
.
dx„Ω
 = 
ª•
;

895 
°©us
 = 
	`do_scsi_io
(&
sci
);

896 i‡(
°©us
) {

897 i‡(
mpi
->
sub∑ge
)

898 
	`Ârötf
(
°dout
, ">>> UnableÅoÑead %s modeÖage 0x%x, subpage "

899 "0x%x [mode_£n£_10]\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
,

900 
mpi
->
sub∑ge
);

902 
	`Ârötf
(
°dout
, ">>> UnableÅoÑead %s modeÖage (0x%x) "

903 "[mode_£n£_10]\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

904  
°©us
;

906 
mpi
->
ª•_Àn
 = (
ª•
[0] << 8) +Ñesp[1] + 2;

907 i‡(
¢gl_„tch
) {

908 i‡(
åa˚_cmd
 > 1) {

909 
off
 = 
	`modePageOff£t
(
ª•
, 
mpi
->
ª•_Àn
, 0);

910 i‡(
off
 >= 0) {

911 
	`¥ötf
(" cdbÑesponse:\n");

912 
	`dump
(
ª•
, 
mpi
->
ª•_Àn
);

915  
°©us
;

918 
cmd
[7] = (
mpi
->
ª•_Àn
 >> 8) & 0xff;

919 
cmd
[8] = (
mpi
->
ª•_Àn
 & 0xff);

920 
sci
.
cmnd
 = 
cmd
;

921 
sci
.
cmnd_Àn
 = (
cmd
);

922 
sci
.
dx„r_dú
 = 
DXFER_FROM_DEVICE
;

923 
sci
.
dx„r_Àn
 = 
mpi
->
ª•_Àn
;

924 
sci
.
dx„Ω
 = 
ª•
;

925 
°©us
 = 
	`do_scsi_io
(&
sci
);

926 i‡(
°©us
) {

927 i‡(
mpi
->
sub∑ge
)

928 
	`Ârötf
(
°dout
, ">>> UnableÅoÑead %s modeÖage 0x%x, subpage "

929 "0x%x [mode_£n£_10]\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
,

930 
mpi
->
sub∑ge
);

932 
	`Ârötf
(
°dout
, ">>> UnableÅoÑead %s modeÖage (0x%x) "

933 "[mode_£n£_10]\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

934 } i‡(
åa˚_cmd
 > 1) {

935 
off
 = 
	`modePageOff£t
(
ª•
, 
mpi
->
ª•_Àn
, 0);

936 i‡(
off
 >= 0) {

937 
	`¥ötf
(" cdbÑesponse:\n");

938 
	`dump
(
ª•
, 
mpi
->
ª•_Àn
);

941  
°©us
;

942 
	}
}

945 
	$gë_mode_∑ge
(
m∑ge_öfo
 * 
mpi
, 
dbd
, * 
ª•
)

947 
ªs
;

949 i‡(
mode6byã
)

950 
ªs
 = 
	`gë_mode_∑ge6
(
mpi
, 
dbd
, 
ª•
, 
sögÀ_„tch
);

952 
ªs
 = 
	`gë_mode_∑ge10
(
mpi
, 0, 
dbd
, 
ª•
, 
sögÀ_„tch
);

953 i‡(
UNKNOWN_OPCODE
 =
ªs
)

954 
	`Ârötf
(
°dout
, ">>>>> Try commandágain with%s '-6' "

955 "¨gumít\n", (
mode6byã
 ? "outÅhe" : "á"));

956 i‡(
mpi
->
sub∑ge
 && (
BAD_CDB_FIELD
 =
ªs
))

957 
	`Ârötf
(
°dout
, ">>>>> device doesn't seemÅo support "

959 i‡(
DEVICE_ATTENTION
 =
ªs
)

960 
	`Ârötf
(
°dout
, ">>>>> deviceÑeports UNIT ATTENTION, check it or"

962 i‡(
DEVICE_NOT_READY
 =
ªs
)

963 
	`Ârötf
(
°dout
, ">>>>> device NOT READY, does itÇeed media?\n");

964  
ªs
;

965 
	}
}

971 
	$put_mode_∑ge6
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
m£n£6_ª•
,

972 
•_bô
)

974 
°©us
;

975 
bdÀn
, 
ª•Àn
;

976 
cmd
[6];

977 
scsi_cmnd_io
 
sci
;

979 
bdÀn
 = 
m£n£6_ª•
[3];

980 
ª•Àn
 = 
m£n£6_ª•
[0] + 1;

982 
cmd
[0] = 
SMODE_SELECT
;

983 
cmd
[1] = 0x10 | (
•_bô
 ? 1 : 0);

984 
cmd
[2] = 0x00;

985 
cmd
[3] = 0x00;

986 
cmd
[4] = 
ª•Àn
;

987 
cmd
[5] = 0x00;

989 
	`mem˝y
(
cbuf„r1
, 
m£n£6_ª•
, 
ª•Àn
);

990 
cbuf„r1
[0] = 0;

992 
cbuf„r1
[2] = 0;

996 i‡(
bdÀn
 > 0) {

997 
	`mem£t
(
cbuf„r1
 + 
MPHEADER6_LEN
, 0, 4);

999 
cbuf„r1
[
MPHEADER6_LEN
 + 4] = 0;

1003 
cbuf„r1
[
MPHEADER6_LEN
 + 
bdÀn
] &= 0x7f;

1005 
sci
.
cmnd
 = 
cmd
;

1006 
sci
.
cmnd_Àn
 = (
cmd
);

1007 
sci
.
dx„r_dú
 = 
DXFER_TO_DEVICE
;

1008 
sci
.
dx„r_Àn
 = 
ª•Àn
;

1009 
sci
.
dx„Ω
 = 
cbuf„r1
;

1010 
°©us
 = 
	`do_scsi_io
(&
sci
);

1011 i‡(
°©us
) {

1012 i‡(
mpi
->
sub∑ge
)

1013 
	`Ârötf
(
°dout
, ">>> UnableÅo store %s modeÖage 0x%x,"

1014 " sub∑gê0x%x [m£l_6]\n", 
	`gë_∑ge_«me
(
mpi
),

1015 
mpi
->
∑ge
, mpi->
sub∑ge
);

1017 
	`Ârötf
(
°dout
, ">>> UnableÅo store %s modeÖage 0x%x [msel_6]\n",

1018 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

1020  
°©us
;

1021 
	}
}

1027 
	$put_mode_∑ge10
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
m£n£10_ª•
,

1028 
•_bô
)

1030 
°©us
;

1031 
bdÀn
, 
ª•Àn
;

1032 
cmd
[10];

1033 
scsi_cmnd_io
 
sci
;

1035 
bdÀn
 = (
m£n£10_ª•
[6] << 8) + msense10_resp[7];

1036 
ª•Àn
 = (
m£n£10_ª•
[0] << 8) + msense10_resp[1] + 2;

1038 
cmd
[0] = 
SMODE_SELECT_10
;

1039 
cmd
[1] = 0x10 | (
•_bô
 ? 1 : 0);

1040 
cmd
[2] = 0x00;

1041 
cmd
[3] = 0x00;

1042 
cmd
[4] = 0x00;

1043 
cmd
[5] = 0x00;

1044 
cmd
[6] = 0x00;

1045 
cmd
[7] = (
ª•Àn
 >> 8) & 0xff;

1046 
cmd
[8] = 
ª•Àn
 & 0xff;

1047 
cmd
[9] = 0x00;

1049 
	`mem˝y
(
cbuf„r1
, 
m£n£10_ª•
, 
ª•Àn
);

1050 
cbuf„r1
[0] = 0;

1051 
cbuf„r1
[1] = 0;

1052 
cbuf„r1
[3] = 0;

1055 i‡(
bdÀn
 > 0) {

1056 
	`mem£t
(
cbuf„r1
 + 
MPHEADER10_LEN
, 0, 4);

1058 
cbuf„r1
[
MPHEADER10_LEN
 + 4] = 0;

1062 
cbuf„r1
[
MPHEADER10_LEN
 + 
bdÀn
] &= 0x7f;

1064 
sci
.
cmnd
 = 
cmd
;

1065 
sci
.
cmnd_Àn
 = (
cmd
);

1066 
sci
.
dx„r_dú
 = 
DXFER_TO_DEVICE
;

1067 
sci
.
dx„r_Àn
 = 
ª•Àn
;

1068 
sci
.
dx„Ω
 = 
cbuf„r1
;

1069 
°©us
 = 
	`do_scsi_io
(&
sci
);

1070 i‡(
°©us
) {

1071 i‡(
mpi
->
sub∑ge
)

1072 
	`Ârötf
(
°dout
, ">>> UnableÅo store %s modeÖage 0x%x,"

1073 " sub∑gê0x%x [m£l_10]\n", 
	`gë_∑ge_«me
(
mpi
),

1074 
mpi
->
∑ge
, mpi->
sub∑ge
);

1076 
	`Ârötf
(
°dout
, ">>> UnableÅo store %s modeÖage 0x%x "

1077 "[m£l_10]\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

1079  
°©us
;

1080 
	}
}

1083 
	$put_mode_∑ge
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
m£n£_ª•
)

1085 i‡(
mode6byã
)

1086  
	`put_mode_∑ge6
(
mpi
, 
m£n£_ª•
, ! 
√g©e_•_bô
);

1088  
	`put_mode_∑ge10
(
mpi
, 
m£n£_ª•
, ! 
√g©e_•_bô
);

1089 
	}
}

1092 
	$£tup_mode_∑ge
(
m∑ge_öfo
 * 
mpi
, 
≈¨am
, * 
buff
,

1093 ** 
o_∑ge°¨t
)

1095 
°©us
, 
off£t
, 
ªm_pgÀn
;

1096 * 
pgp
;

1098 
°©us
 = 
	`gë_mode_∑ge
(
mpi
, 0, 
buff
);

1099 i‡(
°©us
) {

1100 
	`¥ötf
("\n");

1101  
°©us
;

1103 
off£t
 = 
	`modePageOff£t
(
buff
, 
mpi
->
ª•_Àn
, 
mode6byã
);

1104 i‡(
off£t
 < 0) {

1105 
	`Ârötf
(
°dout
, "modê∑ge=0x%x ha†badÖagêf‹m©\n", 
mpi
->
∑ge
);

1106 
	`Ârötf
(
°dout
, "Öerhaps '-z' switch may help\n");

1109 
pgp
 = 
buff
 + 
off£t
;

1110 *
o_∑ge°¨t
 = 
pgp
;

1111 
ªm_pgÀn
 = (0x40 & 
pgp
[0]) ? ((pgp[2] << 8) +Ögp[3]) :Ögp[1];

1113 i‡(
x_öãrÁ˚
 && 
ª∂a˚
) {

1114 i‡((
≈¨am
 && (
n_ª∂a˚mít_vÆues
 !=Çparam)) ||

1115 ((! 
≈¨am
Ë&& (
n_ª∂a˚mít_vÆues
 !
ªm_pgÀn
))) {

1116 
	`Ârötf
(
°dout
, "WrongÇumber ofÑeplacement values (%i instead "

1117 "o‡%i)\n", 
n_ª∂a˚mít_vÆues
,

1118 
≈¨am
 ?Ç∑øm : 
ªm_pgÀn
);

1121 
√xt_∑ømëî
 = 1;

1124 
	}
}

1127 
	$gë_¥Ÿocﬁ_id
(
p‹t_nŸ_lu
, * 
buff
, * 
¥Ÿo_idp
,

1128 * 
ofÂ
)

1130 
°©us
, 
off
, 
¥Ÿo_id
, 
•f
;

1131 
m∑ge_öfo
 
mp_i
;

1132 
b
[64];

1134 
	`mem£t
(&
mp_i
, 0, (mp_i));

1135 
mp_i
.
∑ge
 = (
p‹t_nŸ_lu
 ? 0x19 : 0x18);

1137 
°©us
 = 
	`gë_mode_∑ge
(&
mp_i
, 0, 
buff
);

1138 i‡(
°©us
)

1139  
°©us
;

1140 
off
 = 
	`modePageOff£t
(
buff
, 
mp_i
.
ª•_Àn
, 
mode6byã
);

1141 i‡(
off
 < 0)

1142  
off
;

1143 
•f
 = (
buff
[
off
] & 0x40) ? 1 : 0;

1144 
¥Ÿo_id
 = 
buff
[
off
 + (
•f
 ? 5 : 2)] & 0xf;

1145 i‡(
åa˚_cmd
 > 0)

1146 
	`¥ötf
("Protocol specific %s,Örotocol_id=%s\n",

1147 (
p‹t_nŸ_lu
 ? "port" : "lu"),

1148 
	`sg_gë_å™s_¥Ÿo_°r
(
¥Ÿo_id
, (
b
), b));

1149 i‡(
¥Ÿo_idp
)

1150 *
¥Ÿo_idp
 = 
¥Ÿo_id
;

1151 i‡(
ofÂ
)

1152 *
ofÂ
 = 
off
;

1154 
	}
}

1157 
	$disk_geomëry
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

1159 
°©us
;

1160 *
∑ge°¨t
;

1162 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 9, 
cbuf„r
, &
∑ge°¨t
);

1163 i‡(
°©us
)

1164  
°©us
;

1165 i‡(
¥efix
[0])

1166 
	`¥ötf
("%s", 
¥efix
);

1167 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

1168 
	`¥ötf
("%†modê∑gê(0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

1169 
	`¥ötf
("-----------------------------------\n");

1171 
	`ötfõld
(
∑ge°¨t
 + 2, 3, "Number of cylinders");

1172 
	`ötfõld
(
∑ge°¨t
 + 5, 1, "Number of heads");

1173 
	`ötfõld
(
∑ge°¨t
 + 6, 3, "Starting cyl. writeÖrecomp");

1174 
	`ötfõld
(
∑ge°¨t
 + 9, 3, "Starting cyl.Ñeduced current");

1175 
	`ötfõld
(
∑ge°¨t
 + 12, 2, "Device stepÑate");

1176 
	`ötfõld
(
∑ge°¨t
 + 14, 3, "Landing Zone Cylinder");

1177 
	`bôfõld
(
∑ge°¨t
 + 17, "RPL", 3, 0);

1178 
	`ötfõld
(
∑ge°¨t
 + 18, 1, "Rotational Offset");

1179 
	`ötfõld
(
∑ge°¨t
 + 20, 2, "Rotational Rate");

1180 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

1181  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

1183 
	`¥ötf
("\n");

1185 
	}
}

1188 
	$comm⁄_disc⁄√˘_ªc⁄√˘
(
m∑ge_öfo
 * 
mpi
,

1189 c⁄° * 
¥efix
)

1191 
°©us
;

1192 *
∑ge°¨t
;

1194 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 11, 
cbuf„r
, &
∑ge°¨t
);

1195 i‡(
°©us
)

1196  
°©us
;

1198 i‡(
¥efix
[0])

1199 
	`¥ötf
("%s", 
¥efix
);

1200 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

1201 
	`¥ötf
("%†modê∑gê(0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

1202 
	`¥ötf
("------------------------------------\n");

1204 
	`ötfõld
(
∑ge°¨t
 + 2, 1, "Buffer fullÑatio");

1205 
	`ötfõld
(
∑ge°¨t
 + 3, 1, "BufferÉmptyÑatio");

1206 
	`ötfõld
(
∑ge°¨t
 + 4, 2, "Bus Inactivity Limit (SAS: 100us)");

1207 
	`ötfõld
(
∑ge°¨t
 + 6, 2, "Disconnect Time Limit");

1208 
	`ötfõld
(
∑ge°¨t
 + 8, 2, "Connect Time Limit (SAS: 100us)");

1209 
	`ötfõld
(
∑ge°¨t
 + 10, 2, "Maximum Burst Size");

1210 
	`bôfõld
(
∑ge°¨t
 + 12, "EMDP", 1, 7);

1211 
	`bôfõld
(
∑ge°¨t
 + 12, "Fair Arbitration (fcp:faa,fab,fac)", 0x7, 4);

1212 
	`bôfõld
(
∑ge°¨t
 + 12, "DIMM", 1, 3);

1213 
	`bôfõld
(
∑ge°¨t
 + 12, "DTDC", 0x7, 0);

1214 
	`ötfõld
(
∑ge°¨t
 + 14, 2, "First Burst Size");

1215 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

1216  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

1218 
	`¥ötf
("\n");

1221 
	}
}

1224 
	$comm⁄_c⁄åﬁ
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

1226 
°©us
;

1227 *
∑ge°¨t
;

1229 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 21, 
cbuf„r
, &
∑ge°¨t
);

1230 i‡(
°©us
)

1231  
°©us
;

1233 i‡(
¥efix
[0])

1234 
	`¥ötf
("%s", 
¥efix
);

1235 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

1236 
	`¥ötf
("%†modê∑gê(0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

1237 
	`¥ötf
("-----------------------\n");

1239 
	`bôfõld
(
∑ge°¨t
 + 2, "TST", 0x7, 5);

1240 
	`bôfõld
(
∑ge°¨t
 + 2, "TMF_ONLY", 1, 4);

1241 
	`bôfõld
(
∑ge°¨t
 + 2, "D_SENSE", 1, 2);

1242 
	`bôfõld
(
∑ge°¨t
 + 2, "GLTSD", 1, 1);

1243 
	`bôfõld
(
∑ge°¨t
 + 2, "RLEC", 1, 0);

1244 
	`bôfõld
(
∑ge°¨t
 + 3, "Queue Algorithm Modifier", 0xf, 4);

1245 
	`bôfõld
(
∑ge°¨t
 + 3, "QErr", 0x3, 1);

1246 
	`bôfõld
(
∑ge°¨t
 + 3, "DQue [obsolete]", 1, 0);

1247 
	`bôfõld
(
∑ge°¨t
 + 4, "TAS", 1, 7);

1248 
	`bôfõld
(
∑ge°¨t
 + 4, "RAC", 1, 6);

1249 
	`bôfõld
(
∑ge°¨t
 + 4, "UA_INTLCK_CTRL", 0x3, 4);

1250 
	`bôfõld
(
∑ge°¨t
 + 4, "SWP", 1, 3);

1251 
	`bôfõld
(
∑ge°¨t
 + 4, "RAERP [obs.]", 1, 2);

1252 
	`bôfõld
(
∑ge°¨t
 + 4, "UAAERP [obs.]", 1, 1);

1253 
	`bôfõld
(
∑ge°¨t
 + 4, "EAERP [obs.]", 1, 0);

1254 
	`bôfõld
(
∑ge°¨t
 + 5, "ATO", 1, 7);

1255 
	`bôfõld
(
∑ge°¨t
 + 5, "TAS", 1, 6);

1256 
	`bôfõld
(
∑ge°¨t
 + 5, "AUTOLOAD MODE", 0x7, 0);

1257 
	`ötfõld
(
∑ge°¨t
 + 6, 2, "Ready AER Holdoff Period [obs.]");

1258 
	`ötfõld
(
∑ge°¨t
 + 8, 2, "Busy Timeout Period");

1259 
	`ötfõld
(
∑ge°¨t
 + 10, 2, "Extended self-test completionÅime");

1260 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

1261  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

1263 
	`¥ötf
("\n");

1265 
	}
}

1268 
	$comm⁄_c⁄åﬁ_exãnsi⁄
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

1270 
°©us
;

1271 *
∑ge°¨t
;

1273 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 4, 
cbuf„r
, &
∑ge°¨t
);

1274 i‡(
°©us
)

1275  
°©us
;

1277 i‡(
¥efix
[0])

1278 
	`¥ötf
("%s", 
¥efix
);

1279 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

1280 
	`¥ötf
("%†modêsub∑gê(0x%x,0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
,

1281 
mpi
->
sub∑ge
);

1282 
	`¥ötf
("--------------------------------------------\n");

1284 
	`bôfõld
(
∑ge°¨t
 + 4, "TCMOS", 1, 2);

1285 
	`bôfõld
(
∑ge°¨t
 + 4, "SCSIP", 1, 1);

1286 
	`bôfõld
(
∑ge°¨t
 + 4, "IALUAE", 1, 0);

1287 
	`bôfõld
(
∑ge°¨t
 + 5, "Initial Priority", 0xf, 0);

1289 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

1290  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

1292 
	`¥ötf
("\n");

1294 
	}
}

1297 
	$comm⁄_öf‹m©i⁄Æ
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

1299 
°©us
;

1300 *
∑ge°¨t
;

1302 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 10, 
cbuf„r
, &
∑ge°¨t
);

1303 i‡(
°©us
)

1304  
°©us
;

1306 i‡(
¥efix
[0])

1307 
	`¥ötf
("%s", 
¥efix
);

1308 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

1309 
	`¥ötf
("%†modê∑gê(0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

1310 
	`¥ötf
("-----------------------------------------\n");

1312 
	`bôfõld
(
∑ge°¨t
 + 2, "PERF", 1, 7);

1313 
	`bôfõld
(
∑ge°¨t
 + 2, "EBF", 1, 5);

1314 
	`bôfõld
(
∑ge°¨t
 + 2, "EWASC", 1, 4);

1315 
	`bôfõld
(
∑ge°¨t
 + 2, "DEXCPT", 1, 3);

1316 
	`bôfõld
(
∑ge°¨t
 + 2, "TEST", 1, 2);

1317 
	`bôfõld
(
∑ge°¨t
 + 2, "EBACKERR", 1, 1);

1318 
	`bôfõld
(
∑ge°¨t
 + 2, "LOGERR", 1, 0);

1319 
	`bôfõld
(
∑ge°¨t
 + 3, "MRIE", 0xf, 0);

1320 
	`ötfõld
(
∑ge°¨t
 + 4, 4, "Interval Timer");

1321 
	`ötfõld
(
∑ge°¨t
 + 8, 4, "Report Count");

1322 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

1323  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

1325 
	`¥ötf
("\n");

1327 
	}
}

1330 
	$disk_îr‹_ªcovîy
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

1332 
°©us
;

1333 *
∑ge°¨t
;

1335 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 14, 
cbuf„r
, &
∑ge°¨t
);

1336 i‡(
°©us
)

1337  
°©us
;

1339 i‡(
¥efix
[0])

1340 
	`¥ötf
("%s", 
¥efix
);

1341 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

1342 
	`¥ötf
("%†modê∑gê(0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

1343 
	`¥ötf
("-----------------------------------------\n");

1345 
	`bôfõld
(
∑ge°¨t
 + 2, "AWRE", 1, 7);

1346 
	`bôfõld
(
∑ge°¨t
 + 2, "ARRE", 1, 6);

1347 
	`bôfõld
(
∑ge°¨t
 + 2, "TB", 1, 5);

1348 
	`bôfõld
(
∑ge°¨t
 + 2, "RC", 1, 4);

1349 
	`bôfõld
(
∑ge°¨t
 + 2, "EER", 1, 3);

1350 
	`bôfõld
(
∑ge°¨t
 + 2, "PER", 1, 2);

1351 
	`bôfõld
(
∑ge°¨t
 + 2, "DTE", 1, 1);

1352 
	`bôfõld
(
∑ge°¨t
 + 2, "DCR", 1, 0);

1353 
	`ötfõld
(
∑ge°¨t
 + 3, 1, "Read Retry Count");

1354 
	`ötfõld
(
∑ge°¨t
 + 4, 1, "Correction Span");

1355 
	`ötfõld
(
∑ge°¨t
 + 5, 1, "Head Offset Count");

1356 
	`ötfõld
(
∑ge°¨t
 + 6, 1, "Data Strobe Offset Count");

1357 
	`ötfõld
(
∑ge°¨t
 + 8, 1, "Write Retry Count");

1358 
	`ötfõld
(
∑ge°¨t
 + 10, 2, "Recovery Time Limit (ms)");

1359 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

1360  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

1362 
	`¥ötf
("\n");

1364 
	}
}

1367 
	$cdvd_îr‹_ªcovîy
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

1369 
°©us
;

1370 *
∑ge°¨t
;

1372 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 10, 
cbuf„r
, &
∑ge°¨t
);

1373 i‡(
°©us
)

1374  
°©us
;

1376 i‡(
¥efix
[0])

1377 
	`¥ötf
("%s", 
¥efix
);

1378 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

1379 
	`¥ötf
("%†modê∑gê(0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

1380 
	`¥ötf
("------------------------------------------------\n");

1382 
	`bôfõld
(
∑ge°¨t
 + 2, "AWRE", 1, 7);

1383 
	`bôfõld
(
∑ge°¨t
 + 2, "ARRE", 1, 6);

1384 
	`bôfõld
(
∑ge°¨t
 + 2, "TB", 1, 5);

1385 
	`bôfõld
(
∑ge°¨t
 + 2, "RC", 1, 4);

1386 
	`bôfõld
(
∑ge°¨t
 + 2, "PER", 1, 2);

1387 
	`bôfõld
(
∑ge°¨t
 + 2, "DTE", 1, 1);

1388 
	`bôfõld
(
∑ge°¨t
 + 2, "DCR", 1, 0);

1389 
	`ötfõld
(
∑ge°¨t
 + 3, 1, "Read Retry Count");

1390 
	`bôfõld
(
∑ge°¨t
 + 7, "EMCDR", 3, 0);

1391 
	`ötfõld
(
∑ge°¨t
 + 8, 1, "Write Retry Count");

1392 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

1393  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

1395 
	`¥ötf
("\n");

1397 
	}
}

1400 
	$cdvd_mrw
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

1402 
°©us
;

1403 *
∑ge°¨t
;

1405 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 1, 
cbuf„r
, &
∑ge°¨t
);

1406 i‡(
°©us
)

1407  
°©us
;

1409 i‡(
¥efix
[0])

1410 
	`¥ötf
("%s", 
¥efix
);

1411 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

1412 
	`¥ötf
("%†modê∑gê(0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

1413 
	`¥ötf
("------------------------------------------------\n");

1415 
	`bôfõld
(
∑ge°¨t
 + 3, "LBA space", 1, 0);

1416 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

1417  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

1419 
	`¥ötf
("\n");

1421 
	}
}

1424 
	$disk_nŸch_∑ømëîs
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

1426 
°©us
;

1427 *
∑ge°¨t
;

1429 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 6, 
cbuf„r
, &
∑ge°¨t
);

1430 i‡(
°©us
) {

1431 
	`Ârötf
(
°dout
, "Special case: only give 6 fieldsÅo '-XR' since"

1433  
°©us
;

1436 i‡(
¥efix
[0])

1437 
	`¥ötf
("%s", 
¥efix
);

1438 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

1439 
	`¥ötf
("%†modê∑gê(0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

1440 
	`¥ötf
("-----------------------------------\n");

1442 
	`bôfõld
(
∑ge°¨t
 + 2, "Notched Drive", 1, 7);

1443 
	`bôfõld
(
∑ge°¨t
 + 2, "Logical or Physical Notch", 1, 6);

1444 
	`ötfõld
(
∑ge°¨t
 + 4, 2, "Max # ofÇotches");

1445 
	`ötfõld
(
∑ge°¨t
 + 6, 2, "Active Notch");

1446 i‡(
∑ge°¨t
[2] & 0x40) {

1447 
	`ötfõld
(
∑ge°¨t
 + 8, 4, "Starting Boundary");

1448 
	`ötfõld
(
∑ge°¨t
 + 12, 4, "Ending Boundary");

1450 
	`hexfõld
(
∑ge°¨t
 + 8, 4, "Starting Boundary");

1451 
	`hexfõld
(
∑ge°¨t
 + 12, 4, "Ending Boundary");

1454 i‡(
x_öãrÁ˚
 && !
ª∂a˚
) {

1458 i‡(1 =
mpi
->
∑ge_c⁄åﬁ
)

1459 
	`¥ötf
("0");

1461 
	`¥ötf
("0x%8.8x%8.8x", 
	`gënbyã
(
∑ge°¨t
 + 16, 4),

1462 
	`gënbyã
(
∑ge°¨t
 + 20, 4));

1465 i‡(!
x_öãrÁ˚
)

1466 
	`¥ötf
("Pages Notched %8.8x %8.8x\n",

1467 
	`gënbyã
(
∑ge°¨t
 + 16, 4), getnbyte(pagestart + 20, 4));

1468 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

1469  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

1471 
	`¥ötf
("\n");

1473 
	}
}

1476 
	$f‹m©«me
(
f‹m©
)

1478 
f‹m©
) {

1487 
	}
}

1490 
	$ªad_de„˘_li°
(
grown_⁄ly
)

1492 
i
, 
Àn
, 
ªÆÀn
, 
èbÀ
, 
k
, 
de„˘_f‹m©
;

1493 
°©us
 = 0;

1494 
hódî
 = 1;

1495 
s‹thód
 = 0;

1496 
cmd
[10];

1497 
cmd12
[12];

1498 *
df
 = 
NULL
;

1499 *
bp
 = 
NULL
;

1500 *
hóµ
 = 
NULL
;

1501 *
hód•
 = 
NULL
;

1502 
åunc
;

1503 
scsi_cmnd_io
 
sci
;

1505 i‡(
de„˘f‹m©
 =
HEAD_SORT_TOKEN
) {

1506 
de„˘f‹m©
 = 0x04;

1507 
s‹thód
 = 1;

1508 
hód•
 = (*)
	`mÆloc
((Ë* 
MAX_HEADS
);

1509 i‡(
hód•
 =
NULL
) {

1510 
	`≥º‹
("malloc failed");

1511  
°©us
;

1513 
	`mem£t
(
hód•
,0,(Ë* 
MAX_HEADS
);

1515 
èbÀ
 = 
grown_⁄ly
;Åable < 2;Åable++) {

1516 i‡(
hóµ
) {

1517 
	`‰ì
(
hóµ
);

1518 
hóµ
 = 
NULL
;

1520 
bp
 = 
cbuf„r
;

1521 
	`mem£t
(
bp
, 0, 4);

1522 
åunc
 = 0;

1523 
ªÆÀn
 = -1;

1525 
cmd
[0] = 0x37;

1526 
cmd
[1] = 0x00;

1527 
cmd
[2] = (
èbÀ
 ? 0x08 : 0x10Ë| 
de„˘f‹m©
;

1528 
cmd
[3] = 0x00;

1529 
cmd
[4] = 0x00;

1530 
cmd
[5] = 0x00;

1531 
cmd
[6] = 0x00;

1532 
cmd
[7] = 0x00;

1533 
cmd
[8] = 0x04;

1534 
cmd
[9] = 0x00;

1536 
sci
.
cmnd
 = 
cmd
;

1537 
sci
.
cmnd_Àn
 = (
cmd
);

1538 
sci
.
dx„r_dú
 = 
DXFER_FROM_DEVICE
;

1539 
sci
.
dx„r_Àn
 = 4;

1540 
sci
.
dx„Ω
 = 
bp
;

1541 
i
 = 
	`do_scsi_io
(&
sci
);

1542 i‡(
i
) {

1543 
	`Ârötf
(
°dout
, ">>> UnableÅoÑead %s defect data.\n",

1544 (
èbÀ
 ? "grown (GLIST)" : "primary (PLIST)"));

1545 
°©us
 |
i
;

1548 i‡(
åa˚_cmd
 > 1) {

1549 
	`¥ötf
(" cdbÑesponse:\n");

1550 
	`dump
(
bp
, 4);

1558 i‡(0 !
bp
[0] || (
èbÀ
 ? 0x08 : 0x10) != (bp[1] & 0xf8)) {

1559 
	`Ârötf
(
°dout
, ">>> Invalid header for %s defectÜist.\n",

1560 (
èbÀ
 ? "grown (GLIST)" : "primary (PLIST)"));

1561 
°©us
 |= 1;

1564 i‡(
hódî
) {

1565 
	`¥ötf
("Defect Lists\n"

1567 
hódî
 = 0;

1569 
Àn
 = (
bp
[2] << 8) + bp[3];

1570 i‡(
Àn
 < 0xfff8)

1571 
ªÆÀn
 = 
Àn
;

1577 
bp
 = 
cbuf„r
;

1578 
	`mem£t
(
bp
, 0, 8);

1579 
cmd12
[0] = 0xB7;

1580 
cmd12
[1] = (
èbÀ
 ? 0x08 : 0x10Ë| 
de„˘f‹m©
;

1581 
cmd12
[2] = 0x00;

1582 
cmd12
[3] = 0x00;

1583 
cmd12
[4] = 0x00;

1584 
cmd12
[5] = 0x00;

1585 
cmd12
[6] = 0x00;

1586 
cmd12
[7] = 0x00;

1587 
cmd12
[8] = 0x00;

1588 
cmd12
[9] = 0x08;

1589 
cmd12
[10] = 0x00;

1590 
cmd12
[11] = 0x00;

1592 
sci
.
cmnd
 = 
cmd12
;

1593 
sci
.
cmnd_Àn
 = (
cmd12
);

1594 
sci
.
dx„r_dú
 = 
DXFER_FROM_DEVICE
;

1595 
sci
.
dx„r_Àn
 = 8;

1596 
sci
.
dx„Ω
 = 
bp
;

1597 
i
 = 
	`do_scsi_io
(&
sci
);

1598 i‡(
i
) {

1599 i‡(
åa˚_cmd
) {

1600 
	`Ârötf
(
°dout
, ">>> No 12 byte command support, "

1604 
åyãnbyã
;

1606 i‡(
åa˚_cmd
 > 1) {

1607 
	`¥ötf
(" cdbÑesponse:\n");

1608 
	`dump
(
bp
, 8);

1616 i‡(0 !
bp
[0] || 0 != bp[2] || 0 != bp[3] ||

1617 ((
èbÀ
 ? 0x08 : 0x10Ë!(
bp
[1] & 0xf8))) {

1618 i‡(
åa˚_cmd
)

1619 
	`Ârötf
(
°dout
,

1621 (
èbÀ
 ? "grown (GLIST)" : "primary (PLIST)"));

1622 
åyãnbyã
;

1624 
Àn
 = (
bp
[4] << 24) + (bp[5] << 16) + (bp[6] << 8) + bp[7];

1625 
ªÆÀn
 = 
Àn
;

1628 i‡(
Àn
 > 0) {

1629 
k
 = 
Àn
 + 8;

1630 i‡(
k
 > ()(
cbuf„r
)) {

1631 
hóµ
 = (*)
	`mÆloc
(
k
);

1633 i‡(
Àn
 > 0x80000 && 
NULL
 =
hóµ
) {

1634 
Àn
 = 0x80000;

1635 
k
 = 
Àn
 + 8;

1636 
hóµ
 = (*)
	`mÆloc
(
k
);

1638 i‡(
hóµ
 !
NULL
)

1639 
bp
 = 
hóµ
;

1641 i‡(
Àn
 > 0xfff0 && 
hóµ
 !
NULL
) {

1642 
cmd12
[0] = 0xB7;

1643 
cmd12
[1] = (
èbÀ
 ? 0x08 : 0x10Ë| 
de„˘f‹m©
;

1645 
cmd12
[2] = 0x00;

1646 
cmd12
[3] = 0x00;

1647 
cmd12
[4] = 0x00;

1648 
cmd12
[5] = 0x00;

1649 
cmd12
[6] = 0x00;

1650 
cmd12
[7] = (
k
 >> 16) & 0xff;

1651 
cmd12
[8] = (
k
 >> 8) & 0xff;

1652 
cmd12
[9] = (
k
 & 0xff);

1653 
cmd12
[10] = 0x00;

1654 
cmd12
[11] = 0x00;

1656 
sci
.
cmnd
 = 
cmd12
;

1657 
sci
.
cmnd_Àn
 = (
cmd12
);

1658 
sci
.
dx„r_dú
 = 
DXFER_FROM_DEVICE
;

1659 
sci
.
dx„r_Àn
 = 
k
;

1660 
sci
.
dx„Ω
 = 
bp
;

1661 
i
 = 
	`do_scsi_io
(&
sci
);

1662 i‡(
i
)

1663 
åyãnbyã
;

1664 i‡(
åa˚_cmd
 > 1) {

1665 
	`¥ötf
(" cdbÑesponse:\n");

1666 
	`dump
(
bp
, 8);

1668 
ªÆÀn
 = (
bp
[4] << 24) + (bp[5] << 16) + (bp[6] << 8) +

1669 
bp
[7];

1670 i‡(
ªÆÀn
 > 
Àn
) {

1671 
åunc
 = 1;

1673 
df
 = (*Ë(
bp
 + 8);

1676 
åyãnbyã
:

1677 i‡(
Àn
 > 0xfff8) {

1678 
Àn
 = 0xfff8;

1679 
åunc
 = 1;

1681 
k
 = 
Àn
 + 4;

1682 i‡(
k
 > ()(
cbuf„r
Ë&& 
NULL
 =
hóµ
) {

1683 
hóµ
 = (*)
	`mÆloc
(
k
);

1684 i‡(
hóµ
 !
NULL
)

1685 
bp
 = 
hóµ
;

1687 i‡(
k
 > ()(
cbuf„r
Ë&& 
NULL
 =
hóµ
) {

1688 
bp
 = 
cbuf„r
;

1689 
k
 = (
cbuf„r
);

1690 
Àn
 = 
k
 - 4;

1691 
åunc
 = 1;

1693 
cmd
[0] = 0x37;

1694 
cmd
[1] = 0x00;

1695 
cmd
[2] = (
èbÀ
 ? 0x08 : 0x10Ë| 
de„˘f‹m©
;

1697 
cmd
[3] = 0x00;

1698 
cmd
[4] = 0x00;

1699 
cmd
[5] = 0x00;

1700 
cmd
[6] = 0x00;

1701 
cmd
[7] = (
k
 >> 8);

1702 
cmd
[8] = (
k
 & 0xff);

1703 
cmd
[9] = 0x00;

1705 
sci
.
cmnd
 = 
cmd
;

1706 
sci
.
cmnd_Àn
 = (
cmd
);

1707 
sci
.
dx„r_dú
 = 
DXFER_FROM_DEVICE
;

1708 
sci
.
dx„r_Àn
 = 
k
;

1709 
sci
.
dx„Ω
 = 
bp
;

1710 
i
 = 
	`do_scsi_io
(&
sci
);

1711 
df
 = (*Ë(
bp
 + 4);

1714 i‡(
i
) {

1715 
	`Ârötf
(
°dout
, ">>> UnableÅoÑead %s defect data.\n",

1716 (
èbÀ
 ? "grown (GLIST)" : "primary (PLIST)"));

1717 
°©us
 |
i
;

1721 i‡(
èbÀ
 && !
°©us
 && !
s‹thód
)

1722 
	`¥ötf
("\n");

1723 
de„˘_f‹m©
 = (
bp
[1] & 0x7);

1724 i‡(-1 =
ªÆÀn
) {

1725 
	`¥ötf
("atÜeast ");

1726 
ªÆÀn
 = 
Àn
;

1728 
	`¥ötf
("%dÉntries (%d bytes) in %sÅable.\n",

1729 
ªÆÀn
 / ((0 =
de„˘_f‹m©
) ? 4 : 8),Ñeallen,

1730 
èbÀ
 ? "grown (GLIST)" : "primary (PLIST)");

1731 i‡(!
s‹thód
)

1732 
	`¥ötf
("F‹m© (%xËis: %s\n", 
de„˘_f‹m©
,

1733 
	`f‹m©«me
(
de„˘_f‹m©
));

1734 
i
 = 0;

1735 
de„˘_f‹m©
) {

1737 
Àn
 > 0) {

1738 
	`¢¥ötf
((*)
cbuf„r1
, 40, "%6d:%3u:%8d",

1739 
	`gënbyã
(
df
, 3), df[3], getnbyte(df + 4, 4));

1740 i‡(
s‹thód
 == 0)

1741 
	`¥ötf
("%19s", (*)
cbuf„r1
);

1743 i‡(
df
[3] < 
MAX_HEADS
Ë
hód•
[df[3]]++;

1744 
Àn
 -= 8;

1745 
df
 += 8;

1746 
i
++;

1747 i‡(
i
 >4 && !
s‹thód
) {

1748 
	`¥ötf
("\n");

1749 
i
 = 0;

1751 i‡(!
s‹thód
Ë
	`¥ötf
("|");

1754 
Àn
 > 0) {

1755 
	`¢¥ötf
((*)
cbuf„r1
, 40, "%6d:%2u:%5d",

1756 
	`gënbyã
(
df
, 3),

1757 
df
[3], 
	`gënbyã
(df + 4, 4));

1758 i‡(
s‹thód
 == 0)

1759 
	`¥ötf
("%15s", (*)
cbuf„r1
);

1761 i‡(
df
[3] < 
MAX_HEADS
Ë
hód•
[df[3]]++;

1762 
Àn
 -= 8;

1763 
df
 += 8;

1764 
i
++;

1765 i‡(
i
 >5 && !
s‹thód
) {

1766 
	`¥ötf
("\n");

1767 
i
 = 0;

1769 i‡(!
s‹thód
Ë
	`¥ötf
("|");

1772 
Àn
 > 0) {

1773 
	`¥ötf
("%10d", 
	`gënbyã
(
df
, 4));

1774 
Àn
 -= 4;

1775 
df
 += 4;

1776 
i
++;

1777 i‡(
i
 >= 7) {

1778 
	`¥ötf
("\n");

1779 
i
 = 0;

1782 
	`¥ötf
("|");

1785 
Àn
 > 0) {

1786 
	`¥ötf
("%15"
PRId64
, 
	`gënbyã_Œ
(
df
, 8));

1787 
Àn
 -= 8;

1788 
df
 += 8;

1789 
i
++;

1790 i‡(
i
 >= 5) {

1791 
	`¥ötf
("\n");

1792 
i
 = 0;

1795 
	`¥ötf
("|");

1799 
	`¥ötf
("unknow¿de„˘Üi° f‹m©: %d\n", 
de„˘_f‹m©
);

1802 i‡(
i
 && !
s‹thód
)

1803 
	`¥ötf
("\n");

1805 i‡(
åunc
)

1806 
	`¥ötf
("[truncated]\n");

1808 i‡(
hóµ
) {

1809 
	`‰ì
(
hóµ
);

1810 
hóµ
 = 
NULL
;

1812 i‡(
s‹thód
) {

1813 
	`¥ötf
("Format is: [head:#Éntries forÅhis head inÜist]\n\n");

1814 
i
=0; i<
MAX_HEADS
; i++) {

1815 i‡(
hód•
[
i
] > 0) {

1816 
	`¥ötf
("%3d: %u\n", 
i
, 
hód•
[i]);

1820 
	`¥ötf
("\n");

1821  
°©us
;

1822 
	}
}

1825 
	$disk_ˇche
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

1827 
°©us
;

1828 *
∑ge°¨t
;

1830 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 21, 
cbuf„r
, &
∑ge°¨t
);

1831 i‡(
°©us
)

1832  
°©us
;

1834 i‡(
¥efix
[0])

1835 
	`¥ötf
("%s", 
¥efix
);

1836 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

1837 
	`¥ötf
("%†modê∑gê(0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

1838 
	`¥ötf
("-----------------------\n");

1840 
	`bôfõld
(
∑ge°¨t
 + 2, "Initiator Control", 1, 7);

1841 
	`bôfõld
(
∑ge°¨t
 + 2, "ABPF", 1, 6);

1842 
	`bôfõld
(
∑ge°¨t
 + 2, "CAP", 1, 5);

1843 
	`bôfõld
(
∑ge°¨t
 + 2, "DISC", 1, 4);

1844 
	`bôfõld
(
∑ge°¨t
 + 2, "SIZE", 1, 3);

1845 
	`bôfõld
(
∑ge°¨t
 + 2, "Write Cache Enabled", 1, 2);

1846 
	`bôfõld
(
∑ge°¨t
 + 2, "MF", 1, 1);

1847 
	`bôfõld
(
∑ge°¨t
 + 2, "Read Cache Disabled", 1, 0);

1848 
	`bôfõld
(
∑ge°¨t
 + 3, "Demand Read Retention Priority", 0xf, 4);

1849 
	`bôfõld
(
∑ge°¨t
 + 3, "Demand Write Retention Priority", 0xf, 0);

1850 
	`ötfõld
(
∑ge°¨t
 + 4, 2, "Disable Pre-fetch Transfer Length");

1851 
	`ötfõld
(
∑ge°¨t
 + 6, 2, "Minimum Pre-fetch");

1852 
	`ötfõld
(
∑ge°¨t
 + 8, 2, "Maximum Pre-fetch");

1853 
	`ötfõld
(
∑ge°¨t
 + 10, 2, "Maximum Pre-fetch Ceiling");

1854 
	`bôfõld
(
∑ge°¨t
 + 12, "FSW", 1, 7);

1855 
	`bôfõld
(
∑ge°¨t
 + 12, "LBCSS", 1, 6);

1856 
	`bôfõld
(
∑ge°¨t
 + 12, "DRA", 1, 5);

1857 
	`bôfõld
(
∑ge°¨t
 + 12, "NV_DIS", 1, 0);

1858 
	`ötfõld
(
∑ge°¨t
 + 13, 1, "Number of Cache Segments");

1859 
	`ötfõld
(
∑ge°¨t
 + 14, 2, "Cache Segment size");

1860 
	`ötfõld
(
∑ge°¨t
 + 17, 3, "Non-Cache Segment size");

1861 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

1862  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

1864 
	`¥ötf
("\n");

1866 
	}
}

1869 
	$disk_f‹m©
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

1871 
°©us
;

1872 *
∑ge°¨t
;

1874 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 13, 
cbuf„r
, &
∑ge°¨t
);

1875 i‡(
°©us
)

1876  
°©us
;

1878 i‡(
¥efix
[0])

1879 
	`¥ötf
("%s", 
¥efix
);

1880 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

1881 
	`¥ötf
("%†modê∑gê(0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

1882 
	`¥ötf
("-----------------------------\n");

1884 
	`ötfõld
(
∑ge°¨t
 + 2, 2, "TracksÖer Zone");

1885 
	`ötfõld
(
∑ge°¨t
 + 4, 2, "Alternate sectorsÖer zone");

1886 
	`ötfõld
(
∑ge°¨t
 + 6, 2, "AlternateÅracksÖer zone");

1887 
	`ötfõld
(
∑ge°¨t
 + 8, 2, "AlternateÅracksÖerÜu");

1888 
	`ötfõld
(
∑ge°¨t
 + 10, 2, "SectorsÖerÅrack");

1889 
	`ötfõld
(
∑ge°¨t
 + 12, 2, "Data bytesÖerÖhysical sector");

1890 
	`ötfõld
(
∑ge°¨t
 + 14, 2, "Interleave");

1891 
	`ötfõld
(
∑ge°¨t
 + 16, 2, "Track skew factor");

1892 
	`ötfõld
(
∑ge°¨t
 + 18, 2, "Cylinder skew factor");

1893 
	`bôfõld
(
∑ge°¨t
 + 20, "Supports Soft Sectoring", 1, 7);

1894 
	`bôfõld
(
∑ge°¨t
 + 20, "Supports Hard Sectoring", 1, 6);

1895 
	`bôfõld
(
∑ge°¨t
 + 20, "Removable Medium", 1, 5);

1896 
	`bôfõld
(
∑ge°¨t
 + 20, "Surface", 1, 4);

1897 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

1898  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

1900 
	`¥ötf
("\n");

1903 
	}
}

1906 
	$disk_vîify_îr‹_ªcovîy
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

1908 
°©us
;

1909 *
∑ge°¨t
;

1911 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 7, 
cbuf„r
, &
∑ge°¨t
);

1912 i‡(
°©us
)

1913  
°©us
;

1915 i‡(
¥efix
[0])

1916 
	`¥ötf
("%s", 
¥efix
);

1917 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

1918 
	`¥ötf
("%†modê∑gê(0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

1919 
	`¥ötf
("-------------------------------------\n");

1921 
	`bôfõld
(
∑ge°¨t
 + 2, "EER", 1, 3);

1922 
	`bôfõld
(
∑ge°¨t
 + 2, "PER", 1, 2);

1923 
	`bôfõld
(
∑ge°¨t
 + 2, "DTE", 1, 1);

1924 
	`bôfõld
(
∑ge°¨t
 + 2, "DCR", 1, 0);

1925 
	`ötfõld
(
∑ge°¨t
 + 3, 1, "Verify Retry Count");

1926 
	`ötfõld
(
∑ge°¨t
 + 4, 1, "Verify Correction Span (bits)");

1927 
	`ötfõld
(
∑ge°¨t
 + 10, 2, "Verify Recovery Time Limit (ms)");

1929 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

1930  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

1932 
	`¥ötf
("\n");

1934 
	}
}

1938 
	$≥rùhîÆ_devi˚_∑ge
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

1940 *
idíts
[] =

1948 
°©us
;

1949 
idít
;

1950 *
∑ge°¨t
;

1951 *
«me
;

1953 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 2, 
cbuf„r
, &
∑ge°¨t
);

1954 i‡(
°©us
)

1955  
°©us
;

1957 i‡(
¥efix
[0])

1958 
	`¥ötf
("%s", 
¥efix
);

1959 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

1960 
	`¥ötf
("%†modê∑gê(0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

1961 
	`¥ötf
("---------------------------------\n");

1965 
	`dump
(
∑ge°¨t
, 20);

1966 
∑ge°¨t
[1] += 2;

1967 
cbuf„r
[8] += 2;

1970 
idít
 = 
	`gënbyã
(
∑ge°¨t
 + 2, 2);

1971 i‡(
idít
 < ((
idíts
) / (*)))

1972 
«me
 = 
idíts
[
idít
];

1973 i‡(
idít
 < 0x8000)

1974 
«me
 = "Reserved";

1976 
«me
 = "Vendor Specific";

1978 #ifde‡
DPG_CHECK_THIS_OUT


1979 
bdÀn
 = 
∑ge°¨t
[1] - 6;

1980 i‡(
bdÀn
 < 0)

1981 
bdÀn
 = 0;

1983 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 2, 
cbuf„r
, &
bdÀn
,

1984 &
∑ge°¨t
);

1985 i‡(
°©us
)

1986  
°©us
;

1989 
	`hexfõld
(
∑ge°¨t
 + 2, 2, "Interface Identifier");

1990 i‡(!
x_öãrÁ˚
) {

1991 
idít
 = 0; ident < 35; ident++)

1992 
	`putch¨
(' ');

1993 
	`puts
(
«me
);

1995 
	`hexd©afõld
(
∑ge°¨t
 + 8, 
bdÀn
, "Vendor Specific Data");

1998 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

1999  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

2001 
	`¥ötf
("\n");

2002 i‡(
x_öãrÁ˚
)

2003 
	`puts
(
«me
);

2005 
	}
}

2009 
	$comm⁄_powî_c⁄dôi⁄
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2011 
°©us
;

2012 *
∑ge°¨t
;

2014 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 4, 
cbuf„r
, &
∑ge°¨t
);

2015 i‡(
°©us
)

2016  
°©us
;

2018 i‡(
¥efix
[0])

2019 
	`¥ötf
("%s", 
¥efix
);

2020 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

2021 
	`¥ötf
("%†modê∑gê(0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

2022 
	`¥ötf
("--------------------------------\n");

2024 
	`bôfõld
(
∑ge°¨t
 + 3, "Idle", 1, 1);

2025 
	`bôfõld
(
∑ge°¨t
 + 3, "Standby", 1, 0);

2026 
	`ötfõld
(
∑ge°¨t
 + 4, 4, "Idle Condition counter (100ms)");

2027 
	`ötfõld
(
∑ge°¨t
 + 8, 4, "Standby Condition counter (100ms)");

2029 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

2030  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

2032 
	`¥ötf
("\n");

2034 
	}
}

2037 
	$disk_x‹_c⁄åﬁ
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2039 
°©us
;

2040 *
∑ge°¨t
;

2042 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 5, 
cbuf„r
, &
∑ge°¨t
);

2043 i‡(
°©us
)

2044  
°©us
;

2046 i‡(
¥efix
[0])

2047 
	`¥ötf
("%s", 
¥efix
);

2048 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

2049 
	`¥ötf
("%†modê∑gê(0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

2050 
	`¥ötf
("--------------------------------\n");

2052 
	`bôfõld
(
∑ge°¨t
 + 2, "XORDS", 1, 1);

2053 
	`ötfõld
(
∑ge°¨t
 + 4, 4, "Maximum XOR write size");

2054 
	`ötfõld
(
∑ge°¨t
 + 12, 4, "MaximumÑegenerate size");

2055 
	`ötfõld
(
∑ge°¨t
 + 16, 4, "MaximumÑebuildÅransfer size");

2056 
	`ötfõld
(
∑ge°¨t
 + 22, 2, "Rebuild delay");

2058 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

2059  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

2061 
	`¥ötf
("\n");

2063 
	}
}

2066 
	$disk_background
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2068 
°©us
;

2069 *
∑ge°¨t
;

2071 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 4, 
cbuf„r
, &
∑ge°¨t
);

2072 i‡(
°©us
)

2073  
°©us
;

2075 i‡(
¥efix
[0])

2076 
	`¥ötf
("%s", 
¥efix
);

2077 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

2078 
	`¥ötf
("%†modêsub∑gê(0x%x,0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
,

2079 
mpi
->
sub∑ge
);

2080 
	`¥ötf
("--------------------------------------------\n");

2082 
	`bôfõld
(
∑ge°¨t
 + 4, "Enable background medium scan", 1, 0);

2083 
	`bôfõld
(
∑ge°¨t
 + 5, "EnableÖre-scan", 1, 0);

2084 
	`ötfõld
(
∑ge°¨t
 + 6, 2, "BMS intervalÅime (hour)");

2085 
	`ötfõld
(
∑ge°¨t
 + 8, 2, "Pre-scanÅimeout value (hour)");

2087 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

2088  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

2090 
	`¥ötf
("\n");

2092 
	}
}

2095 
	$›tiˇl_mem‹y
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2097 
°©us
;

2098 *
∑ge°¨t
;

2100 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 1, 
cbuf„r
, &
∑ge°¨t
);

2101 i‡(
°©us
)

2102  
°©us
;

2104 i‡(
¥efix
[0])

2105 
	`¥ötf
("%s", 
¥efix
);

2106 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

2107 
	`¥ötf
("%†modê∑gê(0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

2108 
	`¥ötf
("--------------------------------\n");

2110 
	`bôfõld
(
∑ge°¨t
 + 2, "RUBR", 1, 0);

2112 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

2113  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

2115 
	`¥ötf
("\n");

2117 
	}
}

2120 
	$cdvd_wrôe_∑øm
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2122 
°©us
;

2123 *
∑ge°¨t
;

2125 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 20, 
cbuf„r
, &
∑ge°¨t
);

2126 i‡(
°©us
)

2127  
°©us
;

2129 i‡(
¥efix
[0])

2130 
	`¥ötf
("%s", 
¥efix
);

2131 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

2132 
	`¥ötf
("%†modê∑gê(0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

2133 
	`¥ötf
("--------------------------------\n");

2135 
	`bôfõld
(
∑ge°¨t
 + 2, "BUFE", 1, 6);

2136 
	`bôfõld
(
∑ge°¨t
 + 2, "LS_V", 1, 5);

2137 
	`bôfõld
(
∑ge°¨t
 + 2, "Test Write", 1, 4);

2138 
	`bôfõld
(
∑ge°¨t
 + 2, "Write Type", 0xf, 0);

2139 
	`bôfõld
(
∑ge°¨t
 + 3, "MultiSession", 3, 6);

2140 
	`bôfõld
(
∑ge°¨t
 + 3, "FP", 1, 5);

2141 
	`bôfõld
(
∑ge°¨t
 + 3, "Copy", 1, 4);

2142 
	`bôfõld
(
∑ge°¨t
 + 3, "Track Mode", 0xf, 0);

2143 
	`bôfõld
(
∑ge°¨t
 + 4, "Data BlockÅype", 0xf, 0);

2144 
	`ötfõld
(
∑ge°¨t
 + 5, 1, "Link size");

2145 
	`bôfõld
(
∑ge°¨t
 + 7, "Initiatorápp. code", 0x3f, 0);

2146 
	`ötfõld
(
∑ge°¨t
 + 8, 1, "Session Format");

2147 
	`ötfõld
(
∑ge°¨t
 + 10, 4, "Packet size");

2148 
	`ötfõld
(
∑ge°¨t
 + 14, 2, "Audio Pause Length");

2149 
	`hexd©afõld
(
∑ge°¨t
 + 16, 16, "Media CatalogÇumber");

2150 
	`hexd©afõld
(
∑ge°¨t
 + 32, 16, "Int. standardÑecording code");

2151 
	`hexd©afõld
(
∑ge°¨t
 + 48, 1, "Subheader byte 1");

2152 
	`hexd©afõld
(
∑ge°¨t
 + 49, 1, "Subheader byte 2");

2153 
	`hexd©afõld
(
∑ge°¨t
 + 50, 1, "Subheader byte 3");

2154 
	`hexd©afõld
(
∑ge°¨t
 + 51, 1, "Subheader byte 4");

2156 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

2157  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

2159 
	`¥ötf
("\n");

2161 
	}
}

2164 
	$cdvd_audio_c⁄åﬁ
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2166 
°©us
;

2167 *
∑ge°¨t
;

2169 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 10, 
cbuf„r
, &
∑ge°¨t
);

2170 i‡(
°©us
)

2171  
°©us
;

2173 i‡(
¥efix
[0])

2174 
	`¥ötf
("%s", 
¥efix
);

2175 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

2176 
	`¥ötf
("%†modê∑gê(0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

2177 
	`¥ötf
("--------------------------------\n");

2179 
	`bôfõld
(
∑ge°¨t
 + 2, "IMMED", 1, 2);

2180 
	`bôfõld
(
∑ge°¨t
 + 2, "SOTC", 1, 1);

2181 
	`bôfõld
(
∑ge°¨t
 + 8, "CDDA outÖort 0, channel select", 0xf, 0);

2182 
	`ötfõld
(
∑ge°¨t
 + 9, 1, "ChannelÖort 0 volume");

2183 
	`bôfõld
(
∑ge°¨t
 + 10, "CDDA outÖort 1, channel select", 0xf, 0);

2184 
	`ötfõld
(
∑ge°¨t
 + 11, 1, "ChannelÖort 1 volume");

2185 
	`bôfõld
(
∑ge°¨t
 + 12, "CDDA outÖort 2, channel select", 0xf, 0);

2186 
	`ötfõld
(
∑ge°¨t
 + 13, 1, "ChannelÖort 2 volume");

2187 
	`bôfõld
(
∑ge°¨t
 + 14, "CDDA outÖort 3, channel select", 0xf, 0);

2188 
	`ötfõld
(
∑ge°¨t
 + 15, 1, "ChannelÖort 3 volume");

2190 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

2191  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

2193 
	`¥ötf
("\n");

2195 
	}
}

2198 
	$cdvd_timeout
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2200 
°©us
;

2201 *
∑ge°¨t
;

2203 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 6, 
cbuf„r
, &
∑ge°¨t
);

2204 i‡(
°©us
)

2205  
°©us
;

2207 i‡(
¥efix
[0])

2208 
	`¥ötf
("%s", 
¥efix
);

2209 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

2210 
	`¥ötf
("%†modê∑gê(0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

2211 
	`¥ötf
("-----------------------------------\n");

2213 
	`bôfõld
(
∑ge°¨t
 + 4, "G3Enable", 1, 3);

2214 
	`bôfõld
(
∑ge°¨t
 + 4, "TMOE", 1, 2);

2215 
	`bôfõld
(
∑ge°¨t
 + 4, "DISP", 1, 1);

2216 
	`bôfõld
(
∑ge°¨t
 + 4, "SWPP", 1, 0);

2217 
	`ötfõld
(
∑ge°¨t
 + 6, 2, "Group 1 minimumÅime-out");

2218 
	`ötfõld
(
∑ge°¨t
 + 8, 2, "Group 2 minimumÅime-out");

2220 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

2221  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

2223 
	`¥ötf
("\n");

2225 
	}
}

2228 
	$cdvd_devi˚_∑øm
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2230 
°©us
;

2231 *
∑ge°¨t
;

2233 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 3, 
cbuf„r
, &
∑ge°¨t
);

2234 i‡(
°©us
)

2235  
°©us
;

2237 i‡(
¥efix
[0])

2238 
	`¥ötf
("%s", 
¥efix
);

2239 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

2240 
	`¥ötf
("%†modê∑gê(0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

2241 
	`¥ötf
("------------------------------------\n");

2243 
	`bôfõld
(
∑ge°¨t
 + 3, "InactivityÅimer multiplier", 0xf, 0);

2244 
	`ötfõld
(
∑ge°¨t
 + 4, 2, "MSF-S unitsÖer MSF_M unit");

2245 
	`ötfõld
(
∑ge°¨t
 + 6, 2, "MSF-F unitsÖer MSF_S unit");

2247 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

2248  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

2250 
	`¥ötf
("\n");

2252 
	}
}

2258 
	$cdvd_„©uª
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2260 
°©us
;

2261 *
∑ge°¨t
;

2263 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 12, 
cbuf„r
, &
∑ge°¨t
);

2264 i‡(
°©us
)

2265  
°©us
;

2267 i‡(
¥efix
[0])

2268 
	`¥ötf
("%s", 
¥efix
);

2269 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

2270 
	`¥ötf
("%†modê∑gê(0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

2271 
	`¥ötf
("----------------------------------------------\n");

2273 
	`ötfõld
(
∑ge°¨t
 + 2, 2, "DVD feature set");

2274 
	`ötfõld
(
∑ge°¨t
 + 4, 2, "CDáudio");

2275 
	`ötfõld
(
∑ge°¨t
 + 6, 2, "Embedded changer");

2276 
	`ötfõld
(
∑ge°¨t
 + 8, 2, "Packet SMART");

2277 
	`ötfõld
(
∑ge°¨t
 + 10, 2, "PersistentÖrevent(MESN)");

2278 
	`ötfõld
(
∑ge°¨t
 + 12, 2, "Event statusÇotification");

2279 
	`ötfõld
(
∑ge°¨t
 + 14, 2, "Digital output");

2280 
	`ötfõld
(
∑ge°¨t
 + 16, 2, "CD sequentialÑecordable");

2281 
	`ötfõld
(
∑ge°¨t
 + 18, 2, "DVD sequentialÑecordable");

2282 
	`ötfõld
(
∑ge°¨t
 + 20, 2, "RandomÑecordable");

2283 
	`ötfõld
(
∑ge°¨t
 + 22, 2, "Key management");

2284 
	`ötfõld
(
∑ge°¨t
 + 24, 2, "PartialÑecorded CD mediaÑead");

2286 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

2287  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

2289 
	`¥ötf
("\n");

2291 
	}
}

2294 
	$cdvd_mm_ˇ∑b
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2296 
°©us
;

2297 *
∑ge°¨t
;

2299 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 49, 
cbuf„r
, &
∑ge°¨t
);

2300 i‡(
°©us
)

2301  
°©us
;

2303 i‡(
¥efix
[0])

2304 
	`¥ötf
("%s", 
¥efix
);

2305 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

2306 
	`¥ötf
("%†modê∑gê(0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

2307 
	`¥ötf
("----------------------------------------------------\n");

2309 
	`bôfõld
(
∑ge°¨t
 + 2, "DVD-RAMÑead", 1, 5);

2310 
	`bôfõld
(
∑ge°¨t
 + 2, "DVD-RÑead", 1, 4);

2311 
	`bôfõld
(
∑ge°¨t
 + 2, "DVD-ROMÑead", 1, 3);

2312 
	`bôfõld
(
∑ge°¨t
 + 2, "Method 2", 1, 2);

2313 
	`bôfõld
(
∑ge°¨t
 + 2, "CD-RWÑead", 1, 1);

2314 
	`bôfõld
(
∑ge°¨t
 + 2, "CD-RÑead", 1, 0);

2315 
	`bôfõld
(
∑ge°¨t
 + 3, "DVD-RAM write", 1, 5);

2316 
	`bôfõld
(
∑ge°¨t
 + 3, "DVD-R write", 1, 4);

2317 
	`bôfõld
(
∑ge°¨t
 + 3, "DVD-ROM write", 1, 3);

2318 
	`bôfõld
(
∑ge°¨t
 + 3, "Test Write", 1, 2);

2319 
	`bôfõld
(
∑ge°¨t
 + 3, "CD-RW write", 1, 1);

2320 
	`bôfõld
(
∑ge°¨t
 + 3, "CD-R write", 1, 0);

2321 
	`bôfõld
(
∑ge°¨t
 + 4, "BUF", 1, 7);

2322 
	`bôfõld
(
∑ge°¨t
 + 4, "MultiSession", 1, 6);

2323 
	`bôfõld
(
∑ge°¨t
 + 4, "Mode 2 Form 2", 1, 5);

2324 
	`bôfõld
(
∑ge°¨t
 + 4, "Mode 2 Form 1", 1, 4);

2325 
	`bôfõld
(
∑ge°¨t
 + 4, "DigitalÖort (2)", 1, 3);

2326 
	`bôfõld
(
∑ge°¨t
 + 4, "DigitalÖort (1)", 1, 2);

2327 
	`bôfõld
(
∑ge°¨t
 + 4, "Composite", 1, 1);

2328 
	`bôfõld
(
∑ge°¨t
 + 4, "AudioÖlay", 1, 0);

2329 
	`bôfõld
(
∑ge°¨t
 + 5, "Read bar code", 1, 7);

2330 
	`bôfõld
(
∑ge°¨t
 + 5, "UPC", 1, 6);

2331 
	`bôfõld
(
∑ge°¨t
 + 5, "ISRC", 1, 5);

2332 
	`bôfõld
(
∑ge°¨t
 + 5, "C2Öointers supported", 1, 4);

2333 
	`bôfõld
(
∑ge°¨t
 + 5, "R-W de-interleaved & corrected", 1, 3);

2334 
	`bôfõld
(
∑ge°¨t
 + 5, "R-W supported", 1, 2);

2335 
	`bôfõld
(
∑ge°¨t
 + 5, "CD-DA stream isáccurate", 1, 1);

2336 
	`bôfõld
(
∑ge°¨t
 + 5, "CD-DA commands supported", 1, 0);

2337 
	`bôfõld
(
∑ge°¨t
 + 6, "Loading mechanismÅype", 7, 5);

2338 
	`bôfõld
(
∑ge°¨t
 + 6, "Eject (individual or magazine)", 1, 3);

2339 
	`bôfõld
(
∑ge°¨t
 + 6, "Prevent jumper", 1, 2);

2340 
	`bôfõld
(
∑ge°¨t
 + 6, "Lock state", 1, 1);

2341 
	`bôfõld
(
∑ge°¨t
 + 6, "Lock", 1, 0);

2342 
	`bôfõld
(
∑ge°¨t
 + 7, "R-W inÜead-in", 1, 5);

2343 
	`bôfõld
(
∑ge°¨t
 + 7, "Side change capable", 1, 4);

2344 
	`bôfõld
(
∑ge°¨t
 + 7, "S/W slot selection", 1, 3);

2345 
	`bôfõld
(
∑ge°¨t
 + 7, "Changer supports discÖresent", 1, 2);

2346 
	`bôfõld
(
∑ge°¨t
 + 7, "Separate channel mute", 1, 1);

2347 
	`bôfõld
(
∑ge°¨t
 + 7, "Separate volumeÜevels", 1, 0);

2348 
	`ötfõld
(
∑ge°¨t
 + 10, 2, "number of volumeÜevel supported");

2349 
	`ötfõld
(
∑ge°¨t
 + 12, 2, "Buffer size supported");

2350 
	`bôfõld
(
∑ge°¨t
 + 17, "Length", 3, 4);

2351 
	`bôfõld
(
∑ge°¨t
 + 17, "LSBF", 1, 3);

2352 
	`bôfõld
(
∑ge°¨t
 + 17, "RCK", 1, 2);

2353 
	`bôfõld
(
∑ge°¨t
 + 17, "BCKF", 1, 1);

2354 
	`ötfõld
(
∑ge°¨t
 + 22, 2, "Copy managementÑevision supported");

2355 
	`bôfõld
(
∑ge°¨t
 + 27, "Rotation control selected", 3, 0);

2356 
	`ötfõld
(
∑ge°¨t
 + 28, 2, "Current write speed selected");

2357 
	`ötfõld
(
∑ge°¨t
 + 30, 2, "# ofÜu speedÖerformanceÅables");

2359 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

2360  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

2362 
	`¥ötf
("\n");

2364 
	}
}

2367 
	$cdvd_ˇche
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2369 
°©us
;

2370 *
∑ge°¨t
;

2372 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 2, 
cbuf„r
, &
∑ge°¨t
);

2373 i‡(
°©us
)

2374  
°©us
;

2376 i‡(
¥efix
[0])

2377 
	`¥ötf
("%s", 
¥efix
);

2378 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

2379 
	`¥ötf
("%†modê∑gê(0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

2380 
	`¥ötf
("-----------------------\n");

2382 
	`bôfõld
(
∑ge°¨t
 + 2, "Write Cache Enabled", 1, 2);

2383 
	`bôfõld
(
∑ge°¨t
 + 2, "Read Cache Disabled", 1, 0);

2384 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

2385  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

2387 
	`¥ötf
("\n");

2389 
	}
}

2392 
	$è≥_d©a_com¥essi⁄
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2394 
°©us
;

2395 *
∑ge°¨t
;

2397 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 6, 
cbuf„r
, &
∑ge°¨t
);

2398 i‡(
°©us
)

2399  
°©us
;

2401 i‡(
¥efix
[0])

2402 
	`¥ötf
("%s", 
¥efix
);

2403 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

2404 
	`¥ötf
("%†modê∑gê(0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

2405 
	`¥ötf
("----------------------------------------------------\n");

2407 
	`bôfõld
(
∑ge°¨t
 + 2, "DCE", 1, 7);

2408 
	`bôfõld
(
∑ge°¨t
 + 2, "DCC", 1, 6);

2409 
	`bôfõld
(
∑ge°¨t
 + 3, "DDE", 1, 7);

2410 
	`bôfõld
(
∑ge°¨t
 + 3, "RED", 3, 5);

2411 
	`ötfõld
(
∑ge°¨t
 + 4, 4, "Compressionálgorithm");

2412 
	`ötfõld
(
∑ge°¨t
 + 8, 4, "Decompressionálgorithm");

2414 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

2415  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

2417 
	`¥ötf
("\n");

2419 
	}
}

2422 
	$è≥_dev_c⁄fig
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2424 
°©us
;

2425 *
∑ge°¨t
;

2427 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 25, 
cbuf„r
, &
∑ge°¨t
);

2428 i‡(
°©us
)

2429  
°©us
;

2431 i‡(
¥efix
[0])

2432 
	`¥ötf
("%s", 
¥efix
);

2433 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

2434 
	`¥ötf
("%†modê∑gê(0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

2435 
	`¥ötf
("----------------------------------------------------\n");

2437 
	`bôfõld
(
∑ge°¨t
 + 2, "CAF", 1, 5);

2438 
	`bôfõld
(
∑ge°¨t
 + 2, "Active format", 0x1f, 0);

2439 
	`ötfõld
(
∑ge°¨t
 + 3, 1, "ActiveÖartition");

2440 
	`ötfõld
(
∑ge°¨t
 + 4, 1, "Write object cbuffer fullÑatio");

2441 
	`ötfõld
(
∑ge°¨t
 + 5, 1, "Read object cbuffer fullÑatio");

2442 
	`ötfõld
(
∑ge°¨t
 + 6, 2, "Wire delayÅime");

2443 
	`bôfõld
(
∑ge°¨t
 + 8, "OBR", 1, 7);

2444 
	`bôfõld
(
∑ge°¨t
 + 8, "LOIS", 1, 6);

2445 
	`bôfõld
(
∑ge°¨t
 + 8, "RSMK", 1, 5);

2446 
	`bôfõld
(
∑ge°¨t
 + 8, "AVC", 1, 4);

2447 
	`bôfõld
(
∑ge°¨t
 + 8, "SOCF", 3, 2);

2448 
	`bôfõld
(
∑ge°¨t
 + 8, "ROBO", 1, 1);

2449 
	`bôfõld
(
∑ge°¨t
 + 8, "REW", 1, 0);

2450 
	`ötfõld
(
∑ge°¨t
 + 9, 1, "Gap size");

2451 
	`bôfõld
(
∑ge°¨t
 + 10, "EOD defined", 7, 5);

2452 
	`bôfõld
(
∑ge°¨t
 + 10, "EEG", 1, 4);

2453 
	`bôfõld
(
∑ge°¨t
 + 10, "SEW", 1, 3);

2454 
	`bôfõld
(
∑ge°¨t
 + 10, "SWP", 1, 2);

2455 
	`bôfõld
(
∑ge°¨t
 + 10, "BAML", 1, 1);

2456 
	`bôfõld
(
∑ge°¨t
 + 10, "BAM", 1, 0);

2457 
	`ötfõld
(
∑ge°¨t
 + 11, 3, "Object cbuffer sizeátÉarly warning");

2458 
	`ötfõld
(
∑ge°¨t
 + 14, 1, "Select data compressionálgorithm");

2459 
	`bôfõld
(
∑ge°¨t
 + 15, "ASOCWP", 1, 2);

2460 
	`bôfõld
(
∑ge°¨t
 + 15, "PERSWO", 1, 1);

2461 
	`bôfõld
(
∑ge°¨t
 + 15, "PRMWP", 1, 0);

2463 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

2464  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

2466 
	`¥ötf
("\n");

2468 
	}
}

2471 
	$è≥_medium_∑π1
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2473 
°©us
, 
off
, 
Àn
;

2474 *
∑ge°¨t
;

2477 
°©us
 = 
	`gë_mode_∑ge
(
mpi
, 0, 
cbuf„r
);

2478 i‡(
°©us
)

2479  
°©us
;

2480 
off
 = 
	`modePageOff£t
(
cbuf„r
, 
mpi
->
ª•_Àn
, 
mode6byã
);

2481 i‡(
off
 < 0)

2482  
off
;

2483 
Àn
 = 
mpi
->
ª•_Àn
 - 
off
;

2485 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 12 + ((
Àn
 - 10Ë/ 2), 
cbuf„r
, &
∑ge°¨t
);

2486 i‡(
°©us
)

2487  
°©us
;

2489 i‡(
¥efix
[0])

2490 
	`¥ötf
("%s", 
¥efix
);

2491 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

2492 
	`¥ötf
("%†modê∑gê(0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

2493 
	`¥ötf
("----------------------------------------------------\n");

2495 
	`ötfõld
(
∑ge°¨t
 + 2, 1, "MaximumádditionalÖartitions");

2496 
	`ötfõld
(
∑ge°¨t
 + 3, 1, "AdditionalÖartitions defined");

2497 
	`bôfõld
(
∑ge°¨t
 + 4, "FDP", 1, 7);

2498 
	`bôfõld
(
∑ge°¨t
 + 4, "SDP", 1, 6);

2499 
	`bôfõld
(
∑ge°¨t
 + 4, "IDP", 1, 5);

2500 
	`bôfõld
(
∑ge°¨t
 + 4, "PSUM", 3, 3);

2501 
	`bôfõld
(
∑ge°¨t
 + 4, "POFM", 1, 2);

2502 
	`bôfõld
(
∑ge°¨t
 + 4, "CLEAR", 1, 1);

2503 
	`bôfõld
(
∑ge°¨t
 + 4, "ADDP", 1, 0);

2504 
	`ötfõld
(
∑ge°¨t
 + 5, 1, "Medium formatÑecognition");

2505 
	`bôfõld
(
∑ge°¨t
 + 6, "Partition units", 0xf, 0);

2506 
	`ötfõld
(
∑ge°¨t
 + 8, 2, "Partition size");

2508 
off
 = 10; of‡< 
Àn
; off += 2)

2509 
	`ötfõld
(
∑ge°¨t
 + 
off
, 2, "Partition size");

2511 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

2512  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

2514 
	`¥ötf
("\n");

2516 
	}
}

2519 
	$è≥_medium_∑π2_4
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2521 
°©us
, 
off
, 
Àn
;

2522 *
∑ge°¨t
;

2525 
°©us
 = 
	`gë_mode_∑ge
(
mpi
, 0, 
cbuf„r
);

2526 i‡(
°©us
)

2527  
°©us
;

2528 
off
 = 
	`modePageOff£t
(
cbuf„r
, 
mpi
->
ª•_Àn
, 
mode6byã
);

2529 i‡(
off
 < 0)

2530  
off
;

2531 
Àn
 = 
mpi
->
ª•_Àn
 - 
off
;

2533 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 1 + ((
Àn
 - 4Ë/ 2), 
cbuf„r
, &
∑ge°¨t
);

2534 i‡(
°©us
)

2535  
°©us
;

2537 i‡(
¥efix
[0])

2538 
	`¥ötf
("%s", 
¥efix
);

2539 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

2540 
	`¥ötf
("%†modê∑gê(0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

2541 
	`¥ötf
("----------------------------------------------------\n");

2543 
	`ötfõld
(
∑ge°¨t
 + 2, 2, "Partition size");

2545 
off
 = 4; of‡< 
Àn
; off += 2)

2546 
	`ötfõld
(
∑ge°¨t
 + 
off
, 2, "Partition size");

2548 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

2549  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

2551 
	`¥ötf
("\n");

2553 
	}
}

2556 
	$£s_£rvi˚s_m™ag
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2558 
°©us
;

2559 *
∑ge°¨t
;

2561 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 2, 
cbuf„r
, &
∑ge°¨t
);

2562 i‡(
°©us
)

2563  
°©us
;

2565 i‡(
¥efix
[0])

2566 
	`¥ötf
("%s", 
¥efix
);

2567 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

2568 
	`¥ötf
("%†modê∑gê(0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
);

2569 
	`¥ötf
("----------------------------------------------------\n");

2571 
	`bôfõld
(
∑ge°¨t
 + 5, "ENBLTC", 1, 0);

2572 
	`ötfõld
(
∑ge°¨t
 + 6, 2, "MaximumÅimeÅo completion (100 ms units)");

2574 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

2575  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

2577 
	`¥ötf
("\n");

2579 
	}
}

2582 
	$f˝_¥Ÿo_•ec_lu
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2584 
°©us
;

2585 *
∑ge°¨t
;

2587 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 1, 
cbuf„r
, &
∑ge°¨t
);

2588 i‡(
°©us
)

2589  
°©us
;

2591 i‡(
¥efix
[0])

2592 
	`¥ötf
("%s", 
¥efix
);

2593 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

2594 
	`¥ötf
("%s modeÖage (0x%x)\n", "Fibre ChannelÜogical unit",

2595 
mpi
->
∑ge
);

2596 
	`¥ötf
("----------------------------------------------------\n");

2598 
	`bôfõld
(
∑ge°¨t
 + 3, "EPDC", 1, 0);

2600 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

2601  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

2603 
	`¥ötf
("\n");

2605 
	}
}

2608 
	$ßs_¥Ÿo_•ec_lu
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2610 
°©us
;

2611 *
∑ge°¨t
;

2613 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 1, 
cbuf„r
, &
∑ge°¨t
);

2614 i‡(
°©us
)

2615  
°©us
;

2617 i‡(
¥efix
[0])

2618 
	`¥ötf
("%s", 
¥efix
);

2619 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

2620 
	`¥ötf
("%†modê∑gê(0x%x)\n", "SASÜogiˇ»unô", 
mpi
->
∑ge
);

2621 
	`¥ötf
("----------------------------------------------------\n");

2623 
	`bôfõld
(
∑ge°¨t
 + 2, "Transport Layer Retries", 1, 4);

2625 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

2626  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

2628 
	`¥ötf
("\n");

2630 
	}
}

2633 
	$comm⁄_¥Ÿo_•ec_lu
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2635 
°©us
, 
¥Ÿo_id
;

2637 
°©us
 = 
	`gë_¥Ÿocﬁ_id
(0, 
cbuf„r
, &
¥Ÿo_id
, 
NULL
);

2638 i‡(
°©us
)

2639  
°©us
;

2640 i‡(0 =
¥Ÿo_id
)

2641  
	`f˝_¥Ÿo_•ec_lu
(
mpi
, 
¥efix
);

2642 i‡(6 =
¥Ÿo_id
)

2643  
	`ßs_¥Ÿo_•ec_lu
(
mpi
, 
¥efix
);

2645  
DECODE_FAILED_TRY_HEX
;

2646 
	}
}

2649 
	$f˝_¥Ÿo_•ec_p‹t
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2651 
°©us
;

2652 *
∑ge°¨t
;

2654 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 10, 
cbuf„r
, &
∑ge°¨t
);

2655 i‡(
°©us
)

2656  
°©us
;

2658 i‡(
¥efix
[0])

2659 
	`¥ötf
("%s", 
¥efix
);

2660 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

2661 
	`¥ötf
("%s modeÖage (0x%x)\n", "Fibre ChannelÖort control",

2662 
mpi
->
∑ge
);

2663 
	`¥ötf
("----------------------------------------------------\n");

2665 
	`bôfõld
(
∑ge°¨t
 + 3, "DTFD", 1, 7);

2666 
	`bôfõld
(
∑ge°¨t
 + 3, "PLPB", 1, 6);

2667 
	`bôfõld
(
∑ge°¨t
 + 3, "DDIS", 1, 5);

2668 
	`bôfõld
(
∑ge°¨t
 + 3, "DLM", 1, 4);

2669 
	`bôfõld
(
∑ge°¨t
 + 3, "RHA", 1, 3);

2670 
	`bôfõld
(
∑ge°¨t
 + 3, "ALWI", 1, 2);

2671 
	`bôfõld
(
∑ge°¨t
 + 3, "DTIPE", 1, 1);

2672 
	`bôfõld
(
∑ge°¨t
 + 3, "DTOLI", 1, 0);

2673 
	`bôfõld
(
∑ge°¨t
 + 6, "RR_TOV units", 7, 0);

2674 
	`ötfõld
(
∑ge°¨t
 + 7, 1, "ResourceÑecoveryÅime-out");

2676 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

2677  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

2679 
	`¥ötf
("\n");

2681 
	}
}

2684 
	$•i4_¥Ÿo_•ec_p‹t
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2686 
°©us
;

2687 *
∑ge°¨t
;

2689 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 1, 
cbuf„r
, &
∑ge°¨t
);

2690 i‡(
°©us
)

2691  
°©us
;

2693 i‡(
¥efix
[0])

2694 
	`¥ötf
("%s", 
¥efix
);

2695 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

2696 
	`¥ötf
("%†modê∑gê(0x%x)\n", "SPI-4Ö‹àc⁄åﬁ", 
mpi
->
∑ge
);

2697 
	`¥ötf
("-----------------------------------\n");

2699 
	`ötfõld
(
∑ge°¨t
 + 4, 2, "SynchronousÅransferÅime-out");

2701 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

2702  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

2704 
	`¥ötf
("\n");

2706 
	}
}

2710 
	$ßs_¥Ÿo_•ec_p‹t
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2712 
°©us
;

2713 *
∑ge°¨t
;

2715 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 3, 
cbuf„r
, &
∑ge°¨t
);

2716 i‡(
°©us
)

2717  
°©us
;

2719 i‡(
¥efix
[0])

2720 
	`¥ötf
("%s", 
¥efix
);

2721 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

2722 
	`¥ötf
("%†modê∑gê(0x%x)\n", "SAS SSPÖ‹àc⁄åﬁ", 
mpi
->
∑ge
);

2723 
	`¥ötf
("-------------------------------------\n");

2725 
	`bôfõld
(
∑ge°¨t
 + 2, "Ready LED meaning", 0x1, 4);

2726 
	`ötfõld
(
∑ge°¨t
 + 4, 2, "I_T Nexus LossÅime");

2727 
	`ötfõld
(
∑ge°¨t
 + 6, 2, "InitiatorÑesponseÅime-out");

2729 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

2730  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

2732 
	`¥ötf
("\n");

2734 
	}
}

2737 
	$comm⁄_¥Ÿo_•ec_p‹t
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2739 
°©us
, 
¥Ÿo_id
;

2741 
°©us
 = 
	`gë_¥Ÿocﬁ_id
(1, 
cbuf„r
, &
¥Ÿo_id
, 
NULL
);

2742 i‡(
°©us
)

2743  
°©us
;

2744 i‡(0 =
¥Ÿo_id
)

2745  
	`f˝_¥Ÿo_•ec_p‹t
(
mpi
, 
¥efix
);

2746 i‡(1 =
¥Ÿo_id
)

2747  
	`•i4_¥Ÿo_•ec_p‹t
(
mpi
, 
¥efix
);

2748 i‡(6 =
¥Ÿo_id
)

2749  
	`ßs_¥Ÿo_•ec_p‹t
(
mpi
, 
¥efix
);

2751  
DECODE_FAILED_TRY_HEX
;

2752 
	}
}

2755 
	$•i4_m¨gö_c⁄åﬁ
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2757 
°©us
;

2758 *
∑ge°¨t
;

2760 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 5, 
cbuf„r
, &
∑ge°¨t
);

2761 i‡(
°©us
)

2762  
°©us
;

2764 i‡(
¥efix
[0])

2765 
	`¥ötf
("%s", 
¥efix
);

2766 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

2767 
	`¥ötf
("%s mode subpage (0x%x,0x%x)\n", "SPI-4 Margin control",

2768 
mpi
->
∑ge
, mpi->
sub∑ge
);

2769 
	`¥ötf
("--------------------------------------------\n");

2771 
	`bôfõld
(
∑ge°¨t
 + 5, "Protocol identifier", 0xf, 0);

2772 
	`bôfõld
(
∑ge°¨t
 + 7, "Driver Strength", 0xf, 4);

2773 
	`bôfõld
(
∑ge°¨t
 + 8, "Driver Asymmetry", 0xf, 4);

2774 
	`bôfõld
(
∑ge°¨t
 + 8, "Driver Precompensation", 0xf, 0);

2775 
	`bôfõld
(
∑ge°¨t
 + 9, "Driver SlewÑate", 0xf, 4);

2777 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

2778  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

2780 
	`¥ötf
("\n");

2782 
	}
}

2786 
	$ßs_phy_c⁄åﬁ_discovî
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2788 
°©us
, 
off
, 
num_phys
, 
k
;

2789 *
∑ge°¨t
;

2790 *
p
;

2793 
°©us
 = 
	`gë_mode_∑ge
(
mpi
, 0, 
cbuf„r
);

2794 i‡(
°©us
)

2795  
°©us
;

2796 
off
 = 
	`modePageOff£t
(
cbuf„r
, 
mpi
->
ª•_Àn
, 
mode6byã
);

2797 i‡(
off
 < 0)

2798  
off
;

2799 
num_phys
 = 
cbuf„r
[
off
 + 7];

2801 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 1 + (16 * 
num_phys
), 
cbuf„r
, &
∑ge°¨t
);

2802 i‡(
°©us
)

2803  
°©us
;

2805 i‡(
¥efix
[0])

2806 
	`¥ötf
("%s", 
¥efix
);

2807 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

2808 
	`¥ötf
("%s mode subpage (0x%x,0x%x)\n", "SAS Phy Controlánd "

2809 "Discovî", 
mpi
->
∑ge
, mpi->
sub∑ge
);

2810 
	`¥ötf
("--------------------------------------------\n");

2812 
	`ötfõld
(
∑ge°¨t
 + 7, 1, "Number ofÖhys");

2813 
k
 = 0, 
p
 = 
∑ge°¨t
 + 8; k < 
num_phys
; ++k,Ö += 48) {

2814 
	`ötfõld
(
p
 + 1, 1, "Phy Identifier");

2815 
	`bôfõld
(
p
 + 4, "Attached DeviceÅype", 0x7, 4);

2816 
	`bôfõld
(
p
 + 5, "Negotiated Logical LinkÑate", 0xf, 0);

2817 
	`bôfõld
(
p
 + 6, "Attached SSP InitiatorÖort", 0x1, 3);

2818 
	`bôfõld
(
p
 + 6, "Attached STP InitiatorÖort", 0x1, 2);

2819 
	`bôfõld
(
p
 + 6, "Attached SMP InitiatorÖort", 0x1, 1);

2820 
	`bôfõld
(
p
 + 7, "Attached SSP TargetÖort", 0x1, 3);

2821 
	`bôfõld
(
p
 + 7, "Attached STP TargetÖort", 0x1, 2);

2822 
	`bôfõld
(
p
 + 7, "Attached SMP TargetÖort", 0x1, 1);

2823 
	`hexd©afõld
(
p
 + 8, 8, "SASáddress");

2824 
	`hexd©afõld
(
p
 + 16, 8, "Attached SASáddress");

2825 
	`ötfõld
(
p
 + 24, 1, "Attached Phy identifier");

2826 
	`bôfõld
(
p
 + 32, "Programmed Min Physical LinkÑate", 0xf, 4);

2827 
	`bôfõld
(
p
 + 32, "Hardware Min Physical LinkÑate", 0xf, 0);

2828 
	`bôfõld
(
p
 + 33, "Programmed Max Physical LinkÑate", 0xf, 4);

2829 
	`bôfõld
(
p
 + 33, "Hardware Max Physical LinkÑate", 0xf, 0);

2831 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

2832  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

2834 
	`¥ötf
("\n");

2836 
	}
}

2840 
	$comm⁄_¥Ÿo_•ec_p‹t_•1
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2842 
°©us
, 
¥Ÿo_id
;

2844 
°©us
 = 
	`gë_¥Ÿocﬁ_id
(1, 
cbuf„r
, &
¥Ÿo_id
, 
NULL
);

2845 i‡(
°©us
)

2846  
°©us
;

2847 i‡(1 =
¥Ÿo_id
)

2848  
	`•i4_m¨gö_c⁄åﬁ
(
mpi
, 
¥efix
);

2849 i‡(6 =
¥Ÿo_id
)

2850  
	`ßs_phy_c⁄åﬁ_discovî
(
mpi
, 
¥efix
);

2852  
DECODE_FAILED_TRY_HEX
;

2853 
	}
}

2856 
	$•i4_åaöög_c⁄fig
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2858 
°©us
;

2859 *
∑ge°¨t
;

2861 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 27, 
cbuf„r
, &
∑ge°¨t
);

2862 i‡(
°©us
)

2863  
°©us
;

2865 i‡(
¥efix
[0])

2866 
	`¥ötf
("%s", 
¥efix
);

2867 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

2868 
	`¥ötf
("%s mode subpage (0x%x,0x%x)\n", "training configuration",

2869 
mpi
->
∑ge
, mpi->
sub∑ge
);

2870 
	`¥ötf
("----------------------------------------------------------\n");

2872 
	`hexd©afõld
(
∑ge°¨t
 + 10, 4, "DB(0) value");

2873 
	`hexd©afõld
(
∑ge°¨t
 + 14, 4, "DB(1) value");

2874 
	`hexd©afõld
(
∑ge°¨t
 + 18, 4, "DB(2) value");

2875 
	`hexd©afõld
(
∑ge°¨t
 + 22, 4, "DB(3) value");

2876 
	`hexd©afõld
(
∑ge°¨t
 + 26, 4, "DB(4) value");

2877 
	`hexd©afõld
(
∑ge°¨t
 + 30, 4, "DB(5) value");

2878 
	`hexd©afõld
(
∑ge°¨t
 + 34, 4, "DB(6) value");

2879 
	`hexd©afõld
(
∑ge°¨t
 + 38, 4, "DB(7) value");

2880 
	`hexd©afõld
(
∑ge°¨t
 + 42, 4, "DB(8) value");

2881 
	`hexd©afõld
(
∑ge°¨t
 + 46, 4, "DB(9) value");

2882 
	`hexd©afõld
(
∑ge°¨t
 + 50, 4, "DB(10) value");

2883 
	`hexd©afõld
(
∑ge°¨t
 + 54, 4, "DB(11) value");

2884 
	`hexd©afõld
(
∑ge°¨t
 + 58, 4, "DB(12) value");

2885 
	`hexd©afõld
(
∑ge°¨t
 + 62, 4, "DB(13) value");

2886 
	`hexd©afõld
(
∑ge°¨t
 + 66, 4, "DB(14) value");

2887 
	`hexd©afõld
(
∑ge°¨t
 + 70, 4, "DB(15) value");

2888 
	`hexd©afõld
(
∑ge°¨t
 + 74, 4, "P_CRCA value");

2889 
	`hexd©afõld
(
∑ge°¨t
 + 78, 4, "P1 value");

2890 
	`hexd©afõld
(
∑ge°¨t
 + 82, 4, "BSY value");

2891 
	`hexd©afõld
(
∑ge°¨t
 + 86, 4, "SEL value");

2892 
	`hexd©afõld
(
∑ge°¨t
 + 90, 4, "RST value");

2893 
	`hexd©afõld
(
∑ge°¨t
 + 94, 4, "REQ value");

2894 
	`hexd©afõld
(
∑ge°¨t
 + 98, 4, "ACK value");

2895 
	`hexd©afõld
(
∑ge°¨t
 + 102, 4, "ATN value");

2896 
	`hexd©afõld
(
∑ge°¨t
 + 106, 4, "C/D value");

2897 
	`hexd©afõld
(
∑ge°¨t
 + 110, 4, "I/O value");

2898 
	`hexd©afõld
(
∑ge°¨t
 + 114, 4, "MSG value");

2900 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

2901  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

2903 
	`¥ötf
("\n");

2905 
	}
}

2909 
	$ßs_sh¨ed_•ec_p‹t
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2911 
°©us
;

2912 *
∑ge°¨t
;

2914 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 1, 
cbuf„r
, &
∑ge°¨t
);

2915 i‡(
°©us
)

2916  
°©us
;

2918 i‡(
¥efix
[0])

2919 
	`¥ötf
("%s", 
¥efix
);

2920 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

2921 
	`¥ötf
("%s mode subpage (0x%x,0x%x)\n", "SAS SSP sharedÖrotocol "

2922 "•ecifi¯p‹t", 
mpi
->
∑ge
, mpi->
sub∑ge
);

2923 
	`¥ötf
("-----------------------------------------------------\n");

2925 
	`ötfõld
(
∑ge°¨t
 + 6, 2, "PowerÜossÅimeout(ms)");

2927 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

2928  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

2930 
	`¥ötf
("\n");

2932 
	}
}

2935 
	$comm⁄_¥Ÿo_•ec_p‹t_•2
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2937 
°©us
, 
¥Ÿo_id
;

2939 
°©us
 = 
	`gë_¥Ÿocﬁ_id
(1, 
cbuf„r
, &
¥Ÿo_id
, 
NULL
);

2940 i‡(
°©us
)

2941  
°©us
;

2942 i‡(1 =
¥Ÿo_id
)

2943  
	`•i4_åaöög_c⁄fig
(
mpi
, 
¥efix
);

2944 i‡(6 =
¥Ÿo_id
)

2945  
	`ßs_sh¨ed_•ec_p‹t
(
mpi
, 
¥efix
);

2947  
DECODE_FAILED_TRY_HEX
;

2948 
	}
}

2951 
	$•i4_√gŸüãd
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2953 
°©us
;

2954 *
∑ge°¨t
;

2956 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 7, 
cbuf„r
, &
∑ge°¨t
);

2957 i‡(
°©us
)

2958  
°©us
;

2960 i‡(
¥efix
[0])

2961 
	`¥ötf
("%s", 
¥efix
);

2962 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

2963 
	`¥ötf
("%†modêsub∑gê(0x%x,0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
,

2964 
mpi
->
sub∑ge
);

2965 
	`¥ötf
("--------------------------------------------\n");

2967 
	`ötfõld
(
∑ge°¨t
 + 6, 1, "TransferÖeriod");

2968 
	`ötfõld
(
∑ge°¨t
 + 8, 1, "REQ/ACK offset");

2969 
	`ötfõld
(
∑ge°¨t
 + 9, 1, "Transfer widthÉxponent");

2970 
	`bôfõld
(
∑ge°¨t
 + 10, "Protocol option bits", 0x7f, 0);

2971 
	`bôfõld
(
∑ge°¨t
 + 11, "Transceiver mode", 3, 2);

2972 
	`bôfõld
(
∑ge°¨t
 + 11, "Sent PCOMP_EN", 1, 1);

2973 
	`bôfõld
(
∑ge°¨t
 + 11, "Received PCOMP_EN", 1, 0);

2975 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

2976  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

2978 
	`¥ötf
("\n");

2980 
	}
}

2983 
	$•i4_ªp‹t_x„r
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
)

2985 
°©us
;

2986 *
∑ge°¨t
;

2988 
°©us
 = 
	`£tup_mode_∑ge
(
mpi
, 4, 
cbuf„r
, &
∑ge°¨t
);

2989 i‡(
°©us
)

2990  
°©us
;

2992 i‡(
¥efix
[0])

2993 
	`¥ötf
("%s", 
¥efix
);

2994 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

2995 
	`¥ötf
("%†modêsub∑gê(0x%x,0x%x)\n", 
	`gë_∑ge_«me
(
mpi
), mpi->
∑ge
,

2996 
mpi
->
sub∑ge
);

2997 
	`¥ötf
("--------------------------------------------\n");

2999 
	`ötfõld
(
∑ge°¨t
 + 6, 1, "MimimumÅransferÖeriod factor");

3000 
	`ötfõld
(
∑ge°¨t
 + 8, 1, "Maximum REQ/ACK offset");

3001 
	`ötfõld
(
∑ge°¨t
 + 9, 1, "MaximumÅransfer widthÉxponent");

3002 
	`bôfõld
(
∑ge°¨t
 + 10, "Protocol option bits supported", 0xff, 0);

3004 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

3005  
	`put_mode_∑ge
(
mpi
, 
cbuf„r
);

3007 
	`¥ötf
("\n");

3009 
	}
}

3012 
	$¥öt_hex_∑ge
(
m∑ge_öfo
 * 
mpi
, c⁄° * 
¥efix
,

3013 *
∑ge°¨t
, 
off
, 
Àn
)

3015 
k
;

3016 c⁄° * 
pg_«me
;

3018 i‡(
¥efix
[0])

3019 
	`¥ötf
("%s", 
¥efix
);

3020 i‡(! 
x_öãrÁ˚
) {

3021 
pg_«me
 = 
	`gë_∑ge_«me
(
mpi
);

3022 i‡(
mpi
->
sub∑ge
) {

3023 i‡(
pg_«me
 && (
unkn_∑ge_°r
 !=Ög_name))

3024 
	`¥ötf
("modeÖage: 0x%02x subpage: 0x%02x [%s]\n",

3025 
mpi
->
∑ge
, mpi->
sub∑ge
, 
pg_«me
);

3027 
	`¥ötf
("modê∑ge: 0x%02x sub∑ge: 0x%02x\n", 
mpi
->
∑ge
,

3028 
mpi
->
sub∑ge
);

3029 
	`¥ötf
("------------------------------\n");

3031 i‡(
pg_«me
 && (
unkn_∑ge_°r
 !=Ög_name))

3032 
	`¥ötf
("modê∑ge: 0x%02x [%s]\n", 
mpi
->
∑ge
,

3033 
pg_«me
);

3035 
	`¥ötf
("modê∑ge: 0x%02x\n", 
mpi
->
∑ge
);

3036 
	`¥ötf
("---------------\n");

3039 
k
 = 
off
; k < 
Àn
; k++)

3041 
nm
[8];

3043 
	`¢¥ötf
(
nm
, “m), "0x%02x", 
k
);

3044 
	`hexd©afõld
(
∑ge°¨t
 + 
k
, 1, 
nm
);

3046 
	`¥ötf
("\n");

3047 
	}
}

3050 
	$do_u£r_∑ge
(
m∑ge_öfo
 * 
mpi
, 
decode_ö_hex
)

3052 
°©us
 = 0;

3053 
Àn
, 
off
, 
ªs
, 
d⁄e
;

3054 
off£t
 = 0;

3055 *
∑ge°¨t
;

3056 
¥efix
[96];

3057 
m∑ge_öfo
 
loˇl_mp_i
;

3058 
m∑ge_«me_func
 * 
mpf
;

3059 
mu…ùÀ
 = ((
MP_LIST_PAGES
 =
mpi
->
∑ge
) ||

3060 (
MP_LIST_SUBPAGES
 =
mpi
->
sub∑ge
));

3062 i‡(
ª∂a˚
 && 
mu…ùÀ
) {

3063 
	`¥ötf
("Can'tÜistáll (sub)pagesánd useÑeplace (-R)Åogether\n");

3066 
°©us
 = 
	`gë_mode_∑ge
(
mpi
, 0, 
cbuf„r2
);

3067 i‡(
°©us
) {

3068 
	`¥ötf
("\n");

3069  
°©us
;

3071 
off£t
 = 
	`modePageOff£t
(
cbuf„r2
, 
mpi
->
ª•_Àn
, 
mode6byã
);

3072 i‡(
off£t
 < 0) {

3073 
	`Ârötf
(
°dout
, "modeÖage=0x%x has badÖage format\n",

3074 
mpi
->
∑ge
);

3075 
	`Ârötf
(
°dout
, "Öerhaps '-z' switch may help\n");

3078 
∑ge°¨t
 = 
cbuf„r2
 + 
off£t
;

3081 
	`mem£t
(&
loˇl_mp_i
, 0, (local_mp_i));

3082 
loˇl_mp_i
.
∑ge_c⁄åﬁ
 = 
mpi
->page_control;

3083 
loˇl_mp_i
.
≥ri_ty≥
 = 
mpi
->peri_type;

3084 
loˇl_mp_i
.
öq_byã6
 = 
mpi
->inq_byte6;

3085 
loˇl_mp_i
.
ª•_Àn
 = 
mpi
->resp_len;

3088 
loˇl_mp_i
.
∑ge
 = (
∑ge°¨t
[0] & 0x3f);

3089 
loˇl_mp_i
.
sub∑ge
 = (
∑ge°¨t
[0] & 0x40) ?Öagestart[1] : 0;

3090 if(0 =
loˇl_mp_i
.
∑ge
) {

3091 
off
 = 0;

3092 
Àn
 = 
mpi
->
ª•_Àn
 - 
off£t
;

3093 } i‡(
loˇl_mp_i
.
sub∑ge
) {

3094 
off
 = 4;

3095 
Àn
 = (
∑ge°¨t
[2] << 8) +Öagestart[3] + 4;

3097 
off
 = 2;

3098 
Àn
 = 
∑ge°¨t
[1] + 2;

3101 
¥efix
[0] = '\0';

3102 
d⁄e
 = 0;

3103 i‡((! 
decode_ö_hex
Ë&& ((
mpf
 = 
	`gë_m∑ge_«me_func
(&
loˇl_mp_i
))) &&

3104 
mpf
->
func
) {

3105 i‡(
mu…ùÀ
 && 
x_öãrÁ˚
 && !
ª∂a˚
) {

3106 i‡(
loˇl_mp_i
.
sub∑ge
)

3107 
	`¢¥ötf
(
¥efix
, (prefix), "sginfo -t 0x%x,0x%x"

3108 " -XR %†", 
loˇl_mp_i
.
∑ge
,Üoˇl_mp_i.
sub∑ge
,

3109 
devi˚_«me
);

3111 
	`¢¥ötf
(
¥efix
, (prefix), "sginfo -t 0x%x -XR %s ",

3112 
loˇl_mp_i
.
∑ge
, 
devi˚_«me
);

3114 
ªs
 = 
mpf
->
	`func
(&
loˇl_mp_i
, 
¥efix
);

3115 i‡(
DECODE_FAILED_TRY_HEX
 !
ªs
) {

3116 
d⁄e
 = 1;

3117 
°©us
 |
ªs
;

3120 i‡(! 
d⁄e
) {

3121 i‡(
x_öãrÁ˚
 && 
ª∂a˚
)

3122  
	`put_mode_∑ge
(&
loˇl_mp_i
, 
cbuf„r2
);

3124 i‡(
mu…ùÀ
 && 
x_öãrÁ˚
 && !
ª∂a˚
) {

3125 i‡(
loˇl_mp_i
.
sub∑ge
)

3126 
	`¢¥ötf
(
¥efix
, (prefix), "sginfo -u 0x%x,0x%x"

3127 " -XR %†", 
loˇl_mp_i
.
∑ge
,

3128 
loˇl_mp_i
.
sub∑ge
, 
devi˚_«me
);

3130 
	`¢¥ötf
(
¥efix
, (prefix), "sginfo -u 0x%x -XR "

3131 "%†", 
loˇl_mp_i
.
∑ge
, 
devi˚_«me
);

3133 
	`¥öt_hex_∑ge
(&
loˇl_mp_i
, 
¥efix
, 
∑ge°¨t
, 
off
, 
Àn
);

3136 
off£t
 +
Àn
;

3137 
∑ge°¨t
 = 
cbuf„r2
 + 
off£t
;

3138 } 
mu…ùÀ
 && (
off£t
 < 
mpi
->
ª•_Àn
));

3139  
°©us
;

3140 
	}
}

3143 
	$do_öquúy
(* 
≥ri_ty≥
, * 
ª•_byã6
, 
öquúy_vîbosôy
)

3145 
°©us
;

3146 
cmd
[6];

3147 *
∑ge°¨t
;

3148 
scsi_cmnd_io
 
sci
;

3150 
	`mem£t
(
cbuf„r
, 0, 
INQUIRY_RESP_INITIAL_LEN
);

3151 
cbuf„r
[0] = 0x7f;

3153 
cmd
[0] = 0x12;

3154 
cmd
[1] = 0x00;

3155 
cmd
[2] = 0x00;

3156 
cmd
[3] = 0x00;

3157 
cmd
[4] = 
INQUIRY_RESP_INITIAL_LEN
;

3158 
cmd
[5] = 0x00;

3160 
sci
.
cmnd
 = 
cmd
;

3161 
sci
.
cmnd_Àn
 = (
cmd
);

3162 
sci
.
dx„r_dú
 = 
DXFER_FROM_DEVICE
;

3163 
sci
.
dx„r_Àn
 = 
INQUIRY_RESP_INITIAL_LEN
;

3164 
sci
.
dx„Ω
 = 
cbuf„r
;

3165 
°©us
 = 
	`do_scsi_io
(&
sci
);

3166 i‡(
°©us
) {

3167 
	`¥ötf
("Error doing INQUIRY (1)\n");

3168  
°©us
;

3170 i‡(
åa˚_cmd
 > 1) {

3171 
	`¥ötf
(" inquiryÑesponse:\n");

3172 
	`dump
(
cbuf„r
, 
INQUIRY_RESP_INITIAL_LEN
);

3174 
∑ge°¨t
 = 
cbuf„r
;

3175 i‡(
≥ri_ty≥
)

3176 *
≥ri_ty≥
 = 
∑ge°¨t
[0] & 0x1f;

3177 i‡(
ª•_byã6
)

3178 *
ª•_byã6
 = 
∑ge°¨t
[6];

3179 i‡(0 =
öquúy_vîbosôy
)

3181 i‡((
∑ge°¨t
[4] + 5Ë< 
INQUIRY_RESP_INITIAL_LEN
) {

3182 
	`¥ötf
("INQUIRYÑesponseÅoo short:Éxpected 36 bytes, got %d\n",

3183 
∑ge°¨t
[4] + 5);

3184  -
EINVAL
;

3187 i‡(!
x_öãrÁ˚
 && !
ª∂a˚
) {

3188 
	`¥ötf
("INQUIRYÑesponse (cmd: 0x12)\n");

3189 
	`¥ötf
("----------------------------\n");

3191 
	`bôfõld
(
∑ge°¨t
 + 0, "Device Type", 0x1f, 0);

3192 i‡(2 =
öquúy_vîbosôy
) {

3193 
	`bôfõld
(
∑ge°¨t
 + 0, "Peripheral Qualifier", 0x7, 5);

3194 
	`bôfõld
(
∑ge°¨t
 + 1, "Removable", 1, 7);

3195 
	`bôfõld
(
∑ge°¨t
 + 2, "Version", 0xff, 0);

3196 
	`bôfõld
(
∑ge°¨t
 + 3, "NormACA", 1, 5);

3197 
	`bôfõld
(
∑ge°¨t
 + 3, "HiSup", 1, 4);

3198 
	`bôfõld
(
∑ge°¨t
 + 3, "Response Data Format", 0xf, 0);

3199 
	`bôfõld
(
∑ge°¨t
 + 5, "SCCS", 1, 7);

3200 
	`bôfõld
(
∑ge°¨t
 + 5, "ACC", 1, 6);

3201 
	`bôfõld
(
∑ge°¨t
 + 5, "ALUA", 3, 4);

3202 
	`bôfõld
(
∑ge°¨t
 + 5, "3PC", 1, 3);

3203 
	`bôfõld
(
∑ge°¨t
 + 5, "Protect", 1, 0);

3204 
	`bôfõld
(
∑ge°¨t
 + 6, "BQue", 1, 7);

3205 
	`bôfõld
(
∑ge°¨t
 + 6, "EncServ", 1, 6);

3206 
	`bôfõld
(
∑ge°¨t
 + 6, "MultiP", 1, 4);

3207 
	`bôfõld
(
∑ge°¨t
 + 6, "MChngr", 1, 3);

3208 
	`bôfõld
(
∑ge°¨t
 + 6, "Addr16", 1, 0);

3209 
	`bôfõld
(
∑ge°¨t
 + 7, "Relative Address", 1, 7);

3210 
	`bôfõld
(
∑ge°¨t
 + 7, "Wide bus 16", 1, 5);

3211 
	`bôfõld
(
∑ge°¨t
 + 7, "SynchronousÇeg.", 1, 4);

3212 
	`bôfõld
(
∑ge°¨t
 + 7, "Linked Commands", 1, 3);

3213 
	`bôfõld
(
∑ge°¨t
 + 7, "Command Queueing", 1, 1);

3215 i‡(
x_öãrÁ˚
)

3216 
	`¥ötf
("\n");

3217 
	`¥ötf
("%s%.8s\n", (!
x_öãrÁ˚
 ? "Vendor: " : ""),

3218 
∑ge°¨t
 + 8);

3220 
	`¥ötf
("%s%.16s\n", (!
x_öãrÁ˚
 ? "Product: " : ""),

3221 
∑ge°¨t
 + 16);

3223 
	`¥ötf
("%s%.4s\n", (!
x_öãrÁ˚
 ? "RevisionÜevel: " : ""),

3224 
∑ge°¨t
 + 32);

3226 
	`¥ötf
("\n");

3227  
°©us
;

3229 
	}
}

3232 
	$do_£rül_numbî
()

3234 
°©us
, 
∑gñí
;

3235 
cmd
[6];

3236 *
∑ge°¨t
;

3237 
scsi_cmnd_io
 
sci
;

3238 c⁄° 
£rül_vpd
 = 0x80;

3239 c⁄° 
suµ‹ãd_vpd
 = 0x0;

3242 
cmd
[0] = 0x12;

3243 
cmd
[1] = 0x01;

3244 
cmd
[2] = 
suµ‹ãd_vpd
;

3245 
cmd
[3] = 0x00;

3246 
cmd
[4] = 0x04;

3247 
cmd
[5] = 0x00;

3249 
sci
.
cmnd
 = 
cmd
;

3250 
sci
.
cmnd_Àn
 = (
cmd
);

3251 
sci
.
dx„r_dú
 = 
DXFER_FROM_DEVICE
;

3252 
sci
.
dx„r_Àn
 = 4;

3253 
sci
.
dx„Ω
 = 
cbuf„r
;

3254 
°©us
 = 
	`do_scsi_io
(&
sci
);

3255 i‡(
°©us
) {

3256 
	`¥ötf
("No serialÇumber (error doing INQUIRY, supported VPDs)\n\n");

3257  
°©us
;

3259 i‡(! ((
suµ‹ãd_vpd
 =
cbuf„r
[1]) && (0 == cbuffer[2]))) {

3260 
	`¥ötf
("No serialÇumber (bad format for supported VPDs)\n\n");

3264 
cmd
[0] = 0x12;

3265 
cmd
[1] = 0x01;

3266 
cmd
[2] = 
£rül_vpd
;

3267 
cmd
[3] = 0x00;

3268 
cmd
[4] = 0x04;

3269 
cmd
[5] = 0x00;

3271 
sci
.
cmnd
 = 
cmd
;

3272 
sci
.
cmnd_Àn
 = (
cmd
);

3273 
sci
.
dx„r_dú
 = 
DXFER_FROM_DEVICE
;

3274 
sci
.
dx„r_Àn
 = 4;

3275 
sci
.
dx„Ω
 = 
cbuf„r
;

3276 
°©us
 = 
	`do_scsi_io
(&
sci
);

3277 i‡(
°©us
) {

3278 
	`¥ötf
("No serialÇumber (error doing INQUIRY, serialÇumber)\n\n");

3279  
°©us
;

3281 i‡(! ((
£rül_vpd
 =
cbuf„r
[1]) && (0 == cbuffer[2]))) {

3282 
	`¥ötf
("No serialÇumber (bad format for serialÇumber)\n\n");

3286 
∑ge°¨t
 = 
cbuf„r
;

3288 
∑gñí
 = 4 + 
∑ge°¨t
[3];

3290 
cmd
[0] = 0x12;

3291 
cmd
[1] = 0x01;

3292 
cmd
[2] = 
£rül_vpd
;

3293 
cmd
[3] = 0x00;

3294 
cmd
[4] = ()
∑gñí
;

3295 
cmd
[5] = 0x00;

3297 
sci
.
cmnd
 = 
cmd
;

3298 
sci
.
cmnd_Àn
 = (
cmd
);

3299 
sci
.
dx„r_dú
 = 
DXFER_FROM_DEVICE
;

3300 
sci
.
dx„r_Àn
 = 
∑gñí
;

3301 
sci
.
dx„Ω
 = 
cbuf„r
;

3302 
°©us
 = 
	`do_scsi_io
(&
sci
);

3303 i‡(
°©us
) {

3304 
	`¥ötf
("No serialÇumber (error doing INQUIRY, serialÇumber)\n\n");

3305  
°©us
;

3307 i‡(
åa˚_cmd
 > 1) {

3308 
	`¥ötf
(" inquiry (vpdÖage 0x80)Ñesponse:\n");

3309 
	`dump
(
cbuf„r
, 
∑gñí
);

3312 
∑ge°¨t
[pagestart[3] + 4] = '\0';

3313 
	`¥ötf
("Sîü»Numbî '%s'\n\n", 
∑ge°¨t
 + 4);

3314  
°©us
;

3315 
	}
}

3318 
	ssg_m≠
 {

3319 
	mbus
;

3320 
	mch™√l
;

3321 
	mèrgë_id
;

3322 
	mlun
;

3323 * 
	mdev_«me
;

3324 } 
	tSg_m≠
;

3326 
	smy_scsi_idlun


3328 
	mmux4
;

3329 
	mho°_unique_id
;

3331 } 
	tMy_scsi_idlun
;

3333 
	#MDEV_NAME_SZ
 256

	)

3336 
	$make_dev_«me
(* 
‚ame
, 
k
, 
do_numîic
)

3338 
buff
[
MDEV_NAME_SZ
];

3339 
size_t
 
Àn
;

3341 
	`°∫˝y
(
‚ame
, "/dev/sg", 
MDEV_NAME_SZ
);

3342 
‚ame
[
MDEV_NAME_SZ
 - 1] = '\0';

3343 
Àn
 = 
	`°æí
(
‚ame
);

3344 i‡(
do_numîic
)

3345 
	`¢¥ötf
(
‚ame
 + 
Àn
, 
MDEV_NAME_SZ
 -Üí, "%d", 
k
);

3347 i‡(
k
 <= 26) {

3348 
buff
[0] = 'a' + ()
k
;

3349 
buff
[1] = '\0';

3350 
	`°rˇt
(
‚ame
, 
buff
);

3353 
	`°rˇt
(
‚ame
, "xxxx");

3355 
	}
}

3358 
Sg_m≠
 
	gsg_m≠_¨r
[
MAX_SG_DEVS
 + 1];

3360 
	#MAX_HOLES
 4

	)

3364 
	$show_devi˚s
(
øw
)

3366 
k
, 
j
, 
fd
, 
îr
, 
bus
;

3367 
My_scsi_idlun
 
m_idlun
;

3368 
«me
[
MDEV_NAME_SZ
];

3369 
dev_«me
[
MDEV_NAME_SZ
];

3370 
ebuff
[
EBUFF_SZ
];

3371 
do_numîic
 = 1;

3372 
max_hﬁes
 = 
MAX_HOLES
;

3373 
DIR
 *
dú_±r
;

3374 
dúít
 *
íåy
;

3375 *
tmµå
;

3377 
dú_±r
=
	`›ídú
("/dev");

3378 i‡–
dú_±r
 =
NULL
 ) {

3379 
	`≥º‹
("/dev");

3380 
	`exô
(1);

3383 
j
=0;

3384  (
íåy
=
	`ªaddú
(
dú_±r
)Ë!
NULL
 ) {

3385 
íåy
->
d_ty≥
) {

3386 
DT_LNK
:

3387 
DT_CHR
:

3388 
DT_BLK
:

3394 
íåy
->
d_«me
[0]) {

3402 i‡–
	`°∫cmp
("sg",
íåy
->
d_«me
,2) == 0 ) {

3405 i‡–
	`°∫cmp
("sd",
íåy
->
d_«me
,2) == 0 ) {

3408 i‡–
	`isdigô
(
íåy
->
d_«me
[
	`°æí
(entry->d_name)-1]) ) {

3412 
	`¢¥ötf
(
dev_«me
, (dev_«me),"/dev/%s",
íåy
->
d_«me
);

3414 
fd
 = 
	`›í
(
dev_«me
, 
O_RDONLY
 | 
O_NONBLOCK
);

3415 i‡(
fd
 < 0)

3417 
îr
 = 
	`io˘l
(
fd
, 
SCSI_IOCTL_GET_BUS_NUMBER
, &(
sg_m≠_¨r
[
j
].
bus
));

3418 i‡(
îr
 < 0) {

3420 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

3421 "SCSI(1Ëio˘»⁄ %†Áûed", 
dev_«me
);

3422 
	`≥º‹
(
ebuff
);

3424 
	`˛o£
(
fd
);

3427 
îr
 = 
	`io˘l
(
fd
, 
SCSI_IOCTL_GET_IDLUN
, &
m_idlun
);

3428 i‡(
îr
 < 0) {

3429 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

3430 "SCSI(2Ëio˘»⁄ %†Áûed", 
dev_«me
);

3431 
	`≥º‹
(
ebuff
);

3432 
	`˛o£
(
fd
);

3435 
sg_m≠_¨r
[
j
].
ch™√l
 = (
m_idlun
.
mux4
 >> 16) & 0xff;

3436 
sg_m≠_¨r
[
j
].
lun
 = (
m_idlun
.
mux4
 >> 8) & 0xff;

3437 
sg_m≠_¨r
[
j
].
èrgë_id
 = 
m_idlun
.
mux4
 & 0xff;

3438 
tmµå
=(*)
	`mÆloc
(
	`°æí
(
dev_«me
)+1);

3439 
	`°∫˝y
(
tmµå
,
dev_«me
,
	`°æí
(dev_name)+1);

3440 
sg_m≠_¨r
[
j
].
dev_«me
 = 
tmµå
;

3442 
	`¥ötf
("[scsi%d ch=%d id=%dÜun=%d %s] ", 
sg_m≠_¨r
[
j
].
bus
,

3443 
sg_m≠_¨r
[
j
].
ch™√l
, sg_m≠_¨r[j].
èrgë_id
, sg_m≠_¨r[j].
lun
,

3444 
sg_m≠_¨r
[
j
].
dev_«me
);

3446 
	`¥ötf
("%†", 
dev_«me
);

3447 
	`˛o£
(
fd
);

3448 i‡(++
j
 >
MAX_SG_DEVS
)

3451 
	`˛o£dú
(
dú_±r
);

3453 
	`¥ötf
("\n");

3454 
k
 = 0; k < 
MAX_SG_DEVS
; k++) {

3455 i‡–
øw
 ) {

3456 
	`•rötf
(
«me
,"/dev/øw/øw%d",
k
);

3457 
fd
 = 
	`›í
(
«me
, 
O_RDWR
 | 
O_NONBLOCK
);

3458 i‡(
fd
 < 0) {

3463 
	`make_dev_«me
(
«me
, 
k
, 
do_numîic
);

3464 
fd
 = 
	`›í
(
«me
, 
O_RDWR
 | 
O_NONBLOCK
);

3465 i‡(
fd
 < 0) {

3466 i‡((
ENOENT
 =
î∫o
Ë&& (0 =
k
)) {

3467 
do_numîic
 = 0;

3468 
	`make_dev_«me
(
«me
, 
k
, 
do_numîic
);

3469 
fd
 = 
	`›í
(
«me
, 
O_RDWR
 | 
O_NONBLOCK
);

3471 i‡(
fd
 < 0) {

3472 i‡(
EBUSY
 =
î∫o
)

3476 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

3477 "›í o¿%†Áûed (%d)", 
«me
, 
î∫o
);

3478 
	`≥º‹
(
ebuff
);

3480 i‡(
max_hﬁes
-- > 0)

3488 
max_hﬁes
 = 
MAX_HOLES
;

3489 
îr
 = 
	`io˘l
(
fd
, 
SCSI_IOCTL_GET_BUS_NUMBER
, &
bus
);

3490 i‡(
îr
 < 0) {

3491 i‡–! 
øw
 ) {

3492 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, "SCSI(3Ëio˘»⁄ %†Áûed", 
«me
);

3493 
	`≥º‹
(
ebuff
);

3495 
	`˛o£
(
fd
);

3498 
îr
 = 
	`io˘l
(
fd
, 
SCSI_IOCTL_GET_IDLUN
, &
m_idlun
);

3499 i‡(
îr
 < 0) {

3500 i‡–! 
øw
 ) {

3501 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, "SCSI(3Ëio˘»⁄ %†Áûed", 
«me
);

3502 
	`≥º‹
(
ebuff
);

3504 
	`˛o£
(
fd
);

3508 
	`¥ötf
("[scsi%d ch=%d id=%dÜun=%d %s]", 
bus
,

3509 (
m_idlun
.
mux4
 >> 16) & 0xff, m_idlun.mux4 & 0xff,

3510 (
m_idlun
.
mux4
 >> 8Ë& 0xff, 
«me
);

3512 
j
 = 0; 
sg_m≠_¨r
[j].
dev_«me
; ++j) {

3513 i‡((
bus
 =
sg_m≠_¨r
[
j
].bus) &&

3514 ((
m_idlun
.
mux4
 & 0xffË=
sg_m≠_¨r
[
j
].
èrgë_id
) &&

3515 (((
m_idlun
.
mux4
 >> 16Ë& 0xffË=
sg_m≠_¨r
[
j
].
ch™√l
) &&

3516 (((
m_idlun
.
mux4
 >> 8Ë& 0xffË=
sg_m≠_¨r
[
j
].
lun
)) {

3517 
	`¥ötf
("%†[=%† scsi%d ch=%d id=%dÜun=%d]\n", 
«me
,

3518 
sg_m≠_¨r
[
j
].
dev_«me
, 
bus
,

3519 ((
m_idlun
.
mux4
 >> 16) & 0xff), m_idlun.mux4 & 0xff,

3520 ((
m_idlun
.
mux4
 >> 8) & 0xff));

3524 i‡(
NULL
 =
sg_m≠_¨r
[
j
].
dev_«me
)

3525 
	`¥ötf
("%†[scsi%d ch=%d id=%dÜun=%d]\n", 
«me
, 
bus
,

3526 ((
m_idlun
.
mux4
 >> 16) & 0xff), m_idlun.mux4 & 0xff,

3527 ((
m_idlun
.
mux4
 >> 8) & 0xff));

3528 
	`˛o£
(
fd
);

3530 
	`¥ötf
("\n");

3531 
	}
}

3533 
	#DEVNAME_SZ
 256

	)

3536 
	$›í_sg_io_dev
(* 
dev«me
)

3538 
fd
, 
fdrw
, 
îr
, 
bus
, 
bbus
, 
k
, 
v
;

3539 
My_scsi_idlun
 
m_idlun
, 
mm_idlun
;

3540 
do_numîic
 = 1;

3541 
«me
[
DEVNAME_SZ
];

3542 
°©
 
a_°
;

3543 
block_dev
 = 0;

3545 
	`°∫˝y
(
«me
, 
dev«me
, 
DEVNAME_SZ
);

3546 
«me
[
DEVNAME_SZ
 - 1] = '\0';

3547 
fd
 = 
	`›í
(
«me
, 
O_RDONLY
 | 
O_NONBLOCK
);

3548 i‡(
fd
 < 0)

3549  
fd
;

3550 i‡((
	`io˘l
(
fd
, 
SG_GET_VERSION_NUM
, &
v
) >= 0) && (v >= 30000)) {

3551 
fdrw
 = 
	`›í
(
«me
, 
O_RDWR
 | 
O_NONBLOCK
);

3552 i‡(
fdrw
 >= 0) {

3553 
	`˛o£
(
fd
);

3554  
fdrw
;

3556  
fd
;

3558 i‡(
	`f°©
(
fd
, &
a_°
) < 0) {

3559 
	`Ârötf
(
°dîr
, "could do fstat() on fd ??\n");

3560 
	`˛o£
(
fd
);

3563 i‡(
	`S_ISBLK
(
a_°
.
°_mode
))

3564 
block_dev
 = 1;

3566 i‡(
block_dev
 || (
	`io˘l
(
fd
, 
SG_GET_TIMEOUT
, 0) < 0)) {

3567 
îr
 = 
	`io˘l
(
fd
, 
SCSI_IOCTL_GET_BUS_NUMBER
, &
bus
);

3568 i‡(
îr
 < 0) {

3569 
	`Ârötf
(
°dîr
, "A deviceÇameÅhat understands SCSI commands "

3571 
	`˛o£
(
fd
);

3574 
îr
 = 
	`io˘l
(
fd
, 
SCSI_IOCTL_GET_IDLUN
, &
m_idlun
);

3575 i‡(
îr
 < 0) {

3576 
	`Ârötf
(
°dîr
, "A SCSI deviceÇame isÑequired(2)\n");

3577 
	`˛o£
(
fd
);

3580 
	`˛o£
(
fd
);

3582 
k
 = 0; k < 
MAX_SG_DEVS
; k++) {

3583 
	`make_dev_«me
(
«me
, 
k
, 
do_numîic
);

3584 
fd
 = 
	`›í
(
«me
, 
O_RDWR
 | 
O_NONBLOCK
);

3585 i‡(
fd
 < 0) {

3586 i‡((
ENOENT
 =
î∫o
Ë&& (0 =
k
)) {

3587 
do_numîic
 = 0;

3588 
	`make_dev_«me
(
«me
, 
k
, 
do_numîic
);

3589 
fd
 = 
	`›í
(
«me
, 
O_RDWR
 | 
O_NONBLOCK
);

3591 i‡(
fd
 < 0) {

3592 i‡(
EBUSY
 =
î∫o
)

3598 
îr
 = 
	`io˘l
(
fd
, 
SCSI_IOCTL_GET_BUS_NUMBER
, &
bbus
);

3599 i‡(
îr
 < 0) {

3600 
	`≥º‹
("sg ioctl failed");

3601 
	`˛o£
(
fd
);

3602 
fd
 = -9999;

3604 
îr
 = 
	`io˘l
(
fd
, 
SCSI_IOCTL_GET_IDLUN
, &
mm_idlun
);

3605 i‡(
îr
 < 0) {

3606 
	`≥º‹
("sg ioctl failed");

3607 
	`˛o£
(
fd
);

3608 
fd
 = -9999;

3610 i‡((
bus
 =
bbus
) &&

3611 ((
m_idlun
.
mux4
 & 0xffË=(
mm_idlun
.mux4 & 0xff)) &&

3612 (((
m_idlun
.
mux4
 >> 8) & 0xff) ==

3613 ((
mm_idlun
.
mux4
 >> 8) & 0xff)) &&

3614 (((
m_idlun
.
mux4
 >> 16) & 0xff) ==

3615 ((
mm_idlun
.
mux4
 >> 16) & 0xff)))

3618 
	`˛o£
(
fd
);

3619 
fd
 = -9999;

3623 i‡(
fd
 >= 0) {

3624 i‡((
	`io˘l
(
fd
, 
SG_GET_VERSION_NUM
, &
v
) < 0) || (v < 30000)) {

3625 
	`Ârötf
(
°dîr
, "requiresÜk 2.4 (sg driver),Ük 2.6 orÜk 3 "

3627 
	`˛o£
(
fd
);

3630 
	`˛o£
(
fd
);

3631  
	`›í
(
«me
, 
O_RDWR
 | 
O_NONBLOCK
);

3634  
fd
;

3635 
	}
}

3638 
	$ußge
(c⁄° *
îπext
)

3640 i‡(
îπext
)

3641 
	`Ârötf
(
°dîr
, "Eº‹: sgöfo: %s\n", 
îπext
);

3642 
	`Ârötf
(
°dîr
, "Usage: sginfo [-options] [device] "

3644 
	`Âuts
("\tAllowed optionsáre:\n"

3661 "\t\t-Fhód - s‹àby hód\n", 
°dout
);

3662 
	`Âuts
("\t-g Access Rigid Disk Drive Geometry Page.\n"

3678 "\n", 
°dout
);

3679 
	`Âuts
("\tOnly one ofÅhe followingÅhree options can be specified.\n"

3680 "\tN⁄êo‡the£Åhªêim∂õ†thêcuºíàvÆue†¨êªtu∫ed.\n", 
°dout
);

3681 
	`Âuts
("\t-m Access modifiable fields instead of current values\n"

3687 
°dout
);

3688 
	`¥ötf
("\t sginfo version: %s; See manÖage for more details.\n",

3689 
vîsi⁄_°r
);

3690 
	`exô
(2);

3691 
	}
}

3693 
	$maö
(
¨gc
, *
¨gv
[])

3695 
k
, 
j
, 
n
;

3696 
unum
, 
unum2
;

3697 
decode_ö_hex
 = 0;

3698 
c
;

3699 * 
˝
;

3700 
°©us
 = 0;

3701 
tmp
;

3702 
m∑ge_öfo
 
mp_i
;

3703 
öquúy_vîbosôy
 = 0;

3704 
show_devs
 = 0, 
show_øw
 = 0;

3705 
found
 = 0;

3707 i‡(
¨gc
 < 2)

3708 
	`ußge
(
NULL
);

3709 
	`mem£t
(&
mp_i
, 0, (mp_i));

3710 (
k
 = 
	`gë›t
(
¨gc
, 
¨gv
, "6aAcCdDeEfgGiIlmMnNPrRsSTvVXzF:t:u:")) !=

3711 
EOF
) {

3712 
c
 = ()
k
;

3713 
c
) {

3715 
mode6byã
 = 1;

3718 
öquúy_vîbosôy
 = 1;

3719 
£rül_numbî
 = 1;

3720 
mp_i
.
∑ge
 = 
MP_LIST_PAGES
;

3723 
öquúy_vîbosôy
 = 1;

3724 
£rül_numbî
 = 1;

3725 
mp_i
.
∑ge
 = 
MP_LIST_PAGES
;

3726 
mp_i
.
sub∑ge
 = 
MP_LIST_SUBPAGES
;

3729 
mp_i
.
∑ge
 = 0x8;

3732 
mp_i
.
∑ge
 = 0xa;

3735 
de„˘
 = 1;

3738 
mp_i
.
∑ge
 = 0x2;

3741 
mp_i
.
∑ge
 = 0x1;

3744 
mp_i
.
∑ge
 = 0xa;

3745 
mp_i
.
sub∑ge
 = 0x1;

3748 
mp_i
.
∑ge
 = 0x3;

3751 i‡(!
	`°rˇ£cmp
(
›èrg
, "logical"))

3752 
de„˘f‹m©
 = 0x0;

3753 i‡(!
	`°rˇ£cmp
(
›èrg
, "lba64"))

3754 
de„˘f‹m©
 = 0x3;

3755 i‡(!
	`°rˇ£cmp
(
›èrg
, "physical"))

3756 
de„˘f‹m©
 = 0x5;

3757 i‡(!
	`°rˇ£cmp
(
›èrg
, "index"))

3758 
de„˘f‹m©
 = 0x4;

3759 i‡(!
	`°rˇ£cmp
(
›èrg
, "head"))

3760 
de„˘f‹m©
 = 
HEAD_SORT_TOKEN
;

3762 
	`ußge
("Illegal -FÖarameter, must be one ofÜogical, "

3766 
mp_i
.
∑ge
 = 0x4;

3769 
grown_de„˘
 = 1;

3772 
öquúy_vîbosôy
 = (2 == inquiry_verbosity) ? 1 : 2;

3775 
mp_i
.
∑ge
 = 0x1c;

3778 
show_devs
 = 1;

3781 i‡(0 =
mp_i
.
∑ge_c⁄åﬁ
)

3782 
mp_i
.
∑ge_c⁄åﬁ
 = 1;

3784 
	`ußge
("can only have one of 'm', 'M'ánd 'S'");

3787 i‡(0 =
mp_i
.
∑ge_c⁄åﬁ
)

3788 
mp_i
.
∑ge_c⁄åﬁ
 = 2;

3790 
	`ußge
("can only have one of 'M', 'm'ánd 'S'");

3793 
mp_i
.
∑ge
 = 0xc;

3796 
√g©e_•_bô
 = 1;

3799 
mp_i
.
∑ge
 = 0x1a;

3802 
show_øw
 = 1;

3805 
ª∂a˚
 = 1;

3808 
£rül_numbî
 = 1;

3811 i‡(0 =
mp_i
.
∑ge_c⁄åﬁ
)

3812 
mp_i
.
∑ge_c⁄åﬁ
 = 3;

3814 
	`ußge
("can only have one of 'S', 'm'ánd 'M'");

3817 
åa˚_cmd
++;

3821 i‡('u' =
c
)

3822 
decode_ö_hex
 = 1;

3823 ' ' =*
›èrg
)

3824 
›èrg
++;

3825 i‡('0' =*
›èrg
) {

3826 
unum
 = 0;

3827 
unum2
 = 0;

3828 
j
 = 
	`ssˇnf
(
›èrg
, "0x%x,0x%x", &
unum
, &
unum2
);

3829 
mp_i
.
∑ge
 = 
unum
;

3830 i‡(1 =
j
) {

3831 
˝
 = 
	`°rchr
(
›èrg
, ',');

3832 i‡(
˝
 && (1 =
	`ssˇnf
(˝, ",%d", &
mp_i
.
sub∑ge
)))

3833 
j
 = 2;

3835 
mp_i
.
sub∑ge
 = 
unum2
;

3837 
j
 = 
	`ssˇnf
(
›èrg
, "%d,%d", &
mp_i
.
∑ge
, &mp_i.
sub∑ge
);

3838 i‡(1 =
j
)

3839 
mp_i
.
sub∑ge
 = 0;

3840 i‡(
j
 < 1)

3841 
	`ußge
("argument following '-u' should be of form "

3843 i‡((
mp_i
.
∑ge
 < 0Ë|| (mp_i.∑gê> 
MP_LIST_PAGES
) ||

3844 (
mp_i
.
sub∑ge
 < 0Ë|| (mp_i.sub∑gê> 
MP_LIST_SUBPAGES
))

3845 
	`ußge
("modeÖagesÑange from 0 .. 63, subpages from "

3847 
found
 = 1;

3850 
	`Ârötf
(
°dout
, "sgöfÿvîsi⁄: %s\n", 
vîsi⁄_°r
);

3853 
mp_i
.
∑ge
 = 0x7;

3856 
x_öãrÁ˚
 = 1;

3859 
sögÀ_„tch
 = 1;

3862 
	`ußge
("Unknown option");

3865 
	`Ârötf
(
°dout
, "Unknow¿›ti⁄ '-%c' (asciò0x%02x)\n", 
c
, c);

3866 
	`ußge
("bad option");

3870 i‡(
ª∂a˚
 && !
x_öãrÁ˚
)

3871 
	`ußge
("-RÑequires -X");

3872 i‡(
ª∂a˚
 && 
mp_i
.
∑ge_c⁄åﬁ
)

3873 
	`ußge
("-RÇotállowed for -m, -M or -S");

3874 i‡(
x_öãrÁ˚
 && 
ª∂a˚
 && ((
MP_LIST_PAGES
 =
mp_i
.
∑ge
) ||

3875 (
MP_LIST_SUBPAGES
 =
mp_i
.
sub∑ge
)))

3876 
	`ußge
("-XR can be used only withÉxactly oneÖage.");

3878 i‡(
ª∂a˚
 && (3 !
mp_i
.
∑ge_c⁄åﬁ
)) {

3879 
	`mem£t
 (
is_hex
, 0, 32);

3880 
j
 = 1; j < 
¨gc
 - 
›töd
; j++) {

3881 i‡(
	`°∫cmp
(
¨gv
[
›töd
 + 
j
], "0x", 2) == 0) {

3882 *
≤t
 = 
¨gv
[
›töd
 + 
j
] + 2;

3883 
ª∂a˚mít_vÆues
[
j
] = 0;

3885 *
≤t
) {

3886 i‡(*
≤t
 >= 'a' && *pnt <= 'f')

3887 *
≤t
 -= 32;

3888 
ª∂a˚mít_vÆues
[
j
] = (replacement_values[j] << 4) |

3889 (*
≤t
 > '9' ? (*pnt - 'A' + 10) : (*pnt - '0'));

3890 
≤t
++;

3894 i‡(
¨gv
[
›töd
 + 
j
][0] == '@') {

3896 
Àn
 = 
	`°æí
(
¨gv
[
›töd
 + 
j
] + 1);

3898 i‡((
Àn
 & 1Ë|| (À¿!()
	`°r•n
(
¨gv
[
›töd
 + 
j
] + 1,

3900 
	`ußge
("OddÇumber of chars orÇon-hex digit in "

3903 
ª∂a˚mít_vÆues
[
j
] = (Ë
¨gv
[
›töd
 + j];

3904 
is_hex
[
j
] = 1;

3908 
n
 = 
	`ssˇnf
(
¨gv
[
›töd
 + 
j
], "%ld", &
tmp
);

3909 
ª∂a˚mít_vÆues
[
j
] = ((1 =
n
Ë? 
tmp
 : 0);

3911 
n_ª∂a˚mít_vÆues
 = 
¨gc
 - 
›töd
 - 1;

3913 i‡(
show_devs
) {

3914 
	`show_devi˚s
(0);

3915 
	`exô
(0);

3917 i‡(
show_øw
) {

3918 
	`show_devi˚s
(1);

3919 
	`exô
(0);

3921 i‡(
›töd
 >
¨gc
)

3922 
	`ußge
("no deviceÇame given");

3923 
glob_fd
 = 
	`›í_sg_io_dev
(
devi˚_«me
 = 
¨gv
[
›töd
]);

3924 i‡(
glob_fd
 < 0) {

3925 i‡(-9999 =
glob_fd
)

3926 
	`Ârötf
(
°dîr
, "Couldn't find sg device correspondingÅo %s\n",

3927 
devi˚_«me
);

3929 
	`≥º‹
("sginfo(open)");

3930 
	`Ârötf
(
°dîr
, "file=%s, orÇo corresponding sg device found\n",

3931 
devi˚_«me
);

3932 
	`Ârötf
(
°dîr
, "Is sg driverÜoaded?\n");

3934 
	`exô
(1);

3938 i‡(!
x_öãrÁ˚
)

3939 
	`¥ötf
("\n");

3941 i‡(! (
found
 || 
mp_i
.
∑ge
 || mp_i.
sub∑ge
 || 
öquúy_vîbosôy
 ||

3942 
£rül_numbî
)) {

3943 i‡(
åa˚_cmd
 > 0)

3944 
	`Ârötf
(
°dout
, "nothing selected so doá short INQUIRY\n");

3945 
öquúy_vîbosôy
 = 1;

3948 
°©us
 |
	`do_öquúy
(&
mp_i
.
≥ri_ty≥
, &mp_i.
öq_byã6
,

3949 
öquúy_vîbosôy
);

3950 i‡(
£rül_numbî
)

3951 
	`do_£rül_numbî
();

3952 i‡(
mp_i
.
∑ge
 > 0)

3953 
°©us
 |
	`do_u£r_∑ge
(&
mp_i
, 
decode_ö_hex
);

3954 i‡(
de„˘
)

3955 
°©us
 |
	`ªad_de„˘_li°
(0);

3956 i‡(
grown_de„˘
)

3957 
°©us
 |
	`ªad_de„˘_li°
(1);

3959  
°©us
 ? 1 : 0;

3960 
	}
}

	@src/sgm_dd.c

32 
	#_XOPEN_SOURCE
 500

	)

33 #i‚de‡
_GNU_SOURCE


34 
	#_GNU_SOURCE


	)

37 
	~<uni°d.h
>

38 
	~<f˙é.h
>

39 
	~<°dio.h
>

40 
	~<°dlib.h
>

41 
	~<°rög.h
>

42 
	~<sig«l.h
>

43 
	~<˘y≥.h
>

44 
	~<î∫o.h
>

45 
	~<limôs.h
>

46 
	#__STDC_FORMAT_MACROS
 1

	)

47 
	~<öây≥s.h
>

48 
	~<sys/io˘l.h
>

49 
	~<sys/ty≥s.h
>

50 
	~<sys/°©.h
>

51 
	~<sys/sysma¸os.h
>

52 
	~<sys/mm™.h
>

53 
	~<sys/time.h
>

54 
	~<löux/maj‹.h
>

55 
	~<löux/fs.h
>

57 #ifde‡
HAVE_CONFIG_H


58 
	~"c⁄fig.h
"

60 
	~"sg_lib.h
"

61 
	~"sg_cmds_basic.h
"

62 
	~"sg_io_löux.h
"

67 #ifde‡
SG_WANT_SHARED_MMAP_IO


68 c⁄° * 
	gvîsi⁄_°r
 = "1.37 20130507 shared_mmap";

70 c⁄° * 
	gvîsi⁄_°r
 = "1.37 20130507";

73 
	#DEF_BLOCK_SIZE
 512

	)

74 
	#DEF_BLOCKS_PER_TRANSFER
 128

	)

75 
	#DEF_BLOCKS_PER_2048TRANSFER
 32

	)

76 
	#DEF_SCSI_CDBSZ
 10

	)

77 
	#MAX_SCSI_CDBSZ
 16

	)

79 
	#ME
 "sgm_dd: "

	)

83 #i‚de‡
SG_FLAG_MMAP_IO


84 
	#SG_FLAG_MMAP_IO
 4

	)

87 
	#SENSE_BUFF_LEN
 64

	)

88 
	#READ_CAP_REPLY_LEN
 8

	)

89 
	#RCAP16_REPLY_LEN
 32

	)

91 #i‚de‡
SERVICE_ACTION_IN


92 
	#SERVICE_ACTION_IN
 0x9e

	)

94 #i‚de‡
SAI_READ_CAPACITY_16


95 
	#SAI_READ_CAPACITY_16
 0x10

	)

98 #ifde‡
SG_WANT_SHARED_MMAP_IO


99 #i‚de‡
SG_FLAG_SHARED_MMAP_IO


100 
	#SG_FLAG_SHARED_MMAP_IO
 8

	)

102 #i‚de‡
SG_INFO_SHARED_MMAP_IO


103 
	#SG_INFO_SHARED_MMAP_IO
 8

	)

107 
	#DEF_TIMEOUT
 60000

	)

109 #i‚de‡
RAW_MAJOR


110 
	#RAW_MAJOR
 255

	)

113 
	#FT_OTHER
 1

	)

114 
	#FT_SG
 2

	)

115 
	#FT_RAW
 4

	)

116 
	#FT_DEV_NULL
 8

	)

117 
	#FT_ST
 16

	)

118 
	#FT_BLOCK
 32

	)

119 
	#FT_ERROR
 64

	)

121 
	#DEV_NULL_MINOR_NUM
 3

	)

123 
	#MIN_RESERVED_SIZE
 8192

	)

125 
	gsum_of_ªsids
 = 0;

127 
öt64_t
 
	gdd_cou¡
 = -1;

128 
öt64_t
 
	gªq_cou¡
 = 0;

129 
öt64_t
 
	gö_fuŒ
 = 0;

130 
	gö_∑πül
 = 0;

131 
öt64_t
 
	gout_fuŒ
 = 0;

132 
	gout_∑πül
 = 0;

133 
	gvîbo£
 = 0;

135 
	gdo_time
 = 0;

136 
	g°¨t_tm_vÆid
 = 0;

137 
timevÆ
 
	g°¨t_tm
;

138 
	gblk_sz
 = 0;

140 #ifde‡
SG_WANT_SHARED_MMAP_IO


141 
	gsh¨ed_mm_ªq
 = 0;

142 
	gsh¨ed_mm_d⁄e
 = 0;

145 c⁄° * 
	g¥oc_Ælow_dio
 = "/proc/scsi/sg/allow_dio";

147 
	sÊags_t
 {

148 
	m≠≥nd
;

149 
	mdio
;

150 
	mdúe˘
;

151 
	mdpo
;

152 
	mdsync
;

153 
	mex˛
;

154 
	mfua
;

155 #ifde‡
SG_WANT_SHARED_MMAP_IO


156 
	msmm≠
;

162 
ö°Æl_h™dÀr
(
sig_num
, (*
sig_h™dÀr
Ë(
sig
))

164 
siga˘i⁄
 
siga˘
;

165 
	`siga˘i⁄
 (
sig_num
, 
NULL
, &
siga˘
);

166 i‡(
siga˘
.
ß_h™dÀr
 !
SIG_IGN
)

168 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

169 
	`sigem±y£t
 (&
siga˘
.
ß_mask
);

170 
siga˘
.
ß_Êags
 = 0;

171 
	`siga˘i⁄
 (
sig_num
, &
siga˘
, 
NULL
);

173 
	}
}

176 
	$¥öt_°©s
()

178 i‡(0 !
dd_cou¡
)

179 
	`Ârötf
(
°dîr
, "Ñemaöög block cou¡=%"
PRId64
"\n", 
dd_cou¡
);

180 
	`Ârötf
(
°dîr
, "%"
PRId64
"+%dÑec‹d†ö\n", 
ö_fuŒ
 - 
ö_∑πül
,

181 
ö_∑πül
);

182 
	`Ârötf
(
°dîr
, "%"
PRId64
"+%dÑec‹d†out\n", 
out_fuŒ
 - 
out_∑πül
,

183 
out_∑πül
);

184 
	}
}

187 
	$ˇlc_duøti⁄_throughput
(
c⁄tö
)

189 
timevÆ
 
íd_tm
, 
ªs_tm
;

190 
a
, 
b
;

192 i‡(
°¨t_tm_vÆid
 && (
°¨t_tm
.
tv_£c
 || sèπ_tm.
tv_u£c
)) {

193 
	`gëtimeofday
(&
íd_tm
, 
NULL
);

194 
ªs_tm
.
tv_£c
 = 
íd_tm
.tv_£¯- 
°¨t_tm
.tv_sec;

195 
ªs_tm
.
tv_u£c
 = 
íd_tm
.tv_u£¯- 
°¨t_tm
.tv_usec;

196 i‡(
ªs_tm
.
tv_u£c
 < 0) {

197 --
ªs_tm
.
tv_£c
;

198 
ªs_tm
.
tv_u£c
 += 1000000;

200 
a
 = 
ªs_tm
.
tv_£c
;

201 
a
 +(0.000001 * 
ªs_tm
.
tv_u£c
);

202 
b
 = ()
blk_sz
 * (
ªq_cou¡
 - 
dd_cou¡
);

203 
	`Ârötf
(
°dîr
, "timeÅoÅransfer data%s: %d.%06d secs",

204 (
c⁄tö
 ? " sÿÁr" : ""), ()
ªs_tm
.
tv_£c
,

205 ()
ªs_tm
.
tv_u£c
);

206 i‡((
a
 > 0.00001Ë&& (
b
 > 511))

207 
	`Ârötf
(
°dîr
, "áà%.2‡MB/£c\n", 
b
 / (
a
 * 1000000.0));

209 
	`Ârötf
(
°dîr
, "\n");

211 
	}
}

214 
	$öãºu±_h™dÀr
(
sig
)

216 
siga˘i⁄
 
siga˘
;

218 
siga˘
.
ß_h™dÀr
 = 
SIG_DFL
;

219 
	`sigem±y£t
 (&
siga˘
.
ß_mask
);

220 
siga˘
.
ß_Êags
 = 0;

221 
	`siga˘i⁄
 (
sig
, &
siga˘
, 
NULL
);

222 
	`Ârötf
(
°dîr
, "Interrupted by signal,");

223 
	`¥öt_°©s
 ();

224 i‡(
do_time
)

225 
	`ˇlc_duøti⁄_throughput
(0);

226 
	`kûl
 (
	`gëpid
 (), 
sig
);

227 
	}
}

230 
	$sigöfo_h™dÀr
(
sig
)

232 
sig
 = sig;

233 
	`Ârötf
(
°dîr
, "ProgressÑeport, continuing ...\n");

234 
	`¥öt_°©s
();

235 i‡(
do_time
)

236 
	`ˇlc_duøti⁄_throughput
(1);

237 
	}
}

240 
	$dd_fûëy≥
(c⁄° * 
fûíame
)

242 
°©
 
°
;

243 
size_t
 
Àn
 = 
	`°æí
(
fûíame
);

245 i‡((1 =
Àn
Ë&& ('.' =
fûíame
[0]))

246  
FT_DEV_NULL
;

247 i‡(
	`°©
(
fûíame
, &
°
) < 0)

248  
FT_ERROR
;

249 i‡(
	`S_ISCHR
(
°
.
°_mode
)) {

250 i‡((
MEM_MAJOR
 =
	`maj‹
(
°
.
°_rdev
)) &&

251 (
DEV_NULL_MINOR_NUM
 =
	`mö‹
(
°
.
°_rdev
)))

252  
FT_DEV_NULL
;

253 i‡(
RAW_MAJOR
 =
	`maj‹
(
°
.
°_rdev
))

254  
FT_RAW
;

255 i‡(
SCSI_GENERIC_MAJOR
 =
	`maj‹
(
°
.
°_rdev
))

256  
FT_SG
;

257 i‡(
SCSI_TAPE_MAJOR
 =
	`maj‹
(
°
.
°_rdev
))

258  
FT_ST
;

259 } i‡(
	`S_ISBLK
(
°
.
°_mode
))

260  
FT_BLOCK
;

261  
FT_OTHER
;

262 
	}
}

265 
	$dd_fûëy≥_°r
(
·
, * 
buff
)

267 
off
 = 0;

269 i‡(
FT_DEV_NULL
 & 
·
)

270 
off
 +
	`¢¥ötf
(
buff
 + off, 32, "null device ");

271 i‡(
FT_SG
 & 
·
)

272 
off
 +
	`¢¥ötf
(
buff
 + off, 32, "SCSI generic (sg) device ");

273 i‡(
FT_BLOCK
 & 
·
)

274 
off
 +
	`¢¥ötf
(
buff
 + off, 32, "block device ");

275 i‡(
FT_ST
 & 
·
)

276 
off
 +
	`¢¥ötf
(
buff
 + off, 32, "SCSIÅape device ");

277 i‡(
FT_RAW
 & 
·
)

278 
off
 +
	`¢¥ötf
(
buff
 + off, 32, "raw device ");

279 i‡(
FT_OTHER
 & 
·
)

280 
off
 +
	`¢¥ötf
(
buff
 + off, 32, "other (perhaps ordinary file) ");

281 i‡(
FT_ERROR
 & 
·
)

282 
off
 +
	`¢¥ötf
(
buff
 + off, 32, "unableÅo 'stat' file ");

283  
buff
;

284 
	}
}

287 
	$ußge
()

289 
	`Ârötf
(
°dîr
, "Usage: "

295 
	`Ârötf
(
°dîr
,

310 
	`Ârötf
(
°dîr
,

319 #ifde‡
SG_WANT_SHARED_MMAP_IO


336 
	}
}

340 
	$scsi_ªad_ˇ∑côy
(
sg_fd
, 
öt64_t
 * 
num_£˘
, * 
£˘_sz
)

342 
k
, 
ªs
;

343 
ui
;

344 
rcBuff
[
RCAP16_REPLY_LEN
];

345 
vîb
;

347 
vîb
 = (
vîbo£
 ? verbose - 1: 0);

348 
ªs
 = 
	`sg_Œ_ªadˇp_10
(
sg_fd
, 0, 0, 
rcBuff
, 
READ_CAP_REPLY_LEN
, 0,

349 
vîb
);

350 i‡(0 !
ªs
)

351  
ªs
;

353 i‡((0xf‡=
rcBuff
[0]) && (0xff ==ÑcBuff[1]) && (0xff ==ÑcBuff[2]) &&

354 (0xf‡=
rcBuff
[3])) {

355 
öt64_t
 
ls
;

357 
ªs
 = 
	`sg_Œ_ªadˇp_16
(
sg_fd
, 0, 0, 
rcBuff
, 
RCAP16_REPLY_LEN
, 0,

358 
vîb
);

359 i‡(0 !
ªs
)

360  
ªs
;

361 
k
 = 0, 
ls
 = 0; k < 8; ++k) {

362 
ls
 <<= 8;

363 
ls
 |
rcBuff
[
k
];

365 *
num_£˘
 = 
ls
 + 1;

366 *
£˘_sz
 = (
rcBuff
[8] << 24) | (rcBuff[9] << 16) |

367 (
rcBuff
[10] << 8) |ÑcBuff[11];

369 
ui
 = ((
rcBuff
[0] << 24) | (rcBuff[1] << 16) | (rcBuff[2] << 8) |

370 
rcBuff
[3]);

372 *
num_£˘
 = (
öt64_t
)
ui
 + 1;

373 *
£˘_sz
 = (
rcBuff
[4] << 24) | (rcBuff[5] << 16) |

374 (
rcBuff
[6] << 8) |ÑcBuff[7];

376 i‡(
vîbo£
)

377 
	`Ârötf
(
°dîr
, "Çumbî o‡blocks=%" 
PRId64
 " [0x%" 
PRIx64


378 "], block size=%d\n", *
num_£˘
, *num_£˘, *
£˘_sz
);

380 
	}
}

385 
	$ªad_blkdev_ˇ∑côy
(
sg_fd
, 
öt64_t
 * 
num_£˘
, * 
£˘_sz
)

387 #ifde‡
BLKSSZGET


388 i‡((
	`io˘l
(
sg_fd
, 
BLKSSZGET
, 
£˘_sz
) < 0) && (*sect_sz > 0)) {

389 
	`≥º‹
("BLKSSZGET ioctlÉrror");

392 #ifde‡
BLKGETSIZE64


393 
uöt64_t
 
uŒ
;

395 i‡(
	`io˘l
(
sg_fd
, 
BLKGETSIZE64
, &
uŒ
) < 0) {

397 
	`≥º‹
("BLKGETSIZE64 ioctlÉrror");

400 *
num_£˘
 = ((
öt64_t
)
uŒ
 / (öt64_t)*
£˘_sz
);

401 i‡(
vîbo£
)

402 
	`Ârötf
(
°dîr
, " [bgs64]Çumbî o‡blocks=%" 
PRId64
 " [0x%"

403 
PRIx64
 "], block size=%d\n", *
num_£˘
, *num_sect,

404 *
£˘_sz
);

406 
ul
;

408 i‡(
	`io˘l
(
sg_fd
, 
BLKGETSIZE
, &
ul
) < 0) {

409 
	`≥º‹
("BLKGETSIZE ioctlÉrror");

412 *
num_£˘
 = (
öt64_t
)
ul
;

413 i‡(
vîbo£
)

414 
	`Ârötf
(
°dîr
, " [bgs]Çumbî o‡blocks=%" 
PRId64
 " [0x%"

415 
PRIx64
 "], block size=%d\n", *
num_£˘
, *num_sect,

416 *
£˘_sz
);

421 i‡(
vîbo£
)

422 
	`Ârötf
(
°dîr
, " BLKSSZGET+BLKGETSIZE ioctlÇotávailable\n");

423 *
num_£˘
 = 0;

424 *
£˘_sz
 = 0;

427 
	}
}

430 
	$sg_buûd_scsi_cdb
(* 
cdbp
, 
cdb_sz
, 
blocks
,

431 
öt64_t
 
°¨t_block
, 
wrôe_åue
, 
fua
, 
dpo
)

433 
rd_›code
[] = {0x8, 0x28, 0xa8, 0x88};

434 
wr_›code
[] = {0xa, 0x2a, 0xaa, 0x8a};

435 
sz_öd
;

437 
	`mem£t
(
cdbp
, 0, 
cdb_sz
);

438 i‡(
dpo
)

439 
cdbp
[1] |= 0x10;

440 i‡(
fua
)

441 
cdbp
[1] |= 0x8;

442 
cdb_sz
) {

444 
sz_öd
 = 0;

445 
cdbp
[0] = ()(
wrôe_åue
 ? 
wr_›code
[
sz_öd
] :

446 
rd_›code
[
sz_öd
]);

447 
cdbp
[1] = ()((
°¨t_block
 >> 16) & 0x1f);

448 
cdbp
[2] = ()((
°¨t_block
 >> 8) & 0xff);

449 
cdbp
[3] = ()(
°¨t_block
 & 0xff);

450 
cdbp
[4] = (256 =
blocks
) ? 0 : ()blocks;

451 i‡(
blocks
 > 256) {

452 
	`Ârötf
(
°dîr
, 
ME
 "for 6 byte commands, maximumÇumber of "

456 i‡((
°¨t_block
 + 
blocks
 - 1) & (~0x1fffff)) {

457 
	`Ârötf
(
°dîr
, 
ME
 "for 6 byte commands, can'táddress blocks"

461 i‡(
dpo
 || 
fua
) {

462 
	`Ârötf
(
°dîr
, 
ME
 "for 6 byte commands,Çeither dpoÇor fua"

468 
sz_öd
 = 1;

469 
cdbp
[0] = ()(
wrôe_åue
 ? 
wr_›code
[
sz_öd
] :

470 
rd_›code
[
sz_öd
]);

471 
cdbp
[2] = ()((
°¨t_block
 >> 24) & 0xff);

472 
cdbp
[3] = ()((
°¨t_block
 >> 16) & 0xff);

473 
cdbp
[4] = ()((
°¨t_block
 >> 8) & 0xff);

474 
cdbp
[5] = ()(
°¨t_block
 & 0xff);

475 
cdbp
[7] = ()((
blocks
 >> 8) & 0xff);

476 
cdbp
[8] = ()(
blocks
 & 0xff);

477 i‡(
blocks
 & (~0xffff)) {

478 
	`Ârötf
(
°dîr
, 
ME
 "for 10 byte commands, maximumÇumber of "

484 
sz_öd
 = 2;

485 
cdbp
[0] = ()(
wrôe_åue
 ? 
wr_›code
[
sz_öd
] :

486 
rd_›code
[
sz_öd
]);

487 
cdbp
[2] = ()((
°¨t_block
 >> 24) & 0xff);

488 
cdbp
[3] = ()((
°¨t_block
 >> 16) & 0xff);

489 
cdbp
[4] = ()((
°¨t_block
 >> 8) & 0xff);

490 
cdbp
[5] = ()(
°¨t_block
 & 0xff);

491 
cdbp
[6] = ()((
blocks
 >> 24) & 0xff);

492 
cdbp
[7] = ()((
blocks
 >> 16) & 0xff);

493 
cdbp
[8] = ()((
blocks
 >> 8) & 0xff);

494 
cdbp
[9] = ()(
blocks
 & 0xff);

497 
sz_öd
 = 3;

498 
cdbp
[0] = ()(
wrôe_åue
 ? 
wr_›code
[
sz_öd
] :

499 
rd_›code
[
sz_öd
]);

500 
cdbp
[2] = ()((
°¨t_block
 >> 56) & 0xff);

501 
cdbp
[3] = ()((
°¨t_block
 >> 48) & 0xff);

502 
cdbp
[4] = ()((
°¨t_block
 >> 40) & 0xff);

503 
cdbp
[5] = ()((
°¨t_block
 >> 32) & 0xff);

504 
cdbp
[6] = ()((
°¨t_block
 >> 24) & 0xff);

505 
cdbp
[7] = ()((
°¨t_block
 >> 16) & 0xff);

506 
cdbp
[8] = ()((
°¨t_block
 >> 8) & 0xff);

507 
cdbp
[9] = ()(
°¨t_block
 & 0xff);

508 
cdbp
[10] = ()((
blocks
 >> 24) & 0xff);

509 
cdbp
[11] = ()((
blocks
 >> 16) & 0xff);

510 
cdbp
[12] = ()((
blocks
 >> 8) & 0xff);

511 
cdbp
[13] = ()(
blocks
 & 0xff);

514 
	`Ârötf
(
°dîr
, 
ME
 "expected cdb size of 6, 10, 12, or 16 but got"

515 " %d\n", 
cdb_sz
);

519 
	}
}

526 
	$sg_ªad
(
sg_fd
, * 
buff
, 
blocks
, 
öt64_t
 
‰om_block
,

527 
bs
, 
cdbsz
, 
fua
, 
dpo
, 
do_mm≠
)

529 
rdCmd
[
MAX_SCSI_CDBSZ
];

530 
£n£Buff
[
SENSE_BUFF_LEN
];

531 
sg_io_hdr
 
io_hdr
;

532 
k
, 
ªs
;

534 i‡(
	`sg_buûd_scsi_cdb
(
rdCmd
, 
cdbsz
, 
blocks
, 
‰om_block
, 0, 
fua
, 
dpo
)) {

535 
	`Ârötf
(
°dîr
, 
ME
 "badÑd cdb buûd, from_block=%" 
PRId64


536 ", blocks=%d\n", 
‰om_block
, 
blocks
);

537  
SG_LIB_SYNTAX_ERROR
;

539 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr
));

540 
io_hdr
.
öãrÁ˚_id
 = 'S';

541 
io_hdr
.
cmd_Àn
 = 
cdbsz
;

542 
io_hdr
.
cmdp
 = 
rdCmd
;

543 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

544 
io_hdr
.
dx„r_Àn
 = 
bs
 * 
blocks
;

545 i‡(! 
do_mm≠
)

546 
io_hdr
.
dx„Ω
 = 
buff
;

547 
io_hdr
.
mx_sb_Àn
 = 
SENSE_BUFF_LEN
;

548 
io_hdr
.
sbp
 = 
£n£Buff
;

549 
io_hdr
.
timeout
 = 
DEF_TIMEOUT
;

550 
io_hdr
.
∑ck_id
 = ()
‰om_block
;

551 i‡(
do_mm≠
)

552 
io_hdr
.
Êags
 |
SG_FLAG_MMAP_IO
;

553 i‡(
vîbo£
 > 2) {

554 
	`Ârötf
(
°dîr
, "Ñead cdb: ");

555 
k
 = 0; k < 
cdbsz
; ++k)

556 
	`Ârötf
(
°dîr
, "%02x ", 
rdCmd
[
k
]);

557 
	`Ârötf
(
°dîr
, "\n");

561 ((
ªs
 = 
	`io˘l
(
sg_fd
, 
SG_IO
, &
io_hdr
)Ë< 0Ë&& (
EINTR
 =
î∫o
))

562 
	`¶ìp
(1);

563 i‡(
ªs
 < 0) {

564 
	`≥º‹
(
ME
 "SG_IOÉrror (sg_read)");

568 ((
ªs
 = 
	`wrôe
(
sg_fd
, &
io_hdr
, (io_hdr))) < 0) &&

569 (
EINTR
 =
î∫o
))

571 i‡(
ªs
 < 0) {

572 i‡(
ENOMEM
 =
î∫o
)

574 
	`≥º‹
("reading (wr) on sg device,Érror");

578 ((
ªs
 = 
	`ªad
(
sg_fd
, &
io_hdr
, (io_hdr))) < 0) &&

579 (
EINTR
 =
î∫o
))

581 i‡(
ªs
 < 0) {

582 
	`≥º‹
("reading (rd) on sg device,Érror");

586 i‡(
vîbo£
 > 2)

587 
	`Ârötf
(
°dîr
, " duøti⁄=%u ms\n", 
io_hdr
.
duøti⁄
);

588 
ªs
 = 
	`sg_îr_ˇãg‹y3
(&
io_hdr
);

589 
ªs
) {

590 
SG_LIB_CAT_CLEAN
:

592 
SG_LIB_CAT_RECOVERED
:

593 
	`sg_chk_n_¥öt3
("Ródög, c⁄töuög", &
io_hdr
, 
vîbo£
 > 1);

595 
SG_LIB_CAT_NOT_READY
:

596 
SG_LIB_CAT_MEDIUM_HARD
:

597  
ªs
;

598 
SG_LIB_CAT_ABORTED_COMMAND
:

599 
SG_LIB_CAT_UNIT_ATTENTION
:

600 
SG_LIB_CAT_ILLEGAL_REQ
:

602 
	`sg_chk_n_¥öt3
("ªadög", &
io_hdr
, 
vîbo£
 > 1);

603  
ªs
;

605 
sum_of_ªsids
 +
io_hdr
.
ªsid
;

606 #ifde‡
SG_DEBUG


607 
	`Ârötf
(
°dîr
, "duøti⁄=%u ms\n", 
io_hdr
.
duøti⁄
);

610 
	}
}

617 
sg_wrôe
(
sg_fd
, * 
buff
, 
blocks
, 
öt64_t
 
to_block
,

618 
bs
, 
cdbsz
, 
fua
, 
dpo
, 
do_mm≠
,

619 #ifde‡
SG_WANT_SHARED_MMAP_IO


620 
mm≠_sh¨óbÀ
,

622 * 
di›
)

624 
	gwrCmd
[
MAX_SCSI_CDBSZ
];

625 
	g£n£Buff
[
SENSE_BUFF_LEN
];

626 
sg_io_hdr
 
	gio_hdr
;

627 
	gk
, 
	gªs
;

629 i‡(
sg_buûd_scsi_cdb
(
wrCmd
, 
cdbsz
, 
blocks
, 
to_block
, 1, 
fua
, 
dpo
)) {

630 
Ârötf
(
°dîr
, 
ME
 "bad w∏cdb buûd,Åo_block=%"
PRId64
", blocks=%d\n",

631 
to_block
, 
blocks
);

632  
	gSG_LIB_SYNTAX_ERROR
;

635 
mem£t
(&
io_hdr
, 0, (
sg_io_hdr
));

636 
	gio_hdr
.
	göãrÁ˚_id
 = 'S';

637 
	gio_hdr
.
	gcmd_Àn
 = 
cdbsz
;

638 
	gio_hdr
.
	gcmdp
 = 
wrCmd
;

639 
	gio_hdr
.
	gdx„r_dúe˘i⁄
 = 
SG_DXFER_TO_DEV
;

640 
	gio_hdr
.
	gdx„r_Àn
 = 
bs
 * 
blocks
;

641 #ifde‡
SG_WANT_SHARED_MMAP_IO


642 i‡(
	gmm≠_sh¨óbÀ
 || (! 
	gdo_mm≠
))

644 i‡(! 
	gdo_mm≠
)

646 
	gio_hdr
.
	gdx„Ω
 = 
buff
;

647 
	gio_hdr
.
	gmx_sb_Àn
 = 
SENSE_BUFF_LEN
;

648 
	gio_hdr
.
	gsbp
 = 
£n£Buff
;

649 
	gio_hdr
.
	gtimeout
 = 
DEF_TIMEOUT
;

650 
	gio_hdr
.
	g∑ck_id
 = ()
to_block
;

651 #ifde‡
SG_WANT_SHARED_MMAP_IO


652 i‡(
	gmm≠_sh¨óbÀ
) {

653 
	gio_hdr
.
	gÊags
 |
SG_FLAG_SHARED_MMAP_IO
;

654 ++
	gsh¨ed_mm_ªq
;

657  i‡(
	gdo_mm≠
)

658 
	gio_hdr
.
	gÊags
 |
SG_FLAG_MMAP_IO
;

659 i‡(
	gdi›
 && *diop)

660 
	gio_hdr
.
	gÊags
 |
SG_FLAG_DIRECT_IO
;

661 i‡(
	gvîbo£
 > 2) {

662 
Ârötf
(
°dîr
, " write cdb: ");

663 
	gk
 = 0; k < 
	gcdbsz
; ++k)

664 
Ârötf
(
°dîr
, "%02x ", 
wrCmd
[
k
]);

665 
Ârötf
(
°dîr
, "\n");

669 ((
	gªs
 = 
io˘l
(
sg_fd
, 
SG_IO
, &
io_hdr
)Ë< 0Ë&& (
	gEINTR
 =
î∫o
))

670 
¶ìp
(1);

671 i‡(
	gªs
 < 0) {

672 
≥º‹
(
ME
 "SG_IOÉrror (sg_write)");

676 ((
	gªs
 = 
wrôe
(
sg_fd
, &
io_hdr
, (io_hdr))) < 0) &&

677 (
	gEINTR
 =
î∫o
))

679 i‡(
	gªs
 < 0) {

680 i‡(
	gENOMEM
 =
î∫o
)

682 
≥º‹
("writing (wr) on sg device,Érror");

686 ((
	gªs
 = 
ªad
(
sg_fd
, &
io_hdr
, (io_hdr))) < 0) &&

687 (
	gEINTR
 =
î∫o
))

689 i‡(
	gªs
 < 0) {

690 
≥º‹
("writing (rd) on sg device,Érror");

694 i‡(
	gvîbo£
 > 2)

695 
Ârötf
(
°dîr
, " duøti⁄=%u ms\n", 
io_hdr
.
duøti⁄
);

696 
	gªs
 = 
sg_îr_ˇãg‹y3
(&
io_hdr
);

697 
	gªs
) {

698 
	gSG_LIB_CAT_CLEAN
:

700 
	gSG_LIB_CAT_RECOVERED
:

701 
sg_chk_n_¥öt3
("Wrôög, c⁄töuög", &
io_hdr
, 
vîbo£
 > 1);

703 
	gSG_LIB_CAT_NOT_READY
:

704 
SG_LIB_CAT_MEDIUM_HARD
:

705  
ªs
;

706 
	gSG_LIB_CAT_ABORTED_COMMAND
:

707 
SG_LIB_CAT_UNIT_ATTENTION
:

708 
SG_LIB_CAT_ILLEGAL_REQ
:

710 
sg_chk_n_¥öt3
("wrôög", &
io_hdr
, 
vîbo£
 > 1);

711  
	gªs
;

713 #ifde‡
SG_WANT_SHARED_MMAP_IO


714 i‡((
	gmm≠_sh¨óbÀ
Ë&& (
	gSG_INFO_SHARED_MMAP_IO
 & 
	gio_hdr
.
	göfo
))

715 ++
	gsh¨ed_mm_d⁄e
;

717 i‡(
	gdi›
 && *diop &&

718 ((
	gio_hdr
.
	göfo
 & 
	gSG_INFO_DIRECT_IO_MASK
Ë!
SG_INFO_DIRECT_IO
))

719 *
di›
 = 0;

724 
	$¥o˚ss_Êags
(c⁄° * 
¨g
, 
Êags_t
 * 
Â
)

726 
buff
[256];

727 * 
˝
;

728 * 
≈
;

730 
	`°∫˝y
(
buff
, 
¨g
, (buff));

731 
buff
[(buff) - 1] = '\0';

732 i‡('\0' =
buff
[0]) {

733 
	`Ârötf
(
°dîr
, "no flag found\n");

736 
˝
 = 
buff
;

738 
≈
 = 
	`°rchr
(
˝
, ',');

739 i‡(
≈
)

740 *
≈
++ = '\0';

741 i‡(0 =
	`°rcmp
(
˝
, "append"))

742 
Â
->
≠≥nd
 = 1;

743 i‡(0 =
	`°rcmp
(
˝
, "dio"))

744 
Â
->
dio
 = 1;

745 i‡(0 =
	`°rcmp
(
˝
, "direct"))

746 
Â
->
dúe˘
 = 1;

747 i‡(0 =
	`°rcmp
(
˝
, "dpo"))

748 
Â
->
dpo
 = 1;

749 i‡(0 =
	`°rcmp
(
˝
, "dsync"))

750 
Â
->
dsync
 = 1;

751 i‡(0 =
	`°rcmp
(
˝
, "excl"))

752 
Â
->
ex˛
 = 1;

753 i‡(0 =
	`°rcmp
(
˝
, "fua"))

754 
Â
->
fua
 = 1;

755 i‡(0 =
	`°rcmp
(
˝
, "null"))

757 #ifde‡
SG_WANT_SHARED_MMAP_IO


758 i‡(0 =
	`°rcmp
(
˝
, "smmap"))

759 
Â
->
smm≠
 = 1;

762 
	`Ârötf
(
°dîr
, "uƒecogni£d fœg: %s\n", 
˝
);

765 
˝
 = 
≈
;

766 } 
˝
);

768 
	}
}

771 
	#STR_SZ
 1024

	)

772 
	#INOUTF_SZ
 512

	)

773 
	#EBUFF_SZ
 512

	)

777 
	$maö
(
¨gc
, * 
¨gv
[])

779 
öt64_t
 
skù
 = 0;

780 
öt64_t
 
£ek
 = 0;

781 
ibs
 = 0;

782 
obs
 = 0;

783 
b±
 = 
DEF_BLOCKS_PER_TRANSFER
;

784 
b±_giví
 = 0;

785 
°r
[
STR_SZ
];

786 * 
key
;

787 * 
buf
;

788 
öf
[
INOUTF_SZ
];

789 
ö_ty≥
 = 
FT_OTHER
;

790 
outf
[
INOUTF_SZ
];

791 
out_ty≥
 = 
FT_OTHER
;

792 
ªs
, 
k
, 
t
;

793 
öfd
, 
outfd
, 
blocks
;

794 * 
wrkPos
;

795 * 
wrkBuff
 = 
NULL
;

796 * 
wrkMm≠
 = 
NULL
;

797 
öt64_t
 
ö_num_£˘
 = -1;

798 
ö_ªs_sz
 = 0;

799 
öt64_t
 
out_num_£˘
 = -1;

800 
out_ªs_sz
 = 0;

801 
scsi_cdbsz_ö
 = 
DEF_SCSI_CDBSZ
;

802 
scsi_cdbsz_out
 = 
DEF_SCSI_CDBSZ
;

803 
cdbsz_giví
 = 0;

804 
do_c€
 = 0;

805 
do_sync
 = 0;

806 
num_dio_nŸ_d⁄e
 = 0;

807 
ö_£˘_sz
, 
out_£˘_sz
;

808 
n
, 
Êags
;

809 
ebuff
[
EBUFF_SZ
];

810 
blocks_≥r
;

811 
size_t
 
psz
 = 
	`gë∑gesize
();

812 
Êags_t
 
ö_Êags
;

813 
Êags_t
 
out_Êags
;

814 #ifde‡
SG_WANT_SHARED_MMAP_IO


815 
mm≠_sh¨óbÀ
 = 0;

817 
ªt
 = 0;

819 
öf
[0] = '\0';

820 
outf
[0] = '\0';

821 
	`mem£t
(&
ö_Êags
, 0, (in_flags));

822 
	`mem£t
(&
out_Êags
, 0, (out_flags));

824 
k
 = 1; k < 
¨gc
; k++) {

825 i‡(
¨gv
[
k
])

826 
	`°∫˝y
(
°r
, 
¨gv
[
k
], 
STR_SZ
);

829 
key
 = 
°r
, 
buf
 = key; *buf && *buf != '=';)

830 
buf
++;

831 i‡(*
buf
)

832 *
buf
++ = '\0';

833 i‡(0 =
	`°rcmp
(
key
,"bpt")) {

834 
b±
 = 
	`sg_gë_num
(
buf
);

835 i‡(-1 =
b±
) {

836 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'bpt'\n");

837  
SG_LIB_SYNTAX_ERROR
;

839 
b±_giví
 = 1;

840 } i‡(0 =
	`°rcmp
(
key
,"bs")) {

841 
blk_sz
 = 
	`sg_gë_num
(
buf
);

842 i‡(-1 =
blk_sz
) {

843 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'bs'\n");

844  
SG_LIB_SYNTAX_ERROR
;

846 } i‡(0 =
	`°rcmp
(
key
,"cdbsz")) {

847 
scsi_cdbsz_ö
 = 
	`sg_gë_num
(
buf
);

848 
scsi_cdbsz_out
 = 
scsi_cdbsz_ö
;

849 
cdbsz_giví
 = 1;

850 } i‡(0 =
	`°rcmp
(
key
,"coe")) {

851 
do_c€
 = 
	`sg_gë_num
(
buf
);

852 
do_c€
 = do_coe;

853 } i‡(0 =
	`°rcmp
(
key
,"count")) {

854 i‡(0 !
	`°rcmp
("-1", 
buf
)) {

855 
dd_cou¡
 = 
	`sg_gë_Œnum
(
buf
);

856 i‡(-1LL =
dd_cou¡
) {

857 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'count'\n");

858  
SG_LIB_SYNTAX_ERROR
;

861 } i‡(0 =
	`°rcmp
(
key
,"dio"))

862 
out_Êags
.
dio
 = 
	`sg_gë_num
(
buf
);

863 i‡(0 =
	`°rcmp
(
key
,"fua")) {

864 
n
 = 
	`sg_gë_num
(
buf
);

865 i‡(
n
 & 1)

866 
out_Êags
.
fua
 = 1;

867 i‡(
n
 & 2)

868 
ö_Êags
.
fua
 = 1;

869 } i‡(0 =
	`°rcmp
(
key
,"ibs")) {

870 
ibs
 = 
	`sg_gë_num
(
buf
);

871 i‡(-1 =
ibs
) {

872 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'ibs'\n");

873  
SG_LIB_SYNTAX_ERROR
;

875 } i‡(
	`°rcmp
(
key
,"if") == 0) {

876 i‡('\0' !
öf
[0]) {

877 
	`Ârötf
(
°dîr
, "Second 'if='árgument??\n");

878  
SG_LIB_SYNTAX_ERROR
;

880 
	`°∫˝y
(
öf
, 
buf
, 
INOUTF_SZ
);

881 } i‡(0 =
	`°rcmp
(
key
, "iflag")) {

882 i‡(
	`¥o˚ss_Êags
(
buf
, &
ö_Êags
)) {

883 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'iflag'\n");

884  
SG_LIB_SYNTAX_ERROR
;

886 } i‡(
	`°rcmp
(
key
,"of") == 0) {

887 i‡('\0' !
outf
[0]) {

888 
	`Ârötf
(
°dîr
, "Second 'of='árgument??\n");

889  
SG_LIB_SYNTAX_ERROR
;

891 
	`°∫˝y
(
outf
, 
buf
, 
INOUTF_SZ
);

892 } i‡(0 =
	`°rcmp
(
key
, "oflag")) {

893 i‡(
	`¥o˚ss_Êags
(
buf
, &
out_Êags
)) {

894 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'oflag'\n");

895  
SG_LIB_SYNTAX_ERROR
;

897 } i‡(0 =
	`°rcmp
(
key
,"obs")) {

898 
obs
 = 
	`sg_gë_num
(
buf
);

899 i‡(-1 =
obs
) {

900 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'obs'\n");

901  
SG_LIB_SYNTAX_ERROR
;

903 } i‡(0 =
	`°rcmp
(
key
,"seek")) {

904 
£ek
 = 
	`sg_gë_Œnum
(
buf
);

905 i‡(-1LL =
£ek
) {

906 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'seek'\n");

907  
SG_LIB_SYNTAX_ERROR
;

909 } i‡(0 =
	`°rcmp
(
key
,"skip")) {

910 
skù
 = 
	`sg_gë_Œnum
(
buf
);

911 i‡(-1LL =
skù
) {

912 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'skip'\n");

913  
SG_LIB_SYNTAX_ERROR
;

915 } i‡(0 =
	`°rcmp
(
key
,"sync"))

916 
do_sync
 = 
	`sg_gë_num
(
buf
);

917 i‡(0 =
	`°rcmp
(
key
,"time"))

918 
do_time
 = 
	`sg_gë_num
(
buf
);

919 i‡(0 =
	`°∫cmp
(
key
, "verb", 4))

920 
vîbo£
 = 
	`sg_gë_num
(
buf
);

921 i‡((0 =
	`°∫cmp
(
key
, "--help", 7)) ||

922 (0 =
	`°rcmp
(
key
, "-?"))) {

923 
	`ußge
();

925 } i‡((0 =
	`°∫cmp
(
key
, "--vers", 6)) ||

926 (0 =
	`°rcmp
(
key
, "-V"))) {

927 
	`Ârötf
(
°dîr
, 
ME
 ": %s\n", 
vîsi⁄_°r
);

931 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%s'\n", 
key
);

932 
	`Ârötf
(
°dîr
, "For more information use '--help'\n");

933  
SG_LIB_SYNTAX_ERROR
;

936 i‡(
blk_sz
 <= 0) {

937 
blk_sz
 = 
DEF_BLOCK_SIZE
;

938 
	`Ârötf
(
°dîr
, "Assume default 'bs' (block size) of %d bytes\n",

939 
blk_sz
);

941 i‡((
ibs
 && (ib†!
blk_sz
)Ë|| (
obs
 && (obs != blk_sz))) {

942 
	`Ârötf
(
°dîr
, "If 'ibs' or 'obs' given must be sameás 'bs'\n");

943 
	`ußge
();

944  
SG_LIB_SYNTAX_ERROR
;

946 i‡((
skù
 < 0Ë|| (
£ek
 < 0)) {

947 
	`Ârötf
(
°dîr
, "skipánd seek cannot beÇegative\n");

948  
SG_LIB_SYNTAX_ERROR
;

950 i‡((
out_Êags
.
≠≥nd
 > 0Ë&& (
£ek
 > 0)) {

951 
	`Ârötf
(
°dîr
, "Can't use botháppendánd seek switches\n");

952  
SG_LIB_SYNTAX_ERROR
;

954 i‡(
b±
 < 1) {

955 
	`Ârötf
(
°dîr
, "bpt must be greaterÅhan 0\n");

956  
SG_LIB_SYNTAX_ERROR
;

961 i‡((
blk_sz
 >2048Ë&& (0 =
b±_giví
))

962 
b±
 = 
DEF_BLOCKS_PER_2048TRANSFER
;

964 #ifde‡
SG_DEBUG


965 
	`Ârötf
(
°dîr
, 
ME
 "if=%†skù=%" 
PRId64
 " of=%s seek=%" PRId64 " count=%"

966 
PRId64
 "\n", 
öf
, 
skù
, 
outf
, 
£ek
, 
dd_cou¡
);

968 
	`ö°Æl_h™dÀr
 (
SIGINT
, 
öãºu±_h™dÀr
);

969 
	`ö°Æl_h™dÀr
 (
SIGQUIT
, 
öãºu±_h™dÀr
);

970 
	`ö°Æl_h™dÀr
 (
SIGPIPE
, 
öãºu±_h™dÀr
);

971 
	`ö°Æl_h™dÀr
 (
SIGUSR1
, 
sigöfo_h™dÀr
);

973 
öfd
 = 
STDIN_FILENO
;

974 
outfd
 = 
STDOUT_FILENO
;

975 i‡(
öf
[0] && ('-' != inf[0])) {

976 
ö_ty≥
 = 
	`dd_fûëy≥
(
öf
);

977 i‡(
vîbo£
)

978 
	`Ârötf
(
°dîr
, " >> Input fileÅype: %s\n",

979 
	`dd_fûëy≥_°r
(
ö_ty≥
, 
ebuff
));

981 i‡(
FT_ERROR
 =
ö_ty≥
) {

982 
	`Ârötf
(
°dîr
, 
ME
 "u«bÀÅÿac˚s†%s\n", 
öf
);

983  
SG_LIB_FILE_ERROR
;

984 } i‡(
FT_ST
 =
ö_ty≥
) {

985 
	`Ârötf
(
°dîr
, 
ME
 "u«bÀÅÿu£ scsòè≥ devi˚ %s\n", 
öf
);

986  
SG_LIB_FILE_ERROR
;

987 } i‡(
FT_SG
 =
ö_ty≥
) {

988 
Êags
 = 
O_RDWR
 | 
O_NONBLOCK
;

989 i‡(
ö_Êags
.
dúe˘
)

990 
Êags
 |
O_DIRECT
;

991 i‡(
ö_Êags
.
ex˛
)

992 
Êags
 |
O_EXCL
;

993 i‡(
ö_Êags
.
dsync
)

994 
Êags
 |
O_SYNC
;

995 i‡((
öfd
 = 
	`›í
(
öf
, 
Êags
)) < 0) {

996 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

997 
ME
 "couldÇŸ o≥¿%†f‹ sgÑódög", 
öf
);

998 
	`≥º‹
(
ebuff
);

999  
SG_LIB_FILE_ERROR
;

1001 
ªs
 = 
	`io˘l
(
öfd
, 
SG_GET_VERSION_NUM
, &
t
);

1002 i‡((
ªs
 < 0Ë|| (
t
 < 30122)) {

1003 
	`Ârötf
(
°dîr
, 
ME
 "sg driverÖriorÅo 3.1.22\n");

1004  
SG_LIB_FILE_ERROR
;

1006 
ö_ªs_sz
 = 
blk_sz
 * 
b±
;

1007 i‡(0 !(
ö_ªs_sz
 % 
psz
))

1008 
ö_ªs_sz
 = ((ö_ªs_sz / 
psz
) + 1) *Ösz;

1009 i‡(
	`io˘l
(
öfd
, 
SG_GET_RESERVED_SIZE
, &
t
) < 0) {

1010 
	`≥º‹
(
ME
 "SG_GET_RESERVED_SIZEÉrror");

1011  
SG_LIB_FILE_ERROR
;

1013 i‡(
t
 < 
MIN_RESERVED_SIZE
)

1014 
t
 = 
MIN_RESERVED_SIZE
;

1015 i‡(
ö_ªs_sz
 > 
t
) {

1016 i‡(
	`io˘l
(
öfd
, 
SG_SET_RESERVED_SIZE
, &
ö_ªs_sz
) < 0) {

1017 
	`≥º‹
(
ME
 "SG_SET_RESERVED_SIZEÉrror");

1018  
SG_LIB_FILE_ERROR
;

1021 
wrkMm≠
 = (*)
	`mm≠
(
NULL
, 
ö_ªs_sz
,

1022 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
öfd
, 0);

1023 i‡(
MAP_FAILED
 =
wrkMm≠
) {

1024 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

1025 
ME
 "îr‹ usög mm≠(Ë⁄ fûe: %s", 
öf
);

1026 
	`≥º‹
(
ebuff
);

1027  
SG_LIB_FILE_ERROR
;

1029 #ifde‡
SG_WANT_SHARED_MMAP_IO


1030 
mm≠_sh¨óbÀ
 = 1;

1034 
Êags
 = 
O_RDONLY
;

1035 i‡(
ö_Êags
.
dúe˘
)

1036 
Êags
 |
O_DIRECT
;

1037 i‡(
ö_Êags
.
ex˛
)

1038 
Êags
 |
O_EXCL
;

1039 i‡(
ö_Êags
.
dsync
)

1040 
Êags
 |
O_SYNC
;

1041 i‡((
öfd
 = 
	`›í
(
öf
, 
Êags
)) < 0) {

1042 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

1043 
ME
 "couldÇŸ o≥¿%†f‹Ñódög", 
öf
);

1044 
	`≥º‹
(
ebuff
);

1045  
SG_LIB_FILE_ERROR
;

1047 i‡(
skù
 > 0) {

1048 
off64_t
 
off£t
 = 
skù
;

1050 
off£t
 *
blk_sz
;

1051 i‡(
	`l£ek64
(
öfd
, 
off£t
, 
SEEK_SET
) < 0) {

1052 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, 
ME
 "couldn't skipÅo "

1053 "ªquúedÖosôi⁄ o¿%s", 
öf
);

1054 
	`≥º‹
(
ebuff
);

1055  
SG_LIB_FILE_ERROR
;

1057 i‡(
vîbo£
)

1058 
	`Ârötf
(
°dîr
, " >> skip:Üseek64 SEEK_SET, "

1059 "byã off£t=0x%"
PRIx64
"\n",

1060 (
uöt64_t
)
off£t
);

1065 i‡(
outf
[0] && ('-' != outf[0])) {

1066 
out_ty≥
 = 
	`dd_fûëy≥
(
outf
);

1067 i‡(
vîbo£
)

1068 
	`Ârötf
(
°dîr
, " >> Output fileÅype: %s\n",

1069 
	`dd_fûëy≥_°r
(
out_ty≥
, 
ebuff
));

1071 i‡(
FT_ST
 =
out_ty≥
) {

1072 
	`Ârötf
(
°dîr
, 
ME
 "u«bÀÅÿu£ scsòè≥ devi˚ %s\n", 
outf
);

1073  
SG_LIB_FILE_ERROR
;

1075 i‡(
FT_SG
 =
out_ty≥
) {

1076 
Êags
 = 
O_RDWR
 | 
O_NONBLOCK
;

1077 i‡(
out_Êags
.
dúe˘
)

1078 
Êags
 |
O_DIRECT
;

1079 i‡(
out_Êags
.
ex˛
)

1080 
Êags
 |
O_EXCL
;

1081 i‡(
out_Êags
.
dsync
)

1082 
Êags
 |
O_SYNC
;

1083 i‡((
outfd
 = 
	`›í
(
outf
, 
Êags
)) < 0) {

1084 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, 
ME
 "couldÇot open %s for "

1085 "sg wrôög", 
outf
);

1086 
	`≥º‹
(
ebuff
);

1087  
SG_LIB_FILE_ERROR
;

1089 
ªs
 = 
	`io˘l
(
outfd
, 
SG_GET_VERSION_NUM
, &
t
);

1090 i‡((
ªs
 < 0Ë|| (
t
 < 30122)) {

1091 
	`Ârötf
(
°dîr
, 
ME
 "sg driverÖriorÅo 3.1.22\n");

1092  
SG_LIB_FILE_ERROR
;

1094 i‡(
	`io˘l
(
outfd
, 
SG_GET_RESERVED_SIZE
, &
t
) < 0) {

1095 
	`≥º‹
(
ME
 "SG_GET_RESERVED_SIZEÉrror");

1096  
SG_LIB_FILE_ERROR
;

1098 i‡(
t
 < 
MIN_RESERVED_SIZE
)

1099 
t
 = 
MIN_RESERVED_SIZE
;

1100 
out_ªs_sz
 = 
blk_sz
 * 
b±
;

1101 i‡(
out_ªs_sz
 > 
t
) {

1102 i‡(
	`io˘l
(
outfd
, 
SG_SET_RESERVED_SIZE
, &
out_ªs_sz
) < 0) {

1103 
	`≥º‹
(
ME
 "SG_SET_RESERVED_SIZEÉrror");

1104  
SG_LIB_FILE_ERROR
;

1107 i‡(
NULL
 =
wrkMm≠
) {

1108 
wrkMm≠
 = (*)
	`mm≠
(
NULL
, 
out_ªs_sz
,

1109 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
outfd
, 0);

1110 i‡(
MAP_FAILED
 =
wrkMm≠
) {

1111 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

1112 
ME
 "îr‹ usög mm≠(Ë⁄ fûe: %s", 
outf
);

1113 
	`≥º‹
(
ebuff
);

1114  
SG_LIB_FILE_ERROR
;

1118 i‡(
FT_DEV_NULL
 =
out_ty≥
)

1119 
outfd
 = -1;

1121 i‡(
FT_RAW
 !
out_ty≥
) {

1122 
Êags
 = 
O_WRONLY
 | 
O_CREAT
;

1123 i‡(
out_Êags
.
dúe˘
)

1124 
Êags
 |
O_DIRECT
;

1125 i‡(
out_Êags
.
ex˛
)

1126 
Êags
 |
O_EXCL
;

1127 i‡(
out_Êags
.
dsync
)

1128 
Êags
 |
O_SYNC
;

1129 i‡(
out_Êags
.
≠≥nd
)

1130 
Êags
 |
O_APPEND
;

1131 i‡((
outfd
 = 
	`›í
(
outf
, 
Êags
, 0666)) < 0) {

1132 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

1133 
ME
 "couldÇŸ o≥¿%†f‹ wrôög", 
outf
);

1134 
	`≥º‹
(
ebuff
);

1135  
SG_LIB_FILE_ERROR
;

1139 i‡((
outfd
 = 
	`›í
(
outf
, 
O_WRONLY
)) < 0) {

1140 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, 
ME
 "couldÇot open %s "

1141 "f‹Ñaw wrôög", 
outf
);

1142 
	`≥º‹
(
ebuff
);

1143  
SG_LIB_FILE_ERROR
;

1146 i‡(
£ek
 > 0) {

1147 
off64_t
 
off£t
 = 
£ek
;

1149 
off£t
 *
blk_sz
;

1150 i‡(
	`l£ek64
(
outfd
, 
off£t
, 
SEEK_SET
) < 0) {

1151 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, 
ME
 "couldn't seekÅo "

1152 "ªquúedÖosôi⁄ o¿%s", 
outf
);

1153 
	`≥º‹
(
ebuff
);

1154  
SG_LIB_FILE_ERROR
;

1156 i‡(
vîbo£
)

1157 
	`Ârötf
(
°dîr
, " >> seek:Üseek64 SEEK_SET, "

1158 "byã off£t=0x%"
PRIx64
"\n",

1159 (
uöt64_t
)
off£t
);

1163 i‡((
STDIN_FILENO
 =
öfd
Ë&& (
STDOUT_FILENO
 =
outfd
)) {

1164 
	`Ârötf
(
°dîr
, "Won't default both IFILEÅo stdin _and_ OFILE "

1166 
	`Ârötf
(
°dîr
, "For more information use '--help'\n");

1167  
SG_LIB_SYNTAX_ERROR
;

1169 i‡(
dd_cou¡
 < 0) {

1170 
ö_num_£˘
 = -1;

1171 i‡(
FT_SG
 =
ö_ty≥
) {

1172 
ªs
 = 
	`scsi_ªad_ˇ∑côy
(
öfd
, &
ö_num_£˘
, &
ö_£˘_sz
);

1173 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
) {

1174 
	`Ârötf
(
°dîr
, "Unitáttention(in), continuing\n");

1175 
ªs
 = 
	`scsi_ªad_ˇ∑côy
(
öfd
, &
ö_num_£˘
, &
ö_£˘_sz
);

1176 } i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
) {

1177 
	`Ârötf
(
°dîr
, "Aborted command(in), continuing\n");

1178 
ªs
 = 
	`scsi_ªad_ˇ∑côy
(
öfd
, &
ö_num_£˘
, &
ö_£˘_sz
);

1180 i‡(0 !
ªs
) {

1181 i‡(
ªs
 =
SG_LIB_CAT_INVALID_OP
)

1182 
	`Ârötf
(
°dîr
, "read capacityÇot supported on %s\n",

1183 
öf
);

1184 i‡(
ªs
 =
SG_LIB_CAT_NOT_READY
)

1185 
	`Ârötf
(
°dîr
, "read capacity failed, %sÇotÑeady\n",

1186 
öf
);

1188 
	`Ârötf
(
°dîr
, "U«bÀÅÿªad c≠acôy o¿%s\n", 
öf
);

1189 
ö_num_£˘
 = -1;

1191 } i‡(
FT_BLOCK
 =
ö_ty≥
) {

1192 i‡(0 !
	`ªad_blkdev_ˇ∑côy
(
öfd
, &
ö_num_£˘
, &
ö_£˘_sz
)) {

1193 
	`Ârötf
(
°dîr
, "U«bÀÅÿªad block c≠acôy o¿%s\n", 
öf
);

1194 
ö_num_£˘
 = -1;

1196 i‡(
blk_sz
 !
ö_£˘_sz
) {

1197 
	`Ârötf
(
°dîr
, "block size on %s confusion; bs=%d, from "

1198 "devi˚=%d\n", 
öf
, 
blk_sz
, 
ö_£˘_sz
);

1199 
ö_num_£˘
 = -1;

1202 i‡(
ö_num_£˘
 > 
skù
)

1203 
ö_num_£˘
 -
skù
;

1205 
out_num_£˘
 = -1;

1206 i‡(
FT_SG
 =
out_ty≥
) {

1207 
ªs
 = 
	`scsi_ªad_ˇ∑côy
(
outfd
, &
out_num_£˘
, &
out_£˘_sz
);

1208 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
) {

1209 
	`Ârötf
(
°dîr
, "Unitáttention(out), continuing\n");

1210 
ªs
 = 
	`scsi_ªad_ˇ∑côy
(
outfd
, &
out_num_£˘
, &
out_£˘_sz
);

1211 } i‡(
SG_LIB_CAT_ABORTED_COMMAND
 =
ªs
) {

1212 
	`Ârötf
(
°dîr
, "Aborted command(out), continuing\n");

1213 
ªs
 = 
	`scsi_ªad_ˇ∑côy
(
outfd
, &
out_num_£˘
, &
out_£˘_sz
);

1215 i‡(0 !
ªs
) {

1216 i‡(
ªs
 =
SG_LIB_CAT_INVALID_OP
)

1217 
	`Ârötf
(
°dîr
, "read capacityÇot supported on %s\n",

1218 
outf
);

1219 i‡(
ªs
 =
SG_LIB_CAT_NOT_READY
)

1220 
	`Ârötf
(
°dîr
, "read capacity failed, %sÇotÑeady\n",

1221 
outf
);

1223 
	`Ârötf
(
°dîr
, "U«bÀÅÿªad c≠acôy o¿%s\n", 
outf
);

1224 
out_num_£˘
 = -1;

1226 } i‡(
FT_BLOCK
 =
out_ty≥
) {

1227 i‡(0 !
	`ªad_blkdev_ˇ∑côy
(
outfd
, &
out_num_£˘
,

1228 &
out_£˘_sz
)) {

1229 
	`Ârötf
(
°dîr
, "UnableÅoÑead block capacity on %s\n",

1230 
outf
);

1231 
out_num_£˘
 = -1;

1233 i‡(
blk_sz
 !
out_£˘_sz
) {

1234 
	`Ârötf
(
°dîr
, "block size on %s confusion: bs=%d, from "

1235 "devi˚=%d\n", 
outf
, 
blk_sz
, 
out_£˘_sz
);

1236 
out_num_£˘
 = -1;

1239 i‡(
out_num_£˘
 > 
£ek
)

1240 
out_num_£˘
 -
£ek
;

1241 #ifde‡
SG_DEBUG


1242 
	`Ârötf
(
°dîr
, "Sèπ o‡lo›, cou¡=%" 
PRId64
 ", in_num_sect=%"

1243 
PRId64
 ", out_num_£˘=%"PRId64"\n", 
dd_cou¡
, 
ö_num_£˘
,

1244 
out_num_£˘
);

1246 i‡(
ö_num_£˘
 > 0) {

1247 i‡(
out_num_£˘
 > 0)

1248 
dd_cou¡
 = (
ö_num_£˘
 > 
out_num_£˘
) ? out_num_sect :

1249 
ö_num_£˘
;

1251 
dd_cou¡
 = 
ö_num_£˘
;

1254 
dd_cou¡
 = 
out_num_£˘
;

1257 i‡(
dd_cou¡
 < 0) {

1258 
	`Ârötf
(
°dîr
, "Couldn't calculate count,Ölease give one\n");

1259  
SG_LIB_SYNTAX_ERROR
;

1261 i‡(! 
cdbsz_giví
) {

1262 i‡((
FT_SG
 =
ö_ty≥
Ë&& (
MAX_SCSI_CDBSZ
 !
scsi_cdbsz_ö
) &&

1263 (((
dd_cou¡
 + 
skù
Ë> 
UINT_MAX
Ë|| (
b±
 > 
USHRT_MAX
))) {

1264 
	`Ârötf
(
°dîr
, "Note: SCSI command size increasedÅo 16 bytes "

1266 
scsi_cdbsz_ö
 = 
MAX_SCSI_CDBSZ
;

1268 i‡((
FT_SG
 =
out_ty≥
Ë&& (
MAX_SCSI_CDBSZ
 !
scsi_cdbsz_out
) &&

1269 (((
dd_cou¡
 + 
£ek
Ë> 
UINT_MAX
Ë|| (
b±
 > 
USHRT_MAX
))) {

1270 
	`Ârötf
(
°dîr
, "Note: SCSI command size increasedÅo 16 bytes "

1272 
scsi_cdbsz_out
 = 
MAX_SCSI_CDBSZ
;

1276 i‡(
out_Êags
.
dio
 && (
FT_SG
 !
ö_ty≥
)) {

1277 
out_Êags
.
dio
 = 0;

1278 
	`Ârötf
(
°dîr
, ">>> dio onlyÖerformed on 'of' side when 'if' is"

1281 i‡(
out_Êags
.
dio
) {

1282 
fd
;

1283 
c
;

1285 i‡((
fd
 = 
	`›í
(
¥oc_Ælow_dio
, 
O_RDONLY
)) >= 0) {

1286 i‡(1 =
	`ªad
(
fd
, &
c
, 1)) {

1287 i‡('0' =
c
)

1288 
	`Ârötf
(
°dîr
, ">>> %s setÅo '0' but should be set "

1289 "tÿ'1' f‹ dúe˘ IO\n", 
¥oc_Ælow_dio
);

1291 
	`˛o£
(
fd
);

1295 i‡(
wrkMm≠
) {

1296 
wrkPos
 = 
wrkMm≠
;

1297 #ifde‡
SG_WANT_SHARED_MMAP_IO


1298 i‡(! (
mm≠_sh¨óbÀ
 && 
out_Êags
.
smm≠
 && (
FT_SG
 =
out_ty≥
)))

1299 
mm≠_sh¨óbÀ
 = 0;

1302 i‡((
FT_RAW
 =
ö_ty≥
Ë|| (FT_RAW =
out_ty≥
)) {

1303 
wrkBuff
 = (*)
	`mÆloc
(
blk_sz
 * 
b±
 + 
psz
);

1304 i‡(0 =
wrkBuff
) {

1305 
	`Ârötf
(
°dîr
, "NotÉnough user memory forÑaw\n");

1306  
SG_LIB_FILE_ERROR
;

1308 
wrkPos
 = (*)((()
wrkBuff
 + 
psz
 - 1) &

1309 (~(
psz
 - 1)));

1312 
wrkBuff
 = (*)
	`mÆloc
(
blk_sz
 * 
b±
);

1313 i‡(0 =
wrkBuff
) {

1314 
	`Ârötf
(
°dîr
, "NotÉnough user memory\n");

1315  
SG_LIB_FILE_ERROR
;

1317 
wrkPos
 = 
wrkBuff
;

1321 
blocks_≥r
 = 
b±
;

1322 #ifde‡
SG_DEBUG


1323 
	`Ârötf
(
°dîr
, "Sèπ o‡lo›, cou¡=%"
PRId64
", blocks_per=%d\n",

1324 
dd_cou¡
, 
blocks_≥r
);

1326 i‡(
do_time
) {

1327 
°¨t_tm
.
tv_£c
 = 0;

1328 
°¨t_tm
.
tv_u£c
 = 0;

1329 
	`gëtimeofday
(&
°¨t_tm
, 
NULL
);

1330 
°¨t_tm_vÆid
 = 1;

1332 
ªq_cou¡
 = 
dd_cou¡
;

1334 #ifde‡
SG_WANT_SHARED_MMAP_IO


1335 i‡(
vîbo£
 && (
dd_cou¡
 > 0Ë&& (0 =
out_Êags
.
dio
) &&

1336 (
FT_SG
 =
ö_ty≥
Ë&& (FT_SG =
out_ty≥
Ë&& (! 
mm≠_sh¨óbÀ
))

1338 i‡(
vîbo£
 && (
dd_cou¡
 > 0Ë&& (0 =
out_Êags
.
dio
) &&

1339 (
FT_SG
 =
ö_ty≥
Ë&& (FT_SG =
out_ty≥
))

1341 
	`Ârötf
(
°dîr
, "Since both 'if'ánd 'of'áre sg devices, only do "

1344 
dd_cou¡
 > 0) {

1345 
blocks
 = (
dd_cou¡
 > 
blocks_≥r
) ? blocks_per : dd_count;

1346 i‡(
FT_SG
 =
ö_ty≥
) {

1347 
ªt
 = 
	`sg_ªad
(
öfd
, 
wrkPos
, 
blocks
, 
skù
, 
blk_sz
, 
scsi_cdbsz_ö
,

1348 
ö_Êags
.
fua
, in_Êags.
dpo
, 1);

1349 i‡((
SG_LIB_CAT_UNIT_ATTENTION
 =
ªt
) ||

1350 (
SG_LIB_CAT_ABORTED_COMMAND
 =
ªt
)) {

1351 
	`Ârötf
(
°dîr
, "Unitáttention oráborted command, "

1353 
ªt
 = 
	`sg_ªad
(
öfd
, 
wrkPos
, 
blocks
, 
skù
, 
blk_sz
,

1354 
scsi_cdbsz_ö
, 
ö_Êags
.
fua
, in_Êags.
dpo
, 1);

1356 i‡(0 !
ªt
) {

1357 
	`Ârötf
(
°dîr
, "sg_ªad faûed, skù=%"
PRId64
"\n", 
skù
);

1361 
ö_fuŒ
 +
blocks
;

1364 ((
ªs
 = 
	`ªad
(
öfd
, 
wrkPos
, 
blocks
 * 
blk_sz
)) < 0) &&

1365 (
EINTR
 =
î∫o
))

1367 i‡(
vîbo£
 > 2)

1368 
	`Ârötf
(
°dîr
, "read(unix): count=%d,Ñes=%d\n",

1369 
blocks
 * 
blk_sz
, 
ªs
);

1370 i‡(
ªt
 < 0) {

1371 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, 
ME
 "ªadög, skù=%"
PRId64
" ", 
skù
);

1372 
	`≥º‹
(
ebuff
);

1373 
ªt
 = -1;

1376 i‡(
ªs
 < 
blocks
 * 
blk_sz
) {

1377 
dd_cou¡
 = 0;

1378 
blocks
 = 
ªs
 / 
blk_sz
;

1379 i‡((
ªs
 % 
blk_sz
) > 0) {

1380 
blocks
++;

1381 
ö_∑πül
++;

1384 
ö_fuŒ
 +
blocks
;

1387 i‡(0 =
blocks
)

1390 i‡(
FT_SG
 =
out_ty≥
) {

1391 
do_mm≠
 = (
FT_SG
 =
ö_ty≥
) ? 0 : 1;

1392 
dio_ªs
 = 
out_Êags
.
dio
;

1394 
ªt
 = 
	`sg_wrôe
(
outfd
, 
wrkPos
, 
blocks
, 
£ek
, 
blk_sz
, 
scsi_cdbsz_out
,

1395 
out_Êags
.
fua
, out_Êags.
dpo
, 
do_mm≠
,

1396 #ifde‡
SG_WANT_SHARED_MMAP_IO


1397 
mm≠_sh¨óbÀ
,

1399 &
dio_ªs
);

1400 i‡((
SG_LIB_CAT_UNIT_ATTENTION
 =
ªt
) ||

1401 (
SG_LIB_CAT_ABORTED_COMMAND
 =
ªt
)) {

1402 
	`Ârötf
(
°dîr
, "Unitáttention oráborted command, "

1404 
dio_ªs
 = 
out_Êags
.
dio
;

1405 
ªt
 = 
	`sg_wrôe
(
outfd
, 
wrkPos
, 
blocks
, 
£ek
, 
blk_sz
,

1406 
scsi_cdbsz_out
, 
out_Êags
.
fua
, out_Êags.
dpo
,

1407 
do_mm≠
,

1408 #ifde‡
SG_WANT_SHARED_MMAP_IO


1409 
mm≠_sh¨óbÀ
,

1411 &
dio_ªs
);

1413 i‡(0 !
ªt
) {

1414 
	`Ârötf
(
°dîr
, "sg_wrôêÁûed, sìk=%"
PRId64
"\n", 
£ek
);

1418 
out_fuŒ
 +
blocks
;

1419 i‡(
out_Êags
.
dio
 && (0 =
dio_ªs
))

1420 
num_dio_nŸ_d⁄e
++;

1423 i‡(
FT_DEV_NULL
 =
out_ty≥
)

1424 
out_fuŒ
 +
blocks
;

1426 ((
ªs
 = 
	`wrôe
(
outfd
, 
wrkPos
, 
blocks
 * 
blk_sz
)) < 0)

1427 && (
EINTR
 =
î∫o
))

1429 i‡(
vîbo£
 > 2)

1430 
	`Ârötf
(
°dîr
, "write(unix): count=%d,Ñes=%d\n",

1431 
blocks
 * 
blk_sz
, 
ªs
);

1432 i‡(
ªs
 < 0) {

1433 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, 
ME
 "wrôög, sìk=%"
PRId64
" ", 
£ek
);

1434 
	`≥º‹
(
ebuff
);

1437 i‡(
ªs
 < 
blocks
 * 
blk_sz
) {

1438 
	`Ârötf
(
°dîr
, "ouçuàfûê¥obably fuŒ, sìk=%" 
PRId64


1439 " ", 
£ek
);

1440 
blocks
 = 
ªs
 / 
blk_sz
;

1441 
out_fuŒ
 +
blocks
;

1442 i‡((
ªs
 % 
blk_sz
) > 0)

1443 
out_∑πül
++;

1447 
out_fuŒ
 +
blocks
;

1449 i‡(
dd_cou¡
 > 0)

1450 
dd_cou¡
 -
blocks
;

1451 
skù
 +
blocks
;

1452 
£ek
 +
blocks
;

1455 i‡(
do_time
)

1456 
	`ˇlc_duøti⁄_throughput
(0);

1457 i‡(
do_sync
) {

1458 i‡(
FT_SG
 =
out_ty≥
) {

1459 
	`Ârötf
(
°dîr
, ">> Synchr⁄izög cachê⁄ %s\n", 
outf
);

1460 
ªs
 = 
	`sg_Œ_sync_ˇche_10
(
outfd
, 0, 0, 0, 0, 0, 0, 0);

1461 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
) {

1462 
	`Ârötf
(
°dîr
, "Unitáttention(out), continuing\n");

1463 
ªs
 = 
	`sg_Œ_sync_ˇche_10
(
outfd
, 0, 0, 0, 0, 0, 0, 0);

1465 i‡(0 !
ªs
)

1466 
	`Ârötf
(
°dîr
, "UnableÅo synchronize cache\n");

1470 i‡(
wrkBuff
Ë
	`‰ì
(wrkBuff);

1471 i‡(
STDIN_FILENO
 !
öfd
)

1472 
	`˛o£
(
öfd
);

1473 i‡((
STDOUT_FILENO
 !
outfd
Ë&& (
FT_DEV_NULL
 !
out_ty≥
))

1474 
	`˛o£
(
outfd
);

1475 i‡(0 !
dd_cou¡
) {

1476 
	`Ârötf
(
°dîr
, "SomeÉrror occurred,");

1477 i‡(0 =
ªt
)

1478 
ªt
 = 
SG_LIB_CAT_OTHER
;

1480 
	`¥öt_°©s
();

1481 i‡(
sum_of_ªsids
)

1482 
	`Ârötf
(
°dîr
, ">> Non-zero sum ofÑesidual counts=%d\n",

1483 
sum_of_ªsids
);

1484 i‡(
num_dio_nŸ_d⁄e
)

1485 
	`Ârötf
(
°dîr
, ">> dioÑequested but _not_ done %dÅimes\n",

1486 
num_dio_nŸ_d⁄e
);

1487 #ifde‡
SG_WANT_SHARED_MMAP_IO


1488 i‡((
vîbo£
 > 0Ë&& 
out_Êags
.
smm≠
 && (
sh¨ed_mm_ªq
 > 0)) {

1489 
	`Ârötf
(
°dîr
, ">> shared_mm_req=%d, shared_mm_done=%d\n",

1490 
sh¨ed_mm_ªq
, 
sh¨ed_mm_d⁄e
);

1493  (
ªt
 >0Ë?Ñë : 
SG_LIB_CAT_OTHER
;

1494 
	}
}

	@src/sgp_dd.c

27 
	#_XOPEN_SOURCE
 500

	)

28 #i‚de‡
_GNU_SOURCE


29 
	#_GNU_SOURCE


	)

32 
	~<uni°d.h
>

33 
	~<f˙é.h
>

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<°rög.h
>

37 
	~<˘y≥.h
>

38 
	~<î∫o.h
>

39 
	~<limôs.h
>

40 
	~<±hªad.h
>

41 
	~<sig«l.h
>

42 
	#__STDC_FORMAT_MACROS
 1

	)

43 
	~<öây≥s.h
>

44 
	~<sys/io˘l.h
>

45 
	~<sys/ty≥s.h
>

46 
	~<sys/°©.h
>

47 
	~<sys/sysma¸os.h
>

48 
	~<sys/time.h
>

49 
	~<löux/maj‹.h
>

50 
	~<löux/fs.h
>

52 #ifde‡
HAVE_CONFIG_H


53 
	~"c⁄fig.h
"

55 
	~"sg_lib.h
"

56 
	~"sg_cmds_basic.h
"

57 
	~"sg_io_löux.h
"

60 c⁄° * 
	gvîsi⁄_°r
 = "5.43 20130507";

62 
	#DEF_BLOCK_SIZE
 512

	)

63 
	#DEF_BLOCKS_PER_TRANSFER
 128

	)

64 
	#DEF_BLOCKS_PER_2048TRANSFER
 32

	)

65 
	#DEF_SCSI_CDBSZ
 10

	)

66 
	#MAX_SCSI_CDBSZ
 16

	)

68 
	#ME
 "sgp_dd: "

	)

72 
	#SENSE_BUFF_LEN
 64

	)

73 
	#READ_CAP_REPLY_LEN
 8

	)

74 
	#RCAP16_REPLY_LEN
 32

	)

76 #i‚de‡
SERVICE_ACTION_IN


77 
	#SERVICE_ACTION_IN
 0x9e

	)

79 #i‚de‡
SAI_READ_CAPACITY_16


80 
	#SAI_READ_CAPACITY_16
 0x10

	)

83 
	#DEF_TIMEOUT
 60000

	)

85 
	#SGP_READ10
 0x28

	)

86 
	#SGP_WRITE10
 0x2a

	)

87 
	#DEF_NUM_THREADS
 4

	)

88 
	#MAX_NUM_THREADS
 
SG_MAX_QUEUE


	)

90 #i‚de‡
RAW_MAJOR


91 
	#RAW_MAJOR
 255

	)

94 
	#FT_OTHER
 1

	)

95 
	#FT_SG
 2

	)

96 
	#FT_RAW
 4

	)

97 
	#FT_DEV_NULL
 8

	)

98 
	#FT_ST
 16

	)

99 
	#FT_BLOCK
 32

	)

100 
	#FT_ERROR
 64

	)

102 
	#DEV_NULL_MINOR_NUM
 3

	)

104 
	#EBUFF_SZ
 512

	)

106 
	sÊags_t
 {

107 
	m≠≥nd
;

108 
	mc€
;

109 
	mdio
;

110 
	mdúe˘
;

111 
	mdpo
;

112 
	mdsync
;

113 
	mex˛
;

114 
	mfua
;

117 
	sªque°_cﬁÀ˘i⁄


119 
	möfd
;

120 
öt64_t
 
	mskù
;

121 
	mö_ty≥
;

122 
	mcdbsz_ö
;

123 
Êags_t
 
	mö_Êags
;

124 
öt64_t
 
	mö_blk
;

125 
öt64_t
 
	mö_cou¡
;

126 
öt64_t
 
	mö_ªm_cou¡
;

127 
	mö_∑πül
;

128 
	mö_°›
;

129 
±hªad_muãx_t
 
	mö_muãx
;

130 
	moutfd
;

131 
öt64_t
 
	m£ek
;

132 
	mout_ty≥
;

133 
	mcdbsz_out
;

134 
Êags_t
 
	mout_Êags
;

135 
öt64_t
 
	mout_blk
;

136 
öt64_t
 
	mout_cou¡
;

137 
öt64_t
 
	mout_ªm_cou¡
;

138 
	mout_∑πül
;

139 
	mout_°›
;

140 
±hªad_muãx_t
 
	mout_muãx
;

141 
±hªad_c⁄d_t
 
	mout_sync_cv
;

142 
	mbs
;

143 
	mb±
;

144 
	mdio_öcom∂ëe
;

145 
	msum_of_ªsids
;

146 
±hªad_muãx_t
 
	maux_muãx
;

147 
	mdebug
;

148 } 
	tRq_cﬁl
;

150 
	sªque°_ñemít


152 
	möfd
;

153 
	moutfd
;

154 
	mwr
;

155 
öt64_t
 
	mblk
;

156 
	mnum_blks
;

157 * 
	mbufÂ
;

158 * 
	mÆloc_bp
;

159 
sg_io_hdr
 
	mio_hdr
;

160 
	mcmd
[
MAX_SCSI_CDBSZ
];

161 
	msb
[
SENSE_BUFF_LEN
];

162 
	mbs
;

163 
	mdio_öcom∂ëe
;

164 
	mªsid
;

165 
	mcdbsz_ö
;

166 
	mcdbsz_out
;

167 
Êags_t
 
	mö_Êags
;

168 
Êags_t
 
	mout_Êags
;

169 
	mdebug
;

170 } 
	tRq_ñem
;

172 
sig£t_t
 
	gsig«l_£t
;

173 
±hªad_t
 
	gsig_li°í_thªad_id
;

175 c⁄° * 
	g¥oc_Ælow_dio
 = "/proc/scsi/sg/allow_dio";

177 
sg_ö_›î©i⁄
(
Rq_cﬁl
 * 
˛p
, 
Rq_ñem
 * 
ªp
);

178 
sg_out_›î©i⁄
(
Rq_cﬁl
 * 
˛p
, 
Rq_ñem
 * 
ªp
);

179 
n‹mÆ_ö_›î©i⁄
(
Rq_cﬁl
 * 
˛p
, 
Rq_ñem
 * 
ªp
, 
blocks
);

180 
n‹mÆ_out_›î©i⁄
(
Rq_cﬁl
 * 
˛p
, 
Rq_ñem
 * 
ªp
, 
blocks
);

181 
sg_°¨t_io
(
Rq_ñem
 * 
ªp
);

182 
sg_föish_io
(
wr
, 
Rq_ñem
 * 
ªp
, 
±hªad_muãx_t
 * 
a_muç
);

184 
	#STRERR_BUFF_LEN
 128

	)

186 
±hªad_muãx_t
 
	g°ªº_mut
 = 
PTHREAD_MUTEX_INITIALIZER
;

188 
	gdo_time
 = 0;

189 
Rq_cﬁl
 
	grcﬁl
;

190 
timevÆ
 
	g°¨t_tm
;

191 
öt64_t
 
	gdd_cou¡
 = -1;

192 
	gnum_thªads
 = 
DEF_NUM_THREADS
;

193 
	gdo_sync
 = 0;

194 
	gexô_°©us
 = 0;

198 
	$ˇlc_duøti⁄_throughput
(
c⁄tö
)

200 
timevÆ
 
íd_tm
, 
ªs_tm
;

201 
a
, 
b
;

203 
	`gëtimeofday
(&
íd_tm
, 
NULL
);

204 
ªs_tm
.
tv_£c
 = 
íd_tm
.tv_£¯- 
°¨t_tm
.tv_sec;

205 
ªs_tm
.
tv_u£c
 = 
íd_tm
.tv_u£¯- 
°¨t_tm
.tv_usec;

206 i‡(
ªs_tm
.
tv_u£c
 < 0) {

207 --
ªs_tm
.
tv_£c
;

208 
ªs_tm
.
tv_u£c
 += 1000000;

210 
a
 = 
ªs_tm
.
tv_£c
;

211 
a
 +(0.000001 * 
ªs_tm
.
tv_u£c
);

212 
b
 = ()
rcﬁl
.
bs
 * (
dd_cou¡
 -Ñcﬁl.
out_ªm_cou¡
);

213 
	`Ârötf
(
°dîr
, "timeÅoÅransfer data %s %d.%06d secs",

214 (
c⁄tö
 ? "sÿÁr" : "was"), ()
ªs_tm
.
tv_£c
,

215 ()
ªs_tm
.
tv_u£c
);

216 i‡((
a
 > 0.00001Ë&& (
b
 > 511))

217 
	`Ârötf
(
°dîr
, ", %.2‡MB/£c\n", 
b
 / (
a
 * 1000000.0));

219 
	`Ârötf
(
°dîr
, "\n");

220 
	}
}

223 
	$¥öt_°©s
(c⁄° * 
°r
)

225 
öt64_t
 
öfuŒ
, 
outfuŒ
;

227 i‡(0 !
rcﬁl
.
out_ªm_cou¡
)

228 
	`Ârötf
(
°dîr
, "Ñemaöög block cou¡=%"
PRId64
"\n",

229 
rcﬁl
.
out_ªm_cou¡
);

230 
öfuŒ
 = 
dd_cou¡
 - 
rcﬁl
.
ö_ªm_cou¡
;

231 
	`Ârötf
(
°dîr
, "%s%"
PRId64
"+%dÑec‹d†ö\n", 
°r
,

232 
öfuŒ
 - 
rcﬁl
.
ö_∑πül
,Ñcoll.in_partial);

234 
outfuŒ
 = 
dd_cou¡
 - 
rcﬁl
.
out_ªm_cou¡
;

235 
	`Ârötf
(
°dîr
, "%s%"
PRId64
"+%dÑec‹d†out\n", 
°r
,

236 
outfuŒ
 - 
rcﬁl
.
out_∑πül
,Ñcoll.out_partial);

237 
	}
}

240 
	$öãºu±_h™dÀr
(
sig
)

242 
siga˘i⁄
 
siga˘
;

244 
siga˘
.
ß_h™dÀr
 = 
SIG_DFL
;

245 
	`sigem±y£t
(&
siga˘
.
ß_mask
);

246 
siga˘
.
ß_Êags
 = 0;

247 
	`siga˘i⁄
(
sig
, &
siga˘
, 
NULL
);

248 
	`Ârötf
(
°dîr
, "Interrupted by signal,");

249 i‡(
do_time
)

250 
	`ˇlc_duøti⁄_throughput
(0);

251 
	`¥öt_°©s
("");

252 
	`kûl
(
	`gëpid
 (), 
sig
);

253 
	}
}

256 
	$sigöfo_h™dÀr
(
sig
)

258 
sig
 = sig;

259 
	`Ârötf
(
°dîr
, "ProgressÑeport, continuing ...\n");

260 i‡(
do_time
)

261 
	`ˇlc_duøti⁄_throughput
(1);

262 
	`¥öt_°©s
(" ");

263 
	}
}

266 
ö°Æl_h™dÀr
(
sig_num
, (*
sig_h™dÀr
Ë(
sig
))

268 
siga˘i⁄
 
siga˘
;

269 
	`siga˘i⁄
 (
sig_num
, 
NULL
, &
siga˘
);

270 i‡(
siga˘
.
ß_h™dÀr
 !
SIG_IGN
)

272 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

273 
	`sigem±y£t
 (&
siga˘
.
ß_mask
);

274 
siga˘
.
ß_Êags
 = 0;

275 
	`siga˘i⁄
 (
sig_num
, &
siga˘
, 
NULL
);

277 
	}
}

281 
	$tß„_°ªº‹
(
code
, * 
ebp
)

283 * 
˝
;

285 
	`±hªad_muãx_lock
(&
°ªº_mut
);

286 
˝
 = 
	`ß„_°ªº‹
(
code
);

287 
	`°∫˝y
(
ebp
, 
˝
, 
STRERR_BUFF_LEN
);

288 
	`±hªad_muãx_u∆ock
(&
°ªº_mut
);

290 
ebp
[
STRERR_BUFF_LEN
 - 1] = '\0';

291  
ebp
;

292 
	}
}

297 
	#îr_exô
(
code
,
ãxt
) do { \

298 
°ªº_buff
[
STRERR_BUFF_LEN
]; \

299 
	`Ârötf
(
°dîr
, "%sát \"%s\":%d: %s\n", \

300 
ãxt
, 
__FILE__
, 
__LINE__
, 
	`tß„_°ªº‹
(
code
, 
°ªº_buff
)); \

301 
	`exô
(1); \

302 } 0)

	)

306 
	$dd_fûëy≥
(c⁄° * 
fûíame
)

308 
°©
 
°
;

309 
size_t
 
Àn
 = 
	`°æí
(
fûíame
);

311 i‡((1 =
Àn
Ë&& ('.' =
fûíame
[0]))

312  
FT_DEV_NULL
;

313 i‡(
	`°©
(
fûíame
, &
°
) < 0)

314  
FT_ERROR
;

315 i‡(
	`S_ISCHR
(
°
.
°_mode
)) {

316 i‡((
MEM_MAJOR
 =
	`maj‹
(
°
.
°_rdev
)) &&

317 (
DEV_NULL_MINOR_NUM
 =
	`mö‹
(
°
.
°_rdev
)))

318  
FT_DEV_NULL
;

319 i‡(
RAW_MAJOR
 =
	`maj‹
(
°
.
°_rdev
))

320  
FT_RAW
;

321 i‡(
SCSI_GENERIC_MAJOR
 =
	`maj‹
(
°
.
°_rdev
))

322  
FT_SG
;

323 i‡(
SCSI_TAPE_MAJOR
 =
	`maj‹
(
°
.
°_rdev
))

324  
FT_ST
;

325 } i‡(
	`S_ISBLK
(
°
.
°_mode
))

326  
FT_BLOCK
;

327  
FT_OTHER
;

328 
	}
}

331 
	$ußge
()

333 
	`Ârötf
(
°dîr
, "Usage: "

339 
	`Ârötf
(
°dîr
,

353 
	`Ârötf
(
°dîr
,

381 
	}
}

384 
	$gu¨ded_°›_ö
(
Rq_cﬁl
 * 
˛p
)

386 
	`±hªad_muãx_lock
(&
˛p
->
ö_muãx
);

387 
˛p
->
ö_°›
 = 1;

388 
	`±hªad_muãx_u∆ock
(&
˛p
->
ö_muãx
);

389 
	}
}

392 
	$gu¨ded_°›_out
(
Rq_cﬁl
 * 
˛p
)

394 
	`±hªad_muãx_lock
(&
˛p
->
out_muãx
);

395 
˛p
->
out_°›
 = 1;

396 
	`±hªad_muãx_u∆ock
(&
˛p
->
out_muãx
);

397 
	}
}

400 
	$gu¨ded_°›_bŸh
(
Rq_cﬁl
 * 
˛p
)

402 
	`gu¨ded_°›_ö
(
˛p
);

403 
	`gu¨ded_°›_out
(
˛p
);

404 
	}
}

408 
	$scsi_ªad_ˇ∑côy
(
sg_fd
, 
öt64_t
 * 
num_£˘
, * 
£˘_sz
)

410 
k
, 
ªs
;

411 
ui
;

412 
rcBuff
[
RCAP16_REPLY_LEN
];

414 
ªs
 = 
	`sg_Œ_ªadˇp_10
(
sg_fd
, 0, 0, 
rcBuff
, 
READ_CAP_REPLY_LEN
, 0, 0);

415 i‡(0 !
ªs
)

416  
ªs
;

418 i‡((0xf‡=
rcBuff
[0]) && (0xff ==ÑcBuff[1]) && (0xff ==ÑcBuff[2]) &&

419 (0xf‡=
rcBuff
[3])) {

420 
öt64_t
 
ls
;

422 
ªs
 = 
	`sg_Œ_ªadˇp_16
(
sg_fd
, 0, 0, 
rcBuff
, 
RCAP16_REPLY_LEN
, 0, 0);

423 i‡(0 !
ªs
)

424  
ªs
;

425 
k
 = 0, 
ls
 = 0; k < 8; ++k) {

426 
ls
 <<= 8;

427 
ls
 |
rcBuff
[
k
];

429 *
num_£˘
 = 
ls
 + 1;

430 *
£˘_sz
 = (
rcBuff
[8] << 24) | (rcBuff[9] << 16) |

431 (
rcBuff
[10] << 8) |ÑcBuff[11];

433 
ui
 = ((
rcBuff
[0] << 24) | (rcBuff[1] << 16) | (rcBuff[2] << 8) |

434 
rcBuff
[3]);

436 *
num_£˘
 = (
öt64_t
)
ui
 + 1;

437 *
£˘_sz
 = (
rcBuff
[4] << 24) | (rcBuff[5] << 16) |

438 (
rcBuff
[6] << 8) |ÑcBuff[7];

441 
	}
}

446 
	$ªad_blkdev_ˇ∑côy
(
sg_fd
, 
öt64_t
 * 
num_£˘
, * 
£˘_sz
)

448 #ifde‡
BLKSSZGET


449 i‡((
	`io˘l
(
sg_fd
, 
BLKSSZGET
, 
£˘_sz
) < 0) && (*sect_sz > 0)) {

450 
	`≥º‹
("BLKSSZGET ioctlÉrror");

453 #ifde‡
BLKGETSIZE64


454 
uöt64_t
 
uŒ
;

456 i‡(
	`io˘l
(
sg_fd
, 
BLKGETSIZE64
, &
uŒ
) < 0) {

458 
	`≥º‹
("BLKGETSIZE64 ioctlÉrror");

461 *
num_£˘
 = ((
öt64_t
)
uŒ
 / (öt64_t)*
£˘_sz
);

463 
ul
;

465 i‡(
	`io˘l
(
sg_fd
, 
BLKGETSIZE
, &
ul
) < 0) {

466 
	`≥º‹
("BLKGETSIZE ioctlÉrror");

469 *
num_£˘
 = (
öt64_t
)
ul
;

474 *
num_£˘
 = 0;

475 *
£˘_sz
 = 0;

478 
	}
}

481 
	$sig_li°í_thªad
(* 
v_˛p
)

483 
Rq_cﬁl
 * 
˛p
 = (Rq_cﬁ»*)
v_˛p
;

484 
sig_numbî
;

487 
	`sigwaô
(&
sig«l_£t
, &
sig_numbî
);

488 i‡(
SIGINT
 =
sig_numbî
) {

489 
	`Ârötf
(
°dîr
, 
ME
 "interrupted by SIGINT\n");

490 
	`gu¨ded_°›_bŸh
(
˛p
);

491 
	`±hªad_c⁄d_brﬂdˇ°
(&
˛p
->
out_sync_cv
);

494  
NULL
;

495 
	}
}

498 
	$˛ónup_ö
(* 
v_˛p
)

500 
Rq_cﬁl
 * 
˛p
 = (Rq_cﬁ»*)
v_˛p
;

502 
	`Ârötf
(
°dîr
, "thread cancelled while in mutex held\n");

503 
˛p
->
ö_°›
 = 1;

504 
	`±hªad_muãx_u∆ock
(&
˛p
->
ö_muãx
);

505 
	`gu¨ded_°›_out
(
˛p
);

506 
	`±hªad_c⁄d_brﬂdˇ°
(&
˛p
->
out_sync_cv
);

507 
	}
}

510 
	$˛ónup_out
(* 
v_˛p
)

512 
Rq_cﬁl
 * 
˛p
 = (Rq_cﬁ»*)
v_˛p
;

514 
	`Ârötf
(
°dîr
, "thread cancelled while out mutex held\n");

515 
˛p
->
out_°›
 = 1;

516 
	`±hªad_muãx_u∆ock
(&
˛p
->
out_muãx
);

517 
	`gu¨ded_°›_ö
(
˛p
);

518 
	`±hªad_c⁄d_brﬂdˇ°
(&
˛p
->
out_sync_cv
);

519 
	}
}

522 
	$ªad_wrôe_thªad
(* 
v_˛p
)

524 
Rq_cﬁl
 * 
˛p
;

525 
Rq_ñem
 
ªl
;

526 
Rq_ñem
 * 
ªp
 = &
ªl
;

527 
size_t
 
psz
 = 0;

528 
sz
;

529 vﬁ©ûê
°›_a·î_wrôe
 = 0;

530 
öt64_t
 
£ek_skù
;

531 
blocks
, 
°©us
;

533 
˛p
 = (
Rq_cﬁl
 *)
v_˛p
;

534 
sz
 = 
˛p
->
b±
 * cÕ->
bs
;

535 
£ek_skù
 = 
˛p
->
£ek
 - cÕ->
skù
;

536 
	`mem£t
(
ªp
, 0, (
Rq_ñem
));

537 
psz
 = 
	`gë∑gesize
();

538 i‡(
NULL
 =(
ªp
->
Æloc_bp
 = (*)
	`mÆloc
(
sz
 + 
psz
)))

539 
	`îr_exô
(
ENOMEM
, "out of memory creating user buffers\n");

540 
ªp
->
bufÂ
 = (*)(((Ïï->
Æloc_bp
 + 
psz
 - 1) &

541 (~(
psz
 - 1)));

543 
ªp
->
bs
 = 
˛p
->bs;

544 
ªp
->
öfd
 = 
˛p
->infd;

545 
ªp
->
outfd
 = 
˛p
->outfd;

546 
ªp
->
debug
 = 
˛p
->debug;

547 
ªp
->
cdbsz_ö
 = 
˛p
->cdbsz_in;

548 
ªp
->
cdbsz_out
 = 
˛p
->cdbsz_out;

549 
ªp
->
ö_Êags
 = 
˛p
->in_flags;

550 
ªp
->
out_Êags
 = 
˛p
->out_flags;

553 
°©us
 = 
	`±hªad_muãx_lock
(&
˛p
->
ö_muãx
);

554 i‡(0 !
°©us
Ë
	`îr_exô
(status, "lock in_mutex");

555 i‡(
˛p
->
ö_°›
 || (˛p->
ö_cou¡
 <= 0)) {

557 
°©us
 = 
	`±hªad_muãx_u∆ock
(&
˛p
->
ö_muãx
);

558 i‡(0 !
°©us
Ë
	`îr_exô
(status, "unlock in_mutex");

561 
blocks
 = (
˛p
->
ö_cou¡
 > cÕ->
b±
) ? clp->bpt : clp->in_count;

562 
ªp
->
wr
 = 0;

563 
ªp
->
blk
 = 
˛p
->
ö_blk
;

564 
ªp
->
num_blks
 = 
blocks
;

565 
˛p
->
ö_blk
 +
blocks
;

566 
˛p
->
ö_cou¡
 -
blocks
;

568 
	`±hªad_˛ónup_push
(
˛ónup_ö
, (*)
˛p
);

569 i‡(
FT_SG
 =
˛p
->
ö_ty≥
)

570 
	`sg_ö_›î©i⁄
(
˛p
, 
ªp
);

572 
°›_a·î_wrôe
 = 
	`n‹mÆ_ö_›î©i⁄
(
˛p
, 
ªp
, 
blocks
);

573 
°©us
 = 
	`±hªad_muãx_u∆ock
(&
˛p
->
ö_muãx
);

574 i‡(0 !
°©us
Ë
	`îr_exô
(status, "unlock in_mutex");

576 
	`±hªad_˛ónup_p›
(0);

578 
°©us
 = 
	`±hªad_muãx_lock
(&
˛p
->
out_muãx
);

579 i‡(0 !
°©us
Ë
	`îr_exô
(status, "lock out_mutex");

580 i‡(
FT_DEV_NULL
 !
˛p
->
out_ty≥
) {

581 (! 
˛p
->
out_°›
) &&

582 ((
ªp
->
blk
 + 
£ek_skù
Ë!
˛p
->
out_blk
)) {

584 
	`±hªad_˛ónup_push
(
˛ónup_out
, (*)
˛p
);

585 
°©us
 = 
	`±hªad_c⁄d_waô
(&
˛p
->
out_sync_cv
, &˛p->
out_muãx
);

586 i‡(0 !
°©us
Ë
	`îr_exô
(status, "cond out_sync_cv");

587 
	`±hªad_˛ónup_p›
(0);

591 i‡(
˛p
->
out_°›
 || (˛p->
out_cou¡
 <= 0)) {

592 i‡(! 
˛p
->
out_°›
)

593 
˛p
->
out_°›
 = 1;

594 
°©us
 = 
	`±hªad_muãx_u∆ock
(&
˛p
->
out_muãx
);

595 i‡(0 !
°©us
Ë
	`îr_exô
(status, "unlock out_mutex");

598 i‡(
°›_a·î_wrôe
)

599 
˛p
->
out_°›
 = 1;

600 
ªp
->
wr
 = 1;

601 
ªp
->
blk
 = 
˛p
->
out_blk
;

602 
˛p
->
out_blk
 +
blocks
;

603 
˛p
->
out_cou¡
 -
blocks
;

605 i‡(0 =
ªp
->
num_blks
) {

606 
˛p
->
out_°›
 = 1;

607 
°›_a·î_wrôe
 = 1;

608 
°©us
 = 
	`±hªad_muãx_u∆ock
(&
˛p
->
out_muãx
);

609 i‡(0 !
°©us
Ë
	`îr_exô
(status, "unlock out_mutex");

613 
	`±hªad_˛ónup_push
(
˛ónup_out
, (*)
˛p
);

614 i‡(
FT_SG
 =
˛p
->
out_ty≥
)

615 
	`sg_out_›î©i⁄
(
˛p
, 
ªp
);

616 i‡(
FT_DEV_NULL
 =
˛p
->
out_ty≥
) {

618 
˛p
->
out_ªm_cou¡
 -
blocks
;

619 
°©us
 = 
	`±hªad_muãx_u∆ock
(&
˛p
->
out_muãx
);

620 i‡(0 !
°©us
Ë
	`îr_exô
(status, "unlock out_mutex");

623 
	`n‹mÆ_out_›î©i⁄
(
˛p
, 
ªp
, 
blocks
);

624 
°©us
 = 
	`±hªad_muãx_u∆ock
(&
˛p
->
out_muãx
);

625 i‡(0 !
°©us
Ë
	`îr_exô
(status, "unlock out_mutex");

627 
	`±hªad_˛ónup_p›
(0);

629 i‡(
°›_a·î_wrôe
)

631 
	`±hªad_c⁄d_brﬂdˇ°
(&
˛p
->
out_sync_cv
);

633 i‡(
ªp
->
Æloc_bp
Ë
	`‰ì
(rep->alloc_bp);

634 
°©us
 = 
	`±hªad_muãx_lock
(&
˛p
->
ö_muãx
);

635 i‡(0 !
°©us
Ë
	`îr_exô
(status, "lock in_mutex");

636 i‡(! 
˛p
->
ö_°›
)

637 
˛p
->
ö_°›
 = 1;

638 
°©us
 = 
	`±hªad_muãx_u∆ock
(&
˛p
->
ö_muãx
);

639 i‡(0 !
°©us
Ë
	`îr_exô
(status, "unlock in_mutex");

640 
	`±hªad_c⁄d_brﬂdˇ°
(&
˛p
->
out_sync_cv
);

641  
°›_a·î_wrôe
 ? 
NULL
 : 
˛p
;

642 
	}
}

645 
	$n‹mÆ_ö_›î©i⁄
(
Rq_cﬁl
 * 
˛p
, 
Rq_ñem
 * 
ªp
, 
blocks
)

647 
ªs
;

648 
°›_a·î_wrôe
 = 0;

649 
°ªº_buff
[
STRERR_BUFF_LEN
];

652 ((
ªs
 = 
	`ªad
(
˛p
->
öfd
, 
ªp
->
bufÂ
,

653 
blocks
 * 
˛p
->
bs
)Ë< 0Ë&& (
EINTR
 =
î∫o
))

655 i‡(
ªs
 < 0) {

656 i‡(
˛p
->
ö_Êags
.
c€
) {

657 
	`mem£t
(
ªp
->
bufÂ
, 0,Ñï->
num_blks
 *Ñï->
bs
);

658 
	`Ârötf
(
°dîr
, ">> sub°ôuãd zîo†f‹ i¿blk=%"
PRId64
" for "

659 "%d byãs, %s\n", 
ªp
->
blk
,

660 
ªp
->
num_blks
 *Ñï->
bs
,

661 
	`tß„_°ªº‹
(
î∫o
, 
°ªº_buff
));

662 
ªs
 = 
ªp
->
num_blks
 * 
˛p
->
bs
;

665 
	`Ârötf
(
°dîr
, "error inÇormalÑead, %s\n",

666 
	`tß„_°ªº‹
(
î∫o
, 
°ªº_buff
));

667 
˛p
->
ö_°›
 = 1;

668 
	`gu¨ded_°›_out
(
˛p
);

672 i‡(
ªs
 < 
blocks
 * 
˛p
->
bs
) {

673 
o_blocks
 = 
blocks
;

674 
°›_a·î_wrôe
 = 1;

675 
blocks
 = 
ªs
 / 
˛p
->
bs
;

676 i‡((
ªs
 % 
˛p
->
bs
) > 0) {

677 
blocks
++;

678 
˛p
->
ö_∑πül
++;

681 
˛p
->
ö_blk
 -
o_blocks
;

682 
˛p
->
ö_cou¡
 +
o_blocks
;

683 
ªp
->
num_blks
 = 
blocks
;

684 
˛p
->
ö_blk
 +
blocks
;

685 
˛p
->
ö_cou¡
 -
blocks
;

687 
˛p
->
ö_ªm_cou¡
 -
blocks
;

688  
°›_a·î_wrôe
;

689 
	}
}

692 
	$n‹mÆ_out_›î©i⁄
(
Rq_cﬁl
 * 
˛p
, 
Rq_ñem
 * 
ªp
, 
blocks
)

694 
ªs
;

695 
°ªº_buff
[
STRERR_BUFF_LEN
];

698 ((
ªs
 = 
	`wrôe
(
˛p
->
outfd
, 
ªp
->
bufÂ
,

699 
ªp
->
num_blks
 * 
˛p
->
bs
)Ë< 0Ë&& (
EINTR
 =
î∫o
))

701 i‡(
ªs
 < 0) {

702 i‡(
˛p
->
out_Êags
.
c€
) {

703 
	`Ârötf
(
°dîr
, ">> ign‹edÉº‹ f‹ ouàblk=%"
PRId64
" for "

704 "%d byãs, %s\n", 
ªp
->
blk
,

705 
ªp
->
num_blks
 *Ñï->
bs
,

706 
	`tß„_°ªº‹
(
î∫o
, 
°ªº_buff
));

707 
ªs
 = 
ªp
->
num_blks
 * 
˛p
->
bs
;

710 
	`Ârötf
(
°dîr
, "errorÇormal write, %s\n",

711 
	`tß„_°ªº‹
(
î∫o
, 
°ªº_buff
));

712 
	`gu¨ded_°›_ö
(
˛p
);

713 
˛p
->
out_°›
 = 1;

717 i‡(
ªs
 < 
blocks
 * 
˛p
->
bs
) {

718 
blocks
 = 
ªs
 / 
˛p
->
bs
;

719 i‡((
ªs
 % 
˛p
->
bs
) > 0) {

720 
blocks
++;

721 
˛p
->
out_∑πül
++;

723 
ªp
->
num_blks
 = 
blocks
;

725 
˛p
->
out_ªm_cou¡
 -
blocks
;

726 
	}
}

729 
	$sg_buûd_scsi_cdb
(* 
cdbp
, 
cdb_sz
, 
blocks
,

730 
öt64_t
 
°¨t_block
, 
wrôe_åue
, 
fua
, 
dpo
)

732 
rd_›code
[] = {0x8, 0x28, 0xa8, 0x88};

733 
wr_›code
[] = {0xa, 0x2a, 0xaa, 0x8a};

734 
sz_öd
;

736 
	`mem£t
(
cdbp
, 0, 
cdb_sz
);

737 i‡(
dpo
)

738 
cdbp
[1] |= 0x10;

739 i‡(
fua
)

740 
cdbp
[1] |= 0x8;

741 
cdb_sz
) {

743 
sz_öd
 = 0;

744 
cdbp
[0] = ()(
wrôe_åue
 ? 
wr_›code
[
sz_öd
] :

745 
rd_›code
[
sz_öd
]);

746 
cdbp
[1] = ()((
°¨t_block
 >> 16) & 0x1f);

747 
cdbp
[2] = ()((
°¨t_block
 >> 8) & 0xff);

748 
cdbp
[3] = ()(
°¨t_block
 & 0xff);

749 
cdbp
[4] = (256 =
blocks
) ? 0 : ()blocks;

750 i‡(
blocks
 > 256) {

751 
	`Ârötf
(
°dîr
, 
ME
 "for 6 byte commands, maximumÇumber of "

755 i‡((
°¨t_block
 + 
blocks
 - 1) & (~0x1fffff)) {

756 
	`Ârötf
(
°dîr
, 
ME
 "for 6 byte commands, can'táddress blocks"

760 i‡(
dpo
 || 
fua
) {

761 
	`Ârötf
(
°dîr
, 
ME
 "for 6 byte commands,Çeither dpoÇor fua"

767 
sz_öd
 = 1;

768 
cdbp
[0] = ()(
wrôe_åue
 ? 
wr_›code
[
sz_öd
] :

769 
rd_›code
[
sz_öd
]);

770 
cdbp
[2] = ()((
°¨t_block
 >> 24) & 0xff);

771 
cdbp
[3] = ()((
°¨t_block
 >> 16) & 0xff);

772 
cdbp
[4] = ()((
°¨t_block
 >> 8) & 0xff);

773 
cdbp
[5] = ()(
°¨t_block
 & 0xff);

774 
cdbp
[7] = ()((
blocks
 >> 8) & 0xff);

775 
cdbp
[8] = ()(
blocks
 & 0xff);

776 i‡(
blocks
 & (~0xffff)) {

777 
	`Ârötf
(
°dîr
, 
ME
 "for 10 byte commands, maximumÇumber of "

783 
sz_öd
 = 2;

784 
cdbp
[0] = ()(
wrôe_åue
 ? 
wr_›code
[
sz_öd
] :

785 
rd_›code
[
sz_öd
]);

786 
cdbp
[2] = ()((
°¨t_block
 >> 24) & 0xff);

787 
cdbp
[3] = ()((
°¨t_block
 >> 16) & 0xff);

788 
cdbp
[4] = ()((
°¨t_block
 >> 8) & 0xff);

789 
cdbp
[5] = ()(
°¨t_block
 & 0xff);

790 
cdbp
[6] = ()((
blocks
 >> 24) & 0xff);

791 
cdbp
[7] = ()((
blocks
 >> 16) & 0xff);

792 
cdbp
[8] = ()((
blocks
 >> 8) & 0xff);

793 
cdbp
[9] = ()(
blocks
 & 0xff);

796 
sz_öd
 = 3;

797 
cdbp
[0] = ()(
wrôe_åue
 ? 
wr_›code
[
sz_öd
] :

798 
rd_›code
[
sz_öd
]);

799 
cdbp
[2] = ()((
°¨t_block
 >> 56) & 0xff);

800 
cdbp
[3] = ()((
°¨t_block
 >> 48) & 0xff);

801 
cdbp
[4] = ()((
°¨t_block
 >> 40) & 0xff);

802 
cdbp
[5] = ()((
°¨t_block
 >> 32) & 0xff);

803 
cdbp
[6] = ()((
°¨t_block
 >> 24) & 0xff);

804 
cdbp
[7] = ()((
°¨t_block
 >> 16) & 0xff);

805 
cdbp
[8] = ()((
°¨t_block
 >> 8) & 0xff);

806 
cdbp
[9] = ()(
°¨t_block
 & 0xff);

807 
cdbp
[10] = ()((
blocks
 >> 24) & 0xff);

808 
cdbp
[11] = ()((
blocks
 >> 16) & 0xff);

809 
cdbp
[12] = ()((
blocks
 >> 8) & 0xff);

810 
cdbp
[13] = ()(
blocks
 & 0xff);

813 
	`Ârötf
(
°dîr
, 
ME
 "expected cdb size of 6, 10, 12, or 16 but got"

814 " %d\n", 
cdb_sz
);

818 
	}
}

821 
	$sg_ö_›î©i⁄
(
Rq_cﬁl
 * 
˛p
, 
Rq_ñem
 * 
ªp
)

823 
ªs
;

824 
°©us
;

828 
ªs
 = 
	`sg_°¨t_io
(
ªp
);

829 i‡(1 =
ªs
)

830 
	`îr_exô
(
ENOMEM
, "sg starting in command");

831 i‡(
ªs
 < 0) {

832 
	`Ârötf
(
°dîr
, 
ME
 "öpuâögÅÿsg faûed, blk=%"
PRId64
"\n",

833 
ªp
->
blk
);

834 
°©us
 = 
	`±hªad_muãx_u∆ock
(&
˛p
->
ö_muãx
);

835 i‡(0 !
°©us
Ë
	`îr_exô
(status, "unlock in_mutex");

836 
	`gu¨ded_°›_bŸh
(
˛p
);

840 
°©us
 = 
	`±hªad_muãx_u∆ock
(&
˛p
->
ö_muãx
);

841 i‡(0 !
°©us
Ë
	`îr_exô
(status, "unlock in_mutex");

843 
ªs
 = 
	`sg_föish_io
(
ªp
->
wr
,Ñï, &
˛p
->
aux_muãx
);

844 
ªs
) {

845 
SG_LIB_CAT_ABORTED_COMMAND
:

846 
SG_LIB_CAT_UNIT_ATTENTION
:

850 
°©us
 = 
	`±hªad_muãx_lock
(&
˛p
->
ö_muãx
);

851 i‡(0 !
°©us
Ë
	`îr_exô
(status, "lock in_mutex");

853 
SG_LIB_CAT_MEDIUM_HARD
:

854 i‡(0 =
˛p
->
ö_Êags
.
c€
) {

855 
	`Ârötf
(
°dîr
, "error finishing sg in command (medium)\n");

856 i‡(
exô_°©us
 <= 0)

857 
exô_°©us
 = 
ªs
;

858 
	`gu¨ded_°›_bŸh
(
˛p
);

861 
	`mem£t
(
ªp
->
bufÂ
, 0,Ñï->
num_blks
 *Ñï->
bs
);

862 
	`Ârötf
(
°dîr
, ">> sub°ôuãd zîo†f‹ i¿blk=%" 
PRId64


863 " f‹ %d byãs\n", 
ªp
->
blk
,Ñï->
num_blks
 *Ñï->
bs
);

867 i‡(
ªp
->
dio_öcom∂ëe
 ||Ñï->
ªsid
) {

868 
°©us
 = 
	`±hªad_muãx_lock
(&
˛p
->
aux_muãx
);

869 i‡(0 !
°©us
Ë
	`îr_exô
(status, "lockáux_mutex");

870 
˛p
->
dio_öcom∂ëe
 +
ªp
->dio_incomplete;

871 
˛p
->
sum_of_ªsids
 +
ªp
->
ªsid
;

872 
°©us
 = 
	`±hªad_muãx_u∆ock
(&
˛p
->
aux_muãx
);

873 i‡(0 !
°©us
Ë
	`îr_exô
(status, "unlockáux_mutex");

875 
°©us
 = 
	`±hªad_muãx_lock
(&
˛p
->
ö_muãx
);

876 i‡(0 !
°©us
Ë
	`îr_exô
(status, "lock in_mutex");

877 
˛p
->
ö_ªm_cou¡
 -
ªp
->
num_blks
;

878 
°©us
 = 
	`±hªad_muãx_u∆ock
(&
˛p
->
ö_muãx
);

879 i‡(0 !
°©us
Ë
	`îr_exô
(status, "unlock in_mutex");

882 
	`Ârötf
(
°dîr
, "îr‹ föishög sg i¿comm™d (%d)\n", 
ªs
);

883 i‡(
exô_°©us
 <= 0)

884 
exô_°©us
 = 
ªs
;

885 
	`gu¨ded_°›_bŸh
(
˛p
);

889 
	}
}

892 
	$sg_out_›î©i⁄
(
Rq_cﬁl
 * 
˛p
, 
Rq_ñem
 * 
ªp
)

894 
ªs
;

895 
°©us
;

899 
ªs
 = 
	`sg_°¨t_io
(
ªp
);

900 i‡(1 =
ªs
)

901 
	`îr_exô
(
ENOMEM
, "sg starting out command");

902 i‡(
ªs
 < 0) {

903 
	`Ârötf
(
°dîr
, 
ME
 "ouçuâög from sg faûed, blk=%"
PRId64
"\n",

904 
ªp
->
blk
);

905 
°©us
 = 
	`±hªad_muãx_u∆ock
(&
˛p
->
out_muãx
);

906 i‡(0 !
°©us
Ë
	`îr_exô
(status, "unlock out_mutex");

907 
	`gu¨ded_°›_bŸh
(
˛p
);

911 
°©us
 = 
	`±hªad_muãx_u∆ock
(&
˛p
->
out_muãx
);

912 i‡(0 !
°©us
Ë
	`îr_exô
(status, "unlock out_mutex");

914 
ªs
 = 
	`sg_föish_io
(
ªp
->
wr
,Ñï, &
˛p
->
aux_muãx
);

915 
ªs
) {

916 
SG_LIB_CAT_ABORTED_COMMAND
:

917 
SG_LIB_CAT_UNIT_ATTENTION
:

921 
°©us
 = 
	`±hªad_muãx_lock
(&
˛p
->
out_muãx
);

922 i‡(0 !
°©us
Ë
	`îr_exô
(status, "lock out_mutex");

924 
SG_LIB_CAT_MEDIUM_HARD
:

925 i‡(0 =
˛p
->
out_Êags
.
c€
) {

926 
	`Ârötf
(
°dîr
, "error finishing sg out command (medium)\n");

927 i‡(
exô_°©us
 <= 0)

928 
exô_°©us
 = 
ªs
;

929 
	`gu¨ded_°›_bŸh
(
˛p
);

932 
	`Ârötf
(
°dîr
, ">> ign‹edÉº‹ f‹ ouàblk=%"
PRId64
" for "

933 "%d byãs\n", 
ªp
->
blk
,Ñï->
num_blks
 *Ñï->
bs
);

936 i‡(
ªp
->
dio_öcom∂ëe
 ||Ñï->
ªsid
) {

937 
°©us
 = 
	`±hªad_muãx_lock
(&
˛p
->
aux_muãx
);

938 i‡(0 !
°©us
Ë
	`îr_exô
(status, "lockáux_mutex");

939 
˛p
->
dio_öcom∂ëe
 +
ªp
->dio_incomplete;

940 
˛p
->
sum_of_ªsids
 +
ªp
->
ªsid
;

941 
°©us
 = 
	`±hªad_muãx_u∆ock
(&
˛p
->
aux_muãx
);

942 i‡(0 !
°©us
Ë
	`îr_exô
(status, "unlockáux_mutex");

944 
°©us
 = 
	`±hªad_muãx_lock
(&
˛p
->
out_muãx
);

945 i‡(0 !
°©us
Ë
	`îr_exô
(status, "lock out_mutex");

946 
˛p
->
out_ªm_cou¡
 -
ªp
->
num_blks
;

947 
°©us
 = 
	`±hªad_muãx_u∆ock
(&
˛p
->
out_muãx
);

948 i‡(0 !
°©us
Ë
	`îr_exô
(status, "unlock out_mutex");

951 
	`Ârötf
(
°dîr
, "îr‹ föishög sg ouàcomm™d (%d)\n", 
ªs
);

952 i‡(
exô_°©us
 <= 0)

953 
exô_°©us
 = 
ªs
;

954 
	`gu¨ded_°›_bŸh
(
˛p
);

958 
	}
}

961 
	$sg_°¨t_io
(
Rq_ñem
 * 
ªp
)

963 
sg_io_hdr
 * 
hp
 = &
ªp
->
io_hdr
;

964 
fua
 = 
ªp
->
wr
 ?Ñï->
out_Êags
.fu®:Ñï->
ö_Êags
.fua;

965 
dpo
 = 
ªp
->
wr
 ?Ñï->
out_Êags
.dpÿ:Ñï->
ö_Êags
.dpo;

966 
dio
 = 
ªp
->
wr
 ?Ñï->
out_Êags
.diÿ:Ñï->
ö_Êags
.dio;

967 
cdbsz
 = 
ªp
->
wr
 ?Ñï->
cdbsz_out
 :Ñï->
cdbsz_ö
;

968 
ªs
;

970 i‡(
	`sg_buûd_scsi_cdb
(
ªp
->
cmd
, 
cdbsz
,Ñï->
num_blks
,Ñï->
blk
,

971 
ªp
->
wr
, 
fua
, 
dpo
)) {

972 
	`Ârötf
(
°dîr
, 
ME
 "bad cdb buûd, sèπ_blk=%"
PRId64
", blocks=%d\n",

973 
ªp
->
blk
,Ñï->
num_blks
);

976 
	`mem£t
(
hp
, 0, (
sg_io_hdr
));

977 
hp
->
öãrÁ˚_id
 = 'S';

978 
hp
->
cmd_Àn
 = 
cdbsz
;

979 
hp
->
cmdp
 = 
ªp
->
cmd
;

980 
hp
->
dx„r_dúe˘i⁄
 = 
ªp
->
wr
 ? 
SG_DXFER_TO_DEV
 : 
SG_DXFER_FROM_DEV
;

981 
hp
->
dx„r_Àn
 = 
ªp
->
bs
 *Ñï->
num_blks
;

982 
hp
->
dx„Ω
 = 
ªp
->
bufÂ
;

983 
hp
->
mx_sb_Àn
 = (
ªp
->
sb
);

984 
hp
->
sbp
 = 
ªp
->
sb
;

985 
hp
->
timeout
 = 
DEF_TIMEOUT
;

986 
hp
->
u§_±r
 = 
ªp
;

987 
hp
->
∑ck_id
 = ()
ªp
->
blk
;

988 i‡(
dio
)

989 
hp
->
Êags
 |
SG_FLAG_DIRECT_IO
;

990 i‡(
ªp
->
debug
 > 8) {

991 
	`Ârötf
(
°dîr
, "sg_°¨t_io: SCSI %s, blk=%"
PRId64
"Çum_blks=%d\n",

992 
ªp
->
wr
 ? "WRITE" : "READ",Ñï->
blk
,Ñï->
num_blks
);

993 
	`sg_¥öt_comm™d
(
hp
->
cmdp
);

996 ((
ªs
 = 
	`wrôe
(
ªp
->
wr
 ?Ñï->
outfd
 :Ñï->
öfd
, 
hp
,

997 (
sg_io_hdr
))Ë< 0Ë&& (
EINTR
 =
î∫o
))

999 i‡(
ªs
 < 0) {

1000 i‡(
ENOMEM
 =
î∫o
)

1002 
	`≥º‹
("starting io on sg device,Érror");

1006 
	}
}

1012 
	$sg_föish_io
(
wr
, 
Rq_ñem
 * 
ªp
, 
±hªad_muãx_t
 * 
a_muç
)

1014 
ªs
, 
°©us
;

1015 
sg_io_hdr
 
io_hdr
;

1016 
sg_io_hdr
 * 
hp
;

1018 
ã°ög
 = 0;

1021 
	`mem£t
(&
io_hdr
, 0 , (
sg_io_hdr
));

1023 
io_hdr
.
öãrÁ˚_id
 = 'S';

1024 
io_hdr
.
dx„r_dúe˘i⁄
 = 
wr
 ? 
SG_DXFER_TO_DEV
 : 
SG_DXFER_FROM_DEV
;

1025 
io_hdr
.
∑ck_id
 = ()
ªp
->
blk
;

1027 ((
ªs
 = 
	`ªad
(
wr
 ? 
ªp
->
outfd
 :Ñï->
öfd
, &
io_hdr
,

1028 (
sg_io_hdr
))Ë< 0Ë&& (
EINTR
 =
î∫o
))

1030 i‡(
ªs
 < 0) {

1031 
	`≥º‹
("finishing io on sg device,Érror");

1034 i‡(
ªp
 !(
Rq_ñem
 *)
io_hdr
.
u§_±r
)

1035 
	`îr_exô
(0, "sg_finish_io: bad usr_ptr,Ñequest-response mismatch\n");

1036 
	`mem˝y
(&
ªp
->
io_hdr
, &io_hdr, (
sg_io_hdr
));

1037 
hp
 = &
ªp
->
io_hdr
;

1039 
ªs
 = 
	`sg_îr_ˇãg‹y3
(
hp
);

1040 
ªs
) {

1041 
SG_LIB_CAT_CLEAN
:

1043 
SG_LIB_CAT_RECOVERED
:

1044 
	`sg_chk_n_¥öt3
((
wr
 ? "writing continuing":

1045 "ªadög c⁄töuög"), 
hp
, 0);

1047 
SG_LIB_CAT_ABORTED_COMMAND
:

1048 
SG_LIB_CAT_UNIT_ATTENTION
:

1049 i‡(
ªp
->
debug
 > 8)

1050 
	`sg_chk_n_¥öt3
((
wr
 ? "wrôög": "ªadög"), 
hp
, 0);

1051  
ªs
;

1052 
SG_LIB_CAT_NOT_READY
:

1055 
ebuff
[
EBUFF_SZ
];

1057 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
, "%†blk=%"
PRId64
,

1058 
wr
 ? "wrôög": "ªadög", 
ªp
->
blk
);

1059 
°©us
 = 
	`±hªad_muãx_lock
(
a_muç
);

1060 i‡(0 !
°©us
Ë
	`îr_exô
(status, "lockáux_mutex");

1061 
	`sg_chk_n_¥öt3
(
ebuff
, 
hp
, 0);

1062 
°©us
 = 
	`±hªad_muãx_u∆ock
(
a_muç
);

1063 i‡(0 !
°©us
Ë
	`îr_exô
(status, "unlockáux_mutex");

1064  
ªs
;

1068 i‡(0 =(++
ã°ög
 % 100))  -1;

1070 i‡((
wr
 ? 
ªp
->
out_Êags
.
dio
 :Ñï->
ö_Êags
.dio) &&

1071 ((
hp
->
öfo
 & 
SG_INFO_DIRECT_IO_MASK
Ë!
SG_INFO_DIRECT_IO
))

1072 
ªp
->
dio_öcom∂ëe
 = 1;

1074 
ªp
->
dio_öcom∂ëe
 = 0;

1075 
ªp
->
ªsid
 = 
hp
->resid;

1076 i‡(
ªp
->
debug
 > 8)

1077 
	`Ârötf
(
°dîr
, "sg_föish_io: com∂ëed %s\n", 
wr
 ? "WRITE" : "READ");

1079 
	}
}

1082 
	$sg_¥ï¨e
(
fd
, 
bs
, 
b±
)

1084 
ªs
, 
t
;

1086 
ªs
 = 
	`io˘l
(
fd
, 
SG_GET_VERSION_NUM
, &
t
);

1087 i‡((
ªs
 < 0Ë|| (
t
 < 30000)) {

1088 
	`Ârötf
(
°dîr
, 
ME
 "sg driverÖriorÅo 3.x.y\n");

1091 
ªs
 = 0;

1092 
t
 = 
bs
 * 
b±
;

1093 
ªs
 = 
	`io˘l
(
fd
, 
SG_SET_RESERVED_SIZE
, &
t
);

1094 i‡(
ªs
 < 0)

1095 
	`≥º‹
(
ME
 "SG_SET_RESERVED_SIZEÉrror");

1096 
t
 = 1;

1097 
ªs
 = 
	`io˘l
(
fd
, 
SG_SET_FORCE_PACK_ID
, &
t
);

1098 i‡(
ªs
 < 0)

1099 
	`≥º‹
(
ME
 "SG_SET_FORCE_PACK_IDÉrror");

1101 
	}
}

1104 
	$¥o˚ss_Êags
(c⁄° * 
¨g
, 
Êags_t
 * 
Â
)

1106 
buff
[256];

1107 * 
˝
;

1108 * 
≈
;

1110 
	`°∫˝y
(
buff
, 
¨g
, (buff));

1111 
buff
[(buff) - 1] = '\0';

1112 i‡('\0' =
buff
[0]) {

1113 
	`Ârötf
(
°dîr
, "no flag found\n");

1116 
˝
 = 
buff
;

1118 
≈
 = 
	`°rchr
(
˝
, ',');

1119 i‡(
≈
)

1120 *
≈
++ = '\0';

1121 i‡(0 =
	`°rcmp
(
˝
, "append"))

1122 
Â
->
≠≥nd
 = 1;

1123 i‡(0 =
	`°rcmp
(
˝
, "coe"))

1124 
Â
->
c€
 = 1;

1125 i‡(0 =
	`°rcmp
(
˝
, "dio"))

1126 
Â
->
dio
 = 1;

1127 i‡(0 =
	`°rcmp
(
˝
, "direct"))

1128 
Â
->
dúe˘
 = 1;

1129 i‡(0 =
	`°rcmp
(
˝
, "dpo"))

1130 
Â
->
dpo
 = 1;

1131 i‡(0 =
	`°rcmp
(
˝
, "dsync"))

1132 
Â
->
dsync
 = 1;

1133 i‡(0 =
	`°rcmp
(
˝
, "excl"))

1134 
Â
->
ex˛
 = 1;

1135 i‡(0 =
	`°rcmp
(
˝
, "fua"))

1136 
Â
->
fua
 = 1;

1137 i‡(0 =
	`°rcmp
(
˝
, "null"))

1140 
	`Ârötf
(
°dîr
, "uƒecogni£d fœg: %s\n", 
˝
);

1143 
˝
 = 
≈
;

1144 } 
˝
);

1146 
	}
}

1149 
	#STR_SZ
 1024

	)

1150 
	#INOUTF_SZ
 512

	)

1154 
	$maö
(
¨gc
, * 
¨gv
[])

1156 
öt64_t
 
skù
 = 0;

1157 
öt64_t
 
£ek
 = 0;

1158 
ibs
 = 0;

1159 
obs
 = 0;

1160 
b±_giví
 = 0;

1161 
cdbsz_giví
 = 0;

1162 
°r
[
STR_SZ
];

1163 * 
key
;

1164 * 
buf
;

1165 
öf
[
INOUTF_SZ
];

1166 
outf
[
INOUTF_SZ
];

1167 
ªs
, 
k
;

1168 
öt64_t
 
ö_num_£˘
 = 0;

1169 
öt64_t
 
out_num_£˘
 = 0;

1170 
±hªad_t
 
thªads
[
MAX_NUM_THREADS
];

1171 
ö_£˘_sz
, 
out_£˘_sz
, 
°©us
, 
n
, 
Êags
;

1172 * 
vp
;

1173 
ebuff
[
EBUFF_SZ
];

1175 
	`mem£t
(&
rcﬁl
, 0, (
Rq_cﬁl
));

1176 
rcﬁl
.
b±
 = 
DEF_BLOCKS_PER_TRANSFER
;

1177 
rcﬁl
.
ö_ty≥
 = 
FT_OTHER
;

1178 
rcﬁl
.
out_ty≥
 = 
FT_OTHER
;

1179 
rcﬁl
.
cdbsz_ö
 = 
DEF_SCSI_CDBSZ
;

1180 
rcﬁl
.
cdbsz_out
 = 
DEF_SCSI_CDBSZ
;

1181 
öf
[0] = '\0';

1182 
outf
[0] = '\0';

1184 
k
 = 1; k < 
¨gc
; k++) {

1185 i‡(
¨gv
[
k
]) {

1186 
	`°∫˝y
(
°r
, 
¨gv
[
k
], 
STR_SZ
);

1187 
°r
[
STR_SZ
 - 1] = '\0';

1191 
key
 = 
°r
, 
buf
 = key; *buf && *buf != '=';)

1192 
buf
++;

1193 i‡(*
buf
)

1194 *
buf
++ = '\0';

1195 i‡(0 =
	`°rcmp
(
key
,"bpt")) {

1196 
rcﬁl
.
b±
 = 
	`sg_gë_num
(
buf
);

1197 i‡(-1 =
rcﬁl
.
b±
) {

1198 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'bpt='\n");

1199  
SG_LIB_SYNTAX_ERROR
;

1201 
b±_giví
 = 1;

1202 } i‡(0 =
	`°rcmp
(
key
,"bs")) {

1203 
rcﬁl
.
bs
 = 
	`sg_gë_num
(
buf
);

1204 i‡(-1 =
rcﬁl
.
bs
) {

1205 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'bs='\n");

1206  
SG_LIB_SYNTAX_ERROR
;

1208 } i‡(0 =
	`°rcmp
(
key
,"cdbsz")) {

1209 
rcﬁl
.
cdbsz_ö
 = 
	`sg_gë_num
(
buf
);

1210 
rcﬁl
.
cdbsz_out
 =Ñcﬁl.
cdbsz_ö
;

1211 
cdbsz_giví
 = 1;

1212 } i‡(0 =
	`°rcmp
(
key
,"coe")) {

1213 
rcﬁl
.
ö_Êags
.
c€
 = 
	`sg_gë_num
(
buf
);

1214 
rcﬁl
.
out_Êags
.
c€
 =Ñcﬁl.
ö_Êags
.coe;

1215 } i‡(0 =
	`°rcmp
(
key
,"count")) {

1216 i‡(0 !
	`°rcmp
("-1", 
buf
)) {

1217 
dd_cou¡
 = 
	`sg_gë_Œnum
(
buf
);

1218 i‡(-1LL =
dd_cou¡
) {

1219 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'count='\n");

1220  
SG_LIB_SYNTAX_ERROR
;

1223 } i‡((0 =
	`°∫cmp
(
key
,"deb", 3)) ||

1224 (0 =
	`°∫cmp
(
key
,"verb", 4)))

1225 
rcﬁl
.
debug
 = 
	`sg_gë_num
(
buf
);

1226 i‡(0 =
	`°rcmp
(
key
,"dio")) {

1227 
rcﬁl
.
ö_Êags
.
dio
 = 
	`sg_gë_num
(
buf
);

1228 
rcﬁl
.
out_Êags
.
dio
 =Ñcﬁl.
ö_Êags
.dio;

1229 } i‡(0 =
	`°rcmp
(
key
,"fua")) {

1230 
n
 = 
	`sg_gë_num
(
buf
);

1231 i‡(
n
 & 1)

1232 
rcﬁl
.
out_Êags
.
fua
 = 1;

1233 i‡(
n
 & 2)

1234 
rcﬁl
.
ö_Êags
.
fua
 = 1;

1235 } i‡(0 =
	`°rcmp
(
key
,"ibs")) {

1236 
ibs
 = 
	`sg_gë_num
(
buf
);

1237 i‡(-1 =
ibs
) {

1238 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'ibs='\n");

1239  
SG_LIB_SYNTAX_ERROR
;

1241 } i‡(
	`°rcmp
(
key
,"if") == 0) {

1242 i‡('\0' !
öf
[0]) {

1243 
	`Ârötf
(
°dîr
, "Second 'if='árgument??\n");

1244  
SG_LIB_SYNTAX_ERROR
;

1246 
	`°∫˝y
(
öf
, 
buf
, 
INOUTF_SZ
);

1247 } i‡(0 =
	`°rcmp
(
key
, "iflag")) {

1248 i‡(
	`¥o˚ss_Êags
(
buf
, &
rcﬁl
.
ö_Êags
)) {

1249 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'iflag='\n");

1250  
SG_LIB_SYNTAX_ERROR
;

1252 } i‡(0 =
	`°rcmp
(
key
,"obs")) {

1253 
obs
 = 
	`sg_gë_num
(
buf
);

1254 i‡(-1 =
obs
) {

1255 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'obs='\n");

1256  
SG_LIB_SYNTAX_ERROR
;

1258 } i‡(
	`°rcmp
(
key
,"of") == 0) {

1259 i‡('\0' !
outf
[0]) {

1260 
	`Ârötf
(
°dîr
, "Second 'of='árgument??\n");

1261  
SG_LIB_SYNTAX_ERROR
;

1263 
	`°∫˝y
(
outf
, 
buf
, 
INOUTF_SZ
);

1264 } i‡(0 =
	`°rcmp
(
key
, "oflag")) {

1265 i‡(
	`¥o˚ss_Êags
(
buf
, &
rcﬁl
.
out_Êags
)) {

1266 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'oflag='\n");

1267  
SG_LIB_SYNTAX_ERROR
;

1269 } i‡(0 =
	`°rcmp
(
key
,"seek")) {

1270 
£ek
 = 
	`sg_gë_Œnum
(
buf
);

1271 i‡(-1LL =
£ek
) {

1272 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'seek='\n");

1273  
SG_LIB_SYNTAX_ERROR
;

1275 } i‡(0 =
	`°rcmp
(
key
,"skip")) {

1276 
skù
 = 
	`sg_gë_Œnum
(
buf
);

1277 i‡(-1LL =
skù
) {

1278 
	`Ârötf
(
°dîr
, 
ME
 "badárgumentÅo 'skip='\n");

1279  
SG_LIB_SYNTAX_ERROR
;

1281 } i‡(0 =
	`°rcmp
(
key
,"sync"))

1282 
do_sync
 = 
	`sg_gë_num
(
buf
);

1283 i‡(0 =
	`°rcmp
(
key
,"thr"))

1284 
num_thªads
 = 
	`sg_gë_num
(
buf
);

1285 i‡(0 =
	`°rcmp
(
key
,"time"))

1286 
do_time
 = 
	`sg_gë_num
(
buf
);

1287 i‡((0 =
	`°∫cmp
(
key
, "--help", 7)) ||

1288 (0 =
	`°∫cmp
(
key
, "-h", 2)) ||

1289 (0 =
	`°rcmp
(
key
, "-?"))) {

1290 
	`ußge
();

1292 } i‡((0 =
	`°∫cmp
(
key
, "--vers", 6)) ||

1293 (0 =
	`°rcmp
(
key
, "-V"))) {

1294 
	`Ârötf
(
°dîr
, 
ME
 ": %s\n",

1295 
vîsi⁄_°r
);

1299 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%s'\n", 
key
);

1300 
	`Ârötf
(
°dîr
, "For more information use '--help'\n");

1301  
SG_LIB_SYNTAX_ERROR
;

1304 i‡(
rcﬁl
.
bs
 <= 0) {

1305 
rcﬁl
.
bs
 = 
DEF_BLOCK_SIZE
;

1306 
	`Ârötf
(
°dîr
, "Assume default 'bs' (block size) of %d bytes\n",

1307 
rcﬁl
.
bs
);

1309 i‡((
ibs
 && (ib†!
rcﬁl
.
bs
)Ë|| (
obs
 && (obs !=Ñcoll.bs))) {

1310 
	`Ârötf
(
°dîr
, "If 'ibs' or 'obs' given must be sameás 'bs'\n");

1311 
	`ußge
();

1312  
SG_LIB_SYNTAX_ERROR
;

1314 i‡((
skù
 < 0Ë|| (
£ek
 < 0)) {

1315 
	`Ârötf
(
°dîr
, "skipánd seek cannot beÇegative\n");

1316  
SG_LIB_SYNTAX_ERROR
;

1318 i‡((
rcﬁl
.
out_Êags
.
≠≥nd
 > 0Ë&& (
£ek
 > 0)) {

1319 
	`Ârötf
(
°dîr
, "Can't use botháppendánd seek switches\n");

1320  
SG_LIB_SYNTAX_ERROR
;

1322 i‡(
rcﬁl
.
b±
 < 1) {

1323 
	`Ârötf
(
°dîr
, "bpt must be greaterÅhan 0\n");

1324  
SG_LIB_SYNTAX_ERROR
;

1329 i‡((
rcﬁl
.
bs
 >2048Ë&& (0 =
b±_giví
))

1330 
rcﬁl
.
b±
 = 
DEF_BLOCKS_PER_2048TRANSFER
;

1331 i‡((
num_thªads
 < 1Ë|| (num_thªad†> 
MAX_NUM_THREADS
)) {

1332 
	`Ârötf
(
°dîr
, "too few orÅoo manyÅhreadsÑequested\n");

1333 
	`ußge
();

1334  
SG_LIB_SYNTAX_ERROR
;

1336 i‡(
rcﬁl
.
debug
)

1337 
	`Ârötf
(
°dîr
, 
ME
 "if=%†skù=%" 
PRId64
 " of=%s seek=%" PRId64

1338 " cou¡=%" 
PRId64
 "\n", 
öf
, 
skù
, 
outf
, 
£ek
, 
dd_cou¡
);

1340 
	`ö°Æl_h™dÀr
(
SIGINT
, 
öãºu±_h™dÀr
);

1341 
	`ö°Æl_h™dÀr
(
SIGQUIT
, 
öãºu±_h™dÀr
);

1342 
	`ö°Æl_h™dÀr
(
SIGPIPE
, 
öãºu±_h™dÀr
);

1343 
	`ö°Æl_h™dÀr
(
SIGUSR1
, 
sigöfo_h™dÀr
);

1345 
rcﬁl
.
öfd
 = 
STDIN_FILENO
;

1346 
rcﬁl
.
outfd
 = 
STDOUT_FILENO
;

1347 i‡(
öf
[0] && ('-' != inf[0])) {

1348 
rcﬁl
.
ö_ty≥
 = 
	`dd_fûëy≥
(
öf
);

1350 i‡(
FT_ERROR
 =
rcﬁl
.
ö_ty≥
) {

1351 
	`Ârötf
(
°dîr
, 
ME
 "u«bÀÅÿac˚s†%s\n", 
öf
);

1352  
SG_LIB_FILE_ERROR
;

1353 } i‡(
FT_ST
 =
rcﬁl
.
ö_ty≥
) {

1354 
	`Ârötf
(
°dîr
, 
ME
 "u«bÀÅÿu£ scsòè≥ devi˚ %s\n", 
öf
);

1355  
SG_LIB_FILE_ERROR
;

1356 } i‡(
FT_SG
 =
rcﬁl
.
ö_ty≥
) {

1357 
Êags
 = 
O_RDWR
;

1358 i‡(
rcﬁl
.
ö_Êags
.
dúe˘
)

1359 
Êags
 |
O_DIRECT
;

1360 i‡(
rcﬁl
.
ö_Êags
.
ex˛
)

1361 
Êags
 |
O_EXCL
;

1362 i‡(
rcﬁl
.
ö_Êags
.
dsync
)

1363 
Êags
 |
O_SYNC
;

1365 i‡((
rcﬁl
.
öfd
 = 
	`›í
(
öf
, 
Êags
)) < 0) {

1366 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

1367 
ME
 "couldÇŸ o≥¿%†f‹ sgÑódög", 
öf
);

1368 
	`≥º‹
(
ebuff
);

1369  
SG_LIB_FILE_ERROR
;

1371 i‡(
	`sg_¥ï¨e
(
rcﬁl
.
öfd
,Ñcﬁl.
bs
,Ñcﬁl.
b±
))

1372  
SG_LIB_FILE_ERROR
;

1375 
Êags
 = 
O_RDONLY
;

1376 i‡(
rcﬁl
.
ö_Êags
.
dúe˘
)

1377 
Êags
 |
O_DIRECT
;

1378 i‡(
rcﬁl
.
ö_Êags
.
ex˛
)

1379 
Êags
 |
O_EXCL
;

1380 i‡(
rcﬁl
.
ö_Êags
.
dsync
)

1381 
Êags
 |
O_SYNC
;

1383 i‡((
rcﬁl
.
öfd
 = 
	`›í
(
öf
, 
Êags
)) < 0) {

1384 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

1385 
ME
 "couldÇŸ o≥¿%†f‹Ñódög", 
öf
);

1386 
	`≥º‹
(
ebuff
);

1387  
SG_LIB_FILE_ERROR
;

1389 i‡(
skù
 > 0) {

1390 
off64_t
 
off£t
 = 
skù
;

1392 
off£t
 *
rcﬁl
.
bs
;

1393 i‡(
	`l£ek64
(
rcﬁl
.
öfd
, 
off£t
, 
SEEK_SET
) < 0) {

1394 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

1395 
ME
 "couldn'àskùÅÿªquúedÖosôi⁄ o¿%s", 
öf
);

1396 
	`≥º‹
(
ebuff
);

1397  
SG_LIB_FILE_ERROR
;

1402 i‡(
outf
[0] && ('-' != outf[0])) {

1403 
rcﬁl
.
out_ty≥
 = 
	`dd_fûëy≥
(
outf
);

1405 i‡(
FT_ST
 =
rcﬁl
.
out_ty≥
) {

1406 
	`Ârötf
(
°dîr
, 
ME
 "u«bÀÅÿu£ scsòè≥ devi˚ %s\n", 
outf
);

1407  
SG_LIB_FILE_ERROR
;

1409 i‡(
FT_SG
 =
rcﬁl
.
out_ty≥
) {

1410 
Êags
 = 
O_RDWR
;

1411 i‡(
rcﬁl
.
out_Êags
.
dúe˘
)

1412 
Êags
 |
O_DIRECT
;

1413 i‡(
rcﬁl
.
out_Êags
.
ex˛
)

1414 
Êags
 |
O_EXCL
;

1415 i‡(
rcﬁl
.
out_Êags
.
dsync
)

1416 
Êags
 |
O_SYNC
;

1418 i‡((
rcﬁl
.
outfd
 = 
	`›í
(
outf
, 
Êags
)) < 0) {

1419 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

1420 
ME
 "couldÇŸ o≥¿%†f‹ sg wrôög", 
outf
);

1421 
	`≥º‹
(
ebuff
);

1422  
SG_LIB_FILE_ERROR
;

1425 i‡(
	`sg_¥ï¨e
(
rcﬁl
.
outfd
,Ñcﬁl.
bs
,Ñcﬁl.
b±
))

1426  
SG_LIB_FILE_ERROR
;

1428 i‡(
FT_DEV_NULL
 =
rcﬁl
.
out_ty≥
)

1429 
rcﬁl
.
outfd
 = -1;

1431 i‡(
FT_RAW
 !
rcﬁl
.
out_ty≥
) {

1432 
Êags
 = 
O_WRONLY
 | 
O_CREAT
;

1433 i‡(
rcﬁl
.
out_Êags
.
dúe˘
)

1434 
Êags
 |
O_DIRECT
;

1435 i‡(
rcﬁl
.
out_Êags
.
ex˛
)

1436 
Êags
 |
O_EXCL
;

1437 i‡(
rcﬁl
.
out_Êags
.
dsync
)

1438 
Êags
 |
O_SYNC
;

1439 i‡(
rcﬁl
.
out_Êags
.
≠≥nd
)

1440 
Êags
 |
O_APPEND
;

1442 i‡((
rcﬁl
.
outfd
 = 
	`›í
(
outf
, 
Êags
, 0666)) < 0) {

1443 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

1444 
ME
 "couldÇŸ o≥¿%†f‹ wrôög", 
outf
);

1445 
	`≥º‹
(
ebuff
);

1446  
SG_LIB_FILE_ERROR
;

1450 i‡((
rcﬁl
.
outfd
 = 
	`›í
(
outf
, 
O_WRONLY
)) < 0) {

1451 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

1452 
ME
 "couldÇŸ o≥¿%†f‹Ñaw wrôög", 
outf
);

1453 
	`≥º‹
(
ebuff
);

1454  
SG_LIB_FILE_ERROR
;

1457 i‡(
£ek
 > 0) {

1458 
off64_t
 
off£t
 = 
£ek
;

1460 
off£t
 *
rcﬁl
.
bs
;

1461 i‡(
	`l£ek64
(
rcﬁl
.
outfd
, 
off£t
, 
SEEK_SET
) < 0) {

1462 
	`¢¥ötf
(
ebuff
, 
EBUFF_SZ
,

1463 
ME
 "couldn'à£ekÅÿªquúedÖosôi⁄ o¿%s", 
outf
);

1464 
	`≥º‹
(
ebuff
);

1465  
SG_LIB_FILE_ERROR
;

1470 i‡((
STDIN_FILENO
 =
rcﬁl
.
öfd
Ë&& (
STDOUT_FILENO
 =rcﬁl.
outfd
)) {

1471 
	`Ârötf
(
°dîr
, "Won't default both IFILEÅo stdin _and_ OFILEÅo "

1473 
	`Ârötf
(
°dîr
, "For more information use '--help'\n");

1474  
SG_LIB_SYNTAX_ERROR
;

1476 i‡(
dd_cou¡
 < 0) {

1477 
ö_num_£˘
 = -1;

1478 i‡(
FT_SG
 =
rcﬁl
.
ö_ty≥
) {

1479 
ªs
 = 
	`scsi_ªad_ˇ∑côy
(
rcﬁl
.
öfd
, &
ö_num_£˘
, &
ö_£˘_sz
);

1480 i‡(2 =
ªs
) {

1481 
	`Ârötf
(
°dîr
,

1483 
ªs
 = 
	`scsi_ªad_ˇ∑côy
(
rcﬁl
.
öfd
, &
ö_num_£˘
,

1484 &
ö_£˘_sz
);

1486 i‡(0 !
ªs
) {

1487 i‡(
ªs
 =
SG_LIB_CAT_INVALID_OP
)

1488 
	`Ârötf
(
°dîr
, "read capacityÇot supported on %s\n",

1489 
öf
);

1490 i‡(
ªs
 =
SG_LIB_CAT_NOT_READY
)

1491 
	`Ârötf
(
°dîr
, "read capacity failed, %sÇotÑeady\n",

1492 
öf
);

1494 
	`Ârötf
(
°dîr
, "U«bÀÅÿªad c≠acôy o¿%s\n", 
öf
);

1495 
ö_num_£˘
 = -1;

1497 } i‡(
FT_BLOCK
 =
rcﬁl
.
ö_ty≥
) {

1498 i‡(0 !
	`ªad_blkdev_ˇ∑côy
(
rcﬁl
.
öfd
, &
ö_num_£˘
,

1499 &
ö_£˘_sz
)) {

1500 
	`Ârötf
(
°dîr
, "U«bÀÅÿªad block c≠acôy o¿%s\n", 
öf
);

1501 
ö_num_£˘
 = -1;

1503 i‡(
rcﬁl
.
bs
 !
ö_£˘_sz
) {

1504 
	`Ârötf
(
°dîr
, "block size on %s confusion; bs=%d, from "

1505 "devi˚=%d\n", 
öf
, 
rcﬁl
.
bs
, 
ö_£˘_sz
);

1506 
ö_num_£˘
 = -1;

1509 i‡(
ö_num_£˘
 > 
skù
)

1510 
ö_num_£˘
 -
skù
;

1512 
out_num_£˘
 = -1;

1513 i‡(
FT_SG
 =
rcﬁl
.
out_ty≥
) {

1514 
ªs
 = 
	`scsi_ªad_ˇ∑côy
(
rcﬁl
.
outfd
, &
out_num_£˘
, &
out_£˘_sz
);

1515 i‡(2 =
ªs
) {

1516 
	`Ârötf
(
°dîr
,

1518 
ªs
 = 
	`scsi_ªad_ˇ∑côy
(
rcﬁl
.
outfd
, &
out_num_£˘
,

1519 &
out_£˘_sz
);

1521 i‡(0 !
ªs
) {

1522 i‡(
ªs
 =
SG_LIB_CAT_INVALID_OP
)

1523 
	`Ârötf
(
°dîr
, "read capacityÇot supported on %s\n",

1524 
outf
);

1525 i‡(
ªs
 =
SG_LIB_CAT_NOT_READY
)

1526 
	`Ârötf
(
°dîr
, "read capacity failed, %sÇotÑeady\n",

1527 
outf
);

1529 
	`Ârötf
(
°dîr
, "U«bÀÅÿªad c≠acôy o¿%s\n", 
outf
);

1530 
out_num_£˘
 = -1;

1532 } i‡(
FT_BLOCK
 =
rcﬁl
.
out_ty≥
) {

1533 i‡(0 !
	`ªad_blkdev_ˇ∑côy
(
rcﬁl
.
outfd
, &
out_num_£˘
,

1534 &
out_£˘_sz
)) {

1535 
	`Ârötf
(
°dîr
, "UnableÅoÑead block capacity on %s\n",

1536 
outf
);

1537 
out_num_£˘
 = -1;

1539 i‡(
rcﬁl
.
bs
 !
out_£˘_sz
) {

1540 
	`Ârötf
(
°dîr
, "block size on %s confusion: bs=%d, from "

1541 "devi˚=%d\n", 
outf
, 
rcﬁl
.
bs
, 
out_£˘_sz
);

1542 
out_num_£˘
 = -1;

1545 i‡(
out_num_£˘
 > 
£ek
)

1546 
out_num_£˘
 -
£ek
;

1548 i‡(
ö_num_£˘
 > 0) {

1549 i‡(
out_num_£˘
 > 0)

1550 
dd_cou¡
 = (
ö_num_£˘
 > 
out_num_£˘
) ? out_num_sect :

1551 
ö_num_£˘
;

1553 
dd_cou¡
 = 
ö_num_£˘
;

1556 
dd_cou¡
 = 
out_num_£˘
;

1558 i‡(
rcﬁl
.
debug
 > 1)

1559 
	`Ârötf
(
°dîr
, "Sèπ o‡lo›, cou¡=%" 
PRId64
 ", in_num_sect=%"

1560 
PRId64
 ", out_num_£˘=%" PRId64 "\n", 
dd_cou¡
, 
ö_num_£˘
,

1561 
out_num_£˘
);

1562 i‡(
dd_cou¡
 < 0) {

1563 
	`Ârötf
(
°dîr
, "Couldn't calculate count,Ölease give one\n");

1564  
SG_LIB_CAT_OTHER
;

1566 i‡(! 
cdbsz_giví
) {

1567 i‡((
FT_SG
 =
rcﬁl
.
ö_ty≥
Ë&& (
MAX_SCSI_CDBSZ
 !rcﬁl.
cdbsz_ö
) &&

1568 (((
dd_cou¡
 + 
skù
Ë> 
UINT_MAX
Ë|| (
rcﬁl
.
b±
 > 
USHRT_MAX
))) {

1569 
	`Ârötf
(
°dîr
, "Note: SCSI command size increasedÅo 16 bytes "

1571 
rcﬁl
.
cdbsz_ö
 = 
MAX_SCSI_CDBSZ
;

1573 i‡((
FT_SG
 =
rcﬁl
.
out_ty≥
Ë&& (
MAX_SCSI_CDBSZ
 !rcﬁl.
cdbsz_out
) &&

1574 (((
dd_cou¡
 + 
£ek
Ë> 
UINT_MAX
Ë|| (
rcﬁl
.
b±
 > 
USHRT_MAX
))) {

1575 
	`Ârötf
(
°dîr
, "Note: SCSI command size increasedÅo 16 bytes "

1577 
rcﬁl
.
cdbsz_out
 = 
MAX_SCSI_CDBSZ
;

1581 
rcﬁl
.
ö_cou¡
 = 
dd_cou¡
;

1582 
rcﬁl
.
ö_ªm_cou¡
 = 
dd_cou¡
;

1583 
rcﬁl
.
skù
 = skip;

1584 
rcﬁl
.
ö_blk
 = 
skù
;

1585 
rcﬁl
.
out_cou¡
 = 
dd_cou¡
;

1586 
rcﬁl
.
out_ªm_cou¡
 = 
dd_cou¡
;

1587 
rcﬁl
.
£ek
 = seek;

1588 
rcﬁl
.
out_blk
 = 
£ek
;

1589 
°©us
 = 
	`±hªad_muãx_öô
(&
rcﬁl
.
ö_muãx
, 
NULL
);

1590 i‡(0 !
°©us
Ë
	`îr_exô
(status, "init in_mutex");

1591 
°©us
 = 
	`±hªad_muãx_öô
(&
rcﬁl
.
out_muãx
, 
NULL
);

1592 i‡(0 !
°©us
Ë
	`îr_exô
(status, "init out_mutex");

1593 
°©us
 = 
	`±hªad_muãx_öô
(&
rcﬁl
.
aux_muãx
, 
NULL
);

1594 i‡(0 !
°©us
Ë
	`îr_exô
(status, "initáux_mutex");

1595 
°©us
 = 
	`±hªad_c⁄d_öô
(&
rcﬁl
.
out_sync_cv
, 
NULL
);

1596 i‡(0 !
°©us
Ë
	`îr_exô
(status, "init out_sync_cv");

1598 
	`sigem±y£t
(&
sig«l_£t
);

1599 
	`sigadd£t
(&
sig«l_£t
, 
SIGINT
);

1600 
°©us
 = 
	`±hªad_sigmask
(
SIG_BLOCK
, &
sig«l_£t
, 
NULL
);

1601 i‡(0 !
°©us
Ë
	`îr_exô
(status, "pthread_sigmask");

1602 
°©us
 = 
	`±hªad_¸óã
(&
sig_li°í_thªad_id
, 
NULL
,

1603 
sig_li°í_thªad
, (*)&
rcﬁl
);

1604 i‡(0 !
°©us
Ë
	`îr_exô
(status, "pthread_create, sig...");

1606 i‡(
do_time
) {

1607 
°¨t_tm
.
tv_£c
 = 0;

1608 
°¨t_tm
.
tv_u£c
 = 0;

1609 
	`gëtimeofday
(&
°¨t_tm
, 
NULL
);

1613 i‡((
rcﬁl
.
out_ªm_cou¡
 > 0Ë&& (
num_thªads
 > 0)) {

1615 
°©us
 = 
	`±hªad_muãx_lock
(&
rcﬁl
.
out_muãx
);

1616 i‡(0 !
°©us
Ë
	`îr_exô
(status, "lock out_mutex");

1617 
°©us
 = 
	`±hªad_¸óã
(&
thªads
[0], 
NULL
, 
ªad_wrôe_thªad
,

1618 (*)&
rcﬁl
);

1619 i‡(0 !
°©us
Ë
	`îr_exô
(status, "pthread_create");

1620 i‡(
rcﬁl
.
debug
)

1621 
	`Ârötf
(
°dîr
, "Starting workerÅhread k=0\n");

1624 
	`±hªad_˛ónup_push
(
˛ónup_out
, (*)&
rcﬁl
);

1625 
°©us
 = 
	`±hªad_c⁄d_waô
(&
rcﬁl
.
out_sync_cv
, &rcﬁl.
out_muãx
);

1626 i‡(0 !
°©us
Ë
	`îr_exô
(status, "cond out_sync_cv");

1627 
	`±hªad_˛ónup_p›
(0);

1628 
°©us
 = 
	`±hªad_muãx_u∆ock
(&
rcﬁl
.
out_muãx
);

1629 i‡(0 !
°©us
Ë
	`îr_exô
(status, "unlock out_mutex");

1632 
k
 = 1; k < 
num_thªads
; ++k) {

1633 
°©us
 = 
	`±hªad_¸óã
(&
thªads
[
k
], 
NULL
, 
ªad_wrôe_thªad
,

1634 (*)&
rcﬁl
);

1635 i‡(0 !
°©us
Ë
	`îr_exô
(status, "pthread_create");

1636 i‡(
rcﬁl
.
debug
)

1637 
	`Ârötf
(
°dîr
, "Sèπög w‹kîÅhªad k=%d\n", 
k
);

1641 
k
 = 0; k < 
num_thªads
; ++k) {

1642 
°©us
 = 
	`±hªad_joö
(
thªads
[
k
], &
vp
);

1643 i‡(0 !
°©us
Ë
	`îr_exô
(status, "pthread_join");

1644 i‡(
rcﬁl
.
debug
)

1645 
	`Ârötf
(
°dîr
, "W‹kîÅhªad k=%dÅîmö©ed\n", 
k
);

1649 i‡((
do_time
Ë&& (
°¨t_tm
.
tv_£c
 || sèπ_tm.
tv_u£c
))

1650 
	`ˇlc_duøti⁄_throughput
(0);

1652 i‡(
do_sync
) {

1653 i‡(
FT_SG
 =
rcﬁl
.
out_ty≥
) {

1654 
	`Ârötf
(
°dîr
, ">> Synchr⁄izög cachê⁄ %s\n", 
outf
);

1655 
ªs
 = 
	`sg_Œ_sync_ˇche_10
(
rcﬁl
.
outfd
, 0, 0, 0, 0, 0, 0, 0);

1656 i‡(
SG_LIB_CAT_UNIT_ATTENTION
 =
ªs
) {

1657 
	`Ârötf
(
°dîr
,

1659 
ªs
 = 
	`sg_Œ_sync_ˇche_10
(
rcﬁl
.
outfd
, 0, 0, 0, 0, 0, 0, 0);

1661 i‡(0 !
ªs
)

1662 
	`Ârötf
(
°dîr
, "UnableÅo synchronize cache\n");

1666 
°©us
 = 
	`±hªad_ˇn˚l
(
sig_li°í_thªad_id
);

1667 i‡(0 !
°©us
Ë
	`îr_exô
(status, "pthread_cancel");

1668 i‡(
STDIN_FILENO
 !
rcﬁl
.
öfd
)

1669 
	`˛o£
(
rcﬁl
.
öfd
);

1670 i‡((
STDOUT_FILENO
 !
rcﬁl
.
outfd
Ë&& (
FT_DEV_NULL
 !rcﬁl.
out_ty≥
))

1671 
	`˛o£
(
rcﬁl
.
outfd
);

1672 
ªs
 = 
exô_°©us
;

1673 i‡(0 !
rcﬁl
.
out_cou¡
) {

1674 
	`Ârötf
(
°dîr
, ">>>> SomeÉrror occurred,Ñemaining blocks=%"

1675 
PRId64
 "\n", 
rcﬁl
.
out_cou¡
);

1676 i‡(0 =
ªs
)

1677 
ªs
 = 
SG_LIB_CAT_OTHER
;

1679 
	`¥öt_°©s
("");

1680 i‡(
rcﬁl
.
dio_öcom∂ëe
) {

1681 
fd
;

1682 
c
;

1684 
	`Ârötf
(
°dîr
, ">> Direct IOÑequested but incomplete %dÅimes\n",

1685 
rcﬁl
.
dio_öcom∂ëe
);

1686 i‡((
fd
 = 
	`›í
(
¥oc_Ælow_dio
, 
O_RDONLY
)) >= 0) {

1687 i‡(1 =
	`ªad
(
fd
, &
c
, 1)) {

1688 i‡('0' =
c
)

1689 
	`Ârötf
(
°dîr
, ">>> %s setÅo '0' but should be set "

1690 "tÿ'1' f‹ dúe˘ IO\n", 
¥oc_Ælow_dio
);

1692 
	`˛o£
(
fd
);

1695 i‡(
rcﬁl
.
sum_of_ªsids
)

1696 
	`Ârötf
(
°dîr
, ">> Non-zero sum ofÑesidual counts=%d\n",

1697 
rcﬁl
.
sum_of_ªsids
);

1698  (
ªs
 >0Ë?Ñe†: 
SG_LIB_CAT_OTHER
;

1699 
	}
}

	@utils/hxascdmp.c

8 
	~<°dlib.h
>

9 
	~<°dio.h
>

10 
	~<uni°d.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<sys/°©.h
>

13 
	~<f˙é.h
>

14 
	~<°rög.h
>

16 
	#DEF_BYTES_PER_LINE
 16

	)

18 
	gbyãs_≥r_löe
 = 
DEF_BYTES_PER_LINE
;

20 c⁄° * 
	gvîsi⁄_°r
 = "1.13 20100312";

22 
	#CHARS_PER_HEX_BYTE
 3

	)

23 
	#BINARY_START_COL
 6

	)

24 
	#MAX_LINE_LENGTH
 257

	)

27 #ifde‡
SG_LIB_MINGW


32 
	$sg_£t_ãxt_mode
(
fd
)

34  
	`£tmode
(
fd
, 
O_TEXT
);

35 
	}
}

40 
	$sg_£t_bö¨y_mode
(
fd
)

42  
	`£tmode
(
fd
, 
O_BINARY
);

43 
	}
}

48 
	$sg_£t_ãxt_mode
(
fd
)

50  
fd
;

51 
	}
}

54 
	$sg_£t_bö¨y_mode
(
fd
)

56  
fd
;

57 
	}
}

62 
	$dSåHex
(c⁄° * 
°r
, 
Àn
, 
°¨t
)

64 c⁄° * 
p
 = 
°r
;

65 
c
;

66 
buff
[
MAX_LINE_LENGTH
];

67 
a
 = 
°¨t
;

68 c⁄° 
bp°¨t
 = 
BINARY_START_COL
;

69 c⁄° 
˝°¨t
 = 
BINARY_START_COL
 +

70 ((
CHARS_PER_HEX_BYTE
 * 
byãs_≥r_löe
) + 1) + 5;

71 
˝os
 = 
˝°¨t
;

72 
bpos
 = 
bp°¨t
;

73 
midlöe_•a˚
 = (
byãs_≥r_löe
 / 2) + 1;

74 
i
, 
k
, 
löe_Àngth
;

76 i‡(
Àn
 <= 0)

78 
löe_Àngth
 = 
BINARY_START_COL
 +

79 (
byãs_≥r_löe
 * (1 + 
CHARS_PER_HEX_BYTE
)) + 7;

80 i‡(
löe_Àngth
 >
MAX_LINE_LENGTH
) {

81 
	`Ârötf
(
°dîr
, "bytes_per_line causes maximumÜineÜength of %d "

82 "tÿbêex˚eded\n", 
MAX_LINE_LENGTH
);

85 
	`mem£t
(
buff
, ' ', 
löe_Àngth
);

86 
buff
[
löe_Àngth
] = '\0';

87 
k
 = 
	`•rötf
(
buff
 + 1, "%.2lx", 
a
);

88 
buff
[
k
 + 1] = ' ';

89 i‡(
bpos
 >((
bp°¨t
 + (
midlöe_•a˚
 * 
CHARS_PER_HEX_BYTE
))))

90 
bpos
++;

92 
i
 = 0; i < 
Àn
; i++) {

93 
c
 = *
p
++;

94 
bpos
 +
CHARS_PER_HEX_BYTE
;

95 i‡(
bpos
 =(
bp°¨t
 + (
midlöe_•a˚
 * 
CHARS_PER_HEX_BYTE
)))

96 
bpos
++;

97 
	`•rötf
(&
buff
[
bpos
], "%.2x", ()()
c
);

98 
buff
[
bpos
 + 2] = ' ';

99 i‡((
c
 < ' ') || (c >= 0x7f))

100 
c
='.';

101 
buff
[
˝os
++] = 
c
;

102 i‡(
˝os
 >(
˝°¨t
 + 
byãs_≥r_löe
)) {

103 
	`¥ötf
("%s\n", 
buff
);

104 
bpos
 = 
bp°¨t
;

105 
˝os
 = 
˝°¨t
;

106 
a
 +
byãs_≥r_löe
;

107 
	`mem£t
(
buff
,' ', 
löe_Àngth
);

108 
k
 = 
	`•rötf
(
buff
 + 1, "%.2lx", 
a
);

109 
buff
[
k
 + 1] = ' ';

112 i‡(
˝os
 > 
˝°¨t
)

113 
	`¥ötf
("%s\n", 
buff
);

114 
	}
}

117 
	$dSåHexO∆y
(c⁄° * 
°r
, 
Àn
, 
°¨t
)

119 c⁄° * 
p
 = 
°r
;

120 
c
;

121 
buff
[
MAX_LINE_LENGTH
];

122 
a
 = 
°¨t
;

123 c⁄° 
bp°¨t
 = 
BINARY_START_COL
;

124 
bpos
 = 
bp°¨t
;

125 
midlöe_•a˚
 = (
byãs_≥r_löe
 / 2) + 1;

126 
i
, 
k
, 
löe_Àngth
;

128 i‡(
Àn
 <= 0)

130 
löe_Àngth
 = 
BINARY_START_COL
 +

131 (
byãs_≥r_löe
 * 
CHARS_PER_HEX_BYTE
) + 4;

132 i‡(
löe_Àngth
 >
MAX_LINE_LENGTH
) {

133 
	`Ârötf
(
°dîr
, "bytes_per_line causes maximumÜineÜength of %d "

134 "tÿbêex˚eded\n", 
MAX_LINE_LENGTH
);

137 
	`mem£t
(
buff
, ' ', 
löe_Àngth
);

138 
buff
[
löe_Àngth
] = '\0';

139 
k
 = 
	`•rötf
(
buff
 + 1, "%.2lx", 
a
);

140 
buff
[
k
 + 1] = ' ';

141 i‡(
bpos
 >((
bp°¨t
 + (
midlöe_•a˚
 * 
CHARS_PER_HEX_BYTE
))))

142 
bpos
++;

144 
i
 = 0; i < 
Àn
; i++) {

145 
c
 = *
p
++;

146 
bpos
 +
CHARS_PER_HEX_BYTE
;

147 i‡(
bpos
 =(
bp°¨t
 + (
midlöe_•a˚
 * 
CHARS_PER_HEX_BYTE
)))

148 
bpos
++;

149 
	`•rötf
(&
buff
[
bpos
], "%.2x", ()()
c
);

150 
buff
[
bpos
 + 2] = ' ';

151 i‡(
bpos
 >(
bp°¨t
 + (
byãs_≥r_löe
 * 
CHARS_PER_HEX_BYTE
)))

153 
	`¥ötf
("%s\n", 
buff
);

154 
bpos
 = 
bp°¨t
;

155 
a
 +
byãs_≥r_löe
;

156 
	`mem£t
(
buff
,' ', 
löe_Àngth
);

157 
k
 = 
	`•rötf
(
buff
 + 1, "%.2lx", 
a
);

158 
buff
[
k
 + 1] = ' ';

161 i‡(
bpos
 > 
bp°¨t
)

162 
	`¥ötf
("%s\n", 
buff
);

163 
	}
}

166 
	$ußge
()

168 
	`Ârötf
(
°dîr
, "Usage: hxascdmp [-b=<n>] [-h] [-H] [-V] [-?] "

170 
	`Ârötf
(
°dîr
, " where:\n");

171 
	`Ârötf
(
°dîr
, " -b=<n> bytesÖerÜineÅo display "

173 
	`Ârötf
(
°dîr
, " -hÖrintÅhis usage message\n");

174 
	`Ârötf
(
°dîr
, " -HÖrint hex only (i.e.Ço ASCII "

176 
	`Ârötf
(
°dîr
, " -VÖrint version stringÅhenÉxits\n");

177 
	`Ârötf
(
°dîr
, " -?ÖrintÅhis usage message\n");

178 
	`Ârötf
(
°dîr
, " <file>+Ñeads file(s)ánd outputsÉach "

180 
	`Ârötf
(
°dîr
, " ifÇo <file>ÅhenÑeads stdin\n\n");

181 
	`Ârötf
(
°dîr
, "Sends hex ASCII dump of stdin/fileÅo stdout\n");

182 
	}
}

185 
	$maö
(
¨gc
, c⁄° ** 
¨gv
)

187 
buff
[8192];

188 
num
 = 8192;

189 
°¨t
 = 0;

190 
ªs
, 
k
, 
u
;

191 
öFûe
 = 
STDIN_FILENO
;

192 
doHñp
 = 0;

193 
doHex
 = 0;

194 
hasFûíame
 = 0;

195 
ªt
 = 0;

197 
k
 = 1; k < 
¨gc
; k++) {

198 i‡(0 =
	`°∫cmp
("-b=", 
¨gv
[
k
], 3)) {

199 
ªs
 = 
	`ssˇnf
(
¨gv
[
k
] + 3, "%d", &
u
);

200 i‡((1 !
ªs
Ë|| (
u
 < 1)) {

201 
	`¥ötf
("Bad valueáfter '-b' switch\n");

202 
	`ußge
();

205 
byãs_≥r_löe
 = 
u
;

207 i‡(0 =
	`°rcmp
("-h", 
¨gv
[
k
]))

208 
doHñp
 = 1;

209 i‡(0 =
	`°rcmp
("-H", 
¨gv
[
k
]))

210 
doHex
 = 1;

211 i‡(0 =
	`°rcmp
("-V", 
¨gv
[
k
])) {

212 
	`Ârötf
(
°dîr
, "%s\n", 
vîsi⁄_°r
);

214 } i‡(0 =
	`°rcmp
("-?", 
¨gv
[
k
]))

215 
doHñp
 = 1;

216 i‡(*
¨gv
[
k
] == '-') {

217 
	`Ârötf
(
°dîr
, "unknow¿swôch: %s\n", 
¨gv
[
k
]);

218 
	`ußge
();

221 
hasFûíame
 = 1;

225 i‡(
doHñp
) {

226 
	`ußge
();

231 i‡(0 !(
num
 % 
byãs_≥r_löe
))

232 
num
 = (num / 
byãs_≥r_löe
) * bytes_per_line;

234 i‡(
hasFûíame
) {

235  ; 
k
 < 
¨gc
; k++)

237 
öFûe
 = 
	`›í
(
¨gv
[
k
], 
O_RDONLY
);

238 i‡(
öFûe
 < 0) {

239 
	`Ârötf
(
°dîr
, "Couldn'à›í fûe: %s\n", 
¨gv
[
k
]);

240 
ªt
 = 1;

242 
	`sg_£t_bö¨y_mode
(
öFûe
);

243 
°¨t
 = 0;

244 
	`¥ötf
("%shex dump of file: %s\n",

245 (
doHex
 ? "" : "ASCII "), 
¨gv
[
k
]);

246 (
ªs
 = 
	`ªad
(
öFûe
, 
buff
, 
num
)) > 0) {

247 i‡(
doHex
)

248 
	`dSåHexO∆y
(
buff
, 
ªs
, 
°¨t
);

250 
	`dSåHex
(
buff
, 
ªs
, 
°¨t
);

251 
°¨t
 +()
ªs
;

254 
	`˛o£
(
öFûe
);

255 
	`¥ötf
("\n");

258 
	`sg_£t_bö¨y_mode
(
öFûe
);

259 (
ªs
 = 
	`ªad
(
öFûe
, 
buff
, 
num
)) > 0) {

260 i‡(
doHex
)

261 
	`dSåHexO∆y
(
buff
, 
ªs
, 
°¨t
);

263 
	`dSåHex
(
buff
, 
ªs
, 
°¨t
);

264 
°¨t
 +()
ªs
;

267  
ªt
;

268 
	}
}

	@utils/sg_chk_asc.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<gë›t.h
>

14 
	~<˘y≥.h
>

15 
	~<î∫o.h
>

17 
	~"sg_lib.h
"

28 * 
	gvîsi⁄_°r
 = "1.04 20120920";

31 
	#MAX_LINE_LEN
 1024

	)

34 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

41 
	$ußge
()

43 
	`Ârötf
(
°dîr
, "Usage: "

53 
	}
}

55 
	$maö
(
¨gc
, * 
¨gv
[])

57 
k
, 
j
, 
ªs
, 
c
, 
num
, 
Àn
, 
asc
, 
ascq
;

58 
FILE
 * 
Â
;

59 
vîbo£
 = 0;

60 
fûe_«me
[256];

61 
löe
[
MAX_LINE_LEN
];

62 
b
[
MAX_LINE_LEN
];

63 
bb
[
MAX_LINE_LEN
];

64 * 
˝
;

65 
ªt
 = 1;

67 
	`mem£t
(
fûe_«me
, 0,  file_name);

68 
	`mem£t
(
löe
, 0,  
fûe_«me
);

70 
›ti⁄_ödex
 = 0;

72 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hvV", 
l⁄g_›ti⁄s
,

73 &
›ti⁄_ödex
);

74 i‡(
c
 == -1)

77 
c
) {

80 
	`ußge
();

83 ++
vîbo£
;

86 
	`Ârötf
(
°dîr
, "vîsi⁄: %s\n", 
vîsi⁄_°r
);

89 
	`Ârötf
(
°dîr
, "uƒecogni£d swôch codê0x%x ??\n", 
c
);

90 
	`ußge
();

94 i‡(
›töd
 < 
¨gc
) {

95 i‡('\0' =
fûe_«me
[0]) {

96 
	`°∫˝y
(
fûe_«me
, 
¨gv
[
›töd
], (file_name) - 1);

97 
fûe_«me
[(file_name) - 1] = '\0';

98 ++
›töd
;

100 i‡(
›töd
 < 
¨gc
) {

101 ; 
›töd
 < 
¨gc
; ++optind)

102 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

103 
¨gv
[
›töd
]);

104 
	`ußge
();

109 i‡(0 =
fûe_«me
[0]) {

110 
	`Ârötf
(
°dîr
, "missing fileÇame!\n");

111 
	`ußge
();

114 
Â
 = 
	`f›í
(
fûe_«me
, "r");

115 i‡(
NULL
 =
Â
) {

116 
	`Ârötf
(
°dîr
, "›íÉº‹: %s: %s\n", 
fûe_«me
,

117 
	`ß„_°ªº‹
(
î∫o
));

120 
k
 = 0; (
˝
 = 
	`fgës
(
löe
, ÷öeË- 1, 
Â
)); ++k) {

121 
Àn
 = 
	`°æí
(
löe
);

122 i‡(
Àn
 < 1)

124 i‡(! 
	`isdigô
(
löe
[0]))

126 
num
 = 
	`ssˇnf
(
löe
, "%xh/%xh", &
asc
, &
ascq
);

127 i‡(1 =
num
)

128 
ascq
 = -1;

129 i‡(
num
 < 1) {

130 i‡(
vîbo£
)

131 
	`Ârötf
(
°dîr
, "Badly formedÜineÇumber %d (num=%d)\n",

132 
k
 + 1, 
num
);

135 i‡(
Àn
 < 26)

138 
	`°∫˝y
(
b
 , 
löe
, (b) - 1);

139 
b
[(b) - 1] = '\0';

140 
num
 = 
	`°æí
(
b
);

141 i‡(0xd =
b
[
num
 - 2]) {

142 
b
[
num
 - 2] = '\0';

143 
b
[
num
 - 1] = '\0';

145 
	`¥ötf
("\"%s\",\n", 
b
);

147 
	`°∫˝y
(
b
 , 
löe
 + 25, (b) - 1);

148 
b
[(b) - 1] = '\0';

149 
num
 = 
	`°æí
(
b
);

150 i‡(0xd =
b
[
num
 - 2]) {

151 
b
[
num
 - 2] = '\0';

152 
b
[
num
 - 1] = '\0';

154 
num
 = 
	`°æí
(
b
);

155 
j
 = 0; j < 
num
; ++j)

156 
b
[
j
] = 
	`touµî
(b[j]);

158 
bb
[0] = '\0';

159 i‡(
ascq
 >= 0) {

160 
˝
 = 
	`sg_gë_asc_ascq_°r
(
asc
, 
ascq
, (
bb
) - 1, bb);

161 i‡(
NULL
 =
˝
) {

162 
	`Ârötf
(
°dîr
, "nÿíåy f‹ %x,%x : %s\n", 
asc
, 
ascq
, 
b
);

165 
num
 = 
	`°æí
(
˝
);

170 i‡((
num
 > 6) &&

171 ((0 =
	`memcmp
("ASC", 
˝
, 3)) ||

172 (0 =
	`memcmp
("víd‹", 
˝
, 6)))) {

173 
	`Ârötf
(
°dîr
, "%x,%x differ,Ñef: %s, sg_lib_data: "

174 "<missög>\n", 
asc
, 
ascq
, 
b
);

177 i‡(
num
 > 20) {

178 
˝
 += 18;

179 
num
 -= 18;

180 
j
 = 0; j < 
num
; ++j)

181 
˝
[
j
] = 
	`touµî
(cp[j]);

183 i‡(0 !
	`°rcmp
(
b
, 
˝
))

184 
	`Ârötf
(
°dîr
, "%x,%x differ,Ñef: %s, sg_lib_data: "

185 "%s\n", 
asc
, 
ascq
, 
b
, 
˝
);

188 i‡(
NULL
 =
˝
) {

189 i‡(
	`„of
(
Â
)) {

190 i‡(
vîbo£
 > 2)

191 
	`Ârötf
(
°dîr
, "EOF detected\n");

193 
	`Ârötf
(
°dîr
, "fgës: %s\n", 
	`ß„_°ªº‹
(
î∫o
));

195 
	`Ârötf
(
°dîr
, "%s\n", 
löe
);

197 
ªs
 = 
	`f˛o£
(
Â
);

198 i‡(
EOF
 =
ªs
) {

199 
	`Ârötf
(
°dîr
, "˛o£Éº‹: %s\n", 
	`ß„_°ªº‹
(
î∫o
));

202  
ªt
;

203 
	}
}

	@utils/tst_sg_lib.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°d¨g.h
>

13 
	~<°rög.h
>

14 
	~<gë›t.h
>

15 
	~<˘y≥.h
>

16 
	~<î∫o.h
>

18 
	~"sg_lib.h
"

25 * 
	gvîsi⁄_°r
 = "1.00 20130122";

28 
	#MAX_LINE_LEN
 1024

	)

31 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

38 c⁄° 
	gdesc_£n£_d©a
[] = {

61 
	$ußge
()

63 
	`Ârötf
(
°dîr
, "Usage: "

71 
	}
}

79 
	$my_¢¥ötf
(* 
˝
, 
˝_max_Àn
, c⁄° * 
fmt
, ...)

81 
va_li°
 
¨gs
;

82 
n
;

84 i‡(
˝_max_Àn
 < 2)

86 
	`va_°¨t
(
¨gs
, 
fmt
);

87 
n
 = 
	`v¢¥ötf
(
˝
, 
˝_max_Àn
, 
fmt
, 
¨gs
);

88 
	`va_íd
(
¨gs
);

89  (
n
 < 
˝_max_Àn
) ?Ç : (cp_max_len - 1);

90 
	}
}

92 
	$maö
(
¨gc
, * 
¨gv
[])

94 
c
, 
n
, 
Àn
;

95 
vîbo£
 = 0;

96 
ªt
 = 1;

97 
b
[2048];

100 
›ti⁄_ödex
 = 0;

102 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hvV", 
l⁄g_›ti⁄s
,

103 &
›ti⁄_ödex
);

104 i‡(
c
 == -1)

107 
c
) {

110 
	`ußge
();

113 ++
vîbo£
;

116 
	`Ârötf
(
°dîr
, "vîsi⁄: %s\n", 
vîsi⁄_°r
);

119 
	`Ârötf
(
°dîr
, "uƒecogni£d swôch codê0x%x ??\n", 
c
);

120 
	`ußge
();

124 i‡(
›töd
 < 
¨gc
) {

125 i‡(
›töd
 < 
¨gc
) {

126 ; 
›töd
 < 
¨gc
; ++optind)

127 
	`Ârötf
(
°dîr
, "UnexpectedÉxtraárgument: %s\n",

128 
¨gv
[
›töd
]);

129 
	`ußge
();

134 
	`¥ötf
("Testing my_snprintf():\n");

135 
	`sg_¥öt_£n£
("desc_£n£_d©®ã°", 
desc_£n£_d©a
, ()(desc_sense_data), 1);

136 
	`¥ötf
("\n");

139 
	`sg_gë_£n£_°r
("sg_gë_£n£_°r", 
desc_£n£_d©a
, (desc_£n£_d©a), 1, (
b
), b);

140 
	`¥ötf
("sg_gë_£n£_°r: såÀn(b)->%zd\n", 
	`°æí
(
b
));

141 
	`¥ötf
("%s", 
b
);

142 
	`¥ötf
("\n");

145 
b
[0] = '\0';

146 
Àn
 = (
b
);

147 
n
 = 
	`my_¢¥ötf
(
b
, 
Àn
, "%s", "test");

148 
	`¥ötf
("my_snprintf(,%d,,\"test\") -> %d; strlen(b) -> %zd\n",

149 
Àn
, 
n
, 
	`°æí
(
b
));

150 i‡(
	`°æí
(
b
) > 0)

151 
	`¥ötf
("Resu…ög såög: %s\n", 
b
);

153 
b
[0] = '\0';

154 
Àn
 = -1;

155 
n
 = 
	`my_¢¥ötf
(
b
, 
Àn
, "%s", "test");

156 
	`¥ötf
("my_snprintf(,%d,,\"test\") -> %d; strlen(b) -> %zd\n",

157 
Àn
, 
n
, 
	`°æí
(
b
));

158 i‡(
	`°æí
(
b
) > 0)

159 
	`¥ötf
("Resu…ög såög: %s\n", 
b
);

161 
b
[0] = '\0';

162 
Àn
 = 0;

163 
n
 = 
	`my_¢¥ötf
(
b
, 
Àn
, "%s", "test");

164 
	`¥ötf
("my_snprintf(,%d,,\"test\") -> %d; strlen(b) -> %zd\n",

165 
Àn
, 
n
, 
	`°æí
(
b
));

166 i‡(
	`°æí
(
b
) > 0)

167 
	`¥ötf
("Resu…ög såög: %s\n", 
b
);

169 
b
[0] = '\0';

170 
Àn
 = 1;

171 
n
 = 
	`my_¢¥ötf
(
b
, 
Àn
, "%s", "test");

172 
	`¥ötf
("my_snprintf(,%d,,\"test\") -> %d; strlen(b) -> %zd\n",

173 
Àn
, 
n
, 
	`°æí
(
b
));

174 i‡(
	`°æí
(
b
) > 0)

175 
	`¥ötf
("Resu…ög såög: %s\n", 
b
);

177 
b
[0] = '\0';

178 
Àn
 = 2;

179 
n
 = 
	`my_¢¥ötf
(
b
, 
Àn
, "%s", "test");

180 
	`¥ötf
("my_snprintf(,%d,,\"test\") -> %d; strlen(b) -> %zd\n",

181 
Àn
, 
n
, 
	`°æí
(
b
));

182 i‡(
	`°æí
(
b
) > 0)

183 
	`¥ötf
("Resu…ög såög: %s\n", 
b
);

185 
b
[0] = '\0';

186 
Àn
 = 3;

187 
n
 = 
	`my_¢¥ötf
(
b
, 
Àn
, "%s", "test");

188 
	`¥ötf
("my_snprintf(,%d,,\"test\") -> %d; strlen(b) -> %zd\n",

189 
Àn
, 
n
, 
	`°æí
(
b
));

190 i‡(
	`°æí
(
b
) > 0)

191 
	`¥ötf
("Resu…ög såög: %s\n", 
b
);

193 
b
[0] = '\0';

194 
Àn
 = 4;

195 
n
 = 
	`my_¢¥ötf
(
b
, 
Àn
, "%s", "test");

196 
	`¥ötf
("my_snprintf(,%d,,\"test\") -> %d; strlen(b) -> %zd\n",

197 
Àn
, 
n
, 
	`°æí
(
b
));

198 i‡(
	`°æí
(
b
) > 0)

199 
	`¥ötf
("Resu…ög såög: %s\n", 
b
);

201 
b
[0] = '\0';

202 
Àn
 = 5;

203 
n
 = 
	`my_¢¥ötf
(
b
, 
Àn
, "%s", "test");

204 
	`¥ötf
("my_snprintf(,%d,,\"test\") -> %d; strlen(b) -> %zd\n",

205 
Àn
, 
n
, 
	`°æí
(
b
));

206 i‡(
	`°æí
(
b
) > 0)

207 
	`¥ötf
("Resu…ög såög: %s\n", 
b
);

209 
b
[0] = '\0';

210 
Àn
 = 6;

211 
n
 = 
	`my_¢¥ötf
(
b
, 
Àn
, "%s", "test");

212 
	`¥ötf
("my_snprintf(,%d,,\"test\") -> %d; strlen(b) -> %zd\n",

213 
Àn
, 
n
, 
	`°æí
(
b
));

214 i‡(
	`°æí
(
b
) > 0)

215 
	`¥ötf
("Resu…ög såög: %s\n", 
b
);

217 
b
[0] = '\0';

218 
Àn
 = 7;

219 
n
 = 
	`my_¢¥ötf
(
b
, 
Àn
, "%s", "test");

220 
	`¥ötf
("my_snprintf(,%d,,\"test\") -> %d; strlen(b) -> %zd\n",

221 
Àn
, 
n
, 
	`°æí
(
b
));

222 i‡(
	`°æí
(
b
) > 0)

223 
	`¥ötf
("Resu…ög såög: %s\n", 
b
);

225  
ªt
;

226 
	}
}

	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

70 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

75 
__löe
,

76 
__c⁄°
 *
__fun˘i⁄
)

77 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

82 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

83 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

86 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/dirent.h

23 #i‚def 
_DIRENT_H


24 
	#_DIRENT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifde‡
__USE_XOPEN


33 #i‚de‡
__öo_t_deföed


34 #i‚de‡
__USE_FILE_OFFSET64


35 
__öo_t
 
	töo_t
;

37 
__öo64_t
 
	töo_t
;

39 
	#__öo_t_deföed


	)

41 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


42 
__öo64_t
 
	töo64_t
;

43 
	#__öo64_t_deföed


	)

62 
	~<bôs/dúít.h
>

64 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


65 
	#d_öo
 
d_fûío


	)

82 #ifde‡
_DIRENT_HAVE_D_NAMLEN


83 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

84 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

86 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

87 #ifde‡
_DIRENT_HAVE_D_RECLEN


88 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

90 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

91 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

96 #ifde‡
__USE_BSD


100 
	mDT_UNKNOWN
 = 0,

101 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

102 
	mDT_FIFO
 = 1,

103 
	#DT_FIFO
 
DT_FIFO


	)

104 
	mDT_CHR
 = 2,

105 
	#DT_CHR
 
DT_CHR


	)

106 
	mDT_DIR
 = 4,

107 
	#DT_DIR
 
DT_DIR


	)

108 
	mDT_BLK
 = 6,

109 
	#DT_BLK
 
DT_BLK


	)

110 
	mDT_REG
 = 8,

111 
	#DT_REG
 
DT_REG


	)

112 
	mDT_LNK
 = 10,

113 
	#DT_LNK
 
DT_LNK


	)

114 
	mDT_SOCK
 = 12,

115 
	#DT_SOCK
 
DT_SOCK


	)

116 
	mDT_WHT
 = 14

117 
	#DT_WHT
 
DT_WHT


	)

121 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

122 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

128 
__dú°ªam
 
	tDIR
;

135 
DIR
 *
	$›ídú
 (
__c⁄°
 *
__«me
Ë
	`__n⁄nuŒ
 ((1));

137 #ifde‡
__USE_XOPEN2K8


142 
DIR
 *
	`fd›ídú
 (
__fd
);

150 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

162 #i‚de‡
__USE_FILE_OFFSET64


163 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

165 #ifde‡
__REDIRECT


166 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

167 
	`__n⁄nuŒ
 ((1));

169 
	#ªaddú
 
ªaddú64


	)

173 #ifde‡
__USE_LARGEFILE64


174 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

177 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


183 #i‚de‡
__USE_FILE_OFFSET64


184 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

185 
dúít
 *
__ª°ri˘
 
__íåy
,

186 
dúít
 **
__ª°ri˘
 
__ªsu…
)

187 
	`__n⁄nuŒ
 ((1, 2, 3));

189 #ifde‡
__REDIRECT


190 
	`__REDIRECT
 (
ªaddú_r
,

191 (
DIR
 *
__ª°ri˘
 
__dúp
,

192 
dúít
 *
__ª°ri˘
 
__íåy
,

193 
dúít
 **
__ª°ri˘
 
__ªsu…
),

194 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

196 
	#ªaddú_r
 
ªaddú64_r


	)

200 #ifde‡
__USE_LARGEFILE64


201 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

202 
dúít64
 *
__ª°ri˘
 
__íåy
,

203 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

204 
	`__n⁄nuŒ
 ((1, 2, 3));

209 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


212 
	~<bôs/ty≥s.h
>

215 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


224 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


227 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

230 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


231 #i‚de‡
MAXNAMLEN


233 
	~<bôs/posix1_lim.h
>

236 #ifde‡
NAME_MAX


237 
	#MAXNAMLEN
 
NAME_MAX


	)

239 
	#MAXNAMLEN
 255

	)

244 
	#__√ed_size_t


	)

245 
	~<°ddef.h
>

251 #i‚de‡
__USE_FILE_OFFSET64


252 
	`sˇndú
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

253 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

254 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

255 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

256 
__c⁄°
 
dúít
 **))

257 
	`__n⁄nuŒ
 ((1, 2));

259 #ifde‡
__REDIRECT


260 
	`__REDIRECT
 (
sˇndú
,

261 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

262 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

263 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

264 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

265 
__c⁄°
 
dúít
 **)),

266 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

268 
	#sˇndú
 
sˇndú64


	)

272 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


275 
	`sˇndú64
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

276 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

277 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

278 (*
__cmp
Ë(
__c⁄°
 
dúít64
 **,

279 
__c⁄°
 
dúít64
 **))

280 
	`__n⁄nuŒ
 ((1, 2));

284 #i‚de‡
__USE_FILE_OFFSET64


285 
	$Æphas‹t
 (
__c⁄°
 
dúít
 **
__e1
,

286 
__c⁄°
 
dúít
 **
__e2
)

287 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 #ifde‡
__REDIRECT


290 
	`__REDIRECT_NTH
 (
Æphas‹t
,

291 (
__c⁄°
 
dúít
 **
__e1
,

292 
__c⁄°
 
dúít
 **
__e2
),

293 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 
	#Æphas‹t
 
Æphas‹t64


	)

299 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


300 
	$Æphas‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

301 
__c⁄°
 
dúít64
 **
__e2
)

302 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

307 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


312 #i‚de‡
__USE_FILE_OFFSET64


313 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

314 
size_t
 
__nbyãs
,

315 
__off_t
 *
__ª°ri˘
 
__ba£p
)

316 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

318 #ifde‡
__REDIRECT


319 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

320 (
__fd
, *
__ª°ri˘
 
__buf
,

321 
size_t
 
__nbyãs
,

322 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

323 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

325 
	#gëdúíåõs
 
gëdúíåõs64


	)

329 #ifde‡
__USE_LARGEFILE64


330 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

331 
size_t
 
__nbyãs
,

332 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

333 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

337 #ifde‡
__USE_GNU


339 #i‚de‡
__USE_FILE_OFFSET64


340 
	$vîsi⁄s‹t
 (
__c⁄°
 
dúít
 **
__e1
,

341 
__c⁄°
 
dúít
 **
__e2
)

342 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

344 #ifde‡
__REDIRECT


345 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

346 (
__c⁄°
 
dúít
 **
__e1
,

347 
__c⁄°
 
dúít
 **
__e2
),

348 
vîsi⁄s‹t64
)

349 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

351 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

355 #ifde‡
__USE_LARGEFILE64


356 
	$vîsi⁄s‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

357 
__c⁄°
 
dúít64
 **
__e2
)

358 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

362 
__END_DECLS


	@/usr/include/err.h

20 #i‚def 
_ERR_H


21 
	#_ERR_H
 1

	)

23 
	~<„©uªs.h
>

25 
	#__√ed___va_li°


	)

26 
	~<°d¨g.h
>

27 #i‚def 
__GNUC_VA_LIST


28 
	#__gnuc_va_li°
 
__±r_t


	)

31 
__BEGIN_DECLS


35 
	$w¨n
 (
__c⁄°
 *
__f‹m©
, ...)

36 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

37 
	$vw¨n
 (
__c⁄°
 *
__f‹m©
, 
__gnuc_va_li°
)

38 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 0)));

41 
	$w¨nx
 (
__c⁄°
 *
__f‹m©
, ...)

42 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

43 
	$vw¨nx
 (
__c⁄°
 *
__f‹m©
, 
__gnuc_va_li°
)

44 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 0)));

47 
	$îr
 (
__°©us
, 
__c⁄°
 *
__f‹m©
, ...)

48 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

49 
	$vîr
 (
__°©us
, 
__c⁄°
 *
__f‹m©
, 
__gnuc_va_li°
)

50 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

51 
	$îrx
 (
__°©us
, 
__c⁄°
 *
__f‹m©
, ...)

52 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

53 
	$vîrx
 (
__°©us
, 
__c⁄°
 *, 
__gnuc_va_li°
)

54 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

56 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


38 
	~<bôs/ty≥s.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

41 
	~<bôs/°©.h
>

43 
	#S_IFMT
 
__S_IFMT


	)

44 
	#S_IFDIR
 
__S_IFDIR


	)

45 
	#S_IFCHR
 
__S_IFCHR


	)

46 
	#S_IFBLK
 
__S_IFBLK


	)

47 
	#S_IFREG
 
__S_IFREG


	)

48 #ifde‡
__S_IFIFO


49 
	#S_IFIFO
 
__S_IFIFO


	)

51 #ifde‡
__S_IFLNK


52 
	#S_IFLNK
 
__S_IFLNK


	)

54 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


55 
	#S_IFSOCK
 
__S_IFSOCK


	)

60 
	#S_ISUID
 
__S_ISUID


	)

61 
	#S_ISGID
 
__S_ISGID


	)

63 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


65 
	#S_ISVTX
 
__S_ISVTX


	)

68 
	#S_IRUSR
 
__S_IREAD


	)

69 
	#S_IWUSR
 
__S_IWRITE


	)

70 
	#S_IXUSR
 
__S_IEXEC


	)

72 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

74 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

75 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

76 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

78 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

80 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

81 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

82 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

84 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

87 #ifdef 
__USE_MISC


88 #i‚de‡
R_OK


91 
	#R_OK
 4

	)

92 
	#W_OK
 2

	)

93 
	#X_OK
 1

	)

94 
	#F_OK
 0

	)

99 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


100 
	#SEEK_SET
 0

	)

101 
	#SEEK_CUR
 1

	)

102 
	#SEEK_END
 2

	)

105 #ifde‡
__USE_ATFILE


106 
	#AT_FDCWD
 -100

	)

109 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

110 
	#AT_REMOVEDIR
 0x200

	)

112 
	#AT_SYMLINK_FOLLOW
 0x400

	)

113 
	#AT_EACCESS
 0x200

	)

122 
f˙é
 (
__fd
, 
__cmd
, ...);

130 #i‚de‡
__USE_FILE_OFFSET64


131 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

133 #ifde‡
__REDIRECT


134 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

135 
	`__n⁄nuŒ
 ((1));

137 
	#›í
 
›í64


	)

140 #ifde‡
__USE_LARGEFILE64


141 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

144 #ifde‡
__USE_ATFILE


154 #i‚de‡
__USE_FILE_OFFSET64


155 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

156 
	`__n⁄nuŒ
 ((2));

158 #ifde‡
__REDIRECT


159 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

160 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

162 
	#›í©
 
›í©64


	)

165 #ifde‡
__USE_LARGEFILE64


166 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

167 
	`__n⁄nuŒ
 ((2));

176 #i‚de‡
__USE_FILE_OFFSET64


177 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

179 #ifde‡
__REDIRECT


180 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

181 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

183 
	#¸ót
 
¸ót64


	)

186 #ifde‡
__USE_LARGEFILE64


187 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

190 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

191 && !
deföed
 
__USE_POSIX
))

200 
	#F_ULOCK
 0

	)

201 
	#F_LOCK
 1

	)

202 
	#F_TLOCK
 2

	)

203 
	#F_TEST
 3

	)

205 #i‚de‡
__USE_FILE_OFFSET64


206 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

208 #ifde‡
__REDIRECT


209 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

211 
	#lockf
 
lockf64


	)

214 #ifde‡
__USE_LARGEFILE64


215 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

219 #ifde‡
__USE_XOPEN2K


222 #i‚de‡
__USE_FILE_OFFSET64


223 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

224 
__advi£
Ë
__THROW
;

226 #ifde‡
__REDIRECT_NTH


227 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

228 
__off64_t
 
__Àn
, 
__advi£
),

229 
posix_Ádvi£64
);

231 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

234 #ifde‡
__USE_LARGEFILE64


235 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

236 
__advi£
Ë
__THROW
;

244 #i‚de‡
__USE_FILE_OFFSET64


245 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

247 #ifde‡
__REDIRECT


248 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

249 
__off64_t
 
__Àn
),

250 
posix_ÁŒoˇã64
);

252 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

255 #ifde‡
__USE_LARGEFILE64


256 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

262 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

263 && 
deföed
 
__va_¨g_∑ck_Àn


264 
	~<bôs/f˙é2.h
>

267 
__END_DECLS


	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
Ë
__THROW
;

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/glob.h

20 #i‚def 
_GLOB_H


21 
	#_GLOB_H
 1

	)

23 
	~<sys/cdefs.h
>

25 
	g__BEGIN_DECLS


28 #i‚de‡
__size_t


29 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

30 
__SIZE_TYPE__
 
	t__size_t
;

31 #i‡
deföed
 
__USE_XOPEN
 || 
__USE_XOPEN2K8


32 
__SIZE_TYPE__
 
	tsize_t
;

35 
	~<°ddef.h
>

36 #i‚de‡
__size_t


37 
	#__size_t
 
size_t


	)

43 #unde‡
__size_t


44 
	#__size_t
 
size_t


	)

48 
	#GLOB_ERR
 (1 << 0)

	)

49 
	#GLOB_MARK
 (1 << 1)

	)

50 
	#GLOB_NOSORT
 (1 << 2)

	)

51 
	#GLOB_DOOFFS
 (1 << 3)

	)

52 
	#GLOB_NOCHECK
 (1 << 4)

	)

53 
	#GLOB_APPEND
 (1 << 5)

	)

54 
	#GLOB_NOESCAPE
 (1 << 6)

	)

55 
	#GLOB_PERIOD
 (1 << 7)

	)

57 #i‡!
deföed
 
__USE_POSIX2
 || deföed 
__USE_BSD
 || deföed 
__USE_GNU


58 
	#GLOB_MAGCHAR
 (1 << 8)

	)

59 
	#GLOB_ALTDIRFUNC
 (1 << 9)

	)

60 
	#GLOB_BRACE
 (1 << 10)

	)

61 
	#GLOB_NOMAGIC
 (1 << 11)

	)

62 
	#GLOB_TILDE
 (1 << 12)

	)

63 
	#GLOB_ONLYDIR
 (1 << 13)

	)

64 
	#GLOB_TILDE_CHECK
 (1 << 14)

	)

66 
	#__GLOB_FLAGS
 (
GLOB_ERR
|
GLOB_MARK
|
GLOB_NOSORT
|
GLOB_DOOFFS
| \

67 
GLOB_NOESCAPE
|
GLOB_NOCHECK
|
GLOB_APPEND
| \

68 
GLOB_PERIOD
|
GLOB_ALTDIRFUNC
|
GLOB_BRACE
| \

69 
GLOB_NOMAGIC
|
GLOB_TILDE
|
GLOB_ONLYDIR
|
GLOB_TILDE_CHECK
)

	)

71 
	#__GLOB_FLAGS
 (
GLOB_ERR
|
GLOB_MARK
|
GLOB_NOSORT
|
GLOB_DOOFFS
| \

72 
GLOB_NOESCAPE
|
GLOB_NOCHECK
|
GLOB_APPEND
| \

73 
GLOB_PERIOD
)

	)

77 
	#GLOB_NOSPACE
 1

	)

78 
	#GLOB_ABORTED
 2

	)

79 
	#GLOB_NOMATCH
 3

	)

80 
	#GLOB_NOSYS
 4

	)

81 #ifde‡
__USE_GNU


84 
	#GLOB_ABEND
 
GLOB_ABORTED


	)

88 #ifde‡
__USE_GNU


89 
	g°©
;

93 
__size_t
 
	mgl_∑thc
;

94 **
	mgl_∑thv
;

95 
__size_t
 
	mgl_offs
;

96 
	mgl_Êags
;

100 (*
	mgl_˛o£dú
) (*);

101 #ifde‡
__USE_GNU


102 
	mdúít
 *(*
	mgl_ªaddú
) (*);

104 *(*
	mgl_ªaddú
) (*);

106 *(*
	mgl_›ídú
Ë(
__c⁄°
 *);

107 #ifde‡
__USE_GNU


108 (*
	mgl_l°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, 
°©
 *__restrict);

109 (*
	mgl_°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, 
°©
 *__restrict);

111 (*
	mgl_l°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, *__restrict);

112 (*
	mgl_°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, *__restrict);

114 } 
	tglob_t
;

116 #ifde‡
__USE_LARGEFILE64


117 #ifde‡
__USE_GNU


118 
	g°©64
;

122 
__size_t
 
	mgl_∑thc
;

123 **
	mgl_∑thv
;

124 
__size_t
 
	mgl_offs
;

125 
	mgl_Êags
;

129 (*
	mgl_˛o£dú
) (*);

130 #ifde‡
__USE_GNU


131 
	mdúít64
 *(*
	mgl_ªaddú
) (*);

133 *(*
	mgl_ªaddú
) (*);

135 *(*
	mgl_›ídú
Ë(
__c⁄°
 *);

136 #ifde‡
__USE_GNU


137 (*
	mgl_l°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, 
°©64
 *__restrict);

138 (*
	mgl_°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, 
°©64
 *__restrict);

140 (*
	mgl_l°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, *__restrict);

141 (*
	mgl_°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, *__restrict);

143 } 
	tglob64_t
;

146 #i‡
__USE_FILE_OFFSET64
 && 
__GNUC__
 < 2

147 
	#glob
 
glob64


	)

148 
	#glob‰ì
 
glob‰ì64


	)

159 #i‡!
deföed
 
__USE_FILE_OFFSET64
 || 
__GNUC__
 < 2

160 
glob
 (
__c⁄°
 *
__ª°ri˘
 
__∑âîn
, 
__Êags
,

161 (*
__îrfunc
Ë(
__c⁄°
 *, ),

162 
glob_t
 *
__ª°ri˘
 
__pglob
Ë
__THROW
;

165 
	$glob‰ì
 (
glob_t
 *
__pglob
Ë
__THROW
;

167 
	`__REDIRECT_NTH
 (
glob
, (
__c⁄°
 *
__ª°ri˘
 
__∑âîn
,

168 
__Êags
,

169 (*
__îrfunc
Ë(
__c⁄°
 *, ),

170 
glob_t
 *
__ª°ri˘
 
__pglob
), 
glob64
);

172 
	`__REDIRECT_NTH
 (
glob‰ì
, (
glob_t
 *
__pglob
), 
glob‰ì64
);

175 #ifde‡
__USE_LARGEFILE64


176 
	`glob64
 (
__c⁄°
 *
__ª°ri˘
 
__∑âîn
, 
__Êags
,

177 (*
__îrfunc
Ë(
__c⁄°
 *, ),

178 
glob64_t
 *
__ª°ri˘
 
__pglob
Ë
__THROW
;

180 
	$glob‰ì64
 (
glob64_t
 *
__pglob
Ë
__THROW
;

184 #ifde‡
__USE_GNU


190 
	$glob_∑âîn_p
 (
__c⁄°
 *
__∑âîn
, 
__quŸe
Ë
__THROW
;

193 
__END_DECLS


	@/usr/include/inttypes.h

23 #i‚de‡
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<°döt.h
>

31 #i‚de‡
____gwch¨_t_deföed


32 #ifde‡
__˝lu•lus


33 
	#__gwch¨_t
 
wch¨_t


	)

34 #ñi‡
deföed
 
__WCHAR_TYPE__


35 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

37 
	#__√ed_wch¨_t


	)

38 
	~<°ddef.h
>

39 
wch¨_t
 
	t__gwch¨_t
;

41 
	#____gwch¨_t_deföed
 1

	)

47 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


49 #i‡
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "Œ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

274 
	g__BEGIN_DECLS


276 #i‡
__WORDSIZE
 == 64

281 
	mquŸ
;

282 
	mªm
;

283 } 
	timaxdiv_t
;

290 
	mquŸ
;

291 
	mªm
;

292 } 
	timaxdiv_t
;

298 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

301 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

302 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

305 
ötmax_t
 
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

306 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

309 
uötmax_t
 
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

310 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

313 
ötmax_t
 
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

314 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

315 
__THROW
;

318 
uötmax_t
 
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

319 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

320 
__THROW
;

322 #ifde‡
__USE_EXTERN_INLINES


324 #i‡
__WORDSIZE
 == 64

326 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

327 **
__ª°ri˘
 
__íd±r
,

328 
__ba£
, 
__group
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

331 
__exã∫_ölöe
 
ötmax_t


332 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

333 
ba£
))

335  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

336 
	}
}

338 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *

339 
__ª°ri˘
 
__≈å
,

340 ** 
__ª°ri˘
 
__íd±r
,

341 
__ba£
, 
__group
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

344 
__exã∫_ölöe
 
uötmax_t


345 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

346 
ba£
))

348  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

349 
	}
}

351 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

352 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

353 
__ba£
, 
__group
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

356 
__exã∫_ölöe
 
ötmax_t


357 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

358 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

360  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

361 
	}
}

363 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

364 
__ª°ri˘
 
__≈å
,

365 
__gwch¨_t
 **

366 
__ª°ri˘
 
__íd±r
,

367 
__ba£
, 
__group
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

370 
__exã∫_ölöe
 
uötmax_t


371 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

372 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

374  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

375 
	}
}

379 
__exãnsi⁄__


380 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

381 **
__ª°ri˘
 
__íd±r
,

382 
__ba£
, 
__group
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

385 
__exã∫_ölöe
 
ötmax_t


386 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

387 
ba£
))

389  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

390 
	}
}

392 
__exãnsi⁄__


393 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

394 
__ª°ri˘
 
__≈å
,

396 
__ª°ri˘
 
__íd±r
,

397 
__ba£
,

398 
__group
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

401 
__exã∫_ölöe
 
uötmax_t


402 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

403 
ba£
))

405  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

406 
	}
}

408 
__exãnsi⁄__


409 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

410 
__ª°ri˘
 
__≈å
,

411 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

412 
__ba£
, 
__group
)

413 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

415 
__exã∫_ölöe
 
ötmax_t


416 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

417 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

419  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

420 
	}
}

423 
__exãnsi⁄__


424 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

425 
__ª°ri˘
 
__≈å
,

426 
__gwch¨_t
 **

427 
__ª°ri˘
 
__íd±r
,

428 
__ba£
,

429 
__group
)

430 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

432 
__exã∫_ölöe
 
uötmax_t


433 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

434 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

436  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

437 
	}
}

442 
	g__END_DECLS


	@/usr/include/libaio.h

23 #i‚de‡
__LIBAIO_H


24 
	#__LIBAIO_H


	)

26 #ifde‡
__˝lu•lus


30 
	~<sys/ty≥s.h
>

31 
	~<°rög.h
>

33 
time•ec
;

34 
sockaddr
;

35 
iovec
;

37 
io_c⁄ãxt
 *
	tio_c⁄ãxt_t
;

39 
	eio_iocb_cmd
 {

40 
IO_CMD_PREAD
 = 0,

41 
IO_CMD_PWRITE
 = 1,

43 
IO_CMD_FSYNC
 = 2,

44 
IO_CMD_FDSYNC
 = 3,

46 
IO_CMD_POLL
 = 5,

47 
IO_CMD_NOOP
 = 6,

48 
IO_CMD_PREADV
 = 7,

49 
IO_CMD_PWRITEV
 = 8,

50 } 
	tio_iocb_cmd_t
;

52 #i‡
deföed
(
__i386__
)

53 
	#PADDED
(
x
, 
y
Ëx; 
	)
y

54 
	#PADDED±r
(
x
, 
y
Ëx; 
	)
y

55 
	#PADDEDul
(
x
, 
y
Ëx; 
	)
y

56 #ñi‡
deföed
(
__ü64__
Ë|| deföed(
__x86_64__
Ë|| deföed(
__Æpha__
)

57 
	#PADDED
(
x
, 
y
Ëx, 
	)
y

58 
	#PADDED±r
(
x
, 
y
Ë
	)
x

59 
	#PADDEDul
(
x
, 
y
Ë
	)
x

60 #ñi‡
deföed
(
__powîpc64__
)

61 
	#PADDED
(
x
, 
y
Ëy; 
	)
x

62 
	#PADDED±r
(
x
,
y
Ë
	)
x

63 
	#PADDEDul
(
x
, 
y
Ë
	)
x

64 #ñi‡
deföed
(
__PPC__
)

65 
	#PADDED
(
x
, 
y
Ëy; 
	)
x

66 
	#PADDED±r
(
x
, 
y
Ëy; 
	)
x

67 
	#PADDEDul
(
x
, 
y
Ëy; 
	)
x

68 #ñi‡
deföed
(
__s390x__
)

69 
	#PADDED
(
x
, 
y
Ëy; 
	)
x

70 
	#PADDED±r
(
x
,
y
Ë
	)
x

71 
	#PADDEDul
(
x
, 
y
Ë
	)
x

72 #ñi‡
deföed
(
__s390__
)

73 
	#PADDED
(
x
, 
y
Ëy; 
	)
x

74 
	#PADDED±r
(
x
, 
y
Ëy; 
	)
x

75 
	#PADDEDul
(
x
, 
y
Ëy; 
	)
x

77 #îr‹ 
ídün
?

80 
	sio_iocb_pﬁl
 {

81 
PADDED
(
evíts
, 
__∑d1
);

84 
	sio_iocb_sockaddr
 {

85 
sockaddr
 *
addr
;

86 
Àn
;

89 
	sio_iocb_comm⁄
 {

90 
PADDED±r
(*
buf
, 
__∑d1
);

91 
PADDEDul
(
nbyãs
, 
__∑d2
);

92 
off£t
;

93 
__∑d3
;

94 
Êags
;

95 
ªsfd
;

98 
	sio_iocb_ve˘‹
 {

99 c⁄° 
iovec
 *
vec
;

100 
ƒ
;

101 
off£t
;

104 
	siocb
 {

105 
PADDED±r
(*
d©a
, 
__∑d1
);

106 
PADDED
(
key
, 
__∑d2
);

108 
aio_lio_›code
;

109 
aio_ªq¥io
;

110 
aio_fûdes
;

113 
io_iocb_comm⁄
 
c
;

114 
io_iocb_ve˘‹
 
v
;

115 
io_iocb_pﬁl
 
pﬁl
;

116 
io_iocb_sockaddr
 
ßddr
;

117 } 
u
;

120 
	sio_evít
 {

121 
PADDED±r
(*
d©a
, 
__∑d1
);

122 
PADDED±r
(
iocb
 *
obj
, 
__∑d2
);

123 
PADDEDul
(
ªs
, 
__∑d3
);

124 
PADDEDul
(
ªs2
, 
__∑d4
);

127 #unde‡
PADDED


128 #unde‡
PADDED±r


129 #unde‡
PADDEDul


131 (*
io_ˇŒback_t
)(
	tio_c⁄ãxt_t
 
	t˘x
, 
	tiocb
 *iocb, 
	tªs
, 
	tªs2
);

134 
io_queue_öô
(
maxevíts
, 
io_c⁄ãxt_t
 *
˘xp
);

136 
io_queue_ªÀa£
(
io_c⁄ãxt_t
 
˘x
);

138 
io_queue_run
(
io_c⁄ãxt_t
 
˘x
);

141 
io_£tup
(
maxevíts
, 
io_c⁄ãxt_t
 *
˘xp
);

142 
io_de°roy
(
io_c⁄ãxt_t
 
˘x
);

143 
io_submô
(
io_c⁄ãxt_t
 
˘x
, 
ƒ
, 
iocb
 *
ios
[]);

144 
io_ˇn˚l
(
io_c⁄ãxt_t
 
˘x
, 
iocb
 *iocb, 
io_evít
 *
evt
);

145 
io_gëevíts
(
io_c⁄ãxt_t
 
˘x_id
, 
mö_ƒ
, 
ƒ
, 
io_evít
 *
evíts
, 
time•ec
 *
timeout
);

148 
ölöe
 
io_£t_ˇŒback
(
iocb
 *iocb, 
io_ˇŒback_t
 
cb
)

150 
	giocb
->
	gd©a
 = (*)
cb
;

153 
ölöe
 
io_¥ï_¥ód
(
iocb
 *iocb, 
fd
, *
buf
, 
size_t
 
cou¡
, 
off£t
)

155 
mem£t
(
iocb
, 0, (*iocb));

156 
	giocb
->
	gaio_fûdes
 = 
fd
;

157 
	giocb
->
	gaio_lio_›code
 = 
IO_CMD_PREAD
;

158 
	giocb
->
	gaio_ªq¥io
 = 0;

159 
	giocb
->
	gu
.
	gc
.
	gbuf
 = 
buf
;

160 
	giocb
->
	gu
.
	gc
.
	gnbyãs
 = 
cou¡
;

161 
	giocb
->
	gu
.
	gc
.
	goff£t
 = 
off£t
;

164 
ölöe
 
io_¥ï_pwrôe
(
iocb
 *iocb, 
fd
, *
buf
, 
size_t
 
cou¡
, 
off£t
)

166 
mem£t
(
iocb
, 0, (*iocb));

167 
	giocb
->
	gaio_fûdes
 = 
fd
;

168 
	giocb
->
	gaio_lio_›code
 = 
IO_CMD_PWRITE
;

169 
	giocb
->
	gaio_ªq¥io
 = 0;

170 
	giocb
->
	gu
.
	gc
.
	gbuf
 = 
buf
;

171 
	giocb
->
	gu
.
	gc
.
	gnbyãs
 = 
cou¡
;

172 
	giocb
->
	gu
.
	gc
.
	goff£t
 = 
off£t
;

175 
ölöe
 
io_¥ï_¥ódv
(
iocb
 *iocb, 
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
, 
off£t
)

177 
mem£t
(
iocb
, 0, (*iocb));

178 
	giocb
->
	gaio_fûdes
 = 
fd
;

179 
	giocb
->
	gaio_lio_›code
 = 
IO_CMD_PREADV
;

180 
	giocb
->
	gaio_ªq¥io
 = 0;

181 
	giocb
->
	gu
.
	gc
.
	gbuf
 = (*)
iov
;

182 
	giocb
->
	gu
.
	gc
.
	gnbyãs
 = 
iov˙t
;

183 
	giocb
->
	gu
.
	gc
.
	goff£t
 = 
off£t
;

186 
ölöe
 
io_¥ï_pwrôev
(
iocb
 *iocb, 
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
, 
off£t
)

188 
mem£t
(
iocb
, 0, (*iocb));

189 
	giocb
->
	gaio_fûdes
 = 
fd
;

190 
	giocb
->
	gaio_lio_›code
 = 
IO_CMD_PWRITEV
;

191 
	giocb
->
	gaio_ªq¥io
 = 0;

192 
	giocb
->
	gu
.
	gc
.
	gbuf
 = (*)
iov
;

193 
	giocb
->
	gu
.
	gc
.
	gnbyãs
 = 
iov˙t
;

194 
	giocb
->
	gu
.
	gc
.
	goff£t
 = 
off£t
;

199 
ölöe
 
io_¥ï_pﬁl
(
iocb
 *iocb, 
fd
, 
evíts
)

201 
mem£t
(
iocb
, 0, (*iocb));

202 
	giocb
->
	gaio_fûdes
 = 
fd
;

203 
	giocb
->
	gaio_lio_›code
 = 
IO_CMD_POLL
;

204 
	giocb
->
	gaio_ªq¥io
 = 0;

205 
	giocb
->
	gu
.
	gpﬁl
.
	gevíts
 = 
evíts
;

208 
ölöe
 
io_pﬁl
(
io_c⁄ãxt_t
 
˘x
, 
iocb
 *iocb, 
io_ˇŒback_t
 
cb
, 
fd
, 
evíts
)

210 
io_¥ï_pﬁl
(
iocb
, 
fd
, 
evíts
);

211 
io_£t_ˇŒback
(
iocb
, 
cb
);

212  
io_submô
(
˘x
, 1, &
iocb
);

215 
ölöe
 
io_¥ï_fsync
(
iocb
 *iocb, 
fd
)

217 
mem£t
(
iocb
, 0, (*iocb));

218 
	giocb
->
	gaio_fûdes
 = 
fd
;

219 
	giocb
->
	gaio_lio_›code
 = 
IO_CMD_FSYNC
;

220 
	giocb
->
	gaio_ªq¥io
 = 0;

223 
ölöe
 
io_fsync
(
io_c⁄ãxt_t
 
˘x
, 
iocb
 *iocb, 
io_ˇŒback_t
 
cb
, 
fd
)

225 
io_¥ï_fsync
(
iocb
, 
fd
);

226 
io_£t_ˇŒback
(
iocb
, 
cb
);

227  
io_submô
(
˘x
, 1, &
iocb
);

230 
ölöe
 
io_¥ï_fdsync
(
iocb
 *iocb, 
fd
)

232 
mem£t
(
iocb
, 0, (*iocb));

233 
	giocb
->
	gaio_fûdes
 = 
fd
;

234 
	giocb
->
	gaio_lio_›code
 = 
IO_CMD_FDSYNC
;

235 
	giocb
->
	gaio_ªq¥io
 = 0;

238 
ölöe
 
io_fdsync
(
io_c⁄ãxt_t
 
˘x
, 
iocb
 *iocb, 
io_ˇŒback_t
 
cb
, 
fd
)

240 
io_¥ï_fdsync
(
iocb
, 
fd
);

241 
io_£t_ˇŒback
(
iocb
, 
cb
);

242  
io_submô
(
˘x
, 1, &
iocb
);

245 
ölöe
 
io_£t_evítfd
(
iocb
 *iocb, 
evítfd
)

247 
	giocb
->
	gu
.
	gc
.
	gÊags
 |= (1 << 0) ;

248 
	giocb
->
	gu
.
	gc
.
	gªsfd
 = 
evítfd
;

251 #ifde‡
__˝lu•lus


	@/usr/include/libgen.h

19 #i‚de‡
_LIBGEN_H


20 
	#_LIBGEN_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


27 *
	$dú«me
 (*
__∑th
Ë
__THROW
;

35 *
	$__xpg_ba£«me
 (*
__∑th
Ë
__THROW
;

36 
	#ba£«me
 
__xpg_ba£«me


	)

38 
__END_DECLS


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/bsg.h

1 #i‚de‡
BSG_H


2 
	#BSG_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#BSG_PROTOCOL_SCSI
 0

	)

8 
	#BSG_SUB_PROTOCOL_SCSI_CMD
 0

	)

9 
	#BSG_SUB_PROTOCOL_SCSI_TMF
 1

	)

10 
	#BSG_SUB_PROTOCOL_SCSI_TRANSPORT
 2

	)

18 
	#BSG_FLAG_Q_AT_TAIL
 0x10

	)

20 
	ssg_io_v4
 {

21 
__s32
 
	mgu¨d
;

22 
__u32
 
	m¥Ÿocﬁ
;

23 
__u32
 
	msub¥Ÿocﬁ
;

26 
__u32
 
	mªque°_Àn
;

27 
__u64
 
	mªque°
;

28 
__u64
 
	mªque°_èg
;

29 
__u32
 
	mªque°_©å
;

30 
__u32
 
	mªque°_¥i‹ôy
;

31 
__u32
 
	mªque°_exåa
;

32 
__u32
 
	mmax_ª•⁄£_Àn
;

33 
__u64
 
	mª•⁄£
;

36 
__u32
 
	mdout_iovec_cou¡
;

38 
__u32
 
	mdout_x„r_Àn
;

39 
__u32
 
	mdö_iovec_cou¡
;

40 
__u32
 
	mdö_x„r_Àn
;

41 
__u64
 
	mdout_x„Ω
;

42 
__u64
 
	mdö_x„Ω
;

44 
__u32
 
	mtimeout
;

45 
__u32
 
	mÊags
;

46 
__u64
 
	mu§_±r
;

47 
__u32
 
	m•¨e_ö
;

49 
__u32
 
	mdrivî_°©us
;

50 
__u32
 
	må™•‹t_°©us
;

51 
__u32
 
	mdevi˚_°©us
;

52 
__u32
 
	mªåy_dñay
;

53 
__u32
 
	möfo
;

54 
__u32
 
	mduøti⁄
;

55 
__u32
 
	mª•⁄£_Àn
;

56 
__s32
 
	mdö_ªsid
;

57 
__s32
 
	mdout_ªsid
;

58 
__u64
 
	mgíî©ed_èg
;

59 
__u32
 
	m•¨e_out
;

61 
__u32
 
	m∑ddög
;

	@/usr/include/linux/fs.h

1 #i‚de‡
_LINUX_FS_H


2 
	#_LINUX_FS_H


	)

9 
	~<löux/limôs.h
>

10 
	~<löux/io˘l.h
>

11 
	~<löux/blk_ty≥s.h
>

12 
	~<löux/ty≥s.h
>

25 #unde‡
NR_OPEN


26 
	#INR_OPEN_CUR
 1024

	)

27 
	#INR_OPEN_MAX
 4096

	)

29 
	#BLOCK_SIZE_BITS
 10

	)

30 
	#BLOCK_SIZE
 (1<<
BLOCK_SIZE_BITS
)

	)

32 
	#SEEK_SET
 0

	)

33 
	#SEEK_CUR
 1

	)

34 
	#SEEK_END
 2

	)

35 
	#SEEK_MAX
 
SEEK_END


	)

37 
	sf°rim_ønge
 {

38 
__u64
 
	m°¨t
;

39 
__u64
 
	mÀn
;

40 
__u64
 
	mmöÀn
;

44 
	sfûes_°©_°ru˘
 {

45 
	mƒ_fûes
;

46 
	mƒ_‰ì_fûes
;

47 
	mmax_fûes
;

50 
	söodes_°©_t
 {

51 
	mƒ_öodes
;

52 
	mƒ_unu£d
;

53 
	mdummy
[5];

57 
	#NR_FILE
 8192

	)

59 
	#MAY_EXEC
 1

	)

60 
	#MAY_WRITE
 2

	)

61 
	#MAY_READ
 4

	)

62 
	#MAY_APPEND
 8

	)

63 
	#MAY_ACCESS
 16

	)

64 
	#MAY_OPEN
 32

	)

72 
	#FMODE_READ
 ((
fmode_t
)1)

	)

74 
	#FMODE_WRITE
 ((
fmode_t
)2)

	)

76 
	#FMODE_LSEEK
 ((
fmode_t
)4)

	)

78 
	#FMODE_PREAD
 ((
fmode_t
)8)

	)

80 
	#FMODE_PWRITE
 ((
fmode_t
)16)

	)

82 
	#FMODE_EXEC
 ((
fmode_t
)32)

	)

84 
	#FMODE_NDELAY
 ((
fmode_t
)64)

	)

86 
	#FMODE_EXCL
 ((
fmode_t
)128)

	)

89 
	#FMODE_WRITE_IOCTL
 ((
fmode_t
)256)

	)

91 
	#FMODE_32BITHASH
 ((
fmode_t
)0x200)

	)

93 
	#FMODE_64BITHASH
 ((
fmode_t
)0x400)

	)

101 
	#FMODE_NOCMTIME
 ((
fmode_t
)2048)

	)

104 
	#FMODE_RANDOM
 ((
fmode_t
)4096)

	)

162 
	#RW_MASK
 
REQ_WRITE


	)

163 
	#RWA_MASK
 (1 << 
BIO_RW_AHEAD
)

	)

165 
	#READ
 0

	)

166 
	#WRITE
 1

	)

167 
	#READA
 
RWA_MASK


	)

168 
	#SWRITE
 (
WRITE
 | 
READA
)

	)

170 
	#READ_SYNC
 (
READ
 | (1 << 
BIO_RW_SYNCIO
Ë| (1 << 
BIO_RW_UNPLUG
))

	)

171 
	#READ_META
 (
READ
 | (1 << 
BIO_RW_META
))

	)

172 
	#WRITE_SYNC_PLUG
 (
WRITE
 | (1 << 
BIO_RW_SYNCIO
Ë| (1 << 
BIO_RW_NOIDLE
))

	)

173 
	#WRITE_SYNC
 (
WRITE_SYNC_PLUG
 | (1 << 
BIO_RW_UNPLUG
))

	)

174 
	#WRITE_ODIRECT_PLUG
 (
WRITE
 | (1 << 
BIO_RW_SYNCIO
))

	)

175 
	#WRITE_META
 (
WRITE
 | (1 << 
BIO_RW_META
))

	)

176 
	#SWRITE_SYNC_PLUG
 \

177 (
SWRITE
 | (1 << 
BIO_RW_SYNCIO
Ë| (1 << 
BIO_RW_NOIDLE
))

	)

178 
	#SWRITE_SYNC
 (
SWRITE_SYNC_PLUG
 | (1 << 
BIO_RW_UNPLUG
))

	)

179 
	#WRITE_BARRIER
 (
WRITE_SYNC
 | (1 << 
BIO_RW_BARRIER
))

	)

181 
	#WRITE_FLUSH
 (
WRITE_SYNC
 | (1 << 
BIO_RW_FLUSH
))

	)

182 
	#WRITE_FUA
 (
WRITE_SYNC
 | (1 << 
BIO_RW_FUA
))

	)

183 
	#WRITE_FLUSH_FUA
 (
WRITE_FLUSH
 | 
WRITE_FUA
)

	)

190 
	#DISCARD_NOBARRIER
 (
WRITE
 | (1 << 
BIO_RW_DISCARD
))

	)

191 
	#DISCARD_BARRIER
 (
DISCARD_NOBARRIER
 | (1 << 
BIO_RW_BARRIER
))

	)

193 
	#SEL_IN
 1

	)

194 
	#SEL_OUT
 2

	)

195 
	#SEL_EX
 4

	)

198 
	#FS_REQUIRES_DEV
 1

	)

199 
	#FS_BINARY_MOUNTDATA
 2

	)

200 
	#FS_HAS_SUBTYPE
 4

	)

201 
	#FS_HAS_NEW_FREEZE
 512

	)

202 
	#FS_REVAL_DOT
 16384

	)

203 
	#FS_RENAME_DOES_D_MOVE
 32768

	)

206 
	#FS_HANDLE_QUOTA
 (1<<16Ë

	)

212 
	#sb_has_√w_‰ìze
(
sb
Ë((sb)->
s_ty≥
->
fs_Êags
 & 
FS_HAS_NEW_FREEZE
)

	)

217 
	#MS_RDONLY
 1

	)

218 
	#MS_NOSUID
 2

	)

219 
	#MS_NODEV
 4

	)

220 
	#MS_NOEXEC
 8

	)

221 
	#MS_SYNCHRONOUS
 16

	)

222 
	#MS_REMOUNT
 32

	)

223 
	#MS_MANDLOCK
 64

	)

224 
	#MS_DIRSYNC
 128

	)

225 
	#MS_NOATIME
 1024

	)

226 
	#MS_NODIRATIME
 2048

	)

227 
	#MS_BIND
 4096

	)

228 
	#MS_MOVE
 8192

	)

229 
	#MS_REC
 16384

	)

230 
	#MS_VERBOSE
 32768

	)

232 
	#MS_SILENT
 32768

	)

233 
	#MS_POSIXACL
 (1<<16Ë

	)

234 
	#MS_UNBINDABLE
 (1<<17Ë

	)

235 
	#MS_PRIVATE
 (1<<18Ë

	)

236 
	#MS_SLAVE
 (1<<19Ë

	)

237 
	#MS_SHARED
 (1<<20Ë

	)

238 
	#MS_RELATIME
 (1<<21Ë

	)

239 
	#MS_KERNMOUNT
 (1<<22Ë

	)

240 
	#MS_I_VERSION
 (1<<23Ë

	)

241 
	#MS_STRICTATIME
 (1<<24Ë

	)

242 
	#MS_BORN
 (1<<29)

	)

243 
	#MS_ACTIVE
 (1<<30)

	)

244 
	#MS_NOUSER
 (1<<31)

	)

249 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
)

	)

254 
	#MS_MGC_VAL
 0xC0ED0000

	)

255 
	#MS_MGC_MSK
 0xffff0000

	)

259 
	#S_SYNC
 1

	)

260 
	#S_NOATIME
 2

	)

261 
	#S_APPEND
 4

	)

262 
	#S_IMMUTABLE
 8

	)

263 
	#S_DEAD
 16

	)

264 
	#S_NOQUOTA
 32

	)

265 
	#S_DIRSYNC
 64

	)

266 
	#S_NOCMTIME
 128

	)

267 
	#S_SWAPFILE
 256

	)

268 
	#S_PRIVATE
 512

	)

269 
	#S_AUTOMOUNT
 2048

	)

270 
	#S_AOP_EXT
 16384

	)

285 
	#__IS_FLG
(
öode
,
Êg
Ë((öode)->
i_sb
->
s_Êags
 & (Êg))

	)

287 
	#IS_RDONLY
(
öode
Ë((öode)->
i_sb
->
s_Êags
 & 
MS_RDONLY
)

	)

288 
	#IS_SYNC
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_SYNCHRONOUS
) || \

289 ((
öode
)->
i_Êags
 & 
S_SYNC
))

	)

290 
	#IS_DIRSYNC
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_SYNCHRONOUS
|
MS_DIRSYNC
) || \

291 ((
öode
)->
i_Êags
 & (
S_SYNC
|
S_DIRSYNC
)))

	)

292 
	#IS_MANDLOCK
(
öode
Ë
	`__IS_FLG
(öode, 
MS_MANDLOCK
)

	)

293 
	#IS_NOATIME
(
öode
Ë
	`__IS_FLG
(öode, 
MS_RDONLY
|
MS_NOATIME
)

	)

294 
	#IS_I_VERSION
(
öode
Ë
	`__IS_FLG
(öode, 
MS_I_VERSION
)

	)

296 
	#IS_NOQUOTA
(
öode
Ë((öode)->
i_Êags
 & 
S_NOQUOTA
)

	)

297 
	#IS_APPEND
(
öode
Ë((öode)->
i_Êags
 & 
S_APPEND
)

	)

298 
	#IS_IMMUTABLE
(
öode
Ë((öode)->
i_Êags
 & 
S_IMMUTABLE
)

	)

299 
	#IS_POSIXACL
(
öode
Ë
	`__IS_FLG
(öode, 
MS_POSIXACL
)

	)

301 
	#IS_DEADDIR
(
öode
Ë((öode)->
i_Êags
 & 
S_DEAD
)

	)

302 
	#IS_NOCMTIME
(
öode
Ë((öode)->
i_Êags
 & 
S_NOCMTIME
)

	)

303 
	#IS_SWAPFILE
(
öode
Ë((öode)->
i_Êags
 & 
S_SWAPFILE
)

	)

304 
	#IS_PRIVATE
(
öode
Ë((öode)->
i_Êags
 & 
S_PRIVATE
)

	)

305 
	#IS_AUTOMOUNT
(
öode
Ë((öode)->
i_Êags
 & 
S_AUTOMOUNT
)

	)

306 
	#IS_AOP_EXT
(
öode
Ë((öode)->
i_Êags
 & 
S_AOP_EXT
)

	)

311 
	#BLKROSET
 
	`_IO
(0x12,93Ë

	)

312 
	#BLKROGET
 
	`_IO
(0x12,94Ë

	)

313 
	#BLKRRPART
 
	`_IO
(0x12,95Ë

	)

314 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

315 
	#BLKFLSBUF
 
	`_IO
(0x12,97Ë

	)

316 
	#BLKRASET
 
	`_IO
(0x12,98Ë

	)

317 
	#BLKRAGET
 
	`_IO
(0x12,99Ë

	)

318 
	#BLKFRASET
 
	`_IO
(0x12,100)

	)

319 
	#BLKFRAGET
 
	`_IO
(0x12,101)

	)

320 
	#BLKSECTSET
 
	`_IO
(0x12,102)

	)

321 
	#BLKSECTGET
 
	`_IO
(0x12,103)

	)

322 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

324 
	#BLKPG
 
	`_IO
(0x12,105)

	)

328 
	#BLKELVGET
 
	`_IOR
(0x12,106,
size_t
)

	)

329 
	#BLKELVSET
 
	`_IOW
(0x12,107,
size_t
)

	)

334 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

335 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

336 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

337 
	#BLKTRACESETUP
 
	`_IOWR
(0x12,115,
blk_u£r_åa˚_£tup
)

	)

338 
	#BLKTRACESTART
 
	`_IO
(0x12,116)

	)

339 
	#BLKTRACESTOP
 
	`_IO
(0x12,117)

	)

340 
	#BLKTRACETEARDOWN
 
	`_IO
(0x12,118)

	)

341 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

342 
	#BLKIOMIN
 
	`_IO
(0x12,120)

	)

343 
	#BLKIOOPT
 
	`_IO
(0x12,121)

	)

344 
	#BLKALIGNOFF
 
	`_IO
(0x12,122)

	)

345 
	#BLKPBSZGET
 
	`_IO
(0x12,123)

	)

346 
	#BLKDISCARDZEROES
 
	`_IO
(0x12,124)

	)

348 
	#BMAP_IOCTL
 1

	)

349 
	#FIBMAP
 
	`_IO
(0x00,1Ë

	)

350 
	#FIGETBSZ
 
	`_IO
(0x00,2Ë

	)

351 
	#FIFREEZE
 
	`_IOWR
('X', 119, Ë

	)

352 
	#FITHAW
 
	`_IOWR
('X', 120, Ë

	)

353 
	#FITRIM
 
	`_IOWR
('X', 121, 
f°rim_ønge
Ë

	)

355 
	#FS_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

356 
	#FS_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

357 
	#FS_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

358 
	#FS_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

359 
	#FS_IOC_FIEMAP
 
	`_IOWR
('f', 11, 
fõm≠
)

	)

360 
	#FS_IOC32_GETFLAGS
 
	`_IOR
('f', 1, )

	)

361 
	#FS_IOC32_SETFLAGS
 
	`_IOW
('f', 2, )

	)

362 
	#FS_IOC32_GETVERSION
 
	`_IOR
('v', 1, )

	)

363 
	#FS_IOC32_SETVERSION
 
	`_IOW
('v', 2, )

	)

368 
	#FS_SECRM_FL
 0x00000001

	)

369 
	#FS_UNRM_FL
 0x00000002

	)

370 
	#FS_COMPR_FL
 0x00000004

	)

371 
	#FS_SYNC_FL
 0x00000008

	)

372 
	#FS_IMMUTABLE_FL
 0x00000010

	)

373 
	#FS_APPEND_FL
 0x00000020

	)

374 
	#FS_NODUMP_FL
 0x00000040

	)

375 
	#FS_NOATIME_FL
 0x00000080

	)

377 
	#FS_DIRTY_FL
 0x00000100

	)

378 
	#FS_COMPRBLK_FL
 0x00000200

	)

379 
	#FS_NOCOMP_FL
 0x00000400

	)

380 
	#FS_ECOMPR_FL
 0x00000800

	)

382 
	#FS_BTREE_FL
 0x00001000

	)

383 
	#FS_INDEX_FL
 0x00001000

	)

384 
	#FS_IMAGIC_FL
 0x00002000

	)

385 
	#FS_JOURNAL_DATA_FL
 0x00004000

	)

386 
	#FS_NOTAIL_FL
 0x00008000

	)

387 
	#FS_DIRSYNC_FL
 0x00010000

	)

388 
	#FS_TOPDIR_FL
 0x00020000

	)

389 
	#FS_EXTENT_FL
 0x00080000

	)

390 
	#FS_DIRECTIO_FL
 0x00100000

	)

391 
	#FS_NOCOW_FL
 0x00800000

	)

392 
	#FS_RESERVED_FL
 0x80000000

	)

394 
	#FS_FL_USER_VISIBLE
 0x0003DFFF

	)

395 
	#FS_FL_USER_MODIFIABLE
 0x000380FF

	)

398 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

399 
	#SYNC_FILE_RANGE_WRITE
 2

	)

400 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

	@/usr/include/linux/hdreg.h

1 #i‚de‡
_LINUX_HDREG_H


2 
	#_LINUX_HDREG_H


	)

4 
	~<löux/ty≥s.h
>

10 
	#HDIO_DRIVE_CMD_HDR_SIZE
 (4 * (
__u8
))

	)

11 
	#HDIO_DRIVE_HOB_HDR_SIZE
 (8 * (
__u8
))

	)

12 
	#HDIO_DRIVE_TASK_HDR_SIZE
 (8 * (
__u8
))

	)

14 
	#IDE_DRIVE_TASK_NO_DATA
 0

	)

15 
	#IDE_DRIVE_TASK_INVALID
 -1

	)

16 
	#IDE_DRIVE_TASK_SET_XFER
 1

	)

17 
	#IDE_DRIVE_TASK_IN
 2

	)

18 
	#IDE_DRIVE_TASK_OUT
 3

	)

19 
	#IDE_DRIVE_TASK_RAW_WRITE
 4

	)

24 
	#IDE_TASKFILE_STD_IN_FLAGS
 0xFE

	)

25 
	#IDE_HOB_STD_IN_FLAGS
 0x3C

	)

26 
	#IDE_TASKFILE_STD_OUT_FLAGS
 0xFE

	)

27 
	#IDE_HOB_STD_OUT_FLAGS
 0x3C

	)

29 
	tèsk_i‹eg_t
;

30 
	tßè_i‹eg_t
;

32 
	uide_ªg_vÆid_s
 {

33 
	mÆl
 : 16;

35 
	md©a
 : 1;

36 
	mîr‹_„©uª
 : 1;

37 
	m£˘‹
 : 1;

38 
	mn£˘‹
 : 1;

39 
	mlcyl
 : 1;

40 
	mhcyl
 : 1;

41 
	m£À˘
 : 1;

42 
	m°©us_comm™d
 : 1;

44 
	md©a_hob
 : 1;

45 
	mîr‹_„©uª_hob
 : 1;

46 
	m£˘‹_hob
 : 1;

47 
	mn£˘‹_hob
 : 1;

48 
	mlcyl_hob
 : 1;

49 
	mhcyl_hob
 : 1;

50 
	m£À˘_hob
 : 1;

51 
	mc⁄åﬁ_hob
 : 1;

52 } 
	mb
;

53 } 
	tide_ªg_vÆid_t
;

55 
	side_èsk_ªque°_s
 {

56 
__u8
 
	mio_p‹ts
[8];

57 
__u8
 
	mhob_p‹ts
[8];

58 
ide_ªg_vÆid_t
 
	mout_Êags
;

59 
ide_ªg_vÆid_t
 
	mö_Êags
;

60 
	md©a_pha£
;

61 
	mªq_cmd
;

62 
	mout_size
;

63 
	mö_size
;

64 } 
	tide_èsk_ªque°_t
;

66 
	side_io˘l_ªque°_s
 {

67 
ide_èsk_ªque°_t
 *
	mèsk_ªque°
;

68 *
	mout_buf„r
;

69 *
	mö_buf„r
;

70 } 
	tide_io˘l_ªque°_t
;

72 
	shd_drive_cmd_hdr
 {

73 
__u8
 
	mcomm™d
;

74 
__u8
 
	m£˘‹_numbî
;

75 
__u8
 
	m„©uª
;

76 
__u8
 
	m£˘‹_cou¡
;

79 
	shd_drive_èsk_hdr
 {

80 
__u8
 
	md©a
;

81 
__u8
 
	m„©uª
;

82 
__u8
 
	m£˘‹_cou¡
;

83 
__u8
 
	m£˘‹_numbî
;

84 
__u8
 
	mlow_cylödî
;

85 
__u8
 
	mhigh_cylödî
;

86 
__u8
 
	mdevi˚_hód
;

87 
__u8
 
	mcomm™d
;

88 } 
	tèsk_°ru˘_t
;

90 
	shd_drive_hob_hdr
 {

91 
__u8
 
	md©a
;

92 
__u8
 
	m„©uª
;

93 
__u8
 
	m£˘‹_cou¡
;

94 
__u8
 
	m£˘‹_numbî
;

95 
__u8
 
	mlow_cylödî
;

96 
__u8
 
	mhigh_cylödî
;

97 
__u8
 
	mdevi˚_hód
;

98 
__u8
 
	mc⁄åﬁ
;

99 } 
	thob_°ru˘_t
;

101 
	#TASKFILE_NO_DATA
 0x0000

	)

103 
	#TASKFILE_IN
 0x0001

	)

104 
	#TASKFILE_MULTI_IN
 0x0002

	)

106 
	#TASKFILE_OUT
 0x0004

	)

107 
	#TASKFILE_MULTI_OUT
 0x0008

	)

108 
	#TASKFILE_IN_OUT
 0x0010

	)

110 
	#TASKFILE_IN_DMA
 0x0020

	)

111 
	#TASKFILE_OUT_DMA
 0x0040

	)

112 
	#TASKFILE_IN_DMAQ
 0x0080

	)

113 
	#TASKFILE_OUT_DMAQ
 0x0100

	)

115 
	#TASKFILE_P_IN
 0x0200

	)

116 
	#TASKFILE_P_OUT
 0x0400

	)

117 
	#TASKFILE_P_IN_DMA
 0x0800

	)

118 
	#TASKFILE_P_OUT_DMA
 0x1000

	)

119 
	#TASKFILE_P_IN_DMAQ
 0x2000

	)

120 
	#TASKFILE_P_OUT_DMAQ
 0x4000

	)

121 
	#TASKFILE_48
 0x8000

	)

122 
	#TASKFILE_INVALID
 0x7fff

	)

125 
	#WIN_NOP
 0x00

	)

129 
	#CFA_REQ_EXT_ERROR_CODE
 0x03

	)

133 
	#WIN_SRST
 0x08

	)

134 
	#WIN_DEVICE_RESET
 0x08

	)

138 
	#WIN_RECAL
 0x10

	)

139 
	#WIN_RESTORE
 
WIN_RECAL


	)

143 
	#WIN_READ
 0x20

	)

144 
	#WIN_READ_ONCE
 0x21

	)

145 
	#WIN_READ_LONG
 0x22

	)

146 
	#WIN_READ_LONG_ONCE
 0x23

	)

147 
	#WIN_READ_EXT
 0x24

	)

148 
	#WIN_READDMA_EXT
 0x25

	)

149 
	#WIN_READDMA_QUEUED_EXT
 0x26

	)

150 
	#WIN_READ_NATIVE_MAX_EXT
 0x27

	)

154 
	#WIN_MULTREAD_EXT
 0x29

	)

158 
	#WIN_WRITE
 0x30

	)

159 
	#WIN_WRITE_ONCE
 0x31

	)

160 
	#WIN_WRITE_LONG
 0x32

	)

161 
	#WIN_WRITE_LONG_ONCE
 0x33

	)

162 
	#WIN_WRITE_EXT
 0x34

	)

163 
	#WIN_WRITEDMA_EXT
 0x35

	)

164 
	#WIN_WRITEDMA_QUEUED_EXT
 0x36

	)

165 
	#WIN_SET_MAX_EXT
 0x37

	)

166 
	#CFA_WRITE_SECT_WO_ERASE
 0x38

	)

167 
	#WIN_MULTWRITE_EXT
 0x39

	)

171 
	#WIN_WRITE_VERIFY
 0x3C

	)

175 
	#WIN_VERIFY
 0x40

	)

176 
	#WIN_VERIFY_ONCE
 0x41

	)

177 
	#WIN_VERIFY_EXT
 0x42

	)

181 
	#WIN_FORMAT
 0x50

	)

185 
	#WIN_INIT
 0x60

	)

189 
	#WIN_SEEK
 0x70

	)

191 
	#CFA_TRANSLATE_SECTOR
 0x87

	)

192 
	#WIN_DIAGNOSE
 0x90

	)

193 
	#WIN_SPECIFY
 0x91

	)

194 
	#WIN_DOWNLOAD_MICROCODE
 0x92

	)

195 
	#WIN_STANDBYNOW2
 0x94

	)

196 
	#WIN_STANDBY2
 0x96

	)

197 
	#WIN_SETIDLE2
 0x97

	)

198 
	#WIN_CHECKPOWERMODE2
 0x98

	)

199 
	#WIN_SLEEPNOW2
 0x99

	)

203 
	#WIN_PACKETCMD
 0xA0

	)

204 
	#WIN_PIDENTIFY
 0xA1

	)

205 
	#WIN_QUEUED_SERVICE
 0xA2

	)

206 
	#WIN_SMART
 0xB0

	)

207 
	#CFA_ERASE_SECTORS
 0xC0

	)

208 
	#WIN_MULTREAD
 0xC4

	)

209 
	#WIN_MULTWRITE
 0xC5

	)

210 
	#WIN_SETMULT
 0xC6

	)

211 
	#WIN_READDMA_QUEUED
 0xC7

	)

212 
	#WIN_READDMA
 0xC8

	)

213 
	#WIN_READDMA_ONCE
 0xC9

	)

214 
	#WIN_WRITEDMA
 0xCA

	)

215 
	#WIN_WRITEDMA_ONCE
 0xCB

	)

216 
	#WIN_WRITEDMA_QUEUED
 0xCC

	)

217 
	#CFA_WRITE_MULTI_WO_ERASE
 0xCD

	)

218 
	#WIN_GETMEDIASTATUS
 0xDA

	)

219 
	#WIN_ACKMEDIACHANGE
 0xDB

	)

220 
	#WIN_POSTBOOT
 0xDC

	)

221 
	#WIN_PREBOOT
 0xDD

	)

222 
	#WIN_DOORLOCK
 0xDE

	)

223 
	#WIN_DOORUNLOCK
 0xDF

	)

224 
	#WIN_STANDBYNOW1
 0xE0

	)

225 
	#WIN_IDLEIMMEDIATE
 0xE1

	)

226 
	#WIN_STANDBY
 0xE2

	)

227 
	#WIN_SETIDLE1
 0xE3

	)

228 
	#WIN_READ_BUFFER
 0xE4

	)

229 
	#WIN_CHECKPOWERMODE1
 0xE5

	)

230 
	#WIN_SLEEPNOW1
 0xE6

	)

231 
	#WIN_FLUSH_CACHE
 0xE7

	)

232 
	#WIN_WRITE_BUFFER
 0xE8

	)

233 
	#WIN_WRITE_SAME
 0xE9

	)

235 
	#WIN_FLUSH_CACHE_EXT
 0xEA

	)

236 
	#WIN_IDENTIFY
 0xEC

	)

237 
	#WIN_MEDIAEJECT
 0xED

	)

238 
	#WIN_IDENTIFY_DMA
 0xEE

	)

239 
	#WIN_SETFEATURES
 0xEF

	)

240 
	#EXABYTE_ENABLE_NEST
 0xF0

	)

241 
	#WIN_SECURITY_SET_PASS
 0xF1

	)

242 
	#WIN_SECURITY_UNLOCK
 0xF2

	)

243 
	#WIN_SECURITY_ERASE_PREPARE
 0xF3

	)

244 
	#WIN_SECURITY_ERASE_UNIT
 0xF4

	)

245 
	#WIN_SECURITY_FREEZE_LOCK
 0xF5

	)

246 
	#WIN_SECURITY_DISABLE
 0xF6

	)

247 
	#WIN_READ_NATIVE_MAX
 0xF8

	)

248 
	#WIN_SET_MAX
 0xF9

	)

249 
	#DISABLE_SEAGATE
 0xFB

	)

253 
	#SMART_READ_VALUES
 0xD0

	)

254 
	#SMART_READ_THRESHOLDS
 0xD1

	)

255 
	#SMART_AUTOSAVE
 0xD2

	)

256 
	#SMART_SAVE
 0xD3

	)

257 
	#SMART_IMMEDIATE_OFFLINE
 0xD4

	)

258 
	#SMART_READ_LOG_SECTOR
 0xD5

	)

259 
	#SMART_WRITE_LOG_SECTOR
 0xD6

	)

260 
	#SMART_WRITE_THRESHOLDS
 0xD7

	)

261 
	#SMART_ENABLE
 0xD8

	)

262 
	#SMART_DISABLE
 0xD9

	)

263 
	#SMART_STATUS
 0xDA

	)

264 
	#SMART_AUTO_OFFLINE
 0xDB

	)

268 
	#SMART_LCYL_PASS
 0x4F

	)

269 
	#SMART_HCYL_PASS
 0xC2

	)

272 
	#SETFEATURES_EN_8BIT
 0x01

	)

273 
	#SETFEATURES_EN_WCACHE
 0x02

	)

274 
	#SETFEATURES_DIS_DEFECT
 0x04

	)

275 
	#SETFEATURES_EN_APM
 0x05

	)

276 
	#SETFEATURES_EN_SAME_R
 0x22

	)

277 
	#SETFEATURES_DIS_MSN
 0x31

	)

278 
	#SETFEATURES_DIS_RETRY
 0x33

	)

279 
	#SETFEATURES_EN_AAM
 0x42

	)

280 
	#SETFEATURES_RW_LONG
 0x44

	)

281 
	#SETFEATURES_SET_CACHE
 0x54

	)

282 
	#SETFEATURES_DIS_RLA
 0x55

	)

283 
	#SETFEATURES_EN_RI
 0x5D

	)

284 
	#SETFEATURES_EN_SI
 0x5E

	)

285 
	#SETFEATURES_DIS_RPOD
 0x66

	)

286 
	#SETFEATURES_DIS_ECC
 0x77

	)

287 
	#SETFEATURES_DIS_8BIT
 0x81

	)

288 
	#SETFEATURES_DIS_WCACHE
 0x82

	)

289 
	#SETFEATURES_EN_DEFECT
 0x84

	)

290 
	#SETFEATURES_DIS_APM
 0x85

	)

291 
	#SETFEATURES_EN_ECC
 0x88

	)

292 
	#SETFEATURES_EN_MSN
 0x95

	)

293 
	#SETFEATURES_EN_RETRY
 0x99

	)

294 
	#SETFEATURES_EN_RLA
 0xAA

	)

295 
	#SETFEATURES_PREFETCH
 0xAB

	)

296 
	#SETFEATURES_EN_REST
 0xAC

	)

297 
	#SETFEATURES_4B_RW_LONG
 0xBB

	)

298 
	#SETFEATURES_DIS_AAM
 0xC2

	)

299 
	#SETFEATURES_EN_RPOD
 0xCC

	)

300 
	#SETFEATURES_DIS_RI
 0xDD

	)

301 
	#SETFEATURES_EN_SAME_M
 0xDD

	)

302 
	#SETFEATURES_DIS_SI
 0xDE

	)

306 
	#SECURITY_SET_PASSWORD
 0xBA

	)

307 
	#SECURITY_UNLOCK
 0xBB

	)

308 
	#SECURITY_ERASE_PREPARE
 0xBC

	)

309 
	#SECURITY_ERASE_UNIT
 0xBD

	)

310 
	#SECURITY_FREEZE_LOCK
 0xBE

	)

311 
	#SECURITY_DISABLE_PASSWORD
 0xBF

	)

313 
	shd_geomëry
 {

314 
	mhóds
;

315 
	m£˘‹s
;

316 
	mcylödîs
;

317 
	m°¨t
;

321 
	#HDIO_GETGEO
 0x0301

	)

322 
	#HDIO_GET_UNMASKINTR
 0x0302

	)

323 
	#HDIO_GET_MULTCOUNT
 0x0304

	)

324 
	#HDIO_GET_QDMA
 0x0305

	)

326 
	#HDIO_SET_XFER
 0x0306

	)

328 
	#HDIO_OBSOLETE_IDENTITY
 0x0307

	)

329 
	#HDIO_GET_KEEPSETTINGS
 0x0308

	)

330 
	#HDIO_GET_32BIT
 0x0309

	)

331 
	#HDIO_GET_NOWERR
 0x030®

	)

332 
	#HDIO_GET_DMA
 0x030b

	)

333 
	#HDIO_GET_NICE
 0x030¯

	)

334 
	#HDIO_GET_IDENTITY
 0x030d

	)

335 
	#HDIO_GET_WCACHE
 0x030ê

	)

336 
	#HDIO_GET_ACOUSTIC
 0x030‡

	)

337 
	#HDIO_GET_ADDRESS
 0x0310

	)

339 
	#HDIO_GET_BUSSTATE
 0x031®

	)

340 
	#HDIO_TRISTATE_HWIF
 0x031b

	)

341 
	#HDIO_DRIVE_RESET
 0x031¯

	)

342 
	#HDIO_DRIVE_TASKFILE
 0x031d

	)

343 
	#HDIO_DRIVE_TASK
 0x031ê

	)

344 
	#HDIO_DRIVE_CMD
 0x031‡

	)

345 
	#HDIO_DRIVE_CMD_AEB
 
HDIO_DRIVE_TASK


	)

348 
	#HDIO_SET_MULTCOUNT
 0x0321

	)

349 
	#HDIO_SET_UNMASKINTR
 0x0322

	)

350 
	#HDIO_SET_KEEPSETTINGS
 0x0323

	)

351 
	#HDIO_SET_32BIT
 0x0324

	)

352 
	#HDIO_SET_NOWERR
 0x0325

	)

353 
	#HDIO_SET_DMA
 0x0326

	)

354 
	#HDIO_SET_PIO_MODE
 0x0327

	)

355 
	#HDIO_SCAN_HWIF
 0x0328

	)

356 
	#HDIO_UNREGISTER_HWIF
 0x032®

	)

357 
	#HDIO_SET_NICE
 0x0329

	)

358 
	#HDIO_SET_WCACHE
 0x032b

	)

359 
	#HDIO_SET_ACOUSTIC
 0x032¯

	)

360 
	#HDIO_SET_BUSSTATE
 0x032d

	)

361 
	#HDIO_SET_QDMA
 0x032ê

	)

362 
	#HDIO_SET_ADDRESS
 0x032‡

	)

366 
	mBUSSTATE_OFF
 = 0,

367 
	mBUSSTATE_ON
,

368 
	mBUSSTATE_TRISTATE


377 
	#__NEW_HD_DRIVE_ID


	)

385 
	shd_driveid
 {

386 
	mc⁄fig
;

387 
	mcyls
;

388 
	mª£rved2
;

389 
	mhóds
;

390 
	måack_byãs
;

391 
	m£˘‹_byãs
;

392 
	m£˘‹s
;

393 
	mvíd‹0
;

394 
	mvíd‹1
;

395 
	mvíd‹2
;

396 
	m£rül_no
[20];

397 
	mbuf_ty≥
;

398 
	mbuf_size
;

401 
	mecc_byãs
;

402 
	mfw_ªv
[8];

403 
	mmodñ
[40];

404 
	mmax_mu…£˘
;

405 
	mvíd‹3
;

406 
	mdw‹d_io
;

407 
	mvíd‹4
;

408 
	mˇ∑bûôy
;

414 
	mª£rved50
;

415 
	mvíd‹5
;

416 
	mtPIO
;

417 
	mvíd‹6
;

418 
	mtDMA
;

419 
	mfõld_vÆid
;

424 
	mcur_cyls
;

425 
	mcur_hóds
;

426 
	mcur_£˘‹s
;

427 
	mcur_ˇ∑côy0
;

428 
	mcur_ˇ∑côy1
;

429 
	mmu…£˘
;

430 
	mmu…£˘_vÆid
;

431 
	mlba_ˇ∑côy
;

432 
	mdma_1w‹d
;

433 
	mdma_mw‹d
;

434 
	meide_pio_modes
;

435 
	meide_dma_mö
;

436 
	meide_dma_time
;

437 
	meide_pio
;

438 
	meide_pio_i‹dy
;

439 
	mw‹ds69_70
[2];

442 
	mw‹ds71_74
[4];

445 
	mqueue_dïth
;

449 
	mw‹ds76_79
[4];

450 
	mmaj‹_ªv_num
;

451 
	mmö‹_ªv_num
;

452 
	mcomm™d_£t_1
;

470 
	mcomm™d_£t_2
;

488 
	mcfs£
;

500 
	mcfs_íabÀ_1
;

519 
	mcfs_íabÀ_2
;

538 
	mcsf_deÁu…
;

550 
	mdma_u…ø
;

551 
	må£uc
;

552 
	måsEuc
;

553 
	mCurAPMvÆues
;

554 
	mm¥c
;

555 
	mhw_c⁄fig
;

573 
	macou°ic
;

577 
	mm§qs
;

578 
	msx„π
;

579 
	mßl
;

580 
	m•g
;

581 
	mlba_ˇ∑côy_2
;

582 
	mw‹ds104_125
[22];

583 
	mœ°_lun
;

584 
	mw‹d127
;

592 
	mdlf
;

604 
	mcsfo
;

612 
	mw‹ds130_155
[26];

613 
	mw‹d156
;

614 
	mw‹ds157_159
[3];

615 
	mcÁ_powî
;

622 
	mw‹ds161_175
[15];

623 
	mw‹ds176_205
[30];

624 
	mw‹ds206_254
[49];

625 
	möãgrôy_w‹d
;

636 
	#IDE_NICE_DSC_OVERLAP
 (0Ë

	)

637 
	#IDE_NICE_ATAPI_OVERLAP
 (1Ë

	)

638 
	#IDE_NICE_1
 (3Ë

	)

639 
	#IDE_NICE_0
 (2Ë

	)

640 
	#IDE_NICE_2
 (4Ë

	)

	@/usr/include/linux/kdev_t.h

1 #i‚de‡
_LINUX_KDEV_T_H


2 
	#_LINUX_KDEV_T_H


	)

8 
	#MAJOR
(
dev
Ë((dev)>>8)

	)

9 
	#MINOR
(
dev
Ë((devË& 0xff)

	)

10 
	#MKDEV
(
ma
,
mi
Ë((ma)<<8 | (mi))

	)

	@/usr/include/linux/major.h

1 #i‚de‡
_LINUX_MAJOR_H


2 
	#_LINUX_MAJOR_H


	)

9 
	#UNNAMED_MAJOR
 0

	)

10 
	#MEM_MAJOR
 1

	)

11 
	#RAMDISK_MAJOR
 1

	)

12 
	#FLOPPY_MAJOR
 2

	)

13 
	#PTY_MASTER_MAJOR
 2

	)

14 
	#IDE0_MAJOR
 3

	)

15 
	#HD_MAJOR
 
IDE0_MAJOR


	)

16 
	#PTY_SLAVE_MAJOR
 3

	)

17 
	#TTY_MAJOR
 4

	)

18 
	#TTYAUX_MAJOR
 5

	)

19 
	#LP_MAJOR
 6

	)

20 
	#VCS_MAJOR
 7

	)

21 
	#LOOP_MAJOR
 7

	)

22 
	#SCSI_DISK0_MAJOR
 8

	)

23 
	#SCSI_TAPE_MAJOR
 9

	)

24 
	#MD_MAJOR
 9

	)

25 
	#MISC_MAJOR
 10

	)

26 
	#SCSI_CDROM_MAJOR
 11

	)

27 
	#MUX_MAJOR
 11

	)

28 
	#XT_DISK_MAJOR
 13

	)

29 
	#INPUT_MAJOR
 13

	)

30 
	#SOUND_MAJOR
 14

	)

31 
	#CDU31A_CDROM_MAJOR
 15

	)

32 
	#JOYSTICK_MAJOR
 15

	)

33 
	#GOLDSTAR_CDROM_MAJOR
 16

	)

34 
	#OPTICS_CDROM_MAJOR
 17

	)

35 
	#SANYO_CDROM_MAJOR
 18

	)

36 
	#CYCLADES_MAJOR
 19

	)

37 
	#CYCLADESAUX_MAJOR
 20

	)

38 
	#MITSUMI_X_CDROM_MAJOR
 20

	)

39 
	#MFM_ACORN_MAJOR
 21

	)

40 
	#SCSI_GENERIC_MAJOR
 21

	)

41 
	#IDE1_MAJOR
 22

	)

42 
	#DIGICU_MAJOR
 22

	)

43 
	#DIGI_MAJOR
 23

	)

44 
	#MITSUMI_CDROM_MAJOR
 23

	)

45 
	#CDU535_CDROM_MAJOR
 24

	)

46 
	#STL_SERIALMAJOR
 24

	)

47 
	#MATSUSHITA_CDROM_MAJOR
 25

	)

48 
	#STL_CALLOUTMAJOR
 25

	)

49 
	#MATSUSHITA_CDROM2_MAJOR
 26

	)

50 
	#QIC117_TAPE_MAJOR
 27

	)

51 
	#MATSUSHITA_CDROM3_MAJOR
 27

	)

52 
	#MATSUSHITA_CDROM4_MAJOR
 28

	)

53 
	#STL_SIOMEMMAJOR
 28

	)

54 
	#ACSI_MAJOR
 28

	)

55 
	#AZTECH_CDROM_MAJOR
 29

	)

56 
	#FB_MAJOR
 29

	)

57 
	#CM206_CDROM_MAJOR
 32

	)

58 
	#IDE2_MAJOR
 33

	)

59 
	#IDE3_MAJOR
 34

	)

60 
	#Z8530_MAJOR
 34

	)

61 
	#XPRAM_MAJOR
 35

	)

62 
	#NETLINK_MAJOR
 36

	)

63 
	#PS2ESDI_MAJOR
 36

	)

64 
	#IDETAPE_MAJOR
 37

	)

65 
	#Z2RAM_MAJOR
 37

	)

66 
	#APBLOCK_MAJOR
 38

	)

67 
	#DDV_MAJOR
 39

	)

68 
	#NBD_MAJOR
 43

	)

69 
	#RISCOM8_NORMAL_MAJOR
 48

	)

70 
	#DAC960_MAJOR
 48

	)

71 
	#RISCOM8_CALLOUT_MAJOR
 49

	)

72 
	#MKISS_MAJOR
 55

	)

73 
	#DSP56K_MAJOR
 55

	)

75 
	#IDE4_MAJOR
 56

	)

76 
	#IDE5_MAJOR
 57

	)

78 
	#SCSI_DISK1_MAJOR
 65

	)

79 
	#SCSI_DISK2_MAJOR
 66

	)

80 
	#SCSI_DISK3_MAJOR
 67

	)

81 
	#SCSI_DISK4_MAJOR
 68

	)

82 
	#SCSI_DISK5_MAJOR
 69

	)

83 
	#SCSI_DISK6_MAJOR
 70

	)

84 
	#SCSI_DISK7_MAJOR
 71

	)

86 
	#COMPAQ_SMART2_MAJOR
 72

	)

87 
	#COMPAQ_SMART2_MAJOR1
 73

	)

88 
	#COMPAQ_SMART2_MAJOR2
 74

	)

89 
	#COMPAQ_SMART2_MAJOR3
 75

	)

90 
	#COMPAQ_SMART2_MAJOR4
 76

	)

91 
	#COMPAQ_SMART2_MAJOR5
 77

	)

92 
	#COMPAQ_SMART2_MAJOR6
 78

	)

93 
	#COMPAQ_SMART2_MAJOR7
 79

	)

95 
	#SPECIALIX_NORMAL_MAJOR
 75

	)

96 
	#SPECIALIX_CALLOUT_MAJOR
 76

	)

98 
	#AURORA_MAJOR
 79

	)

100 
	#I2O_MAJOR
 80

	)

102 
	#SHMIQ_MAJOR
 85

	)

103 
	#SCSI_CHANGER_MAJOR
 86

	)

105 
	#IDE6_MAJOR
 88

	)

106 
	#IDE7_MAJOR
 89

	)

107 
	#IDE8_MAJOR
 90

	)

108 
	#IDE9_MAJOR
 91

	)

110 
	#DASD_MAJOR
 94

	)

112 
	#MDISK_MAJOR
 95

	)

114 
	#UBD_MAJOR
 98

	)

116 
	#PP_MAJOR
 99

	)

117 
	#JSFD_MAJOR
 99

	)

119 
	#PHONE_MAJOR
 100

	)

121 
	#COMPAQ_CISS_MAJOR
 104

	)

122 
	#COMPAQ_CISS_MAJOR1
 105

	)

123 
	#COMPAQ_CISS_MAJOR2
 106

	)

124 
	#COMPAQ_CISS_MAJOR3
 107

	)

125 
	#COMPAQ_CISS_MAJOR4
 108

	)

126 
	#COMPAQ_CISS_MAJOR5
 109

	)

127 
	#COMPAQ_CISS_MAJOR6
 110

	)

128 
	#COMPAQ_CISS_MAJOR7
 111

	)

130 
	#VIODASD_MAJOR
 112

	)

131 
	#VIOCD_MAJOR
 113

	)

133 
	#ATARAID_MAJOR
 114

	)

135 
	#SCSI_DISK8_MAJOR
 128

	)

136 
	#SCSI_DISK9_MAJOR
 129

	)

137 
	#SCSI_DISK10_MAJOR
 130

	)

138 
	#SCSI_DISK11_MAJOR
 131

	)

139 
	#SCSI_DISK12_MAJOR
 132

	)

140 
	#SCSI_DISK13_MAJOR
 133

	)

141 
	#SCSI_DISK14_MAJOR
 134

	)

142 
	#SCSI_DISK15_MAJOR
 135

	)

144 
	#UNIX98_PTY_MASTER_MAJOR
 128

	)

145 
	#UNIX98_PTY_MAJOR_COUNT
 8

	)

146 
	#UNIX98_PTY_SLAVE_MAJOR
 (
UNIX98_PTY_MASTER_MAJOR
+
UNIX98_PTY_MAJOR_COUNT
)

	)

148 
	#DRBD_MAJOR
 147

	)

149 
	#RTF_MAJOR
 150

	)

150 
	#RAW_MAJOR
 162

	)

152 
	#USB_ACM_MAJOR
 166

	)

153 
	#USB_ACM_AUX_MAJOR
 167

	)

154 
	#USB_CHAR_MAJOR
 180

	)

156 
	#MMC_BLOCK_MAJOR
 179

	)

158 
	#VXVM_MAJOR
 199

	)

159 
	#VXSPEC_MAJOR
 200

	)

160 
	#VXDMP_MAJOR
 201

	)

162 
	#XENVBD_MAJOR
 202

	)

164 
	#MSR_MAJOR
 202

	)

165 
	#CPUID_MAJOR
 203

	)

167 
	#OSST_MAJOR
 206

	)

169 
	#IBM_TTY3270_MAJOR
 227

	)

170 
	#IBM_FS3270_MAJOR
 228

	)

172 
	#VIOTAPE_MAJOR
 230

	)

174 
	#BLOCK_EXT_MAJOR
 259

	)

175 
	#SCSI_OSD_MAJOR
 260

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

38 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

39 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

40 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/linux/unistd.h

1 #i‚de‡
_LINUX_UNISTD_H_


2 
	#_LINUX_UNISTD_H_


	)

7 
	~<asm/uni°d.h
>

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROW
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROW
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROW
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROW
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROW
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROW
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROW
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/scsi/scsi.h

24 #i‚de‡
_SCSI_SCSI_H


25 
	#_SCSI_SCSI_H
 1

	)

27 
	~<„©uªs.h
>

33 
	#TEST_UNIT_READY
 0x00

	)

34 
	#REZERO_UNIT
 0x01

	)

35 
	#REQUEST_SENSE
 0x03

	)

36 
	#FORMAT_UNIT
 0x04

	)

37 
	#READ_BLOCK_LIMITS
 0x05

	)

38 
	#REASSIGN_BLOCKS
 0x07

	)

39 
	#READ_6
 0x08

	)

40 
	#WRITE_6
 0x0a

	)

41 
	#SEEK_6
 0x0b

	)

42 
	#READ_REVERSE
 0x0f

	)

43 
	#WRITE_FILEMARKS
 0x10

	)

44 
	#SPACE
 0x11

	)

45 
	#INQUIRY
 0x12

	)

46 
	#RECOVER_BUFFERED_DATA
 0x14

	)

47 
	#MODE_SELECT
 0x15

	)

48 
	#RESERVE
 0x16

	)

49 
	#RELEASE
 0x17

	)

50 
	#COPY
 0x18

	)

51 
	#ERASE
 0x19

	)

52 
	#MODE_SENSE
 0x1a

	)

53 
	#START_STOP
 0x1b

	)

54 
	#RECEIVE_DIAGNOSTIC
 0x1c

	)

55 
	#SEND_DIAGNOSTIC
 0x1d

	)

56 
	#ALLOW_MEDIUM_REMOVAL
 0x1e

	)

58 
	#SET_WINDOW
 0x24

	)

59 
	#READ_CAPACITY
 0x25

	)

60 
	#READ_10
 0x28

	)

61 
	#WRITE_10
 0x2a

	)

62 
	#SEEK_10
 0x2b

	)

63 
	#WRITE_VERIFY
 0x2e

	)

64 
	#VERIFY
 0x2f

	)

65 
	#SEARCH_HIGH
 0x30

	)

66 
	#SEARCH_EQUAL
 0x31

	)

67 
	#SEARCH_LOW
 0x32

	)

68 
	#SET_LIMITS
 0x33

	)

69 
	#PRE_FETCH
 0x34

	)

70 
	#READ_POSITION
 0x34

	)

71 
	#SYNCHRONIZE_CACHE
 0x35

	)

72 
	#LOCK_UNLOCK_CACHE
 0x36

	)

73 
	#READ_DEFECT_DATA
 0x37

	)

74 
	#MEDIUM_SCAN
 0x38

	)

75 
	#COMPARE
 0x39

	)

76 
	#COPY_VERIFY
 0x3a

	)

77 
	#WRITE_BUFFER
 0x3b

	)

78 
	#READ_BUFFER
 0x3c

	)

79 
	#UPDATE_BLOCK
 0x3d

	)

80 
	#READ_LONG
 0x3e

	)

81 
	#WRITE_LONG
 0x3f

	)

82 
	#CHANGE_DEFINITION
 0x40

	)

83 
	#WRITE_SAME
 0x41

	)

84 
	#READ_TOC
 0x43

	)

85 
	#LOG_SELECT
 0x4c

	)

86 
	#LOG_SENSE
 0x4d

	)

87 
	#MODE_SELECT_10
 0x55

	)

88 
	#RESERVE_10
 0x56

	)

89 
	#RELEASE_10
 0x57

	)

90 
	#MODE_SENSE_10
 0x5a

	)

91 
	#PERSISTENT_RESERVE_IN
 0x5e

	)

92 
	#PERSISTENT_RESERVE_OUT
 0x5f

	)

93 
	#MOVE_MEDIUM
 0xa5

	)

94 
	#READ_12
 0xa8

	)

95 
	#WRITE_12
 0xØ

	)

96 
	#WRITE_VERIFY_12
 0x´

	)

97 
	#SEARCH_HIGH_12
 0xb0

	)

98 
	#SEARCH_EQUAL_12
 0xb1

	)

99 
	#SEARCH_LOW_12
 0xb2

	)

100 
	#READ_ELEMENT_STATUS
 0xb8

	)

101 
	#SEND_VOLUME_TAG
 0xb6

	)

102 
	#WRITE_LONG_2
 0xó

	)

108 
	#GOOD
 0x00

	)

109 
	#CHECK_CONDITION
 0x01

	)

110 
	#CONDITION_GOOD
 0x02

	)

111 
	#BUSY
 0x04

	)

112 
	#INTERMEDIATE_GOOD
 0x08

	)

113 
	#INTERMEDIATE_C_GOOD
 0x0a

	)

114 
	#RESERVATION_CONFLICT
 0x0c

	)

115 
	#COMMAND_TERMINATED
 0x11

	)

116 
	#QUEUE_FULL
 0x14

	)

118 
	#STATUS_MASK
 0x3e

	)

124 
	#NO_SENSE
 0x00

	)

125 
	#RECOVERED_ERROR
 0x01

	)

126 
	#NOT_READY
 0x02

	)

127 
	#MEDIUM_ERROR
 0x03

	)

128 
	#HARDWARE_ERROR
 0x04

	)

129 
	#ILLEGAL_REQUEST
 0x05

	)

130 
	#UNIT_ATTENTION
 0x06

	)

131 
	#DATA_PROTECT
 0x07

	)

132 
	#BLANK_CHECK
 0x08

	)

133 
	#COPY_ABORTED
 0x0a

	)

134 
	#ABORTED_COMMAND
 0x0b

	)

135 
	#VOLUME_OVERFLOW
 0x0d

	)

136 
	#MISCOMPARE
 0x0e

	)

143 
	#TYPE_DISK
 0x00

	)

144 
	#TYPE_TAPE
 0x01

	)

145 
	#TYPE_PROCESSOR
 0x03

	)

146 
	#TYPE_WORM
 0x04

	)

147 
	#TYPE_ROM
 0x05

	)

148 
	#TYPE_SCANNER
 0x06

	)

149 
	#TYPE_MOD
 0x07

	)

151 
	#TYPE_MEDIUM_CHANGER
 0x08

	)

152 
	#TYPE_ENCLOSURE
 0x0d

	)

153 
	#TYPE_NO_LUN
 0x7f

	)

161 
	sccs_mode£l_hód


163 
	m_r1
;

164 
	mmedium
;

165 
	m_r2
;

166 
	mblock_desc_Àngth
;

167 
	mdísôy
;

168 
	mnumbî_blocks_hi
;

170 
	mnumbî_blocks_med
;

171 
	mnumbî_blocks_lo
;

172 
	m_r3
;

173 
	mblock_Àngth_hi
;

175 
	mblock_Àngth_med
;

176 
	mblock_Àngth_lo
;

183 
	#COMMAND_COMPLETE
 0x00

	)

184 
	#EXTENDED_MESSAGE
 0x01

	)

185 
	#EXTENDED_MODIFY_DATA_POINTER
 0x00

	)

186 
	#EXTENDED_SDTR
 0x01

	)

187 
	#EXTENDED_EXTENDED_IDENTIFY
 0x02

	)

188 
	#EXTENDED_WDTR
 0x03

	)

189 
	#SAVE_POINTERS
 0x02

	)

190 
	#RESTORE_POINTERS
 0x03

	)

191 
	#DISCONNECT
 0x04

	)

192 
	#INITIATOR_ERROR
 0x05

	)

193 
	#ABORT
 0x06

	)

194 
	#MESSAGE_REJECT
 0x07

	)

195 
	#NOP
 0x08

	)

196 
	#MSG_PARITY_ERROR
 0x09

	)

197 
	#LINKED_CMD_COMPLETE
 0x0a

	)

198 
	#LINKED_FLG_CMD_COMPLETE
 0x0b

	)

199 
	#BUS_DEVICE_RESET
 0x0c

	)

201 
	#INITIATE_RECOVERY
 0x0‡

	)

202 
	#RELEASE_RECOVERY
 0x10

	)

204 
	#SIMPLE_QUEUE_TAG
 0x20

	)

205 
	#HEAD_OF_QUEUE_TAG
 0x21

	)

206 
	#ORDERED_QUEUE_TAG
 0x22

	)

213 
	#SCSI_IOCTL_GET_IDLUN
 0x5382

	)

217 
	#SCSI_IOCTL_TAGGED_ENABLE
 0x5383

	)

218 
	#SCSI_IOCTL_TAGGED_DISABLE
 0x5384

	)

221 
	#SCSI_IOCTL_PROBE_HOST
 0x5385

	)

224 
	#SCSI_IOCTL_GET_BUS_NUMBER
 0x5386

	)

	@/usr/include/scsi/scsi_ioctl.h

19 #i‚de‡
_SCSI_IOCTL_H


20 
	#_SCSI_IOCTL_H


	)

23 
	#SCSI_IOCTL_SEND_COMMAND
 1

	)

24 
	#SCSI_IOCTL_TEST_UNIT_READY
 2

	)

25 
	#SCSI_IOCTL_BENCHMARK_COMMAND
 3

	)

26 
	#SCSI_IOCTL_SYNC
 4

	)

27 
	#SCSI_IOCTL_START_UNIT
 5

	)

28 
	#SCSI_IOCTL_STOP_UNIT
 6

	)

29 
	#SCSI_IOCTL_DOORLOCK
 0x5380

	)

30 
	#SCSI_IOCTL_DOORUNLOCK
 0x5381

	)

	@/usr/include/scsi/sg.h

26 #i‚de‡
_SCSI_SG_H


27 
	#_SCSI_SG_H
 1

	)

29 
	~<„©uªs.h
>

36 
	ssg_iovec


38 * 
	miov_ba£
;

39 
size_t
 
	miov_Àn
;

40 } 
	tsg_iovec_t
;

43 
	ssg_io_hdr


45 
	möãrÁ˚_id
;

46 
	mdx„r_dúe˘i⁄
;

47 
	mcmd_Àn
;

48 
	mmx_sb_Àn
;

49 
	miovec_cou¡
;

50 
	mdx„r_Àn
;

51 * 
	mdx„Ω
;

53 * 
	mcmdp
;

54 * 
	msbp
;

55 
	mtimeout
;

56 
	mÊags
;

57 
	m∑ck_id
;

58 * 
	mu§_±r
;

59 
	m°©us
;

60 
	mmasked_°©us
;

61 
	mmsg_°©us
;

62 
	msb_Àn_wr
;

63 
	mho°_°©us
;

64 
	mdrivî_°©us
;

65 
	mªsid
;

66 
	mduøti⁄
;

67 
	möfo
;

68 } 
	tsg_io_hdr_t
;

72 
	#SG_DXFER_NONE
 -1

	)

73 
	#SG_DXFER_TO_DEV
 -2

	)

74 
	#SG_DXFER_FROM_DEV
 -3

	)

75 
	#SG_DXFER_TO_FROM_DEV
 -4

	)

82 
	#SG_FLAG_DIRECT_IO
 1

	)

83 
	#SG_FLAG_LUN_INHIBIT
 2

	)

85 
	#SG_FLAG_NO_DXFER
 0x10000

	)

89 
	#SG_INFO_OK_MASK
 0x1

	)

90 
	#SG_INFO_OK
 0x0

	)

91 
	#SG_INFO_CHECK
 0x1

	)

93 
	#SG_INFO_DIRECT_IO_MASK
 0x6

	)

94 
	#SG_INFO_INDIRECT_IO
 0x0

	)

95 
	#SG_INFO_DIRECT_IO
 0x2

	)

96 
	#SG_INFO_MIXED_IO
 0x4

	)

101 
	ssg_scsi_id
 {

103 
	mho°_no
;

104 
	mch™√l
;

106 
	mscsi_id
;

107 
	mlun
;

109 
	mscsi_ty≥
;

111 
	mh_cmd_≥r_lun
;

113 
	md_queue_dïth
;

115 
	munu£d
[2];

119 
	ssg_ªq_öfo
 {

120 
	mªq_°©e
;

121 
	m‹ph™
;

122 
	msg_io_ow√d
;

123 
	m¥obÀm
;

124 
	m∑ck_id
;

125 * 
	mu§_±r
;

126 
	mduøti⁄
;

128 
	munu£d
;

129 } 
	tsg_ªq_öfo_t
;

136 
	#SG_EMULATED_HOST
 0x2203

	)

140 
	#SG_SET_TRANSFORM
 0x2204

	)

142 
	#SG_GET_TRANSFORM
 0x2205

	)

144 
	#SG_SET_RESERVED_SIZE
 0x2275

	)

145 
	#SG_GET_RESERVED_SIZE
 0x2272

	)

148 
	#SG_GET_SCSI_ID
 0x2276

	)

152 
	#SG_SET_FORCE_LOW_DMA
 0x2279

	)

153 
	#SG_GET_LOW_DMA
 0x227®

	)

159 
	#SG_SET_FORCE_PACK_ID
 0x227b

	)

160 
	#SG_GET_PACK_ID
 0x227¯

	)

162 
	#SG_GET_NUM_WAITING
 0x227d

	)

165 
	#SG_GET_SG_TABLESIZE
 0x227F

	)

167 
	#SG_GET_VERSION_NUM
 0x2282

	)

170 
	#SG_SCSI_RESET
 0x2284

	)

172 
	#SG_SCSI_RESET_NOTHING
 0

	)

173 
	#SG_SCSI_RESET_DEVICE
 1

	)

174 
	#SG_SCSI_RESET_BUS
 2

	)

175 
	#SG_SCSI_RESET_HOST
 3

	)

178 
	#SG_IO
 0x2285

	)

180 
	#SG_GET_REQUEST_TABLE
 0x2286

	)

183 
	#SG_SET_KEEP_ORPHAN
 0x2287

	)

184 
	#SG_GET_KEEP_ORPHAN
 0x2288

	)

187 
	#SG_SCATTER_SZ
 (8 * 4096Ë

	)

195 
	#SG_DEFAULT_RETRIES
 1

	)

198 
	#SG_DEF_FORCE_LOW_DMA
 0

	)

199 
	#SG_DEF_FORCE_PACK_ID
 0

	)

200 
	#SG_DEF_KEEP_ORPHAN
 0

	)

201 
	#SG_DEF_RESERVED_SIZE
 
SG_SCATTER_SZ


	)

204 
	#SG_MAX_QUEUE
 16

	)

206 
	#SG_BIG_BUFF
 
SG_DEF_RESERVED_SIZE


	)

209 
sg_io_hdr
 
	tSg_io_hdr
;

210 
sg_io_vec
 
	tSg_io_vec
;

211 
sg_scsi_id
 
	tSg_scsi_id
;

212 
sg_ªq_öfo
 
	tSg_ªq_öfo
;

219 
	#SG_MAX_SENSE
 16

	)

221 
	ssg_hódî


224 
	m∑ck_Àn
;

226 
	mª∂y_Àn
;

228 
	m∑ck_id
;

230 
	mªsu…
;

232 
	mtwñve_byã
:1;

234 
	mèrgë_°©us
:5;

236 
	mho°_°©us
:8;

238 
	mdrivî_°©us
:8;

240 
	mŸhî_Êags
:10;

245 
	m£n£_buf„r
[
SG_MAX_SENSE
];

253 
	#SG_SET_TIMEOUT
 0x2201

	)

254 
	#SG_GET_TIMEOUT
 0x2202

	)

257 
	#SG_GET_COMMAND_Q
 0x2270

	)

258 
	#SG_SET_COMMAND_Q
 0x2271

	)

262 
	#SG_SET_DEBUG
 0x227ê

	)

264 
	#SG_NEXT_CMD_LEN
 0x2283

	)

269 
	#SG_DEFAULT_TIMEOUT
 (60*
HZ
Ë

	)

270 
	#SG_DEF_COMMAND_Q
 0

	)

272 
	#SG_DEF_UNDERRUN_FLAG
 0

	)

	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


148 
	#P_tmpdú
 "/tmp"

	)

161 
	~<bôs/°dio_lim.h
>

165 
_IO_FILE
 *
°dö
;

166 
_IO_FILE
 *
°dout
;

167 
_IO_FILE
 *
°dîr
;

168 #ifde‡
__STDC__


170 
	#°dö
 
°dö


	)

171 
	#°dout
 
°dout


	)

172 
	#°dîr
 
°dîr


	)

175 
__BEGIN_NAMESPACE_STD


177 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

179 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

180 
__END_NAMESPACE_STD


182 #ifde‡
__USE_ATFILE


184 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

185 
__c⁄°
 *
__√w
Ë
__THROW
;

188 
__BEGIN_NAMESPACE_STD


193 #i‚de‡
__USE_FILE_OFFSET64


194 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

196 #ifde‡
__REDIRECT


197 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

199 
	#tmpfûe
 
tmpfûe64


	)

203 #ifde‡
__USE_LARGEFILE64


204 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

208 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

209 
__END_NAMESPACE_STD


211 #ifde‡
__USE_MISC


214 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

218 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


226 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

227 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

231 
__BEGIN_NAMESPACE_STD


236 
	`f˛o£
 (
FILE
 *
__°ªam
);

241 
	`fÊush
 (
FILE
 *
__°ªam
);

242 
__END_NAMESPACE_STD


244 #ifde‡
__USE_MISC


251 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

254 #ifde‡
__USE_GNU


261 
	`f˛o£Æl
 ();

265 
__BEGIN_NAMESPACE_STD


266 #i‚de‡
__USE_FILE_OFFSET64


271 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

272 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

277 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

278 
__c⁄°
 *
__ª°ri˘
 
__modes
,

279 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

281 #ifde‡
__REDIRECT


282 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

283 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

284 
__wur
;

285 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

286 
__c⁄°
 *
__ª°ri˘
 
__modes
,

287 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

288 
__wur
;

290 
	#f›í
 
f›í64


	)

291 
	#‰e›í
 
‰e›í64


	)

294 
__END_NAMESPACE_STD


295 #ifde‡
__USE_LARGEFILE64


296 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

297 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

298 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
,

300 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

303 #ifdef 
__USE_POSIX


305 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

308 #ifdef 
__USE_GNU


311 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

312 
__c⁄°
 *
__ª°ri˘
 
__modes
,

313 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

316 #ifde‡
__USE_XOPEN2K8


318 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

319 
__THROW
 
__wur
;

324 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

328 
__BEGIN_NAMESPACE_STD


331 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

335 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

336 
__modes
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifdef 
__USE_BSD


342 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

343 
size_t
 
__size
Ë
__THROW
;

346 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

350 
__BEGIN_NAMESPACE_STD


355 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

356 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

361 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	$•rötf
 (*
__ª°ri˘
 
__s
,

364 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

370 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

371 
_G_va_li°
 
__¨g
);

376 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

378 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

379 
_G_va_li°
 
__¨g
Ë
__THROW
;

380 
__END_NAMESPACE_STD


382 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


383 
__BEGIN_NAMESPACE_C99


385 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

386 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

387 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

389 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

390 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

391 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

392 
__END_NAMESPACE_C99


395 #ifde‡
__USE_GNU


398 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

399 
_G_va_li°
 
__¨g
)

400 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

401 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

402 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

403 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

404 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

405 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

406 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

409 #ifde‡
__USE_XOPEN2K8


416 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

417 
_G_va_li°
 
__¨g
)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

419 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

424 
__BEGIN_NAMESPACE_STD


429 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

430 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

438 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

440 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

441 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

442 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

443 #ifde‡
__REDIRECT


447 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

448 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_fsˇnf
Ë
__wur
;

450 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_sˇnf
Ë
__wur
;

452 
	`__REDIRECT
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

453 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

454 
__isoc99_ssˇnf
Ë
__THROW
;

456 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

457 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

458 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

459 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

460 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

461 
	#fsˇnf
 
__isoc99_fsˇnf


	)

462 
	#sˇnf
 
__isoc99_sˇnf


	)

463 
	#ssˇnf
 
__isoc99_ssˇnf


	)

467 
__END_NAMESPACE_STD


469 #ifdef 
__USE_ISOC99


470 
__BEGIN_NAMESPACE_C99


475 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

476 
_G_va_li°
 
__¨g
)

477 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

483 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

484 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

487 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

488 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

489 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

491 #i‡!
deföed
 
__USE_GNU
 \

492 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

493 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

494 #ifde‡
__REDIRECT


498 
	`__REDIRECT
 (
vfsˇnf
,

499 (
FILE
 *
__ª°ri˘
 
__s
,

500 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

501 
__isoc99_vfsˇnf
)

502 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

503 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

504 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

505 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

506 
	`__REDIRECT
 (
vssˇnf
,

507 (
__c⁄°
 *
__ª°ri˘
 
__s
,

508 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

509 
__isoc99_vssˇnf
)

510 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

512 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

513 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

518 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

519 
_G_va_li°
 
__¨g
Ë
__THROW
;

520 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

521 
	#vsˇnf
 
__isoc99_vsˇnf


	)

522 
	#vssˇnf
 
__isoc99_vssˇnf


	)

526 
__END_NAMESPACE_C99


530 
__BEGIN_NAMESPACE_STD


535 
	`fgëc
 (
FILE
 *
__°ªam
);

536 
	`gëc
 (
FILE
 *
__°ªam
);

542 
	`gëch¨
 ();

543 
__END_NAMESPACE_STD


547 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

549 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


554 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

555 
	`gëch¨_u∆ocked
 ();

558 #ifde‡
__USE_MISC


565 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

569 
__BEGIN_NAMESPACE_STD


577 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

578 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

584 
	`putch¨
 (
__c
);

585 
__END_NAMESPACE_STD


589 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

591 #ifde‡
__USE_MISC


598 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

601 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


606 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

607 
	`putch¨_u∆ocked
 (
__c
);

611 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

612 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

614 
	`gëw
 (
FILE
 *
__°ªam
);

617 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

621 
__BEGIN_NAMESPACE_STD


626 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

627 
__wur
;

634 *
	$gës
 (*
__s
Ë
__wur
;

635 
__END_NAMESPACE_STD


637 #ifde‡
__USE_GNU


644 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

645 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

649 #ifdef 
__USE_XOPEN2K8


660 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

661 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

662 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

663 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

664 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

665 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

673 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

674 
size_t
 *
__ª°ri˘
 
__n
,

675 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

679 
__BEGIN_NAMESPACE_STD


684 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

690 
	`puts
 (
__c⁄°
 *
__s
);

697 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

704 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

705 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

710 
size_t
 
	$fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

711 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
Ë
__wur
;

712 
__END_NAMESPACE_STD


714 #ifde‡
__USE_GNU


721 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

722 
FILE
 *
__ª°ri˘
 
__°ªam
);

725 #ifde‡
__USE_MISC


732 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

733 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

734 
size_t
 
	$fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
__BEGIN_NAMESPACE_STD


744 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

749 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

754 
	`ªwöd
 (
FILE
 *
__°ªam
);

755 
__END_NAMESPACE_STD


762 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


763 #i‚de‡
__USE_FILE_OFFSET64


768 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

773 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

775 #ifde‡
__REDIRECT


776 
	`__REDIRECT
 (
f£eko
,

777 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

778 
f£eko64
);

779 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

781 
	#f£eko
 
f£eko64


	)

782 
	#·ñlo
 
·ñlo64


	)

787 
__BEGIN_NAMESPACE_STD


788 #i‚de‡
__USE_FILE_OFFSET64


793 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

798 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

800 #ifde‡
__REDIRECT


801 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

802 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

803 
	`__REDIRECT
 (
f£ços
,

804 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

806 
	#fgëpos
 
fgëpos64


	)

807 
	#f£ços
 
f£ços64


	)

810 
__END_NAMESPACE_STD


812 #ifde‡
__USE_LARGEFILE64


813 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

814 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

815 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

816 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

819 
__BEGIN_NAMESPACE_STD


821 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

823 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

825 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

826 
__END_NAMESPACE_STD


828 #ifde‡
__USE_MISC


830 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

831 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

832 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

836 
__BEGIN_NAMESPACE_STD


841 
	`≥º‹
 (
__c⁄°
 *
__s
);

842 
__END_NAMESPACE_STD


848 
	~<bôs/sys_îæi°.h
>

851 #ifdef 
__USE_POSIX


853 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

856 #ifde‡
__USE_MISC


858 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

862 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

863 
deföed
 
__USE_MISC
)

868 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

874 
	`p˛o£
 (
FILE
 *
__°ªam
);

878 #ifdef 
__USE_POSIX


880 *
	$˘îmid
 (*
__s
Ë
__THROW
;

884 #ifde‡
__USE_XOPEN


886 *
	`cu£rid
 (*
__s
);

890 #ifdef 
__USE_GNU


891 
ob°ack
;

894 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

895 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

896 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

897 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

898 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

899 
_G_va_li°
 
__¨gs
)

900 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

904 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


908 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

912 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

915 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

918 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


922 
	#__√ed_gë›t


	)

923 
	~<gë›t.h
>

928 #ifde‡
__USE_EXTERN_INLINES


929 
	~<bôs/°dio.h
>

931 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


932 
	~<bôs/°dio2.h
>

934 #ifde‡
__LDBL_COMPAT


935 
	~<bôs/°dio-ldbl.h
>

938 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/sys/file.h

19 #i‚def 
_SYS_FILE_H


20 
	#_SYS_FILE_H
 1

	)

22 
	~<„©uªs.h
>

24 #i‚def 
_FCNTL_H


25 
	~<f˙é.h
>

28 
	g__BEGIN_DECLS


33 #i‚de‡
L_SET


34 
	#L_SET
 0

	)

35 
	#L_INCR
 1

	)

36 
	#L_XTND
 2

	)

41 
	#LOCK_SH
 1

	)

42 
	#LOCK_EX
 2

	)

43 
	#LOCK_UN
 8

	)

46 
	#LOCK_NB
 4

	)

51 
	$Êock
 (
__fd
, 
__›î©i⁄
Ë
__THROW
;

54 
__END_DECLS


	@/usr/include/sys/ioctl.h

19 #i‚def 
_SYS_IOCTL_H


20 
	#_SYS_IOCTL_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


27 
	~<bôs/io˘ls.h
>

30 
	~<bôs/io˘l-ty≥s.h
>

37 
	~<sys/âydeÁu…s.h
>

42 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

44 
__END_DECLS


	@/usr/include/sys/mman.h

20 #i‚def 
_SYS_MMAN_H


21 
	#_SYS_MMAN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<bôs/ty≥s.h
>

25 
	#__√ed_size_t


	)

26 
	~<°ddef.h
>

28 #i‚de‡
__off_t_deföed


29 #i‚de‡
__USE_FILE_OFFSET64


30 
__off_t
 
	toff_t
;

32 
__off64_t
 
	toff_t
;

34 
	#__off_t_deföed


	)

37 #i‚de‡
__mode_t_deföed


38 
__mode_t
 
	tmode_t
;

39 
	#__mode_t_deföed


	)

42 
	~<bôs/mm™.h
>

45 
	#MAP_FAILED
 ((*Ë-1)

	)

47 
	g__BEGIN_DECLS


57 #i‚de‡
__USE_FILE_OFFSET64


58 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

59 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

61 #ifde‡
__REDIRECT_NTH


62 * 
	`__REDIRECT_NTH
 (
mm≠
,

63 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

64 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

65 
mm≠64
);

67 
	#mm≠
 
mm≠64


	)

70 #ifde‡
__USE_LARGEFILE64


71 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

72 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

77 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

82 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

90 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

92 #ifde‡
__USE_BSD


95 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

97 #ifde‡
__USE_XOPEN2K


99 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

104 
	$mlock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

107 
	$mu∆ock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

112 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

116 
	$mu∆ockÆl
 (Ë
__THROW
;

118 #ifde‡
__USE_MISC


124 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

125 
__THROW
;

128 #ifde‡
__USE_GNU


134 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

135 
__Êags
, ...Ë
__THROW
;

139 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

140 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

145 
	`shm_›í
 (
__c⁄°
 *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

148 
	`shm_u∆ök
 (
__c⁄°
 *
__«me
);

150 
__END_DECLS


	@/usr/include/sys/param.h

19 #i‚de‡
_SYS_PARAM_H


20 
	#_SYS_PARAM_H
 1

	)

22 #i‚de‡
ARG_MAX


23 
	#__undef_ARG_MAX


	)

26 
	~<limôs.h
>

27 
	~<löux/limôs.h
>

28 
	~<löux/∑øm.h
>

31 #i‚de‡
__undef_ARG_MAX


32 #unde‡
ARG_MAX


33 #unde‡
__undef_ARG_MAX


38 
	#NBBY
 
CHAR_BIT


	)

39 #i‚def 
NGROUPS


40 
	#NGROUPS
 
NGROUPS_MAX


	)

42 
	#MAXSYMLINKS
 20

	)

43 
	#CANBSIZ
 
MAX_CANON


	)

44 
	#MAXPATHLEN
 
PATH_MAX


	)

48 
	#NOFILE
 256

	)

49 
	#NCARGS
 131072

	)

52 
	~<sys/ty≥s.h
>

55 
	#£tbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] |1<<((i)%NBBY))

	)

56 
	#˛rbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

57 
	#is£t
(
a
,
i
Ë(◊)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

58 
	#is˛r
(
a
,
i
Ë((◊)[(i)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

61 #i‚de‡
howm™y


62 
	#howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

64 #ifde‡
__GNUC__


65 
	#roundup
(
x
, 
y
Ë(
	`__buûtö_c⁄°™t_p
 (yË&& 
	`powîof2
 (y) \

66 ? (((
x
Ë+ (
y
) - 1) & ~((y) - 1)) \

67 : ((((
x
Ë+ ((
y
Ë- 1)Ë/ (y)Ë* (y)))

	)

69 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

71 
	#powîof2
(
x
Ë((((xË- 1Ë& (x)Ë=0)

	)

74 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

75 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

79 
	#DEV_BSIZE
 512

	)

	@/usr/include/sys/stat.h

24 #i‚def 
_SYS_STAT_H


25 
	#_SYS_STAT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	~<bôs/ty≥s.h
>

31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

32 || 
deföed
 
	g__USE_ATFILE


33 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_time_t


	)

36 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


37 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


45 #i‚de‡
__dev_t_deföed


46 
__dev_t
 
	tdev_t
;

47 
	#__dev_t_deföed


	)

50 #i‚de‡
__gid_t_deföed


51 
__gid_t
 
	tgid_t
;

52 
	#__gid_t_deföed


	)

55 #i‚de‡
__öo_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__öo_t
 
	töo_t
;

59 
__öo64_t
 
	töo_t
;

61 
	#__öo_t_deföed


	)

64 #i‚de‡
__mode_t_deföed


65 
__mode_t
 
	tmode_t
;

66 
	#__mode_t_deföed


	)

69 #i‚de‡
__∆ök_t_deföed


70 
__∆ök_t
 
	t∆ök_t
;

71 
	#__∆ök_t_deföed


	)

74 #i‚de‡
__off_t_deföed


75 #i‚de‡
__USE_FILE_OFFSET64


76 
__off_t
 
	toff_t
;

78 
__off64_t
 
	toff_t
;

80 
	#__off_t_deföed


	)

83 #i‚de‡
__uid_t_deföed


84 
__uid_t
 
	tuid_t
;

85 
	#__uid_t_deföed


	)

89 #ifde‡
__USE_UNIX98


90 #i‚de‡
__blk˙t_t_deföed


91 #i‚de‡
__USE_FILE_OFFSET64


92 
__blk˙t_t
 
	tblk˙t_t
;

94 
__blk˙t64_t
 
	tblk˙t_t
;

96 
	#__blk˙t_t_deföed


	)

99 #i‚de‡
__blksize_t_deföed


100 
__blksize_t
 
	tblksize_t
;

101 
	#__blksize_t_deföed


	)

105 
	g__BEGIN_DECLS


107 
	~<bôs/°©.h
>

109 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


110 
	#S_IFMT
 
__S_IFMT


	)

111 
	#S_IFDIR
 
__S_IFDIR


	)

112 
	#S_IFCHR
 
__S_IFCHR


	)

113 
	#S_IFBLK
 
__S_IFBLK


	)

114 
	#S_IFREG
 
__S_IFREG


	)

115 #ifde‡
__S_IFIFO


116 
	#S_IFIFO
 
__S_IFIFO


	)

118 #ifde‡
__S_IFLNK


119 
	#S_IFLNK
 
__S_IFLNK


	)

121 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

122 && 
deföed
 
	g__S_IFSOCK


123 
	#S_IFSOCK
 
__S_IFSOCK


	)

129 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

131 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

132 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

133 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

134 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

135 #ifde‡
__S_IFIFO


136 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

138 #ifde‡
__S_IFLNK


139 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

142 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


143 
	#S_ISLNK
(
mode
Ë0

	)

146 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

147 && 
deföed
 
	g__S_IFSOCK


148 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

149 #ñi‡
deföed
 
__USE_XOPEN2K


150 
	#S_ISSOCK
(
mode
Ë0

	)

157 #ifdef 
__USE_POSIX199309


158 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

159 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

160 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

166 
	#S_ISUID
 
__S_ISUID


	)

167 
	#S_ISGID
 
__S_ISGID


	)

169 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


171 
	#S_ISVTX
 
__S_ISVTX


	)

174 
	#S_IRUSR
 
__S_IREAD


	)

175 
	#S_IWUSR
 
__S_IWRITE


	)

176 
	#S_IXUSR
 
__S_IEXEC


	)

178 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

180 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


181 
	#S_IREAD
 
S_IRUSR


	)

182 
	#S_IWRITE
 
S_IWUSR


	)

183 
	#S_IEXEC
 
S_IXUSR


	)

186 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

187 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

188 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

190 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

192 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

193 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

194 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

196 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

199 #ifdef 
__USE_BSD


201 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

202 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

203 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

205 
	#S_BLKSIZE
 512

	)

209 #i‚de‡
__USE_FILE_OFFSET64


211 
	$°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

212 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

216 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

218 #ifde‡
__REDIRECT_NTH


219 
	`__REDIRECT_NTH
 (
°©
, (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

220 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

221 
	`__n⁄nuŒ
 ((1, 2));

222 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

223 
	`__n⁄nuŒ
 ((2));

225 
	#°©
 
°©64


	)

226 
	#f°©
 
f°©64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	$°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

231 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

232 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

235 #ifde‡
__USE_ATFILE


239 #i‚de‡
__USE_FILE_OFFSET64


240 
	$f°©©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

241 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

242 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

244 #ifde‡
__REDIRECT_NTH


245 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

246 
°©
 *
__ª°ri˘
 
__buf
,

247 
__Êag
),

248 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

250 
	#f°©©
 
f°©©64


	)

254 #ifde‡
__USE_LARGEFILE64


255 
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

256 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

257 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

261 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


262 #i‚de‡
__USE_FILE_OFFSET64


265 
	$l°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

266 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

268 #ifde‡
__REDIRECT_NTH


269 
	`__REDIRECT_NTH
 (
l°©
,

270 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

271 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

272 
	`__n⁄nuŒ
 ((1, 2));

274 
	#l°©
 
l°©64


	)

277 #ifde‡
__USE_LARGEFILE64


278 
	$l°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

279 
°©64
 *
__ª°ri˘
 
__buf
)

280 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

286 
	$chmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_BSD


293 
	$lchmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

298 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


299 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

302 #ifde‡
__USE_ATFILE


305 
	$fchmod©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
,

306 
__Êag
)

307 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

314 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

316 #ifdef 
__USE_GNU


319 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

323 
	$mkdú
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

326 #ifde‡
__USE_ATFILE


330 
	$mkdú©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

331 
__THROW
 
	`__n⁄nuŒ
 ((2));

337 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


338 
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1));

341 #ifde‡
__USE_ATFILE


345 
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

346 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

352 
	$mkfifo
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 #ifde‡
__USE_ATFILE


359 
	$mkfifﬂt
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

360 
__THROW
 
	`__n⁄nuŒ
 ((2));

363 #ifde‡
__USE_ATFILE


366 
	$utimíßt
 (
__fd
, 
__c⁄°
 *
__∑th
,

367 
__c⁄°
 
time•ec
 
__times
[2],

368 
__Êags
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2));

372 #ifde‡
__USE_XOPEN2K8


374 
	$futimís
 (
__fd
, 
__c⁄°
 
time•ec
 
__times
[2]Ë
__THROW
;

392 #i‚de‡
_STAT_VER


393 
	#_STAT_VER
 0

	)

395 #i‚de‡
_MKNOD_VER


396 
	#_MKNOD_VER
 0

	)

400 #i‚de‡
__USE_FILE_OFFSET64


401 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

402 
__THROW
 
	`__n⁄nuŒ
 ((3));

403 
	$__x°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

404 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

405 
	$__lx°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

406 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

407 
	$__fx°©©
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

408 
°©
 *
__°©_buf
, 
__Êag
)

409 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

411 #ifde‡
__REDIRECT_NTH


412 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

413 
°©
 *
__°©_buf
), 
__fx°©64
)

414 
	`__n⁄nuŒ
 ((3));

415 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

416 
°©
 *
__°©_buf
), 
__x°©64
)

417 
	`__n⁄nuŒ
 ((2, 3));

418 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

419 
°©
 *
__°©_buf
), 
__lx°©64
)

420 
	`__n⁄nuŒ
 ((2, 3));

421 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

422 
__c⁄°
 *
__fûíame
,

423 
°©
 *
__°©_buf
, 
__Êag
),

424 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

427 
	#__fx°©
 
__fx°©64


	)

428 
	#__x°©
 
__x°©64


	)

429 
	#__lx°©
 
__lx°©64


	)

433 #ifde‡
__USE_LARGEFILE64


434 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

435 
__THROW
 
	`__n⁄nuŒ
 ((3));

436 
	$__x°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

437 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

438 
	$__lx°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

439 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

440 
	$__fx°©©64
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

441 
°©64
 *
__°©_buf
, 
__Êag
)

442 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

444 
	$__xmknod
 (
__vî
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

445 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

447 
	$__xmknod©
 (
__vî
, 
__fd
, 
__c⁄°
 *
__∑th
,

448 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

449 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

451 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


454 
__exã∫_ölöe
 

455 
	`__NTH
 (
	$°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

457  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

458 
	}
}

460 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


461 
__exã∫_ölöe
 

462 
__NTH
 (
	$l°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

464  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

465 
	}
}

468 
__exã∫_ölöe
 

469 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

471  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

472 
	}
}

474 #ifde‡
__USE_ATFILE


475 
__exã∫_ölöe
 

476 
__NTH
 (
	$f°©©
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©
 *
__°©buf
,

477 
__Êag
))

479  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

480 
	}
}

483 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


484 
__exã∫_ölöe
 

485 
__NTH
 (
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

487  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

488 
	}
}

491 #ifde‡
__USE_ATFILE


492 
__exã∫_ölöe
 

493 
__NTH
 (
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

494 
__dev_t
 
__dev
))

496  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

497 
	}
}

500 #i‡
deföed
 
__USE_LARGEFILE64
 \

501 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

502 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

503 
__exã∫_ölöe
 

504 
__NTH
 (
	$°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

506  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

507 
	}
}

509 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


510 
__exã∫_ölöe
 

511 
__NTH
 (
	$l°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

513  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

514 
	}
}

517 
__exã∫_ölöe
 

518 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

520  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

521 
	}
}

523 #ifde‡
__USE_ATFILE


524 
__exã∫_ölöe
 

525 
__NTH
 (
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©64
 *
__°©buf
,

526 
__Êag
))

528  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

529 
	}
}

536 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/time.h

20 #i‚de‡
_SYS_TIME_H


21 
	#_SYS_TIME_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

26 
	#__√ed_time_t


	)

27 
	~<time.h
>

28 
	#__√ed_timevÆ


	)

29 
	~<bôs/time.h
>

31 
	~<sys/£À˘.h
>

33 #i‚de‡
__su£c⁄ds_t_deföed


34 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

35 
	#__su£c⁄ds_t_deföed


	)

39 
	g__BEGIN_DECLS


41 #ifde‡
__USE_GNU


43 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

44 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

45 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

46 }

	)

47 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

48 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

50 }

	)

54 #ifde‡
__USE_BSD


57 
	stimez⁄e


59 
	mtz_möuãswe°
;

60 
	mtz_d°time
;

63 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

65 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

73 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

74 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__USE_BSD


79 
	$£âimeofday
 (
__c⁄°
 
timevÆ
 *
__tv
,

80 
__c⁄°
 
timez⁄e
 *
__tz
)

81 
__THROW
 
	`__n⁄nuŒ
 ((1));

87 
	$adjtime
 (
__c⁄°
 
timevÆ
 *
__dñè
,

88 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

93 
	e__ôimî_which


96 
ITIMER_REAL
 = 0,

97 
	#ITIMER_REAL
 
ITIMER_REAL


	)

99 
ITIMER_VIRTUAL
 = 1,

100 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

103 
ITIMER_PROF
 = 2

104 
	#ITIMER_PROF
 
ITIMER_PROF


	)

109 
	sôimîvÆ


112 
timevÆ
 
ô_öãrvÆ
;

114 
timevÆ
 
ô_vÆue
;

117 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


120 
__ôimî_which
 
	t__ôimî_which_t
;

122 
	t__ôimî_which_t
;

127 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

128 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

133 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

134 
__c⁄°
 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

135 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

140 
	$utimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #ifde‡
__USE_BSD


145 
	$lutimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

149 
	$futimes
 (
__fd
, 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

152 #ifde‡
__USE_GNU


156 
	$futimeßt
 (
__fd
, 
__c⁄°
 *
__fûe
,

157 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

161 #ifde‡
__USE_BSD


164 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

166 
	#timîcmp
(
a
, 
b
, 
CMP
) \

167 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

168 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

169 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

170 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

172 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

173 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

174 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

176 ++(
ªsu…
)->
tv_£c
; \

177 (
ªsu…
)->
tv_u£c
 -= 1000000; \

179 
	}
} 0)

	)

180 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

182 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

183 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

184 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

185 --(
ªsu…
)->
tv_£c
; \

186 (
ªsu…
)->
tv_u£c
 += 1000000; \

188 } 0)

	)

191 
	g__END_DECLS


	@/usr/include/sys/types.h

23 #i‚def 
_SYS_TYPES_H


24 
	#_SYS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifdef 
__USE_BSD


33 #i‚de‡
__u_ch¨_deföed


34 
__u_ch¨
 
	tu_ch¨
;

35 
__u_sh‹t
 
	tu_sh‹t
;

36 
__u_öt
 
	tu_öt
;

37 
__u_l⁄g
 
	tu_l⁄g
;

38 
__quad_t
 
	tquad_t
;

39 
__u_quad_t
 
	tu_quad_t
;

40 
__fsid_t
 
	tfsid_t
;

41 
	#__u_ch¨_deföed


	)

45 
__loff_t
 
	tloff_t
;

47 #i‚de‡
__öo_t_deföed


48 #i‚de‡
__USE_FILE_OFFSET64


49 
__öo_t
 
	töo_t
;

51 
__öo64_t
 
	töo_t
;

53 
	#__öo_t_deföed


	)

55 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


56 
__öo64_t
 
	töo64_t
;

57 
	#__öo64_t_deföed


	)

60 #i‚de‡
__dev_t_deföed


61 
__dev_t
 
	tdev_t
;

62 
	#__dev_t_deföed


	)

65 #i‚de‡
__gid_t_deföed


66 
__gid_t
 
	tgid_t
;

67 
	#__gid_t_deföed


	)

70 #i‚de‡
__mode_t_deföed


71 
__mode_t
 
	tmode_t
;

72 
	#__mode_t_deföed


	)

75 #i‚de‡
__∆ök_t_deföed


76 
__∆ök_t
 
	t∆ök_t
;

77 
	#__∆ök_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

85 #i‚de‡
__off_t_deföed


86 #i‚de‡
__USE_FILE_OFFSET64


87 
__off_t
 
	toff_t
;

89 
__off64_t
 
	toff_t
;

91 
	#__off_t_deföed


	)

93 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


94 
__off64_t
 
	toff64_t
;

95 
	#__off64_t_deföed


	)

98 #i‚de‡
__pid_t_deföed


99 
__pid_t
 
	tpid_t
;

100 
	#__pid_t_deföed


	)

103 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

104 && !
deföed
 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

228 && !
deföed
 
__blksize_t_deföed


229 
__blksize_t
 
	tblksize_t
;

230 
	#__blksize_t_deföed


	)

234 #i‚de‡
__USE_FILE_OFFSET64


235 #i‚de‡
__blk˙t_t_deföed


236 
__blk˙t_t
 
	tblk˙t_t
;

237 
	#__blk˙t_t_deföed


	)

239 #i‚de‡
__fsblk˙t_t_deföed


240 
__fsblk˙t_t
 
	tfsblk˙t_t
;

241 
	#__fsblk˙t_t_deföed


	)

243 #i‚de‡
__fsfû˙t_t_deföed


244 
__fsfû˙t_t
 
	tfsfû˙t_t
;

245 
	#__fsfû˙t_t_deföed


	)

248 #i‚de‡
__blk˙t_t_deföed


249 
__blk˙t64_t
 
	tblk˙t_t
;

250 
	#__blk˙t_t_deföed


	)

252 #i‚de‡
__fsblk˙t_t_deföed


253 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

254 
	#__fsblk˙t_t_deföed


	)

256 #i‚de‡
__fsfû˙t_t_deföed


257 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

258 
	#__fsfû˙t_t_deföed


	)

262 #ifde‡
__USE_LARGEFILE64


263 
__blk˙t64_t
 
	tblk˙t64_t
;

264 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

265 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

270 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


271 
	~<bôs/±hªadty≥s.h
>

274 
	g__END_DECLS


	@/usr/include/syscall.h

1 
	~<sys/sysˇŒ.h
>

	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

317 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


319 
	#L_SET
 
SEEK_SET


	)

320 
	#L_INCR
 
SEEK_CUR


	)

321 
	#L_XTND
 
SEEK_END


	)

330 #i‚de‡
__USE_FILE_OFFSET64


331 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

333 #ifde‡
__REDIRECT_NTH


334 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

335 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

336 
l£ek64
);

338 
	#l£ek
 
l£ek64


	)

341 #ifde‡
__USE_LARGEFILE64


342 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

343 
__THROW
;

350 
	`˛o£
 (
__fd
);

357 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

363 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

365 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


366 #i‚de‡
__USE_FILE_OFFSET64


373 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

374 
__off_t
 
__off£t
Ë
__wur
;

381 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

382 
__off_t
 
__off£t
Ë
__wur
;

384 #ifde‡
__REDIRECT


385 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

386 
__off64_t
 
__off£t
),

387 
¥ód64
Ë
__wur
;

388 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

389 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

390 
pwrôe64
Ë
__wur
;

392 
	#¥ód
 
¥ód64


	)

393 
	#pwrôe
 
pwrôe64


	)

397 #ifde‡
__USE_LARGEFILE64


401 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

402 
__off64_t
 
__off£t
Ë
__wur
;

405 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

406 
__off64_t
 
__off£t
Ë
__wur
;

414 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

416 #ifde‡
__USE_GNU


419 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

429 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

441 
	`¶ìp
 (
__£c⁄ds
);

443 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

444 || 
deföed
 
__USE_BSD


449 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

450 
__THROW
;

457 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

466 
	`∑u£
 ();

470 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

471 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

473 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


475 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

480 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

481 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

485 #ifde‡
__USE_ATFILE


488 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

489 
__gid_t
 
__group
, 
__Êag
)

490 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

494 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

496 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


498 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

508 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

510 #ifdef 
__USE_GNU


514 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

517 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

518 || 
deföed
 
__USE_BSD


522 *
	$gëwd
 (*
__buf
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

528 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

531 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

533 #ifde‡
__USE_GNU


536 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

540 **
__ívú⁄
;

541 #ifde‡
__USE_GNU


542 **
ívú⁄
;

548 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

549 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

551 #ifde‡
__USE_XOPEN2K8


554 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

555 
__THROW
 
	`__n⁄nuŒ
 ((2));

560 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

565 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

570 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifde‡
__USE_GNU


587 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

588 *
__c⁄°
 
__ívp
[])

589 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

593 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


595 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

600 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

606 
	~<bôs/c⁄‚ame.h
>

609 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

610 
__THROW
 
	`__n⁄nuŒ
 ((1));

613 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

616 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

618 #ifdef 
__USE_POSIX2


620 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

625 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

628 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

632 #i‚de‡
__FAVOR_BSD


633 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

635 #ifde‡
__REDIRECT_NTH


636 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

638 
	#gëpgΩ
 
__gëpgid


	)

643 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

644 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


645 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

652 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

654 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


665 #i‚de‡
__FAVOR_BSD


669 
	$£çgΩ
 (Ë
__THROW
;

674 #ifde‡
__REDIRECT_NTH


675 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

677 
	#£çgΩ
 
£çgid


	)

686 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

688 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


690 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

694 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

697 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

700 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

708 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

710 #ifdef 
__USE_GNU


712 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

719 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

721 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


724 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

727 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


729 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

736 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

738 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


741 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

744 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


746 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

749 #ifde‡
__USE_GNU


752 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

753 
__THROW
;

757 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

758 
__THROW
;

762 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

763 
__THROW
;

767 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

768 
__THROW
;

775 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

777 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

778 || 
deföed
 
__USE_BSD


783 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

789 *
	$ây«me
 (
__fd
Ë
__THROW
;

793 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

794 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

798 
	$ißây
 (
__fd
Ë
__THROW
;

800 #i‡
deföed
 
__USE_BSD
 \

801 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

804 
	$ây¶Ÿ
 (Ë
__THROW
;

809 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 #ifde‡
__USE_ATFILE


815 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

816 
__c⁄°
 *
__to
, 
__Êags
)

817 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

820 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


822 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

823 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

828 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

829 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

830 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

833 #ifde‡
__USE_ATFILE


835 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

836 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

839 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

840 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

841 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

845 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

847 #ifde‡
__USE_ATFILE


849 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

850 
__THROW
 
	`__n⁄nuŒ
 ((2));

854 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

858 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

861 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

868 *
	`gëlogö
 ();

869 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


876 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

879 #ifdef 
__USE_BSD


881 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #ifdef 
__USE_POSIX2


889 
	#__√ed_gë›t


	)

890 
	~<gë›t.h
>

894 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


898 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

902 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

905 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

906 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

910 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

916 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

917 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

918 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

925 
	$vh™gup
 (Ë
__THROW
;

928 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

936 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

937 
size_t
 
__off£t
, 
__sˇÀ
)

938 
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

948 *
	$gëu£rshñl
 (Ë
__THROW
;

949 
	$ídu£rshñl
 (Ë
__THROW
;

950 
	$£tu£rshñl
 (Ë
__THROW
;

956 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

960 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

963 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

967 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

971 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


976 
	`fsync
 (
__fd
);

980 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


983 
	`gëho°id
 ();

986 
	$sync
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


992 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

997 
	$gëdèbÀsize
 (Ë
__THROW
;

1003 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1006 #i‚de‡
__USE_FILE_OFFSET64


1007 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1008 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1010 #ifde‡
__REDIRECT_NTH


1011 
	`__REDIRECT_NTH
 (
åunˇã
,

1012 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1013 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1015 
	#åunˇã
 
åunˇã64


	)

1018 #ifde‡
__USE_LARGEFILE64


1019 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1025 #i‚de‡
__USE_FILE_OFFSET64


1026 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1028 #ifde‡
__REDIRECT_NTH


1029 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1030 
·runˇã64
Ë
__wur
;

1032 
	#·runˇã
 
·runˇã64


	)

1035 #ifde‡
__USE_LARGEFILE64


1036 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1042 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1043 || 
deföed
 
__USE_MISC


1047 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1053 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1057 #ifde‡
__USE_MISC


1068 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1073 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1085 
	#F_ULOCK
 0

	)

1086 
	#F_LOCK
 1

	)

1087 
	#F_TLOCK
 2

	)

1088 
	#F_TEST
 3

	)

1090 #i‚de‡
__USE_FILE_OFFSET64


1091 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1093 #ifde‡
__REDIRECT


1094 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1095 
lockf64
Ë
__wur
;

1097 
	#lockf
 
lockf64


	)

1100 #ifde‡
__USE_LARGEFILE64


1101 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1106 #ifde‡
__USE_GNU


1111 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1112 (
__exãnsi⁄__
 \

1113 ({ 
__ªsu…
; \

1114 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1115 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1116 
__ªsu…
; 
	}
}))

	)

1119 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1122 
fd©async
 (
__fûdes
);

1128 #ifdef 
__USE_XOPEN


1130 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1131 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1135 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1142 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1143 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1149 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1151 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1156 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1157 
	~<bôs/uni°d.h
>

1160 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/asm/unistd.h

1 #ifde‡
__i386__


2 
	~"uni°d_32.h
"

4 
	~"uni°d_64.h
"

	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS
,

502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

504 
	m_SC_V7_ILP32_OFF32
,

505 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

506 
	m_SC_V7_ILP32_OFFBIG
,

507 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

508 
	m_SC_V7_LP64_OFF64
,

509 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

510 
	m_SC_V7_LPBIG_OFFBIG
,

511 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

513 
	m_SC_SS_REPL_MAX
,

514 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

516 
	m_SC_TRACE_EVENT_NAME_MAX
,

517 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

518 
	m_SC_TRACE_NAME_MAX
,

519 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

520 
	m_SC_TRACE_SYS_MAX
,

521 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

522 
	m_SC_TRACE_USER_EVENT_MAX
,

523 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

525 
	m_SC_XOPEN_STREAMS
,

526 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

528 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

529 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

530 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


531 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

537 
	m_CS_PATH
,

538 
	#_CS_PATH
 
_CS_PATH


	)

540 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

541 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

544 
	m_CS_GNU_LIBC_VERSION
,

545 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

546 
	m_CS_GNU_LIBPTHREAD_VERSION
,

547 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

549 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

550 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

553 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

554 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

557 
	m_CS_LFS_CFLAGS
 = 1000,

558 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

559 
	m_CS_LFS_LDFLAGS
,

560 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

561 
	m_CS_LFS_LIBS
,

562 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

563 
	m_CS_LFS_LINTFLAGS
,

564 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

565 
	m_CS_LFS64_CFLAGS
,

566 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

567 
	m_CS_LFS64_LDFLAGS
,

568 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

569 
	m_CS_LFS64_LIBS
,

570 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

571 
	m_CS_LFS64_LINTFLAGS
,

572 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

575 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

577 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

579 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

580 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

581 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

588 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

589 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

593 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

594 
	m_CS_XBS5_LP64_OFF64_LIBS
,

595 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

596 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

597 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

604 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

605 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

613 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

621 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

622 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

629 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

630 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

637 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

638 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

646 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

654 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

655 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

662 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

663 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

670 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

671 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

673 
	m_CS_V6_ENV
,

674 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

675 
	m_CS_V7_ENV


676 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/dirent.h

19 #i‚de‡
_DIRENT_H


23 
	sdúít


25 #i‚de‡
__USE_FILE_OFFSET64


26 
__öo_t
 
	md_öo
;

27 
__off_t
 
	md_off
;

29 
__öo64_t
 
	md_öo
;

30 
__off64_t
 
	md_off
;

32 
	md_ª˛í
;

33 
	md_ty≥
;

34 
	md_«me
[256];

37 #ifde‡
__USE_LARGEFILE64


38 
	sdúít64


40 
__öo64_t
 
	md_öo
;

41 
__off64_t
 
	md_off
;

42 
	md_ª˛í
;

43 
	md_ty≥
;

44 
	md_«me
[256];

48 
	#d_fûío
 
d_öo


	)

50 #unde‡
_DIRENT_HAVE_D_NAMLEN


51 
	#_DIRENT_HAVE_D_RECLEN


	)

52 
	#_DIRENT_HAVE_D_OFF


	)

53 
	#_DIRENT_HAVE_D_TYPE


	)

	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


23 
	~<bôs/w‹dsize.h
>

43 #i‡
__WORDSIZE
 == 64

57 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

58 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

59 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

62 
	#_POSIX_V7_LP64_OFF64
 1

	)

63 
	#_POSIX_V6_LP64_OFF64
 1

	)

64 
	#_XBS5_LP64_OFF64
 1

	)

70 
	#_POSIX_V7_ILP32_OFF32
 1

	)

71 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

72 
	#_POSIX_V6_ILP32_OFF32
 1

	)

73 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

74 
	#_XBS5_ILP32_OFF32
 1

	)

75 
	#_XBS5_ILP32_OFFBIG
 1

	)

92 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

93 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

94 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

95 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

96 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

97 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
ERFKILL


42 
	#ERFKILL
 132

	)

45 #i‚de‡
__ASSEMBLER__


47 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

49 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


51 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

56 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


60 
	#EDOM
 33

	)

61 
	#EILSEQ
 84

	)

62 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

21 #i‚def 
_FCNTL_H


25 
	~<sys/ty≥s.h
>

26 
	~<bôs/w‹dsize.h
>

27 #ifde‡
__USE_GNU


28 
	~<bôs/uio.h
>

34 
	#O_ACCMODE
 0003

	)

35 
	#O_RDONLY
 00

	)

36 
	#O_WRONLY
 01

	)

37 
	#O_RDWR
 02

	)

38 
	#O_CREAT
 0100

	)

39 
	#O_EXCL
 0200

	)

40 
	#O_NOCTTY
 0400

	)

41 
	#O_TRUNC
 01000

	)

42 
	#O_APPEND
 02000

	)

43 
	#O_NONBLOCK
 04000

	)

44 
	#O_NDELAY
 
O_NONBLOCK


	)

45 
	#O_SYNC
 04010000

	)

46 
	#O_FSYNC
 
O_SYNC


	)

47 
	#O_ASYNC
 020000

	)

49 #ifde‡
__USE_XOPEN2K8


50 
	#O_DIRECTORY
 0200000

	)

51 
	#O_NOFOLLOW
 0400000

	)

52 
	#O_CLOEXEC
 02000000

	)

54 #ifde‡
__USE_GNU


55 
	#O_DIRECT
 040000

	)

56 
	#O_NOATIME
 01000000

	)

62 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


63 
	#O_DSYNC
 010000

	)

64 
	#O_RSYNC
 
O_SYNC


	)

67 #ifde‡
__USE_LARGEFILE64


68 #i‡
__WORDSIZE
 == 64

69 
	#O_LARGEFILE
 0

	)

71 
	#O_LARGEFILE
 0100000

	)

76 
	#F_DUPFD
 0

	)

77 
	#F_GETFD
 1

	)

78 
	#F_SETFD
 2

	)

79 
	#F_GETFL
 3

	)

80 
	#F_SETFL
 4

	)

81 #i‡
__WORDSIZE
 == 64

82 
	#F_GETLK
 5

	)

83 
	#F_SETLK
 6

	)

84 
	#F_SETLKW
 7

	)

86 
	#F_GETLK64
 5

	)

87 
	#F_SETLK64
 6

	)

88 
	#F_SETLKW64
 7

	)

90 #i‚de‡
__USE_FILE_OFFSET64


91 
	#F_GETLK
 5

	)

92 
	#F_SETLK
 6

	)

93 
	#F_SETLKW
 7

	)

95 
	#F_GETLK
 
F_GETLK64


	)

96 
	#F_SETLK
 
F_SETLK64


	)

97 
	#F_SETLKW
 
F_SETLKW64


	)

99 
	#F_GETLK64
 12

	)

100 
	#F_SETLK64
 13

	)

101 
	#F_SETLKW64
 14

	)

104 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


105 
	#F_SETOWN
 8

	)

106 
	#F_GETOWN
 9

	)

109 #ifde‡
__USE_GNU


110 
	#F_SETSIG
 10

	)

111 
	#F_GETSIG
 11

	)

112 
	#F_SETOWN_EX
 15

	)

113 
	#F_GETOWN_EX
 16

	)

116 #ifde‡
__USE_GNU


117 
	#F_SETLEASE
 1024

	)

118 
	#F_GETLEASE
 1025

	)

119 
	#F_NOTIFY
 1026

	)

121 #ifde‡
__USE_XOPEN2K8


122 
	#F_DUPFD_CLOEXEC
 1030

	)

127 
	#FD_CLOEXEC
 1

	)

130 
	#F_RDLCK
 0

	)

131 
	#F_WRLCK
 1

	)

132 
	#F_UNLCK
 2

	)

135 
	#F_EXLCK
 4

	)

136 
	#F_SHLCK
 8

	)

138 #ifde‡
__USE_BSD


140 
	#LOCK_SH
 1

	)

141 
	#LOCK_EX
 2

	)

142 
	#LOCK_NB
 4

	)

144 
	#LOCK_UN
 8

	)

147 #ifde‡
__USE_GNU


148 
	#LOCK_MAND
 32

	)

149 
	#LOCK_READ
 64

	)

150 
	#LOCK_WRITE
 128

	)

151 
	#LOCK_RW
 192

	)

154 #ifde‡
__USE_GNU


156 
	#DN_ACCESS
 0x00000001

	)

157 
	#DN_MODIFY
 0x00000002

	)

158 
	#DN_CREATE
 0x00000004

	)

159 
	#DN_DELETE
 0x00000008

	)

160 
	#DN_RENAME
 0x00000010

	)

161 
	#DN_ATTRIB
 0x00000020

	)

162 
	#DN_MULTISHOT
 0x80000000

	)

165 
	sÊock


167 
	ml_ty≥
;

168 
	ml_whí˚
;

169 #i‚de‡
__USE_FILE_OFFSET64


170 
__off_t
 
	ml_°¨t
;

171 
__off_t
 
	ml_Àn
;

173 
__off64_t
 
	ml_°¨t
;

174 
__off64_t
 
	ml_Àn
;

176 
__pid_t
 
	ml_pid
;

179 #ifde‡
__USE_LARGEFILE64


180 
	sÊock64


182 
	ml_ty≥
;

183 
	ml_whí˚
;

184 
__off64_t
 
	ml_°¨t
;

185 
__off64_t
 
	ml_Àn
;

186 
__pid_t
 
	ml_pid
;

190 #ifde‡
__USE_GNU


192 
	e__pid_ty≥


194 
	mF_OWNER_TID
 = 0,

195 
	mF_OWNER_PID
,

196 
	mF_OWNER_PGRP
,

197 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


201 
	sf_ow√r_ex


203 
__pid_ty≥
 
	mty≥
;

204 
__pid_t
 
	mpid
;

210 #ifdef 
__USE_BSD


211 
	#FAPPEND
 
O_APPEND


	)

212 
	#FFSYNC
 
O_FSYNC


	)

213 
	#FASYNC
 
O_ASYNC


	)

214 
	#FNONBLOCK
 
O_NONBLOCK


	)

215 
	#FNDELAY
 
O_NDELAY


	)

219 #ifde‡
__USE_XOPEN2K


220 
	#POSIX_FADV_NORMAL
 0

	)

221 
	#POSIX_FADV_RANDOM
 1

	)

222 
	#POSIX_FADV_SEQUENTIAL
 2

	)

223 
	#POSIX_FADV_WILLNEED
 3

	)

224 
	#POSIX_FADV_DONTNEED
 4

	)

225 
	#POSIX_FADV_NOREUSE
 5

	)

229 #ifde‡
__USE_GNU


231 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

234 
	#SYNC_FILE_RANGE_WRITE
 2

	)

237 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

242 
	#SPLICE_F_MOVE
 1

	)

243 
	#SPLICE_F_NONBLOCK
 2

	)

246 
	#SPLICE_F_MORE
 4

	)

247 
	#SPLICE_F_GIFT
 8

	)

250 
	g__BEGIN_DECLS


252 #ifde‡
__USE_GNU


255 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

256 
__THROW
;

260 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

261 
__Êags
);

265 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

266 
size_t
 
__cou¡
, 
__Êags
);

269 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

270 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

271 
__Êags
);

274 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

275 
__Êags
);

278 #i‚de‡
__USE_FILE_OFFSET64


279 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

281 #ifde‡
__REDIRECT


282 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

283 
__off64_t
 
__Àn
),

284 
ÁŒoˇã64
);

286 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

289 #ifde‡
__USE_LARGEFILE64


290 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

291 
__off64_t
 
__Àn
);

295 
__END_DECLS


	@/usr/include/bits/fcntl2.h

20 #i‚def 
_FCNTL_H


26 #i‚de‡
__USE_FILE_OFFSET64


27 
	$__›í_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

28 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

29 
›í
Ë
	`__n⁄nuŒ
 ((1));

31 
	`__REDIRECT
 (
__›í_2
, (
__c⁄°
 *
__∑th
, 
__oÊag
),

32 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

33 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

34 
›í64
Ë
	`__n⁄nuŒ
 ((1));

36 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

38 
	`__îr‹de˛
 (
__›í_missög_mode
,

41 
__exã∫_Æways_ölöe
 

42 
	$›í
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

44 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

45 
	`__›í_too_m™y_¨gs
 ();

47 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

49 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

51 
	`__›í_missög_mode
 ();

52  
	`__›í_2
 (
__∑th
, 
__oÊag
);

54  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

57 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

58  
	`__›í_2
 (
__∑th
, 
__oÊag
);

60  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

61 
	}
}

64 #ifde‡
__USE_LARGEFILE64


65 
	$__›í64_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

66 
	`__REDIRECT
 (
__›í64_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
,

67 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

68 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

70 
	`__îr‹de˛
 (
__›í64_missög_mode
,

73 
__exã∫_Æways_ölöe
 

74 
	$›í64
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

76 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

77 
	`__›í64_too_m™y_¨gs
 ();

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

81 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

83 
	`__›í64_missög_mode
 ();

84  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

86  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

89 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

90  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

92  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

93 
	}
}

97 #ifde‡
__USE_ATFILE


98 #i‚de‡
__USE_FILE_OFFSET64


99 
	$__›í©_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

100 
	`__n⁄nuŒ
 ((2));

101 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

102 
__oÊag
, ...), 
›í©
)

103 
	`__n⁄nuŒ
 ((2));

105 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, 
__c⁄°
 *
__∑th
,

106 
__oÊag
), 
__›í©64_2
)

107 
	`__n⁄nuŒ
 ((2));

108 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

109 
__oÊag
, ...), 
›í©64
)

110 
	`__n⁄nuŒ
 ((2));

112 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

114 
	`__îr‹de˛
 (
__›í©_missög_mode
,

117 
__exã∫_Æways_ölöe
 

118 
	$›í©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

120 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

121 
	`__›í©_too_m™y_¨gs
 ();

123 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

125 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

127 
	`__›í©_missög_mode
 ();

128  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

130  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

133 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

134  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

136  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

137 
	}
}

140 #ifde‡
__USE_LARGEFILE64


141 
	$__›í©64_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

142 
	`__n⁄nuŒ
 ((2));

143 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

144 
__oÊag
, ...), 
›í©64
)

145 
	`__n⁄nuŒ
 ((2));

146 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

148 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

151 
__exã∫_Æways_ölöe
 

152 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

154 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

155 
	`__›í©64_too_m™y_¨gs
 ();

157 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

159 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

161 
	`__›í©64_missög_mode
 ();

162  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

164  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

167 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

168  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

170  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

171 
	}
}

	@/usr/include/bits/ioctl-types.h

20 #i‚de‡
_SYS_IOCTL_H


25 
	~<asm/io˘ls.h
>

28 
	swösize


30 
	mws_row
;

31 
	mws_cﬁ
;

32 
	mws_xpixñ
;

33 
	mws_ypixñ
;

36 
	#NCC
 8

	)

37 
	sãrmio


39 
	mc_iÊag
;

40 
	mc_oÊag
;

41 
	mc_cÊag
;

42 
	mc_lÊag
;

43 
	mc_löe
;

44 
	mc_cc
[
NCC
];

48 
	#TIOCM_LE
 0x001

	)

49 
	#TIOCM_DTR
 0x002

	)

50 
	#TIOCM_RTS
 0x004

	)

51 
	#TIOCM_ST
 0x008

	)

52 
	#TIOCM_SR
 0x010

	)

53 
	#TIOCM_CTS
 0x020

	)

54 
	#TIOCM_CAR
 0x040

	)

55 
	#TIOCM_RNG
 0x080

	)

56 
	#TIOCM_DSR
 0x100

	)

57 
	#TIOCM_CD
 
TIOCM_CAR


	)

58 
	#TIOCM_RI
 
TIOCM_RNG


	)

63 
	#N_TTY
 0

	)

64 
	#N_SLIP
 1

	)

65 
	#N_MOUSE
 2

	)

66 
	#N_PPP
 3

	)

67 
	#N_STRIP
 4

	)

68 
	#N_AX25
 5

	)

69 
	#N_X25
 6

	)

70 
	#N_6PACK
 7

	)

71 
	#N_MASC
 8

	)

72 
	#N_R3964
 9

	)

73 
	#N_PROFIBUS_FDL
 10

	)

74 
	#N_IRDA
 11

	)

75 
	#N_SMSBLOCK
 12

	)

76 
	#N_HDLC
 13

	)

77 
	#N_SYNC_PPP
 14

	)

78 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	#SIOCADDRT
 0x890B

	)

28 
	#SIOCDELRT
 0x890C

	)

29 
	#SIOCRTMSG
 0x890D

	)

32 
	#SIOCGIFNAME
 0x8910

	)

33 
	#SIOCSIFLINK
 0x8911

	)

34 
	#SIOCGIFCONF
 0x8912

	)

35 
	#SIOCGIFFLAGS
 0x8913

	)

36 
	#SIOCSIFFLAGS
 0x8914

	)

37 
	#SIOCGIFADDR
 0x8915

	)

38 
	#SIOCSIFADDR
 0x8916

	)

39 
	#SIOCGIFDSTADDR
 0x8917

	)

40 
	#SIOCSIFDSTADDR
 0x8918

	)

41 
	#SIOCGIFBRDADDR
 0x8919

	)

42 
	#SIOCSIFBRDADDR
 0x891®

	)

43 
	#SIOCGIFNETMASK
 0x891b

	)

44 
	#SIOCSIFNETMASK
 0x891¯

	)

45 
	#SIOCGIFMETRIC
 0x891d

	)

46 
	#SIOCSIFMETRIC
 0x891ê

	)

47 
	#SIOCGIFMEM
 0x891‡

	)

48 
	#SIOCSIFMEM
 0x8920

	)

49 
	#SIOCGIFMTU
 0x8921

	)

50 
	#SIOCSIFMTU
 0x8922

	)

51 
	#SIOCSIFNAME
 0x8923

	)

52 
	#SIOCSIFHWADDR
 0x8924

	)

53 
	#SIOCGIFENCAP
 0x8925

	)

54 
	#SIOCSIFENCAP
 0x8926

	)

55 
	#SIOCGIFHWADDR
 0x8927

	)

56 
	#SIOCGIFSLAVE
 0x8929

	)

57 
	#SIOCSIFSLAVE
 0x8930

	)

58 
	#SIOCADDMULTI
 0x8931

	)

59 
	#SIOCDELMULTI
 0x8932

	)

60 
	#SIOCGIFINDEX
 0x8933

	)

61 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

62 
	#SIOCSIFPFLAGS
 0x8934

	)

63 
	#SIOCGIFPFLAGS
 0x8935

	)

64 
	#SIOCDIFADDR
 0x8936

	)

65 
	#SIOCSIFHWBROADCAST
 0x8937

	)

66 
	#SIOCGIFCOUNT
 0x8938

	)

68 
	#SIOCGIFBR
 0x8940

	)

69 
	#SIOCSIFBR
 0x8941

	)

71 
	#SIOCGIFTXQLEN
 0x8942

	)

72 
	#SIOCSIFTXQLEN
 0x8943

	)

77 
	#SIOCDARP
 0x8953

	)

78 
	#SIOCGARP
 0x8954

	)

79 
	#SIOCSARP
 0x8955

	)

82 
	#SIOCDRARP
 0x8960

	)

83 
	#SIOCGRARP
 0x8961

	)

84 
	#SIOCSRARP
 0x8962

	)

88 
	#SIOCGIFMAP
 0x8970

	)

89 
	#SIOCSIFMAP
 0x8971

	)

93 
	#SIOCADDDLCI
 0x8980

	)

94 
	#SIOCDELDLCI
 0x8981

	)

103 
	#SIOCDEVPRIVATE
 0x89F0

	)

109 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/mman.h

20 #i‚de‡
_SYS_MMAN_H


33 
	#PROT_READ
 0x1

	)

34 
	#PROT_WRITE
 0x2

	)

35 
	#PROT_EXEC
 0x4

	)

36 
	#PROT_NONE
 0x0

	)

37 
	#PROT_GROWSDOWN
 0x01000000

	)

39 
	#PROT_GROWSUP
 0x02000000

	)

43 
	#MAP_SHARED
 0x01

	)

44 
	#MAP_PRIVATE
 0x02

	)

45 #ifde‡
__USE_MISC


46 
	#MAP_TYPE
 0x0‡

	)

50 
	#MAP_FIXED
 0x10

	)

51 #ifde‡
__USE_MISC


52 
	#MAP_FILE
 0

	)

53 
	#MAP_ANONYMOUS
 0x20

	)

54 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

55 
	#MAP_32BIT
 0x40

	)

59 #ifde‡
__USE_MISC


60 
	#MAP_GROWSDOWN
 0x00100

	)

61 
	#MAP_DENYWRITE
 0x00800

	)

62 
	#MAP_EXECUTABLE
 0x01000

	)

63 
	#MAP_LOCKED
 0x02000

	)

64 
	#MAP_NORESERVE
 0x04000

	)

65 
	#MAP_POPULATE
 0x08000

	)

66 
	#MAP_NONBLOCK
 0x10000

	)

67 
	#MAP_STACK
 0x20000

	)

71 
	#MS_ASYNC
 1

	)

72 
	#MS_SYNC
 4

	)

73 
	#MS_INVALIDATE
 2

	)

76 
	#MCL_CURRENT
 1

	)

77 
	#MCL_FUTURE
 2

	)

81 #ifde‡
__USE_GNU


82 
	#MREMAP_MAYMOVE
 1

	)

83 
	#MREMAP_FIXED
 2

	)

87 #ifde‡
__USE_BSD


88 
	#MADV_NORMAL
 0

	)

89 
	#MADV_RANDOM
 1

	)

90 
	#MADV_SEQUENTIAL
 2

	)

91 
	#MADV_WILLNEED
 3

	)

92 
	#MADV_DONTNEED
 4

	)

93 
	#MADV_REMOVE
 9

	)

94 
	#MADV_DONTFORK
 10

	)

95 
	#MADV_DOFORK
 11

	)

96 
	#MADV_MERGEABLE
 12

	)

97 
	#MADV_UNMERGEABLE
 13

	)

98 
	#MADV_DONTDUMP
 16

	)

100 
	#MADV_DODUMP
 17

	)

101 
	#MADV_HWPOISON
 100

	)

105 #ifde‡
__USE_XOPEN2K


106 
	#POSIX_MADV_NORMAL
 0

	)

107 
	#POSIX_MADV_RANDOM
 1

	)

108 
	#POSIX_MADV_SEQUENTIAL
 2

	)

109 
	#POSIX_MADV_WILLNEED
 3

	)

110 
	#POSIX_MADV_DONTNEED
 4

	)

	@/usr/include/bits/posix1_lim.h

25 #i‚def 
_BITS_POSIX1_LIM_H


26 
	#_BITS_POSIX1_LIM_H
 1

	)

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

90 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


93 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

97 
	#_POSIX_PATH_MAX
 256

	)

100 
	#_POSIX_PIPE_BUF
 512

	)

104 
	#_POSIX_RE_DUP_MAX
 255

	)

107 
	#_POSIX_RTSIG_MAX
 8

	)

110 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

113 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

116 
	#_POSIX_SIGQUEUE_MAX
 32

	)

119 
	#_POSIX_SSIZE_MAX
 32767

	)

122 
	#_POSIX_STREAM_MAX
 8

	)

125 
	#_POSIX_SYMLINK_MAX
 255

	)

129 
	#_POSIX_SYMLOOP_MAX
 8

	)

132 
	#_POSIX_TIMER_MAX
 32

	)

135 
	#_POSIX_TTY_NAME_MAX
 9

	)

138 
	#_POSIX_TZNAME_MAX
 6

	)

140 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


142 
	#_POSIX_QLIMIT
 1

	)

146 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

149 
	#_POSIX_UIO_MAXIOV
 16

	)

153 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

157 
	~<bôs/loˇl_lim.h
>

160 #i‚def 
SSIZE_MAX


161 
	#SSIZE_MAX
 
LONG_MAX


	)

168 #i‚def 
NGROUPS_MAX


169 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

23 #i‚def 
_BITS_POSIX2_LIM_H


24 
	#_BITS_POSIX2_LIM_H
 1

	)

28 
	#_POSIX2_BC_BASE_MAX
 99

	)

31 
	#_POSIX2_BC_DIM_MAX
 2048

	)

34 
	#_POSIX2_BC_SCALE_MAX
 99

	)

37 
	#_POSIX2_BC_STRING_MAX
 1000

	)

41 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

45 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

48 
	#_POSIX2_LINE_MAX
 2048

	)

52 
	#_POSIX2_RE_DUP_MAX
 255

	)

56 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

63 #i‚def 
BC_BASE_MAX


64 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

66 #i‚def 
BC_DIM_MAX


67 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

69 #i‚def 
BC_SCALE_MAX


70 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

72 #i‚def 
BC_STRING_MAX


73 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

75 #i‚def 
COLL_WEIGHTS_MAX


76 
	#COLL_WEIGHTS_MAX
 255

	)

78 #i‚def 
EXPR_NEST_MAX


79 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

81 #i‚def 
LINE_MAX


82 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

84 #i‚def 
CHARCLASS_NAME_MAX


85 
	#CHARCLASS_NAME_MAX
 2048

	)

89 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_BITS_POSIX_OPT_H


21 
	#_BITS_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

36 
	#_POSIX_FSYNC
 200809L

	)

39 
	#_POSIX_MAPPED_FILES
 200809L

	)

42 
	#_POSIX_MEMLOCK
 200809L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200809L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

92 #ifde‡
__USE_XOPEN2K8


94 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

97 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

101 
	#_POSIX_SEMAPHORES
 200809L

	)

104 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

107 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

108 
	#_POSIX_ASYNC_IO
 1

	)

110 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

112 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

115 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

118 
	#_LFS_LARGEFILE
 1

	)

119 
	#_LFS64_LARGEFILE
 1

	)

120 
	#_LFS64_STDIO
 1

	)

123 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

126 
	#_POSIX_CPUTIME
 0

	)

129 
	#_POSIX_THREAD_CPUTIME
 0

	)

132 
	#_POSIX_REGEXP
 1

	)

135 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

138 
	#_POSIX_SHELL
 1

	)

141 
	#_POSIX_TIMEOUTS
 200809L

	)

144 
	#_POSIX_SPIN_LOCKS
 200809L

	)

147 
	#_POSIX_SPAWN
 200809L

	)

150 
	#_POSIX_TIMERS
 200809L

	)

153 
	#_POSIX_BARRIERS
 200809L

	)

156 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

159 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

162 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

165 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

168 
	#_POSIX_ADVISORY_INFO
 200809L

	)

171 
	#_POSIX_IPV6
 200809L

	)

174 
	#_POSIX_RAW_SOCKETS
 200809L

	)

177 
	#_POSIX2_CHAR_TERM
 200809L

	)

180 
	#_POSIX_SPORADIC_SERVER
 -1

	)

181 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

184 
	#_POSIX_TRACE
 -1

	)

185 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

186 
	#_POSIX_TRACE_INHERIT
 -1

	)

187 
	#_POSIX_TRACE_LOG
 -1

	)

190 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

193 
	#_XOPEN_STREAMS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

61 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


62 
	#SA_RESTART
 0x10000000

	)

63 
	#SA_NODEFER
 0x40000000

	)

65 
	#SA_RESETHAND
 0x80000000

	)

67 #ifde‡
__USE_MISC


68 
	#SA_INTERRUPT
 0x20000000

	)

71 
	#SA_NOMASK
 
SA_NODEFER


	)

72 
	#SA_ONESHOT
 
SA_RESETHAND


	)

73 
	#SA_STACK
 
SA_ONSTACK


	)

77 
	#SIG_BLOCK
 0

	)

78 
	#SIG_UNBLOCK
 1

	)

79 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/stat.h

19 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_STAT_H


24 
	#_BITS_STAT_H
 1

	)

27 
	#_STAT_VER_KERNEL
 0

	)

29 #i‡
__WORDSIZE
 == 32

30 
	#_STAT_VER_SVR4
 2

	)

31 
	#_STAT_VER_LINUX
 3

	)

34 
	#_MKNOD_VER_LINUX
 1

	)

35 
	#_MKNOD_VER_SVR4
 2

	)

36 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‡
__WORDSIZE
 == 32

50 
	m__∑d1
;

52 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‡
__WORDSIZE
 == 32

58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #i‡
__WORDSIZE
 == 64

67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‡
__WORDSIZE
 == 32

71 
	m__∑d2
;

73 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
	m°_˘imí£c
;

105 #i‡
__WORDSIZE
 == 64

106 
	m__unu£d
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__unu£d4
;

110 
	m__unu£d5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #i‡
__WORDSIZE
 == 64

123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #i‡
__WORDSIZE
 == 64

135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

155 
	#°_©ime
 
°_©im
.
tv_£c


	)

156 
	#°_mtime
 
°_mtim
.
tv_£c


	)

157 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

159 
__time_t
 
	m°_©ime
;

160 
	m°_©imí£c
;

161 
__time_t
 
	m°_mtime
;

162 
	m°_mtimí£c
;

163 
__time_t
 
	m°_˘ime
;

164 
	m°_˘imí£c
;

166 #i‡
__WORDSIZE
 == 64

167 
	m__unu£d
[3];

169 
__öo64_t
 
	m°_öo
;

175 
	#_STATBUF_ST_BLKSIZE


	)

176 
	#_STATBUF_ST_RDEV


	)

178 
	#_STATBUF_ST_NSEC


	)

182 
	#__S_IFMT
 0170000

	)

185 
	#__S_IFDIR
 0040000

	)

186 
	#__S_IFCHR
 0020000

	)

187 
	#__S_IFBLK
 0060000

	)

188 
	#__S_IFREG
 0100000

	)

189 
	#__S_IFIFO
 0010000

	)

190 
	#__S_IFLNK
 0120000

	)

191 
	#__S_IFSOCK
 0140000

	)

195 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

196 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

197 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

201 
	#__S_ISUID
 04000

	)

202 
	#__S_ISGID
 02000

	)

203 
	#__S_ISVTX
 01000

	)

204 
	#__S_IREAD
 0400

	)

205 
	#__S_IWRITE
 0200

	)

206 
	#__S_IEXEC
 0100

	)

208 #ifde‡
__USE_ATFILE


209 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

210 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__Àn
))

58  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

59 
	}
}

61 #ifde‡
__USE_GNU


62 
__exã∫_Æways_ölöe
 *

63 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

64 
size_t
 
__Àn
))

66  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

67 
	}
}

76 
__exã∫_Æways_ölöe
 *

77 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

80 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

82 
	`__w¨n_mem£t_zîo_Àn
 ();

83  
__de°
;

85  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

86 
	}
}

88 #ifde‡
__USE_BSD


89 
__exã∫_Æways_ölöe
 

90 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__Àn
))

92 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

93 
	}
}

95 
__exã∫_Æways_ölöe
 

96 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

98 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

99 
	}
}

102 
__exã∫_Æways_ölöe
 *

103 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

105  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

106 
	}
}

108 #ifde‡
__USE_GNU


109 
__exã∫_Æways_ölöe
 *

110 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

112  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

113 
	}
}

117 
__exã∫_Æways_ölöe
 *

118 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

119 
size_t
 
__Àn
))

121  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

122 
	}
}

125 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

126 
size_t
 
__de°Àn
Ë
__THROW
;

127 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

128 
__c⁄°
 *
__§c
,

129 
size_t
 
__n
), 
°≤˝y
);

131 
__exã∫_Æways_ölöe
 *

132 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

134 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

135 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

136  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

137  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

138 
	}
}

141 
__exã∫_Æways_ölöe
 *

142 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

144  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

145 
	}
}

148 
__exã∫_Æways_ölöe
 *

149 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

150 
size_t
 
__Àn
))

152  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

153 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

54 
	#CLOCK_MONOTONIC_RAW
 4

	)

56 
	#CLOCK_REALTIME_COARSE
 5

	)

58 
	#CLOCK_MONOTONIC_COARSE
 6

	)

61 
	#TIMER_ABSTIME
 1

	)

67 #ifde‡
__√ed_timevÆ


68 #unde‡
__√ed_timevÆ


69 #i‚de‡
_STRUCT_TIMEVAL


70 
	#_STRUCT_TIMEVAL
 1

	)

71 
	~<bôs/ty≥s.h
>

75 
	stimevÆ


77 
__time_t
 
	mtv_£c
;

78 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

20 #i‚de‡
_UNISTD_H


24 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

25 
size_t
 
__buÊí
Ë
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

30 
size_t
 
__buÊí
), 
__ªad_chk
)

31 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

34 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


35 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

40  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

42 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

43  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

45  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

46 
	}
}

48 #ifde‡
__USE_UNIX98


49 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

50 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

51 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

54 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

55 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

57 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

58 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

60 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

61 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

62 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

64 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

65 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

66 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

67 
__¥ód64_chk
)

68 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

71 #i‚de‡
__USE_FILE_OFFSET64


72 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


73 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

75 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

77 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

78  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

80 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

81  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

82 
	`__bos0
 (
__buf
));

84  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

87 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


88 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

90 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

92 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

93  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

95 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

96  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

97 
	`__bos0
 (
__buf
));

100  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

101 
	}
}

104 #ifde‡
__USE_LARGEFILE64


105 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


106 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

108 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

110 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

111  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

113 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

114  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

115 
	`__bos0
 (
__buf
));

118  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

119 
	}
}

123 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


124 
ssize_t
 
	$__ªadlök_chk
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

125 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

126 
size_t
 
__buÊí
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

129 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

130 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

131 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

133 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

134 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

135 
size_t
 
__buÊí
), 
__ªadlök_chk
)

136 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

139 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


140 
	`__NTH
 (
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

141 
size_t
 
__Àn
))

143 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

145 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

146  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

148 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

149  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

151  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

152 
	}
}

155 #ifde‡
__USE_ATFILE


156 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

157 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

158 
size_t
 
__buÊí
)

159 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

161 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

163 
ªadlök©
)

164 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

166 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

168 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

169 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

173 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


174 
	`__NTH
 (
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

177 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

179 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

180  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

182 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

183  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

184 
	`__bos
 (
__buf
));

186  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

187 
	}
}

190 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

193 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

194 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

195 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

196 
__gëcwd_chk
)

197 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

200 
__exã∫_Æways_ölöe
 
__wur
 *

201 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

203 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

205 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

206  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 i‡(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

212 
	}
}

214 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


215 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

217 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

218 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

221 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

222 
	`__NTH
 (
	$gëwd
 (*
__buf
))

224 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

225  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__gëwd_w¨n
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

231 
size_t
 
__buÊí
Ë
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

233 
size_t
 
__Àn
), 
c⁄f°r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

235 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

236 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

237 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

240 
__exã∫_Æways_ölöe
 
size_t


241 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

243 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

245 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

246  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

248 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

249  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

251  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

252 
	}
}

255 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

258 
gëgroups
Ë
__wur
;

259 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

260 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

261 
__gëgroups_chk
)

262 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

265 
__exã∫_Æways_ölöe
 

266 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

268 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

270 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

271  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

273 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

274  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

276  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

277 
	}
}

280 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

281 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

282 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

283 
size_t
 
__buÊí
), 
ây«me_r
)

284 
	`__n⁄nuŒ
 ((2));

285 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

286 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

287 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

288 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

291 
__exã∫_Æways_ölöe
 

292 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

294 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

296 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

297  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

299 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

300  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

302  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

303 
	}
}

306 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


307 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

308 
	`__n⁄nuŒ
 ((1));

309 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

310 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

311 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

312 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

313 
__gëlogö_r_chk
)

314 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

317 
__exã∫_Æways_ölöe
 

318 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

320 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

322 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

323  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

325 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

326  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

328  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

329 
	}
}

333 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


334 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

337 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

338 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

339 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

340 
__gëho°«me_chk
)

341 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

344 
__exã∫_Æways_ölöe
 

345 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

347 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

349 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

350  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

352 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

353  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

355  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

356 
	}
}

360 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

361 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

363 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

364 
size_t
 
__buÊí
),

365 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

366 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

367 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

368 
__gëdomaö«me_chk
)

369 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

373 
__exã∫_Æways_ölöe
 

374 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

376 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

378 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

379  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

381 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

382  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

384  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

385 
	}
}

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

23 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

24 
	#__WCHAR_MAX
 (2147483647)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/bits/xopen_lim.h

30 #i‚de‡
_XOPEN_LIM_H


31 
	#_XOPEN_LIM_H
 1

	)

33 
	#__√ed_IOV_MAX


	)

34 
	~<bôs/°dio_lim.h
>

66 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

71 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

74 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

77 
	#NL_MSGMAX
 
INT_MAX


	)

81 
	#NL_NMAX
 
INT_MAX


	)

84 
	#NL_SETMAX
 
INT_MAX


	)

87 
	#NL_TEXTMAX
 
INT_MAX


	)

90 
	#NZERO
 20

	)

94 #ifde‡
INT_MAX


95 #i‡
INT_MAX
 == 32767

96 
	#WORD_BIT
 16

	)

98 #i‡
INT_MAX
 == 2147483647

99 
	#WORD_BIT
 32

	)

102 
	#WORD_BIT
 64

	)

105 #ñi‡
deföed
 
__INT_MAX__


106 #i‡
__INT_MAX__
 == 32767

107 
	#WORD_BIT
 16

	)

109 #i‡
__INT_MAX__
 == 2147483647

110 
	#WORD_BIT
 32

	)

113 
	#WORD_BIT
 64

	)

117 
	#WORD_BIT
 32

	)

121 #ifde‡
LONG_MAX


122 #i‡
LONG_MAX
 == 2147483647

123 
	#LONG_BIT
 32

	)

126 
	#LONG_BIT
 64

	)

128 #ñi‡
deföed
 
__LONG_MAX__


129 #i‡
__LONG_MAX__
 == 2147483647

130 
	#LONG_BIT
 32

	)

133 
	#LONG_BIT
 64

	)

136 
	~<bôs/w‹dsize.h
>

137 #i‡
__WORDSIZE
 == 64

138 
	#LONG_BIT
 64

	)

140 
	#LONG_BIT
 32

	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

96 #unde‡
__USE_ISOC99


97 #unde‡
__USE_ISOC95


98 #unde‡
__USE_POSIX


99 #unde‡
__USE_POSIX2


100 #unde‡
__USE_POSIX199309


101 #unde‡
__USE_POSIX199506


102 #unde‡
__USE_XOPEN


103 #unde‡
__USE_XOPEN_EXTENDED


104 #unde‡
__USE_UNIX98


105 #unde‡
__USE_XOPEN2K


106 #unde‡
__USE_XOPEN2KXSI


107 #unde‡
__USE_XOPEN2K8


108 #unde‡
__USE_XOPEN2K8XSI


109 #unde‡
__USE_LARGEFILE


110 #unde‡
__USE_LARGEFILE64


111 #unde‡
__USE_FILE_OFFSET64


112 #unde‡
__USE_BSD


113 #unde‡
__USE_SVID


114 #unde‡
__USE_MISC


115 #unde‡
__USE_ATFILE


116 #unde‡
__USE_GNU


117 #unde‡
__USE_REENTRANT


118 #unde‡
__USE_FORTIFY_LEVEL


119 #unde‡
__FAVOR_BSD


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

129 
	#__USE_ANSI
 1

	)

138 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


139 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

140 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

142 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

147 #i‡
deföed
 
_BSD_SOURCE
 && \

148 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

149 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

150 
	#__FAVOR_BSD
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_POSIX_SOURCE


160 
	#_POSIX_SOURCE
 1

	)

161 #unde‡
_POSIX_C_SOURCE


162 
	#_POSIX_C_SOURCE
 200809L

	)

163 #unde‡
_XOPEN_SOURCE


164 
	#_XOPEN_SOURCE
 700

	)

165 #unde‡
_XOPEN_SOURCE_EXTENDED


166 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

167 #unde‡
_LARGEFILE64_SOURCE


168 
	#_LARGEFILE64_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

180 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

181 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

182 
	#_BSD_SOURCE
 1

	)

183 
	#_SVID_SOURCE
 1

	)

190 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

191 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

192 
	#__USE_ISOC99
 1

	)

196 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

197 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

198 
	#__USE_ISOC95
 1

	)

203 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

204 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

205 
	#_POSIX_SOURCE
 1

	)

206 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

207 
	#_POSIX_C_SOURCE
 2

	)

208 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

209 
	#_POSIX_C_SOURCE
 199506L

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

211 
	#_POSIX_C_SOURCE
 200112L

	)

213 
	#_POSIX_C_SOURCE
 200809L

	)

215 
	#__USE_POSIX_IMPLICITLY
 1

	)

218 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


219 
	#__USE_POSIX
 1

	)

222 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


223 
	#__USE_POSIX2
 1

	)

226 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

227 
	#__USE_POSIX199309
 1

	)

230 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

231 
	#__USE_POSIX199506
 1

	)

234 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

235 
	#__USE_XOPEN2K
 1

	)

236 #unde‡
__USE_ISOC95


237 
	#__USE_ISOC95
 1

	)

238 #unde‡
__USE_ISOC99


239 
	#__USE_ISOC99
 1

	)

242 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

243 
	#__USE_XOPEN2K8
 1

	)

244 #unde‡
_ATFILE_SOURCE


245 
	#_ATFILE_SOURCE
 1

	)

248 #ifdef 
_XOPEN_SOURCE


249 
	#__USE_XOPEN
 1

	)

250 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

251 
	#__USE_XOPEN_EXTENDED
 1

	)

252 
	#__USE_UNIX98
 1

	)

253 #unde‡
_LARGEFILE_SOURCE


254 
	#_LARGEFILE_SOURCE
 1

	)

255 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

256 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

257 
	#__USE_XOPEN2K8
 1

	)

258 
	#__USE_XOPEN2K8XSI
 1

	)

260 
	#__USE_XOPEN2K
 1

	)

261 
	#__USE_XOPEN2KXSI
 1

	)

262 #unde‡
__USE_ISOC95


263 
	#__USE_ISOC95
 1

	)

264 #unde‡
__USE_ISOC99


265 
	#__USE_ISOC99
 1

	)

268 #ifde‡
_XOPEN_SOURCE_EXTENDED


269 
	#__USE_XOPEN_EXTENDED
 1

	)

274 #ifde‡
_LARGEFILE_SOURCE


275 
	#__USE_LARGEFILE
 1

	)

278 #ifde‡
_LARGEFILE64_SOURCE


279 
	#__USE_LARGEFILE64
 1

	)

282 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

283 
	#__USE_FILE_OFFSET64
 1

	)

286 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


287 
	#__USE_MISC
 1

	)

290 #ifdef 
_BSD_SOURCE


291 
	#__USE_BSD
 1

	)

294 #ifdef 
_SVID_SOURCE


295 
	#__USE_SVID
 1

	)

298 #ifdef 
_ATFILE_SOURCE


299 
	#__USE_ATFILE
 1

	)

302 #ifdef 
_GNU_SOURCE


303 
	#__USE_GNU
 1

	)

306 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


307 
	#__USE_REENTRANT
 1

	)

310 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

311 && 
deföed
 
__OPTIMIZE__
 && __OPTIMIZE__ > 0

312 #i‡!
__GNUC_PREREQ
 (4, 1)

313 #ifde‡
__GNUC_RH_RELEASE__


314 #w¨nög 
_FORTIFY_SOURCE
 
suµ‹ãd
 
⁄ly
 
wôh
 
GCC
 4.1 
™d
 
œãr


316 
	#__USE_FORTIFY_LEVEL
 0

	)

317 #ñi‡
_FORTIFY_SOURCE
 > 1

318 
	#__USE_FORTIFY_LEVEL
 2

	)

320 
	#__USE_FORTIFY_LEVEL
 1

	)

323 
	#__USE_FORTIFY_LEVEL
 0

	)

327 
	#__STDC_IEC_559__
 1

	)

328 
	#__STDC_IEC_559_COMPLEX__
 1

	)

331 
	#__STDC_ISO_10646__
 200009L

	)

339 #unde‡
__GNU_LIBRARY__


340 
	#__GNU_LIBRARY__
 6

	)

344 
	#__GLIBC__
 2

	)

345 
	#__GLIBC_MINOR__
 12

	)

347 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

348 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

351 #i‡
deföed
 
__GNUC__
 \

352 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

353 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

354 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

355 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

359 #i‚de‡
__ASSEMBLER__


360 #i‚de‡
_SYS_CDEFS_H


361 
	~<sys/cdefs.h
>

366 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


367 
	#__USE_LARGEFILE
 1

	)

368 
	#__USE_LARGEFILE64
 1

	)

374 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

375 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

376 && 
deföed
 
	g__exã∫_ölöe


377 
	#__USE_EXTERN_INLINES
 1

	)

385 
	~<gnu/°ubs.h
>

	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/linux/blk_types.h

5 #i‚de‡
__LINUX_BLK_TYPES_H


6 
	#__LINUX_BLK_TYPES_H


	)

8 #ifde‡
CONFIG_BLOCK


10 
	~<löux/ty≥s.h
>

15 
	#BIO_UPTODATE
 0

	)

16 
	#BIO_RW_BLOCK
 1

	)

17 
	#BIO_EOF
 2

	)

18 
	#BIO_SEG_VALID
 3

	)

19 
	#BIO_CLONED
 4

	)

20 
	#BIO_BOUNCED
 5

	)

21 
	#BIO_USER_MAPPED
 6

	)

22 
	#BIO_EOPNOTSUPP
 7

	)

23 
	#BIO_CPU_AFFINE
 8

	)

24 
	#BIO_NULL_MAPPED
 9

	)

25 
	#BIO_FS_INTEGRITY
 10

	)

26 
	#BIO_QUIET
 11

	)

27 
	#BIO_MAPPED_INTEGRITY
 12

	)

28 
	#bio_Êagged
(
bio
, 
Êag
Ë((bio)->
bi_Êags
 & (1 << (Êag)))

	)

33 
	#BIO_POOL_BITS
 (4)

	)

34 
	#BIO_POOL_NONE
 ((1UL << 
BIO_POOL_BITS
Ë- 1)

	)

35 
	#BIO_POOL_OFFSET
 (
BITS_PER_LONG
 - 
BIO_POOL_BITS
)

	)

36 
	#BIO_POOL_MASK
 (1UL << 
BIO_POOL_OFFSET
)

	)

37 
	#BIO_POOL_IDX
(
bio
Ë((bio)->
bi_Êags
 >> 
BIO_POOL_OFFSET
)

	)

68 
	ebio_rw_Êags
 {

69 
	mBIO_RW
,

70 
	mBIO_RW_FAILFAST_DEV
,

71 
	mBIO_RW_FAILFAST_TRANSPORT
,

72 
	mBIO_RW_FAILFAST_DRIVER
,

74 
	mBIO_RW_AHEAD
,

75 
	mBIO_RW_BARRIER
,

76 
	mBIO_RW_SYNCIO
,

77 
	mBIO_RW_UNPLUG
,

78 
	mBIO_RW_META
,

79 
	mBIO_RW_DISCARD
,

80 
	mBIO_RW_NOIDLE
,

85 
	mBIO_RW_FLUSH
,

86 
	mBIO_RW_FUA
,

91 
	mBIO_RW_THROTTLED
,

94 
	#BIO_FLUSH
 (1 << 
BIO_RW_FLUSH
)

	)

95 
	#BIO_FUA
 (1 << 
BIO_RW_FUA
)

	)

96 
	#BIO_DISCARD
 (1 << 
BIO_RW_DISCARD
)

	)

101 
	erq_Êag_bôs
 {

102 
	m__REQ_WRITE
,

103 
	m__REQ_FAILFAST_DEV
,

104 
	m__REQ_FAILFAST_TRANSPORT
,

105 
	m__REQ_FAILFAST_DRIVER
,

107 
	m__REQ_DISCARD
,

108 
	m__REQ_SORTED
,

109 
	m__REQ_SOFTBARRIER
,

110 
	m__REQ_HARDBARRIER
,

111 
	m__REQ_FUA
,

112 
	m__REQ_NOMERGE
,

113 
	m__REQ_STARTED
,

114 
	m__REQ_DONTPREP
,

115 
	m__REQ_QUEUED
,

116 
	m__REQ_ELVPRIV
,

117 
	m__REQ_FAILED
,

118 
	m__REQ_QUIET
,

119 
	m__REQ_PREEMPT
,

120 
	m__REQ_ORDERED_COLOR
,

121 
	m__REQ_SYNC
,

122 
	m__REQ_ALLOCED
,

123 
	m__REQ_META
,

124 
	m__REQ_COPY_USER
,

125 
	m__REQ_INTEGRITY
,

126 
	m__REQ_NOIDLE
,

127 
	m__REQ_IO_STAT
,

128 
	m__REQ_MIXED_MERGE
,

129 
	m__REQ_FLUSH
,

130 
	m__REQ_FLUSH_SEQ
,

131 
	m__REQ_NR_BITS
,

134 
	#REQ_WRITE
 (1 << 
__REQ_WRITE
)

	)

135 
	#REQ_RW
 
REQ_WRITE


	)

137 
	#REQ_FAILFAST_DEV
 (1 << 
__REQ_FAILFAST_DEV
)

	)

138 
	#REQ_FAILFAST_TRANSPORT
 (1 << 
__REQ_FAILFAST_TRANSPORT
)

	)

139 
	#REQ_FAILFAST_DRIVER
 (1 << 
__REQ_FAILFAST_DRIVER
)

	)

140 
	#REQ_HARDBARRIER
 (1 << 
__REQ_HARDBARRIER
)

	)

142 
	#REQ_SYNC
 (1 << 
__REQ_SYNC
)

	)

143 
	#REQ_RW_SYNC
 
REQ_SYNC


	)

145 
	#REQ_META
 (1 << 
__REQ_META
)

	)

146 
	#REQ_RW_META
 
REQ_META


	)

148 
	#REQ_DISCARD
 (1 << 
__REQ_DISCARD
)

	)

149 
	#REQ_NOIDLE
 (1 << 
__REQ_NOIDLE
)

	)

151 
	#REQ_FAILFAST_MASK
 \

152 (
REQ_FAILFAST_DEV
 | 
REQ_FAILFAST_TRANSPORT
 | 
REQ_FAILFAST_DRIVER
)

	)

153 
	#REQ_COMMON_MASK
 \

154 (
REQ_WRITE
 | 
REQ_FAILFAST_MASK
 | 
REQ_HARDBARRIER
 | 
REQ_SYNC
 | \

155 
REQ_META
 | 
REQ_DISCARD
 | 
REQ_NOIDLE
 | 
REQ_FLUSH
 | 
REQ_FUA
)

	)

156 
	#REQ_CLONE_MASK
 
REQ_COMMON_MASK


	)

158 
	#REQ_SORTED
 (1 << 
__REQ_SORTED
)

	)

159 
	#REQ_SOFTBARRIER
 (1 << 
__REQ_SOFTBARRIER
)

	)

160 
	#REQ_FUA
 (1 << 
__REQ_FUA
)

	)

161 
	#REQ_NOMERGE
 (1 << 
__REQ_NOMERGE
)

	)

162 
	#REQ_STARTED
 (1 << 
__REQ_STARTED
)

	)

163 
	#REQ_DONTPREP
 (1 << 
__REQ_DONTPREP
)

	)

164 
	#REQ_QUEUED
 (1 << 
__REQ_QUEUED
)

	)

165 
	#REQ_ELVPRIV
 (1 << 
__REQ_ELVPRIV
)

	)

166 
	#REQ_FAILED
 (1 << 
__REQ_FAILED
)

	)

167 
	#REQ_QUIET
 (1 << 
__REQ_QUIET
)

	)

168 
	#REQ_PREEMPT
 (1 << 
__REQ_PREEMPT
)

	)

169 
	#REQ_ORDERED_COLOR
 (1 << 
__REQ_ORDERED_COLOR
Ë

	)

170 
	#REQ_ALLOCED
 (1 << 
__REQ_ALLOCED
)

	)

171 
	#REQ_COPY_USER
 (1 << 
__REQ_COPY_USER
)

	)

172 
	#REQ_INTEGRITY
 (1 << 
__REQ_INTEGRITY
)

	)

173 
	#REQ_FLUSH
 (1 << 
__REQ_FLUSH
)

	)

174 
	#REQ_FLUSH_SEQ
 (1 << 
__REQ_FLUSH_SEQ
)

	)

175 
	#REQ_IO_STAT
 (1 << 
__REQ_IO_STAT
)

	)

176 
	#REQ_MIXED_MERGE
 (1 << 
__REQ_MIXED_MERGE
)

	)

178 
	#REQ_WRITE_FLUSH
 (
REQ_WRITE
 | 
REQ_SYNC
 | 
REQ_NOIDLE
 | 
REQ_FLUSH
)

	)

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/param.h

1 #i‚de‡
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/∑øm.h
>

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3) \

136 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
	g__GNUC__
 == 4 \

137 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

138 && 
__GNUC_RH_RELEASE__
 >= 31)

139 
	#__w¨nde˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

141 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

142 
	#__îr‹de˛
(
«me
, 
msg
) \

143 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

145 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

146 
	#__w¨«âr
(
msg
)

	)

147 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

151 #i‡
__GNUC_PREREQ
 (2,97)

153 
	#__Êex¨r
 []

	)

155 #ifde‡
__GNUC__


156 
	#__Êex¨r
 [0]

	)

158 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

159 
	#__Êex¨r
 []

	)

162 
	#__Êex¨r
 [1]

	)

178 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

180 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 #ifde‡
__˝lu•lus


182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

185 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

186 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

188 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

189 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

202 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

203 
	#__©åibuã__
(
xyz
Ë

	)

209 #i‡
__GNUC_PREREQ
 (2,96)

210 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

212 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (2,96)

219 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

221 
	#__©åibuã_puª__


	)

227 #i‡
__GNUC_PREREQ
 (3,1)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

229 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

231 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

232 
	#__©åibuã_noölöe__


	)

236 #i‡
__GNUC_PREREQ
 (3,2)

237 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

239 
	#__©åibuã_dïªˇãd__


	)

248 #i‡
__GNUC_PREREQ
 (2,8)

249 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

251 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

258 #i‡
__GNUC_PREREQ
 (2,97)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

260 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

262 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

267 #i‡
__GNUC_PREREQ
 (3,3)

268 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

270 
	#__n⁄nuŒ
(
∑øms
)

	)

275 #i‡
__GNUC_PREREQ
 (3,4)

276 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

277 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

278 #i‡
__USE_FORTIFY_LEVEL
 > 0

279 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

282 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

284 #i‚de‡
__wur


285 
	#__wur


	)

289 #i‡
__GNUC_PREREQ
 (3,2)

290 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

292 
	#__Æways_ölöe
 
__ölöe


	)

297 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

298 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

299 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

300 && 
__GNUC_RH_RELEASE__
 >= 31)

301 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


302 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

303 #i‡
__GNUC_PREREQ
 (4,3) \

304 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

305 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

306 && 
__GNUC_RH_RELEASE__
 >= 31)

307 
	#__exã∫_Æways_ölöe
 \

308 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

310 
	#__exã∫_Æways_ölöe
 \

311 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

314 
	#__exã∫_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__exã∫_Æways_ölöe
 \

317 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

319 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

326 #i‡
__GNUC_PREREQ
 (4,3) \

327 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

328 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

329 && 
__GNUC_RH_RELEASE__
 >= 31)

330 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

331 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

338 #i‡!
__GNUC_PREREQ
 (2,8)

339 
	#__exãnsi⁄__


	)

343 #i‡!
__GNUC_PREREQ
 (2,92)

344 
	#__ª°ri˘


	)

350 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


351 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

353 #ifde‡
__GNUC__


354 
	#__ª°ri˘_¨r


	)

356 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

357 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

360 
	#__ª°ri˘_¨r


	)

365 
	~<bôs/w‹dsize.h
>

367 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


368 
	#__LDBL_COMPAT
 1

	)

369 #ifde‡
__REDIRECT


370 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

371 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

372 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

373 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

374 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

375 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

376 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

377 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

378 
	#__LDBL_REDIR_DECL
(
«me
) \

379 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

380 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

381 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

382 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

383 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

386 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


387 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

388 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

389 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

390 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

391 
	#__LDBL_REDIR_DECL
(
«me
)

	)

392 #ifde‡
__REDIRECT


393 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

394 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

395 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/syscall.h

19 #i‚de‡
_SYSCALL_H


20 
	#_SYSCALL_H
 1

	)

25 
	~<asm/uni°d.h
>

27 #i‚de‡
_LIBC


32 
	~<bôs/sysˇŒ.h
>

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

9 #i‚de‡
__ASSEMBLY__


11 
	tumode_t
;

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/asm/param.h

1 
	~<asm-gíîic/∑øm.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~"posix_ty≥s_32.h
"

4 
	~"posix_ty≥s_64.h
"

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (Ë(
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (Ë(
x
); \

51 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

56 
	#__bsw≠_c⁄°™t_32
(
x
) \

57 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

58 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

60 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

61 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

62 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

63 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

64 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

65 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

66 || 
deföed
 
	g__amdÁm10__
)

69 
	#__bsw≠_32
(
x
) \

70 (
__exãnsi⁄__
 \

71 ({ 
__v
, 
__x
 = (
x
); \

72 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

73 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

75 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

76 
__v
; }))

	)

78 
	#__bsw≠_32
(
x
) \

79 (
__exãnsi⁄__
 \

80 ({ 
__v
, 
__x
 = (
x
); \

81 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

82 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

84 
	`__asm__
 ("rorw $8, %w0;" \

87 : "Ù" (
__v
) \

88 : "0" (
__x
) \

90 
__v
; }))

	)

93 
	#__bsw≠_32
(
x
) \

94 (
__exãnsi⁄__
 \

95 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

99 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

101 
	#__bsw≠_c⁄°™t_64
(
x
) \

102 ((((
x
) & 0xff00000000000000ull) >> 56) \

103 | (((
x
) & 0x00ff000000000000ull) >> 40) \

104 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

105 | (((
x
) & 0x000000ff00000000ull) >> 8) \

106 | (((
x
) & 0x00000000ff000000ull) << 8) \

107 | (((
x
) & 0x0000000000ff0000ull) << 24) \

108 | (((
x
) & 0x000000000000ff00ull) << 40) \

109 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

111 #i‡
__WORDSIZE
 == 64

112 
	#__bsw≠_64
(
x
) \

113 (
__exãnsi⁄__
 \

114 ({ 
__v
, 
__x
 = (
x
); \

115 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

116 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

118 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

119 
__v
; }))

	)

121 
	#__bsw≠_64
(
x
) \

122 (
__exãnsi⁄__
 \

123 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

124 
__l
[2]; } 
__w
, 
__r
; \

125 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

126 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

129 
__w
.
__Œ
 = (
x
); \

130 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

131 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

133 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

25 #i‚de‡
NR_OPEN


26 
	#__undef_NR_OPEN


	)

28 #i‚de‡
LINK_MAX


29 
	#__undef_LINK_MAX


	)

31 #i‚de‡
OPEN_MAX


32 
	#__undef_OPEN_MAX


	)

34 #i‚de‡
ARG_MAX


35 
	#__undef_ARG_MAX


	)

39 
	~<löux/limôs.h
>

42 #ifde‡
__undef_NR_OPEN


43 #unde‡
NR_OPEN


44 #unde‡
__undef_NR_OPEN


47 #ifde‡
__undef_LINK_MAX


48 #unde‡
LINK_MAX


49 #unde‡
__undef_LINK_MAX


52 #ifde‡
__undef_OPEN_MAX


53 #unde‡
OPEN_MAX


54 #unde‡
__undef_OPEN_MAX


57 #ifde‡
__undef_ARG_MAX


58 #unde‡
ARG_MAX


59 #unde‡
__undef_ARG_MAX


63 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

65 
	#PTHREAD_KEYS_MAX
 1024

	)

68 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

70 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

73 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

75 #unde‡
PTHREAD_THREADS_MAX


79 
	#AIO_PRIO_DELTA_MAX
 20

	)

82 
	#PTHREAD_STACK_MIN
 16384

	)

85 
	#DELAYTIMER_MAX
 2147483647

	)

88 
	#TTY_NAME_MAX
 32

	)

91 
	#LOGIN_NAME_MAX
 256

	)

94 
	#HOST_NAME_MAX
 64

	)

97 
	#MQ_PRIO_MAX
 32768

	)

100 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

35 
	#SCHED_IDLE
 5

	)

37 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

40 #ifde‡
__USE_MISC


42 
	#CSIGNAL
 0x000000f‡

	)

43 
	#CLONE_VM
 0x00000100

	)

44 
	#CLONE_FS
 0x00000200

	)

45 
	#CLONE_FILES
 0x00000400

	)

46 
	#CLONE_SIGHAND
 0x00000800

	)

47 
	#CLONE_PTRACE
 0x00002000

	)

48 
	#CLONE_VFORK
 0x00004000

	)

50 
	#CLONE_PARENT
 0x00008000

	)

52 
	#CLONE_THREAD
 0x00010000

	)

53 
	#CLONE_NEWNS
 0x00020000

	)

54 
	#CLONE_SYSVSEM
 0x00040000

	)

55 
	#CLONE_SETTLS
 0x00080000

	)

56 
	#CLONE_PARENT_SETTID
 0x00100000

	)

58 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

60 
	#CLONE_DETACHED
 0x00400000

	)

61 
	#CLONE_UNTRACED
 0x00800000

	)

63 
	#CLONE_CHILD_SETTID
 0x01000000

	)

65 
	#CLONE_NEWUTS
 0x04000000

	)

66 
	#CLONE_NEWIPC
 0x08000000

	)

67 
	#CLONE_NEWUSER
 0x10000000

	)

68 
	#CLONE_NEWPID
 0x20000000

	)

69 
	#CLONE_NEWNET
 0x40000000

	)

70 
	#CLONE_IO
 0x80000000

	)

74 
	ssched_∑øm


76 
	m__sched_¥i‹ôy
;

79 
	g__BEGIN_DECLS


81 #ifde‡
__USE_MISC


83 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

84 
__Êags
, *
__¨g
, ...Ë
__THROW
;

87 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

90 
	$sched_gë˝u
 (Ë
__THROW
;

93 
__END_DECLS


97 #i‡!
deföed
 
__deföed_sched∑øm
 \

98 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

99 
	#__deföed_sched∑øm
 1

	)

101 
	s__sched_∑øm


103 
__sched_¥i‹ôy
;

105 #unde‡
__√ed_sched∑øm


109 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


110 
	#__˝u_£t_t_deföed


	)

112 
	#__CPU_SETSIZE
 1024

	)

113 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

116 
	t__˝u_mask
;

119 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

120 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

125 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

126 } 
	t˝u_£t_t
;

129 #i‡
	`__GNUC_PREREQ
 (2, 91)

130 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

131 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

133 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

135 
size_t
 
__i
; \

136 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

137 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

138 
__i
 = 0; __ò< 
__imax
; ++__i) \

139 
__bôs
[
__i
] = 0; \

140 
	}
} 0)

	)

142 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

143 (
__exãnsi⁄__
 \

144 ({ 
size_t
 
__˝u
 = (
˝u
); \

145 
__˝u
 < 8 * (
£tsize
) \

146 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

147 |
	`__CPUMASK
 (
__˝u
)) \

148 : 0; }))

	)

149 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

150 (
__exãnsi⁄__
 \

151 ({ 
size_t
 
__˝u
 = (
˝u
); \

152 
__˝u
 < 8 * (
£tsize
) \

153 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

154 &~
	`__CPUMASK
 (
__˝u
)) \

155 : 0; }))

	)

156 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

157 (
__exãnsi⁄__
 \

158 ({ 
size_t
 
__˝u
 = (
˝u
); \

159 
__˝u
 < 8 * (
£tsize
) \

160 ? ((((
__c⁄°
 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

161 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

162 : 0; }))

	)

164 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

165 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

167 #i‡
__GNUC_PREREQ
 (2, 91)

168 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

169 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

171 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

172 (
__exãnsi⁄__
 \

173 ({ 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

174 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

175 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

176 
size_t
 
__i
; \

177 
__i
 = 0; __ò< 
__imax
; ++__i) \

178 i‡(
__bôs
[
__i
] != __bits[__i]) \

180 
__i
 =
__imax
; }))

	)

183 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

184 (
__exãnsi⁄__
 \

185 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

186 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

187 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

188 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

189 
size_t
 
__i
; \

190 
__i
 = 0; __ò< 
__imax
; ++__i) \

191 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

192 
__de°
; }))

	)

194 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

195 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

196 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

197 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

199 
__BEGIN_DECLS


201 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

202 
__THROW
;

203 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

204 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

206 
__END_DECLS


	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52 
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] |
	`__FDMASK
 (d))

	)

60 
	#__FD_CLR
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] &~
	`__FDMASK
 (d))

	)

61 
	#__FD_ISSET
(
d
, 
£t
) \

62 ((
	`__FDS_BITS
 (
£t
)[
	`__FDELT
 (
d
)] & 
	`__FDMASK
 (d)Ë!0)

	)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

25 
	$__libc_lock_deföe_ªcursive
 (, 
_IO_lock_t
)

28 #ifde‡
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


29 
	t_IO_lock_öôülizî
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

30 #ñi‡
	t_IO_MTSAFE_IO


31 #îr‹ 
	tlibio
 
	t√eds
 
	tªcursive
 
	tmuãxes
 
	t_IO_MTSAFE_IO


34 
	t_IO_lock_öô
(
	t_«me
Ë
	t__libc_lock_öô_ªcursive
 (_«me)

	)

35 
	t_IO_lock_föi
(
	t_«me
Ë
	t__libc_lock_föi_ªcursive
 (_«me)

	)

36 
	t_IO_lock_lock
(
	t_«me
Ë
	t__libc_lock_lock_ªcursive
 (_«me)

	)

37 
	t_IO_lock_åylock
(
	t_«me
Ë
	t__libc_lock_åylock_ªcursive
 (_«me)

	)

38 
	t_IO_lock_u∆ock
(
	t_«me
Ë
	t__libc_lock_u∆ock_ªcursive
 (_«me)

	)

41 
	t_IO_˛ónup_ªgi⁄_°¨t
(
	t_f˘
, 
	t_Â
) \

42 
	t__libc_˛ónup_ªgi⁄_°¨t
 (((
	t_Â
)->
	t_Êags
 & 
	t_IO_USER_LOCK
Ë=0, 
	t_f˘
, _Â)

	)

43 
	t_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
	t_f˘
) \

44 
	t__libc_˛ónup_ªgi⁄_°¨t
 (1, 
	t_f˘
, 
	tNULL
)

	)

45 
	t_IO_˛ónup_ªgi⁄_íd
(
	t_doô
) \

46 
	t__libc_˛ónup_ªgi⁄_íd
 (
	t_doô
)

	)

48 #i‡
	tdeföed
 
	t_LIBC
 && !deföed 
	tNOT_IN_libc


49 
	t_IO_acquúe_lock
(
	t_Â
) \

50 
	t_IO_˛ónup_ªgi⁄_°¨t
 (((*Ë(*)Ë
	t_IO_fu∆ockfûe
, (
	t_Â
)); \

51 
	`_IO_Êockfûe
 (
_Â
)

	)

53 
	#_IO_ªÀa£_lock
(
_Â
) \

54 
	`_IO_fu∆ockfûe
 (
_Â
); \

55 
	`_IO_˛ónup_ªgi⁄_íd
 (0)

	)

	@/usr/include/bits/syscall.h

3 #i‚de‡
_SYSCALL_H


7 
	~<bôs/w‹dsize.h
>

9 
	#SYS__sys˘l
 
__NR__sys˘l


	)

10 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

11 
	#SYS_ac˘
 
__NR_ac˘


	)

12 
	#SYS_add_key
 
__NR_add_key


	)

13 
	#SYS_adjtimex
 
__NR_adjtimex


	)

14 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

15 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

16 
	#SYS_brk
 
__NR_brk


	)

17 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

18 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

19 
	#SYS_chdú
 
__NR_chdú


	)

20 
	#SYS_chmod
 
__NR_chmod


	)

21 
	#SYS_chown
 
__NR_chown


	)

22 
	#SYS_chroŸ
 
__NR_chroŸ


	)

23 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

24 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

25 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

26 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

27 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

28 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

29 
	#SYS_˛o£
 
__NR_˛o£


	)

30 
	#SYS_¸ót
 
__NR_¸ót


	)

31 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

32 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

33 
	#SYS_dup
 
__NR_dup


	)

34 
	#SYS_dup2
 
__NR_dup2


	)

35 
	#SYS_dup3
 
__NR_dup3


	)

36 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

37 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

38 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

39 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

40 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

41 
	#SYS_evítfd
 
__NR_evítfd


	)

42 
	#SYS_evítfd2
 
__NR_evítfd2


	)

43 
	#SYS_execve
 
__NR_execve


	)

44 
	#SYS_exô
 
__NR_exô


	)

45 
	#SYS_exô_group
 
__NR_exô_group


	)

46 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

47 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

48 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

49 
	#SYS_fchdú
 
__NR_fchdú


	)

50 
	#SYS_fchmod
 
__NR_fchmod


	)

51 
	#SYS_fchmod©
 
__NR_fchmod©


	)

52 
	#SYS_fchown
 
__NR_fchown


	)

53 
	#SYS_fchow«t
 
__NR_fchow«t


	)

54 
	#SYS_f˙é
 
__NR_f˙é


	)

55 
	#SYS_fd©async
 
__NR_fd©async


	)

56 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

57 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

58 
	#SYS_Êock
 
__NR_Êock


	)

59 
	#SYS_f‹k
 
__NR_f‹k


	)

60 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

61 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

62 
	#SYS_f°©
 
__NR_f°©


	)

63 
	#SYS_f°©fs
 
__NR_f°©fs


	)

64 
	#SYS_fsync
 
__NR_fsync


	)

65 
	#SYS_·runˇã
 
__NR_·runˇã


	)

66 
	#SYS_fuãx
 
__NR_fuãx


	)

67 
	#SYS_futimeßt
 
__NR_futimeßt


	)

68 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

69 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

70 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

71 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

72 
	#SYS_gëcwd
 
__NR_gëcwd


	)

73 
	#SYS_gëdíts
 
__NR_gëdíts


	)

74 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

75 
	#SYS_gëegid
 
__NR_gëegid


	)

76 
	#SYS_gëeuid
 
__NR_gëeuid


	)

77 
	#SYS_gëgid
 
__NR_gëgid


	)

78 
	#SYS_gëgroups
 
__NR_gëgroups


	)

79 
	#SYS_gëôimî
 
__NR_gëôimî


	)

80 
	#SYS_gëpgid
 
__NR_gëpgid


	)

81 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

82 
	#SYS_gëpid
 
__NR_gëpid


	)

83 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

84 
	#SYS_gëµid
 
__NR_gëµid


	)

85 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

86 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

87 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

88 
	#SYS_gëæimô
 
__NR_gëæimô


	)

89 
	#SYS_gërußge
 
__NR_gërußge


	)

90 
	#SYS_gësid
 
__NR_gësid


	)

91 
	#SYS_gëtid
 
__NR_gëtid


	)

92 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

93 
	#SYS_gëuid
 
__NR_gëuid


	)

94 
	#SYS_gëx©å
 
__NR_gëx©å


	)

95 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

96 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

97 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

98 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

99 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

100 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

101 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

102 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

103 
	#SYS_io_£tup
 
__NR_io_£tup


	)

104 
	#SYS_io_submô
 
__NR_io_submô


	)

105 
	#SYS_io˘l
 
__NR_io˘l


	)

106 
	#SYS_i›îm
 
__NR_i›îm


	)

107 
	#SYS_i›l
 
__NR_i›l


	)

108 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

109 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

110 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

111 
	#SYS_key˘l
 
__NR_key˘l


	)

112 
	#SYS_kûl
 
__NR_kûl


	)

113 
	#SYS_lchown
 
__NR_lchown


	)

114 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

115 
	#SYS_lök
 
__NR_lök


	)

116 
	#SYS_lök©
 
__NR_lök©


	)

117 
	#SYS_li°x©å
 
__NR_li°x©å


	)

118 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

119 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

120 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

121 
	#SYS_l£ek
 
__NR_l£ek


	)

122 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

123 
	#SYS_l°©
 
__NR_l°©


	)

124 
	#SYS_madvi£
 
__NR_madvi£


	)

125 
	#SYS_mböd
 
__NR_mböd


	)

126 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

127 
	#SYS_möc‹e
 
__NR_möc‹e


	)

128 
	#SYS_mkdú
 
__NR_mkdú


	)

129 
	#SYS_mkdú©
 
__NR_mkdú©


	)

130 
	#SYS_mknod
 
__NR_mknod


	)

131 
	#SYS_mknod©
 
__NR_mknod©


	)

132 
	#SYS_mlock
 
__NR_mlock


	)

133 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

134 
	#SYS_mm≠
 
__NR_mm≠


	)

135 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

136 
	#SYS_mou¡
 
__NR_mou¡


	)

137 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

138 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

139 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

140 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

141 
	#SYS_mq_›í
 
__NR_mq_›í


	)

142 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

143 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

144 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

145 
	#SYS_mªm≠
 
__NR_mªm≠


	)

146 
	#SYS_msync
 
__NR_msync


	)

147 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

148 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

149 
	#SYS_munm≠
 
__NR_munm≠


	)

150 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

151 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

152 
	#SYS_›í
 
__NR_›í


	)

153 
	#SYS_›í©
 
__NR_›í©


	)

154 
	#SYS_∑u£
 
__NR_∑u£


	)

155 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

156 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

157 
	#SYS_pùe
 
__NR_pùe


	)

158 
	#SYS_pùe2
 
__NR_pùe2


	)

159 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

160 
	#SYS_pﬁl
 
__NR_pﬁl


	)

161 
	#SYS_µﬁl
 
__NR_µﬁl


	)

162 
	#SYS_¥˘l
 
__NR_¥˘l


	)

163 
	#SYS_¥ód64
 
__NR_¥ód64


	)

164 
	#SYS_¥ódv
 
__NR_¥ódv


	)

165 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

166 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

167 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

168 
	#SYS_±ø˚
 
__NR_±ø˚


	)

169 
	#SYS_puçmsg
 
__NR_puçmsg


	)

170 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

171 
	#SYS_pwrôev
 
__NR_pwrôev


	)

172 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

173 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

174 
	#SYS_ªad
 
__NR_ªad


	)

175 
	#SYS_ªadahód
 
__NR_ªadahód


	)

176 
	#SYS_ªadlök
 
__NR_ªadlök


	)

177 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

178 
	#SYS_ªadv
 
__NR_ªadv


	)

179 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

180 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

181 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

182 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

183 
	#SYS_ª«me
 
__NR_ª«me


	)

184 
	#SYS_ª«mót
 
__NR_ª«mót


	)

185 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

186 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

187 
	#SYS_rmdú
 
__NR_rmdú


	)

188 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

189 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

190 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

191 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

192 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

193 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

194 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

195 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

196 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

197 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

198 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

199 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

200 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

201 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

202 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

203 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

204 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

205 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

206 
	#SYS_£À˘
 
__NR_£À˘


	)

207 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

208 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

209 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

210 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

211 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

212 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

213 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

214 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

215 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

216 
	#SYS_£tgid
 
__NR_£tgid


	)

217 
	#SYS_£tgroups
 
__NR_£tgroups


	)

218 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

219 
	#SYS_£tôimî
 
__NR_£tôimî


	)

220 
	#SYS_£çgid
 
__NR_£çgid


	)

221 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

222 
	#SYS_£åegid
 
__NR_£åegid


	)

223 
	#SYS_£åesgid
 
__NR_£åesgid


	)

224 
	#SYS_£åesuid
 
__NR_£åesuid


	)

225 
	#SYS_£åeuid
 
__NR_£åeuid


	)

226 
	#SYS_£ålimô
 
__NR_£ålimô


	)

227 
	#SYS_£tsid
 
__NR_£tsid


	)

228 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

229 
	#SYS_£tuid
 
__NR_£tuid


	)

230 
	#SYS_£tx©å
 
__NR_£tx©å


	)

231 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

232 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

233 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

234 
	#SYS_•li˚
 
__NR_•li˚


	)

235 
	#SYS_°©
 
__NR_°©


	)

236 
	#SYS_°©fs
 
__NR_°©fs


	)

237 
	#SYS_sw≠off
 
__NR_sw≠off


	)

238 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

239 
	#SYS_symlök
 
__NR_symlök


	)

240 
	#SYS_symlök©
 
__NR_symlök©


	)

241 
	#SYS_sync
 
__NR_sync


	)

242 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

243 
	#SYS_syncfs
 
__NR_syncfs


	)

244 
	#SYS_sysfs
 
__NR_sysfs


	)

245 
	#SYS_sysöfo
 
__NR_sysöfo


	)

246 
	#SYS_sy¶og
 
__NR_sy¶og


	)

247 
	#SYS_ãe
 
__NR_ãe


	)

248 
	#SYS_tgkûl
 
__NR_tgkûl


	)

249 
	#SYS_time
 
__NR_time


	)

250 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

251 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

252 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

253 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

254 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

255 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

256 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

257 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

258 
	#SYS_times
 
__NR_times


	)

259 
	#SYS_tkûl
 
__NR_tkûl


	)

260 
	#SYS_åunˇã
 
__NR_åunˇã


	)

261 
	#SYS_umask
 
__NR_umask


	)

262 
	#SYS_umou¡2
 
__NR_umou¡2


	)

263 
	#SYS_u«me
 
__NR_u«me


	)

264 
	#SYS_u∆ök
 
__NR_u∆ök


	)

265 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

266 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

267 
	#SYS_u£lib
 
__NR_u£lib


	)

268 
	#SYS_u°©
 
__NR_u°©


	)

269 
	#SYS_utime
 
__NR_utime


	)

270 
	#SYS_utimíßt
 
__NR_utimíßt


	)

271 
	#SYS_utimes
 
__NR_utimes


	)

272 
	#SYS_vf‹k
 
__NR_vf‹k


	)

273 
	#SYS_vh™gup
 
__NR_vh™gup


	)

274 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

275 
	#SYS_v£rvî
 
__NR_v£rvî


	)

276 
	#SYS_waô4
 
__NR_waô4


	)

277 
	#SYS_waôid
 
__NR_waôid


	)

278 
	#SYS_wrôe
 
__NR_wrôe


	)

279 
	#SYS_wrôev
 
__NR_wrôev


	)

280 #i‡
__WORDSIZE
 == 64

281 
	#SYS_ac˚±
 
__NR_ac˚±


	)

282 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

283 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

284 
	#SYS_böd
 
__NR_böd


	)

285 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

286 
	#SYS_ïﬁl_˘l_ﬁd
 
__NR_ïﬁl_˘l_ﬁd


	)

287 
	#SYS_ïﬁl_waô_ﬁd
 
__NR_ïﬁl_waô_ﬁd


	)

288 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

289 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

290 
	#SYS_gë_˝u
 
__NR_gë_˝u


	)

291 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

292 
	#SYS_gësock«me
 
__NR_gësock«me


	)

293 
	#SYS_gësock›t
 
__NR_gësock›t


	)

294 
	#SYS_li°í
 
__NR_li°í


	)

295 
	#SYS_msg˘l
 
__NR_msg˘l


	)

296 
	#SYS_msggë
 
__NR_msggë


	)

297 
	#SYS_msgrcv
 
__NR_msgrcv


	)

298 
	#SYS_msg¢d
 
__NR_msg¢d


	)

299 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

300 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

301 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

302 
	#SYS_¥limô64
 
__NR_¥limô64


	)

303 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

304 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

305 
	#SYS_£curôy
 
__NR_£curôy


	)

306 
	#SYS_£m˘l
 
__NR_£m˘l


	)

307 
	#SYS_£mgë
 
__NR_£mgë


	)

308 
	#SYS_£m›
 
__NR_£m›


	)

309 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

310 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

311 
	#SYS_£ndto
 
__NR_£ndto


	)

312 
	#SYS_£t_ns
 
__NR_£t_ns


	)

313 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

314 
	#SYS_shm©
 
__NR_shm©


	)

315 
	#SYS_shm˘l
 
__NR_shm˘l


	)

316 
	#SYS_shmdt
 
__NR_shmdt


	)

317 
	#SYS_shmgë
 
__NR_shmgë


	)

318 
	#SYS_shutdown
 
__NR_shutdown


	)

319 
	#SYS_sockë
 
__NR_sockë


	)

320 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

321 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

323 
	#SYS__Œ£ek
 
__NR__Œ£ek


	)

324 
	#SYS__√w£À˘
 
__NR__√w£À˘


	)

325 
	#SYS_bdÊush
 
__NR_bdÊush


	)

326 
	#SYS_bªak
 
__NR_bªak


	)

327 
	#SYS_chown32
 
__NR_chown32


	)

328 
	#SYS_Ádvi£64_64
 
__NR_Ádvi£64_64


	)

329 
	#SYS_fchown32
 
__NR_fchown32


	)

330 
	#SYS_f˙é64
 
__NR_f˙é64


	)

331 
	#SYS_f°©64
 
__NR_f°©64


	)

332 
	#SYS_f°©©64
 
__NR_f°©©64


	)

333 
	#SYS_f°©fs64
 
__NR_f°©fs64


	)

334 
	#SYS_·ime
 
__NR_·ime


	)

335 
	#SYS_·runˇã64
 
__NR_·runˇã64


	)

336 
	#SYS_gë˝u
 
__NR_gë˝u


	)

337 
	#SYS_gëegid32
 
__NR_gëegid32


	)

338 
	#SYS_gëeuid32
 
__NR_gëeuid32


	)

339 
	#SYS_gëgid32
 
__NR_gëgid32


	)

340 
	#SYS_gëgroups32
 
__NR_gëgroups32


	)

341 
	#SYS_gëªsgid32
 
__NR_gëªsgid32


	)

342 
	#SYS_gëªsuid32
 
__NR_gëªsuid32


	)

343 
	#SYS_gëuid32
 
__NR_gëuid32


	)

344 
	#SYS_gây
 
__NR_gây


	)

345 
	#SYS_idÀ
 
__NR_idÀ


	)

346 
	#SYS_ùc
 
__NR_ùc


	)

347 
	#SYS_lchown32
 
__NR_lchown32


	)

348 
	#SYS_lock
 
__NR_lock


	)

349 
	#SYS_l°©64
 
__NR_l°©64


	)

350 
	#SYS_madvi£1
 
__NR_madvi£1


	)

351 
	#SYS_mm≠2
 
__NR_mm≠2


	)

352 
	#SYS_mpx
 
__NR_mpx


	)

353 
	#SYS_ni˚
 
__NR_ni˚


	)

354 
	#SYS_ﬁdf°©
 
__NR_ﬁdf°©


	)

355 
	#SYS_ﬁdl°©
 
__NR_ﬁdl°©


	)

356 
	#SYS_ﬁdﬁdu«me
 
__NR_ﬁdﬁdu«me


	)

357 
	#SYS_ﬁd°©
 
__NR_ﬁd°©


	)

358 
	#SYS_ﬁdu«me
 
__NR_ﬁdu«me


	)

359 
	#SYS_¥of
 
__NR_¥of


	)

360 
	#SYS_¥ofû
 
__NR_¥ofû


	)

361 
	#SYS_ªaddú
 
__NR_ªaddú


	)

362 
	#SYS_£ndfûe64
 
__NR_£ndfûe64


	)

363 
	#SYS_£tfsgid32
 
__NR_£tfsgid32


	)

364 
	#SYS_£tfsuid32
 
__NR_£tfsuid32


	)

365 
	#SYS_£tgid32
 
__NR_£tgid32


	)

366 
	#SYS_£tgroups32
 
__NR_£tgroups32


	)

367 
	#SYS_£åegid32
 
__NR_£åegid32


	)

368 
	#SYS_£åesgid32
 
__NR_£åesgid32


	)

369 
	#SYS_£åesuid32
 
__NR_£åesuid32


	)

370 
	#SYS_£åeuid32
 
__NR_£åeuid32


	)

371 
	#SYS_£tuid32
 
__NR_£tuid32


	)

372 
	#SYS_sgëmask
 
__NR_sgëmask


	)

373 
	#SYS_siga˘i⁄
 
__NR_siga˘i⁄


	)

374 
	#SYS_sig«l
 
__NR_sig«l


	)

375 
	#SYS_sig≥ndög
 
__NR_sig≥ndög


	)

376 
	#SYS_sig¥ocmask
 
__NR_sig¥ocmask


	)

377 
	#SYS_sigªtu∫
 
__NR_sigªtu∫


	)

378 
	#SYS_sigsu•íd
 
__NR_sigsu•íd


	)

379 
	#SYS_sockëˇŒ
 
__NR_sockëˇŒ


	)

380 
	#SYS_s£tmask
 
__NR_s£tmask


	)

381 
	#SYS_°©64
 
__NR_°©64


	)

382 
	#SYS_°©fs64
 
__NR_°©fs64


	)

383 
	#SYS_°ime
 
__NR_°ime


	)

384 
	#SYS_°ty
 
__NR_°ty


	)

385 
	#SYS_åunˇã64
 
__NR_åunˇã64


	)

386 
	#SYS_ugëæimô
 
__NR_ugëæimô


	)

387 
	#SYS_ulimô
 
__NR_ulimô


	)

388 
	#SYS_umou¡
 
__NR_umou¡


	)

389 
	#SYS_vm86
 
__NR_vm86


	)

390 
	#SYS_vm86ﬁd
 
__NR_vm86ﬁd


	)

391 
	#SYS_waôpid
 
__NR_waôpid


	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

19 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_UIO_H


24 
	#_BITS_UIO_H
 1

	)

26 
	~<sys/ty≥s.h
>

40 
	#UIO_MAXIOV
 1024

	)

44 
	siovec


46 *
	miov_ba£
;

47 
size_t
 
	miov_Àn
;

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 
	#TIOCSRS485
 0x542F

	)

66 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

67 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

68 
	#TCGETX
 0x5432

	)

69 
	#TCSETX
 0x5433

	)

70 
	#TCSETXF
 0x5434

	)

71 
	#TCSETXW
 0x5435

	)

73 
	#FIONCLEX
 0x5450

	)

74 
	#FIOCLEX
 0x5451

	)

75 
	#FIOASYNC
 0x5452

	)

76 
	#TIOCSERCONFIG
 0x5453

	)

77 
	#TIOCSERGWILD
 0x5454

	)

78 
	#TIOCSERSWILD
 0x5455

	)

79 
	#TIOCGLCKTRMIOS
 0x5456

	)

80 
	#TIOCSLCKTRMIOS
 0x5457

	)

81 
	#TIOCSERGSTRUCT
 0x5458

	)

82 
	#TIOCSERGETLSR
 0x5459

	)

83 
	#TIOCSERGETMULTI
 0x545A

	)

84 
	#TIOCSERSETMULTI
 0x545B

	)

86 
	#TIOCMIWAIT
 0x545C

	)

87 
	#TIOCGICOUNT
 0x545D

	)

93 #i‚de‡
FIOQSIZE


94 
	#TIOCGHAYESESP
 0x545E

	)

95 
	#TIOCSHAYESESP
 0x545F

	)

96 
	#FIOQSIZE
 0x5460

	)

100 
	#TIOCPKT_DATA
 0

	)

101 
	#TIOCPKT_FLUSHREAD
 1

	)

102 
	#TIOCPKT_FLUSHWRITE
 2

	)

103 
	#TIOCPKT_STOP
 4

	)

104 
	#TIOCPKT_START
 8

	)

105 
	#TIOCPKT_NOSTOP
 16

	)

106 
	#TIOCPKT_DOSTOP
 32

	)

108 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm-generic/param.h

1 #i‚de‡
__ASM_GENERIC_PARAM_H


2 
	#__ASM_GENERIC_PARAM_H


	)

5 #i‚de‡
HZ


6 
	#HZ
 100

	)

9 #i‚de‡
EXEC_PAGESIZE


10 
	#EXEC_PAGESIZE
 4096

	)

13 #i‚de‡
NOGROUP


14 
	#NOGROUP
 (-1)

	)

17 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/bits/libc-lock.h

21 #i‚de‡
_BITS_LIBC_LOCK_H


22 
	#_BITS_LIBC_LOCK_H
 1

	)

24 
	~<±hªad.h
>

27 #ifde‡
_IO_MTSAFE_IO


28 
±hªad_muãx_t
 
	t__libc_lock_t
;

29 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

30 #ifde‡
__USE_UNIX98


31 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

33 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

35 
__libc_lock_ªcursive_t
 
	t__πld_lock_ªcursive_t
;

37 
__libc_lock_›aque__
 
	t__libc_lock_t
;

38 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

39 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

43 
±hªad_key_t
 
	t__libc_key_t
;

52 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

53 
CLASS
 
__libc_lock_t
 
NAME
;

	)

54 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

55 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

56 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

59 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

70 #i‡
__LT_SPINLOCK_INIT
 == 0

71 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

74 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

75 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

78 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

79 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

83 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

84 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

85 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

86 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

88 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

89 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

90 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

91 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

93 #i‡
deföed
 
__PIC__


94 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

95 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

96 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

98 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

99 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

101 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
Ë
	`__libc_maybe_ˇŒ
 (
__
##FUNC, ARGS, ELSE)

	)

105 
	#__libc_lock_öô
(
NAME
) \

106 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0))

	)

107 
	#__libc_rwlock_öô
(
NAME
) \

108 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0));

	)

111 
	#__libc_lock_öô_ªcursive
(
NAME
) \

113 i‡(
__±hªad_muãx_öô
 !
NULL
) \

115 
±hªad_muãx©å_t
 
__©å
; \

116 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

117 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

118 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

119 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

121 } 0);

	)

122 
	#__πld_lock_öô_ªcursive
(
NAME
) \

123 
	`__libc_lock_öô_ªcursive
 (
NAME
)

	)

128 
	#__libc_lock_föi
(
NAME
) \

129 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_de°roy
, (&(
NAME
)), 0));

	)

130 
	#__libc_rwlock_föi
(
NAME
) \

131 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0));

	)

134 
	#__libc_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi
 ((NAME).
muãx
)

	)

135 
	#__πld_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi_ªcursive
 (NAME)

	)

138 
	#__libc_lock_lock
(
NAME
) \

139 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_lock
, (&(
NAME
)), 0));

	)

140 
	#__libc_rwlock_rdlock
(
NAME
) \

141 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0));

	)

142 
	#__libc_rwlock_wæock
(
NAME
) \

143 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0));

	)

146 
	#__libc_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock
 ((NAME).
muãx
)

	)

149 
	#__libc_lock_åylock
(
NAME
) \

150 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_åylock
, (&(
NAME
)), 0))

	)

151 
	#__libc_rwlock_åyrdlock
(
NAME
) \

152 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0))

	)

153 
	#__libc_rwlock_åywæock
(
NAME
) \

154 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0))

	)

157 
	#__libc_lock_åylock_ªcursive
(
NAME
Ë
	`__libc_lock_åylock
 ((NAME).
muãx
)

	)

158 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

159 
	`__libc_lock_åylock_ªcursive
 (
NAME
)

	)

162 
	#__libc_lock_u∆ock
(
NAME
) \

163 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_u∆ock
, (&(
NAME
)), 0));

	)

164 
	#__libc_rwlock_u∆ock
(
NAME
) \

165 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0));

	)

168 
	#__libc_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock
 ((NAME).
muãx
)

	)

170 
	#__πld_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock_ªcursive
 (NAME)

	)

171 
	#__πld_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock_ªcursive
 (NAME)

	)

174 #i‡
PTHREAD_ONCE_INIT
 == 0

177 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

178 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

180 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

181 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

185 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

187 i‡(
__±hªad_⁄˚
 !
NULL
) \

188 
	`__±hªad_⁄˚
 (&(
ONCE_CONTROL
), (
INIT_FUNCTION
)); \

189 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

190 
	`INIT_FUNCTION
 (); \

191 (
ONCE_CONTROL
) = 2; \

193 } 0)

	)

197 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

198 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

199 
_avaû
 = (
DOIT
Ë&& 
_±hªad_˛ónup_push_de„r
 !
NULL
; \

200 i‡(
_avaû
) { \

201 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
FCT
), (
ARG
)); \

202 }

	)

205 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

206 i‡(
_avaû
) { \

207 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

209 }

	)

212 
	#__libc_˛ónup_íd
(
DOIT
) \

213 i‡(
_avaû
) { \

214 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

215 }

	)

217 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

218 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

219 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_push
, (&
_buf„r
, (
f˘
), (
¨g
)), 0)

	)

221 
	#__libc_˛ónup_p›
(
execuã
) \

222 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_p›
, (&
_buf„r
, 
execuã
), 0); \

223 }

	)

226 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

227 (
	`__libc_maybe_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1))

	)

230 
	#__libc_gë•ecific
(
KEY
) \

231 (
	`__libc_maybe_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
))

	)

234 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

235 (
	`__libc_maybe_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0))

	)

239 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

240 (
	`__libc_maybe_ˇŒ
 (
__±hªad_©f‹k
, (
PREPARE
, 
PARENT
, 
CHILD
), 0))

	)

242 
__BEGIN_DECLS


244 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

245 (*
__routöe
) (*),

246 *
__¨g
Ë
__THROW
;

248 
	$_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

249 
__execuã
Ë
__THROW
;

255 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

256 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

258 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

260 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

262 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

264 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

266 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

268 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

270 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

271 
__köd
);

273 #ifde‡
__USE_UNIX98


274 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

275 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

277 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

279 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

281 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

283 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

285 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

287 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

290 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

291 (*
__de°r_fun˘i⁄
) (*));

293 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

294 
__c⁄°
 *
__poöãr
);

296 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

298 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

299 (*
__öô_routöe
) ());

301 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

302 (*
__∑ª¡
) (),

303 (*
__chûd
) ());

305 
__END_DECLS


309 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


310 #¥agm®
wók
 
__±hªad_muãx_öô


311 #¥agm®
wók
 
__±hªad_muãx_de°roy


312 #¥agm®
wók
 
__±hªad_muãx_lock


313 #¥agm®
wók
 
__±hªad_muãx_åylock


314 #¥agm®
wók
 
__±hªad_muãx_u∆ock


315 #¥agm®
wók
 
__±hªad_muãx©å_öô


316 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


317 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


318 #¥agm®
wók
 
__±hªad_rwlock_de°roy


319 #¥agm®
wók
 
__±hªad_rwlock_rdlock


320 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


321 #¥agm®
wók
 
__±hªad_rwlock_wæock


322 #¥agm®
wók
 
__±hªad_rwlock_åywæock


323 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


324 #¥agm®
wók
 
__±hªad_key_¸óã


325 #¥agm®
wók
 
__±hªad_£t•ecific


326 #¥agm®
wók
 
__±hªad_gë•ecific


327 #¥agm®
wók
 
__±hªad_⁄˚


328 #¥agm®
wók
 
__±hªad_öôülize


329 #¥agm®
wók
 
__±hªad_©f‹k


330 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


331 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


332 #¥agm®
wók
 
_±hªad_˛ónup_push


333 #¥agm®
wók
 
_±hªad_˛ónup_p›


338 
	#__libc_muãx_u∆ock
 
__±hªad_muãx_u∆ock


	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

562 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

563 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

567 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

568 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

663 
__isoc99_swsˇnf
)

664 
__THROW
 ;

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

718 
__THROW
 ;

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

64 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

65 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

68 
__exã∫_Æways_ölöe
 
wch¨_t
 *

69 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
))

71 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

73 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

74  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

75 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

77 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

78  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

79 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

81  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

82 
	}
}

85 #ifde‡
__USE_GNU


86 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

87 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

88 
size_t
 
__ns1
Ë
__THROW
;

89 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

90 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

91 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

92 
size_t
 
__n
), 
wmemp˝y
);

93 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

94 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

95 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

96 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

97 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

100 
__exã∫_Æways_ölöe
 
wch¨_t
 *

101 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

102 
size_t
 
__n
))

104 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

106 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

107  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

108 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

110 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

111  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

112 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

114  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

115 
	}
}

119 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

120 
size_t
 
__ns
Ë
__THROW
;

121 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

122 
size_t
 
__n
), 
wmem£t
);

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

124 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

125 
size_t
 
__ns
), 
__wmem£t_chk
)

126 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

129 
__exã∫_Æways_ölöe
 
wch¨_t
 *

130 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

132 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

134 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

135  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

137 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

138  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

139 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

141  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

142 
	}
}

145 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

146 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

147 
size_t
 
__n
Ë
__THROW
;

148 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

149 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

150 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

152 
__exã∫_Æways_ölöe
 
wch¨_t
 *

153 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

155 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

156  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

157  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

158 
	}
}

161 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

163 
size_t
 
__de°Àn
Ë
__THROW
;

164 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

165 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

168 
__exã∫_Æways_ölöe
 
wch¨_t
 *

169 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

171 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

172  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

173  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

174 
	}
}

177 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

178 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

179 
size_t
 
__de°Àn
Ë
__THROW
;

180 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

181 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

182 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

183 
size_t
 
__n
), 
wc¢˝y
);

184 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

185 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

186 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

187 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

188 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

191 
__exã∫_Æways_ölöe
 
wch¨_t
 *

192 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

193 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

224 
size_t
 
__n
))

226 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

228 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

229  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

230 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

231 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

232  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

233 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

235  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

236 
	}
}

239 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

240 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

241 
size_t
 
__de°Àn
Ë
__THROW
;

242 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

243 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

244 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

246 
__exã∫_Æways_ölöe
 
wch¨_t
 *

247 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

249 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

250  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

251  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

252 
	}
}

255 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

256 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

257 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

258 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

259 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

260 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

261 
size_t
 
__n
), 
wc¢ˇt
);

263 
__exã∫_Æways_ölöe
 
wch¨_t
 *

264 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

265 
size_t
 
__n
))

267 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

268  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

269 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

270  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

271 
	}
}

274 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

275 
__Êag
, 
size_t
 
__s_Àn
,

276 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

277 
__THROW
 ;

279 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

280 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

281 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

282 
sw¥ötf
);

284 #ifde‡
__va_¨g_∑ck


285 
__exã∫_Æways_ölöe
 

286 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

287 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

289 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

290  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

291 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

292 
__fmt
, 
	`__va_¨g_∑ck
 ());

293  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

294 
	}
}

295 #ñi‡!
deföed
 
__˝lu•lus


297 
	#sw¥ötf
(
s
, 
n
, ...) \

298 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

299 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

300 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

301 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

304 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

305 
__Êag
, 
size_t
 
__s_Àn
,

306 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

307 
__gnuc_va_li°
 
__¨g
)

308 
__THROW
 ;

310 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

311 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

312 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

313 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

315 
__exã∫_Æways_ölöe
 

316 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

317 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

319 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

320  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

321 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

322  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

323 
	}
}

326 #i‡
__USE_FORTIFY_LEVEL
 > 1

328 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

329 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

330 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

333 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

335 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

336 
__gnuc_va_li°
 
__≠
);

338 #ifde‡
__va_¨g_∑ck


339 
__exã∫_Æways_ölöe
 

340 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

342  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

343 
	}
}

345 
__exã∫_Æways_ölöe
 

346 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

348  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

349 
	`__va_¨g_∑ck
 ());

350 
	}
}

351 #ñi‡!
deföed
 
__˝lu•lus


352 
	#w¥ötf
(...) \

353 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

354 
	#fw¥ötf
(
°ªam
, ...) \

355 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

358 
__exã∫_Æways_ölöe
 

359 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

361  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

362 
	}
}

364 
__exã∫_Æways_ölöe
 

365 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

366 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

368  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

369 
	}
}

373 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

374 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

375 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

376 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

377 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

378 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

379 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

380 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

381 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

384 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

385 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

387 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

389 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

390  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

391 
__n
, 
__°ªam
);

393 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

394  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

395 
__n
, 
__°ªam
);

397  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

398 
	}
}

400 #ifde‡
__USE_GNU


401 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

402 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

403 
__wur
;

404 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

405 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

406 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

407 
__wur
;

408 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

409 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

410 
__FILE
 *
__ª°ri˘
 
__°ªam
),

411 
__fgëws_u∆ocked_chk
)

412 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

415 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

416 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

418 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

420 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

421  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

422 
__n
, 
__°ªam
);

424 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

425  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

426 
__n
, 
__°ªam
);

428  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

429 
	}
}

433 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

434 
mb°©e_t
 *
__ª°ri˘
 
__p
,

435 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

436 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

437 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

438 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

440 
__exã∫_Æways_ölöe
 
__wur
 
size_t


441 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

442 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

447 
	#__WCHAR_MB_LEN_MAX
 16

	)

448 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


451 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

452  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

453  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

454 
	}
}

457 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

458 
__c⁄°
 **
__ª°ri˘
 
__§c
,

459 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

460 
size_t
 
__d°Àn
Ë
__THROW
;

461 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

462 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

463 
__c⁄°
 **
__ª°ri˘
 
__§c
,

464 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

465 
mb§towcs
);

466 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

467 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

468 
__c⁄°
 **
__ª°ri˘
 
__§c
,

469 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

470 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

471 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

474 
__exã∫_Æways_ölöe
 
size_t


475 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

476 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

478 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

480 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

481  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

485  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

486 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

488  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

489 
	}
}

492 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

493 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

494 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

495 
size_t
 
__d°Àn
Ë
__THROW
;

496 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

497 (*
__ª°ri˘
 
__d°
,

498 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

499 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

500 
wc§tombs
);

501 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

502 (*
__ª°ri˘
 
__d°
,

503 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

504 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

505 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

506 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

508 
__exã∫_Æways_ölöe
 
size_t


509 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

510 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

512 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

514 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

515  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

517 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

518  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

520  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

521 
	}
}

524 #ifde‡
__USE_GNU


525 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

526 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

527 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

528 
size_t
 
__d°Àn
Ë
__THROW
;

529 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

530 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

531 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

532 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

533 
mb¢πowcs
);

534 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

535 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

536 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

537 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

538 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

539 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

542 
__exã∫_Æways_ölöe
 
size_t


543 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

544 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

546 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

548 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

549  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

553  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

554 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

556  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

557 
	}
}

560 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

561 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

562 
size_t
 
__nwc
, size_à
__Àn
,

563 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

564 
__THROW
;

565 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

566 (*
__ª°ri˘
 
__d°
,

567 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

568 
size_t
 
__nwc
, size_à
__Àn
,

569 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

570 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

571 (*
__ª°ri˘
 
__d°
,

572 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

573 
size_t
 
__nwc
, size_à
__Àn
,

574 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

575 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

576 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

578 
__exã∫_Æways_ölöe
 
size_t


579 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

580 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

582 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

584 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

585  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

589  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

590 
	`__bos
 (
__d°
));

592  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

593 
	}
}

	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@
1
.
1
/usr/include
240
5593
archive/llseek.c
archive/llseek.h
config.h
examples/bsg_queue_tst.c
examples/scsi_inquiry.c
examples/sg__sat_identify.c
examples/sg__sat_phy_event.c
examples/sg__sat_set_features.c
examples/sg_excl.c
examples/sg_iovec_tst.c
examples/sg_queue_tst.c
examples/sg_sat_chk_power.c
examples/sg_sat_smart_rd_data.c
examples/sg_sense_test.c
examples/sg_simple1.c
examples/sg_simple16.c
examples/sg_simple2.c
examples/sg_simple3.c
examples/sg_simple4.c
examples/sg_simple5.c
examples/sg_simple_aio.c
getopt_long/getopt.h
getopt_long/getopt_long.c
include/sg_cmds.h
include/sg_cmds_basic.h
include/sg_cmds_extra.h
include/sg_cmds_mmc.h
include/sg_io_linux.h
include/sg_lib.h
include/sg_lib_data.h
include/sg_linux_inc.h
include/sg_pt.h
include/sg_pt_win32.h
lib/sg_cmds_basic.c
lib/sg_cmds_basic2.c
lib/sg_cmds_extra.c
lib/sg_cmds_mmc.c
lib/sg_io_linux.c
lib/sg_lib.c
lib/sg_lib_data.c
lib/sg_pt_common.c
lib/sg_pt_freebsd.c
lib/sg_pt_linux.c
lib/sg_pt_osf1.c
lib/sg_pt_solaris.c
lib/sg_pt_win32.c
src/sg_compare_and_write.c
src/sg_copy_results.c
src/sg_dd.c
src/sg_decode_sense.c
src/sg_emc_trespass.c
src/sg_format.c
src/sg_get_config.c
src/sg_get_lba_status.c
src/sg_hot_add.c
src/sg_ident.c
src/sg_inq.c
src/sg_inq_data.c
src/sg_logs.c
src/sg_luns.c
src/sg_map.c
src/sg_map26.c
src/sg_modes.c
src/sg_opcodes.c
src/sg_persist.c
src/sg_prevent.c
src/sg_raw.c
src/sg_rbuf.c
src/sg_rdac.c
src/sg_read.c
src/sg_read_block_limits.c
src/sg_read_buffer.c
src/sg_read_long.c
src/sg_readcap.c
src/sg_reassign.c
src/sg_referrals.c
src/sg_requests.c
src/sg_reset.c
src/sg_rmsn.c
src/sg_rtpg.c
src/sg_safte.c
src/sg_sanitize.c
src/sg_sat_identify.c
src/sg_sat_phy_event.c
src/sg_sat_set_features.c
src/sg_scan.c
src/sg_senddiag.c
src/sg_ses.c
src/sg_start.c
src/sg_stpg.c
src/sg_sync.c
src/sg_test_rwbuf.c
src/sg_turs.c
src/sg_unmap.c
src/sg_verify.c
src/sg_vpd.c
src/sg_vpd_vendor.c
src/sg_wr_mode.c
src/sg_write_buffer.c
src/sg_write_long.c
src/sg_write_same.c
src/sg_xcopy.c
src/sginfo.c
src/sgm_dd.c
src/sgp_dd.c
utils/hxascdmp.c
utils/sg_chk_asc.c
utils/tst_sg_lib.c
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/err.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/getopt.h
/usr/include/glob.h
/usr/include/inttypes.h
/usr/include/libaio.h
/usr/include/libgen.h
/usr/include/limits.h
/usr/include/linux/bsg.h
/usr/include/linux/fs.h
/usr/include/linux/hdreg.h
/usr/include/linux/kdev_t.h
/usr/include/linux/major.h
/usr/include/linux/types.h
/usr/include/linux/unistd.h
/usr/include/pthread.h
/usr/include/scsi/scsi.h
/usr/include/scsi/scsi_ioctl.h
/usr/include/scsi/sg.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/file.h
/usr/include/sys/ioctl.h
/usr/include/sys/mman.h
/usr/include/sys/param.h
/usr/include/sys/stat.h
/usr/include/sys/sysmacros.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/syscall.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/asm/types.h
/usr/include/asm/unistd.h
/usr/include/bits/confname.h
/usr/include/bits/dirent.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/mman.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/setjmp.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/libio.h
/usr/include/linux/blk_types.h
/usr/include/linux/ioctl.h
/usr/include/linux/limits.h
/usr/include/linux/param.h
/usr/include/linux/posix_types.h
/usr/include/sched.h
/usr/include/sys/cdefs.h
/usr/include/sys/select.h
/usr/include/sys/syscall.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm-generic/types.h
/usr/include/asm/ioctl.h
/usr/include/asm/ioctls.h
/usr/include/asm/param.h
/usr/include/asm/posix_types.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/sched.h
/usr/include/bits/select.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/syscall.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/linux/stddef.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm-generic/param.h
/usr/include/asm/errno.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-64.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm/bitsperlong.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/wctype.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/asm-generic/errno-base.h
